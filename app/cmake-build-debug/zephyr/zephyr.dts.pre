# 1 "/home/rts/zephyr-rts-master/zephyr/misc/empty_file.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/rts/zephyr-rts-master/zephyr/boards/arm/nucleo_l452re/nucleo_l452re.dts" 1







/dts-v1/;
# 1 "/home/rts/zephyr-rts-master/zephyr/boards/arm/nucleo_l452re/nucleo_l452re_common.dtsi" 1







/dts-v1/;
# 1 "/home/rts/zephyr-rts-master/zephyr/dts/arm/st/l4/stm32l452Xe.dtsi" 1 3 4






# 1 "/home/rts/zephyr-rts-master/zephyr/dts/common/mem.h" 1 3 4
# 8 "/home/rts/zephyr-rts-master/zephyr/dts/arm/st/l4/stm32l452Xe.dtsi" 2 3 4
# 1 "/home/rts/zephyr-rts-master/zephyr/dts/arm/st/l4/stm32l452.dtsi" 1 3 4






# 1 "/home/rts/zephyr-rts-master/zephyr/dts/arm/st/l4/stm32l4.dtsi" 1 3 4
# 9 "/home/rts/zephyr-rts-master/zephyr/dts/arm/st/l4/stm32l4.dtsi" 3 4
# 1 "/home/rts/zephyr-rts-master/zephyr/dts/arm/armv7-m.dtsi" 1 3 4


# 1 "/home/rts/zephyr-rts-master/zephyr/dts/common/skeleton.dtsi" 1 3 4
# 9 "/home/rts/zephyr-rts-master/zephyr/dts/common/skeleton.dtsi" 3 4
/ {
 #address-cells = <1>;
 #size-cells = <1>;
 chosen { };
 aliases { };
};
# 4 "/home/rts/zephyr-rts-master/zephyr/dts/arm/armv7-m.dtsi" 2 3 4

/ {
 soc {
  #address-cells = <1>;
  #size-cells = <1>;
  compatible = "simple-bus";
  interrupt-parent = <&nvic>;
  ranges;

  nvic: interrupt-controller@e000e100 {
   #address-cells = <1>;
   compatible = "arm,v7m-nvic";
   reg = <0xe000e100 0xc00>;
   interrupt-controller;
   #interrupt-cells = <2>;
  };

  systick: timer@e000e010 {
   compatible = "arm,armv7m-systick";
   reg = <0xe000e010 0x10>;
  };
 };
};
# 10 "/home/rts/zephyr-rts-master/zephyr/dts/arm/st/l4/stm32l4.dtsi" 2 3 4
# 1 "/home/rts/zephyr-rts-master/zephyr/include/dt-bindings/clock/stm32_clock.h" 1 3 4
# 11 "/home/rts/zephyr-rts-master/zephyr/dts/arm/st/l4/stm32l4.dtsi" 2 3 4
# 1 "/home/rts/zephyr-rts-master/zephyr/include/dt-bindings/i2c/i2c.h" 1 3 4
# 12 "/home/rts/zephyr-rts-master/zephyr/dts/arm/st/l4/stm32l4.dtsi" 2 3 4
# 1 "/home/rts/zephyr-rts-master/zephyr/include/dt-bindings/gpio/gpio.h" 1 3 4
# 13 "/home/rts/zephyr-rts-master/zephyr/dts/arm/st/l4/stm32l4.dtsi" 2 3 4
# 1 "/home/rts/zephyr-rts-master/zephyr/include/dt-bindings/pwm/pwm.h" 1 3 4
# 14 "/home/rts/zephyr-rts-master/zephyr/dts/arm/st/l4/stm32l4.dtsi" 2 3 4
# 1 "/home/rts/zephyr-rts-master/zephyr/dts/common/freq.h" 1 3 4
# 15 "/home/rts/zephyr-rts-master/zephyr/dts/arm/st/l4/stm32l4.dtsi" 2 3 4

/ {
 chosen {
  zephyr,entropy = &rng;
  zephyr,flash-controller = &flash;
 };

 cpus {
  #address-cells = <1>;
  #size-cells = <0>;

  cpu0: cpu@0 {
   device_type = "cpu";
   compatible = "arm,cortex-m4f";
   reg = <0>;
  };
 };

 sram0: memory@20000000 {
  compatible = "mmio-sram";
 };

 clocks {
  clk_hse: clk-hse {
   #clock-cells = <0>;
   compatible = "st,stm32-hse-clock";
   status = "disabled";
  };

  clk_hsi: clk-hsi {
   #clock-cells = <0>;
   compatible = "fixed-clock";
   clock-frequency = <((16) * 1000 * 1000)>;
   status = "disabled";
  };

  clk_msi: clk-msi {
   #clock-cells = <0>;
   compatible = "st,stm32-msi-clock";
   msi-range = <6>;
   status = "disabled";
  };

  clk_lse: clk-lse {
   #clock-cells = <0>;
   compatible = "fixed-clock";
   clock-frequency = <32768>;
   status = "disabled";
  };

  clk_lsi: clk-lsi {
   #clock-cells = <0>;
   compatible = "fixed-clock";
   clock-frequency = <((32) * 1000)>;
   status = "disabled";
  };

  pll: pll {
   #clock-cells = <0>;
   compatible = "st,stm32l4-pll-clock";
   status = "disabled";
  };
 };

 soc {
  flash: flash-controller@40022000 {
   compatible = "st,stm32-flash-controller", "st,stm32l4-flash-controller";
   label = "FLASH_CTRL";
   reg = <0x40022000 0x400>;
   interrupts = <4 0>;
   clocks = <&rcc 0 0x00000100>;

   #address-cells = <1>;
   #size-cells = <1>;

   flash0: flash@8000000 {
    compatible = "st,stm32-nv-flash", "soc-nv-flash";
    label = "FLASH_STM32";

    write-block-size = <8>;
    erase-block-size = <2048>;

    max-erase-time = <25>;
   };
  };

  rcc: rcc@40021000 {
   compatible = "st,stm32-rcc";
   #clock-cells = <2>;
   reg = <0x40021000 0x400>;
  };

  exti: interrupt-controller@40010400 {
   compatible = "st,stm32-exti";
   interrupt-controller;
   #interrupt-cells = <1>;
   reg = <0x40010400 0x400>;
  };

  pinctrl: pin-controller@48000000 {
   compatible = "st,stm32-pinctrl";
   #address-cells = <1>;
   #size-cells = <1>;
   reg = <0x48000000 0x2000>;

   gpioa: gpio@48000000 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48000000 0x400>;
    clocks = <&rcc 1 0x00000001>;
    label = "GPIOA";
   };

   gpiob: gpio@48000400 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48000400 0x400>;
    clocks = <&rcc 1 0x00000002>;
    label = "GPIOB";
   };

   gpioc: gpio@48000800 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48000800 0x400>;
    clocks = <&rcc 1 0x00000004>;
    label = "GPIOC";
   };

   gpioh: gpio@48001c00 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48001c00 0x400>;
    clocks = <&rcc 1 0x00000080>;
    label = "GPIOH";
   };
  };

  iwdg: watchdog@40003000 {
   compatible = "st,stm32-watchdog";
   reg = <0x40003000 0x400>;
   label = "IWDG";
   status = "disabled";
  };

  wwdg: watchdog@40002c00 {
   compatible = "st,stm32-window-watchdog";
   reg = <0x40002C00 0x400>;
   clocks = <&rcc 2 0x00000800>;
   label = "WWDG";
   interrupts = <0 7>;
   status = "disabled";
  };

  usart1: serial@40013800 {
   compatible = "st,stm32-usart", "st,stm32-uart";
   reg = <0x40013800 0x400>;
   clocks = <&rcc 3 0x00004000>;
   interrupts = <37 0>;
   status = "disabled";
   label = "UART_1";
  };

  usart2: serial@40004400 {
   compatible = "st,stm32-usart", "st,stm32-uart";
   reg = <0x40004400 0x400>;
   clocks = <&rcc 2 0x00020000>;
   interrupts = <38 0>;
   status = "disabled";
   label = "UART_2";
  };

  lpuart1: serial@40008000 {
   compatible = "st,stm32-lpuart", "st,stm32-uart";
   reg = <0x40008000 0x400>;
   clocks = <&rcc 4 0x00000001>;
   interrupts = <70 0>;
   status = "disabled";
   label = "LPUART_1";
  };

  i2c1: i2c@40005400 {
   compatible = "st,stm32-i2c-v2";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40005400 0x400>;
   clocks = <&rcc 2 0x00200000>;
   interrupts = <31 0>, <32 0>;
   interrupt-names = "event", "error";
   status = "disabled";
   label= "I2C_1";
  };

  i2c3: i2c@40005c00 {
   compatible = "st,stm32-i2c-v2";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40005c00 0x400>;
   clocks = <&rcc 2 0x00800000>;
   interrupts = <72 0>, <73 0>;
   interrupt-names = "event", "error";
   status = "disabled";
   label= "I2C_3";
  };

  quadspi: quadspi@a0001000 {
   compatible = "st,stm32-qspi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0xa0001000 0x400>;
   interrupts = <71 0>;
   clocks = <&rcc 6 0x00000100>;
   status = "disabled";
   label = "QUADSPI";
  };

  spi1: spi@40013000 {
   compatible = "st,stm32-spi-fifo", "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40013000 0x400>;
   interrupts = <35 5>;
   clocks = <&rcc 3 0x00001000>;
   status = "disabled";
   label = "SPI_1";
  };


  timers1: timers@40012c00 {
   compatible = "st,stm32-timers";
   reg = <0x40012c00 0x400>;
   clocks = <&rcc 3 0x00000800>;
   interrupts = <24 0>, <25 0>, <26 0>, <27 0>;
   interrupt-names = "brk", "up", "trgcom", "cc";
   st,prescaler = <0>;
   status = "disabled";
   label = "TIMERS_1";

   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    label = "PWM_1";
    #pwm-cells = <3>;
   };
  };

  timers2: timers@40000000 {
   compatible = "st,stm32-timers";
   reg = <0x40000000 0x400>;
   clocks = <&rcc 2 0x00000001>;
   interrupts = <28 0>;
   interrupt-names = "global";
   st,prescaler = <0>;
   status = "disabled";
   label = "TIMERS_2";

   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    label = "PWM_2";
    #pwm-cells = <3>;
   };
  };

  timers6: timers@40001000 {
   compatible = "st,stm32-timers";
   reg = <0x40001000 0x400>;
   clocks = <&rcc 2 0x00000010>;
   interrupts = <54 0>;
   interrupt-names = "global";
   st,prescaler = <0>;
   status = "disabled";
   label = "TIMERS_6";
  };

  timers15: timers@40014000 {
   compatible = "st,stm32-timers";
   reg = <0x40014000 0x400>;
   clocks = <&rcc 3 0x00010000>;
   interrupts = <24 0>;
   interrupt-names = "global";
   st,prescaler = <0>;
   status = "disabled";
   label = "TIMERS_15";

   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    label = "PWM_15";
    #pwm-cells = <3>;
   };
  };

  timers16: timers@40014400 {
   compatible = "st,stm32-timers";
   reg = <0x40014400 0x400>;
   clocks = <&rcc 3 0x00020000>;
   interrupts = <25 0>;
   interrupt-names = "global";
   st,prescaler = <0>;
   status = "disabled";
   label = "TIMERS_16";

   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    label = "PWM_16";
    #pwm-cells = <3>;
   };
  };

  rtc: rtc@40002800 {
   compatible = "st,stm32-rtc";
   reg = <0x40002800 0x400>;
   interrupts = <41 0>;
   clocks = <&rcc 2 0x10000000>;
   prescaler = <32768>;
   status = "disabled";
   label = "RTC_0";
  };

  adc1: adc@50040000 {
   compatible = "st,stm32-adc";
   reg = <0x50040000 0x100>;
   clocks = <&rcc 1 0x00002000>;
   interrupts = <18 0>;
   status = "disabled";
   label = "ADC_1";
   #io-channel-cells = <1>;
  };

  adc2: adc@50040100 {
   compatible = "st,stm32-adc";
   reg = <0x50040100 0x100>;
   clocks = <&rcc 1 0x00002000>;
   interrupts = <18 0>;
   status = "disabled";
   label = "ADC_2";
   #io-channel-cells = <1>;
  };

  dma1: dma@40020000 {
   compatible = "st,stm32-dma-v2";
   #dma-cells = <3>;
   reg = <0x40020000 0x400>;
   interrupts = <11 0 12 0 13 0 14 0 15 0 16 0 17 0>;
   clocks = <&rcc 0 0x1>;
   dma-requests = <7>;
   status = "disabled";
   label = "DMA_1";
  };

  dma2: dma@40020400 {
   compatible = "st,stm32-dma-v2";
   #dma-cells = <3>;
   reg = <0x40020400 0x400>;
   interrupts = <56 0 57 0 58 0 59 0 60 0 68 0 69 0>;
   clocks = <&rcc 0 0x2>;
   dma-requests = <7>;
   status = "disabled";
   label = "DMA_2";
  };

  lptim1: timers@40007c00 {
   compatible = "st,stm32-lptim";
   clocks = <&rcc 2 0x80000000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40007c00 0x400>;
   interrupts = <65 1>;
   interrupt-names = "wakeup";
   status = "disabled";
   label = "LPTIM_1";
  };

  rng: rng@50060800 {
   compatible = "st,stm32-rng";
   reg = <0x50060800 0x400>;
   interrupts = <80 0>;
   clocks = <&rcc 1 0x00040000>;
   status = "disabled";
   label = "RNG";
  };
 };
};

&nvic {
 arm,num-irq-priority-bits = <4>;
};
# 8 "/home/rts/zephyr-rts-master/zephyr/dts/arm/st/l4/stm32l452.dtsi" 2 3 4

/ {
 soc {
  pinctrl: pin-controller@48000000 {
   gpiod: gpio@48000c00 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48000c00 0x400>;
    clocks = <&rcc 1 0x00000008>;
    label = "GPIOD";
   };

   gpioe: gpio@48001000 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48001000 0x400>;
    clocks = <&rcc 1 0x00000010>;
    label = "GPIOE";
   };
  };

  usb: usb@40006800 {
   compatible = "st,stm32-usb";
   reg = <0x40006800 0x40000>;
   interrupts = <67 0>;
   interrupt-names = "usb";
   num-bidir-endpoints = <8>;
   ram-size = <1024>;
   maximum-speed = "full-speed";
   phys = <&usb_fs_phy>;
   clocks = <&rcc 2 0x04000000>;
   status = "disabled";
   label = "USB";
  };

  i2c2: i2c@40005800 {
   compatible = "st,stm32-i2c-v2";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40005800 0x400>;
   clocks = <&rcc 2 0x00400000>;
   interrupts = <33 0>, <34 0>;
   interrupt-names = "event", "error";
   status = "disabled";
   label= "I2C_2";
  };

  i2c4: i2c@40008400 {
   compatible = "st,stm32-i2c-v2";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40008400 0x400>;
   clocks = <&rcc 4 0x00000002>;
   interrupts = <83 0>, <84 0>;
   interrupt-names = "event", "error";
   status = "disabled";
   label= "I2C_4";
  };

  spi2: spi@40003800 {
   compatible = "st,stm32-spi-fifo", "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40003800 0x400>;
   clocks = <&rcc 2 0x00004000>;
   interrupts = <36 5>;
   status = "disabled";
   label = "SPI_2";
  };

  spi3: spi@40003c00 {
   compatible = "st,stm32-spi-fifo", "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40003c00 0x400>;
   clocks = <&rcc 2 0x00008000>;
   interrupts = <51 5>;
   status = "disabled";
   label = "SPI_3";
  };

  usart3: serial@40004800 {
   compatible = "st,stm32-usart", "st,stm32-uart";
   reg = <0x40004800 0x400>;
   clocks = <&rcc 2 0x00040000>;
   interrupts = <39 0>;
   status = "disabled";
   label = "UART_3";
  };

  uart4: serial@40004c00 {
   compatible = "st,stm32-uart";
   reg = <0x40004c00 0x400>;
   clocks = <&rcc 2 0x00080000>;
   interrupts = <52 0>;
   status = "disabled";
   label = "UART_4";
  };

  timers3: timers@40000400 {
   compatible = "st,stm32-timers";
   reg = <0x40000400 0x400>;
   clocks = <&rcc 2 0x00000002>;
   interrupts = <29 0>;
   interrupt-names = "global";
   st,prescaler = <0>;
   status = "disabled";
   label = "TIMERS_3";

   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    label = "PWM_3";
    #pwm-cells = <3>;
   };
  };

  dac1: dac@40007400 {
   compatible = "st,stm32-dac";
   reg = <0x40007400 0x400>;
   clocks = <&rcc 2 0x20000000>;
   status = "disabled";
   label = "DAC_1";
   #io-channel-cells = <1>;
  };

  can1: can@40006400 {
   compatible = "st,stm32-can";
   reg = <0x40006400 0x400>;
   interrupts = <19 0>, <20 0>, <21 0>, <22 0>;
   interrupt-names = "TX", "RX0", "RX1", "SCE";
   clocks = <&rcc 2 0x02000000>;
   status = "disabled";
   label = "CAN_1";
   bus-speed = <125000>;
   sjw = <1>;
   prop-seg = <0>;
   phase-seg1 = <4>;
   phase-seg2 = <5>;
  };
 };

 usb_fs_phy: usbphy {
  compatible = "usb-nop-xceiv";
  #phy-cells = <0>;
  label = "USB_FS_PHY";
 };
};
# 9 "/home/rts/zephyr-rts-master/zephyr/dts/arm/st/l4/stm32l452Xe.dtsi" 2 3 4

/ {
 sram0: memory@20000000 {
  reg = <0x20000000 ((160) * 1024)>;
 };

 soc {
  flash-controller@40022000 {
   flash0: flash@8000000 {
    reg = <0x08000000 ((512) * 1024)>;
   };
  };
 };
};
# 10 "/home/rts/zephyr-rts-master/zephyr/boards/arm/nucleo_l452re/nucleo_l452re_common.dtsi" 2
# 1 "/home/rts/zephyr-rts-master/zephyr/boards/arm/nucleo_l452re/arduino_r3_connector.dtsi" 1






/ {
 arduino_header: connector {
  compatible = "arduino-header-r3";
  #gpio-cells = <2>;
  gpio-map-mask = <0xffffffff 0xffffffc0>;
  gpio-map-pass-thru = <0 0x3f>;
  gpio-map = <0 0 &gpioa 0 0>,
      <1 0 &gpioa 1 0>,
      <2 0 &gpioa 4 0>,
      <3 0 &gpiob 0 0>,
      <4 0 &gpioc 1 0>,
      <5 0 &gpioc 0 0>,
      <6 0 &gpioa 3 0>,
      <7 0 &gpioa 2 0>,
      <8 0 &gpioa 10 0>,
      <9 0 &gpiob 3 0>,
      <10 0 &gpiob 5 0>,
      <11 0 &gpiob 4 0>,
      <12 0 &gpiob 10 0>,
      <13 0 &gpioa 8 0>,
      <14 0 &gpioa 9 0>,
      <15 0 &gpioc 7 0>,
      <16 0 &gpiob 6 0>,
      <17 0 &gpioa 7 0>,
      <18 0 &gpioa 6 0>,
      <19 0 &gpioa 5 0>,
      <20 0 &gpiob 9 0>,
      <21 0 &gpiob 8 0>;
 };
};

arduino_i2c: &i2c1 {};
arduino_spi: &spi1 {};
# 11 "/home/rts/zephyr-rts-master/zephyr/boards/arm/nucleo_l452re/nucleo_l452re_common.dtsi" 2

/ {
 model = "STMicroelectronics STM32L452RE-NUCLEO board";
 compatible = "st,stm32l452re-nucleo";

 chosen {
  zephyr,console = &usart2;
  zephyr,shell-uart = &usart2;
  zephyr,sram = &sram0;
  zephyr,flash = &flash0;
  zephyr,canbus = &can1;
 };

 gpio_keys {
  compatible = "gpio-keys";
  user_button: button {
   label = "User";
   gpios = <&gpioc 13 (1 << 0)>;
  };
 };

 aliases {
  sw0 = &user_button;
 };
};

&clk_hsi {
 status = "okay";
};

&pll {
 div-m = <1>;
 mul-n = <20>;
 div-p = <7>;
 div-q = <2>;
 div-r = <4>;
 clocks = <&clk_hsi>;
 status = "okay";
};

&rcc {
 clocks = <&pll>;
 clock-frequency = <((80) * 1000 * 1000)>;
 ahb-prescaler = <1>;
 apb1-prescaler = <1>;
 apb2-prescaler = <1>;
};

&usart1 {
 pinctrl-0 = <&usart1_tx_pa9 &usart1_rx_pa10>;
 pinctrl-names = "default";
 current-speed = <115200>;
};

&usart2 {
 pinctrl-0 = <&usart2_tx_pa2 &usart2_rx_pa3>;
 pinctrl-names = "default";
 current-speed = <115200>;
 status = "okay";
};

&spi1 {
 pinctrl-0 = <&spi1_sck_pa5 &spi1_miso_pa6 &spi1_mosi_pa7>;
 pinctrl-names = "default";
 cs-gpios = <&gpiob 6 ((1 << 0) | (1 << 4))>;
 status = "okay";
};

&i2c1 {
 pinctrl-0 = <&i2c1_scl_pb8 &i2c1_sda_pb7>;
 pinctrl-names = "default";
 clock-frequency = <400000>;
 status = "okay";
};

&timers2 {
 status = "okay";

 pwm2: pwm {
  status = "okay";
  pinctrl-0 = <&tim2_ch1_pa0>;
  pinctrl-names = "default";
 };
};

&can1 {
 pinctrl-0 = <&can1_rx_pa11 &can1_tx_pa12>;
 pinctrl-names = "default";
 bus-speed = <125000>;
 status = "okay";
};

&rtc {
 status = "okay";
};

&flash0 {




 partitions {
  compatible = "fixed-partitions";
  #address-cells = <1>;
  #size-cells = <1>;



  storage_partition: partition@7c000 {
   label = "storage";
   reg = <0x0007c000 0x00008000>;
  };
 };
};
# 10 "/home/rts/zephyr-rts-master/zephyr/boards/arm/nucleo_l452re/nucleo_l452re.dts" 2
# 1 "/home/rts/zephyr-rts-master/modules/hal/stm32/dts/st/l4/stm32l452r(c-e)tx-pinctrl.dtsi" 1 3 4






# 1 "/home/rts/zephyr-rts-master/zephyr/include/dt-bindings/pinctrl/stm32-pinctrl.h" 1 3 4
# 10 "/home/rts/zephyr-rts-master/zephyr/include/dt-bindings/pinctrl/stm32-pinctrl.h" 3 4
# 1 "/home/rts/zephyr-rts-master/zephyr/include/dt-bindings/pinctrl/stm32-pinctrl-common.h" 1 3 4
# 11 "/home/rts/zephyr-rts-master/zephyr/include/dt-bindings/pinctrl/stm32-pinctrl.h" 2 3 4
# 8 "/home/rts/zephyr-rts-master/modules/hal/stm32/dts/st/l4/stm32l452r(c-e)tx-pinctrl.dtsi" 2 3 4

/ {
 soc {
  pinctrl: pin-controller@48000000 {



   adc1_in5_pa0: adc1_in5_pa0 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((0) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in6_pa1: adc1_in6_pa1 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in7_pa2: adc1_in7_pa2 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((2) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in8_pa3: adc1_in8_pa3 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((3) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in9_pa4: adc1_in9_pa4 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((4) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in10_pa5: adc1_in10_pa5 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((5) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in11_pa6: adc1_in11_pa6 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in12_pa7: adc1_in12_pa7 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((7) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in15_pb0: adc1_in15_pb0 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((0) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in16_pb1: adc1_in16_pb1 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in1_pc0: adc1_in1_pc0 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((0) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in2_pc1: adc1_in2_pc1 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in3_pc2: adc1_in3_pc2 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((2) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in4_pc3: adc1_in4_pc3 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((3) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in13_pc4: adc1_in13_pc4 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((4) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };

   adc1_in14_pc5: adc1_in14_pc5 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((5) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };



   can1_rx_pa11: can1_rx_pa11 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0x9) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   can1_rx_pb5: can1_rx_pb5 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((5) & 0xFU) << 5U) | (((0x3) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   can1_rx_pb8: can1_rx_pb8 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((8) & 0xFU) << 5U) | (((0x9) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   can1_rx_pb12: can1_rx_pb12 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((12) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
    bias-pull-up;
   };



   can1_tx_pa12: can1_tx_pa12 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((12) & 0xFU) << 5U) | (((0x9) & 0x1FU) << 0U))>;
   };

   can1_tx_pb6: can1_tx_pb6 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
   };

   can1_tx_pb9: can1_tx_pb9 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((9) & 0xFU) << 5U) | (((0x9) & 0x1FU) << 0U))>;
   };

   can1_tx_pb13: can1_tx_pb13 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((13) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
   };



   dac1_out1_pa4: dac1_out1_pa4 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((4) & 0xFU) << 5U) | (((0x10) & 0x1FU) << 0U))>;
   };



   i2c1_scl_pa9: i2c1_scl_pa9 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((9) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c1_scl_pb6: i2c1_scl_pb6 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c1_scl_pb8: i2c1_scl_pb8 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((8) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c2_scl_pb10: i2c2_scl_pb10 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c2_scl_pb13: i2c2_scl_pb13 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((13) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c3_scl_pa7: i2c3_scl_pa7 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((7) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c3_scl_pc0: i2c3_scl_pc0 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((0) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c4_scl_pb6: i2c4_scl_pb6 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c4_scl_pb10: i2c4_scl_pb10 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0x3) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c4_scl_pc0: i2c4_scl_pc0 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((0) & 0xFU) << 5U) | (((0x2) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };



   i2c1_sda_pa10: i2c1_sda_pa10 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c1_sda_pb7: i2c1_sda_pb7 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((7) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c1_sda_pb9: i2c1_sda_pb9 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((9) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c2_sda_pb11: i2c2_sda_pb11 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c2_sda_pb14: i2c2_sda_pb14 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((14) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c3_sda_pb4: i2c3_sda_pb4 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((4) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c3_sda_pc1: i2c3_sda_pc1 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x4) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c4_sda_pb7: i2c4_sda_pb7 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((7) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c4_sda_pb11: i2c4_sda_pb11 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0x3) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   i2c4_sda_pc1: i2c4_sda_pc1 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x2) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };



   quadspi_bk1_ncs_pa2: quadspi_bk1_ncs_pa2 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((2) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
    slew-rate = "very-high-speed";
   };

   quadspi_clk_pa3: quadspi_clk_pa3 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((3) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
    slew-rate = "very-high-speed";
   };

   quadspi_bk1_io3_pa6: quadspi_bk1_io3_pa6 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
    slew-rate = "very-high-speed";
   };

   quadspi_bk1_io2_pa7: quadspi_bk1_io2_pa7 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((7) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
    slew-rate = "very-high-speed";
   };

   quadspi_bk1_io1_pb0: quadspi_bk1_io1_pb0 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((0) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
    slew-rate = "very-high-speed";
   };

   quadspi_bk1_io0_pb1: quadspi_bk1_io0_pb1 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
    slew-rate = "very-high-speed";
   };

   quadspi_clk_pb10: quadspi_clk_pb10 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
    slew-rate = "very-high-speed";
   };

   quadspi_bk1_ncs_pb11: quadspi_bk1_ncs_pb11 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
    slew-rate = "very-high-speed";
   };



   sdmmc1_d4_pb8: sdmmc1_d4_pb8 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((8) & 0xFU) << 5U) | (((0xc) & 0x1FU) << 0U))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };

   sdmmc1_d5_pb9: sdmmc1_d5_pb9 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((9) & 0xFU) << 5U) | (((0xc) & 0x1FU) << 0U))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };

   sdmmc1_d6_pc6: sdmmc1_d6_pc6 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0xc) & 0x1FU) << 0U))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };

   sdmmc1_d7_pc7: sdmmc1_d7_pc7 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((7) & 0xFU) << 5U) | (((0xc) & 0x1FU) << 0U))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };

   sdmmc1_d0_pc8: sdmmc1_d0_pc8 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((8) & 0xFU) << 5U) | (((0xc) & 0x1FU) << 0U))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };

   sdmmc1_d1_pc9: sdmmc1_d1_pc9 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((9) & 0xFU) << 5U) | (((0xc) & 0x1FU) << 0U))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };

   sdmmc1_d2_pc10: sdmmc1_d2_pc10 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0xc) & 0x1FU) << 0U))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };

   sdmmc1_d3_pc11: sdmmc1_d3_pc11 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0xc) & 0x1FU) << 0U))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };

   sdmmc1_ck_pc12: sdmmc1_ck_pc12 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((12) & 0xFU) << 5U) | (((0xc) & 0x1FU) << 0U))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };

   sdmmc1_cmd_pd2: sdmmc1_cmd_pd2 {
    pinmux = <((((('D') - 'A') & 0xFU) << 9U) | (((2) & 0xFU) << 5U) | (((0xc) & 0x1FU) << 0U))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };



   spi1_miso_pa6: spi1_miso_pa6 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
   };

   spi1_miso_pa11: spi1_miso_pa11 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
   };

   spi1_miso_pb4: spi1_miso_pb4 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((4) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
   };

   spi2_miso_pb14: spi2_miso_pb14 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((14) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
   };

   spi2_miso_pc2: spi2_miso_pc2 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((2) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
   };

   spi3_miso_pb4: spi3_miso_pb4 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((4) & 0xFU) << 5U) | (((0x6) & 0x1FU) << 0U))>;
    bias-pull-down;
   };

   spi3_miso_pc11: spi3_miso_pc11 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0x6) & 0x1FU) << 0U))>;
    bias-pull-down;
   };



   spi1_mosi_pa7: spi1_mosi_pa7 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((7) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
   };

   spi1_mosi_pa12: spi1_mosi_pa12 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((12) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
   };

   spi1_mosi_pb5: spi1_mosi_pb5 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((5) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
   };

   spi2_mosi_pb15: spi2_mosi_pb15 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((15) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
   };

   spi2_mosi_pc3: spi2_mosi_pc3 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((3) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
   };

   spi3_mosi_pb5: spi3_mosi_pb5 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((5) & 0xFU) << 5U) | (((0x6) & 0x1FU) << 0U))>;
    bias-pull-down;
   };

   spi3_mosi_pc12: spi3_mosi_pc12 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((12) & 0xFU) << 5U) | (((0x6) & 0x1FU) << 0U))>;
    bias-pull-down;
   };



   spi1_nss_pa4: spi1_nss_pa4 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((4) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   spi1_nss_pa15: spi1_nss_pa15 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((15) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   spi1_nss_pb0: spi1_nss_pb0 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((0) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   spi2_nss_pb9: spi2_nss_pb9 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((9) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   spi2_nss_pb12: spi2_nss_pb12 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((12) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   spi3_nss_pa4: spi3_nss_pa4 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((4) & 0xFU) << 5U) | (((0x6) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   spi3_nss_pa15: spi3_nss_pa15 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((15) & 0xFU) << 5U) | (((0x6) & 0x1FU) << 0U))>;
    bias-pull-up;
   };



   spi1_sck_pa1: spi1_sck_pa1 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };

   spi1_sck_pa5: spi1_sck_pa5 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((5) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };

   spi1_sck_pb3: spi1_sck_pb3 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((3) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };

   spi2_sck_pb10: spi2_sck_pb10 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };

   spi2_sck_pb13: spi2_sck_pb13 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((13) & 0xFU) << 5U) | (((0x5) & 0x1FU) << 0U))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };

   spi3_sck_pb3: spi3_sck_pb3 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((3) & 0xFU) << 5U) | (((0x6) & 0x1FU) << 0U))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };

   spi3_sck_pc10: spi3_sck_pc10 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0x6) & 0x1FU) << 0U))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };



   tim1_ch1n_pa7: tim1_ch1n_pa7 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((7) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim1_ch1_pa8: tim1_ch1_pa8 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((8) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim1_ch2_pa9: tim1_ch2_pa9 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((9) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim1_ch3_pa10: tim1_ch3_pa10 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim1_ch4_pa11: tim1_ch4_pa11 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim1_ch2n_pb0: tim1_ch2n_pb0 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((0) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim1_ch3n_pb1: tim1_ch3n_pb1 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim1_ch1n_pb13: tim1_ch1n_pb13 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((13) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim1_ch2n_pb14: tim1_ch2n_pb14 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((14) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim1_ch3n_pb15: tim1_ch3n_pb15 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((15) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim2_ch1_pa0: tim2_ch1_pa0 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((0) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim2_ch2_pa1: tim2_ch2_pa1 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim2_ch3_pa2: tim2_ch3_pa2 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((2) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim2_ch4_pa3: tim2_ch4_pa3 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((3) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim2_ch1_pa5: tim2_ch1_pa5 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((5) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim2_ch1_pa15: tim2_ch1_pa15 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((15) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim2_ch2_pb3: tim2_ch2_pb3 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((3) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim2_ch3_pb10: tim2_ch3_pb10 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim2_ch4_pb11: tim2_ch4_pb11 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0x1) & 0x1FU) << 0U))>;
   };

   tim3_ch1_pa6: tim3_ch1_pa6 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0x2) & 0x1FU) << 0U))>;
   };

   tim3_ch2_pa7: tim3_ch2_pa7 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((7) & 0xFU) << 5U) | (((0x2) & 0x1FU) << 0U))>;
   };

   tim3_ch3_pb0: tim3_ch3_pb0 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((0) & 0xFU) << 5U) | (((0x2) & 0x1FU) << 0U))>;
   };

   tim3_ch4_pb1: tim3_ch4_pb1 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x2) & 0x1FU) << 0U))>;
   };

   tim3_ch1_pb4: tim3_ch1_pb4 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((4) & 0xFU) << 5U) | (((0x2) & 0x1FU) << 0U))>;
   };

   tim3_ch2_pb5: tim3_ch2_pb5 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((5) & 0xFU) << 5U) | (((0x2) & 0x1FU) << 0U))>;
   };

   tim3_ch1_pc6: tim3_ch1_pc6 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0x2) & 0x1FU) << 0U))>;
   };

   tim3_ch2_pc7: tim3_ch2_pc7 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((7) & 0xFU) << 5U) | (((0x2) & 0x1FU) << 0U))>;
   };

   tim3_ch3_pc8: tim3_ch3_pc8 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((8) & 0xFU) << 5U) | (((0x2) & 0x1FU) << 0U))>;
   };

   tim3_ch4_pc9: tim3_ch4_pc9 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((9) & 0xFU) << 5U) | (((0x2) & 0x1FU) << 0U))>;
   };

   tim15_ch1n_pa1: tim15_ch1n_pa1 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0xe) & 0x1FU) << 0U))>;
   };

   tim15_ch1_pa2: tim15_ch1_pa2 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((2) & 0xFU) << 5U) | (((0xe) & 0x1FU) << 0U))>;
   };

   tim15_ch2_pa3: tim15_ch2_pa3 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((3) & 0xFU) << 5U) | (((0xe) & 0x1FU) << 0U))>;
   };

   tim15_ch1n_pb13: tim15_ch1n_pb13 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((13) & 0xFU) << 5U) | (((0xe) & 0x1FU) << 0U))>;
   };

   tim15_ch1_pb14: tim15_ch1_pb14 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((14) & 0xFU) << 5U) | (((0xe) & 0x1FU) << 0U))>;
   };

   tim15_ch2_pb15: tim15_ch2_pb15 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((15) & 0xFU) << 5U) | (((0xe) & 0x1FU) << 0U))>;
   };

   tim16_ch1_pa6: tim16_ch1_pa6 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0xe) & 0x1FU) << 0U))>;
   };

   tim16_ch1n_pb6: tim16_ch1n_pb6 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0xe) & 0x1FU) << 0U))>;
   };

   tim16_ch1_pb8: tim16_ch1_pb8 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((8) & 0xFU) << 5U) | (((0xe) & 0x1FU) << 0U))>;
   };



   lpuart1_cts_pa6: lpuart1_cts_pa6 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   usart1_cts_pa11: usart1_cts_pa11 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   usart1_cts_pb4: usart1_cts_pb4 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((4) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   lpuart1_cts_pb13: lpuart1_cts_pb13 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((13) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   usart2_cts_pa0: usart2_cts_pa0 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((0) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   usart3_cts_pa6: usart3_cts_pa6 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   usart3_cts_pb13: usart3_cts_pb13 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((13) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   uart4_cts_pb7: uart4_cts_pb7 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((7) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };



   usart1_rts_pa12: usart1_rts_pa12 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((12) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   lpuart1_rts_pb1: lpuart1_rts_pb1 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   usart1_rts_pb3: usart1_rts_pb3 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((3) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   lpuart1_rts_pb12: lpuart1_rts_pb12 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((12) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   usart2_rts_pa1: usart2_rts_pa1 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   usart3_rts_pa15: usart3_rts_pa15 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((15) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   usart3_rts_pb1: usart3_rts_pb1 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   usart3_rts_pb14: usart3_rts_pb14 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((14) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   usart3_rts_pd2: usart3_rts_pd2 {
    pinmux = <((((('D') - 'A') & 0xFU) << 9U) | (((2) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };

   uart4_rts_pa15: uart4_rts_pa15 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((15) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
    bias-pull-up;
    drive-open-drain;
   };



   lpuart1_rx_pa3: lpuart1_rx_pa3 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((3) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
   };

   usart1_rx_pa10: usart1_rx_pa10 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
   };

   usart1_rx_pb7: usart1_rx_pb7 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((7) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
   };

   lpuart1_rx_pb10: lpuart1_rx_pb10 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
   };

   lpuart1_rx_pc0: lpuart1_rx_pc0 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((0) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
   };

   usart2_rx_pa3: usart2_rx_pa3 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((3) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
   };

   usart2_rx_pa15: usart2_rx_pa15 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((15) & 0xFU) << 5U) | (((0x3) & 0x1FU) << 0U))>;
   };

   usart3_rx_pb11: usart3_rx_pb11 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
   };

   usart3_rx_pc5: usart3_rx_pc5 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((5) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
   };

   usart3_rx_pc11: usart3_rx_pc11 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
   };

   uart4_rx_pa1: uart4_rx_pa1 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
   };

   uart4_rx_pc11: uart4_rx_pc11 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
   };



   lpuart1_tx_pa2: lpuart1_tx_pa2 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((2) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   usart1_tx_pa9: usart1_tx_pa9 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((9) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   usart1_tx_pb6: usart1_tx_pb6 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((6) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   lpuart1_tx_pb11: lpuart1_tx_pb11 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   lpuart1_tx_pc1: lpuart1_tx_pc1 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((1) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   usart2_tx_pa2: usart2_tx_pa2 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((2) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   usart3_tx_pb10: usart3_tx_pb10 {
    pinmux = <((((('B') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   usart3_tx_pc4: usart3_tx_pc4 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((4) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   usart3_tx_pc10: usart3_tx_pc10 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0x7) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   uart4_tx_pa0: uart4_tx_pa0 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((0) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
    bias-pull-up;
   };

   uart4_tx_pc10: uart4_tx_pc10 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((10) & 0xFU) << 5U) | (((0x8) & 0x1FU) << 0U))>;
    bias-pull-up;
   };



   usb_dm_pa11: usb_dm_pa11 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((11) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
   };

   usb_dp_pa12: usb_dp_pa12 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((12) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
   };

   usb_noe_pa13: usb_noe_pa13 {
    pinmux = <((((('A') - 'A') & 0xFU) << 9U) | (((13) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
   };

   usb_noe_pc9: usb_noe_pc9 {
    pinmux = <((((('C') - 'A') & 0xFU) << 9U) | (((9) & 0xFU) << 5U) | (((0xa) & 0x1FU) << 0U))>;
   };

  };
 };
};
# 11 "/home/rts/zephyr-rts-master/zephyr/boards/arm/nucleo_l452re/nucleo_l452re.dts" 2
# 1 "/home/rts/zephyr-rts-master/zephyr/boards/arm/nucleo_l452re/arduino_r3_connector.dtsi" 1






/ {
 arduino_header: connector {
  compatible = "arduino-header-r3";
  #gpio-cells = <2>;
  gpio-map-mask = <0xffffffff 0xffffffc0>;
  gpio-map-pass-thru = <0 0x3f>;
  gpio-map = <0 0 &gpioa 0 0>,
      <1 0 &gpioa 1 0>,
      <2 0 &gpioa 4 0>,
      <3 0 &gpiob 0 0>,
      <4 0 &gpioc 1 0>,
      <5 0 &gpioc 0 0>,
      <6 0 &gpioa 3 0>,
      <7 0 &gpioa 2 0>,
      <8 0 &gpioa 10 0>,
      <9 0 &gpiob 3 0>,
      <10 0 &gpiob 5 0>,
      <11 0 &gpiob 4 0>,
      <12 0 &gpiob 10 0>,
      <13 0 &gpioa 8 0>,
      <14 0 &gpioa 9 0>,
      <15 0 &gpioc 7 0>,
      <16 0 &gpiob 6 0>,
      <17 0 &gpioa 7 0>,
      <18 0 &gpioa 6 0>,
      <19 0 &gpioa 5 0>,
      <20 0 &gpiob 9 0>,
      <21 0 &gpiob 8 0>;
 };
};

arduino_i2c: &i2c1 {};
arduino_spi: &spi1 {};
# 12 "/home/rts/zephyr-rts-master/zephyr/boards/arm/nucleo_l452re/nucleo_l452re.dts" 2

/ {
 model = "STMicroelectronics STM32L452RE-NUCLEO board";
 compatible = "st,stm32l452re-nucleo";

 leds {
  compatible = "gpio-leds";
  green_led: led_0 {
   gpios = <&gpioa 5 (0 << 0)>;
   label = "User LD2";
  };
 };

 aliases {
  led0 = &green_led;
 };
};
# 1 "<command-line>" 2
# 1 "/home/rts/tmp/projects/beacon_project_rzd/service_device/app/boards/nucleo_l452re.overlay" 1






/ {
    gpio_keys {
        compatible = "gpio-keys";
        state_pin: state_pin {
            label = "STATE";
            status = "okay";
            gpios = <&gpioa 0 ((0 << 0) | (1 << 5))>;
        };
    };

    aliases {
        state = &state_pin;
    };
};


&spi1 {
    status = "okay";
    cs-gpios = <&gpiob 6 ((1 << 0))>;
    lora0: sx1278@0 {
        compatible = "semtech,sx1276";
        reg = <0>;
        label = "sx1278";
        reset-gpios = <&gpiob 0 ((1 << 0) | ((1 << 1) | (1 << 2)))>;
        dio-gpios = <&gpioc 0 ((0 << 0) | (1 << 5))>,
                    <&gpioc 1 ((0 << 0) | (1 << 5))>,
                    <&gpioc 2 ((0 << 0) | (1 << 5))>,
                    <&gpioc 3 ((0 << 0) | (1 << 5))>;
        power-amplifier-output = "pa-boost";
        spi-max-frequency = <500000>;
    };
};


&usart1 {
    pinctrl-0 = <&usart1_tx_pa9 &usart1_rx_pa10>;
    pinctrl-names = "default";
    current-speed = <115200>;
    parity = "none";
    dmas = <&dma1 4 2 0x20440>,
           <&dma1 5 2 0x20480>;
    dma-names = "tx","rx";
    status = "okay";
};


&dma1 {
    status = "okay";
};


&clk_hsi {
    status = "okay";
};


&pll {
    status = "okay";
    div-m = <1>;
    mul-n = <20>;
    div-r = <4>;
    clocks = <&clk_hsi>;
};


&rcc {
 status = "okay";
 clocks = <&pll>;
 clock-frequency = <((80) * 1000 * 1000)>;
 ahb-prescaler = <1>;
 apb1-prescaler = <1>;
 apb2-prescaler = <1>;
};
# 1 "<command-line>" 2
# 1 "/home/rts/zephyr-rts-master/zephyr/misc/empty_file.c"
