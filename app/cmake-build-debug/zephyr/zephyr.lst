
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	60 2b 00 20 29 4e 00 08 6d ee 00 08 e1 4d 00 08     `+. )N..m....M..
 8000010:	e1 4d 00 08 e1 4d 00 08 e1 4d 00 08 00 00 00 00     .M...M...M......
	...
 800002c:	2d 41 00 08 e1 4d 00 08 00 00 00 00 d9 40 00 08     -A...M.......@..
 800003c:	91 a9 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000050:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000060:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000070:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000080:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000090:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 80000a0:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 80000b0:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 80000c0:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 80000d0:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 80000e0:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 80000f0:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000100:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000110:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000120:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000130:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000140:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000150:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000160:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000170:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000180:	05 42 00 08 05 42 00 08 05 42 00 08 05 42 00 08     .B...B...B...B..
 8000190:	05 42 00 08                                         .B..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009f0:	f000 b80c 	b.w	8000a0c <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f8ce 	bl	8000b9c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_idiv0>:
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__gedf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a14:	e006      	b.n	8000a24 <__cmpdf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__ledf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpdf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpdf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3a:	d01b      	beq.n	8000a74 <__cmpdf2+0x54>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a42:	bf0c      	ite	eq
 8000a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a48:	ea91 0f03 	teqne	r1, r3
 8000a4c:	bf02      	ittt	eq
 8000a4e:	ea90 0f02 	teqeq	r0, r2
 8000a52:	2000      	moveq	r0, #0
 8000a54:	4770      	bxeq	lr
 8000a56:	f110 0f00 	cmn.w	r0, #0
 8000a5a:	ea91 0f03 	teq	r1, r3
 8000a5e:	bf58      	it	pl
 8000a60:	4299      	cmppl	r1, r3
 8000a62:	bf08      	it	eq
 8000a64:	4290      	cmpeq	r0, r2
 8000a66:	bf2c      	ite	cs
 8000a68:	17d8      	asrcs	r0, r3, #31
 8000a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6e:	f040 0001 	orr.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__cmpdf2+0x64>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d107      	bne.n	8000a94 <__cmpdf2+0x74>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d1d6      	bne.n	8000a3c <__cmpdf2+0x1c>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d0d3      	beq.n	8000a3c <__cmpdf2+0x1c>
 8000a94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdrcmple>:
 8000a9c:	4684      	mov	ip, r0
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	e000      	b.n	8000aac <__aeabi_cdcmpeq>
 8000aaa:	bf00      	nop

08000aac <__aeabi_cdcmpeq>:
 8000aac:	b501      	push	{r0, lr}
 8000aae:	f7ff ffb7 	bl	8000a20 <__cmpdf2>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	bf48      	it	mi
 8000ab6:	f110 0f00 	cmnmi.w	r0, #0
 8000aba:	bd01      	pop	{r0, pc}

08000abc <__aeabi_dcmpeq>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff fff4 	bl	8000aac <__aeabi_cdcmpeq>
 8000ac4:	bf0c      	ite	eq
 8000ac6:	2001      	moveq	r0, #1
 8000ac8:	2000      	movne	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmplt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffea 	bl	8000aac <__aeabi_cdcmpeq>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmple>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffe0 	bl	8000aac <__aeabi_cdcmpeq>
 8000aec:	bf94      	ite	ls
 8000aee:	2001      	movls	r0, #1
 8000af0:	2000      	movhi	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpge>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffce 	bl	8000a9c <__aeabi_cdrcmple>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpgt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffc4 	bl	8000a9c <__aeabi_cdrcmple>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpun>:
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x10>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d10a      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__aeabi_dcmpun+0x20>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0001 	mov.w	r0, #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ba8:	4615      	mov	r5, r2
 8000baa:	463c      	mov	r4, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 80c6 	bne.w	8000d40 <__udivmoddi4+0x1a4>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	fab2 f782 	clz	r7, r2
 8000bba:	d946      	bls.n	8000c4a <__udivmoddi4+0xae>
 8000bbc:	b14f      	cbz	r7, 8000bd2 <__udivmoddi4+0x36>
 8000bbe:	f1c7 0e20 	rsb	lr, r7, #32
 8000bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000bc6:	fa00 f307 	lsl.w	r3, r0, r7
 8000bca:	40bd      	lsls	r5, r7
 8000bcc:	ea4e 0c03 	orr.w	ip, lr, r3
 8000bd0:	40bc      	lsls	r4, r7
 8000bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bd6:	fa1f fe85 	uxth.w	lr, r5
 8000bda:	fbbc f9f8 	udiv	r9, ip, r8
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb08 c319 	mls	r3, r8, r9, ip
 8000be4:	fb09 fa0e 	mul.w	sl, r9, lr
 8000be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000bec:	459a      	cmp	sl, r3
 8000bee:	d928      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf6:	d204      	bcs.n	8000c02 <__udivmoddi4+0x66>
 8000bf8:	459a      	cmp	sl, r3
 8000bfa:	d902      	bls.n	8000c02 <__udivmoddi4+0x66>
 8000bfc:	f1a9 0002 	sub.w	r0, r9, #2
 8000c00:	442b      	add	r3, r5
 8000c02:	eba3 030a 	sub.w	r3, r3, sl
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f2f8 	udiv	r2, r3, r8
 8000c0c:	fb08 3312 	mls	r3, r8, r2, r3
 8000c10:	fb02 fe0e 	mul.w	lr, r2, lr
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d914      	bls.n	8000c46 <__udivmoddi4+0xaa>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000c22:	d203      	bcs.n	8000c2c <__udivmoddi4+0x90>
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d901      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c28:	1e93      	subs	r3, r2, #2
 8000c2a:	442c      	add	r4, r5
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6034      	str	r4, [r6, #0]
 8000c3c:	6073      	str	r3, [r6, #4]
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c42:	4648      	mov	r0, r9
 8000c44:	e7dd      	b.n	8000c02 <__udivmoddi4+0x66>
 8000c46:	4613      	mov	r3, r2
 8000c48:	e7f0      	b.n	8000c2c <__udivmoddi4+0x90>
 8000c4a:	b902      	cbnz	r2, 8000c4e <__udivmoddi4+0xb2>
 8000c4c:	deff      	udf	#255	; 0xff
 8000c4e:	bb87      	cbnz	r7, 8000cb2 <__udivmoddi4+0x116>
 8000c50:	1a83      	subs	r3, r0, r2
 8000c52:	2101      	movs	r1, #1
 8000c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c58:	b2aa      	uxth	r2, r5
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	fb0c f802 	mul.w	r8, ip, r2
 8000c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c6c:	4598      	cmp	r8, r3
 8000c6e:	d963      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d204      	bcs.n	8000c82 <__udivmoddi4+0xe6>
 8000c78:	4598      	cmp	r8, r3
 8000c7a:	d902      	bls.n	8000c82 <__udivmoddi4+0xe6>
 8000c7c:	f1ac 0002 	sub.w	r0, ip, #2
 8000c80:	442b      	add	r3, r5
 8000c82:	eba3 0308 	sub.w	r3, r3, r8
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	fb0c f202 	mul.w	r2, ip, r2
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	d94f      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000c9c:	192c      	adds	r4, r5, r4
 8000c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000ca2:	d204      	bcs.n	8000cae <__udivmoddi4+0x112>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	d902      	bls.n	8000cae <__udivmoddi4+0x112>
 8000ca8:	f1ac 0302 	sub.w	r3, ip, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	1aa4      	subs	r4, r4, r2
 8000cb0:	e7be      	b.n	8000c30 <__udivmoddi4+0x94>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	fa20 f80c 	lsr.w	r8, r0, ip
 8000cba:	fa00 f307 	lsl.w	r3, r0, r7
 8000cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000cc2:	40bd      	lsls	r5, r7
 8000cc4:	ea4c 0203 	orr.w	r2, ip, r3
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	b2ab      	uxth	r3, r5
 8000cce:	fbb8 fcfe 	udiv	ip, r8, lr
 8000cd2:	0c11      	lsrs	r1, r2, #16
 8000cd4:	fb0e 801c 	mls	r0, lr, ip, r8
 8000cd8:	fb0c f903 	mul.w	r9, ip, r3
 8000cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000ce0:	4581      	cmp	r9, r0
 8000ce2:	fa04 f407 	lsl.w	r4, r4, r7
 8000ce6:	d923      	bls.n	8000d30 <__udivmoddi4+0x194>
 8000ce8:	1828      	adds	r0, r5, r0
 8000cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000cee:	d204      	bcs.n	8000cfa <__udivmoddi4+0x15e>
 8000cf0:	4581      	cmp	r9, r0
 8000cf2:	d902      	bls.n	8000cfa <__udivmoddi4+0x15e>
 8000cf4:	f1ac 0102 	sub.w	r1, ip, #2
 8000cf8:	4428      	add	r0, r5
 8000cfa:	eba0 0009 	sub.w	r0, r0, r9
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	fbb0 fcfe 	udiv	ip, r0, lr
 8000d04:	fb0e 001c 	mls	r0, lr, ip, r0
 8000d08:	fb0c f803 	mul.w	r8, ip, r3
 8000d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000d10:	4598      	cmp	r8, r3
 8000d12:	d90f      	bls.n	8000d34 <__udivmoddi4+0x198>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000d1a:	d204      	bcs.n	8000d26 <__udivmoddi4+0x18a>
 8000d1c:	4598      	cmp	r8, r3
 8000d1e:	d902      	bls.n	8000d26 <__udivmoddi4+0x18a>
 8000d20:	f1ac 0202 	sub.w	r2, ip, #2
 8000d24:	442b      	add	r3, r5
 8000d26:	eba3 0308 	sub.w	r3, r3, r8
 8000d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d2e:	e791      	b.n	8000c54 <__udivmoddi4+0xb8>
 8000d30:	4661      	mov	r1, ip
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0x15e>
 8000d34:	4662      	mov	r2, ip
 8000d36:	e7f6      	b.n	8000d26 <__udivmoddi4+0x18a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e7a2      	b.n	8000c82 <__udivmoddi4+0xe6>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	e7b6      	b.n	8000cae <__udivmoddi4+0x112>
 8000d40:	4283      	cmp	r3, r0
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0x1b4>
 8000d44:	b10e      	cbz	r6, 8000d4a <__udivmoddi4+0x1ae>
 8000d46:	e9c6 7000 	strd	r7, r0, [r6]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e776      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	b981      	cbnz	r1, 8000d78 <__udivmoddi4+0x1dc>
 8000d56:	4283      	cmp	r3, r0
 8000d58:	d301      	bcc.n	8000d5e <__udivmoddi4+0x1c2>
 8000d5a:	42ba      	cmp	r2, r7
 8000d5c:	d80a      	bhi.n	8000d74 <__udivmoddi4+0x1d8>
 8000d5e:	1abc      	subs	r4, r7, r2
 8000d60:	eb60 0303 	sbc.w	r3, r0, r3
 8000d64:	2001      	movs	r0, #1
 8000d66:	469c      	mov	ip, r3
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d068      	beq.n	8000e3e <__udivmoddi4+0x2a2>
 8000d6c:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e764      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e7f7      	b.n	8000d68 <__udivmoddi4+0x1cc>
 8000d78:	f1c1 0c20 	rsb	ip, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f40c 	lsr.w	r4, r2, ip
 8000d82:	431c      	orrs	r4, r3
 8000d84:	fa02 f501 	lsl.w	r5, r2, r1
 8000d88:	fa00 f301 	lsl.w	r3, r0, r1
 8000d8c:	fa27 f20c 	lsr.w	r2, r7, ip
 8000d90:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	fbbb f8f9 	udiv	r8, fp, r9
 8000d9e:	fa1f fe84 	uxth.w	lr, r4
 8000da2:	fb09 bb18 	mls	fp, r9, r8, fp
 8000da6:	0c1a      	lsrs	r2, r3, #16
 8000da8:	fb08 fa0e 	mul.w	sl, r8, lr
 8000dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000db0:	4592      	cmp	sl, r2
 8000db2:	fa07 f701 	lsl.w	r7, r7, r1
 8000db6:	d93e      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000db8:	18a2      	adds	r2, r4, r2
 8000dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dbe:	d204      	bcs.n	8000dca <__udivmoddi4+0x22e>
 8000dc0:	4592      	cmp	sl, r2
 8000dc2:	d902      	bls.n	8000dca <__udivmoddi4+0x22e>
 8000dc4:	f1a8 0002 	sub.w	r0, r8, #2
 8000dc8:	4422      	add	r2, r4
 8000dca:	eba2 020a 	sub.w	r2, r2, sl
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	fbb2 f8f9 	udiv	r8, r2, r9
 8000dd4:	fb09 2218 	mls	r2, r9, r8, r2
 8000dd8:	fb08 fe0e 	mul.w	lr, r8, lr
 8000ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000de0:	4596      	cmp	lr, r2
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	18a2      	adds	r2, r4, r2
 8000de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000dea:	d204      	bcs.n	8000df6 <__udivmoddi4+0x25a>
 8000dec:	4596      	cmp	lr, r2
 8000dee:	d902      	bls.n	8000df6 <__udivmoddi4+0x25a>
 8000df0:	f1a8 0302 	sub.w	r3, r8, #2
 8000df4:	4422      	add	r2, r4
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	fba0 9305 	umull	r9, r3, r0, r5
 8000dfe:	eba2 020e 	sub.w	r2, r2, lr
 8000e02:	429a      	cmp	r2, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	4698      	mov	r8, r3
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0x274>
 8000e0a:	d106      	bne.n	8000e1a <__udivmoddi4+0x27e>
 8000e0c:	454f      	cmp	r7, r9
 8000e0e:	d204      	bcs.n	8000e1a <__udivmoddi4+0x27e>
 8000e10:	ebb9 0e05 	subs.w	lr, r9, r5
 8000e14:	eb63 0804 	sbc.w	r8, r3, r4
 8000e18:	3801      	subs	r0, #1
 8000e1a:	b186      	cbz	r6, 8000e3e <__udivmoddi4+0x2a2>
 8000e1c:	ebb7 030e 	subs.w	r3, r7, lr
 8000e20:	eb62 0708 	sbc.w	r7, r2, r8
 8000e24:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e28:	40cb      	lsrs	r3, r1
 8000e2a:	ea4c 0303 	orr.w	r3, ip, r3
 8000e2e:	40cf      	lsrs	r7, r1
 8000e30:	e9c6 3700 	strd	r3, r7, [r6]
 8000e34:	e79c      	b.n	8000d70 <__udivmoddi4+0x1d4>
 8000e36:	4640      	mov	r0, r8
 8000e38:	e7c7      	b.n	8000dca <__udivmoddi4+0x22e>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	e7db      	b.n	8000df6 <__udivmoddi4+0x25a>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xa2>

08000e42 <strcmp>:
 8000e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e4a:	2a01      	cmp	r2, #1
 8000e4c:	bf28      	it	cs
 8000e4e:	429a      	cmpcs	r2, r3
 8000e50:	d0f7      	beq.n	8000e42 <strcmp>
 8000e52:	1ad0      	subs	r0, r2, r3
 8000e54:	4770      	bx	lr

08000e56 <strlen>:
 8000e56:	4603      	mov	r3, r0
 8000e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d1fb      	bne.n	8000e58 <strlen+0x2>
 8000e60:	1a18      	subs	r0, r3, r0
 8000e62:	3801      	subs	r0, #1
 8000e64:	4770      	bx	lr
	...

08000e68 <_dtoa_r>:
 8000e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e6c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000e6e:	b099      	sub	sp, #100	; 0x64
 8000e70:	4616      	mov	r6, r2
 8000e72:	461f      	mov	r7, r3
 8000e74:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000e78:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8000e7c:	4605      	mov	r5, r0
 8000e7e:	b974      	cbnz	r4, 8000e9e <_dtoa_r+0x36>
 8000e80:	2010      	movs	r0, #16
 8000e82:	f00b fe39 	bl	800caf8 <malloc>
 8000e86:	4602      	mov	r2, r0
 8000e88:	6268      	str	r0, [r5, #36]	; 0x24
 8000e8a:	b920      	cbnz	r0, 8000e96 <_dtoa_r+0x2e>
 8000e8c:	4ba8      	ldr	r3, [pc, #672]	; (8001130 <_dtoa_r+0x2c8>)
 8000e8e:	21ea      	movs	r1, #234	; 0xea
 8000e90:	48a8      	ldr	r0, [pc, #672]	; (8001134 <_dtoa_r+0x2cc>)
 8000e92:	f00c fb17 	bl	800d4c4 <__assert_func>
 8000e96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8000e9a:	6004      	str	r4, [r0, #0]
 8000e9c:	60c4      	str	r4, [r0, #12]
 8000e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000ea0:	6819      	ldr	r1, [r3, #0]
 8000ea2:	b151      	cbz	r1, 8000eba <_dtoa_r+0x52>
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	604a      	str	r2, [r1, #4]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4093      	lsls	r3, r2
 8000eac:	608b      	str	r3, [r1, #8]
 8000eae:	4628      	mov	r0, r5
 8000eb0:	f00c fb88 	bl	800d5c4 <_Bfree>
 8000eb4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	1e3b      	subs	r3, r7, #0
 8000ebc:	bfb9      	ittee	lt
 8000ebe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000ec2:	9305      	strlt	r3, [sp, #20]
 8000ec4:	2300      	movge	r3, #0
 8000ec6:	f8c8 3000 	strge.w	r3, [r8]
 8000eca:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000ece:	4b9a      	ldr	r3, [pc, #616]	; (8001138 <_dtoa_r+0x2d0>)
 8000ed0:	bfbc      	itt	lt
 8000ed2:	2201      	movlt	r2, #1
 8000ed4:	f8c8 2000 	strlt.w	r2, [r8]
 8000ed8:	ea33 0309 	bics.w	r3, r3, r9
 8000edc:	d119      	bne.n	8000f12 <_dtoa_r+0xaa>
 8000ede:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000ee0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8000eea:	4333      	orrs	r3, r6
 8000eec:	f000 8580 	beq.w	80019f0 <_dtoa_r+0xb88>
 8000ef0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000ef2:	b953      	cbnz	r3, 8000f0a <_dtoa_r+0xa2>
 8000ef4:	4b91      	ldr	r3, [pc, #580]	; (800113c <_dtoa_r+0x2d4>)
 8000ef6:	e022      	b.n	8000f3e <_dtoa_r+0xd6>
 8000ef8:	4b91      	ldr	r3, [pc, #580]	; (8001140 <_dtoa_r+0x2d8>)
 8000efa:	9303      	str	r3, [sp, #12]
 8000efc:	3308      	adds	r3, #8
 8000efe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	9803      	ldr	r0, [sp, #12]
 8000f04:	b019      	add	sp, #100	; 0x64
 8000f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f0a:	4b8c      	ldr	r3, [pc, #560]	; (800113c <_dtoa_r+0x2d4>)
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	3303      	adds	r3, #3
 8000f10:	e7f5      	b.n	8000efe <_dtoa_r+0x96>
 8000f12:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8000f16:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8000f1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2300      	movs	r3, #0
 8000f22:	f7ff fdcb 	bl	8000abc <__aeabi_dcmpeq>
 8000f26:	4680      	mov	r8, r0
 8000f28:	b158      	cbz	r0, 8000f42 <_dtoa_r+0xda>
 8000f2a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8559 	beq.w	80019ea <_dtoa_r+0xb82>
 8000f38:	4882      	ldr	r0, [pc, #520]	; (8001144 <_dtoa_r+0x2dc>)
 8000f3a:	6018      	str	r0, [r3, #0]
 8000f3c:	1e43      	subs	r3, r0, #1
 8000f3e:	9303      	str	r3, [sp, #12]
 8000f40:	e7df      	b.n	8000f02 <_dtoa_r+0x9a>
 8000f42:	ab16      	add	r3, sp, #88	; 0x58
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	ab17      	add	r3, sp, #92	; 0x5c
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8000f50:	f00c fdb0 	bl	800dab4 <__d2b>
 8000f54:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8000f58:	4683      	mov	fp, r0
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	d07e      	beq.n	800105c <_dtoa_r+0x1f4>
 8000f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000f60:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8000f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000f6c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8000f70:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8000f74:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8000f78:	4b73      	ldr	r3, [pc, #460]	; (8001148 <_dtoa_r+0x2e0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f7ff f964 	bl	8000248 <__aeabi_dsub>
 8000f80:	a365      	add	r3, pc, #404	; (adr r3, 8001118 <_dtoa_r+0x2b0>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f7ff fb17 	bl	80005b8 <__aeabi_dmul>
 8000f8a:	a365      	add	r3, pc, #404	; (adr r3, 8001120 <_dtoa_r+0x2b8>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff f95c 	bl	800024c <__adddf3>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4620      	mov	r0, r4
 8000f98:	460f      	mov	r7, r1
 8000f9a:	f7ff faa3 	bl	80004e4 <__aeabi_i2d>
 8000f9e:	a362      	add	r3, pc, #392	; (adr r3, 8001128 <_dtoa_r+0x2c0>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	f7ff fb08 	bl	80005b8 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4630      	mov	r0, r6
 8000fae:	4639      	mov	r1, r7
 8000fb0:	f7ff f94c 	bl	800024c <__adddf3>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	460f      	mov	r7, r1
 8000fb8:	f7ff fdc8 	bl	8000b4c <__aeabi_d2iz>
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4682      	mov	sl, r0
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	f7ff fd83 	bl	8000ad0 <__aeabi_dcmplt>
 8000fca:	b148      	cbz	r0, 8000fe0 <_dtoa_r+0x178>
 8000fcc:	4650      	mov	r0, sl
 8000fce:	f7ff fa89 	bl	80004e4 <__aeabi_i2d>
 8000fd2:	4632      	mov	r2, r6
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	f7ff fd71 	bl	8000abc <__aeabi_dcmpeq>
 8000fda:	b908      	cbnz	r0, 8000fe0 <_dtoa_r+0x178>
 8000fdc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000fe0:	f1ba 0f16 	cmp.w	sl, #22
 8000fe4:	d857      	bhi.n	8001096 <_dtoa_r+0x22e>
 8000fe6:	4b59      	ldr	r3, [pc, #356]	; (800114c <_dtoa_r+0x2e4>)
 8000fe8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000ff4:	f7ff fd6c 	bl	8000ad0 <__aeabi_dcmplt>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d04e      	beq.n	800109a <_dtoa_r+0x232>
 8000ffc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8001000:	2300      	movs	r3, #0
 8001002:	930f      	str	r3, [sp, #60]	; 0x3c
 8001004:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001006:	1b1c      	subs	r4, r3, r4
 8001008:	1e63      	subs	r3, r4, #1
 800100a:	9309      	str	r3, [sp, #36]	; 0x24
 800100c:	bf45      	ittet	mi
 800100e:	f1c4 0301 	rsbmi	r3, r4, #1
 8001012:	9306      	strmi	r3, [sp, #24]
 8001014:	2300      	movpl	r3, #0
 8001016:	2300      	movmi	r3, #0
 8001018:	bf4c      	ite	mi
 800101a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800101c:	9306      	strpl	r3, [sp, #24]
 800101e:	f1ba 0f00 	cmp.w	sl, #0
 8001022:	db3c      	blt.n	800109e <_dtoa_r+0x236>
 8001024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001026:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800102a:	4453      	add	r3, sl
 800102c:	9309      	str	r3, [sp, #36]	; 0x24
 800102e:	2300      	movs	r3, #0
 8001030:	930a      	str	r3, [sp, #40]	; 0x28
 8001032:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001034:	2b09      	cmp	r3, #9
 8001036:	f200 808d 	bhi.w	8001154 <_dtoa_r+0x2ec>
 800103a:	2b05      	cmp	r3, #5
 800103c:	bfc4      	itt	gt
 800103e:	3b04      	subgt	r3, #4
 8001040:	9322      	strgt	r3, [sp, #136]	; 0x88
 8001042:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001044:	f1a3 0302 	sub.w	r3, r3, #2
 8001048:	bfcc      	ite	gt
 800104a:	2400      	movgt	r4, #0
 800104c:	2401      	movle	r4, #1
 800104e:	2b03      	cmp	r3, #3
 8001050:	f200 808c 	bhi.w	800116c <_dtoa_r+0x304>
 8001054:	e8df f003 	tbb	[pc, r3]
 8001058:	5b4d4f2d 	.word	0x5b4d4f2d
 800105c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8001060:	441c      	add	r4, r3
 8001062:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8001066:	2b20      	cmp	r3, #32
 8001068:	bfc3      	ittte	gt
 800106a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800106e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8001072:	fa09 f303 	lslgt.w	r3, r9, r3
 8001076:	f1c3 0320 	rsble	r3, r3, #32
 800107a:	bfc6      	itte	gt
 800107c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8001080:	4318      	orrgt	r0, r3
 8001082:	fa06 f003 	lslle.w	r0, r6, r3
 8001086:	f7ff fa1d 	bl	80004c4 <__aeabi_ui2d>
 800108a:	2301      	movs	r3, #1
 800108c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001090:	3c01      	subs	r4, #1
 8001092:	9313      	str	r3, [sp, #76]	; 0x4c
 8001094:	e770      	b.n	8000f78 <_dtoa_r+0x110>
 8001096:	2301      	movs	r3, #1
 8001098:	e7b3      	b.n	8001002 <_dtoa_r+0x19a>
 800109a:	900f      	str	r0, [sp, #60]	; 0x3c
 800109c:	e7b2      	b.n	8001004 <_dtoa_r+0x19c>
 800109e:	9b06      	ldr	r3, [sp, #24]
 80010a0:	eba3 030a 	sub.w	r3, r3, sl
 80010a4:	9306      	str	r3, [sp, #24]
 80010a6:	f1ca 0300 	rsb	r3, sl, #0
 80010aa:	930a      	str	r3, [sp, #40]	; 0x28
 80010ac:	2300      	movs	r3, #0
 80010ae:	930e      	str	r3, [sp, #56]	; 0x38
 80010b0:	e7bf      	b.n	8001032 <_dtoa_r+0x1ca>
 80010b2:	2300      	movs	r3, #0
 80010b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80010b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dc5a      	bgt.n	8001172 <_dtoa_r+0x30a>
 80010bc:	f04f 0901 	mov.w	r9, #1
 80010c0:	f8cd 9020 	str.w	r9, [sp, #32]
 80010c4:	464b      	mov	r3, r9
 80010c6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80010ca:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80010cc:	2200      	movs	r2, #0
 80010ce:	6042      	str	r2, [r0, #4]
 80010d0:	2204      	movs	r2, #4
 80010d2:	f102 0614 	add.w	r6, r2, #20
 80010d6:	429e      	cmp	r6, r3
 80010d8:	6841      	ldr	r1, [r0, #4]
 80010da:	d950      	bls.n	800117e <_dtoa_r+0x316>
 80010dc:	4628      	mov	r0, r5
 80010de:	f00c fa31 	bl	800d544 <_Balloc>
 80010e2:	9003      	str	r0, [sp, #12]
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d14e      	bne.n	8001186 <_dtoa_r+0x31e>
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <_dtoa_r+0x2e8>)
 80010ea:	4602      	mov	r2, r0
 80010ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010f0:	e6ce      	b.n	8000e90 <_dtoa_r+0x28>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e7de      	b.n	80010b4 <_dtoa_r+0x24c>
 80010f6:	2300      	movs	r3, #0
 80010f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80010fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80010fc:	eb0a 0903 	add.w	r9, sl, r3
 8001100:	f109 0301 	add.w	r3, r9, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	9308      	str	r3, [sp, #32]
 8001108:	bfb8      	it	lt
 800110a:	2301      	movlt	r3, #1
 800110c:	e7dd      	b.n	80010ca <_dtoa_r+0x262>
 800110e:	2301      	movs	r3, #1
 8001110:	e7f2      	b.n	80010f8 <_dtoa_r+0x290>
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	636f4361 	.word	0x636f4361
 800111c:	3fd287a7 	.word	0x3fd287a7
 8001120:	8b60c8b3 	.word	0x8b60c8b3
 8001124:	3fc68a28 	.word	0x3fc68a28
 8001128:	509f79fb 	.word	0x509f79fb
 800112c:	3fd34413 	.word	0x3fd34413
 8001130:	080135c5 	.word	0x080135c5
 8001134:	08013681 	.word	0x08013681
 8001138:	7ff00000 	.word	0x7ff00000
 800113c:	0801367d 	.word	0x0801367d
 8001140:	08013674 	.word	0x08013674
 8001144:	080135a2 	.word	0x080135a2
 8001148:	3ff80000 	.word	0x3ff80000
 800114c:	08011ae8 	.word	0x08011ae8
 8001150:	080136db 	.word	0x080136db
 8001154:	2401      	movs	r4, #1
 8001156:	2300      	movs	r3, #0
 8001158:	9322      	str	r3, [sp, #136]	; 0x88
 800115a:	940b      	str	r4, [sp, #44]	; 0x2c
 800115c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001160:	2200      	movs	r2, #0
 8001162:	f8cd 9020 	str.w	r9, [sp, #32]
 8001166:	2312      	movs	r3, #18
 8001168:	9223      	str	r2, [sp, #140]	; 0x8c
 800116a:	e7ae      	b.n	80010ca <_dtoa_r+0x262>
 800116c:	2301      	movs	r3, #1
 800116e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001170:	e7f4      	b.n	800115c <_dtoa_r+0x2f4>
 8001172:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001176:	f8cd 9020 	str.w	r9, [sp, #32]
 800117a:	464b      	mov	r3, r9
 800117c:	e7a5      	b.n	80010ca <_dtoa_r+0x262>
 800117e:	3101      	adds	r1, #1
 8001180:	6041      	str	r1, [r0, #4]
 8001182:	0052      	lsls	r2, r2, #1
 8001184:	e7a5      	b.n	80010d2 <_dtoa_r+0x26a>
 8001186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001188:	9a03      	ldr	r2, [sp, #12]
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	9b08      	ldr	r3, [sp, #32]
 800118e:	2b0e      	cmp	r3, #14
 8001190:	f200 80a8 	bhi.w	80012e4 <_dtoa_r+0x47c>
 8001194:	2c00      	cmp	r4, #0
 8001196:	f000 80a5 	beq.w	80012e4 <_dtoa_r+0x47c>
 800119a:	f1ba 0f00 	cmp.w	sl, #0
 800119e:	dd34      	ble.n	800120a <_dtoa_r+0x3a2>
 80011a0:	4a9a      	ldr	r2, [pc, #616]	; (800140c <_dtoa_r+0x5a4>)
 80011a2:	f00a 030f 	and.w	r3, sl, #15
 80011a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80011aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011ae:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80011b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80011b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80011ba:	d016      	beq.n	80011ea <_dtoa_r+0x382>
 80011bc:	4b94      	ldr	r3, [pc, #592]	; (8001410 <_dtoa_r+0x5a8>)
 80011be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80011c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80011c6:	f7ff fb21 	bl	800080c <__aeabi_ddiv>
 80011ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011ce:	f004 040f 	and.w	r4, r4, #15
 80011d2:	2703      	movs	r7, #3
 80011d4:	4e8e      	ldr	r6, [pc, #568]	; (8001410 <_dtoa_r+0x5a8>)
 80011d6:	b954      	cbnz	r4, 80011ee <_dtoa_r+0x386>
 80011d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80011dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80011e0:	f7ff fb14 	bl	800080c <__aeabi_ddiv>
 80011e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011e8:	e029      	b.n	800123e <_dtoa_r+0x3d6>
 80011ea:	2702      	movs	r7, #2
 80011ec:	e7f2      	b.n	80011d4 <_dtoa_r+0x36c>
 80011ee:	07e1      	lsls	r1, r4, #31
 80011f0:	d508      	bpl.n	8001204 <_dtoa_r+0x39c>
 80011f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80011f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80011fa:	f7ff f9dd 	bl	80005b8 <__aeabi_dmul>
 80011fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001202:	3701      	adds	r7, #1
 8001204:	1064      	asrs	r4, r4, #1
 8001206:	3608      	adds	r6, #8
 8001208:	e7e5      	b.n	80011d6 <_dtoa_r+0x36e>
 800120a:	f000 80a5 	beq.w	8001358 <_dtoa_r+0x4f0>
 800120e:	f1ca 0400 	rsb	r4, sl, #0
 8001212:	4b7e      	ldr	r3, [pc, #504]	; (800140c <_dtoa_r+0x5a4>)
 8001214:	4e7e      	ldr	r6, [pc, #504]	; (8001410 <_dtoa_r+0x5a8>)
 8001216:	f004 020f 	and.w	r2, r4, #15
 800121a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001226:	f7ff f9c7 	bl	80005b8 <__aeabi_dmul>
 800122a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800122e:	1124      	asrs	r4, r4, #4
 8001230:	2300      	movs	r3, #0
 8001232:	2702      	movs	r7, #2
 8001234:	2c00      	cmp	r4, #0
 8001236:	f040 8084 	bne.w	8001342 <_dtoa_r+0x4da>
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1d2      	bne.n	80011e4 <_dtoa_r+0x37c>
 800123e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 808b 	beq.w	800135c <_dtoa_r+0x4f4>
 8001246:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800124a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800124e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001252:	4b70      	ldr	r3, [pc, #448]	; (8001414 <_dtoa_r+0x5ac>)
 8001254:	2200      	movs	r2, #0
 8001256:	f7ff fc3b 	bl	8000ad0 <__aeabi_dcmplt>
 800125a:	2800      	cmp	r0, #0
 800125c:	d07e      	beq.n	800135c <_dtoa_r+0x4f4>
 800125e:	9b08      	ldr	r3, [sp, #32]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d07b      	beq.n	800135c <_dtoa_r+0x4f4>
 8001264:	f1b9 0f00 	cmp.w	r9, #0
 8001268:	dd38      	ble.n	80012dc <_dtoa_r+0x474>
 800126a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800126e:	4b6a      	ldr	r3, [pc, #424]	; (8001418 <_dtoa_r+0x5b0>)
 8001270:	2200      	movs	r2, #0
 8001272:	f7ff f9a1 	bl	80005b8 <__aeabi_dmul>
 8001276:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800127a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800127e:	3701      	adds	r7, #1
 8001280:	464c      	mov	r4, r9
 8001282:	4638      	mov	r0, r7
 8001284:	f7ff f92e 	bl	80004e4 <__aeabi_i2d>
 8001288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800128c:	f7ff f994 	bl	80005b8 <__aeabi_dmul>
 8001290:	4b62      	ldr	r3, [pc, #392]	; (800141c <_dtoa_r+0x5b4>)
 8001292:	2200      	movs	r2, #0
 8001294:	f7fe ffda 	bl	800024c <__adddf3>
 8001298:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800129c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80012a0:	9611      	str	r6, [sp, #68]	; 0x44
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d15d      	bne.n	8001362 <_dtoa_r+0x4fa>
 80012a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012aa:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <_dtoa_r+0x5b8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f7fe ffcb 	bl	8000248 <__aeabi_dsub>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80012bc:	4633      	mov	r3, r6
 80012be:	f7ff fc25 	bl	8000b0c <__aeabi_dcmpgt>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	f040 829c 	bne.w	8001800 <_dtoa_r+0x998>
 80012c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80012ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80012d2:	f7ff fbfd 	bl	8000ad0 <__aeabi_dcmplt>
 80012d6:	2800      	cmp	r0, #0
 80012d8:	f040 8290 	bne.w	80017fc <_dtoa_r+0x994>
 80012dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80012e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80012e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f2c0 8152 	blt.w	8001590 <_dtoa_r+0x728>
 80012ec:	f1ba 0f0e 	cmp.w	sl, #14
 80012f0:	f300 814e 	bgt.w	8001590 <_dtoa_r+0x728>
 80012f4:	4b45      	ldr	r3, [pc, #276]	; (800140c <_dtoa_r+0x5a4>)
 80012f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80012fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8001302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001304:	2b00      	cmp	r3, #0
 8001306:	f280 80db 	bge.w	80014c0 <_dtoa_r+0x658>
 800130a:	9b08      	ldr	r3, [sp, #32]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f300 80d7 	bgt.w	80014c0 <_dtoa_r+0x658>
 8001312:	f040 8272 	bne.w	80017fa <_dtoa_r+0x992>
 8001316:	4b42      	ldr	r3, [pc, #264]	; (8001420 <_dtoa_r+0x5b8>)
 8001318:	2200      	movs	r2, #0
 800131a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800131e:	f7ff f94b 	bl	80005b8 <__aeabi_dmul>
 8001322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001326:	f7ff fbe7 	bl	8000af8 <__aeabi_dcmpge>
 800132a:	9c08      	ldr	r4, [sp, #32]
 800132c:	4626      	mov	r6, r4
 800132e:	2800      	cmp	r0, #0
 8001330:	f040 8248 	bne.w	80017c4 <_dtoa_r+0x95c>
 8001334:	9f03      	ldr	r7, [sp, #12]
 8001336:	2331      	movs	r3, #49	; 0x31
 8001338:	f807 3b01 	strb.w	r3, [r7], #1
 800133c:	f10a 0a01 	add.w	sl, sl, #1
 8001340:	e244      	b.n	80017cc <_dtoa_r+0x964>
 8001342:	07e2      	lsls	r2, r4, #31
 8001344:	d505      	bpl.n	8001352 <_dtoa_r+0x4ea>
 8001346:	e9d6 2300 	ldrd	r2, r3, [r6]
 800134a:	f7ff f935 	bl	80005b8 <__aeabi_dmul>
 800134e:	3701      	adds	r7, #1
 8001350:	2301      	movs	r3, #1
 8001352:	1064      	asrs	r4, r4, #1
 8001354:	3608      	adds	r6, #8
 8001356:	e76d      	b.n	8001234 <_dtoa_r+0x3cc>
 8001358:	2702      	movs	r7, #2
 800135a:	e770      	b.n	800123e <_dtoa_r+0x3d6>
 800135c:	9c08      	ldr	r4, [sp, #32]
 800135e:	46d0      	mov	r8, sl
 8001360:	e78f      	b.n	8001282 <_dtoa_r+0x41a>
 8001362:	9903      	ldr	r1, [sp, #12]
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <_dtoa_r+0x5a4>)
 8001366:	4421      	add	r1, r4
 8001368:	9112      	str	r1, [sp, #72]	; 0x48
 800136a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800136c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001370:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8001374:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001378:	2900      	cmp	r1, #0
 800137a:	d055      	beq.n	8001428 <_dtoa_r+0x5c0>
 800137c:	4929      	ldr	r1, [pc, #164]	; (8001424 <_dtoa_r+0x5bc>)
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff fa44 	bl	800080c <__aeabi_ddiv>
 8001384:	463b      	mov	r3, r7
 8001386:	4632      	mov	r2, r6
 8001388:	f7fe ff5e 	bl	8000248 <__aeabi_dsub>
 800138c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001390:	9f03      	ldr	r7, [sp, #12]
 8001392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001396:	f7ff fbd9 	bl	8000b4c <__aeabi_d2iz>
 800139a:	4604      	mov	r4, r0
 800139c:	f7ff f8a2 	bl	80004e4 <__aeabi_i2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80013a8:	f7fe ff4e 	bl	8000248 <__aeabi_dsub>
 80013ac:	3430      	adds	r4, #48	; 0x30
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013b6:	f807 4b01 	strb.w	r4, [r7], #1
 80013ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80013be:	f7ff fb87 	bl	8000ad0 <__aeabi_dcmplt>
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d174      	bne.n	80014b0 <_dtoa_r+0x648>
 80013c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80013ca:	4912      	ldr	r1, [pc, #72]	; (8001414 <_dtoa_r+0x5ac>)
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7fe ff3b 	bl	8000248 <__aeabi_dsub>
 80013d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80013d6:	f7ff fb7b 	bl	8000ad0 <__aeabi_dcmplt>
 80013da:	2800      	cmp	r0, #0
 80013dc:	f040 80b7 	bne.w	800154e <_dtoa_r+0x6e6>
 80013e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80013e2:	429f      	cmp	r7, r3
 80013e4:	f43f af7a 	beq.w	80012dc <_dtoa_r+0x474>
 80013e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <_dtoa_r+0x5b0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	f7ff f8e2 	bl	80005b8 <__aeabi_dmul>
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_dtoa_r+0x5b0>)
 80013f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80013fa:	2200      	movs	r2, #0
 80013fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001400:	f7ff f8da 	bl	80005b8 <__aeabi_dmul>
 8001404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001408:	e7c3      	b.n	8001392 <_dtoa_r+0x52a>
 800140a:	bf00      	nop
 800140c:	08011ae8 	.word	0x08011ae8
 8001410:	08011ac0 	.word	0x08011ac0
 8001414:	3ff00000 	.word	0x3ff00000
 8001418:	40240000 	.word	0x40240000
 800141c:	401c0000 	.word	0x401c0000
 8001420:	40140000 	.word	0x40140000
 8001424:	3fe00000 	.word	0x3fe00000
 8001428:	4630      	mov	r0, r6
 800142a:	4639      	mov	r1, r7
 800142c:	f7ff f8c4 	bl	80005b8 <__aeabi_dmul>
 8001430:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001434:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001436:	9c03      	ldr	r4, [sp, #12]
 8001438:	9314      	str	r3, [sp, #80]	; 0x50
 800143a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800143e:	f7ff fb85 	bl	8000b4c <__aeabi_d2iz>
 8001442:	9015      	str	r0, [sp, #84]	; 0x54
 8001444:	f7ff f84e 	bl	80004e4 <__aeabi_i2d>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001450:	f7fe fefa 	bl	8000248 <__aeabi_dsub>
 8001454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001456:	3330      	adds	r3, #48	; 0x30
 8001458:	f804 3b01 	strb.w	r3, [r4], #1
 800145c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800145e:	429c      	cmp	r4, r3
 8001460:	4606      	mov	r6, r0
 8001462:	460f      	mov	r7, r1
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	d124      	bne.n	80014b4 <_dtoa_r+0x64c>
 800146a:	4ba4      	ldr	r3, [pc, #656]	; (80016fc <_dtoa_r+0x894>)
 800146c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001470:	f7fe feec 	bl	800024c <__adddf3>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4630      	mov	r0, r6
 800147a:	4639      	mov	r1, r7
 800147c:	f7ff fb46 	bl	8000b0c <__aeabi_dcmpgt>
 8001480:	2800      	cmp	r0, #0
 8001482:	d163      	bne.n	800154c <_dtoa_r+0x6e4>
 8001484:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001488:	499c      	ldr	r1, [pc, #624]	; (80016fc <_dtoa_r+0x894>)
 800148a:	2000      	movs	r0, #0
 800148c:	f7fe fedc 	bl	8000248 <__aeabi_dsub>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4630      	mov	r0, r6
 8001496:	4639      	mov	r1, r7
 8001498:	f7ff fb1a 	bl	8000ad0 <__aeabi_dcmplt>
 800149c:	2800      	cmp	r0, #0
 800149e:	f43f af1d 	beq.w	80012dc <_dtoa_r+0x474>
 80014a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80014a4:	1e7b      	subs	r3, r7, #1
 80014a6:	9314      	str	r3, [sp, #80]	; 0x50
 80014a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80014ac:	2b30      	cmp	r3, #48	; 0x30
 80014ae:	d0f8      	beq.n	80014a2 <_dtoa_r+0x63a>
 80014b0:	46c2      	mov	sl, r8
 80014b2:	e03b      	b.n	800152c <_dtoa_r+0x6c4>
 80014b4:	4b92      	ldr	r3, [pc, #584]	; (8001700 <_dtoa_r+0x898>)
 80014b6:	f7ff f87f 	bl	80005b8 <__aeabi_dmul>
 80014ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014be:	e7bc      	b.n	800143a <_dtoa_r+0x5d2>
 80014c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80014c4:	9f03      	ldr	r7, [sp, #12]
 80014c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80014ca:	4640      	mov	r0, r8
 80014cc:	4649      	mov	r1, r9
 80014ce:	f7ff f99d 	bl	800080c <__aeabi_ddiv>
 80014d2:	f7ff fb3b 	bl	8000b4c <__aeabi_d2iz>
 80014d6:	4604      	mov	r4, r0
 80014d8:	f7ff f804 	bl	80004e4 <__aeabi_i2d>
 80014dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80014e0:	f7ff f86a 	bl	80005b8 <__aeabi_dmul>
 80014e4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4640      	mov	r0, r8
 80014ee:	4649      	mov	r1, r9
 80014f0:	f7fe feaa 	bl	8000248 <__aeabi_dsub>
 80014f4:	f807 6b01 	strb.w	r6, [r7], #1
 80014f8:	9e03      	ldr	r6, [sp, #12]
 80014fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80014fe:	1bbe      	subs	r6, r7, r6
 8001500:	45b4      	cmp	ip, r6
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	d136      	bne.n	8001576 <_dtoa_r+0x70e>
 8001508:	f7fe fea0 	bl	800024c <__adddf3>
 800150c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001510:	4680      	mov	r8, r0
 8001512:	4689      	mov	r9, r1
 8001514:	f7ff fafa 	bl	8000b0c <__aeabi_dcmpgt>
 8001518:	bb58      	cbnz	r0, 8001572 <_dtoa_r+0x70a>
 800151a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800151e:	4640      	mov	r0, r8
 8001520:	4649      	mov	r1, r9
 8001522:	f7ff facb 	bl	8000abc <__aeabi_dcmpeq>
 8001526:	b108      	cbz	r0, 800152c <_dtoa_r+0x6c4>
 8001528:	07e1      	lsls	r1, r4, #31
 800152a:	d422      	bmi.n	8001572 <_dtoa_r+0x70a>
 800152c:	4628      	mov	r0, r5
 800152e:	4659      	mov	r1, fp
 8001530:	f00c f848 	bl	800d5c4 <_Bfree>
 8001534:	2300      	movs	r3, #0
 8001536:	703b      	strb	r3, [r7, #0]
 8001538:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800153a:	f10a 0001 	add.w	r0, sl, #1
 800153e:	6018      	str	r0, [r3, #0]
 8001540:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001542:	2b00      	cmp	r3, #0
 8001544:	f43f acdd 	beq.w	8000f02 <_dtoa_r+0x9a>
 8001548:	601f      	str	r7, [r3, #0]
 800154a:	e4da      	b.n	8000f02 <_dtoa_r+0x9a>
 800154c:	4627      	mov	r7, r4
 800154e:	463b      	mov	r3, r7
 8001550:	461f      	mov	r7, r3
 8001552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001556:	2a39      	cmp	r2, #57	; 0x39
 8001558:	d107      	bne.n	800156a <_dtoa_r+0x702>
 800155a:	9a03      	ldr	r2, [sp, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	d1f7      	bne.n	8001550 <_dtoa_r+0x6e8>
 8001560:	9903      	ldr	r1, [sp, #12]
 8001562:	2230      	movs	r2, #48	; 0x30
 8001564:	f108 0801 	add.w	r8, r8, #1
 8001568:	700a      	strb	r2, [r1, #0]
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	3201      	adds	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	e79e      	b.n	80014b0 <_dtoa_r+0x648>
 8001572:	46d0      	mov	r8, sl
 8001574:	e7eb      	b.n	800154e <_dtoa_r+0x6e6>
 8001576:	4b62      	ldr	r3, [pc, #392]	; (8001700 <_dtoa_r+0x898>)
 8001578:	2200      	movs	r2, #0
 800157a:	f7ff f81d 	bl	80005b8 <__aeabi_dmul>
 800157e:	2200      	movs	r2, #0
 8001580:	2300      	movs	r3, #0
 8001582:	4680      	mov	r8, r0
 8001584:	4689      	mov	r9, r1
 8001586:	f7ff fa99 	bl	8000abc <__aeabi_dcmpeq>
 800158a:	2800      	cmp	r0, #0
 800158c:	d09b      	beq.n	80014c6 <_dtoa_r+0x65e>
 800158e:	e7cd      	b.n	800152c <_dtoa_r+0x6c4>
 8001590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001592:	2a00      	cmp	r2, #0
 8001594:	f000 80d0 	beq.w	8001738 <_dtoa_r+0x8d0>
 8001598:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800159a:	2a01      	cmp	r2, #1
 800159c:	f300 80b2 	bgt.w	8001704 <_dtoa_r+0x89c>
 80015a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <_dtoa_r+0x88c>
 80015a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80015ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80015ae:	9f06      	ldr	r7, [sp, #24]
 80015b0:	9a06      	ldr	r2, [sp, #24]
 80015b2:	441a      	add	r2, r3
 80015b4:	9206      	str	r2, [sp, #24]
 80015b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015b8:	2101      	movs	r1, #1
 80015ba:	441a      	add	r2, r3
 80015bc:	4628      	mov	r0, r5
 80015be:	9209      	str	r2, [sp, #36]	; 0x24
 80015c0:	f00c f868 	bl	800d694 <__i2b>
 80015c4:	4606      	mov	r6, r0
 80015c6:	2f00      	cmp	r7, #0
 80015c8:	dd0c      	ble.n	80015e4 <_dtoa_r+0x77c>
 80015ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	dd09      	ble.n	80015e4 <_dtoa_r+0x77c>
 80015d0:	42bb      	cmp	r3, r7
 80015d2:	9a06      	ldr	r2, [sp, #24]
 80015d4:	bfa8      	it	ge
 80015d6:	463b      	movge	r3, r7
 80015d8:	1ad2      	subs	r2, r2, r3
 80015da:	9206      	str	r2, [sp, #24]
 80015dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015de:	1aff      	subs	r7, r7, r3
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	9309      	str	r3, [sp, #36]	; 0x24
 80015e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015e6:	b1f3      	cbz	r3, 8001626 <_dtoa_r+0x7be>
 80015e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80a8 	beq.w	8001740 <_dtoa_r+0x8d8>
 80015f0:	2c00      	cmp	r4, #0
 80015f2:	dd10      	ble.n	8001616 <_dtoa_r+0x7ae>
 80015f4:	4631      	mov	r1, r6
 80015f6:	4622      	mov	r2, r4
 80015f8:	4628      	mov	r0, r5
 80015fa:	f00c f909 	bl	800d810 <__pow5mult>
 80015fe:	465a      	mov	r2, fp
 8001600:	4601      	mov	r1, r0
 8001602:	4606      	mov	r6, r0
 8001604:	4628      	mov	r0, r5
 8001606:	f00c f85b 	bl	800d6c0 <__multiply>
 800160a:	4659      	mov	r1, fp
 800160c:	4680      	mov	r8, r0
 800160e:	4628      	mov	r0, r5
 8001610:	f00b ffd8 	bl	800d5c4 <_Bfree>
 8001614:	46c3      	mov	fp, r8
 8001616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001618:	1b1a      	subs	r2, r3, r4
 800161a:	d004      	beq.n	8001626 <_dtoa_r+0x7be>
 800161c:	4659      	mov	r1, fp
 800161e:	4628      	mov	r0, r5
 8001620:	f00c f8f6 	bl	800d810 <__pow5mult>
 8001624:	4683      	mov	fp, r0
 8001626:	2101      	movs	r1, #1
 8001628:	4628      	mov	r0, r5
 800162a:	f00c f833 	bl	800d694 <__i2b>
 800162e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001630:	2b00      	cmp	r3, #0
 8001632:	4604      	mov	r4, r0
 8001634:	f340 8086 	ble.w	8001744 <_dtoa_r+0x8dc>
 8001638:	461a      	mov	r2, r3
 800163a:	4601      	mov	r1, r0
 800163c:	4628      	mov	r0, r5
 800163e:	f00c f8e7 	bl	800d810 <__pow5mult>
 8001642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001644:	2b01      	cmp	r3, #1
 8001646:	4604      	mov	r4, r0
 8001648:	dd7f      	ble.n	800174a <_dtoa_r+0x8e2>
 800164a:	f04f 0800 	mov.w	r8, #0
 800164e:	6923      	ldr	r3, [r4, #16]
 8001650:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001654:	6918      	ldr	r0, [r3, #16]
 8001656:	f00f fd14 	bl	8011082 <__hi0bits>
 800165a:	f1c0 0020 	rsb	r0, r0, #32
 800165e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001660:	4418      	add	r0, r3
 8001662:	f010 001f 	ands.w	r0, r0, #31
 8001666:	f000 8092 	beq.w	800178e <_dtoa_r+0x926>
 800166a:	f1c0 0320 	rsb	r3, r0, #32
 800166e:	2b04      	cmp	r3, #4
 8001670:	f340 808a 	ble.w	8001788 <_dtoa_r+0x920>
 8001674:	f1c0 001c 	rsb	r0, r0, #28
 8001678:	9b06      	ldr	r3, [sp, #24]
 800167a:	4403      	add	r3, r0
 800167c:	9306      	str	r3, [sp, #24]
 800167e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001680:	4403      	add	r3, r0
 8001682:	4407      	add	r7, r0
 8001684:	9309      	str	r3, [sp, #36]	; 0x24
 8001686:	9b06      	ldr	r3, [sp, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	dd05      	ble.n	8001698 <_dtoa_r+0x830>
 800168c:	4659      	mov	r1, fp
 800168e:	461a      	mov	r2, r3
 8001690:	4628      	mov	r0, r5
 8001692:	f00c f917 	bl	800d8c4 <__lshift>
 8001696:	4683      	mov	fp, r0
 8001698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800169a:	2b00      	cmp	r3, #0
 800169c:	dd05      	ble.n	80016aa <_dtoa_r+0x842>
 800169e:	4621      	mov	r1, r4
 80016a0:	461a      	mov	r2, r3
 80016a2:	4628      	mov	r0, r5
 80016a4:	f00c f90e 	bl	800d8c4 <__lshift>
 80016a8:	4604      	mov	r4, r0
 80016aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d070      	beq.n	8001792 <_dtoa_r+0x92a>
 80016b0:	4621      	mov	r1, r4
 80016b2:	4658      	mov	r0, fp
 80016b4:	f00f fd32 	bl	801111c <__mcmp>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	da6a      	bge.n	8001792 <_dtoa_r+0x92a>
 80016bc:	2300      	movs	r3, #0
 80016be:	4659      	mov	r1, fp
 80016c0:	220a      	movs	r2, #10
 80016c2:	4628      	mov	r0, r5
 80016c4:	f00b ffa0 	bl	800d608 <__multadd>
 80016c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80016ce:	4683      	mov	fp, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8194 	beq.w	80019fe <_dtoa_r+0xb96>
 80016d6:	4631      	mov	r1, r6
 80016d8:	2300      	movs	r3, #0
 80016da:	220a      	movs	r2, #10
 80016dc:	4628      	mov	r0, r5
 80016de:	f00b ff93 	bl	800d608 <__multadd>
 80016e2:	f1b9 0f00 	cmp.w	r9, #0
 80016e6:	4606      	mov	r6, r0
 80016e8:	f300 8093 	bgt.w	8001812 <_dtoa_r+0x9aa>
 80016ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	dc57      	bgt.n	80017a2 <_dtoa_r+0x93a>
 80016f2:	e08e      	b.n	8001812 <_dtoa_r+0x9aa>
 80016f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80016f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80016fa:	e757      	b.n	80015ac <_dtoa_r+0x744>
 80016fc:	3fe00000 	.word	0x3fe00000
 8001700:	40240000 	.word	0x40240000
 8001704:	9b08      	ldr	r3, [sp, #32]
 8001706:	1e5c      	subs	r4, r3, #1
 8001708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800170a:	42a3      	cmp	r3, r4
 800170c:	bfbf      	itttt	lt
 800170e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8001710:	940a      	strlt	r4, [sp, #40]	; 0x28
 8001712:	1ae2      	sublt	r2, r4, r3
 8001714:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8001716:	bfb6      	itet	lt
 8001718:	189b      	addlt	r3, r3, r2
 800171a:	1b1c      	subge	r4, r3, r4
 800171c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800171e:	9b08      	ldr	r3, [sp, #32]
 8001720:	bfb8      	it	lt
 8001722:	2400      	movlt	r4, #0
 8001724:	2b00      	cmp	r3, #0
 8001726:	bfb9      	ittee	lt
 8001728:	9b06      	ldrlt	r3, [sp, #24]
 800172a:	9a08      	ldrlt	r2, [sp, #32]
 800172c:	9f06      	ldrge	r7, [sp, #24]
 800172e:	9b08      	ldrge	r3, [sp, #32]
 8001730:	bfbc      	itt	lt
 8001732:	1a9f      	sublt	r7, r3, r2
 8001734:	2300      	movlt	r3, #0
 8001736:	e73b      	b.n	80015b0 <_dtoa_r+0x748>
 8001738:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800173a:	9f06      	ldr	r7, [sp, #24]
 800173c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800173e:	e742      	b.n	80015c6 <_dtoa_r+0x75e>
 8001740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001742:	e76b      	b.n	800161c <_dtoa_r+0x7b4>
 8001744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001746:	2b01      	cmp	r3, #1
 8001748:	dc19      	bgt.n	800177e <_dtoa_r+0x916>
 800174a:	9b04      	ldr	r3, [sp, #16]
 800174c:	b9bb      	cbnz	r3, 800177e <_dtoa_r+0x916>
 800174e:	9b05      	ldr	r3, [sp, #20]
 8001750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001754:	b99b      	cbnz	r3, 800177e <_dtoa_r+0x916>
 8001756:	9b05      	ldr	r3, [sp, #20]
 8001758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800175c:	0d1b      	lsrs	r3, r3, #20
 800175e:	051b      	lsls	r3, r3, #20
 8001760:	b183      	cbz	r3, 8001784 <_dtoa_r+0x91c>
 8001762:	9b06      	ldr	r3, [sp, #24]
 8001764:	3301      	adds	r3, #1
 8001766:	9306      	str	r3, [sp, #24]
 8001768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800176a:	3301      	adds	r3, #1
 800176c:	9309      	str	r3, [sp, #36]	; 0x24
 800176e:	f04f 0801 	mov.w	r8, #1
 8001772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001774:	2b00      	cmp	r3, #0
 8001776:	f47f af6a 	bne.w	800164e <_dtoa_r+0x7e6>
 800177a:	2001      	movs	r0, #1
 800177c:	e76f      	b.n	800165e <_dtoa_r+0x7f6>
 800177e:	f04f 0800 	mov.w	r8, #0
 8001782:	e7f6      	b.n	8001772 <_dtoa_r+0x90a>
 8001784:	4698      	mov	r8, r3
 8001786:	e7f4      	b.n	8001772 <_dtoa_r+0x90a>
 8001788:	f43f af7d 	beq.w	8001686 <_dtoa_r+0x81e>
 800178c:	4618      	mov	r0, r3
 800178e:	301c      	adds	r0, #28
 8001790:	e772      	b.n	8001678 <_dtoa_r+0x810>
 8001792:	9b08      	ldr	r3, [sp, #32]
 8001794:	2b00      	cmp	r3, #0
 8001796:	dc36      	bgt.n	8001806 <_dtoa_r+0x99e>
 8001798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800179a:	2b02      	cmp	r3, #2
 800179c:	dd33      	ble.n	8001806 <_dtoa_r+0x99e>
 800179e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80017a2:	f1b9 0f00 	cmp.w	r9, #0
 80017a6:	d10d      	bne.n	80017c4 <_dtoa_r+0x95c>
 80017a8:	4621      	mov	r1, r4
 80017aa:	464b      	mov	r3, r9
 80017ac:	2205      	movs	r2, #5
 80017ae:	4628      	mov	r0, r5
 80017b0:	f00b ff2a 	bl	800d608 <__multadd>
 80017b4:	4601      	mov	r1, r0
 80017b6:	4604      	mov	r4, r0
 80017b8:	4658      	mov	r0, fp
 80017ba:	f00f fcaf 	bl	801111c <__mcmp>
 80017be:	2800      	cmp	r0, #0
 80017c0:	f73f adb8 	bgt.w	8001334 <_dtoa_r+0x4cc>
 80017c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80017c6:	9f03      	ldr	r7, [sp, #12]
 80017c8:	ea6f 0a03 	mvn.w	sl, r3
 80017cc:	f04f 0800 	mov.w	r8, #0
 80017d0:	4621      	mov	r1, r4
 80017d2:	4628      	mov	r0, r5
 80017d4:	f00b fef6 	bl	800d5c4 <_Bfree>
 80017d8:	2e00      	cmp	r6, #0
 80017da:	f43f aea7 	beq.w	800152c <_dtoa_r+0x6c4>
 80017de:	f1b8 0f00 	cmp.w	r8, #0
 80017e2:	d005      	beq.n	80017f0 <_dtoa_r+0x988>
 80017e4:	45b0      	cmp	r8, r6
 80017e6:	d003      	beq.n	80017f0 <_dtoa_r+0x988>
 80017e8:	4641      	mov	r1, r8
 80017ea:	4628      	mov	r0, r5
 80017ec:	f00b feea 	bl	800d5c4 <_Bfree>
 80017f0:	4631      	mov	r1, r6
 80017f2:	4628      	mov	r0, r5
 80017f4:	f00b fee6 	bl	800d5c4 <_Bfree>
 80017f8:	e698      	b.n	800152c <_dtoa_r+0x6c4>
 80017fa:	2400      	movs	r4, #0
 80017fc:	4626      	mov	r6, r4
 80017fe:	e7e1      	b.n	80017c4 <_dtoa_r+0x95c>
 8001800:	46c2      	mov	sl, r8
 8001802:	4626      	mov	r6, r4
 8001804:	e596      	b.n	8001334 <_dtoa_r+0x4cc>
 8001806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80fd 	beq.w	8001a0c <_dtoa_r+0xba4>
 8001812:	2f00      	cmp	r7, #0
 8001814:	dd05      	ble.n	8001822 <_dtoa_r+0x9ba>
 8001816:	4631      	mov	r1, r6
 8001818:	463a      	mov	r2, r7
 800181a:	4628      	mov	r0, r5
 800181c:	f00c f852 	bl	800d8c4 <__lshift>
 8001820:	4606      	mov	r6, r0
 8001822:	f1b8 0f00 	cmp.w	r8, #0
 8001826:	d05c      	beq.n	80018e2 <_dtoa_r+0xa7a>
 8001828:	6871      	ldr	r1, [r6, #4]
 800182a:	4628      	mov	r0, r5
 800182c:	f00b fe8a 	bl	800d544 <_Balloc>
 8001830:	4607      	mov	r7, r0
 8001832:	b928      	cbnz	r0, 8001840 <_dtoa_r+0x9d8>
 8001834:	4b80      	ldr	r3, [pc, #512]	; (8001a38 <_dtoa_r+0xbd0>)
 8001836:	4602      	mov	r2, r0
 8001838:	f240 21ea 	movw	r1, #746	; 0x2ea
 800183c:	f7ff bb28 	b.w	8000e90 <_dtoa_r+0x28>
 8001840:	6932      	ldr	r2, [r6, #16]
 8001842:	3202      	adds	r2, #2
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	f106 010c 	add.w	r1, r6, #12
 800184a:	300c      	adds	r0, #12
 800184c:	f00f fa2a 	bl	8010ca4 <memcpy>
 8001850:	2201      	movs	r2, #1
 8001852:	4639      	mov	r1, r7
 8001854:	4628      	mov	r0, r5
 8001856:	f00c f835 	bl	800d8c4 <__lshift>
 800185a:	9b03      	ldr	r3, [sp, #12]
 800185c:	3301      	adds	r3, #1
 800185e:	9308      	str	r3, [sp, #32]
 8001860:	9b03      	ldr	r3, [sp, #12]
 8001862:	444b      	add	r3, r9
 8001864:	930a      	str	r3, [sp, #40]	; 0x28
 8001866:	9b04      	ldr	r3, [sp, #16]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	46b0      	mov	r8, r6
 800186e:	9309      	str	r3, [sp, #36]	; 0x24
 8001870:	4606      	mov	r6, r0
 8001872:	9b08      	ldr	r3, [sp, #32]
 8001874:	4621      	mov	r1, r4
 8001876:	3b01      	subs	r3, #1
 8001878:	4658      	mov	r0, fp
 800187a:	9304      	str	r3, [sp, #16]
 800187c:	f00f fb7a 	bl	8010f74 <quorem>
 8001880:	4603      	mov	r3, r0
 8001882:	3330      	adds	r3, #48	; 0x30
 8001884:	9006      	str	r0, [sp, #24]
 8001886:	4641      	mov	r1, r8
 8001888:	4658      	mov	r0, fp
 800188a:	930b      	str	r3, [sp, #44]	; 0x2c
 800188c:	f00f fc46 	bl	801111c <__mcmp>
 8001890:	4632      	mov	r2, r6
 8001892:	4681      	mov	r9, r0
 8001894:	4621      	mov	r1, r4
 8001896:	4628      	mov	r0, r5
 8001898:	f00c f884 	bl	800d9a4 <__mdiff>
 800189c:	68c2      	ldr	r2, [r0, #12]
 800189e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018a0:	4607      	mov	r7, r0
 80018a2:	bb02      	cbnz	r2, 80018e6 <_dtoa_r+0xa7e>
 80018a4:	4601      	mov	r1, r0
 80018a6:	4658      	mov	r0, fp
 80018a8:	f00f fc38 	bl	801111c <__mcmp>
 80018ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018ae:	4602      	mov	r2, r0
 80018b0:	4639      	mov	r1, r7
 80018b2:	4628      	mov	r0, r5
 80018b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80018b8:	f00b fe84 	bl	800d5c4 <_Bfree>
 80018bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80018be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80018c0:	9f08      	ldr	r7, [sp, #32]
 80018c2:	ea43 0102 	orr.w	r1, r3, r2
 80018c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018c8:	430b      	orrs	r3, r1
 80018ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018cc:	d10d      	bne.n	80018ea <_dtoa_r+0xa82>
 80018ce:	2b39      	cmp	r3, #57	; 0x39
 80018d0:	d029      	beq.n	8001926 <_dtoa_r+0xabe>
 80018d2:	f1b9 0f00 	cmp.w	r9, #0
 80018d6:	dd01      	ble.n	80018dc <_dtoa_r+0xa74>
 80018d8:	9b06      	ldr	r3, [sp, #24]
 80018da:	3331      	adds	r3, #49	; 0x31
 80018dc:	9a04      	ldr	r2, [sp, #16]
 80018de:	7013      	strb	r3, [r2, #0]
 80018e0:	e776      	b.n	80017d0 <_dtoa_r+0x968>
 80018e2:	4630      	mov	r0, r6
 80018e4:	e7b9      	b.n	800185a <_dtoa_r+0x9f2>
 80018e6:	2201      	movs	r2, #1
 80018e8:	e7e2      	b.n	80018b0 <_dtoa_r+0xa48>
 80018ea:	f1b9 0f00 	cmp.w	r9, #0
 80018ee:	db06      	blt.n	80018fe <_dtoa_r+0xa96>
 80018f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80018f2:	ea41 0909 	orr.w	r9, r1, r9
 80018f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80018f8:	ea59 0101 	orrs.w	r1, r9, r1
 80018fc:	d120      	bne.n	8001940 <_dtoa_r+0xad8>
 80018fe:	2a00      	cmp	r2, #0
 8001900:	ddec      	ble.n	80018dc <_dtoa_r+0xa74>
 8001902:	4659      	mov	r1, fp
 8001904:	2201      	movs	r2, #1
 8001906:	4628      	mov	r0, r5
 8001908:	9308      	str	r3, [sp, #32]
 800190a:	f00b ffdb 	bl	800d8c4 <__lshift>
 800190e:	4621      	mov	r1, r4
 8001910:	4683      	mov	fp, r0
 8001912:	f00f fc03 	bl	801111c <__mcmp>
 8001916:	2800      	cmp	r0, #0
 8001918:	9b08      	ldr	r3, [sp, #32]
 800191a:	dc02      	bgt.n	8001922 <_dtoa_r+0xaba>
 800191c:	d1de      	bne.n	80018dc <_dtoa_r+0xa74>
 800191e:	07da      	lsls	r2, r3, #31
 8001920:	d5dc      	bpl.n	80018dc <_dtoa_r+0xa74>
 8001922:	2b39      	cmp	r3, #57	; 0x39
 8001924:	d1d8      	bne.n	80018d8 <_dtoa_r+0xa70>
 8001926:	9a04      	ldr	r2, [sp, #16]
 8001928:	2339      	movs	r3, #57	; 0x39
 800192a:	7013      	strb	r3, [r2, #0]
 800192c:	463b      	mov	r3, r7
 800192e:	461f      	mov	r7, r3
 8001930:	3b01      	subs	r3, #1
 8001932:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8001936:	2a39      	cmp	r2, #57	; 0x39
 8001938:	d050      	beq.n	80019dc <_dtoa_r+0xb74>
 800193a:	3201      	adds	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	e747      	b.n	80017d0 <_dtoa_r+0x968>
 8001940:	2a00      	cmp	r2, #0
 8001942:	dd03      	ble.n	800194c <_dtoa_r+0xae4>
 8001944:	2b39      	cmp	r3, #57	; 0x39
 8001946:	d0ee      	beq.n	8001926 <_dtoa_r+0xabe>
 8001948:	3301      	adds	r3, #1
 800194a:	e7c7      	b.n	80018dc <_dtoa_r+0xa74>
 800194c:	9a08      	ldr	r2, [sp, #32]
 800194e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001950:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001954:	428a      	cmp	r2, r1
 8001956:	d02a      	beq.n	80019ae <_dtoa_r+0xb46>
 8001958:	4659      	mov	r1, fp
 800195a:	2300      	movs	r3, #0
 800195c:	220a      	movs	r2, #10
 800195e:	4628      	mov	r0, r5
 8001960:	f00b fe52 	bl	800d608 <__multadd>
 8001964:	45b0      	cmp	r8, r6
 8001966:	4683      	mov	fp, r0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	f04f 020a 	mov.w	r2, #10
 8001970:	4641      	mov	r1, r8
 8001972:	4628      	mov	r0, r5
 8001974:	d107      	bne.n	8001986 <_dtoa_r+0xb1e>
 8001976:	f00b fe47 	bl	800d608 <__multadd>
 800197a:	4680      	mov	r8, r0
 800197c:	4606      	mov	r6, r0
 800197e:	9b08      	ldr	r3, [sp, #32]
 8001980:	3301      	adds	r3, #1
 8001982:	9308      	str	r3, [sp, #32]
 8001984:	e775      	b.n	8001872 <_dtoa_r+0xa0a>
 8001986:	f00b fe3f 	bl	800d608 <__multadd>
 800198a:	4631      	mov	r1, r6
 800198c:	4680      	mov	r8, r0
 800198e:	2300      	movs	r3, #0
 8001990:	220a      	movs	r2, #10
 8001992:	4628      	mov	r0, r5
 8001994:	f00b fe38 	bl	800d608 <__multadd>
 8001998:	4606      	mov	r6, r0
 800199a:	e7f0      	b.n	800197e <_dtoa_r+0xb16>
 800199c:	f1b9 0f00 	cmp.w	r9, #0
 80019a0:	9a03      	ldr	r2, [sp, #12]
 80019a2:	bfcc      	ite	gt
 80019a4:	464f      	movgt	r7, r9
 80019a6:	2701      	movle	r7, #1
 80019a8:	4417      	add	r7, r2
 80019aa:	f04f 0800 	mov.w	r8, #0
 80019ae:	4659      	mov	r1, fp
 80019b0:	2201      	movs	r2, #1
 80019b2:	4628      	mov	r0, r5
 80019b4:	9308      	str	r3, [sp, #32]
 80019b6:	f00b ff85 	bl	800d8c4 <__lshift>
 80019ba:	4621      	mov	r1, r4
 80019bc:	4683      	mov	fp, r0
 80019be:	f00f fbad 	bl	801111c <__mcmp>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	dcb2      	bgt.n	800192c <_dtoa_r+0xac4>
 80019c6:	d102      	bne.n	80019ce <_dtoa_r+0xb66>
 80019c8:	9b08      	ldr	r3, [sp, #32]
 80019ca:	07db      	lsls	r3, r3, #31
 80019cc:	d4ae      	bmi.n	800192c <_dtoa_r+0xac4>
 80019ce:	463b      	mov	r3, r7
 80019d0:	461f      	mov	r7, r3
 80019d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80019d6:	2a30      	cmp	r2, #48	; 0x30
 80019d8:	d0fa      	beq.n	80019d0 <_dtoa_r+0xb68>
 80019da:	e6f9      	b.n	80017d0 <_dtoa_r+0x968>
 80019dc:	9a03      	ldr	r2, [sp, #12]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d1a5      	bne.n	800192e <_dtoa_r+0xac6>
 80019e2:	f10a 0a01 	add.w	sl, sl, #1
 80019e6:	2331      	movs	r3, #49	; 0x31
 80019e8:	e779      	b.n	80018de <_dtoa_r+0xa76>
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <_dtoa_r+0xbd4>)
 80019ec:	f7ff baa7 	b.w	8000f3e <_dtoa_r+0xd6>
 80019f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f47f aa80 	bne.w	8000ef8 <_dtoa_r+0x90>
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <_dtoa_r+0xbd8>)
 80019fa:	f7ff baa0 	b.w	8000f3e <_dtoa_r+0xd6>
 80019fe:	f1b9 0f00 	cmp.w	r9, #0
 8001a02:	dc03      	bgt.n	8001a0c <_dtoa_r+0xba4>
 8001a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	f73f aecb 	bgt.w	80017a2 <_dtoa_r+0x93a>
 8001a0c:	9f03      	ldr	r7, [sp, #12]
 8001a0e:	4621      	mov	r1, r4
 8001a10:	4658      	mov	r0, fp
 8001a12:	f00f faaf 	bl	8010f74 <quorem>
 8001a16:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001a1a:	f807 3b01 	strb.w	r3, [r7], #1
 8001a1e:	9a03      	ldr	r2, [sp, #12]
 8001a20:	1aba      	subs	r2, r7, r2
 8001a22:	4591      	cmp	r9, r2
 8001a24:	ddba      	ble.n	800199c <_dtoa_r+0xb34>
 8001a26:	4659      	mov	r1, fp
 8001a28:	2300      	movs	r3, #0
 8001a2a:	220a      	movs	r2, #10
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f00b fdeb 	bl	800d608 <__multadd>
 8001a32:	4683      	mov	fp, r0
 8001a34:	e7eb      	b.n	8001a0e <_dtoa_r+0xba6>
 8001a36:	bf00      	nop
 8001a38:	080136db 	.word	0x080136db
 8001a3c:	080135a1 	.word	0x080135a1
 8001a40:	08013674 	.word	0x08013674

08001a44 <send_to_terminal>:
atomic_t tx_done = ATOMIC_INIT(true);

struct gpio_dt_spec state_bluetooth = GPIO_DT_SPEC_GET_OR(STATE_NODE, gpios, {0});

static void send_to_terminal(const struct device *dev, uint8_t *buf_tx)
{
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	4604      	mov	r4, r0
 8001a48:	460d      	mov	r5, r1
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <send_to_terminal+0x50>)
 8001a4c:	2700      	movs	r7, #0
 8001a4e:	f3bf 8f5b 	dmb	ish
 8001a52:	e853 2f00 	ldrex	r2, [r3]
 8001a56:	e843 7100 	strex	r1, r7, [r3]
 8001a5a:	2900      	cmp	r1, #0
 8001a5c:	d1f9      	bne.n	8001a52 <send_to_terminal+0xe>
 8001a5e:	f3bf 8f5b 	dmb	ish
    atomic_set(&tx_done, false);
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001a62:	4628      	mov	r0, r5
 8001a64:	f7ff f9f7 	bl	8000e56 <strlen>
 8001a68:	4602      	mov	r2, r0
static inline int z_impl_uart_tx(const struct device *dev, const uint8_t *buf,
				 size_t len, int32_t timeout)

{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
 8001a6a:	68a3      	ldr	r3, [r4, #8]
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
 8001a6c:	685e      	ldr	r6, [r3, #4]
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4629      	mov	r1, r5
 8001a72:	4620      	mov	r0, r4
 8001a74:	47b0      	blx	r6
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&timeout, K_SYSCALL_UART_TX);
	}
#endif
	compiler_barrier();
	return z_impl_uart_tx(dev, buf, len, timeout);
 8001a76:	e003      	b.n	8001a80 <send_to_terminal+0x3c>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8001a78:	2064      	movs	r0, #100	; 0x64
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	f00a fab0 	bl	800bfe0 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001a80:	f3bf 8f5b 	dmb	ish
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <send_to_terminal+0x50>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&tx_done)) {
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f3      	beq.n	8001a78 <send_to_terminal+0x34>
        k_sleep(K_MSEC(10));
    }
}
 8001a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200002a4 	.word	0x200002a4

08001a98 <lora_receive_cb>:
        }
    }
}

void lora_receive_cb(const struct device *dev, uint8_t *data, uint16_t size, int16_t rssi, int8_t snr)
{
 8001a98:	b510      	push	{r4, lr}
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	4608      	mov	r0, r1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8001a9e:	490b      	ldr	r1, [pc, #44]	; (8001acc <lora_receive_cb+0x34>)
 8001aa0:	f00f f900 	bl	8010ca4 <memcpy>
 * @return 0 when reception successfully setup, negative on error
 */
static inline int lora_recv_async(const struct device *dev, lora_recv_cb cb,
  lora_recv_error_timeout_cb error_timeout_cb)
{
	const struct lora_driver_api *api =
 8001aa4:	68a3      	ldr	r3, [r4, #8]
		(const struct lora_driver_api *)dev->api;

	return api->recv_async(dev, cb, error_timeout_cb);
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4620      	mov	r0, r4
 8001aae:	4798      	blx	r3
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <lora_receive_cb+0x38>)
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	f3bf 8f5b 	dmb	ish
 8001ab8:	e853 1f00 	ldrex	r1, [r3]
 8001abc:	e843 2000 	strex	r0, r2, [r3]
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	d1f9      	bne.n	8001ab8 <lora_receive_cb+0x20>
 8001ac4:	f3bf 8f5b 	dmb	ish
    memcpy(data, radio_buf_tx, size);
    lora_recv_async(dev, NULL, NULL);
    atomic_set(&atomic_cur_state, STATE_TRANSMIT);
}
 8001ac8:	bd10      	pop	{r4, pc}
 8001aca:	bf00      	nop
 8001acc:	20000d88 	.word	0x20000d88
 8001ad0:	200002a0 	.word	0x200002a0

08001ad4 <print_modem_cfg>:
    return lora_config(dev, cfg);
}


void print_modem_cfg(const struct device *dev, uint8_t *buf_tx, struct lora_modem_config *cfg)
{
 8001ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ad6:	4606      	mov	r6, r0
 8001ad8:	460c      	mov	r4, r1
 8001ada:	4617      	mov	r7, r2
    sprintf(buf_tx, "Current modem configuration:\n");
 8001adc:	4d71      	ldr	r5, [pc, #452]	; (8001ca4 <print_modem_cfg+0x1d0>)
 8001ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae0:	6020      	str	r0, [r4, #0]
 8001ae2:	6061      	str	r1, [r4, #4]
 8001ae4:	60a2      	str	r2, [r4, #8]
 8001ae6:	60e3      	str	r3, [r4, #12]
 8001ae8:	cd07      	ldmia	r5!, {r0, r1, r2}
 8001aea:	6120      	str	r0, [r4, #16]
 8001aec:	6161      	str	r1, [r4, #20]
 8001aee:	61a2      	str	r2, [r4, #24]
 8001af0:	882b      	ldrh	r3, [r5, #0]
 8001af2:	83a3      	strh	r3, [r4, #28]
    send_to_terminal(dev, buf_tx);
 8001af4:	4621      	mov	r1, r4
 8001af6:	4630      	mov	r0, r6
 8001af8:	f7ff ffa4 	bl	8001a44 <send_to_terminal>

    sprintf(buf_tx, "Frequency: %lu \n", cfg->frequency);
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	496a      	ldr	r1, [pc, #424]	; (8001ca8 <print_modem_cfg+0x1d4>)
 8001b00:	4620      	mov	r0, r4
 8001b02:	f00b fc05 	bl	800d310 <siprintf>
    send_to_terminal(dev, buf_tx);
 8001b06:	4621      	mov	r1, r4
 8001b08:	4630      	mov	r0, r6
 8001b0a:	f7ff ff9b 	bl	8001a44 <send_to_terminal>

    switch (cfg->bandwidth) {
 8001b0e:	793b      	ldrb	r3, [r7, #4]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d016      	beq.n	8001b42 <print_modem_cfg+0x6e>
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d01a      	beq.n	8001b4e <print_modem_cfg+0x7a>
 8001b18:	b16b      	cbz	r3, 8001b36 <print_modem_cfg+0x62>
            break;
        case BW_500_KHZ:
            sprintf(buf_tx, "Bandwidth: %u kHz\n", 500);
            break;
    }
    send_to_terminal(dev, buf_tx);
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	4630      	mov	r0, r6
 8001b1e:	f7ff ff91 	bl	8001a44 <send_to_terminal>

    switch (cfg->datarate) {
 8001b22:	797b      	ldrb	r3, [r7, #5]
 8001b24:	3b06      	subs	r3, #6
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d81e      	bhi.n	8001b68 <print_modem_cfg+0x94>
 8001b2a:	e8df f003 	tbb	[pc, r3]
 8001b2e:	2917      	.short	0x2917
 8001b30:	473e3730 	.word	0x473e3730
 8001b34:	50          	.byte	0x50
 8001b35:	00          	.byte	0x00
            sprintf(buf_tx, "Bandwidth: %u kHz\n", 125);
 8001b36:	227d      	movs	r2, #125	; 0x7d
 8001b38:	495c      	ldr	r1, [pc, #368]	; (8001cac <print_modem_cfg+0x1d8>)
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f00b fbe8 	bl	800d310 <siprintf>
            break;
 8001b40:	e7eb      	b.n	8001b1a <print_modem_cfg+0x46>
            sprintf(buf_tx, "Bandwidth: %u kHz\n", 250);
 8001b42:	22fa      	movs	r2, #250	; 0xfa
 8001b44:	4959      	ldr	r1, [pc, #356]	; (8001cac <print_modem_cfg+0x1d8>)
 8001b46:	4620      	mov	r0, r4
 8001b48:	f00b fbe2 	bl	800d310 <siprintf>
            break;
 8001b4c:	e7e5      	b.n	8001b1a <print_modem_cfg+0x46>
            sprintf(buf_tx, "Bandwidth: %u kHz\n", 500);
 8001b4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b52:	4956      	ldr	r1, [pc, #344]	; (8001cac <print_modem_cfg+0x1d8>)
 8001b54:	4620      	mov	r0, r4
 8001b56:	f00b fbdb 	bl	800d310 <siprintf>
            break;
 8001b5a:	e7de      	b.n	8001b1a <print_modem_cfg+0x46>
        case SF_6:
            sprintf(buf_tx, "Datarate: SF_6\n");
 8001b5c:	4d54      	ldr	r5, [pc, #336]	; (8001cb0 <print_modem_cfg+0x1dc>)
 8001b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b60:	6020      	str	r0, [r4, #0]
 8001b62:	6061      	str	r1, [r4, #4]
 8001b64:	60a2      	str	r2, [r4, #8]
 8001b66:	60e3      	str	r3, [r4, #12]
            break;
        case SF_12:
            sprintf(buf_tx, "Datarate: SF_12\n");
            break;
    }
    send_to_terminal(dev, buf_tx);
 8001b68:	4621      	mov	r1, r4
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	f7ff ff6a 	bl	8001a44 <send_to_terminal>

    switch (cfg->coding_rate) {
 8001b70:	79bb      	ldrb	r3, [r7, #6]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d83b      	bhi.n	8001bf0 <print_modem_cfg+0x11c>
 8001b78:	e8df f003 	tbb	[pc, r3]
 8001b7c:	7c736a32 	.word	0x7c736a32
            sprintf(buf_tx, "Datarate: SF_7\n");
 8001b80:	4d4c      	ldr	r5, [pc, #304]	; (8001cb4 <print_modem_cfg+0x1e0>)
 8001b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b84:	6020      	str	r0, [r4, #0]
 8001b86:	6061      	str	r1, [r4, #4]
 8001b88:	60a2      	str	r2, [r4, #8]
 8001b8a:	60e3      	str	r3, [r4, #12]
            break;
 8001b8c:	e7ec      	b.n	8001b68 <print_modem_cfg+0x94>
            sprintf(buf_tx, "Datarate: SF_8\n");
 8001b8e:	4d4a      	ldr	r5, [pc, #296]	; (8001cb8 <print_modem_cfg+0x1e4>)
 8001b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b92:	6020      	str	r0, [r4, #0]
 8001b94:	6061      	str	r1, [r4, #4]
 8001b96:	60a2      	str	r2, [r4, #8]
 8001b98:	60e3      	str	r3, [r4, #12]
            break;
 8001b9a:	e7e5      	b.n	8001b68 <print_modem_cfg+0x94>
            sprintf(buf_tx, "Datarate: SF_9\n");
 8001b9c:	4d47      	ldr	r5, [pc, #284]	; (8001cbc <print_modem_cfg+0x1e8>)
 8001b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba0:	6020      	str	r0, [r4, #0]
 8001ba2:	6061      	str	r1, [r4, #4]
 8001ba4:	60a2      	str	r2, [r4, #8]
 8001ba6:	60e3      	str	r3, [r4, #12]
            break;
 8001ba8:	e7de      	b.n	8001b68 <print_modem_cfg+0x94>
            sprintf(buf_tx, "Datarate: SF_10\n");
 8001baa:	4d45      	ldr	r5, [pc, #276]	; (8001cc0 <print_modem_cfg+0x1ec>)
 8001bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bae:	6020      	str	r0, [r4, #0]
 8001bb0:	6061      	str	r1, [r4, #4]
 8001bb2:	60a2      	str	r2, [r4, #8]
 8001bb4:	60e3      	str	r3, [r4, #12]
 8001bb6:	782b      	ldrb	r3, [r5, #0]
 8001bb8:	7423      	strb	r3, [r4, #16]
            break;
 8001bba:	e7d5      	b.n	8001b68 <print_modem_cfg+0x94>
            sprintf(buf_tx, "Datarate: SF_11\n");
 8001bbc:	4d41      	ldr	r5, [pc, #260]	; (8001cc4 <print_modem_cfg+0x1f0>)
 8001bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc0:	6020      	str	r0, [r4, #0]
 8001bc2:	6061      	str	r1, [r4, #4]
 8001bc4:	60a2      	str	r2, [r4, #8]
 8001bc6:	60e3      	str	r3, [r4, #12]
 8001bc8:	782b      	ldrb	r3, [r5, #0]
 8001bca:	7423      	strb	r3, [r4, #16]
            break;
 8001bcc:	e7cc      	b.n	8001b68 <print_modem_cfg+0x94>
            sprintf(buf_tx, "Datarate: SF_12\n");
 8001bce:	4d3e      	ldr	r5, [pc, #248]	; (8001cc8 <print_modem_cfg+0x1f4>)
 8001bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd2:	6020      	str	r0, [r4, #0]
 8001bd4:	6061      	str	r1, [r4, #4]
 8001bd6:	60a2      	str	r2, [r4, #8]
 8001bd8:	60e3      	str	r3, [r4, #12]
 8001bda:	782b      	ldrb	r3, [r5, #0]
 8001bdc:	7423      	strb	r3, [r4, #16]
            break;
 8001bde:	e7c3      	b.n	8001b68 <print_modem_cfg+0x94>
        case CR_4_5:
            sprintf(buf_tx, "Coding rate: 4/5\n");
 8001be0:	4d3a      	ldr	r5, [pc, #232]	; (8001ccc <print_modem_cfg+0x1f8>)
 8001be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be4:	6020      	str	r0, [r4, #0]
 8001be6:	6061      	str	r1, [r4, #4]
 8001be8:	60a2      	str	r2, [r4, #8]
 8001bea:	60e3      	str	r3, [r4, #12]
 8001bec:	882b      	ldrh	r3, [r5, #0]
 8001bee:	8223      	strh	r3, [r4, #16]
            break;
        case CR_4_8:
            sprintf(buf_tx, "Coding rate: 4/8\n");
            break;
    }
    send_to_terminal(dev, buf_tx);
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	4630      	mov	r0, r6
 8001bf4:	f7ff ff26 	bl	8001a44 <send_to_terminal>

    sprintf(buf_tx, "Preamble length: %u\n", cfg->preamble_len);
 8001bf8:	893a      	ldrh	r2, [r7, #8]
 8001bfa:	4935      	ldr	r1, [pc, #212]	; (8001cd0 <print_modem_cfg+0x1fc>)
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f00b fb87 	bl	800d310 <siprintf>
    send_to_terminal(dev, buf_tx);
 8001c02:	4621      	mov	r1, r4
 8001c04:	4630      	mov	r0, r6
 8001c06:	f7ff ff1d 	bl	8001a44 <send_to_terminal>

    if (cfg->fixed_len) {
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d03a      	beq.n	8001c86 <print_modem_cfg+0x1b2>
        sprintf(buf_tx, "Fixed length: true\n");
 8001c10:	4d30      	ldr	r5, [pc, #192]	; (8001cd4 <print_modem_cfg+0x200>)
 8001c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c14:	6020      	str	r0, [r4, #0]
 8001c16:	6061      	str	r1, [r4, #4]
 8001c18:	60a2      	str	r2, [r4, #8]
 8001c1a:	60e3      	str	r3, [r4, #12]
 8001c1c:	6828      	ldr	r0, [r5, #0]
 8001c1e:	6120      	str	r0, [r4, #16]
        send_to_terminal(dev, buf_tx);
 8001c20:	4621      	mov	r1, r4
 8001c22:	4630      	mov	r0, r6
 8001c24:	f7ff ff0e 	bl	8001a44 <send_to_terminal>

        sprintf(buf_tx, "Payload length: %u\n", cfg->payload_len);
 8001c28:	7aba      	ldrb	r2, [r7, #10]
 8001c2a:	492b      	ldr	r1, [pc, #172]	; (8001cd8 <print_modem_cfg+0x204>)
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f00b fb6f 	bl	800d310 <siprintf>
        send_to_terminal(dev, buf_tx);
 8001c32:	4621      	mov	r1, r4
 8001c34:	4630      	mov	r0, r6
 8001c36:	f7ff ff05 	bl	8001a44 <send_to_terminal>
    } else {
        sprintf(buf_tx, "Fixed length: false\n");
        send_to_terminal(dev, buf_tx);
    }

    sprintf(buf_tx, "TX power: %d dBm\n", cfg->tx_power);
 8001c3a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8001c3e:	4927      	ldr	r1, [pc, #156]	; (8001cdc <print_modem_cfg+0x208>)
 8001c40:	4620      	mov	r0, r4
 8001c42:	f00b fb65 	bl	800d310 <siprintf>
    send_to_terminal(dev, buf_tx);
 8001c46:	4621      	mov	r1, r4
 8001c48:	4630      	mov	r0, r6
 8001c4a:	f7ff fefb 	bl	8001a44 <send_to_terminal>
}
 8001c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            sprintf(buf_tx, "Coding rate: 4/6\n");
 8001c50:	4d23      	ldr	r5, [pc, #140]	; (8001ce0 <print_modem_cfg+0x20c>)
 8001c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c54:	6020      	str	r0, [r4, #0]
 8001c56:	6061      	str	r1, [r4, #4]
 8001c58:	60a2      	str	r2, [r4, #8]
 8001c5a:	60e3      	str	r3, [r4, #12]
 8001c5c:	882b      	ldrh	r3, [r5, #0]
 8001c5e:	8223      	strh	r3, [r4, #16]
            break;
 8001c60:	e7c6      	b.n	8001bf0 <print_modem_cfg+0x11c>
            sprintf(buf_tx, "Coding rate: 4/7\n");
 8001c62:	4d20      	ldr	r5, [pc, #128]	; (8001ce4 <print_modem_cfg+0x210>)
 8001c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c66:	6020      	str	r0, [r4, #0]
 8001c68:	6061      	str	r1, [r4, #4]
 8001c6a:	60a2      	str	r2, [r4, #8]
 8001c6c:	60e3      	str	r3, [r4, #12]
 8001c6e:	882b      	ldrh	r3, [r5, #0]
 8001c70:	8223      	strh	r3, [r4, #16]
            break;
 8001c72:	e7bd      	b.n	8001bf0 <print_modem_cfg+0x11c>
            sprintf(buf_tx, "Coding rate: 4/8\n");
 8001c74:	4d1c      	ldr	r5, [pc, #112]	; (8001ce8 <print_modem_cfg+0x214>)
 8001c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c78:	6020      	str	r0, [r4, #0]
 8001c7a:	6061      	str	r1, [r4, #4]
 8001c7c:	60a2      	str	r2, [r4, #8]
 8001c7e:	60e3      	str	r3, [r4, #12]
 8001c80:	882b      	ldrh	r3, [r5, #0]
 8001c82:	8223      	strh	r3, [r4, #16]
            break;
 8001c84:	e7b4      	b.n	8001bf0 <print_modem_cfg+0x11c>
        sprintf(buf_tx, "Fixed length: false\n");
 8001c86:	4d19      	ldr	r5, [pc, #100]	; (8001cec <print_modem_cfg+0x218>)
 8001c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c8a:	6020      	str	r0, [r4, #0]
 8001c8c:	6061      	str	r1, [r4, #4]
 8001c8e:	60a2      	str	r2, [r4, #8]
 8001c90:	60e3      	str	r3, [r4, #12]
 8001c92:	6828      	ldr	r0, [r5, #0]
 8001c94:	6120      	str	r0, [r4, #16]
 8001c96:	792b      	ldrb	r3, [r5, #4]
 8001c98:	7523      	strb	r3, [r4, #20]
        send_to_terminal(dev, buf_tx);
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	4630      	mov	r0, r6
 8001c9e:	f7ff fed1 	bl	8001a44 <send_to_terminal>
 8001ca2:	e7ca      	b.n	8001c3a <print_modem_cfg+0x166>
 8001ca4:	08011bb0 	.word	0x08011bb0
 8001ca8:	08011bd0 	.word	0x08011bd0
 8001cac:	08011be4 	.word	0x08011be4
 8001cb0:	08011bf8 	.word	0x08011bf8
 8001cb4:	08011c08 	.word	0x08011c08
 8001cb8:	08011c18 	.word	0x08011c18
 8001cbc:	08011c28 	.word	0x08011c28
 8001cc0:	08011c38 	.word	0x08011c38
 8001cc4:	08011c4c 	.word	0x08011c4c
 8001cc8:	08011c60 	.word	0x08011c60
 8001ccc:	08011c74 	.word	0x08011c74
 8001cd0:	08011cc4 	.word	0x08011cc4
 8001cd4:	08011cdc 	.word	0x08011cdc
 8001cd8:	08011cf0 	.word	0x08011cf0
 8001cdc:	08011d1c 	.word	0x08011d1c
 8001ce0:	08011c88 	.word	0x08011c88
 8001ce4:	08011c9c 	.word	0x08011c9c
 8001ce8:	08011cb0 	.word	0x08011cb0
 8001cec:	08011d04 	.word	0x08011d04

08001cf0 <print_per_status>:


void print_per_status(const struct device *dev, uint8_t *buf_tx, int ret, struct print_data_elem_s *print_data)
{
 8001cf0:	b570      	push	{r4, r5, r6, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	4605      	mov	r5, r0
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	4619      	mov	r1, r3
    if (ret) {
 8001cfa:	b192      	cbz	r2, 8001d22 <print_per_status+0x32>
        sprintf(buf_tx, "Packet %lu/%lu is missing!!!\n", print_data->packet_num, atomic_per_num);
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <print_per_status+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	684a      	ldr	r2, [r1, #4]
 8001d02:	4915      	ldr	r1, [pc, #84]	; (8001d58 <print_per_status+0x68>)
 8001d04:	4620      	mov	r0, r4
 8001d06:	f00b fb03 	bl	800d310 <siprintf>
        uart_tx(dev, buf_tx, strlen(buf_tx), TIMEOUT);
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f7ff f8a3 	bl	8000e56 <strlen>
 8001d10:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8001d12:	68ab      	ldr	r3, [r5, #8]
	return api->tx(dev, buf, len, timeout);
 8001d14:	685e      	ldr	r6, [r3, #4]
 8001d16:	2300      	movs	r3, #0
 8001d18:	4621      	mov	r1, r4
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	47b0      	blx	r6
    } else {
        sprintf(buf_tx, "Packet %lu/%lu is received\n rssi: %d\n snr: %d\n", print_data->packet_num,
                atomic_per_num, print_data->rssi, print_data->snr);
        uart_tx(dev, buf_tx, strlen(buf_tx), TIMEOUT);
    }
}
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd70      	pop	{r4, r5, r6, pc}
        sprintf(buf_tx, "Packet %lu/%lu is received\n rssi: %d\n snr: %d\n", print_data->packet_num,
 8001d22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d26:	f991 2000 	ldrsb.w	r2, [r1]
 8001d2a:	9201      	str	r2, [sp, #4]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <print_per_status+0x64>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	684a      	ldr	r2, [r1, #4]
 8001d34:	4909      	ldr	r1, [pc, #36]	; (8001d5c <print_per_status+0x6c>)
 8001d36:	4620      	mov	r0, r4
 8001d38:	f00b faea 	bl	800d310 <siprintf>
        uart_tx(dev, buf_tx, strlen(buf_tx), TIMEOUT);
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f7ff f88a 	bl	8000e56 <strlen>
 8001d42:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8001d44:	68ab      	ldr	r3, [r5, #8]
	return api->tx(dev, buf, len, timeout);
 8001d46:	685e      	ldr	r6, [r3, #4]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	47b0      	blx	r6
}
 8001d50:	e7e5      	b.n	8001d1e <print_per_status+0x2e>
 8001d52:	bf00      	nop
 8001d54:	20000d80 	.word	0x20000d80
 8001d58:	08011d30 	.word	0x08011d30
 8001d5c:	08011d50 	.word	0x08011d50

08001d60 <per_meas>:
{
 8001d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d64:	b088      	sub	sp, #32
 8001d66:	4604      	mov	r4, r0
 8001d68:	460d      	mov	r5, r1
 8001d6a:	4691      	mov	r9, r2
 8001d6c:	4698      	mov	r8, r3
    int8_t snr = 0;
 8001d6e:	2600      	movs	r6, #0
 8001d70:	f88d 601f 	strb.w	r6, [sp, #31]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001d74:	f3bf 8f5b 	dmb	ish
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <per_meas+0xf0>)
 8001d7a:	f8d3 a000 	ldr.w	sl, [r3]
 8001d7e:	f3bf 8f5b 	dmb	ish
    atomic_t atomic_packet_count = ATOMIC_INIT(0);
 8001d82:	9606      	str	r6, [sp, #24]
    struct print_data_elem_s print_data = {0};
 8001d84:	9604      	str	r6, [sp, #16]
 8001d86:	9605      	str	r6, [sp, #20]
    while (i < per_num) {
 8001d88:	e050      	b.n	8001e2c <per_meas+0xcc>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001d8a:	f3bf 8f5b 	dmb	ish
        if (atomic_cas(&atomic_cur_state, STATE_PER_MEAS_RUN, STATE_PER_MEAS_RUN)) {
 8001d8e:	d14d      	bne.n	8001e2c <per_meas+0xcc>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8001d90:	ab06      	add	r3, sp, #24
 8001d92:	f3bf 8f5b 	dmb	ish
 8001d96:	e853 2f00 	ldrex	r2, [r3]
 8001d9a:	3201      	adds	r2, #1
 8001d9c:	e843 2100 	strex	r1, r2, [r3]
 8001da0:	2900      	cmp	r1, #0
 8001da2:	d1f8      	bne.n	8001d96 <per_meas+0x36>
 8001da4:	f3bf 8f5b 	dmb	ish
		arch_syscall_invoke2(*(uintptr_t *)&dst, *(uintptr_t *)&len, K_SYSCALL_SYS_RAND_GET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_sys_rand_get(dst, len);
 8001da8:	4f2a      	ldr	r7, [pc, #168]	; (8001e54 <per_meas+0xf4>)
 8001daa:	2104      	movs	r1, #4
 8001dac:	4638      	mov	r0, r7
 8001dae:	f00d f90e 	bl	800efce <z_impl_sys_rand_get>
            lora_cfg->tx = true;
 8001db2:	2301      	movs	r3, #1
 8001db4:	736b      	strb	r3, [r5, #13]
	const struct lora_driver_api *api =
 8001db6:	68a3      	ldr	r3, [r4, #8]
	return api->config(dev, config);
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4629      	mov	r1, r5
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	4798      	blx	r3
 8001dc0:	f241 3088 	movw	r0, #5000	; 0x1388
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	f00a f90b 	bl	800bfe0 <z_impl_k_sleep>
	const struct lora_driver_api *api =
 8001dca:	68a3      	ldr	r3, [r4, #8]
	return api->send(dev, data, data_len);
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	4639      	mov	r1, r7
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4798      	blx	r3
            lora_cfg->tx = false;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	736b      	strb	r3, [r5, #13]
	const struct lora_driver_api *api =
 8001dda:	68a3      	ldr	r3, [r4, #8]
	return api->config(dev, config);
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4629      	mov	r1, r5
 8001de0:	4620      	mov	r0, r4
 8001de2:	4798      	blx	r3
	const struct lora_driver_api *api =
 8001de4:	68a3      	ldr	r3, [r4, #8]
	return api->recv(dev, data, size, timeout, rssi, snr);
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f10d 021f 	add.w	r2, sp, #31
 8001dec:	9203      	str	r2, [sp, #12]
 8001dee:	aa07      	add	r2, sp, #28
 8001df0:	9202      	str	r2, [sp, #8]
 8001df2:	4819      	ldr	r0, [pc, #100]	; (8001e58 <per_meas+0xf8>)
 8001df4:	2100      	movs	r1, #0
 8001df6:	e9cd 0100 	strd	r0, r1, [sp]
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	4917      	ldr	r1, [pc, #92]	; (8001e5c <per_meas+0xfc>)
 8001dfe:	4620      	mov	r0, r4
 8001e00:	4798      	blx	r3
 8001e02:	4602      	mov	r2, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001e04:	f3bf 8f5b 	dmb	ish
 8001e08:	9b06      	ldr	r3, [sp, #24]
 8001e0a:	f3bf 8f5b 	dmb	ish
            print_data.packet_num = atomic_get(&atomic_packet_count);
 8001e0e:	9305      	str	r3, [sp, #20]
            print_data.rssi = rssi;
 8001e10:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8001e14:	f8ad 3012 	strh.w	r3, [sp, #18]
            print_data.snr = snr;
 8001e18:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8001e1c:	f88d 3010 	strb.w	r3, [sp, #16]
            print_per_status(uart_dev, buf_tx, ret, &print_data);
 8001e20:	ab04      	add	r3, sp, #16
 8001e22:	4641      	mov	r1, r8
 8001e24:	4648      	mov	r0, r9
 8001e26:	f7ff ff63 	bl	8001cf0 <print_per_status>
            i++;
 8001e2a:	3601      	adds	r6, #1
    while (i < per_num) {
 8001e2c:	4556      	cmp	r6, sl
 8001e2e:	d20c      	bcs.n	8001e4a <per_meas+0xea>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001e30:	490b      	ldr	r1, [pc, #44]	; (8001e60 <per_meas+0x100>)
 8001e32:	2302      	movs	r3, #2
 8001e34:	f3bf 8f5b 	dmb	ish
 8001e38:	e851 2f00 	ldrex	r2, [r1]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1a4      	bne.n	8001d8a <per_meas+0x2a>
 8001e40:	e841 3000 	strex	r0, r3, [r1]
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d0a0      	beq.n	8001d8a <per_meas+0x2a>
 8001e48:	e7f6      	b.n	8001e38 <per_meas+0xd8>
}
 8001e4a:	b008      	add	sp, #32
 8001e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e50:	20000d80 	.word	0x20000d80
 8001e54:	20000d88 	.word	0x20000d88
 8001e58:	000493e0 	.word	0x000493e0
 8001e5c:	20000d84 	.word	0x20000d84
 8001e60:	200002a0 	.word	0x200002a0

08001e64 <event_cb>:

void state_bluetooth_active_cb (const struct device *port, struct gpio_callback *cb, gpio_port_pins_t pins)
{
}

void event_cb(const struct device* dev, struct uart_event* evt, void* user_data) {
 8001e64:	b508      	push	{r3, lr}
    switch (evt->type) {
 8001e66:	780b      	ldrb	r3, [r1, #0]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d013      	beq.n	8001e94 <event_cb+0x30>
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d00d      	beq.n	8001e8c <event_cb+0x28>
 8001e70:	b95b      	cbnz	r3, 8001e8a <event_cb+0x26>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <event_cb+0x38>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	f3bf 8f5b 	dmb	ish
 8001e7a:	e853 1f00 	ldrex	r1, [r3]
 8001e7e:	e843 2000 	strex	r0, r2, [r3]
 8001e82:	2800      	cmp	r0, #0
 8001e84:	d1f9      	bne.n	8001e7a <event_cb+0x16>
 8001e86:	f3bf 8f5b 	dmb	ish
            uart_rx_disable(dev);
            break;
        case UART_RX_STOPPED:
            break;
    }
}
 8001e8a:	bd08      	pop	{r3, pc}
            k_work_submit(&work_uart_data_proc);
 8001e8c:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <event_cb+0x3c>)
 8001e8e:	f009 fcd1 	bl	800b834 <k_work_submit>
            break;
 8001e92:	e7fa      	b.n	8001e8a <event_cb+0x26>
__syscall int uart_rx_disable(const struct device *dev);

static inline int z_impl_uart_rx_disable(const struct device *dev)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
 8001e94:	6883      	ldr	r3, [r0, #8]
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	4798      	blx	r3
}
 8001e9a:	e7f6      	b.n	8001e8a <event_cb+0x26>
 8001e9c:	200002a4 	.word	0x200002a4
 8001ea0:	20000ddc 	.word	0x20000ddc

08001ea4 <work_uart_data_proc_handler>:


void work_uart_data_proc_handler(struct k_work *item)
{
 8001ea4:	b530      	push	{r4, r5, lr}
 8001ea6:	b083      	sub	sp, #12
    struct parsed_frame_s parsed_frame = {0};
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	9301      	str	r3, [sp, #4]
    /* Select current command */
    parsed_frame.cmd_ptr = strtok((char*)(&uart_buf_rx), "=");
 8001eae:	4d8c      	ldr	r5, [pc, #560]	; (80020e0 <work_uart_data_proc_handler+0x23c>)
 8001eb0:	498c      	ldr	r1, [pc, #560]	; (80020e4 <work_uart_data_proc_handler+0x240>)
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	f00b fa4c 	bl	800d350 <strtok>
 8001eb8:	4604      	mov	r4, r0
 8001eba:	9000      	str	r0, [sp, #0]
    /* Select command argument */
    parsed_frame.arg = atoi(strtok((char*)(&uart_buf_rx[strlen(parsed_frame.cmd_ptr) + 1]), "\n"));
 8001ebc:	f7fe ffcb 	bl	8000e56 <strlen>
 8001ec0:	3001      	adds	r0, #1
 8001ec2:	4989      	ldr	r1, [pc, #548]	; (80020e8 <work_uart_data_proc_handler+0x244>)
 8001ec4:	4428      	add	r0, r5
 8001ec6:	f00b fa43 	bl	800d350 <strtok>
 8001eca:	f00e fee7 	bl	8010c9c <atoi>
 8001ece:	4605      	mov	r5, r0
 8001ed0:	9001      	str	r0, [sp, #4]

    if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_PER)) { /* Set PER measurement */
 8001ed2:	4986      	ldr	r1, [pc, #536]	; (80020ec <work_uart_data_proc_handler+0x248>)
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f7fe ffb4 	bl	8000e42 <strcmp>
 8001eda:	b9c0      	cbnz	r0, 8001f0e <work_uart_data_proc_handler+0x6a>
 8001edc:	4b84      	ldr	r3, [pc, #528]	; (80020f0 <work_uart_data_proc_handler+0x24c>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f3bf 8f5b 	dmb	ish
 8001ee4:	e853 1f00 	ldrex	r1, [r3]
 8001ee8:	e843 2000 	strex	r0, r2, [r3]
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d1f9      	bne.n	8001ee4 <work_uart_data_proc_handler+0x40>
 8001ef0:	f3bf 8f5b 	dmb	ish
 8001ef4:	4b7f      	ldr	r3, [pc, #508]	; (80020f4 <work_uart_data_proc_handler+0x250>)
 8001ef6:	f3bf 8f5b 	dmb	ish
 8001efa:	e853 2f00 	ldrex	r2, [r3]
 8001efe:	e843 5100 	strex	r1, r5, [r3]
 8001f02:	2900      	cmp	r1, #0
 8001f04:	d1f9      	bne.n	8001efa <work_uart_data_proc_handler+0x56>
 8001f06:	f3bf 8f5b 	dmb	ish
        atomic_set(&atomic_cur_state, STATE_SET_SF);

    } else {
        atomic_set(&atomic_cur_state, STATE_IDLE);
    }
}
 8001f0a:	b003      	add	sp, #12
 8001f0c:	bd30      	pop	{r4, r5, pc}
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_STOP_RECEIVE_SESSION)) { /* Stop PER measurement */
 8001f0e:	497a      	ldr	r1, [pc, #488]	; (80020f8 <work_uart_data_proc_handler+0x254>)
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7fe ff96 	bl	8000e42 <strcmp>
 8001f16:	b960      	cbnz	r0, 8001f32 <work_uart_data_proc_handler+0x8e>
 8001f18:	4b75      	ldr	r3, [pc, #468]	; (80020f0 <work_uart_data_proc_handler+0x24c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f3bf 8f5b 	dmb	ish
 8001f20:	e853 1f00 	ldrex	r1, [r3]
 8001f24:	e843 2000 	strex	r0, r2, [r3]
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	d1f9      	bne.n	8001f20 <work_uart_data_proc_handler+0x7c>
 8001f2c:	f3bf 8f5b 	dmb	ish
 8001f30:	e7eb      	b.n	8001f0a <work_uart_data_proc_handler+0x66>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_GET_CFG)) { /* Get lora modem configuration parameters */
 8001f32:	4972      	ldr	r1, [pc, #456]	; (80020fc <work_uart_data_proc_handler+0x258>)
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7fe ff84 	bl	8000e42 <strcmp>
 8001f3a:	b960      	cbnz	r0, 8001f56 <work_uart_data_proc_handler+0xb2>
 8001f3c:	4b6c      	ldr	r3, [pc, #432]	; (80020f0 <work_uart_data_proc_handler+0x24c>)
 8001f3e:	2205      	movs	r2, #5
 8001f40:	f3bf 8f5b 	dmb	ish
 8001f44:	e853 1f00 	ldrex	r1, [r3]
 8001f48:	e843 2000 	strex	r0, r2, [r3]
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	d1f9      	bne.n	8001f44 <work_uart_data_proc_handler+0xa0>
 8001f50:	f3bf 8f5b 	dmb	ish
 8001f54:	e7d9      	b.n	8001f0a <work_uart_data_proc_handler+0x66>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_INCR_FREQ)) { /* Increment current frequency on 100 kHz */
 8001f56:	496a      	ldr	r1, [pc, #424]	; (8002100 <work_uart_data_proc_handler+0x25c>)
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7fe ff72 	bl	8000e42 <strcmp>
 8001f5e:	b960      	cbnz	r0, 8001f7a <work_uart_data_proc_handler+0xd6>
 8001f60:	4b63      	ldr	r3, [pc, #396]	; (80020f0 <work_uart_data_proc_handler+0x24c>)
 8001f62:	2207      	movs	r2, #7
 8001f64:	f3bf 8f5b 	dmb	ish
 8001f68:	e853 1f00 	ldrex	r1, [r3]
 8001f6c:	e843 2000 	strex	r0, r2, [r3]
 8001f70:	2800      	cmp	r0, #0
 8001f72:	d1f9      	bne.n	8001f68 <work_uart_data_proc_handler+0xc4>
 8001f74:	f3bf 8f5b 	dmb	ish
 8001f78:	e7c7      	b.n	8001f0a <work_uart_data_proc_handler+0x66>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_DECR_FREQ)) { /* Decrement current frequency on 100 kHz */
 8001f7a:	4962      	ldr	r1, [pc, #392]	; (8002104 <work_uart_data_proc_handler+0x260>)
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7fe ff60 	bl	8000e42 <strcmp>
 8001f82:	b960      	cbnz	r0, 8001f9e <work_uart_data_proc_handler+0xfa>
 8001f84:	4b5a      	ldr	r3, [pc, #360]	; (80020f0 <work_uart_data_proc_handler+0x24c>)
 8001f86:	2208      	movs	r2, #8
 8001f88:	f3bf 8f5b 	dmb	ish
 8001f8c:	e853 1f00 	ldrex	r1, [r3]
 8001f90:	e843 2000 	strex	r0, r2, [r3]
 8001f94:	2800      	cmp	r0, #0
 8001f96:	d1f9      	bne.n	8001f8c <work_uart_data_proc_handler+0xe8>
 8001f98:	f3bf 8f5b 	dmb	ish
 8001f9c:	e7b5      	b.n	8001f0a <work_uart_data_proc_handler+0x66>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_SET_FREQ)) { /* Change frequency value in lora configuration param */
 8001f9e:	495a      	ldr	r1, [pc, #360]	; (8002108 <work_uart_data_proc_handler+0x264>)
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f7fe ff4e 	bl	8000e42 <strcmp>
 8001fa6:	b9b8      	cbnz	r0, 8001fd8 <work_uart_data_proc_handler+0x134>
 8001fa8:	4b58      	ldr	r3, [pc, #352]	; (800210c <work_uart_data_proc_handler+0x268>)
 8001faa:	f3bf 8f5b 	dmb	ish
 8001fae:	e853 2f00 	ldrex	r2, [r3]
 8001fb2:	e843 5100 	strex	r1, r5, [r3]
 8001fb6:	2900      	cmp	r1, #0
 8001fb8:	d1f9      	bne.n	8001fae <work_uart_data_proc_handler+0x10a>
 8001fba:	f3bf 8f5b 	dmb	ish
 8001fbe:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <work_uart_data_proc_handler+0x24c>)
 8001fc0:	2206      	movs	r2, #6
 8001fc2:	f3bf 8f5b 	dmb	ish
 8001fc6:	e853 1f00 	ldrex	r1, [r3]
 8001fca:	e843 2000 	strex	r0, r2, [r3]
 8001fce:	2800      	cmp	r0, #0
 8001fd0:	d1f9      	bne.n	8001fc6 <work_uart_data_proc_handler+0x122>
 8001fd2:	f3bf 8f5b 	dmb	ish
 8001fd6:	e798      	b.n	8001f0a <work_uart_data_proc_handler+0x66>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_SET_SF)) { /* Change SF value in lora configuration param */
 8001fd8:	494d      	ldr	r1, [pc, #308]	; (8002110 <work_uart_data_proc_handler+0x26c>)
 8001fda:	4620      	mov	r0, r4
 8001fdc:	f7fe ff31 	bl	8000e42 <strcmp>
 8001fe0:	2800      	cmp	r0, #0
 8001fe2:	d16f      	bne.n	80020c4 <work_uart_data_proc_handler+0x220>
        switch (parsed_frame.arg) {
 8001fe4:	3d06      	subs	r5, #6
 8001fe6:	2d06      	cmp	r5, #6
 8001fe8:	d811      	bhi.n	800200e <work_uart_data_proc_handler+0x16a>
 8001fea:	e8df f005 	tbb	[pc, r5]
 8001fee:	515e      	.short	0x515e
 8001ff0:	1d2a3744 	.word	0x1d2a3744
 8001ff4:	04          	.byte	0x04
 8001ff5:	00          	.byte	0x00
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <work_uart_data_proc_handler+0x270>)
 8001ff8:	220c      	movs	r2, #12
 8001ffa:	f3bf 8f5b 	dmb	ish
 8001ffe:	e853 1f00 	ldrex	r1, [r3]
 8002002:	e843 2000 	strex	r0, r2, [r3]
 8002006:	2800      	cmp	r0, #0
 8002008:	d1f9      	bne.n	8001ffe <work_uart_data_proc_handler+0x15a>
 800200a:	f3bf 8f5b 	dmb	ish
 800200e:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <work_uart_data_proc_handler+0x24c>)
 8002010:	2209      	movs	r2, #9
 8002012:	f3bf 8f5b 	dmb	ish
 8002016:	e853 1f00 	ldrex	r1, [r3]
 800201a:	e843 2000 	strex	r0, r2, [r3]
 800201e:	2800      	cmp	r0, #0
 8002020:	d1f9      	bne.n	8002016 <work_uart_data_proc_handler+0x172>
 8002022:	f3bf 8f5b 	dmb	ish
 8002026:	e770      	b.n	8001f0a <work_uart_data_proc_handler+0x66>
 8002028:	4b3a      	ldr	r3, [pc, #232]	; (8002114 <work_uart_data_proc_handler+0x270>)
 800202a:	220b      	movs	r2, #11
 800202c:	f3bf 8f5b 	dmb	ish
 8002030:	e853 1f00 	ldrex	r1, [r3]
 8002034:	e843 2000 	strex	r0, r2, [r3]
 8002038:	2800      	cmp	r0, #0
 800203a:	d1f9      	bne.n	8002030 <work_uart_data_proc_handler+0x18c>
 800203c:	f3bf 8f5b 	dmb	ish
 8002040:	e7e5      	b.n	800200e <work_uart_data_proc_handler+0x16a>
 8002042:	4b34      	ldr	r3, [pc, #208]	; (8002114 <work_uart_data_proc_handler+0x270>)
 8002044:	220a      	movs	r2, #10
 8002046:	f3bf 8f5b 	dmb	ish
 800204a:	e853 1f00 	ldrex	r1, [r3]
 800204e:	e843 2000 	strex	r0, r2, [r3]
 8002052:	2800      	cmp	r0, #0
 8002054:	d1f9      	bne.n	800204a <work_uart_data_proc_handler+0x1a6>
 8002056:	f3bf 8f5b 	dmb	ish
 800205a:	e7d8      	b.n	800200e <work_uart_data_proc_handler+0x16a>
 800205c:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <work_uart_data_proc_handler+0x270>)
 800205e:	2209      	movs	r2, #9
 8002060:	f3bf 8f5b 	dmb	ish
 8002064:	e853 1f00 	ldrex	r1, [r3]
 8002068:	e843 2000 	strex	r0, r2, [r3]
 800206c:	2800      	cmp	r0, #0
 800206e:	d1f9      	bne.n	8002064 <work_uart_data_proc_handler+0x1c0>
 8002070:	f3bf 8f5b 	dmb	ish
 8002074:	e7cb      	b.n	800200e <work_uart_data_proc_handler+0x16a>
 8002076:	4b27      	ldr	r3, [pc, #156]	; (8002114 <work_uart_data_proc_handler+0x270>)
 8002078:	2208      	movs	r2, #8
 800207a:	f3bf 8f5b 	dmb	ish
 800207e:	e853 1f00 	ldrex	r1, [r3]
 8002082:	e843 2000 	strex	r0, r2, [r3]
 8002086:	2800      	cmp	r0, #0
 8002088:	d1f9      	bne.n	800207e <work_uart_data_proc_handler+0x1da>
 800208a:	f3bf 8f5b 	dmb	ish
 800208e:	e7be      	b.n	800200e <work_uart_data_proc_handler+0x16a>
 8002090:	4b20      	ldr	r3, [pc, #128]	; (8002114 <work_uart_data_proc_handler+0x270>)
 8002092:	2207      	movs	r2, #7
 8002094:	f3bf 8f5b 	dmb	ish
 8002098:	e853 1f00 	ldrex	r1, [r3]
 800209c:	e843 2000 	strex	r0, r2, [r3]
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d1f9      	bne.n	8002098 <work_uart_data_proc_handler+0x1f4>
 80020a4:	f3bf 8f5b 	dmb	ish
 80020a8:	e7b1      	b.n	800200e <work_uart_data_proc_handler+0x16a>
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <work_uart_data_proc_handler+0x270>)
 80020ac:	2206      	movs	r2, #6
 80020ae:	f3bf 8f5b 	dmb	ish
 80020b2:	e853 1f00 	ldrex	r1, [r3]
 80020b6:	e843 2000 	strex	r0, r2, [r3]
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d1f9      	bne.n	80020b2 <work_uart_data_proc_handler+0x20e>
 80020be:	f3bf 8f5b 	dmb	ish
 80020c2:	e7a4      	b.n	800200e <work_uart_data_proc_handler+0x16a>
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <work_uart_data_proc_handler+0x24c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	f3bf 8f5b 	dmb	ish
 80020cc:	e853 1f00 	ldrex	r1, [r3]
 80020d0:	e843 2000 	strex	r0, r2, [r3]
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d1f9      	bne.n	80020cc <work_uart_data_proc_handler+0x228>
 80020d8:	f3bf 8f5b 	dmb	ish
}
 80020dc:	e715      	b.n	8001f0a <work_uart_data_proc_handler+0x66>
 80020de:	bf00      	nop
 80020e0:	20000d8c 	.word	0x20000d8c
 80020e4:	08011d80 	.word	0x08011d80
 80020e8:	08011e68 	.word	0x08011e68
 80020ec:	08011d84 	.word	0x08011d84
 80020f0:	200002a0 	.word	0x200002a0
 80020f4:	20000d80 	.word	0x20000d80
 80020f8:	08011d88 	.word	0x08011d88
 80020fc:	08011d90 	.word	0x08011d90
 8002100:	08011d98 	.word	0x08011d98
 8002104:	08011da0 	.word	0x08011da0
 8002108:	08011da8 	.word	0x08011da8
 800210c:	200002a8 	.word	0x200002a8
 8002110:	08011db4 	.word	0x08011db4
 8002114:	200002ac 	.word	0x200002ac

08002118 <common_task>:


_Noreturn void common_task(void)
{
 8002118:	b500      	push	{lr}
 800211a:	b08d      	sub	sp, #52	; 0x34
    int8_t snr = 0;
    int16_t rssi = 0;
    volatile int32_t ret = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	930b      	str	r3, [sp, #44]	; 0x2c
    struct print_data_elem_s print_data = {0};
 8002120:	9309      	str	r3, [sp, #36]	; 0x24
 8002122:	930a      	str	r3, [sp, #40]	; 0x28

    struct lora_modem_config lora_cfg = {
 8002124:	9305      	str	r3, [sp, #20]
 8002126:	9306      	str	r3, [sp, #24]
 8002128:	9307      	str	r3, [sp, #28]
 800212a:	9308      	str	r3, [sp, #32]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800212c:	f3bf 8f5b 	dmb	ish
 8002130:	4ba4      	ldr	r3, [pc, #656]	; (80023c4 <common_task+0x2ac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f3bf 8f5b 	dmb	ish
 8002138:	9305      	str	r3, [sp, #20]
 800213a:	f3bf 8f5b 	dmb	ish
 800213e:	4ba2      	ldr	r3, [pc, #648]	; (80023c8 <common_task+0x2b0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f3bf 8f5b 	dmb	ish
 8002146:	f88d 3019 	strb.w	r3, [sp, #25]
 800214a:	2301      	movs	r3, #1
 800214c:	f88d 301a 	strb.w	r3, [sp, #26]
 8002150:	2308      	movs	r3, #8
 8002152:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002156:	2314      	movs	r3, #20
 8002158:	f88d 3020 	strb.w	r3, [sp, #32]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 800215c:	489b      	ldr	r0, [pc, #620]	; (80023cc <common_task+0x2b4>)
 800215e:	f00e f954 	bl	801040a <z_device_is_ready>
    /**
     * Radio initialization area begin
     * */
    /* Init radio */
    lora_dev = DEVICE_DT_GET(DEFAULT_RADIO_NODE);
    if (!device_is_ready(lora_dev)) {
 8002162:	b1e8      	cbz	r0, 80021a0 <common_task+0x88>
	const struct lora_driver_api *api =
 8002164:	4899      	ldr	r0, [pc, #612]	; (80023cc <common_task+0x2b4>)
 8002166:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	a905      	add	r1, sp, #20
 800216c:	4798      	blx	r3
        LOG_DBG("Device not ready: %s", lora_dev->name);
        k_sleep(K_FOREVER);
    }

    ret = lora_config(lora_dev, &lora_cfg);
 800216e:	900b      	str	r0, [sp, #44]	; 0x2c
    if (ret < 0) {
 8002170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002172:	2b00      	cmp	r3, #0
 8002174:	db28      	blt.n	80021c8 <common_task+0xb0>
    * */

    /**
     * UART initialization area begin
     * */
    k_work_init(&work_uart_data_proc, work_uart_data_proc_handler);
 8002176:	4996      	ldr	r1, [pc, #600]	; (80023d0 <common_task+0x2b8>)
 8002178:	4896      	ldr	r0, [pc, #600]	; (80023d4 <common_task+0x2bc>)
 800217a:	f00e fa74 	bl	8010666 <k_work_init>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 800217e:	4896      	ldr	r0, [pc, #600]	; (80023d8 <common_task+0x2c0>)
 8002180:	f008 fe82 	bl	800ae88 <z_impl_device_get_binding>
 8002184:	4604      	mov	r4, r0
 8002186:	f00e f940 	bl	801040a <z_device_is_ready>

    /* Init UART*/
    uart_dev = device_get_binding(CURRENT_UART_DEVICE);
    if (!device_is_ready(uart_dev)) {
 800218a:	2800      	cmp	r0, #0
 800218c:	d031      	beq.n	80021f2 <common_task+0xda>
	const struct uart_driver_api *api =
 800218e:	68a3      	ldr	r3, [r4, #8]
	if (api->callback_set == NULL) {
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d050      	beq.n	8002238 <common_task+0x120>
	return api->callback_set(dev, callback, user_data);
 8002196:	2200      	movs	r2, #0
 8002198:	4990      	ldr	r1, [pc, #576]	; (80023dc <common_task+0x2c4>)
 800219a:	4620      	mov	r0, r4
 800219c:	4798      	blx	r3
 800219e:	e04b      	b.n	8002238 <common_task+0x120>
        LOG_DBG("Device not ready: %s", lora_dev->name);
 80021a0:	4b8a      	ldr	r3, [pc, #552]	; (80023cc <common_task+0x2b4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	9303      	str	r3, [sp, #12]
 80021a6:	4b8e      	ldr	r3, [pc, #568]	; (80023e0 <common_task+0x2c8>)
 80021a8:	9302      	str	r3, [sp, #8]
 80021aa:	4b8e      	ldr	r3, [pc, #568]	; (80023e4 <common_task+0x2cc>)
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	9000      	str	r0, [sp, #0]
 80021b0:	4603      	mov	r3, r0
 80021b2:	2204      	movs	r2, #4
 80021b4:	498c      	ldr	r1, [pc, #560]	; (80023e8 <common_task+0x2d0>)
 80021b6:	f00c fa2c 	bl	800e612 <z_log_msg2_runtime_create>
 80021ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021c2:	f009 ff0d 	bl	800bfe0 <z_impl_k_sleep>
 80021c6:	e7cd      	b.n	8002164 <common_task+0x4c>
        LOG_DBG("Device not configure: %s", lora_dev->name);
 80021c8:	4b80      	ldr	r3, [pc, #512]	; (80023cc <common_task+0x2b4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	9303      	str	r3, [sp, #12]
 80021ce:	4b84      	ldr	r3, [pc, #528]	; (80023e0 <common_task+0x2c8>)
 80021d0:	9302      	str	r3, [sp, #8]
 80021d2:	4b86      	ldr	r3, [pc, #536]	; (80023ec <common_task+0x2d4>)
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	2000      	movs	r0, #0
 80021d8:	9000      	str	r0, [sp, #0]
 80021da:	4603      	mov	r3, r0
 80021dc:	2204      	movs	r2, #4
 80021de:	4982      	ldr	r1, [pc, #520]	; (80023e8 <common_task+0x2d0>)
 80021e0:	f00c fa17 	bl	800e612 <z_log_msg2_runtime_create>
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021ec:	f009 fef8 	bl	800bfe0 <z_impl_k_sleep>
 80021f0:	e7c1      	b.n	8002176 <common_task+0x5e>
        LOG_DBG("Device not ready: %s", uart_dev->name);
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	9303      	str	r3, [sp, #12]
 80021f6:	4b7a      	ldr	r3, [pc, #488]	; (80023e0 <common_task+0x2c8>)
 80021f8:	9302      	str	r3, [sp, #8]
 80021fa:	4b7a      	ldr	r3, [pc, #488]	; (80023e4 <common_task+0x2cc>)
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	9000      	str	r0, [sp, #0]
 8002200:	4603      	mov	r3, r0
 8002202:	2204      	movs	r2, #4
 8002204:	4978      	ldr	r1, [pc, #480]	; (80023e8 <common_task+0x2d0>)
 8002206:	f00c fa04 	bl	800e612 <z_log_msg2_runtime_create>
 800220a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800220e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002212:	f009 fee5 	bl	800bfe0 <z_impl_k_sleep>
 8002216:	e7ba      	b.n	800218e <common_task+0x76>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8002218:	f3bf 8f5b 	dmb	ish
//    * Init IRQ end
//    * */


    while(1) {
        if (atomic_cas(&atomic_cur_state, STATE_RECV, STATE_IDLE)) {
 800221c:	d119      	bne.n	8002252 <common_task+0x13a>
	const struct uart_driver_api *api =
 800221e:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 8002220:	68dd      	ldr	r5, [r3, #12]
 8002222:	4613      	mov	r3, r2
 8002224:	2210      	movs	r2, #16
 8002226:	4972      	ldr	r1, [pc, #456]	; (80023f0 <common_task+0x2d8>)
 8002228:	4620      	mov	r0, r4
 800222a:	47a8      	blx	r5
	const struct lora_driver_api *api =
 800222c:	4867      	ldr	r0, [pc, #412]	; (80023cc <common_task+0x2b4>)
 800222e:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	4a70      	ldr	r2, [pc, #448]	; (80023f4 <common_task+0x2dc>)
 8002234:	4970      	ldr	r1, [pc, #448]	; (80023f8 <common_task+0x2e0>)
 8002236:	4798      	blx	r3
 8002238:	4b70      	ldr	r3, [pc, #448]	; (80023fc <common_task+0x2e4>)
 800223a:	2200      	movs	r2, #0
 800223c:	f3bf 8f5b 	dmb	ish
 8002240:	e853 1f00 	ldrex	r1, [r3]
 8002244:	2903      	cmp	r1, #3
 8002246:	d1e7      	bne.n	8002218 <common_task+0x100>
 8002248:	e843 2000 	strex	r0, r2, [r3]
 800224c:	2800      	cmp	r0, #0
 800224e:	d0e3      	beq.n	8002218 <common_task+0x100>
 8002250:	e7f6      	b.n	8002240 <common_task+0x128>
 8002252:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <common_task+0x2e4>)
 8002254:	2200      	movs	r2, #0
 8002256:	f3bf 8f5b 	dmb	ish
 800225a:	e853 1f00 	ldrex	r1, [r3]
 800225e:	2904      	cmp	r1, #4
 8002260:	d103      	bne.n	800226a <common_task+0x152>
 8002262:	e843 2000 	strex	r0, r2, [r3]
 8002266:	2800      	cmp	r0, #0
 8002268:	d1f7      	bne.n	800225a <common_task+0x142>
 800226a:	f3bf 8f5b 	dmb	ish

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            lora_recv_async(lora_dev, lora_receive_cb, lora_rx_error_timeout_cb);

        } else if (atomic_cas(&atomic_cur_state, STATE_TRANSMIT, STATE_IDLE)) {
 800226e:	d11c      	bne.n	80022aa <common_task+0x192>

            lora_cfg.tx = true;
 8002270:	2301      	movs	r3, #1
 8002272:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	const struct lora_driver_api *api =
 8002276:	4d55      	ldr	r5, [pc, #340]	; (80023cc <common_task+0x2b4>)
 8002278:	68ae      	ldr	r6, [r5, #8]
	return api->config(dev, config);
 800227a:	6833      	ldr	r3, [r6, #0]
 800227c:	a905      	add	r1, sp, #20
 800227e:	4628      	mov	r0, r5
 8002280:	4798      	blx	r3
	return api->send(dev, data, data_len);
 8002282:	6873      	ldr	r3, [r6, #4]
 8002284:	2204      	movs	r2, #4
 8002286:	495e      	ldr	r1, [pc, #376]	; (8002400 <common_task+0x2e8>)
 8002288:	4628      	mov	r0, r5
 800228a:	4798      	blx	r3
 800228c:	4b5b      	ldr	r3, [pc, #364]	; (80023fc <common_task+0x2e4>)
 800228e:	2203      	movs	r2, #3
 8002290:	f3bf 8f5b 	dmb	ish
 8002294:	e853 1f00 	ldrex	r1, [r3]
 8002298:	2904      	cmp	r1, #4
 800229a:	d103      	bne.n	80022a4 <common_task+0x18c>
 800229c:	e843 2000 	strex	r0, r2, [r3]
 80022a0:	2800      	cmp	r0, #0
 80022a2:	d1f7      	bne.n	8002294 <common_task+0x17c>
 80022a4:	f3bf 8f5b 	dmb	ish
 80022a8:	e7c6      	b.n	8002238 <common_task+0x120>
 80022aa:	4b54      	ldr	r3, [pc, #336]	; (80023fc <common_task+0x2e4>)
 80022ac:	2202      	movs	r2, #2
 80022ae:	f3bf 8f5b 	dmb	ish
 80022b2:	e853 1f00 	ldrex	r1, [r3]
 80022b6:	2901      	cmp	r1, #1
 80022b8:	d103      	bne.n	80022c2 <common_task+0x1aa>
 80022ba:	e843 2000 	strex	r0, r2, [r3]
 80022be:	2800      	cmp	r0, #0
 80022c0:	d1f7      	bne.n	80022b2 <common_task+0x19a>
 80022c2:	f3bf 8f5b 	dmb	ish
            lora_config(lora_dev, &lora_cfg);
            lora_send(lora_dev, radio_buf_tx, RADIO_BUF_LEN);
            atomic_cas(&atomic_cur_state, STATE_TRANSMIT, STATE_RECV);

        } else if (atomic_cas(&atomic_cur_state, STATE_START_PER_MEAS, STATE_PER_MEAS_RUN)) {
 80022c6:	d129      	bne.n	800231c <common_task+0x204>

            memcpy(uart_buf_tx, "Wait while previous receive complete...\n",
 80022c8:	4e4e      	ldr	r6, [pc, #312]	; (8002404 <common_task+0x2ec>)
 80022ca:	4630      	mov	r0, r6
 80022cc:	f7fe fdc3 	bl	8000e56 <strlen>
 80022d0:	4602      	mov	r2, r0
 80022d2:	4d4d      	ldr	r5, [pc, #308]	; (8002408 <common_task+0x2f0>)
 80022d4:	2340      	movs	r3, #64	; 0x40
 80022d6:	4631      	mov	r1, r6
 80022d8:	4628      	mov	r0, r5
 80022da:	f00e fcf1 	bl	8010cc0 <__memcpy_chk>
                   strlen("Wait while previous receive complete...\n"));
            uart_tx(uart_dev, uart_buf_tx, strlen("Wait while previous receive complete...\n"), TIMEOUT);
 80022de:	4630      	mov	r0, r6
 80022e0:	f7fe fdb9 	bl	8000e56 <strlen>
 80022e4:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 80022e6:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 80022e8:	685e      	ldr	r6, [r3, #4]
 80022ea:	2300      	movs	r3, #0
 80022ec:	4629      	mov	r1, r5
 80022ee:	4620      	mov	r0, r4
 80022f0:	47b0      	blx	r6
            per_meas(lora_dev, &lora_cfg, uart_dev, uart_buf_tx);
 80022f2:	462b      	mov	r3, r5
 80022f4:	4622      	mov	r2, r4
 80022f6:	a905      	add	r1, sp, #20
 80022f8:	4834      	ldr	r0, [pc, #208]	; (80023cc <common_task+0x2b4>)
 80022fa:	f7ff fd31 	bl	8001d60 <per_meas>
 80022fe:	4b3f      	ldr	r3, [pc, #252]	; (80023fc <common_task+0x2e4>)
 8002300:	2200      	movs	r2, #0
 8002302:	f3bf 8f5b 	dmb	ish
 8002306:	e853 1f00 	ldrex	r1, [r3]
 800230a:	2902      	cmp	r1, #2
 800230c:	d103      	bne.n	8002316 <common_task+0x1fe>
 800230e:	e843 2000 	strex	r0, r2, [r3]
 8002312:	2800      	cmp	r0, #0
 8002314:	d1f7      	bne.n	8002306 <common_task+0x1ee>
 8002316:	f3bf 8f5b 	dmb	ish
 800231a:	e78d      	b.n	8002238 <common_task+0x120>
 800231c:	4b37      	ldr	r3, [pc, #220]	; (80023fc <common_task+0x2e4>)
 800231e:	2200      	movs	r2, #0
 8002320:	f3bf 8f5b 	dmb	ish
 8002324:	e853 1f00 	ldrex	r1, [r3]
 8002328:	2905      	cmp	r1, #5
 800232a:	d103      	bne.n	8002334 <common_task+0x21c>
 800232c:	e843 2000 	strex	r0, r2, [r3]
 8002330:	2800      	cmp	r0, #0
 8002332:	d1f7      	bne.n	8002324 <common_task+0x20c>
 8002334:	f3bf 8f5b 	dmb	ish
            /* Change currently state on STATE_IDLE if it still equals STATE_PER_MEAS_RUN
             * Else do nothing*/
            atomic_cas(&atomic_cur_state, STATE_PER_MEAS_RUN, STATE_IDLE);

        } else if (atomic_cas(&atomic_cur_state, STATE_GET_CFG, STATE_IDLE)) {
 8002338:	d10c      	bne.n	8002354 <common_task+0x23c>
	const struct uart_driver_api *api =
 800233a:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 800233c:	68dd      	ldr	r5, [r3, #12]
 800233e:	4613      	mov	r3, r2
 8002340:	2210      	movs	r2, #16
 8002342:	492b      	ldr	r1, [pc, #172]	; (80023f0 <common_task+0x2d8>)
 8002344:	4620      	mov	r0, r4
 8002346:	47a8      	blx	r5

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            print_modem_cfg(uart_dev, uart_buf_tx, &lora_cfg);
 8002348:	aa05      	add	r2, sp, #20
 800234a:	492f      	ldr	r1, [pc, #188]	; (8002408 <common_task+0x2f0>)
 800234c:	4620      	mov	r0, r4
 800234e:	f7ff fbc1 	bl	8001ad4 <print_modem_cfg>
 8002352:	e771      	b.n	8002238 <common_task+0x120>
 8002354:	4b29      	ldr	r3, [pc, #164]	; (80023fc <common_task+0x2e4>)
 8002356:	2200      	movs	r2, #0
 8002358:	f3bf 8f5b 	dmb	ish
 800235c:	e853 1f00 	ldrex	r1, [r3]
 8002360:	2907      	cmp	r1, #7
 8002362:	d103      	bne.n	800236c <common_task+0x254>
 8002364:	e843 2000 	strex	r0, r2, [r3]
 8002368:	2800      	cmp	r0, #0
 800236a:	d1f7      	bne.n	800235c <common_task+0x244>
 800236c:	f3bf 8f5b 	dmb	ish

        } else if (atomic_cas(&atomic_cur_state, STATE_INCR_FREQ, STATE_IDLE)) {
 8002370:	d14e      	bne.n	8002410 <common_task+0x2f8>
	const struct uart_driver_api *api =
 8002372:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 8002374:	68dd      	ldr	r5, [r3, #12]
 8002376:	4613      	mov	r3, r2
 8002378:	2210      	movs	r2, #16
 800237a:	491d      	ldr	r1, [pc, #116]	; (80023f0 <common_task+0x2d8>)
 800237c:	4620      	mov	r0, r4
 800237e:	47a8      	blx	r5

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            if (!incr_decr_modem_frequency(lora_dev, &lora_cfg, true)) {
 8002380:	2201      	movs	r2, #1
 8002382:	a905      	add	r1, sp, #20
 8002384:	4811      	ldr	r0, [pc, #68]	; (80023cc <common_task+0x2b4>)
 8002386:	f00c f933 	bl	800e5f0 <incr_decr_modem_frequency>
 800238a:	b928      	cbnz	r0, 8002398 <common_task+0x280>
                print_modem_cfg(uart_dev, uart_buf_tx, &lora_cfg);
 800238c:	aa05      	add	r2, sp, #20
 800238e:	491e      	ldr	r1, [pc, #120]	; (8002408 <common_task+0x2f0>)
 8002390:	4620      	mov	r0, r4
 8002392:	f7ff fb9f 	bl	8001ad4 <print_modem_cfg>
 8002396:	e74f      	b.n	8002238 <common_task+0x120>
            } else {
                memcpy(uart_buf_tx, "Failed to change frequency!!!\n",
 8002398:	4e1c      	ldr	r6, [pc, #112]	; (800240c <common_task+0x2f4>)
 800239a:	4630      	mov	r0, r6
 800239c:	f7fe fd5b 	bl	8000e56 <strlen>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4d19      	ldr	r5, [pc, #100]	; (8002408 <common_task+0x2f0>)
 80023a4:	2340      	movs	r3, #64	; 0x40
 80023a6:	4631      	mov	r1, r6
 80023a8:	4628      	mov	r0, r5
 80023aa:	f00e fc89 	bl	8010cc0 <__memcpy_chk>
                       strlen("Failed to change frequency!!!\n"));
                uart_tx(uart_dev, uart_buf_tx, strlen(uart_buf_tx), TIMEOUT);
 80023ae:	4628      	mov	r0, r5
 80023b0:	f7fe fd51 	bl	8000e56 <strlen>
 80023b4:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 80023b6:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 80023b8:	685e      	ldr	r6, [r3, #4]
 80023ba:	2300      	movs	r3, #0
 80023bc:	4629      	mov	r1, r5
 80023be:	4620      	mov	r0, r4
 80023c0:	47b0      	blx	r6
 80023c2:	e739      	b.n	8002238 <common_task+0x120>
 80023c4:	200002a8 	.word	0x200002a8
 80023c8:	200002ac 	.word	0x200002ac
 80023cc:	080116cc 	.word	0x080116cc
 80023d0:	08001ea5 	.word	0x08001ea5
 80023d4:	20000ddc 	.word	0x20000ddc
 80023d8:	08011df8 	.word	0x08011df8
 80023dc:	08001e65 	.word	0x08001e65
 80023e0:	08011e8c 	.word	0x08011e8c
 80023e4:	08011dbc 	.word	0x08011dbc
 80023e8:	080119c4 	.word	0x080119c4
 80023ec:	08011dd8 	.word	0x08011dd8
 80023f0:	20000d8c 	.word	0x20000d8c
 80023f4:	0800e5cf 	.word	0x0800e5cf
 80023f8:	08001a99 	.word	0x08001a99
 80023fc:	200002a0 	.word	0x200002a0
 8002400:	20000d88 	.word	0x20000d88
 8002404:	08011e00 	.word	0x08011e00
 8002408:	20000d9c 	.word	0x20000d9c
 800240c:	08011e2c 	.word	0x08011e2c
 8002410:	4b5b      	ldr	r3, [pc, #364]	; (8002580 <common_task+0x468>)
 8002412:	2200      	movs	r2, #0
 8002414:	f3bf 8f5b 	dmb	ish
 8002418:	e853 1f00 	ldrex	r1, [r3]
 800241c:	2908      	cmp	r1, #8
 800241e:	d103      	bne.n	8002428 <common_task+0x310>
 8002420:	e843 2000 	strex	r0, r2, [r3]
 8002424:	2800      	cmp	r0, #0
 8002426:	d1f7      	bne.n	8002418 <common_task+0x300>
 8002428:	f3bf 8f5b 	dmb	ish
            }

        } else if (atomic_cas(&atomic_cur_state, STATE_DECR_FREQ, STATE_IDLE)) {
 800242c:	d128      	bne.n	8002480 <common_task+0x368>
	const struct uart_driver_api *api =
 800242e:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 8002430:	68dd      	ldr	r5, [r3, #12]
 8002432:	4613      	mov	r3, r2
 8002434:	2210      	movs	r2, #16
 8002436:	4953      	ldr	r1, [pc, #332]	; (8002584 <common_task+0x46c>)
 8002438:	4620      	mov	r0, r4
 800243a:	47a8      	blx	r5

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            if (!incr_decr_modem_frequency(lora_dev, &lora_cfg, false)) {
 800243c:	2200      	movs	r2, #0
 800243e:	a905      	add	r1, sp, #20
 8002440:	4851      	ldr	r0, [pc, #324]	; (8002588 <common_task+0x470>)
 8002442:	f00c f8d5 	bl	800e5f0 <incr_decr_modem_frequency>
 8002446:	b928      	cbnz	r0, 8002454 <common_task+0x33c>
                print_modem_cfg(uart_dev, uart_buf_tx, &lora_cfg);
 8002448:	aa05      	add	r2, sp, #20
 800244a:	4950      	ldr	r1, [pc, #320]	; (800258c <common_task+0x474>)
 800244c:	4620      	mov	r0, r4
 800244e:	f7ff fb41 	bl	8001ad4 <print_modem_cfg>
 8002452:	e6f1      	b.n	8002238 <common_task+0x120>
            } else {
                memcpy(uart_buf_tx, "Failed to change frequency!!!\n",
 8002454:	4e4e      	ldr	r6, [pc, #312]	; (8002590 <common_task+0x478>)
 8002456:	4630      	mov	r0, r6
 8002458:	f7fe fcfd 	bl	8000e56 <strlen>
 800245c:	4602      	mov	r2, r0
 800245e:	4d4b      	ldr	r5, [pc, #300]	; (800258c <common_task+0x474>)
 8002460:	2340      	movs	r3, #64	; 0x40
 8002462:	4631      	mov	r1, r6
 8002464:	4628      	mov	r0, r5
 8002466:	f00e fc2b 	bl	8010cc0 <__memcpy_chk>
                       strlen("Failed to change frequency!!!\n"));
                uart_tx(uart_dev, uart_buf_tx, strlen(uart_buf_tx), TIMEOUT);
 800246a:	4628      	mov	r0, r5
 800246c:	f7fe fcf3 	bl	8000e56 <strlen>
 8002470:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8002472:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8002474:	685e      	ldr	r6, [r3, #4]
 8002476:	2300      	movs	r3, #0
 8002478:	4629      	mov	r1, r5
 800247a:	4620      	mov	r0, r4
 800247c:	47b0      	blx	r6
 800247e:	e6db      	b.n	8002238 <common_task+0x120>
 8002480:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <common_task+0x468>)
 8002482:	2200      	movs	r2, #0
 8002484:	f3bf 8f5b 	dmb	ish
 8002488:	e853 1f00 	ldrex	r1, [r3]
 800248c:	2906      	cmp	r1, #6
 800248e:	d103      	bne.n	8002498 <common_task+0x380>
 8002490:	e843 2000 	strex	r0, r2, [r3]
 8002494:	2800      	cmp	r0, #0
 8002496:	d1f7      	bne.n	8002488 <common_task+0x370>
 8002498:	f3bf 8f5b 	dmb	ish
            }

        } else if (atomic_cas(&atomic_cur_state, STATE_SET_FREQ, STATE_IDLE)) {
 800249c:	d12d      	bne.n	80024fa <common_task+0x3e2>
	const struct uart_driver_api *api =
 800249e:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 80024a0:	68dd      	ldr	r5, [r3, #12]
 80024a2:	4613      	mov	r3, r2
 80024a4:	2210      	movs	r2, #16
 80024a6:	4937      	ldr	r1, [pc, #220]	; (8002584 <common_task+0x46c>)
 80024a8:	4620      	mov	r0, r4
 80024aa:	47a8      	blx	r5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80024ac:	f3bf 8f5b 	dmb	ish
 80024b0:	4b38      	ldr	r3, [pc, #224]	; (8002594 <common_task+0x47c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	f3bf 8f5b 	dmb	ish

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            if (change_modem_frequency(lora_dev, &lora_cfg, atomic_get(&atomic_freq))) {
 80024b8:	a905      	add	r1, sp, #20
 80024ba:	4833      	ldr	r0, [pc, #204]	; (8002588 <common_task+0x470>)
 80024bc:	f00c f88e 	bl	800e5dc <change_modem_frequency>
 80024c0:	b128      	cbz	r0, 80024ce <common_task+0x3b6>
                print_modem_cfg(uart_dev, uart_buf_tx, &lora_cfg);
 80024c2:	aa05      	add	r2, sp, #20
 80024c4:	4931      	ldr	r1, [pc, #196]	; (800258c <common_task+0x474>)
 80024c6:	4620      	mov	r0, r4
 80024c8:	f7ff fb04 	bl	8001ad4 <print_modem_cfg>
 80024cc:	e6b4      	b.n	8002238 <common_task+0x120>
            } else {
                memcpy(uart_buf_tx, "Failed to change frequency!!!\n",
 80024ce:	4e30      	ldr	r6, [pc, #192]	; (8002590 <common_task+0x478>)
 80024d0:	4630      	mov	r0, r6
 80024d2:	f7fe fcc0 	bl	8000e56 <strlen>
 80024d6:	4602      	mov	r2, r0
 80024d8:	4d2c      	ldr	r5, [pc, #176]	; (800258c <common_task+0x474>)
 80024da:	2340      	movs	r3, #64	; 0x40
 80024dc:	4631      	mov	r1, r6
 80024de:	4628      	mov	r0, r5
 80024e0:	f00e fbee 	bl	8010cc0 <__memcpy_chk>
                       strlen("Failed to change frequency!!!\n"));
                uart_tx(uart_dev, uart_buf_tx, strlen(uart_buf_tx), TIMEOUT);
 80024e4:	4628      	mov	r0, r5
 80024e6:	f7fe fcb6 	bl	8000e56 <strlen>
 80024ea:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 80024ec:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 80024ee:	685e      	ldr	r6, [r3, #4]
 80024f0:	2300      	movs	r3, #0
 80024f2:	4629      	mov	r1, r5
 80024f4:	4620      	mov	r0, r4
 80024f6:	47b0      	blx	r6
 80024f8:	e69e      	b.n	8002238 <common_task+0x120>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80024fa:	4b21      	ldr	r3, [pc, #132]	; (8002580 <common_task+0x468>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	f3bf 8f5b 	dmb	ish
 8002502:	e853 1f00 	ldrex	r1, [r3]
 8002506:	2909      	cmp	r1, #9
 8002508:	d103      	bne.n	8002512 <common_task+0x3fa>
 800250a:	e843 2000 	strex	r0, r2, [r3]
 800250e:	2800      	cmp	r0, #0
 8002510:	d1f7      	bne.n	8002502 <common_task+0x3ea>
 8002512:	f3bf 8f5b 	dmb	ish
            }

        } else if (atomic_cas(&atomic_cur_state, STATE_SET_SF, STATE_IDLE)) {
 8002516:	d12e      	bne.n	8002576 <common_task+0x45e>
	const struct uart_driver_api *api =
 8002518:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 800251a:	68dd      	ldr	r5, [r3, #12]
 800251c:	4613      	mov	r3, r2
 800251e:	2210      	movs	r2, #16
 8002520:	4918      	ldr	r1, [pc, #96]	; (8002584 <common_task+0x46c>)
 8002522:	4620      	mov	r0, r4
 8002524:	47a8      	blx	r5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8002526:	f3bf 8f5b 	dmb	ish
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <common_task+0x480>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f3bf 8f5b 	dmb	ish

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            if (change_modem_datarate(lora_dev, &lora_cfg, atomic_get(&atomic_sf))) {
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	a905      	add	r1, sp, #20
 8002536:	4814      	ldr	r0, [pc, #80]	; (8002588 <common_task+0x470>)
 8002538:	f00c f84a 	bl	800e5d0 <change_modem_datarate>
 800253c:	b128      	cbz	r0, 800254a <common_task+0x432>
                print_modem_cfg(uart_dev, uart_buf_tx, &lora_cfg);
 800253e:	aa05      	add	r2, sp, #20
 8002540:	4912      	ldr	r1, [pc, #72]	; (800258c <common_task+0x474>)
 8002542:	4620      	mov	r0, r4
 8002544:	f7ff fac6 	bl	8001ad4 <print_modem_cfg>
 8002548:	e676      	b.n	8002238 <common_task+0x120>
            } else {
                memcpy(uart_buf_tx, "Failed to change SF value!!!\n",
 800254a:	4e14      	ldr	r6, [pc, #80]	; (800259c <common_task+0x484>)
 800254c:	4630      	mov	r0, r6
 800254e:	f7fe fc82 	bl	8000e56 <strlen>
 8002552:	4602      	mov	r2, r0
 8002554:	4d0d      	ldr	r5, [pc, #52]	; (800258c <common_task+0x474>)
 8002556:	2340      	movs	r3, #64	; 0x40
 8002558:	4631      	mov	r1, r6
 800255a:	4628      	mov	r0, r5
 800255c:	f00e fbb0 	bl	8010cc0 <__memcpy_chk>
                       strlen("Failed to change SF value!!!\n"));
                uart_tx(uart_dev, uart_buf_tx, strlen(uart_buf_tx), TIMEOUT);
 8002560:	4628      	mov	r0, r5
 8002562:	f7fe fc78 	bl	8000e56 <strlen>
 8002566:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8002568:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 800256a:	685e      	ldr	r6, [r3, #4]
 800256c:	2300      	movs	r3, #0
 800256e:	4629      	mov	r1, r5
 8002570:	4620      	mov	r0, r4
 8002572:	47b0      	blx	r6
 8002574:	e660      	b.n	8002238 <common_task+0x120>
 8002576:	2064      	movs	r0, #100	; 0x64
 8002578:	2100      	movs	r1, #0
 800257a:	f009 fd31 	bl	800bfe0 <z_impl_k_sleep>
 800257e:	e65b      	b.n	8002238 <common_task+0x120>
 8002580:	200002a0 	.word	0x200002a0
 8002584:	20000d8c 	.word	0x20000d8c
 8002588:	080116cc 	.word	0x080116cc
 800258c:	20000d9c 	.word	0x20000d9c
 8002590:	08011e2c 	.word	0x08011e2c
 8002594:	200002a8 	.word	0x200002a8
 8002598:	200002ac 	.word	0x200002ac
 800259c:	08011e4c 	.word	0x08011e4c

080025a0 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 80025a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a4:	b089      	sub	sp, #36	; 0x24
 80025a6:	9202      	str	r2, [sp, #8]
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 80025a8:	f010 0a03 	ands.w	sl, r0, #3
 80025ac:	f040 8215 	bne.w	80029da <cbvprintf_package+0x43a>
 80025b0:	4607      	mov	r7, r0
 80025b2:	468b      	mov	fp, r1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
 80025b4:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 80025b6:	b1e0      	cbz	r0, 80025f2 <cbvprintf_package+0x52>

	/*
	 * Otherwise we must ensure we can store at least
	 * thepointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 80025b8:	b127      	cbz	r7, 80025c4 <cbvprintf_package+0x24>
 80025ba:	1be2      	subs	r2, r4, r7
 80025bc:	3204      	adds	r2, #4
 80025be:	455a      	cmp	r2, fp
 80025c0:	f200 820e 	bhi.w	80029e0 <cbvprintf_package+0x440>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
 80025c4:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 80025c6:	f8cd a000 	str.w	sl, [sp]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 80025ca:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 80025ce:	f8cd a004 	str.w	sl, [sp, #4]
	bool parsing = false;
 80025d2:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
 80025d4:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
 80025d8:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
 80025da:	b107      	cbz	r7, 80025de <cbvprintf_package+0x3e>
				*(const char **)buf = s;
 80025dc:	6023      	str	r3, [r4, #0]
	return ((addr >= (const char *)RO_START) &&
 80025de:	4ac6      	ldr	r2, [pc, #792]	; (80028f8 <cbvprintf_package+0x358>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	f0c0 815a 	bcc.w	800289a <cbvprintf_package+0x2fa>
 80025e6:	4ac5      	ldr	r2, [pc, #788]	; (80028fc <cbvprintf_package+0x35c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	f0c0 817f 	bcc.w	80028ec <cbvprintf_package+0x34c>
 80025ee:	2200      	movs	r2, #0
 80025f0:	e154      	b.n	800289c <cbvprintf_package+0x2fc>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 80025f2:	f001 0b07 	and.w	fp, r1, #7
 80025f6:	445c      	add	r4, fp
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 80025f8:	f1cb 0b08 	rsb	fp, fp, #8
 80025fc:	e7dc      	b.n	80025b8 <cbvprintf_package+0x18>
			if (*fmt == '%') {
 80025fe:	2b25      	cmp	r3, #37	; 0x25
 8002600:	d105      	bne.n	800260e <cbvprintf_package+0x6e>
				parsing = true;
 8002602:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
 8002604:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
 8002608:	46c1      	mov	r9, r8
			continue;
 800260a:	e000      	b.n	800260e <cbvprintf_package+0x6e>
		switch (*fmt) {
 800260c:	2600      	movs	r6, #0
 800260e:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
 8002610:	f105 0c01 	add.w	ip, r5, #1
 8002614:	786b      	ldrb	r3, [r5, #1]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8184 	beq.w	8002924 <cbvprintf_package+0x384>
		if (!parsing) {
 800261c:	2e00      	cmp	r6, #0
 800261e:	d0ee      	beq.n	80025fe <cbvprintf_package+0x5e>
		switch (*fmt) {
 8002620:	f1a3 0120 	sub.w	r1, r3, #32
 8002624:	295a      	cmp	r1, #90	; 0x5a
 8002626:	d8f1      	bhi.n	800260c <cbvprintf_package+0x6c>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <cbvprintf_package+0x90>)
 800262a:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800262e:	bf00      	nop
 8002630:	0800260f 	.word	0x0800260f
 8002634:	0800260d 	.word	0x0800260d
 8002638:	0800260d 	.word	0x0800260d
 800263c:	0800260f 	.word	0x0800260f
 8002640:	0800260d 	.word	0x0800260d
 8002644:	0800260d 	.word	0x0800260d
 8002648:	0800260d 	.word	0x0800260d
 800264c:	0800260d 	.word	0x0800260d
 8002650:	0800260d 	.word	0x0800260d
 8002654:	0800260d 	.word	0x0800260d
 8002658:	080027bd 	.word	0x080027bd
 800265c:	0800260f 	.word	0x0800260f
 8002660:	0800260d 	.word	0x0800260d
 8002664:	0800260f 	.word	0x0800260f
 8002668:	0800260f 	.word	0x0800260f
 800266c:	0800260d 	.word	0x0800260d
 8002670:	0800260f 	.word	0x0800260f
 8002674:	0800260f 	.word	0x0800260f
 8002678:	0800260f 	.word	0x0800260f
 800267c:	0800260f 	.word	0x0800260f
 8002680:	0800260f 	.word	0x0800260f
 8002684:	0800260f 	.word	0x0800260f
 8002688:	0800260f 	.word	0x0800260f
 800268c:	0800260f 	.word	0x0800260f
 8002690:	0800260f 	.word	0x0800260f
 8002694:	0800260f 	.word	0x0800260f
 8002698:	0800260d 	.word	0x0800260d
 800269c:	0800260d 	.word	0x0800260d
 80026a0:	0800260d 	.word	0x0800260d
 80026a4:	0800260d 	.word	0x0800260d
 80026a8:	0800260d 	.word	0x0800260d
 80026ac:	0800260d 	.word	0x0800260d
 80026b0:	0800260d 	.word	0x0800260d
 80026b4:	08002825 	.word	0x08002825
 80026b8:	0800260d 	.word	0x0800260d
 80026bc:	0800260d 	.word	0x0800260d
 80026c0:	0800260d 	.word	0x0800260d
 80026c4:	08002825 	.word	0x08002825
 80026c8:	08002825 	.word	0x08002825
 80026cc:	08002825 	.word	0x08002825
 80026d0:	0800260d 	.word	0x0800260d
 80026d4:	0800260d 	.word	0x0800260d
 80026d8:	0800260d 	.word	0x0800260d
 80026dc:	0800260d 	.word	0x0800260d
 80026e0:	0800260f 	.word	0x0800260f
 80026e4:	0800260d 	.word	0x0800260d
 80026e8:	0800260d 	.word	0x0800260d
 80026ec:	0800260d 	.word	0x0800260d
 80026f0:	0800260d 	.word	0x0800260d
 80026f4:	0800260d 	.word	0x0800260d
 80026f8:	0800260d 	.word	0x0800260d
 80026fc:	0800260d 	.word	0x0800260d
 8002700:	0800260d 	.word	0x0800260d
 8002704:	0800260d 	.word	0x0800260d
 8002708:	0800260d 	.word	0x0800260d
 800270c:	0800260d 	.word	0x0800260d
 8002710:	080027b5 	.word	0x080027b5
 8002714:	0800260d 	.word	0x0800260d
 8002718:	0800260d 	.word	0x0800260d
 800271c:	0800260d 	.word	0x0800260d
 8002720:	0800260d 	.word	0x0800260d
 8002724:	0800260d 	.word	0x0800260d
 8002728:	0800260d 	.word	0x0800260d
 800272c:	0800260d 	.word	0x0800260d
 8002730:	0800260d 	.word	0x0800260d
 8002734:	08002825 	.word	0x08002825
 8002738:	0800260d 	.word	0x0800260d
 800273c:	080027b5 	.word	0x080027b5
 8002740:	080027b5 	.word	0x080027b5
 8002744:	08002825 	.word	0x08002825
 8002748:	08002825 	.word	0x08002825
 800274c:	08002825 	.word	0x08002825
 8002750:	0800260f 	.word	0x0800260f
 8002754:	080027b5 	.word	0x080027b5
 8002758:	0800279d 	.word	0x0800279d
 800275c:	0800260d 	.word	0x0800260d
 8002760:	0800260f 	.word	0x0800260f
 8002764:	0800260d 	.word	0x0800260d
 8002768:	08002885 	.word	0x08002885
 800276c:	080027b5 	.word	0x080027b5
 8002770:	08002885 	.word	0x08002885
 8002774:	0800260d 	.word	0x0800260d
 8002778:	0800260d 	.word	0x0800260d
 800277c:	08002885 	.word	0x08002885
 8002780:	080027ad 	.word	0x080027ad
 8002784:	080027b5 	.word	0x080027b5
 8002788:	0800260d 	.word	0x0800260d
 800278c:	0800260d 	.word	0x0800260d
 8002790:	080027b5 	.word	0x080027b5
 8002794:	0800260d 	.word	0x0800260d
 8002798:	080027a5 	.word	0x080027a5
			align = VA_STACK_ALIGN(intmax_t);
 800279c:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
 80027a0:	46c1      	mov	r9, r8
			continue;
 80027a2:	e734      	b.n	800260e <cbvprintf_package+0x6e>
			align = VA_STACK_ALIGN(size_t);
 80027a4:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
 80027a8:	46c1      	mov	r9, r8
			continue;
 80027aa:	e730      	b.n	800260e <cbvprintf_package+0x6e>
			align = VA_STACK_ALIGN(ptrdiff_t);
 80027ac:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
 80027b0:	46c1      	mov	r9, r8
			continue;
 80027b2:	e72c      	b.n	800260e <cbvprintf_package+0x6e>
			if (fmt[-1] == 'l') {
 80027b4:	782a      	ldrb	r2, [r5, #0]
 80027b6:	2a6c      	cmp	r2, #108	; 0x6c
 80027b8:	d026      	beq.n	8002808 <cbvprintf_package+0x268>
			parsing = false;
 80027ba:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
 80027bc:	eb04 0208 	add.w	r2, r4, r8
 80027c0:	3a01      	subs	r2, #1
 80027c2:	f1c8 0100 	rsb	r1, r8, #0
 80027c6:	400a      	ands	r2, r1
 80027c8:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 80027ca:	b127      	cbz	r7, 80027d6 <cbvprintf_package+0x236>
 80027cc:	1bd1      	subs	r1, r2, r7
 80027ce:	4449      	add	r1, r9
 80027d0:	458b      	cmp	fp, r1
 80027d2:	f0c0 8108 	bcc.w	80029e6 <cbvprintf_package+0x446>
		if (*fmt == 's') {
 80027d6:	2b73      	cmp	r3, #115	; 0x73
 80027d8:	d059      	beq.n	800288e <cbvprintf_package+0x2ee>
				}

				s_idx++;
			}
			buf += sizeof(char *);
		} else if (size == sizeof(int)) {
 80027da:	f1b9 0f04 	cmp.w	r9, #4
 80027de:	f000 8099 	beq.w	8002914 <cbvprintf_package+0x374>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
 80027e2:	f1b9 0f08 	cmp.w	r9, #8
 80027e6:	f040 8107 	bne.w	80029f8 <cbvprintf_package+0x458>
			long long v = va_arg(ap, long long);
 80027ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80027ec:	3307      	adds	r3, #7
 80027ee:	f023 0307 	bic.w	r3, r3, #7
 80027f2:	f103 0108 	add.w	r1, r3, #8
 80027f6:	9112      	str	r1, [sp, #72]	; 0x48
 80027f8:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
 80027fc:	b10f      	cbz	r7, 8002802 <cbvprintf_package+0x262>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
 80027fe:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
 8002802:	f102 0408 	add.w	r4, r2, #8
 8002806:	e702      	b.n	800260e <cbvprintf_package+0x6e>
				if (fmt[-2] == 'l') {
 8002808:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 800280c:	2a6c      	cmp	r2, #108	; 0x6c
 800280e:	d004      	beq.n	800281a <cbvprintf_package+0x27a>
			parsing = false;
 8002810:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
 8002812:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
 8002816:	46c1      	mov	r9, r8
 8002818:	e7d0      	b.n	80027bc <cbvprintf_package+0x21c>
			parsing = false;
 800281a:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
 800281c:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
 8002820:	46c1      	mov	r9, r8
 8002822:	e7cb      	b.n	80027bc <cbvprintf_package+0x21c>
			if (fmt[-1] == 'L') {
 8002824:	782b      	ldrb	r3, [r5, #0]
 8002826:	2b4c      	cmp	r3, #76	; 0x4c
 8002828:	d01c      	beq.n	8002864 <cbvprintf_package+0x2c4>
				v.d = va_arg(ap, double);
 800282a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800282c:	3307      	adds	r3, #7
 800282e:	f023 0307 	bic.w	r3, r3, #7
 8002832:	f103 0208 	add.w	r2, r3, #8
 8002836:	9212      	str	r2, [sp, #72]	; 0x48
 8002838:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
 800283c:	1de2      	adds	r2, r4, #7
 800283e:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
 8002842:	b147      	cbz	r7, 8002856 <cbvprintf_package+0x2b6>
				if (BUF_OFFSET + size > len) {
 8002844:	1bd3      	subs	r3, r2, r7
 8002846:	3308      	adds	r3, #8
 8002848:	455b      	cmp	r3, fp
 800284a:	d815      	bhi.n	8002878 <cbvprintf_package+0x2d8>
				} else if (fmt[-1] == 'L') {
 800284c:	782b      	ldrb	r3, [r5, #0]
 800284e:	2b4c      	cmp	r3, #76	; 0x4c
 8002850:	d015      	beq.n	800287e <cbvprintf_package+0x2de>
					*(double *)buf = v.d;
 8002852:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
 8002856:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
 800285a:	2600      	movs	r6, #0
			continue;
 800285c:	f04f 0808 	mov.w	r8, #8
 8002860:	46c1      	mov	r9, r8
 8002862:	e6d4      	b.n	800260e <cbvprintf_package+0x6e>
				v.ld = va_arg(ap, long double);
 8002864:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002866:	3307      	adds	r3, #7
 8002868:	f023 0307 	bic.w	r3, r3, #7
 800286c:	f103 0208 	add.w	r2, r3, #8
 8002870:	9212      	str	r2, [sp, #72]	; 0x48
 8002872:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
 8002876:	e7e1      	b.n	800283c <cbvprintf_package+0x29c>
					return -ENOSPC;
 8002878:	f06f 001b 	mvn.w	r0, #27
 800287c:	e0aa      	b.n	80029d4 <cbvprintf_package+0x434>
					*(long double *)buf = v.ld;
 800287e:	e9c2 0100 	strd	r0, r1, [r2]
 8002882:	e7e8      	b.n	8002856 <cbvprintf_package+0x2b6>
			parsing = false;
 8002884:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
 8002886:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
 800288a:	46c1      	mov	r9, r8
 800288c:	e796      	b.n	80027bc <cbvprintf_package+0x21c>
			s = va_arg(ap, char *);
 800288e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002890:	1d1a      	adds	r2, r3, #4
 8002892:	9212      	str	r2, [sp, #72]	; 0x48
 8002894:	681b      	ldr	r3, [r3, #0]
	while (*++fmt != '\0') {
 8002896:	4665      	mov	r5, ip
 8002898:	e69f      	b.n	80025da <cbvprintf_package+0x3a>
	return ((addr >= (const char *)RO_START) &&
 800289a:	2200      	movs	r2, #0
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
 800289c:	9902      	ldr	r1, [sp, #8]
 800289e:	f001 0101 	and.w	r1, r1, #1
			if (is_ro && !do_all) {
 80028a2:	4610      	mov	r0, r2
 80028a4:	b102      	cbz	r2, 80028a8 <cbvprintf_package+0x308>
 80028a6:	b1f9      	cbz	r1, 80028e8 <cbvprintf_package+0x348>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 80028a8:	eba4 0c07 	sub.w	ip, r4, r7
 80028ac:	ea4f 029c 	mov.w	r2, ip, lsr #2
				if (do_all && s_ptr_idx > STR_POS_MASK) {
 80028b0:	b119      	cbz	r1, 80028ba <cbvprintf_package+0x31a>
 80028b2:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80028b6:	f080 8099 	bcs.w	80029ec <cbvprintf_package+0x44c>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 80028ba:	9901      	ldr	r1, [sp, #4]
 80028bc:	290f      	cmp	r1, #15
 80028be:	f200 8098 	bhi.w	80029f2 <cbvprintf_package+0x452>
				if (buf0 != NULL) {
 80028c2:	b1ef      	cbz	r7, 8002900 <cbvprintf_package+0x360>
					str_ptr_pos[s_idx] = s_ptr_idx;
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	ab08      	add	r3, sp, #32
 80028c8:	440b      	add	r3, r1
 80028ca:	f803 2c10 	strb.w	r2, [r3, #-16]
					if (is_ro) {
 80028ce:	b178      	cbz	r0, 80028f0 <cbvprintf_package+0x350>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 80028d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028d4:	ab08      	add	r3, sp, #32
 80028d6:	440b      	add	r3, r1
 80028d8:	f803 2c10 	strb.w	r2, [r3, #-16]
						s_ro_cnt++;
 80028dc:	9b00      	ldr	r3, [sp, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	9300      	str	r3, [sp, #0]
				s_idx++;
 80028e2:	9b01      	ldr	r3, [sp, #4]
 80028e4:	3301      	adds	r3, #1
 80028e6:	9301      	str	r3, [sp, #4]
			buf += sizeof(char *);
 80028e8:	3404      	adds	r4, #4
 80028ea:	e691      	b.n	8002610 <cbvprintf_package+0x70>
	return ((addr >= (const char *)RO_START) &&
 80028ec:	2201      	movs	r2, #1
 80028ee:	e7d5      	b.n	800289c <cbvprintf_package+0x2fc>
						s_rw_cnt++;
 80028f0:	9b03      	ldr	r3, [sp, #12]
 80028f2:	3301      	adds	r3, #1
 80028f4:	9303      	str	r3, [sp, #12]
 80028f6:	e7f4      	b.n	80028e2 <cbvprintf_package+0x342>
 80028f8:	080114e4 	.word	0x080114e4
 80028fc:	08013764 	.word	0x08013764
				} else if (is_ro) {
 8002900:	b110      	cbz	r0, 8002908 <cbvprintf_package+0x368>
					len += 1;
 8002902:	f10b 0b01 	add.w	fp, fp, #1
 8002906:	e7ec      	b.n	80028e2 <cbvprintf_package+0x342>
					len += strlen(s) + 1 + 1;
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe faa4 	bl	8000e56 <strlen>
 800290e:	1c83      	adds	r3, r0, #2
 8002910:	449b      	add	fp, r3
 8002912:	e7e6      	b.n	80028e2 <cbvprintf_package+0x342>
			int v = va_arg(ap, int);
 8002914:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002916:	1d19      	adds	r1, r3, #4
 8002918:	9112      	str	r1, [sp, #72]	; 0x48
 800291a:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
 800291c:	b107      	cbz	r7, 8002920 <cbvprintf_package+0x380>
				*(int *)buf = v;
 800291e:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
 8002920:	1d14      	adds	r4, r2, #4
 8002922:	e674      	b.n	800260e <cbvprintf_package+0x6e>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
 8002924:	1be3      	subs	r3, r4, r7
 8002926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292a:	d268      	bcs.n	80029fe <cbvprintf_package+0x45e>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
 800292c:	b15f      	cbz	r7, 8002946 <cbvprintf_package+0x3a6>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
 800292e:	2200      	movs	r2, #0
 8002930:	603a      	str	r2, [r7, #0]

	/* Record end of argument list and number of appended strings. */
	buf0[0] = BUF_OFFSET / sizeof(int);
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	703b      	strb	r3, [r7, #0]
	buf0[1] = s_rw_cnt;
 8002936:	9b03      	ldr	r3, [sp, #12]
 8002938:	707b      	strb	r3, [r7, #1]
	buf0[2] = s_ro_cnt;
 800293a:	9b00      	ldr	r3, [sp, #0]
 800293c:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
 800293e:	b9d3      	cbnz	r3, 8002976 <cbvprintf_package+0x3d6>
 8002940:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002944:	e039      	b.n	80029ba <cbvprintf_package+0x41a>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 8002946:	445b      	add	r3, fp
 8002948:	f1a3 0008 	sub.w	r0, r3, #8
 800294c:	e042      	b.n	80029d4 <cbvprintf_package+0x434>
		for (i = 0; i < s_idx; i++) {
 800294e:	3301      	adds	r3, #1
 8002950:	4298      	cmp	r0, r3
 8002952:	d913      	bls.n	800297c <cbvprintf_package+0x3dc>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 8002954:	aa08      	add	r2, sp, #32
 8002956:	441a      	add	r2, r3
 8002958:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 800295c:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
 8002960:	2a00      	cmp	r2, #0
 8002962:	daf4      	bge.n	800294e <cbvprintf_package+0x3ae>
				continue;
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 8002964:	f001 017f 	and.w	r1, r1, #127	; 0x7f

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
 8002968:	1be2      	subs	r2, r4, r7
 800296a:	3201      	adds	r2, #1
 800296c:	4593      	cmp	fp, r2
 800296e:	d349      	bcc.n	8002a04 <cbvprintf_package+0x464>
				return -ENOSPC;
			}
			/* store the pointer position prefix */
			*buf++ = pos;
 8002970:	f804 1b01 	strb.w	r1, [r4], #1
 8002974:	e7eb      	b.n	800294e <cbvprintf_package+0x3ae>
		for (i = 0; i < s_idx; i++) {
 8002976:	4653      	mov	r3, sl
 8002978:	9801      	ldr	r0, [sp, #4]
 800297a:	e7e9      	b.n	8002950 <cbvprintf_package+0x3b0>
 800297c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002980:	e01b      	b.n	80029ba <cbvprintf_package+0x41a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		/* retrieve the string pointer */
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 8002982:	ab08      	add	r3, sp, #32
 8002984:	4453      	add	r3, sl
 8002986:	f813 6c10 	ldrb.w	r6, [r3, #-16]
 800298a:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
		/* clear the in-buffer pointer (less entropy if compressed) */
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 800298e:	2300      	movs	r3, #0
 8002990:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
		/* find the string length including terminating '\0' */
		size = strlen(s) + 1;
 8002994:	4640      	mov	r0, r8
 8002996:	f7fe fa5e 	bl	8000e56 <strlen>
 800299a:	1c45      	adds	r5, r0, #1
		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
 800299c:	1be3      	subs	r3, r4, r7
 800299e:	442b      	add	r3, r5
 80029a0:	3301      	adds	r3, #1
 80029a2:	459b      	cmp	fp, r3
 80029a4:	d331      	bcc.n	8002a0a <cbvprintf_package+0x46a>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
 80029a6:	f804 6b01 	strb.w	r6, [r4], #1
 80029aa:	462a      	mov	r2, r5
 80029ac:	4641      	mov	r1, r8
 80029ae:	4620      	mov	r0, r4
 80029b0:	f00e f978 	bl	8010ca4 <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
 80029b4:	442c      	add	r4, r5
	for (i = 0; i < s_idx; i++) {
 80029b6:	f10a 0a01 	add.w	sl, sl, #1
 80029ba:	45d1      	cmp	r9, sl
 80029bc:	d909      	bls.n	80029d2 <cbvprintf_package+0x432>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 80029be:	9b00      	ldr	r3, [sp, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0de      	beq.n	8002982 <cbvprintf_package+0x3e2>
 80029c4:	ab08      	add	r3, sp, #32
 80029c6:	4453      	add	r3, sl
 80029c8:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	dad8      	bge.n	8002982 <cbvprintf_package+0x3e2>
 80029d0:	e7f1      	b.n	80029b6 <cbvprintf_package+0x416>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
 80029d2:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 80029d4:	b009      	add	sp, #36	; 0x24
 80029d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
 80029da:	f06f 000d 	mvn.w	r0, #13
 80029de:	e7f9      	b.n	80029d4 <cbvprintf_package+0x434>
		return -ENOSPC;
 80029e0:	f06f 001b 	mvn.w	r0, #27
 80029e4:	e7f6      	b.n	80029d4 <cbvprintf_package+0x434>
			return -ENOSPC;
 80029e6:	f06f 001b 	mvn.w	r0, #27
 80029ea:	e7f3      	b.n	80029d4 <cbvprintf_package+0x434>
					return -EINVAL;
 80029ec:	f06f 0015 	mvn.w	r0, #21
 80029f0:	e7f0      	b.n	80029d4 <cbvprintf_package+0x434>
					return -EINVAL;
 80029f2:	f06f 0015 	mvn.w	r0, #21
 80029f6:	e7ed      	b.n	80029d4 <cbvprintf_package+0x434>
			return -EINVAL;
 80029f8:	f06f 0015 	mvn.w	r0, #21
 80029fc:	e7ea      	b.n	80029d4 <cbvprintf_package+0x434>
		return -EINVAL;
 80029fe:	f06f 0015 	mvn.w	r0, #21
 8002a02:	e7e7      	b.n	80029d4 <cbvprintf_package+0x434>
				return -ENOSPC;
 8002a04:	f06f 001b 	mvn.w	r0, #27
 8002a08:	e7e4      	b.n	80029d4 <cbvprintf_package+0x434>
			return -ENOSPC;
 8002a0a:	f06f 001b 	mvn.w	r0, #27
 8002a0e:	e7e1      	b.n	80029d4 <cbvprintf_package+0x434>

08002a10 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 8002a10:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8002a12:	680b      	ldr	r3, [r1, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8002a18:	4b01      	ldr	r3, [pc, #4]	; (8002a20 <char_out+0x10>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4798      	blx	r3
}
 8002a1e:	bd08      	pop	{r3, pc}
 8002a20:	200002b0 	.word	0x200002b0

08002a24 <__printk_hook_install>:
	_char_out = fn;
 8002a24:	4b01      	ldr	r3, [pc, #4]	; (8002a2c <__printk_hook_install+0x8>)
 8002a26:	6018      	str	r0, [r3, #0]
}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	200002b0 	.word	0x200002b0

08002a30 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
 8002a30:	b500      	push	{lr}
 8002a32:	b083      	sub	sp, #12
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 8002a38:	2100      	movs	r1, #0
 8002a3a:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 8002a3c:	a901      	add	r1, sp, #4
 8002a3e:	4803      	ldr	r0, [pc, #12]	; (8002a4c <vprintk+0x1c>)
 8002a40:	f000 fa2c 	bl	8002e9c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 8002a44:	b003      	add	sp, #12
 8002a46:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a4a:	bf00      	nop
 8002a4c:	08002a11 	.word	0x08002a11

08002a50 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8002a50:	b510      	push	{r4, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8002a56:	9001      	str	r0, [sp, #4]
 8002a58:	9102      	str	r1, [sp, #8]
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
 8002a5e:	a901      	add	r1, sp, #4
 8002a60:	4805      	ldr	r0, [pc, #20]	; (8002a78 <vsnprintk+0x28>)
 8002a62:	f000 fa1b 	bl	8002e9c <cbvprintf>

	if (ctx.count < ctx.max) {
 8002a66:	9b03      	ldr	r3, [sp, #12]
 8002a68:	9a02      	ldr	r2, [sp, #8]
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	da01      	bge.n	8002a72 <vsnprintk+0x22>
		str[ctx.count] = '\0';
 8002a6e:	2200      	movs	r2, #0
 8002a70:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 8002a72:	9803      	ldr	r0, [sp, #12]
 8002a74:	b004      	add	sp, #16
 8002a76:	bd10      	pop	{r4, pc}
 8002a78:	0800e699 	.word	0x0800e699

08002a7c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8002a7c:	4684      	mov	ip, r0
	const char *sp = *str;
 8002a7e:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 8002a80:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 8002a82:	e005      	b.n	8002a90 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 8002a84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a88:	3201      	adds	r2, #1
 8002a8a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002a8e:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8002a90:	7813      	ldrb	r3, [r2, #0]
 8002a92:	4904      	ldr	r1, [pc, #16]	; (8002aa4 <extract_decimal+0x28>)
 8002a94:	5c59      	ldrb	r1, [r3, r1]
 8002a96:	f011 0f04 	tst.w	r1, #4
 8002a9a:	d1f3      	bne.n	8002a84 <extract_decimal+0x8>
	}
	*str = sp;
 8002a9c:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	08013491 	.word	0x08013491

08002aa8 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 8002aae:	2300      	movs	r3, #0
 8002ab0:	6003      	str	r3, [r0, #0]
 8002ab2:	6043      	str	r3, [r0, #4]
 8002ab4:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 8002ab6:	784b      	ldrb	r3, [r1, #1]
 8002ab8:	2b25      	cmp	r3, #37	; 0x25
 8002aba:	d002      	beq.n	8002ac2 <extract_conversion+0x1a>
 8002abc:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 8002abe:	2501      	movs	r5, #1
 8002ac0:	e01f      	b.n	8002b02 <extract_conversion+0x5a>
		conv->specifier = *sp++;
 8002ac2:	1c88      	adds	r0, r1, #2
 8002ac4:	70e3      	strb	r3, [r4, #3]
		return sp;
 8002ac6:	e145      	b.n	8002d54 <extract_conversion+0x2ac>
			conv->flag_dash = true;
 8002ac8:	7823      	ldrb	r3, [r4, #0]
 8002aca:	f043 0304 	orr.w	r3, r3, #4
 8002ace:	7023      	strb	r3, [r4, #0]
		if (loop) {
 8002ad0:	b1b5      	cbz	r5, 8002b00 <extract_conversion+0x58>
			++sp;
 8002ad2:	3601      	adds	r6, #1
 8002ad4:	e014      	b.n	8002b00 <extract_conversion+0x58>
			conv->flag_plus = true;
 8002ad6:	7823      	ldrb	r3, [r4, #0]
 8002ad8:	f043 0308 	orr.w	r3, r3, #8
 8002adc:	7023      	strb	r3, [r4, #0]
			break;
 8002ade:	e7f7      	b.n	8002ad0 <extract_conversion+0x28>
			conv->flag_space = true;
 8002ae0:	7823      	ldrb	r3, [r4, #0]
 8002ae2:	f043 0310 	orr.w	r3, r3, #16
 8002ae6:	7023      	strb	r3, [r4, #0]
			break;
 8002ae8:	e7f2      	b.n	8002ad0 <extract_conversion+0x28>
			conv->flag_hash = true;
 8002aea:	7823      	ldrb	r3, [r4, #0]
 8002aec:	f043 0320 	orr.w	r3, r3, #32
 8002af0:	7023      	strb	r3, [r4, #0]
			break;
 8002af2:	e7ed      	b.n	8002ad0 <extract_conversion+0x28>
			conv->flag_zero = true;
 8002af4:	7823      	ldrb	r3, [r4, #0]
 8002af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002afa:	7023      	strb	r3, [r4, #0]
			break;
 8002afc:	e7e8      	b.n	8002ad0 <extract_conversion+0x28>
		switch (*sp) {
 8002afe:	2500      	movs	r5, #0
	} while (loop);
 8002b00:	b345      	cbz	r5, 8002b54 <extract_conversion+0xac>
		switch (*sp) {
 8002b02:	7833      	ldrb	r3, [r6, #0]
 8002b04:	3b20      	subs	r3, #32
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d8f9      	bhi.n	8002afe <extract_conversion+0x56>
 8002b0a:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <extract_conversion+0x68>)
 8002b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b10:	08002ae1 	.word	0x08002ae1
 8002b14:	08002aff 	.word	0x08002aff
 8002b18:	08002aff 	.word	0x08002aff
 8002b1c:	08002aeb 	.word	0x08002aeb
 8002b20:	08002aff 	.word	0x08002aff
 8002b24:	08002aff 	.word	0x08002aff
 8002b28:	08002aff 	.word	0x08002aff
 8002b2c:	08002aff 	.word	0x08002aff
 8002b30:	08002aff 	.word	0x08002aff
 8002b34:	08002aff 	.word	0x08002aff
 8002b38:	08002aff 	.word	0x08002aff
 8002b3c:	08002ad7 	.word	0x08002ad7
 8002b40:	08002aff 	.word	0x08002aff
 8002b44:	08002ac9 	.word	0x08002ac9
 8002b48:	08002aff 	.word	0x08002aff
 8002b4c:	08002aff 	.word	0x08002aff
 8002b50:	08002af5 	.word	0x08002af5
	if (conv->flag_zero && conv->flag_dash) {
 8002b54:	7823      	ldrb	r3, [r4, #0]
 8002b56:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8002b5a:	2b44      	cmp	r3, #68	; 0x44
 8002b5c:	d05f      	beq.n	8002c1e <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 8002b5e:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 8002b60:	7823      	ldrb	r3, [r4, #0]
 8002b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b66:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 8002b68:	7833      	ldrb	r3, [r6, #0]
 8002b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b6c:	d05c      	beq.n	8002c28 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 8002b6e:	a801      	add	r0, sp, #4
 8002b70:	f7ff ff84 	bl	8002a7c <extract_decimal>
	if (sp != wp) {
 8002b74:	9b01      	ldr	r3, [sp, #4]
 8002b76:	429e      	cmp	r6, r3
 8002b78:	d00f      	beq.n	8002b9a <extract_conversion+0xf2>
		conv->width_present = true;
 8002b7a:	7823      	ldrb	r3, [r4, #0]
 8002b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b80:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 8002b82:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 8002b8a:	2800      	cmp	r0, #0
 8002b8c:	db54      	blt.n	8002c38 <extract_conversion+0x190>
 8002b8e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	7822      	ldrb	r2, [r4, #0]
 8002b94:	f363 0241 	bfi	r2, r3, #1, #1
 8002b98:	7022      	strb	r2, [r4, #0]
	return sp;
 8002b9a:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 8002b9c:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8002ba2:	bf14      	ite	ne
 8002ba4:	2300      	movne	r3, #0
 8002ba6:	2301      	moveq	r3, #1
 8002ba8:	7862      	ldrb	r2, [r4, #1]
 8002baa:	f363 0241 	bfi	r2, r3, #1, #1
 8002bae:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d043      	beq.n	8002c3c <extract_conversion+0x194>
	++sp;
 8002bb4:	9b01      	ldr	r3, [sp, #4]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 8002bba:	785b      	ldrb	r3, [r3, #1]
 8002bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8002bbe:	d03f      	beq.n	8002c40 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 8002bc0:	a801      	add	r0, sp, #4
 8002bc2:	f7ff ff5b 	bl	8002a7c <extract_decimal>
	conv->prec_value = prec;
 8002bc6:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 8002bc8:	7823      	ldrb	r3, [r4, #0]
 8002bca:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	db3e      	blt.n	8002c50 <extract_conversion+0x1a8>
 8002bd2:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	7822      	ldrb	r2, [r4, #0]
 8002bd8:	f363 0241 	bfi	r2, r3, #1, #1
 8002bdc:	7022      	strb	r2, [r4, #0]
	return sp;
 8002bde:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 8002be0:	7803      	ldrb	r3, [r0, #0]
 8002be2:	3b4c      	subs	r3, #76	; 0x4c
 8002be4:	2b2e      	cmp	r3, #46	; 0x2e
 8002be6:	f200 809d 	bhi.w	8002d24 <extract_conversion+0x27c>
 8002bea:	e8df f003 	tbb	[pc, r3]
 8002bee:	9b90      	.short	0x9b90
 8002bf0:	9b9b9b9b 	.word	0x9b9b9b9b
 8002bf4:	9b9b9b9b 	.word	0x9b9b9b9b
 8002bf8:	9b9b9b9b 	.word	0x9b9b9b9b
 8002bfc:	9b9b9b9b 	.word	0x9b9b9b9b
 8002c00:	9b9b9b9b 	.word	0x9b9b9b9b
 8002c04:	9b9b9b9b 	.word	0x9b9b9b9b
 8002c08:	9b339b9b 	.word	0x9b339b9b
 8002c0c:	9b459b57 	.word	0x9b459b57
 8002c10:	9b9b9b9b 	.word	0x9b9b9b9b
 8002c14:	9b899b9b 	.word	0x9b899b9b
 8002c18:	9b9b9b9b 	.word	0x9b9b9b9b
 8002c1c:	82          	.byte	0x82
 8002c1d:	00          	.byte	0x00
		conv->flag_zero = false;
 8002c1e:	7823      	ldrb	r3, [r4, #0]
 8002c20:	f36f 1386 	bfc	r3, #6, #1
 8002c24:	7023      	strb	r3, [r4, #0]
 8002c26:	e79a      	b.n	8002b5e <extract_conversion+0xb6>
		conv->width_star = true;
 8002c28:	7863      	ldrb	r3, [r4, #1]
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8002c30:	4633      	mov	r3, r6
 8002c32:	3301      	adds	r3, #1
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	e7b1      	b.n	8002b9c <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 8002c38:	2201      	movs	r2, #1
 8002c3a:	e7a9      	b.n	8002b90 <extract_conversion+0xe8>
		return sp;
 8002c3c:	9801      	ldr	r0, [sp, #4]
 8002c3e:	e7cf      	b.n	8002be0 <extract_conversion+0x138>
		conv->prec_star = true;
 8002c40:	7863      	ldrb	r3, [r4, #1]
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8002c48:	4610      	mov	r0, r2
 8002c4a:	3001      	adds	r0, #1
 8002c4c:	9001      	str	r0, [sp, #4]
 8002c4e:	e7c7      	b.n	8002be0 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 8002c50:	2201      	movs	r2, #1
 8002c52:	e7bf      	b.n	8002bd4 <extract_conversion+0x12c>
		if (*++sp == 'h') {
 8002c54:	1c42      	adds	r2, r0, #1
 8002c56:	7843      	ldrb	r3, [r0, #1]
 8002c58:	2b68      	cmp	r3, #104	; 0x68
 8002c5a:	d006      	beq.n	8002c6a <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 8002c5c:	7863      	ldrb	r3, [r4, #1]
 8002c5e:	2102      	movs	r1, #2
 8002c60:	f361 03c6 	bfi	r3, r1, #3, #4
 8002c64:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 8002c66:	4610      	mov	r0, r2
 8002c68:	e01e      	b.n	8002ca8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 8002c6a:	7863      	ldrb	r3, [r4, #1]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f362 03c6 	bfi	r3, r2, #3, #4
 8002c72:	7063      	strb	r3, [r4, #1]
			++sp;
 8002c74:	3002      	adds	r0, #2
 8002c76:	e017      	b.n	8002ca8 <extract_conversion+0x200>
		if (*++sp == 'l') {
 8002c78:	1c42      	adds	r2, r0, #1
 8002c7a:	7843      	ldrb	r3, [r0, #1]
 8002c7c:	2b6c      	cmp	r3, #108	; 0x6c
 8002c7e:	d006      	beq.n	8002c8e <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 8002c80:	7863      	ldrb	r3, [r4, #1]
 8002c82:	2103      	movs	r1, #3
 8002c84:	f361 03c6 	bfi	r3, r1, #3, #4
 8002c88:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	e00c      	b.n	8002ca8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 8002c8e:	7863      	ldrb	r3, [r4, #1]
 8002c90:	2204      	movs	r2, #4
 8002c92:	f362 03c6 	bfi	r3, r2, #3, #4
 8002c96:	7063      	strb	r3, [r4, #1]
			++sp;
 8002c98:	3002      	adds	r0, #2
 8002c9a:	e005      	b.n	8002ca8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 8002c9c:	7863      	ldrb	r3, [r4, #1]
 8002c9e:	2205      	movs	r2, #5
 8002ca0:	f362 03c6 	bfi	r3, r2, #3, #4
 8002ca4:	7063      	strb	r3, [r4, #1]
		++sp;
 8002ca6:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 8002ca8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002cac:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 8002cae:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002cb2:	2a37      	cmp	r2, #55	; 0x37
 8002cb4:	d87d      	bhi.n	8002db2 <extract_conversion+0x30a>
 8002cb6:	e8df f002 	tbb	[pc, r2]
 8002cba:	7c5e      	.short	0x7c5e
 8002cbc:	5e5e7c7c 	.word	0x5e5e7c7c
 8002cc0:	7c7c7c5e 	.word	0x7c7c7c5e
 8002cc4:	7c7c7c7c 	.word	0x7c7c7c7c
 8002cc8:	7c7c7c7c 	.word	0x7c7c7c7c
 8002ccc:	7c7c7c7c 	.word	0x7c7c7c7c
 8002cd0:	7c7c4f7c 	.word	0x7c7c4f7c
 8002cd4:	7c7c7c7c 	.word	0x7c7c7c7c
 8002cd8:	7c5e7c7c 	.word	0x7c5e7c7c
 8002cdc:	5e5e3a4f 	.word	0x5e5e3a4f
 8002ce0:	7c3a7c5e 	.word	0x7c3a7c5e
 8002ce4:	657c7c7c 	.word	0x657c7c7c
 8002ce8:	7c7c714f 	.word	0x7c7c714f
 8002cec:	7c4f7c71 	.word	0x7c4f7c71
 8002cf0:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 8002cf2:	7863      	ldrb	r3, [r4, #1]
 8002cf4:	2206      	movs	r2, #6
 8002cf6:	f362 03c6 	bfi	r3, r2, #3, #4
 8002cfa:	7063      	strb	r3, [r4, #1]
		++sp;
 8002cfc:	3001      	adds	r0, #1
		break;
 8002cfe:	e7d3      	b.n	8002ca8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 8002d00:	7863      	ldrb	r3, [r4, #1]
 8002d02:	2207      	movs	r2, #7
 8002d04:	f362 03c6 	bfi	r3, r2, #3, #4
 8002d08:	7063      	strb	r3, [r4, #1]
		++sp;
 8002d0a:	3001      	adds	r0, #1
		break;
 8002d0c:	e7cc      	b.n	8002ca8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 8002d0e:	7863      	ldrb	r3, [r4, #1]
 8002d10:	2208      	movs	r2, #8
 8002d12:	f362 03c6 	bfi	r3, r2, #3, #4
 8002d16:	7063      	strb	r3, [r4, #1]
		++sp;
 8002d18:	3001      	adds	r0, #1
		conv->unsupported = true;
 8002d1a:	7823      	ldrb	r3, [r4, #0]
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	7023      	strb	r3, [r4, #0]
		break;
 8002d22:	e7c1      	b.n	8002ca8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 8002d24:	7863      	ldrb	r3, [r4, #1]
 8002d26:	f36f 03c6 	bfc	r3, #3, #4
 8002d2a:	7063      	strb	r3, [r4, #1]
		break;
 8002d2c:	e7bc      	b.n	8002ca8 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 8002d2e:	78a2      	ldrb	r2, [r4, #2]
 8002d30:	2101      	movs	r1, #1
 8002d32:	f361 0202 	bfi	r2, r1, #0, #3
 8002d36:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002d38:	7862      	ldrb	r2, [r4, #1]
 8002d3a:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8002d3e:	2a40      	cmp	r2, #64	; 0x40
 8002d40:	d010      	beq.n	8002d64 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 8002d42:	2b63      	cmp	r3, #99	; 0x63
 8002d44:	d013      	beq.n	8002d6e <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 8002d46:	7823      	ldrb	r3, [r4, #0]
 8002d48:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002d4c:	4315      	orrs	r5, r2
 8002d4e:	f365 0341 	bfi	r3, r5, #1, #1
 8002d52:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 8002d54:	b002      	add	sp, #8
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 8002d58:	78a2      	ldrb	r2, [r4, #2]
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	f361 0202 	bfi	r2, r1, #0, #3
 8002d60:	70a2      	strb	r2, [r4, #2]
 8002d62:	e7e9      	b.n	8002d38 <extract_conversion+0x290>
			conv->invalid = true;
 8002d64:	7821      	ldrb	r1, [r4, #0]
 8002d66:	f041 0101 	orr.w	r1, r1, #1
 8002d6a:	7021      	strb	r1, [r4, #0]
 8002d6c:	e7e9      	b.n	8002d42 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8002d6e:	1e15      	subs	r5, r2, #0
 8002d70:	bf18      	it	ne
 8002d72:	2501      	movne	r5, #1
 8002d74:	e7e7      	b.n	8002d46 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 8002d76:	78a3      	ldrb	r3, [r4, #2]
 8002d78:	2204      	movs	r2, #4
 8002d7a:	f362 0302 	bfi	r3, r2, #0, #3
 8002d7e:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 8002d80:	2501      	movs	r5, #1
			break;
 8002d82:	e7e0      	b.n	8002d46 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8002d84:	78a3      	ldrb	r3, [r4, #2]
 8002d86:	2203      	movs	r2, #3
 8002d88:	f362 0302 	bfi	r3, r2, #0, #3
 8002d8c:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002d8e:	7863      	ldrb	r3, [r4, #1]
 8002d90:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d1d6      	bne.n	8002d46 <extract_conversion+0x29e>
			unsupported = true;
 8002d98:	2501      	movs	r5, #1
 8002d9a:	e7d4      	b.n	8002d46 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8002d9c:	78a3      	ldrb	r3, [r4, #2]
 8002d9e:	2203      	movs	r2, #3
 8002da0:	f362 0302 	bfi	r3, r2, #0, #3
 8002da4:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 8002da6:	7863      	ldrb	r3, [r4, #1]
 8002da8:	f013 0f78 	tst.w	r3, #120	; 0x78
 8002dac:	d0cb      	beq.n	8002d46 <extract_conversion+0x29e>
			unsupported = true;
 8002dae:	2501      	movs	r5, #1
 8002db0:	e7c9      	b.n	8002d46 <extract_conversion+0x29e>
		conv->invalid = true;
 8002db2:	7823      	ldrb	r3, [r4, #0]
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	7023      	strb	r3, [r4, #0]
		break;
 8002dba:	e7c4      	b.n	8002d46 <extract_conversion+0x29e>

08002dbc <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8002dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	460d      	mov	r5, r1
 8002dc6:	9201      	str	r2, [sp, #4]
 8002dc8:	469a      	mov	sl, r3
 8002dca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 8002dcc:	78d3      	ldrb	r3, [r2, #3]
 8002dce:	4a32      	ldr	r2, [pc, #200]	; (8002e98 <encode_uint+0xdc>)
 8002dd0:	f813 b002 	ldrb.w	fp, [r3, r2]
 8002dd4:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8002dd8:	2b6f      	cmp	r3, #111	; 0x6f
 8002dda:	d00f      	beq.n	8002dfc <encode_uint+0x40>
 8002ddc:	d906      	bls.n	8002dec <encode_uint+0x30>
 8002dde:	2b70      	cmp	r3, #112	; 0x70
 8002de0:	d00f      	beq.n	8002e02 <encode_uint+0x46>
 8002de2:	2b78      	cmp	r3, #120	; 0x78
 8002de4:	d110      	bne.n	8002e08 <encode_uint+0x4c>
		return 16;
 8002de6:	f04f 0910 	mov.w	r9, #16
 8002dea:	e023      	b.n	8002e34 <encode_uint+0x78>
	switch (specifier) {
 8002dec:	2b58      	cmp	r3, #88	; 0x58
 8002dee:	d002      	beq.n	8002df6 <encode_uint+0x3a>
 8002df0:	f04f 090a 	mov.w	r9, #10
 8002df4:	e01e      	b.n	8002e34 <encode_uint+0x78>
		return 16;
 8002df6:	f04f 0910 	mov.w	r9, #16
 8002dfa:	e01b      	b.n	8002e34 <encode_uint+0x78>
		return 8;
 8002dfc:	f04f 0908 	mov.w	r9, #8
 8002e00:	e018      	b.n	8002e34 <encode_uint+0x78>
		return 16;
 8002e02:	f04f 0910 	mov.w	r9, #16
 8002e06:	e015      	b.n	8002e34 <encode_uint+0x78>
	switch (specifier) {
 8002e08:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8002e0c:	e012      	b.n	8002e34 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	3230      	adds	r2, #48	; 0x30
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 8002e18:	463a      	mov	r2, r7
 8002e1a:	4643      	mov	r3, r8
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	4629      	mov	r1, r5
 8002e20:	f7fd fddc 	bl	80009dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 8002e24:	42bc      	cmp	r4, r7
 8002e26:	f175 0300 	sbcs.w	r3, r5, #0
 8002e2a:	d319      	bcc.n	8002e60 <encode_uint+0xa4>
 8002e2c:	4556      	cmp	r6, sl
 8002e2e:	d917      	bls.n	8002e60 <encode_uint+0xa4>
		value /= radix;
 8002e30:	4604      	mov	r4, r0
 8002e32:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 8002e34:	f04f 0800 	mov.w	r8, #0
 8002e38:	464f      	mov	r7, r9
 8002e3a:	464a      	mov	r2, r9
 8002e3c:	4643      	mov	r3, r8
 8002e3e:	4620      	mov	r0, r4
 8002e40:	4629      	mov	r1, r5
 8002e42:	f7fd fdcb 	bl	80009dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002e46:	2a09      	cmp	r2, #9
 8002e48:	d9e1      	bls.n	8002e0e <encode_uint+0x52>
 8002e4a:	f1bb 0f01 	cmp.w	fp, #1
 8002e4e:	d003      	beq.n	8002e58 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8002e50:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002e52:	3257      	adds	r2, #87	; 0x57
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	e7dd      	b.n	8002e14 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8002e58:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002e5a:	3237      	adds	r2, #55	; 0x37
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	e7d9      	b.n	8002e14 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 8002e60:	9b01      	ldr	r3, [sp, #4]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	f013 0f20 	tst.w	r3, #32
 8002e68:	d005      	beq.n	8002e76 <encode_uint+0xba>
		if (radix == 8) {
 8002e6a:	f1b9 0f08 	cmp.w	r9, #8
 8002e6e:	d006      	beq.n	8002e7e <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 8002e70:	f1b9 0f10 	cmp.w	r9, #16
 8002e74:	d009      	beq.n	8002e8a <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 8002e76:	4630      	mov	r0, r6
 8002e78:	b003      	add	sp, #12
 8002e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 8002e7e:	9a01      	ldr	r2, [sp, #4]
 8002e80:	7893      	ldrb	r3, [r2, #2]
 8002e82:	f043 0308 	orr.w	r3, r3, #8
 8002e86:	7093      	strb	r3, [r2, #2]
 8002e88:	e7f5      	b.n	8002e76 <encode_uint+0xba>
			conv->altform_0c = true;
 8002e8a:	9a01      	ldr	r2, [sp, #4]
 8002e8c:	7893      	ldrb	r3, [r2, #2]
 8002e8e:	f043 0310 	orr.w	r3, r3, #16
 8002e92:	7093      	strb	r3, [r2, #2]
 8002e94:	e7ef      	b.n	8002e76 <encode_uint+0xba>
 8002e96:	bf00      	nop
 8002e98:	08013491 	.word	0x08013491

08002e9c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8002e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea0:	b091      	sub	sp, #68	; 0x44
 8002ea2:	4606      	mov	r6, r0
 8002ea4:	460d      	mov	r5, r1
 8002ea6:	4691      	mov	r9, r2
 8002ea8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8002eaa:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8002eac:	f899 0000 	ldrb.w	r0, [r9]
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	f000 82d5 	beq.w	8003460 <cbvprintf+0x5c4>
		if (*fp != '%') {
 8002eb6:	2825      	cmp	r0, #37	; 0x25
 8002eb8:	d008      	beq.n	8002ecc <cbvprintf+0x30>
			OUTC(*fp++);
 8002eba:	f109 0901 	add.w	r9, r9, #1
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	47b0      	blx	r6
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	f2c0 82cd 	blt.w	8003462 <cbvprintf+0x5c6>
 8002ec8:	3401      	adds	r4, #1
			continue;
 8002eca:	e7ef      	b.n	8002eac <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9304      	str	r3, [sp, #16]
 8002ed0:	9305      	str	r3, [sp, #20]
 8002ed2:	9306      	str	r3, [sp, #24]
 8002ed4:	9307      	str	r3, [sp, #28]
 8002ed6:	9308      	str	r3, [sp, #32]
 8002ed8:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 8002eda:	4649      	mov	r1, r9
 8002edc:	a806      	add	r0, sp, #24
 8002ede:	f7ff fde3 	bl	8002aa8 <extract_conversion>
 8002ee2:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 8002ee4:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002ee8:	f013 0f01 	tst.w	r3, #1
 8002eec:	f000 8097 	beq.w	800301e <cbvprintf+0x182>
			width = va_arg(ap, int);
 8002ef0:	9b03      	ldr	r3, [sp, #12]
 8002ef2:	1d1a      	adds	r2, r3, #4
 8002ef4:	9203      	str	r2, [sp, #12]
 8002ef6:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 8002ef8:	2f00      	cmp	r7, #0
 8002efa:	f2c0 8088 	blt.w	800300e <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 8002efe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002f02:	f013 0f04 	tst.w	r3, #4
 8002f06:	f000 809c 	beq.w	8003042 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 8002f0a:	9b03      	ldr	r3, [sp, #12]
 8002f0c:	1d1a      	adds	r2, r3, #4
 8002f0e:	9203      	str	r2, [sp, #12]
 8002f10:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 8002f14:	f1ba 0f00 	cmp.w	sl, #0
 8002f18:	f2c0 808a 	blt.w	8003030 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 8002f20:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 8002f22:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002f26:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 8002f2a:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8002f2e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	f000 808e 	beq.w	8003054 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	f000 80d3 	beq.w	80030e4 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	f000 8124 	beq.w	800318c <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	f000 813b 	beq.w	80031c0 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 8002f4a:	f89d 8018 	ldrb.w	r8, [sp, #24]
 8002f4e:	f018 0b03 	ands.w	fp, r8, #3
 8002f52:	f040 813b 	bne.w	80031cc <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 8002f56:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002f5a:	3b25      	subs	r3, #37	; 0x25
 8002f5c:	2b53      	cmp	r3, #83	; 0x53
 8002f5e:	f200 81e6 	bhi.w	800332e <cbvprintf+0x492>
 8002f62:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002f66:	0140      	.short	0x0140
 8002f68:	01e401e4 	.word	0x01e401e4
 8002f6c:	01e401e4 	.word	0x01e401e4
 8002f70:	01e401e4 	.word	0x01e401e4
 8002f74:	01e401e4 	.word	0x01e401e4
 8002f78:	01e401e4 	.word	0x01e401e4
 8002f7c:	01e401e4 	.word	0x01e401e4
 8002f80:	01e401e4 	.word	0x01e401e4
 8002f84:	01e401e4 	.word	0x01e401e4
 8002f88:	01e401e4 	.word	0x01e401e4
 8002f8c:	01e401e4 	.word	0x01e401e4
 8002f90:	01e401e4 	.word	0x01e401e4
 8002f94:	01e401e4 	.word	0x01e401e4
 8002f98:	01e401e4 	.word	0x01e401e4
 8002f9c:	01e401e4 	.word	0x01e401e4
 8002fa0:	01e401e4 	.word	0x01e401e4
 8002fa4:	01e401e4 	.word	0x01e401e4
 8002fa8:	01e401e4 	.word	0x01e401e4
 8002fac:	01e401e4 	.word	0x01e401e4
 8002fb0:	01e401e4 	.word	0x01e401e4
 8002fb4:	01e401e4 	.word	0x01e401e4
 8002fb8:	01e401e4 	.word	0x01e401e4
 8002fbc:	01e401e4 	.word	0x01e401e4
 8002fc0:	01e401e4 	.word	0x01e401e4
 8002fc4:	01e401e4 	.word	0x01e401e4
 8002fc8:	01e401e4 	.word	0x01e401e4
 8002fcc:	01e40181 	.word	0x01e40181
 8002fd0:	01e401e4 	.word	0x01e401e4
 8002fd4:	01e401e4 	.word	0x01e401e4
 8002fd8:	01e401e4 	.word	0x01e401e4
 8002fdc:	01e401e4 	.word	0x01e401e4
 8002fe0:	015e01e4 	.word	0x015e01e4
 8002fe4:	01e40167 	.word	0x01e40167
 8002fe8:	01e401e4 	.word	0x01e401e4
 8002fec:	016701e4 	.word	0x016701e4
 8002ff0:	01e401e4 	.word	0x01e401e4
 8002ff4:	01e401e4 	.word	0x01e401e4
 8002ff8:	018101be 	.word	0x018101be
 8002ffc:	01e401a2 	.word	0x01e401a2
 8003000:	014d01e4 	.word	0x014d01e4
 8003004:	018101e4 	.word	0x018101e4
 8003008:	01e401e4 	.word	0x01e401e4
 800300c:	0181      	.short	0x0181
				conv->flag_dash = true;
 800300e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003012:	f043 0304 	orr.w	r3, r3, #4
 8003016:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 800301a:	427f      	negs	r7, r7
 800301c:	e76f      	b.n	8002efe <cbvprintf+0x62>
		} else if (conv->width_present) {
 800301e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	db02      	blt.n	800302c <cbvprintf+0x190>
		int width = -1;
 8003026:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800302a:	e768      	b.n	8002efe <cbvprintf+0x62>
			width = conv->width_value;
 800302c:	9f07      	ldr	r7, [sp, #28]
 800302e:	e766      	b.n	8002efe <cbvprintf+0x62>
				conv->prec_present = false;
 8003030:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003034:	f36f 0341 	bfc	r3, #1, #1
 8003038:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 800303c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003040:	e76c      	b.n	8002f1c <cbvprintf+0x80>
		} else if (conv->prec_present) {
 8003042:	f013 0f02 	tst.w	r3, #2
 8003046:	d002      	beq.n	800304e <cbvprintf+0x1b2>
			precision = conv->prec_value;
 8003048:	f8dd a020 	ldr.w	sl, [sp, #32]
 800304c:	e766      	b.n	8002f1c <cbvprintf+0x80>
		int precision = -1;
 800304e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003052:	e763      	b.n	8002f1c <cbvprintf+0x80>
			switch (length_mod) {
 8003054:	1ecb      	subs	r3, r1, #3
 8003056:	2b04      	cmp	r3, #4
 8003058:	d804      	bhi.n	8003064 <cbvprintf+0x1c8>
 800305a:	e8df f003 	tbb	[pc, r3]
 800305e:	1d0b      	.short	0x1d0b
 8003060:	3529      	.short	0x3529
 8003062:	35          	.byte	0x35
 8003063:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8003064:	9b03      	ldr	r3, [sp, #12]
 8003066:	1d1a      	adds	r2, r3, #4
 8003068:	9203      	str	r2, [sp, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	17da      	asrs	r2, r3, #31
 800306e:	9304      	str	r3, [sp, #16]
 8003070:	9205      	str	r2, [sp, #20]
				break;
 8003072:	e006      	b.n	8003082 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 8003074:	9b03      	ldr	r3, [sp, #12]
 8003076:	1d1a      	adds	r2, r3, #4
 8003078:	9203      	str	r2, [sp, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	17da      	asrs	r2, r3, #31
 800307e:	9304      	str	r3, [sp, #16]
 8003080:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 8003082:	2901      	cmp	r1, #1
 8003084:	d028      	beq.n	80030d8 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 8003086:	2902      	cmp	r1, #2
 8003088:	f47f af5f 	bne.w	8002f4a <cbvprintf+0xae>
				value->sint = (short)value->sint;
 800308c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8003090:	17da      	asrs	r2, r3, #31
 8003092:	9304      	str	r3, [sp, #16]
 8003094:	9205      	str	r2, [sp, #20]
 8003096:	e758      	b.n	8002f4a <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 8003098:	9b03      	ldr	r3, [sp, #12]
 800309a:	3307      	adds	r3, #7
 800309c:	f023 0307 	bic.w	r3, r3, #7
 80030a0:	f103 0208 	add.w	r2, r3, #8
 80030a4:	9203      	str	r2, [sp, #12]
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 80030aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 80030ae:	e7e8      	b.n	8003082 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 80030b0:	9b03      	ldr	r3, [sp, #12]
 80030b2:	3307      	adds	r3, #7
 80030b4:	f023 0307 	bic.w	r3, r3, #7
 80030b8:	f103 0208 	add.w	r2, r3, #8
 80030bc:	9203      	str	r2, [sp, #12]
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 80030c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 80030c6:	e7dc      	b.n	8003082 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80030c8:	9b03      	ldr	r3, [sp, #12]
 80030ca:	1d1a      	adds	r2, r3, #4
 80030cc:	9203      	str	r2, [sp, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	17da      	asrs	r2, r3, #31
				value->sint =
 80030d2:	9304      	str	r3, [sp, #16]
 80030d4:	9205      	str	r2, [sp, #20]
				break;
 80030d6:	e7d4      	b.n	8003082 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 80030d8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80030dc:	9304      	str	r3, [sp, #16]
 80030de:	2300      	movs	r3, #0
 80030e0:	9305      	str	r3, [sp, #20]
 80030e2:	e732      	b.n	8002f4a <cbvprintf+0xae>
			switch (length_mod) {
 80030e4:	1ecb      	subs	r3, r1, #3
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d804      	bhi.n	80030f4 <cbvprintf+0x258>
 80030ea:	e8df f003 	tbb	[pc, r3]
 80030ee:	1f0b      	.short	0x1f0b
 80030f0:	4135      	.short	0x4135
 80030f2:	41          	.byte	0x41
 80030f3:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 80030f4:	9b03      	ldr	r3, [sp, #12]
 80030f6:	1d1a      	adds	r2, r3, #4
 80030f8:	9203      	str	r2, [sp, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	9304      	str	r3, [sp, #16]
 80030fe:	2300      	movs	r3, #0
 8003100:	9305      	str	r3, [sp, #20]
				break;
 8003102:	e01e      	b.n	8003142 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 8003104:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 8003108:	2b63      	cmp	r3, #99	; 0x63
 800310a:	d007      	beq.n	800311c <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 800310c:	9b03      	ldr	r3, [sp, #12]
 800310e:	1d1a      	adds	r2, r3, #4
 8003110:	9203      	str	r2, [sp, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	9304      	str	r3, [sp, #16]
 8003116:	2300      	movs	r3, #0
 8003118:	9305      	str	r3, [sp, #20]
 800311a:	e012      	b.n	8003142 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 800311c:	9b03      	ldr	r3, [sp, #12]
 800311e:	1d1a      	adds	r2, r3, #4
 8003120:	9203      	str	r2, [sp, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	9304      	str	r3, [sp, #16]
 8003126:	2300      	movs	r3, #0
 8003128:	9305      	str	r3, [sp, #20]
 800312a:	e00a      	b.n	8003142 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 800312c:	9b03      	ldr	r3, [sp, #12]
 800312e:	3307      	adds	r3, #7
 8003130:	f023 0307 	bic.w	r3, r3, #7
 8003134:	f103 0208 	add.w	r2, r3, #8
 8003138:	9203      	str	r2, [sp, #12]
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 800313e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 8003142:	2901      	cmp	r1, #1
 8003144:	d01c      	beq.n	8003180 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 8003146:	2902      	cmp	r1, #2
 8003148:	f47f aeff 	bne.w	8002f4a <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 800314c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8003150:	9304      	str	r3, [sp, #16]
 8003152:	2300      	movs	r3, #0
 8003154:	9305      	str	r3, [sp, #20]
 8003156:	e6f8      	b.n	8002f4a <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 8003158:	9b03      	ldr	r3, [sp, #12]
 800315a:	3307      	adds	r3, #7
 800315c:	f023 0307 	bic.w	r3, r3, #7
 8003160:	f103 0208 	add.w	r2, r3, #8
 8003164:	9203      	str	r2, [sp, #12]
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 800316a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 800316e:	e7e8      	b.n	8003142 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 8003170:	9b03      	ldr	r3, [sp, #12]
 8003172:	1d1a      	adds	r2, r3, #4
 8003174:	9203      	str	r2, [sp, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
				value->uint =
 8003178:	9304      	str	r3, [sp, #16]
 800317a:	2300      	movs	r3, #0
 800317c:	9305      	str	r3, [sp, #20]
				break;
 800317e:	e7e0      	b.n	8003142 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 8003180:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003184:	9304      	str	r3, [sp, #16]
 8003186:	2300      	movs	r3, #0
 8003188:	9305      	str	r3, [sp, #20]
 800318a:	e6de      	b.n	8002f4a <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 800318c:	2908      	cmp	r1, #8
 800318e:	d00b      	beq.n	80031a8 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 8003190:	9b03      	ldr	r3, [sp, #12]
 8003192:	3307      	adds	r3, #7
 8003194:	f023 0307 	bic.w	r3, r3, #7
 8003198:	f103 0208 	add.w	r2, r3, #8
 800319c:	9203      	str	r2, [sp, #12]
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031a6:	e6d0      	b.n	8002f4a <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 80031a8:	9b03      	ldr	r3, [sp, #12]
 80031aa:	3307      	adds	r3, #7
 80031ac:	f023 0307 	bic.w	r3, r3, #7
 80031b0:	f103 0208 	add.w	r2, r3, #8
 80031b4:	9203      	str	r2, [sp, #12]
 80031b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031be:	e6c4      	b.n	8002f4a <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 80031c0:	9b03      	ldr	r3, [sp, #12]
 80031c2:	1d1a      	adds	r2, r3, #4
 80031c4:	9203      	str	r2, [sp, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	9304      	str	r3, [sp, #16]
 80031ca:	e6be      	b.n	8002f4a <cbvprintf+0xae>
			OUTS(sp, fp);
 80031cc:	9f02      	ldr	r7, [sp, #8]
 80031ce:	463b      	mov	r3, r7
 80031d0:	464a      	mov	r2, r9
 80031d2:	4629      	mov	r1, r5
 80031d4:	4630      	mov	r0, r6
 80031d6:	f00b fa9d 	bl	800e714 <outs>
 80031da:	2800      	cmp	r0, #0
 80031dc:	f2c0 8141 	blt.w	8003462 <cbvprintf+0x5c6>
 80031e0:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 80031e2:	46b9      	mov	r9, r7
			continue;
 80031e4:	e662      	b.n	8002eac <cbvprintf+0x10>
		case '%':
			OUTC('%');
 80031e6:	4629      	mov	r1, r5
 80031e8:	2025      	movs	r0, #37	; 0x25
 80031ea:	47b0      	blx	r6
 80031ec:	2800      	cmp	r0, #0
 80031ee:	f2c0 8138 	blt.w	8003462 <cbvprintf+0x5c6>
 80031f2:	3401      	adds	r4, #1
		char sign = 0;
 80031f4:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 80031f6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 80031fa:	f04f 0900 	mov.w	r9, #0
			break;
 80031fe:	e09b      	b.n	8003338 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 8003200:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 8003204:	f1ba 0f00 	cmp.w	sl, #0
 8003208:	db07      	blt.n	800321a <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 800320a:	4651      	mov	r1, sl
 800320c:	4648      	mov	r0, r9
 800320e:	f00d fe7d 	bl	8010f0c <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 8003212:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 8003216:	46d8      	mov	r8, fp
			precision = -1;

			break;
 8003218:	e08e      	b.n	8003338 <cbvprintf+0x49c>
				len = strlen(bps);
 800321a:	4648      	mov	r0, r9
 800321c:	f7fd fe1b 	bl	8000e56 <strlen>
 8003220:	e7f7      	b.n	8003212 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8003222:	9b04      	ldr	r3, [sp, #16]
 8003224:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 8003228:	46d8      	mov	r8, fp
			bpe = buf + 1;
 800322a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 800322e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 8003232:	e081      	b.n	8003338 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 8003234:	f018 0f08 	tst.w	r8, #8
 8003238:	d105      	bne.n	8003246 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 800323a:	f018 0810 	ands.w	r8, r8, #16
 800323e:	d004      	beq.n	800324a <cbvprintf+0x3ae>
				sign = ' ';
 8003240:	f04f 0820 	mov.w	r8, #32
 8003244:	e001      	b.n	800324a <cbvprintf+0x3ae>
				sign = '+';
 8003246:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 800324a:	9a04      	ldr	r2, [sp, #16]
 800324c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 800324e:	2b00      	cmp	r3, #0
 8003250:	db02      	blt.n	8003258 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 8003252:	9204      	str	r2, [sp, #16]
 8003254:	9305      	str	r3, [sp, #20]
 8003256:	e008      	b.n	800326a <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 8003258:	4252      	negs	r2, r2
 800325a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800325e:	9204      	str	r2, [sp, #16]
 8003260:	9305      	str	r3, [sp, #20]
				sign = '-';
 8003262:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8003266:	e000      	b.n	800326a <cbvprintf+0x3ce>
		switch (conv->specifier) {
 8003268:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 800326a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	ab0a      	add	r3, sp, #40	; 0x28
 8003272:	aa06      	add	r2, sp, #24
 8003274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003278:	f7ff fda0 	bl	8002dbc <encode_uint>
 800327c:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 800327e:	f1ba 0f00 	cmp.w	sl, #0
 8003282:	f2c0 8088 	blt.w	8003396 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 8003286:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800328a:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 800328e:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8003292:	f36f 1286 	bfc	r2, #6, #1
 8003296:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 800329a:	459a      	cmp	sl, r3
 800329c:	d97e      	bls.n	800339c <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 800329e:	ebaa 0303 	sub.w	r3, sl, r3
 80032a2:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 80032a4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 80032a8:	e046      	b.n	8003338 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 80032aa:	9804      	ldr	r0, [sp, #16]
 80032ac:	b928      	cbnz	r0, 80032ba <cbvprintf+0x41e>
		char sign = 0;
 80032ae:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 80032b0:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8003468 <cbvprintf+0x5cc>
			bps = "(nil)";
 80032b4:	f1aa 0905 	sub.w	r9, sl, #5
 80032b8:	e03e      	b.n	8003338 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80032ba:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	ab0a      	add	r3, sp, #40	; 0x28
 80032c2:	aa06      	add	r2, sp, #24
 80032c4:	2100      	movs	r1, #0
 80032c6:	f7ff fd79 	bl	8002dbc <encode_uint>
 80032ca:	4681      	mov	r9, r0
				conv->altform_0c = true;
 80032cc:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80032d0:	f043 0310 	orr.w	r3, r3, #16
 80032d4:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 80032d8:	2378      	movs	r3, #120	; 0x78
 80032da:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 80032de:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 80032e0:	e7cd      	b.n	800327e <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 80032e2:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 80032e4:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80032e8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80032ec:	2b07      	cmp	r3, #7
 80032ee:	d806      	bhi.n	80032fe <cbvprintf+0x462>
 80032f0:	e8df f003 	tbb	[pc, r3]
 80032f4:	0f0d0b04 	.word	0x0f0d0b04
 80032f8:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 80032fc:	6014      	str	r4, [r2, #0]
		char sign = 0;
 80032fe:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8003300:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8003304:	f04f 0900 	mov.w	r9, #0
}
 8003308:	e016      	b.n	8003338 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 800330a:	7014      	strb	r4, [r2, #0]
		break;
 800330c:	e7f7      	b.n	80032fe <cbvprintf+0x462>
		*(short *)dp = (short)count;
 800330e:	8014      	strh	r4, [r2, #0]
		break;
 8003310:	e7f5      	b.n	80032fe <cbvprintf+0x462>
		*(long *)dp = (long)count;
 8003312:	6014      	str	r4, [r2, #0]
		break;
 8003314:	e7f3      	b.n	80032fe <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 8003316:	17e3      	asrs	r3, r4, #31
 8003318:	6014      	str	r4, [r2, #0]
 800331a:	6053      	str	r3, [r2, #4]
		break;
 800331c:	e7ef      	b.n	80032fe <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 800331e:	17e3      	asrs	r3, r4, #31
 8003320:	6014      	str	r4, [r2, #0]
 8003322:	6053      	str	r3, [r2, #4]
		break;
 8003324:	e7eb      	b.n	80032fe <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 8003326:	6014      	str	r4, [r2, #0]
		break;
 8003328:	e7e9      	b.n	80032fe <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 800332a:	6014      	str	r4, [r2, #0]
		break;
 800332c:	e7e7      	b.n	80032fe <cbvprintf+0x462>
		switch (conv->specifier) {
 800332e:	46d8      	mov	r8, fp
 8003330:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8003334:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 8003338:	f1b9 0f00 	cmp.w	r9, #0
 800333c:	f000 808d 	beq.w	800345a <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 8003340:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 8003344:	f1b8 0f00 	cmp.w	r8, #0
 8003348:	d000      	beq.n	800334c <cbvprintf+0x4b0>
			nj_len += 1U;
 800334a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
 800334c:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8003350:	f011 0f10 	tst.w	r1, #16
 8003354:	d025      	beq.n	80033a2 <cbvprintf+0x506>
			nj_len += 2U;
 8003356:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 8003358:	9b07      	ldr	r3, [sp, #28]
 800335a:	4413      	add	r3, r2
		if (conv->pad_fp) {
 800335c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003360:	d001      	beq.n	8003366 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 8003362:	9a08      	ldr	r2, [sp, #32]
 8003364:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 8003366:	2f00      	cmp	r7, #0
 8003368:	dd31      	ble.n	80033ce <cbvprintf+0x532>
			width -= (int)nj_len;
 800336a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 800336c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003370:	f013 0f04 	tst.w	r3, #4
 8003374:	d12b      	bne.n	80033ce <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 8003376:	f013 0f40 	tst.w	r3, #64	; 0x40
 800337a:	d017      	beq.n	80033ac <cbvprintf+0x510>
					if (sign != 0) {
 800337c:	f1b8 0f00 	cmp.w	r8, #0
 8003380:	d017      	beq.n	80033b2 <cbvprintf+0x516>
						OUTC(sign);
 8003382:	4629      	mov	r1, r5
 8003384:	4640      	mov	r0, r8
 8003386:	47b0      	blx	r6
 8003388:	2800      	cmp	r0, #0
 800338a:	db6a      	blt.n	8003462 <cbvprintf+0x5c6>
 800338c:	3401      	adds	r4, #1
						sign = 0;
 800338e:	46d8      	mov	r8, fp
					}
					pad = '0';
 8003390:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8003394:	e00f      	b.n	80033b6 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 8003396:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 800339a:	e7cd      	b.n	8003338 <cbvprintf+0x49c>
 800339c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 80033a0:	e7ca      	b.n	8003338 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 80033a2:	f011 0f08 	tst.w	r1, #8
 80033a6:	d0d7      	beq.n	8003358 <cbvprintf+0x4bc>
			nj_len += 1U;
 80033a8:	3201      	adds	r2, #1
 80033aa:	e7d5      	b.n	8003358 <cbvprintf+0x4bc>
				char pad = ' ';
 80033ac:	f04f 0b20 	mov.w	fp, #32
 80033b0:	e001      	b.n	80033b6 <cbvprintf+0x51a>
					pad = '0';
 80033b2:	f04f 0b30 	mov.w	fp, #48	; 0x30
 80033b6:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 80033b8:	1e5f      	subs	r7, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	dd07      	ble.n	80033ce <cbvprintf+0x532>
					OUTC(pad);
 80033be:	4629      	mov	r1, r5
 80033c0:	4658      	mov	r0, fp
 80033c2:	47b0      	blx	r6
 80033c4:	2800      	cmp	r0, #0
 80033c6:	db4c      	blt.n	8003462 <cbvprintf+0x5c6>
 80033c8:	3401      	adds	r4, #1
				while (width-- > 0) {
 80033ca:	463b      	mov	r3, r7
 80033cc:	e7f4      	b.n	80033b8 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 80033ce:	f1b8 0f00 	cmp.w	r8, #0
 80033d2:	d005      	beq.n	80033e0 <cbvprintf+0x544>
			OUTC(sign);
 80033d4:	4629      	mov	r1, r5
 80033d6:	4640      	mov	r0, r8
 80033d8:	47b0      	blx	r6
 80033da:	2800      	cmp	r0, #0
 80033dc:	db41      	blt.n	8003462 <cbvprintf+0x5c6>
 80033de:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 80033e0:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80033e4:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80033e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80033ec:	4313      	orrs	r3, r2
 80033ee:	d005      	beq.n	80033fc <cbvprintf+0x560>
				OUTC('0');
 80033f0:	4629      	mov	r1, r5
 80033f2:	2030      	movs	r0, #48	; 0x30
 80033f4:	47b0      	blx	r6
 80033f6:	2800      	cmp	r0, #0
 80033f8:	db33      	blt.n	8003462 <cbvprintf+0x5c6>
 80033fa:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 80033fc:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003400:	f013 0f10 	tst.w	r3, #16
 8003404:	d006      	beq.n	8003414 <cbvprintf+0x578>
				OUTC(conv->specifier);
 8003406:	4629      	mov	r1, r5
 8003408:	f89d 001b 	ldrb.w	r0, [sp, #27]
 800340c:	47b0      	blx	r6
 800340e:	2800      	cmp	r0, #0
 8003410:	db27      	blt.n	8003462 <cbvprintf+0x5c6>
 8003412:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 8003414:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 8003416:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800341a:	2b00      	cmp	r3, #0
 800341c:	dd07      	ble.n	800342e <cbvprintf+0x592>
				OUTC('0');
 800341e:	4629      	mov	r1, r5
 8003420:	2030      	movs	r0, #48	; 0x30
 8003422:	47b0      	blx	r6
 8003424:	2800      	cmp	r0, #0
 8003426:	db1c      	blt.n	8003462 <cbvprintf+0x5c6>
 8003428:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 800342a:	4643      	mov	r3, r8
 800342c:	e7f3      	b.n	8003416 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 800342e:	4653      	mov	r3, sl
 8003430:	464a      	mov	r2, r9
 8003432:	4629      	mov	r1, r5
 8003434:	4630      	mov	r0, r6
 8003436:	f00b f96d 	bl	800e714 <outs>
 800343a:	2800      	cmp	r0, #0
 800343c:	db11      	blt.n	8003462 <cbvprintf+0x5c6>
 800343e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 8003440:	2f00      	cmp	r7, #0
 8003442:	dd07      	ble.n	8003454 <cbvprintf+0x5b8>
			OUTC(' ');
 8003444:	4629      	mov	r1, r5
 8003446:	2020      	movs	r0, #32
 8003448:	47b0      	blx	r6
 800344a:	2800      	cmp	r0, #0
 800344c:	db09      	blt.n	8003462 <cbvprintf+0x5c6>
 800344e:	3401      	adds	r4, #1
			--width;
 8003450:	3f01      	subs	r7, #1
 8003452:	e7f5      	b.n	8003440 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 8003454:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003458:	e528      	b.n	8002eac <cbvprintf+0x10>
 800345a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800345e:	e525      	b.n	8002eac <cbvprintf+0x10>
		}
	}

	return count;
 8003460:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 8003462:	b011      	add	sp, #68	; 0x44
 8003464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003468:	08011e9d 	.word	0x08011e9d

0800346c <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 800346c:	f04f 0210 	mov.w	r2, #16
 8003470:	f3ef 8311 	mrs	r3, BASEPRI
 8003474:	f382 8812 	msr	BASEPRI_MAX, r2
 8003478:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8003484:	4b02      	ldr	r3, [pc, #8]	; (8003490 <stm32l4_init+0x24>)
 8003486:	4a03      	ldr	r2, [pc, #12]	; (8003494 <stm32l4_init+0x28>)
 8003488:	601a      	str	r2, [r3, #0]

	return 0;
}
 800348a:	2000      	movs	r0, #0
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	200003c0 	.word	0x200003c0
 8003494:	003d0900 	.word	0x003d0900

08003498 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
 8003498:	b508      	push	{r3, lr}
	proc_tid = process_tid;
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <thread_set+0x1c>)
 800349c:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 800349e:	b118      	cbz	r0, 80034a8 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <thread_set+0x20>)
 80034a2:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
 80034a4:	2b09      	cmp	r3, #9
 80034a6:	dc00      	bgt.n	80034aa <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
 80034a8:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 80034aa:	4804      	ldr	r0, [pc, #16]	; (80034bc <thread_set+0x24>)
 80034ac:	f008 f836 	bl	800b51c <z_impl_k_sem_give>
}
 80034b0:	e7fa      	b.n	80034a8 <thread_set+0x10>
 80034b2:	bf00      	nop
 80034b4:	20000e38 	.word	0x20000e38
 80034b8:	20000dec 	.word	0x20000dec
 80034bc:	20000684 	.word	0x20000684

080034c0 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
 80034c0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 80034c2:	4802      	ldr	r0, [pc, #8]	; (80034cc <log_process_thread_timer_expiry_fn+0xc>)
 80034c4:	f008 f82a 	bl	800b51c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
 80034c8:	bd08      	pop	{r3, pc}
 80034ca:	bf00      	nop
 80034cc:	20000684 	.word	0x20000684

080034d0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 80034d0:	b530      	push	{r4, r5, lr}
 80034d2:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 80034d4:	2200      	movs	r2, #0
 80034d6:	490f      	ldr	r1, [pc, #60]	; (8003514 <enable_logger+0x44>)
 80034d8:	480f      	ldr	r0, [pc, #60]	; (8003518 <enable_logger+0x48>)
 80034da:	f00d fb38 	bl	8010b4e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80034de:	4d0f      	ldr	r5, [pc, #60]	; (800351c <enable_logger+0x4c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	2300      	movs	r3, #0
 80034e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80034e8:	2400      	movs	r4, #0
 80034ea:	9404      	str	r4, [sp, #16]
 80034ec:	230e      	movs	r3, #14
 80034ee:	9303      	str	r3, [sp, #12]
 80034f0:	9402      	str	r4, [sp, #8]
 80034f2:	9401      	str	r4, [sp, #4]
 80034f4:	9400      	str	r4, [sp, #0]
 80034f6:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <enable_logger+0x50>)
 80034f8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80034fc:	4909      	ldr	r1, [pc, #36]	; (8003524 <enable_logger+0x54>)
 80034fe:	4628      	mov	r0, r5
 8003500:	f00c ffe6 	bl	80104d0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8003504:	4908      	ldr	r1, [pc, #32]	; (8003528 <enable_logger+0x58>)
 8003506:	4628      	mov	r0, r5
 8003508:	f00c ffce 	bl	80104a8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 800350c:	4620      	mov	r0, r4
 800350e:	b009      	add	sp, #36	; 0x24
 8003510:	bd30      	pop	{r4, r5, pc}
 8003512:	bf00      	nop
 8003514:	080034c1 	.word	0x080034c1
 8003518:	20000b20 	.word	0x20000b20
 800351c:	20000b58 	.word	0x20000b58
 8003520:	080038c5 	.word	0x080038c5
 8003524:	20001840 	.word	0x20001840
 8003528:	08011ea4 	.word	0x08011ea4

0800352c <log_init>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800352c:	4b18      	ldr	r3, [pc, #96]	; (8003590 <log_init+0x64>)
 800352e:	f3bf 8f5b 	dmb	ish
 8003532:	e853 2f00 	ldrex	r2, [r3]
 8003536:	1c51      	adds	r1, r2, #1
 8003538:	e843 1000 	strex	r0, r1, [r3]
 800353c:	2800      	cmp	r0, #0
 800353e:	d1f8      	bne.n	8003532 <log_init+0x6>
 8003540:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8003544:	bb1a      	cbnz	r2, 800358e <log_init+0x62>
{
 8003546:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
 8003548:	2400      	movs	r4, #0
 800354a:	e009      	b.n	8003560 <log_init+0x34>
					   backend->cb->ctx,
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <log_init+0x68>)
 800354e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8003552:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
 8003554:	2204      	movs	r2, #4
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	4628      	mov	r0, r5
 800355a:	f000 f9d9 	bl	8003910 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 800355e:	3401      	adds	r4, #1
 8003560:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <log_init+0x6c>)
 8003562:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <log_init+0x68>)
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800356a:	da0f      	bge.n	800358c <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
 800356c:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 800356e:	4d09      	ldr	r5, [pc, #36]	; (8003594 <log_init+0x68>)
 8003570:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 8003574:	7b2b      	ldrb	r3, [r5, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f1      	beq.n	800355e <log_init+0x32>
			if (backend->api->init != NULL) {
 800357a:	0123      	lsls	r3, r4, #4
 800357c:	4a05      	ldr	r2, [pc, #20]	; (8003594 <log_init+0x68>)
 800357e:	58d3      	ldr	r3, [r2, r3]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0e2      	beq.n	800354c <log_init+0x20>
				backend->api->init(backend);
 8003586:	4628      	mov	r0, r5
 8003588:	4798      	blx	r3
 800358a:	e7df      	b.n	800354c <log_init+0x20>
}
 800358c:	bd70      	pop	{r4, r5, r6, pc}
 800358e:	4770      	bx	lr
 8003590:	20000df4 	.word	0x20000df4
 8003594:	080119f4 	.word	0x080119f4
 8003598:	08011a04 	.word	0x08011a04

0800359c <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
 800359c:	b138      	cbz	r0, 80035ae <log_set_timestamp_func+0x12>
{
 800359e:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
 80035a0:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <log_set_timestamp_func+0x18>)
 80035a2:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
 80035a4:	4608      	mov	r0, r1
 80035a6:	f000 fba3 	bl	8003cf0 <log_output_timestamp_freq_set>
	return 0;
 80035aa:	2000      	movs	r0, #0
}
 80035ac:	bd08      	pop	{r3, pc}
		return -EINVAL;
 80035ae:	f06f 0015 	mvn.w	r0, #21
}
 80035b2:	4770      	bx	lr
 80035b4:	200002b4 	.word	0x200002b4

080035b8 <z_log_notify_backend_enabled>:
{
 80035b8:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <z_log_notify_backend_enabled+0x18>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	b11b      	cbz	r3, 80035c8 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
 80035c0:	4b03      	ldr	r3, [pc, #12]	; (80035d0 <z_log_notify_backend_enabled+0x18>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]
}
 80035c6:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <z_log_notify_backend_enabled+0x1c>)
 80035ca:	f007 ffa7 	bl	800b51c <z_impl_k_sem_give>
}
 80035ce:	e7f7      	b.n	80035c0 <z_log_notify_backend_enabled+0x8>
 80035d0:	20001408 	.word	0x20001408
 80035d4:	20000684 	.word	0x20000684

080035d8 <z_log_dropped>:
 80035d8:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <z_log_dropped+0x38>)
 80035da:	f3bf 8f5b 	dmb	ish
 80035de:	e853 2f00 	ldrex	r2, [r3]
 80035e2:	3201      	adds	r2, #1
 80035e4:	e843 2100 	strex	r1, r2, [r3]
 80035e8:	2900      	cmp	r1, #0
 80035ea:	d1f8      	bne.n	80035de <z_log_dropped+0x6>
 80035ec:	f3bf 8f5b 	dmb	ish
	if (buffered) {
 80035f0:	b900      	cbnz	r0, 80035f4 <z_log_dropped+0x1c>
}
 80035f2:	4770      	bx	lr
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80035f4:	4b07      	ldr	r3, [pc, #28]	; (8003614 <z_log_dropped+0x3c>)
 80035f6:	f3bf 8f5b 	dmb	ish
 80035fa:	e853 2f00 	ldrex	r2, [r3]
 80035fe:	3a01      	subs	r2, #1
 8003600:	e843 2100 	strex	r1, r2, [r3]
 8003604:	2900      	cmp	r1, #0
 8003606:	d1f8      	bne.n	80035fa <z_log_dropped+0x22>
 8003608:	f3bf 8f5b 	dmb	ish
 800360c:	e7f1      	b.n	80035f2 <z_log_dropped+0x1a>
 800360e:	bf00      	nop
 8003610:	20000df0 	.word	0x20000df0
 8003614:	20000dec 	.word	0x20000dec

08003618 <z_log_dropped_read_and_clear>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <z_log_dropped_read_and_clear+0x1c>)
}
 800361a:	2000      	movs	r0, #0
 800361c:	4602      	mov	r2, r0
 800361e:	f3bf 8f5b 	dmb	ish
 8003622:	e853 0f00 	ldrex	r0, [r3]
 8003626:	e843 2100 	strex	r1, r2, [r3]
 800362a:	2900      	cmp	r1, #0
 800362c:	d1f9      	bne.n	8003622 <z_log_dropped_read_and_clear+0xa>
 800362e:	f3bf 8f5b 	dmb	ish
 8003632:	4770      	bx	lr
 8003634:	20000df0 	.word	0x20000df0

08003638 <dropped_notify>:
{
 8003638:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 800363a:	f7ff ffed 	bl	8003618 <z_log_dropped_read_and_clear>
 800363e:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003640:	2400      	movs	r4, #0
 8003642:	e000      	b.n	8003646 <dropped_notify+0xe>
 8003644:	3401      	adds	r4, #1
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <dropped_notify+0x3c>)
 8003648:	4a0b      	ldr	r2, [pc, #44]	; (8003678 <dropped_notify+0x40>)
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8003650:	da0f      	bge.n	8003672 <dropped_notify+0x3a>
 8003652:	4809      	ldr	r0, [pc, #36]	; (8003678 <dropped_notify+0x40>)
 8003654:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8003658:	6843      	ldr	r3, [r0, #4]
 800365a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f1      	beq.n	8003644 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
 8003660:	0123      	lsls	r3, r4, #4
 8003662:	4a05      	ldr	r2, [pc, #20]	; (8003678 <dropped_notify+0x40>)
 8003664:	58d3      	ldr	r3, [r2, r3]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0eb      	beq.n	8003644 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
 800366c:	4629      	mov	r1, r5
 800366e:	4798      	blx	r3
 8003670:	e7e8      	b.n	8003644 <dropped_notify+0xc>
}
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	08011a04 	.word	0x08011a04
 8003678:	080119f4 	.word	0x080119f4

0800367c <z_log_dropped_pending>:
	return dropped_cnt > 0;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <z_log_dropped_pending+0x10>)
 800367e:	6818      	ldr	r0, [r3, #0]
}
 8003680:	2800      	cmp	r0, #0
 8003682:	bfd4      	ite	le
 8003684:	2000      	movle	r0, #0
 8003686:	2001      	movgt	r0, #1
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000df0 	.word	0x20000df0

08003690 <z_log_msg2_init>:
{
 8003690:	b508      	push	{r3, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 8003692:	4902      	ldr	r1, [pc, #8]	; (800369c <z_log_msg2_init+0xc>)
 8003694:	4802      	ldr	r0, [pc, #8]	; (80036a0 <z_log_msg2_init+0x10>)
 8003696:	f00b f909 	bl	800e8ac <mpsc_pbuf_init>
}
 800369a:	bd08      	pop	{r3, pc}
 800369c:	08011eb0 	.word	0x08011eb0
 80036a0:	20000df8 	.word	0x20000df8

080036a4 <log_core_init>:
{
 80036a4:	b508      	push	{r3, lr}
	panic_mode = false;
 80036a6:	2300      	movs	r3, #0
 80036a8:	4a05      	ldr	r2, [pc, #20]	; (80036c0 <log_core_init+0x1c>)
 80036aa:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 80036ac:	4a05      	ldr	r2, [pc, #20]	; (80036c4 <log_core_init+0x20>)
 80036ae:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
 80036b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036b4:	4804      	ldr	r0, [pc, #16]	; (80036c8 <log_core_init+0x24>)
 80036b6:	f7ff ff71 	bl	800359c <log_set_timestamp_func>
		z_log_msg2_init();
 80036ba:	f7ff ffe9 	bl	8003690 <z_log_msg2_init>
}
 80036be:	bd08      	pop	{r3, pc}
 80036c0:	20001409 	.word	0x20001409
 80036c4:	20000df0 	.word	0x20000df0
 80036c8:	0800ec15 	.word	0x0800ec15

080036cc <z_log_msg2_alloc>:
{
 80036cc:	b508      	push	{r3, lr}
 80036ce:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
 80036d0:	2200      	movs	r2, #0
 80036d2:	2300      	movs	r3, #0
 80036d4:	4801      	ldr	r0, [pc, #4]	; (80036dc <z_log_msg2_alloc+0x10>)
 80036d6:	f00b f90e 	bl	800e8f6 <mpsc_pbuf_alloc>
}
 80036da:	bd08      	pop	{r3, pc}
 80036dc:	20000df8 	.word	0x20000df8

080036e0 <z_log_msg2_claim>:
{
 80036e0:	b508      	push	{r3, lr}
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
 80036e2:	4802      	ldr	r0, [pc, #8]	; (80036ec <z_log_msg2_claim+0xc>)
 80036e4:	f00b f9c4 	bl	800ea70 <mpsc_pbuf_claim>
}
 80036e8:	bd08      	pop	{r3, pc}
 80036ea:	bf00      	nop
 80036ec:	20000df8 	.word	0x20000df8

080036f0 <z_log_msg2_free>:
{
 80036f0:	b508      	push	{r3, lr}
 80036f2:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
 80036f4:	4801      	ldr	r0, [pc, #4]	; (80036fc <z_log_msg2_free+0xc>)
 80036f6:	f00b fa2c 	bl	800eb52 <mpsc_pbuf_free>
}
 80036fa:	bd08      	pop	{r3, pc}
 80036fc:	20000df8 	.word	0x20000df8

08003700 <msg_process>:
{
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	4606      	mov	r6, r0
	if (!bypass) {
 8003704:	b9e9      	cbnz	r1, 8003742 <msg_process+0x42>
		for (int i = 0; i < log_backend_count_get(); i++) {
 8003706:	2400      	movs	r4, #0
 8003708:	e000      	b.n	800370c <msg_process+0xc>
 800370a:	3401      	adds	r4, #1
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <msg_process+0x4c>)
 800370e:	4a10      	ldr	r2, [pc, #64]	; (8003750 <msg_process+0x50>)
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8003716:	da14      	bge.n	8003742 <msg_process+0x42>
	return &__log_backends_start[idx];
 8003718:	4d0d      	ldr	r5, [pc, #52]	; (8003750 <msg_process+0x50>)
 800371a:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
 800371e:	686b      	ldr	r3, [r5, #4]
 8003720:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f1      	beq.n	800370a <msg_process+0xa>
			    msg_filter_check(backend, msg)) {
 8003726:	4631      	mov	r1, r6
 8003728:	4628      	mov	r0, r5
 800372a:	f00b fa71 	bl	800ec10 <msg_filter_check>
			if (log_backend_is_active(backend) &&
 800372e:	2800      	cmp	r0, #0
 8003730:	d0eb      	beq.n	800370a <msg_process+0xa>
	backend->api->process(backend, msg);
 8003732:	0127      	lsls	r7, r4, #4
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <msg_process+0x50>)
 8003736:	59db      	ldr	r3, [r3, r7]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4631      	mov	r1, r6
 800373c:	4628      	mov	r0, r5
 800373e:	4798      	blx	r3
}
 8003740:	e7e3      	b.n	800370a <msg_process+0xa>
		z_log_msg2_free(msg.msg2);
 8003742:	4630      	mov	r0, r6
 8003744:	f7ff ffd4 	bl	80036f0 <z_log_msg2_free>
}
 8003748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800374a:	bf00      	nop
 800374c:	08011a04 	.word	0x08011a04
 8003750:	080119f4 	.word	0x080119f4

08003754 <z_log_msg2_pending>:
{
 8003754:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(&log_buffer);
 8003756:	4802      	ldr	r0, [pc, #8]	; (8003760 <z_log_msg2_pending+0xc>)
 8003758:	f00b fa38 	bl	800ebcc <mpsc_pbuf_is_pending>
}
 800375c:	bd08      	pop	{r3, pc}
 800375e:	bf00      	nop
 8003760:	20000df8 	.word	0x20000df8

08003764 <z_impl_log_process>:
{
 8003764:	b510      	push	{r4, lr}
 8003766:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <z_impl_log_process+0x4c>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	b903      	cbnz	r3, 8003770 <z_impl_log_process+0xc>
 800376e:	b1d0      	cbz	r0, 80037a6 <z_impl_log_process+0x42>
	msg = get_msg();
 8003770:	f00b fa5d 	bl	800ec2e <get_msg>
	if (msg.msg) {
 8003774:	4603      	mov	r3, r0
 8003776:	b180      	cbz	r0, 800379a <z_impl_log_process+0x36>
		if (!bypass) {
 8003778:	b95c      	cbnz	r4, 8003792 <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800377a:	4a0e      	ldr	r2, [pc, #56]	; (80037b4 <z_impl_log_process+0x50>)
 800377c:	f3bf 8f5b 	dmb	ish
 8003780:	e852 1f00 	ldrex	r1, [r2]
 8003784:	3901      	subs	r1, #1
 8003786:	e842 1000 	strex	r0, r1, [r2]
 800378a:	2800      	cmp	r0, #0
 800378c:	d1f8      	bne.n	8003780 <z_impl_log_process+0x1c>
 800378e:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
 8003792:	4621      	mov	r1, r4
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ffb3 	bl	8003700 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
 800379a:	b914      	cbnz	r4, 80037a2 <z_impl_log_process+0x3e>
 800379c:	f7ff ff6e 	bl	800367c <z_log_dropped_pending>
 80037a0:	b910      	cbnz	r0, 80037a8 <z_impl_log_process+0x44>
	return next_pending();
 80037a2:	f00b fa48 	bl	800ec36 <next_pending>
}
 80037a6:	bd10      	pop	{r4, pc}
		dropped_notify();
 80037a8:	f7ff ff46 	bl	8003638 <dropped_notify>
 80037ac:	e7f9      	b.n	80037a2 <z_impl_log_process+0x3e>
 80037ae:	bf00      	nop
 80037b0:	20001408 	.word	0x20001408
 80037b4:	20000dec 	.word	0x20000dec

080037b8 <z_log_msg_post_finalize>:
{
 80037b8:	b510      	push	{r4, lr}
 80037ba:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80037bc:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <z_log_msg_post_finalize+0x7c>)
 80037be:	f3bf 8f5b 	dmb	ish
 80037c2:	e853 2f00 	ldrex	r2, [r3]
 80037c6:	1c51      	adds	r1, r2, #1
 80037c8:	e843 1000 	strex	r0, r1, [r3]
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d1f8      	bne.n	80037c2 <z_log_msg_post_finalize+0xa>
 80037d0:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 80037d4:	4b18      	ldr	r3, [pc, #96]	; (8003838 <z_log_msg_post_finalize+0x80>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	b93b      	cbnz	r3, 80037ea <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <z_log_msg_post_finalize+0x84>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	b103      	cbz	r3, 80037e2 <z_log_msg_post_finalize+0x2a>
 80037e0:	b19a      	cbz	r2, 800380a <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80037e2:	2a0a      	cmp	r2, #10
 80037e4:	d01c      	beq.n	8003820 <z_log_msg_post_finalize+0x68>
}
 80037e6:	b002      	add	sp, #8
 80037e8:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 80037ea:	f04f 0310 	mov.w	r3, #16
 80037ee:	f3ef 8411 	mrs	r4, BASEPRI
 80037f2:	f383 8812 	msr	BASEPRI_MAX, r3
 80037f6:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 80037fa:	2000      	movs	r0, #0
 80037fc:	f7ff ffb2 	bl	8003764 <z_impl_log_process>
	__asm__ volatile(
 8003800:	f384 8811 	msr	BASEPRI, r4
 8003804:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8003808:	e7ed      	b.n	80037e6 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
 800380a:	2200      	movs	r2, #0
 800380c:	2300      	movs	r3, #0
 800380e:	e9cd 2300 	strd	r2, r3, [sp]
 8003812:	f242 7210 	movw	r2, #10000	; 0x2710
 8003816:	2300      	movs	r3, #0
 8003818:	4809      	ldr	r0, [pc, #36]	; (8003840 <z_log_msg_post_finalize+0x88>)
 800381a:	f008 fe1f 	bl	800c45c <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
 800381e:	e7e2      	b.n	80037e6 <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0e0      	beq.n	80037e6 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
 8003824:	4806      	ldr	r0, [pc, #24]	; (8003840 <z_log_msg_post_finalize+0x88>)
 8003826:	f00d f99e 	bl	8010b66 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 800382a:	4806      	ldr	r0, [pc, #24]	; (8003844 <z_log_msg_post_finalize+0x8c>)
 800382c:	f007 fe76 	bl	800b51c <z_impl_k_sem_give>
}
 8003830:	e7d9      	b.n	80037e6 <z_log_msg_post_finalize+0x2e>
 8003832:	bf00      	nop
 8003834:	20000dec 	.word	0x20000dec
 8003838:	20001409 	.word	0x20001409
 800383c:	20000e38 	.word	0x20000e38
 8003840:	20000b20 	.word	0x20000b20
 8003844:	20000684 	.word	0x20000684

08003848 <z_log_msg2_commit>:
{
 8003848:	b510      	push	{r4, lr}
 800384a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <z_log_msg2_commit+0x1c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4798      	blx	r3
 8003852:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8003854:	4621      	mov	r1, r4
 8003856:	4804      	ldr	r0, [pc, #16]	; (8003868 <z_log_msg2_commit+0x20>)
 8003858:	f00b f8e4 	bl	800ea24 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
 800385c:	f7ff ffac 	bl	80037b8 <z_log_msg_post_finalize>
}
 8003860:	bd10      	pop	{r4, pc}
 8003862:	bf00      	nop
 8003864:	200002b4 	.word	0x200002b4
 8003868:	20000df8 	.word	0x20000df8

0800386c <z_impl_log_panic>:
	if (panic_mode) {
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <z_impl_log_panic+0x4c>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	b103      	cbz	r3, 8003874 <z_impl_log_panic+0x8>
 8003872:	4770      	bx	lr
{
 8003874:	b510      	push	{r4, lr}
	log_init();
 8003876:	f7ff fe59 	bl	800352c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 800387a:	2400      	movs	r4, #0
 800387c:	e000      	b.n	8003880 <z_impl_log_panic+0x14>
 800387e:	3401      	adds	r4, #1
 8003880:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <z_impl_log_panic+0x50>)
 8003882:	4a0f      	ldr	r2, [pc, #60]	; (80038c0 <z_impl_log_panic+0x54>)
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800388a:	da0c      	bge.n	80038a6 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
 800388c:	480c      	ldr	r0, [pc, #48]	; (80038c0 <z_impl_log_panic+0x54>)
 800388e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 8003892:	6843      	ldr	r3, [r0, #4]
 8003894:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f1      	beq.n	800387e <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 800389a:	0123      	lsls	r3, r4, #4
 800389c:	4a08      	ldr	r2, [pc, #32]	; (80038c0 <z_impl_log_panic+0x54>)
 800389e:	58d3      	ldr	r3, [r2, r3]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	4798      	blx	r3
}
 80038a4:	e7eb      	b.n	800387e <z_impl_log_panic+0x12>
 80038a6:	2000      	movs	r0, #0
 80038a8:	f7ff ff5c 	bl	8003764 <z_impl_log_process>
		while (log_process(false) == true) {
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d1fa      	bne.n	80038a6 <z_impl_log_panic+0x3a>
	panic_mode = true;
 80038b0:	4b01      	ldr	r3, [pc, #4]	; (80038b8 <z_impl_log_panic+0x4c>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	701a      	strb	r2, [r3, #0]
}
 80038b6:	bd10      	pop	{r4, pc}
 80038b8:	20001409 	.word	0x20001409
 80038bc:	08011a04 	.word	0x08011a04
 80038c0:	080119f4 	.word	0x080119f4

080038c4 <log_process_thread_func>:
{
 80038c4:	b508      	push	{r3, lr}
	log_init();
 80038c6:	f7ff fe31 	bl	800352c <log_init>
	return z_impl_z_current_get();
 80038ca:	f008 fba1 	bl	800c010 <z_impl_z_current_get>
	thread_set(k_current_get());
 80038ce:	f7ff fde3 	bl	8003498 <thread_set>
 80038d2:	2000      	movs	r0, #0
 80038d4:	f7ff ff46 	bl	8003764 <z_impl_log_process>
		if (log_process(false) == false) {
 80038d8:	2800      	cmp	r0, #0
 80038da:	d1fa      	bne.n	80038d2 <log_process_thread_func+0xe>
	return z_impl_k_sem_take(sem, timeout);
 80038dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038e4:	4801      	ldr	r0, [pc, #4]	; (80038ec <log_process_thread_func+0x28>)
 80038e6:	f007 fe41 	bl	800b56c <z_impl_k_sem_take>
 80038ea:	e7f2      	b.n	80038d2 <log_process_thread_func+0xe>
 80038ec:	20000684 	.word	0x20000684

080038f0 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <log_source_name_get+0x18>)
 80038f2:	4a06      	ldr	r2, [pc, #24]	; (800390c <log_source_name_get+0x1c>)
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 80038fa:	d202      	bcs.n	8003902 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
 80038fc:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 8003900:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 8003902:	2000      	movs	r0, #0
}
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	080119f4 	.word	0x080119f4
 800390c:	08011994 	.word	0x08011994

08003910 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 8003910:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <log_backend_enable+0x20>)
 8003914:	1ac3      	subs	r3, r0, r3
 8003916:	111b      	asrs	r3, r3, #4
 8003918:	3301      	adds	r3, #1
	backend->cb->id = id;
 800391a:	6842      	ldr	r2, [r0, #4]
 800391c:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 800391e:	6843      	ldr	r3, [r0, #4]
 8003920:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8003922:	6843      	ldr	r3, [r0, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 8003928:	f7ff fe46 	bl	80035b8 <z_log_notify_backend_enabled>
}
 800392c:	bd08      	pop	{r3, pc}
 800392e:	bf00      	nop
 8003930:	080119f4 	.word	0x080119f4

08003934 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8003934:	b40e      	push	{r1, r2, r3}
 8003936:	b500      	push	{lr}
 8003938:	b082      	sub	sp, #8
 800393a:	4601      	mov	r1, r0
 800393c:	ab03      	add	r3, sp, #12
 800393e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 8003942:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8003944:	4803      	ldr	r0, [pc, #12]	; (8003954 <print_formatted+0x20>)
 8003946:	f7ff faa9 	bl	8002e9c <cbvprintf>
	va_end(args);

	return length;
}
 800394a:	b002      	add	sp, #8
 800394c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003950:	b003      	add	sp, #12
 8003952:	4770      	bx	lr
 8003954:	0800ecdd 	.word	0x0800ecdd

08003958 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
 8003958:	b530      	push	{r4, r5, lr}
 800395a:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 800395c:	f011 0f44 	tst.w	r1, #68	; 0x44
 8003960:	d005      	beq.n	800396e <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 8003962:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <timestamp_print+0x74>)
 8003964:	681c      	ldr	r4, [r3, #0]
 8003966:	b934      	cbnz	r4, 8003976 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 8003968:	2000      	movs	r0, #0
	}

	return length;
}
 800396a:	b005      	add	sp, #20
 800396c:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
 800396e:	4918      	ldr	r1, [pc, #96]	; (80039d0 <timestamp_print+0x78>)
 8003970:	f7ff ffe0 	bl	8003934 <print_formatted>
 8003974:	e7f9      	b.n	800396a <timestamp_print+0x12>
		timestamp /= timestamp_div;
 8003976:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <timestamp_print+0x7c>)
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 800397e:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
 8003982:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <timestamp_print+0x80>)
 8003984:	fba2 320c 	umull	r3, r2, r2, ip
 8003988:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 800398a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 800398e:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <timestamp_print+0x84>)
 8003994:	fba3 530e 	umull	r5, r3, r3, lr
 8003998:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 800399a:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
 800399e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 80039a2:	fb0c f101 	mul.w	r1, ip, r1
 80039a6:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80039aa:	fb05 1114 	mls	r1, r5, r4, r1
 80039ae:	fb0c f101 	mul.w	r1, ip, r1
 80039b2:	fbb1 f1f4 	udiv	r1, r1, r4
			length = print_formatted(output,
 80039b6:	9102      	str	r1, [sp, #8]
 80039b8:	9501      	str	r5, [sp, #4]
 80039ba:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 80039be:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
 80039c2:	9100      	str	r1, [sp, #0]
 80039c4:	4906      	ldr	r1, [pc, #24]	; (80039e0 <timestamp_print+0x88>)
 80039c6:	f7ff ffb5 	bl	8003934 <print_formatted>
 80039ca:	e7ce      	b.n	800396a <timestamp_print+0x12>
 80039cc:	20000e3c 	.word	0x20000e3c
 80039d0:	08011ec4 	.word	0x08011ec4
 80039d4:	20000e40 	.word	0x20000e40
 80039d8:	91a2b3c5 	.word	0x91a2b3c5
 80039dc:	88888889 	.word	0x88888889
 80039e0:	08011ed0 	.word	0x08011ed0

080039e4 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 80039e4:	b161      	cbz	r1, 8003a00 <color_print+0x1c>
{
 80039e6:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 80039e8:	b12a      	cbz	r2, 80039f6 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 80039ea:	4a06      	ldr	r2, [pc, #24]	; (8003a04 <color_print+0x20>)
 80039ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039f0:	b912      	cbnz	r2, 80039f8 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 80039f2:	4a05      	ldr	r2, [pc, #20]	; (8003a08 <color_print+0x24>)
 80039f4:	e000      	b.n	80039f8 <color_print+0x14>
 80039f6:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
 80039f8:	4904      	ldr	r1, [pc, #16]	; (8003a0c <color_print+0x28>)
 80039fa:	f7ff ff9b 	bl	8003934 <print_formatted>
	}
}
 80039fe:	bd08      	pop	{r3, pc}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	08011f48 	.word	0x08011f48
 8003a08:	08011eec 	.word	0x08011eec
 8003a0c:	08011ef4 	.word	0x08011ef4

08003a10 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8003a10:	f011 0f10 	tst.w	r1, #16
 8003a14:	d10b      	bne.n	8003a2e <newline_print+0x1e>
{
 8003a16:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8003a18:	f011 0f20 	tst.w	r1, #32
 8003a1c:	d003      	beq.n	8003a26 <newline_print+0x16>
		print_formatted(ctx, "\n");
 8003a1e:	4904      	ldr	r1, [pc, #16]	; (8003a30 <newline_print+0x20>)
 8003a20:	f7ff ff88 	bl	8003934 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 8003a24:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 8003a26:	4903      	ldr	r1, [pc, #12]	; (8003a34 <newline_print+0x24>)
 8003a28:	f7ff ff84 	bl	8003934 <print_formatted>
 8003a2c:	e7fa      	b.n	8003a24 <newline_print+0x14>
 8003a2e:	4770      	bx	lr
 8003a30:	08011e68 	.word	0x08011e68
 8003a34:	08011ef8 	.word	0x08011ef8

08003a38 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 8003a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a3c:	4605      	mov	r5, r0
 8003a3e:	460f      	mov	r7, r1
 8003a40:	4616      	mov	r6, r2
 8003a42:	4698      	mov	r8, r3
	newline_print(output, flags);
 8003a44:	9906      	ldr	r1, [sp, #24]
 8003a46:	f7ff ffe3 	bl	8003a10 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 8003a4a:	2400      	movs	r4, #0
 8003a4c:	4544      	cmp	r4, r8
 8003a4e:	da05      	bge.n	8003a5c <hexdump_line_print+0x24>
		print_formatted(output, " ");
 8003a50:	4924      	ldr	r1, [pc, #144]	; (8003ae4 <hexdump_line_print+0xac>)
 8003a52:	4628      	mov	r0, r5
 8003a54:	f7ff ff6e 	bl	8003934 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8003a58:	3401      	adds	r4, #1
 8003a5a:	e7f7      	b.n	8003a4c <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003a5c:	2400      	movs	r4, #0
 8003a5e:	e009      	b.n	8003a74 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 8003a60:	4920      	ldr	r1, [pc, #128]	; (8003ae4 <hexdump_line_print+0xac>)
 8003a62:	4628      	mov	r0, r5
 8003a64:	f7ff ff66 	bl	8003934 <print_formatted>
 8003a68:	e00b      	b.n	8003a82 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 8003a6a:	491f      	ldr	r1, [pc, #124]	; (8003ae8 <hexdump_line_print+0xb0>)
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f7ff ff61 	bl	8003934 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003a72:	3401      	adds	r4, #1
 8003a74:	2c0f      	cmp	r4, #15
 8003a76:	dc0c      	bgt.n	8003a92 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 8003a78:	2c00      	cmp	r4, #0
 8003a7a:	dd02      	ble.n	8003a82 <hexdump_line_print+0x4a>
 8003a7c:	f014 0f07 	tst.w	r4, #7
 8003a80:	d0ee      	beq.n	8003a60 <hexdump_line_print+0x28>
		if (i < length) {
 8003a82:	42b4      	cmp	r4, r6
 8003a84:	d2f1      	bcs.n	8003a6a <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
 8003a86:	5d3a      	ldrb	r2, [r7, r4]
 8003a88:	4918      	ldr	r1, [pc, #96]	; (8003aec <hexdump_line_print+0xb4>)
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	f7ff ff52 	bl	8003934 <print_formatted>
 8003a90:	e7ef      	b.n	8003a72 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
 8003a92:	4917      	ldr	r1, [pc, #92]	; (8003af0 <hexdump_line_print+0xb8>)
 8003a94:	4628      	mov	r0, r5
 8003a96:	f7ff ff4d 	bl	8003934 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003a9a:	2400      	movs	r4, #0
 8003a9c:	e009      	b.n	8003ab2 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 8003a9e:	4911      	ldr	r1, [pc, #68]	; (8003ae4 <hexdump_line_print+0xac>)
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	f7ff ff47 	bl	8003934 <print_formatted>
 8003aa6:	e00b      	b.n	8003ac0 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
 8003aa8:	4912      	ldr	r1, [pc, #72]	; (8003af4 <hexdump_line_print+0xbc>)
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f7ff ff42 	bl	8003934 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003ab0:	3401      	adds	r4, #1
 8003ab2:	2c0f      	cmp	r4, #15
 8003ab4:	dc13      	bgt.n	8003ade <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
 8003ab6:	2c00      	cmp	r4, #0
 8003ab8:	dd02      	ble.n	8003ac0 <hexdump_line_print+0x88>
 8003aba:	f014 0f07 	tst.w	r4, #7
 8003abe:	d0ee      	beq.n	8003a9e <hexdump_line_print+0x66>
		if (i < length) {
 8003ac0:	42b4      	cmp	r4, r6
 8003ac2:	d207      	bcs.n	8003ad4 <hexdump_line_print+0x9c>
			char c = (char)data[i];
 8003ac4:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <hexdump_line_print+0xc0>)
 8003ac8:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
 8003aca:	f013 0f97 	tst.w	r3, #151	; 0x97
 8003ace:	d1eb      	bne.n	8003aa8 <hexdump_line_print+0x70>
 8003ad0:	222e      	movs	r2, #46	; 0x2e
 8003ad2:	e7e9      	b.n	8003aa8 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
 8003ad4:	4903      	ldr	r1, [pc, #12]	; (8003ae4 <hexdump_line_print+0xac>)
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	f7ff ff2c 	bl	8003934 <print_formatted>
 8003adc:	e7e8      	b.n	8003ab0 <hexdump_line_print+0x78>
		}
	}
}
 8003ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ae2:	bf00      	nop
 8003ae4:	08011f20 	.word	0x08011f20
 8003ae8:	08011f04 	.word	0x08011f04
 8003aec:	08011efc 	.word	0x08011efc
 8003af0:	08011f08 	.word	0x08011f08
 8003af4:	08011f0c 	.word	0x08011f0c
 8003af8:	08013491 	.word	0x08013491

08003afc <ids_print>:
{
 8003afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b00:	4680      	mov	r8, r0
 8003b02:	4616      	mov	r6, r2
 8003b04:	461d      	mov	r5, r3
 8003b06:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
 8003b0a:	b959      	cbnz	r1, 8003b24 <ids_print+0x28>
	int total = 0;
 8003b0c:	2400      	movs	r4, #0
	if (source_id >= 0) {
 8003b0e:	2f00      	cmp	r7, #0
 8003b10:	db1c      	blt.n	8003b4c <ids_print+0x50>
		total += print_formatted(output,
 8003b12:	b186      	cbz	r6, 8003b36 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8003b14:	2301      	movs	r3, #1
 8003b16:	9a07      	ldr	r2, [sp, #28]
 8003b18:	4093      	lsls	r3, r2
				(func_on &&
 8003b1a:	f013 0f10 	tst.w	r3, #16
 8003b1e:	d118      	bne.n	8003b52 <ids_print+0x56>
		total += print_formatted(output,
 8003b20:	4e0d      	ldr	r6, [pc, #52]	; (8003b58 <ids_print+0x5c>)
 8003b22:	e009      	b.n	8003b38 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <ids_print+0x60>)
 8003b26:	9a07      	ldr	r2, [sp, #28]
 8003b28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b2c:	490c      	ldr	r1, [pc, #48]	; (8003b60 <ids_print+0x64>)
 8003b2e:	f7ff ff01 	bl	8003934 <print_formatted>
 8003b32:	4604      	mov	r4, r0
 8003b34:	e7eb      	b.n	8003b0e <ids_print+0x12>
		total += print_formatted(output,
 8003b36:	4e08      	ldr	r6, [pc, #32]	; (8003b58 <ids_print+0x5c>)
 8003b38:	4639      	mov	r1, r7
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	f7ff fed8 	bl	80038f0 <log_source_name_get>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4631      	mov	r1, r6
 8003b44:	4640      	mov	r0, r8
 8003b46:	f7ff fef5 	bl	8003934 <print_formatted>
 8003b4a:	4404      	add	r4, r0
}
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
 8003b52:	4e04      	ldr	r6, [pc, #16]	; (8003b64 <ids_print+0x68>)
 8003b54:	e7f0      	b.n	8003b38 <ids_print+0x3c>
 8003b56:	bf00      	nop
 8003b58:	08011f10 	.word	0x08011f10
 8003b5c:	08011f84 	.word	0x08011f84
 8003b60:	08011f1c 	.word	0x08011f1c
 8003b64:	08011f18 	.word	0x08011f18

08003b68 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 8003b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	4605      	mov	r5, r0
 8003b70:	460c      	mov	r4, r1
 8003b72:	4616      	mov	r6, r2
 8003b74:	9303      	str	r3, [sp, #12]
 8003b76:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 8003b7a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8003b7e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8003b82:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
 8003b86:	f00b f85a 	bl	800ec3e <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
 8003b8a:	b1e8      	cbz	r0, 8003bc8 <prefix_print+0x60>
 8003b8c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
 8003b8e:	4913      	ldr	r1, [pc, #76]	; (8003bdc <prefix_print+0x74>)
 8003b90:	4628      	mov	r0, r5
 8003b92:	f7ff fecf 	bl	8003934 <print_formatted>
 8003b96:	4607      	mov	r7, r0
	}

	if (stamp) {
 8003b98:	f1bb 0f00 	cmp.w	fp, #0
 8003b9c:	d116      	bne.n	8003bcc <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
 8003b9e:	4642      	mov	r2, r8
 8003ba0:	4651      	mov	r1, sl
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	f00b f85a 	bl	800ec5c <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
 8003ba8:	f8cd 8004 	str.w	r8, [sp, #4]
 8003bac:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8003bb6:	4632      	mov	r2, r6
 8003bb8:	4649      	mov	r1, r9
 8003bba:	4628      	mov	r0, r5
 8003bbc:	f7ff ff9e 	bl	8003afc <ids_print>
			domain_id, source_id, level);


	return length;
}
 8003bc0:	4438      	add	r0, r7
 8003bc2:	b005      	add	sp, #20
 8003bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
 8003bc8:	2700      	movs	r7, #0
 8003bca:	e7e5      	b.n	8003b98 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
 8003bcc:	9a03      	ldr	r2, [sp, #12]
 8003bce:	4621      	mov	r1, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f7ff fec1 	bl	8003958 <timestamp_print>
 8003bd6:	4407      	add	r7, r0
 8003bd8:	e7e1      	b.n	8003b9e <prefix_print+0x36>
 8003bda:	bf00      	nop
 8003bdc:	08011f24 	.word	0x08011f24

08003be0 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
 8003be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003be4:	b085      	sub	sp, #20
 8003be6:	4606      	mov	r6, r0
 8003be8:	460c      	mov	r4, r1
 8003bea:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
 8003bec:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
 8003bee:	880a      	ldrh	r2, [r1, #0]
 8003bf0:	f3c2 1882 	ubfx	r8, r2, #6, #3
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
 8003bf4:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
 8003bf8:	d035      	beq.n	8003c66 <log_output_msg2_process+0x86>
	return msg->hdr.source;
 8003bfa:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
 8003bfc:	7809      	ldrb	r1, [r1, #0]
 8003bfe:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
 8003c02:	b36a      	cbz	r2, 8003c60 <log_output_msg2_process+0x80>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 8003c04:	4820      	ldr	r0, [pc, #128]	; (8003c88 <log_output_msg2_process+0xa8>)
 8003c06:	1a12      	subs	r2, r2, r0
 8003c08:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
 8003c0c:	9202      	str	r2, [sp, #8]
 8003c0e:	9101      	str	r1, [sp, #4]
 8003c10:	f8cd 8000 	str.w	r8, [sp]
 8003c14:	2200      	movs	r2, #0
 8003c16:	4639      	mov	r1, r7
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f7ff ffa5 	bl	8003b68 <prefix_print>
 8003c1e:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 8003c20:	4625      	mov	r5, r4
 8003c22:	f855 3b0c 	ldr.w	r3, [r5], #12
 8003c26:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
 8003c2a:	b143      	cbz	r3, 8003c3e <log_output_msg2_process+0x5e>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 8003c2c:	f1b8 0f00 	cmp.w	r8, #0
 8003c30:	d11c      	bne.n	8003c6c <log_output_msg2_process+0x8c>
 8003c32:	4816      	ldr	r0, [pc, #88]	; (8003c8c <log_output_msg2_process+0xac>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 8003c34:	462b      	mov	r3, r5
 8003c36:	4632      	mov	r2, r6
 8003c38:	4915      	ldr	r1, [pc, #84]	; (8003c90 <log_output_msg2_process+0xb0>)
 8003c3a:	f00a fcfe 	bl	800e63a <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
 8003c3e:	8862      	ldrh	r2, [r4, #2]
 8003c40:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
 8003c44:	6821      	ldr	r1, [r4, #0]
 8003c46:	f3c1 2149 	ubfx	r1, r1, #9, #10
 8003c4a:	4429      	add	r1, r5
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
 8003c4c:	b982      	cbnz	r2, 8003c70 <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
 8003c4e:	f1b8 0f00 	cmp.w	r8, #0
 8003c52:	d113      	bne.n	8003c7c <log_output_msg2_process+0x9c>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 8003c54:	4630      	mov	r0, r6
 8003c56:	f00b f834 	bl	800ecc2 <log_output_flush>
}
 8003c5a:	b005      	add	sp, #20
 8003c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		int16_t source_id = source ?
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c64:	e7d2      	b.n	8003c0c <log_output_msg2_process+0x2c>
		prefix_offset = 0;
 8003c66:	f04f 0900 	mov.w	r9, #0
 8003c6a:	e7d9      	b.n	8003c20 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 8003c6c:	4809      	ldr	r0, [pc, #36]	; (8003c94 <log_output_msg2_process+0xb4>)
 8003c6e:	e7e1      	b.n	8003c34 <log_output_msg2_process+0x54>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
 8003c70:	9700      	str	r7, [sp, #0]
 8003c72:	464b      	mov	r3, r9
 8003c74:	4630      	mov	r0, r6
 8003c76:	f00b f809 	bl	800ec8c <log_msg2_hexdump>
 8003c7a:	e7e8      	b.n	8003c4e <log_output_msg2_process+0x6e>
		postfix_print(output, flags, level);
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	4639      	mov	r1, r7
 8003c80:	4630      	mov	r0, r6
 8003c82:	f00a fff7 	bl	800ec74 <postfix_print>
 8003c86:	e7e5      	b.n	8003c54 <log_output_msg2_process+0x74>
 8003c88:	08011994 	.word	0x08011994
 8003c8c:	0800ed15 	.word	0x0800ed15
 8003c90:	08002e9d 	.word	0x08002e9d
 8003c94:	0800ecdd 	.word	0x0800ecdd

08003c98 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8003c98:	b570      	push	{r4, r5, r6, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
 8003c9e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8003ca0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003ca4:	428b      	cmp	r3, r1
 8003ca6:	bf28      	it	cs
 8003ca8:	460b      	movcs	r3, r1
 8003caa:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <log_output_dropped_process+0x4c>)
 8003cac:	2105      	movs	r1, #5
 8003cae:	4668      	mov	r0, sp
 8003cb0:	f00a fd18 	bl	800e6e4 <snprintk>
 8003cb4:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
 8003cb6:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	220b      	movs	r2, #11
 8003cbc:	490a      	ldr	r1, [pc, #40]	; (8003ce8 <log_output_dropped_process+0x50>)
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f00a ffbf 	bl	800ec42 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
 8003cc4:	6863      	ldr	r3, [r4, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4632      	mov	r2, r6
 8003cca:	4669      	mov	r1, sp
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f00a ffb8 	bl	800ec42 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
 8003cd2:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	221b      	movs	r2, #27
 8003cd8:	4904      	ldr	r1, [pc, #16]	; (8003cec <log_output_dropped_process+0x54>)
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f00a ffb1 	bl	800ec42 <buffer_write>
}
 8003ce0:	b002      	add	sp, #8
 8003ce2:	bd70      	pop	{r4, r5, r6, pc}
 8003ce4:	08012544 	.word	0x08012544
 8003ce8:	08011f78 	.word	0x08011f78
 8003cec:	08011f5c 	.word	0x08011f5c

08003cf0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 8003cf0:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <log_output_timestamp_freq_set+0x20>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8003cf6:	e004      	b.n	8003d02 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
 8003cf8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8003cfa:	4a05      	ldr	r2, [pc, #20]	; (8003d10 <log_output_timestamp_freq_set+0x20>)
 8003cfc:	6813      	ldr	r3, [r2, #0]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8003d02:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <log_output_timestamp_freq_set+0x24>)
 8003d04:	4298      	cmp	r0, r3
 8003d06:	d8f7      	bhi.n	8003cf8 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <log_output_timestamp_freq_set+0x28>)
 8003d0a:	6018      	str	r0, [r3, #0]
}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000e40 	.word	0x20000e40
 8003d14:	000f4240 	.word	0x000f4240
 8003d18:	20000e3c 	.word	0x20000e3c

08003d1c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	4606      	mov	r6, r0
 8003d20:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
 8003d22:	2400      	movs	r4, #0
 8003d24:	e006      	b.n	8003d34 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <char_out+0x20>)
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
 8003d2c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 8003d32:	3401      	adds	r4, #1
 8003d34:	42ac      	cmp	r4, r5
 8003d36:	d3f6      	bcc.n	8003d26 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
 8003d38:	4628      	mov	r0, r5
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
 8003d3c:	20000e58 	.word	0x20000e58

08003d40 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8003d40:	4b01      	ldr	r3, [pc, #4]	; (8003d48 <log_backend_uart_init+0x8>)
 8003d42:	4a02      	ldr	r2, [pc, #8]	; (8003d4c <log_backend_uart_init+0xc>)
 8003d44:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
 8003d46:	4770      	bx	lr
 8003d48:	20000e58 	.word	0x20000e58
 8003d4c:	08011684 	.word	0x08011684

08003d50 <panic>:

static void panic(struct log_backend const *const backend)
{
 8003d50:	b508      	push	{r3, lr}
	in_panic = true;
 8003d52:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <panic+0x10>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8003d58:	4802      	ldr	r0, [pc, #8]	; (8003d64 <panic+0x14>)
 8003d5a:	f00a ffb2 	bl	800ecc2 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 8003d5e:	bd08      	pop	{r3, pc}
 8003d60:	2000140a 	.word	0x2000140a
 8003d64:	08011fd4 	.word	0x08011fd4

08003d68 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 8003d68:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8003d6a:	4802      	ldr	r0, [pc, #8]	; (8003d74 <dropped+0xc>)
 8003d6c:	f7ff ff94 	bl	8003c98 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
 8003d70:	bd08      	pop	{r3, pc}
 8003d72:	bf00      	nop
 8003d74:	08011fd4 	.word	0x08011fd4

08003d78 <process>:
{
 8003d78:	b508      	push	{r3, lr}
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
 8003d7a:	220f      	movs	r2, #15
 8003d7c:	4801      	ldr	r0, [pc, #4]	; (8003d84 <process+0xc>)
 8003d7e:	f7ff ff2f 	bl	8003be0 <log_output_msg2_process>
}
 8003d82:	bd08      	pop	{r3, pc}
 8003d84:	08011fd4 	.word	0x08011fd4

08003d88 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
 8003d88:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 8003d8a:	4c04      	ldr	r4, [pc, #16]	; (8003d9c <__do_init_array_aux+0x14>)
 8003d8c:	e002      	b.n	8003d94 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 8003d8e:	f854 3b04 	ldr.w	r3, [r4], #4
 8003d92:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 8003d94:	4b02      	ldr	r3, [pc, #8]	; (8003da0 <__do_init_array_aux+0x18>)
 8003d96:	429c      	cmp	r4, r3
 8003d98:	d3f9      	bcc.n	8003d8e <__do_init_array_aux+0x6>
	}
}
 8003d9a:	bd10      	pop	{r4, pc}
 8003d9c:	08011994 	.word	0x08011994
 8003da0:	08011994 	.word	0x08011994

08003da4 <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <__do_global_ctors_aux+0x1c>)
 8003da6:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 8003da8:	b14b      	cbz	r3, 8003dbe <__do_global_ctors_aux+0x1a>
{
 8003daa:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 8003dac:	1e5c      	subs	r4, r3, #1
 8003dae:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <__do_global_ctors_aux+0x1c>)
 8003db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db4:	4798      	blx	r3
 8003db6:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 8003db8:	2c00      	cmp	r4, #0
 8003dba:	d1f7      	bne.n	8003dac <__do_global_ctors_aux+0x8>
	}
}
 8003dbc:	bd10      	pop	{r4, pc}
 8003dbe:	4770      	bx	lr
 8003dc0:	0801198c 	.word	0x0801198c

08003dc4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8003dc4:	4901      	ldr	r1, [pc, #4]	; (8003dcc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8003dc6:	2210      	movs	r2, #16
	str	r2, [r1]
 8003dc8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8003dca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8003dcc:	e000ed10 	.word	0xe000ed10

08003dd0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8003dd0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8003dd2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8003dd4:	f380 8811 	msr	BASEPRI, r0
	isb
 8003dd8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8003ddc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8003de0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8003de2:	b662      	cpsie	i
	isb
 8003de4:	f3bf 8f6f 	isb	sy

	bx	lr
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop

08003dec <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
 8003dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df0:	b096      	sub	sp, #88	; 0x58
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8003df6:	2301      	movs	r3, #1
 8003df8:	813b      	strh	r3, [r7, #8]
 8003dfa:	466c      	mov	r4, sp
 8003dfc:	b088      	sub	sp, #32
 8003dfe:	466b      	mov	r3, sp
 8003e00:	f113 020c 	adds.w	r2, r3, #12
 8003e04:	f000 80ca 	beq.w	8003f9c <esf_dump+0x1b0>
 8003e08:	2114      	movs	r1, #20
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	8138      	strh	r0, [r7, #8]
 8003e0e:	b11a      	cbz	r2, 8003e18 <esf_dump+0x2c>
 8003e10:	2904      	cmp	r1, #4
 8003e12:	dd01      	ble.n	8003e18 <esf_dump+0x2c>
 8003e14:	4867      	ldr	r0, [pc, #412]	; (8003fb4 <esf_dump+0x1c8>)
 8003e16:	6118      	str	r0, [r3, #16]
 8003e18:	6828      	ldr	r0, [r5, #0]
 8003e1a:	b112      	cbz	r2, 8003e22 <esf_dump+0x36>
 8003e1c:	2908      	cmp	r1, #8
 8003e1e:	dd00      	ble.n	8003e22 <esf_dump+0x36>
 8003e20:	6158      	str	r0, [r3, #20]
 8003e22:	6868      	ldr	r0, [r5, #4]
 8003e24:	b112      	cbz	r2, 8003e2c <esf_dump+0x40>
 8003e26:	290c      	cmp	r1, #12
 8003e28:	dd00      	ble.n	8003e2c <esf_dump+0x40>
 8003e2a:	6198      	str	r0, [r3, #24]
 8003e2c:	68a8      	ldr	r0, [r5, #8]
 8003e2e:	b112      	cbz	r2, 8003e36 <esf_dump+0x4a>
 8003e30:	2910      	cmp	r1, #16
 8003e32:	dd00      	ble.n	8003e36 <esf_dump+0x4a>
 8003e34:	61d8      	str	r0, [r3, #28]
 8003e36:	2913      	cmp	r1, #19
 8003e38:	f340 80b3 	ble.w	8003fa2 <esf_dump+0x1b6>
 8003e3c:	2014      	movs	r0, #20
 8003e3e:	b12a      	cbz	r2, 8003e4c <esf_dump+0x60>
 8003e40:	2100      	movs	r1, #0
 8003e42:	6079      	str	r1, [r7, #4]
 8003e44:	2105      	movs	r1, #5
 8003e46:	7139      	strb	r1, [r7, #4]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	60d9      	str	r1, [r3, #12]
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	f36f 0100 	bfc	r1, #0, #1
 8003e52:	f36f 0141 	bfc	r1, #1, #1
 8003e56:	f36f 0182 	bfc	r1, #2, #1
 8003e5a:	f36f 01c5 	bfc	r1, #3, #3
 8003e5e:	2601      	movs	r6, #1
 8003e60:	f366 1188 	bfi	r1, r6, #6, #3
 8003e64:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8003e68:	f363 2152 	bfi	r1, r3, #9, #10
 8003e6c:	f36f 41de 	bfc	r1, #19, #12
 8003e70:	f36f 71df 	bfc	r1, #31, #1
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8003e74:	2300      	movs	r3, #0
 8003e76:	4850      	ldr	r0, [pc, #320]	; (8003fb8 <esf_dump+0x1cc>)
 8003e78:	f00a ff73 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8003e7c:	46a5      	mov	sp, r4
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8003e7e:	813e      	strh	r6, [r7, #8]
 8003e80:	466c      	mov	r4, sp
 8003e82:	b088      	sub	sp, #32
 8003e84:	466b      	mov	r3, sp
 8003e86:	f113 020c 	adds.w	r2, r3, #12
 8003e8a:	f000 808d 	beq.w	8003fa8 <esf_dump+0x1bc>
 8003e8e:	2114      	movs	r1, #20
 8003e90:	2001      	movs	r0, #1
 8003e92:	8138      	strh	r0, [r7, #8]
 8003e94:	b11a      	cbz	r2, 8003e9e <esf_dump+0xb2>
 8003e96:	2904      	cmp	r1, #4
 8003e98:	dd01      	ble.n	8003e9e <esf_dump+0xb2>
 8003e9a:	4848      	ldr	r0, [pc, #288]	; (8003fbc <esf_dump+0x1d0>)
 8003e9c:	6118      	str	r0, [r3, #16]
 8003e9e:	68e8      	ldr	r0, [r5, #12]
 8003ea0:	b112      	cbz	r2, 8003ea8 <esf_dump+0xbc>
 8003ea2:	2908      	cmp	r1, #8
 8003ea4:	dd00      	ble.n	8003ea8 <esf_dump+0xbc>
 8003ea6:	6158      	str	r0, [r3, #20]
 8003ea8:	6928      	ldr	r0, [r5, #16]
 8003eaa:	b112      	cbz	r2, 8003eb2 <esf_dump+0xc6>
 8003eac:	290c      	cmp	r1, #12
 8003eae:	dd00      	ble.n	8003eb2 <esf_dump+0xc6>
 8003eb0:	6198      	str	r0, [r3, #24]
 8003eb2:	6968      	ldr	r0, [r5, #20]
 8003eb4:	b112      	cbz	r2, 8003ebc <esf_dump+0xd0>
 8003eb6:	2910      	cmp	r1, #16
 8003eb8:	dd00      	ble.n	8003ebc <esf_dump+0xd0>
 8003eba:	61d8      	str	r0, [r3, #28]
 8003ebc:	2913      	cmp	r1, #19
 8003ebe:	dd76      	ble.n	8003fae <esf_dump+0x1c2>
 8003ec0:	2014      	movs	r0, #20
 8003ec2:	b12a      	cbz	r2, 8003ed0 <esf_dump+0xe4>
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	6079      	str	r1, [r7, #4]
 8003ec8:	2105      	movs	r1, #5
 8003eca:	7139      	strb	r1, [r7, #4]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	60d9      	str	r1, [r3, #12]
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	f36f 0100 	bfc	r1, #0, #1
 8003ed6:	f36f 0141 	bfc	r1, #1, #1
 8003eda:	f36f 0182 	bfc	r1, #2, #1
 8003ede:	f36f 01c5 	bfc	r1, #3, #3
 8003ee2:	2601      	movs	r6, #1
 8003ee4:	f366 1188 	bfi	r1, r6, #6, #3
 8003ee8:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8003eec:	f363 2152 	bfi	r1, r3, #9, #10
 8003ef0:	f36f 41de 	bfc	r1, #19, #12
 8003ef4:	f36f 71df 	bfc	r1, #31, #1
 8003ef8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8003fb8 <esf_dump+0x1cc>
 8003efc:	2300      	movs	r3, #0
 8003efe:	4640      	mov	r0, r8
 8003f00:	f00a ff2f 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8003f04:	46a5      	mov	sp, r4
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8003f06:	813e      	strh	r6, [r7, #8]
 8003f08:	69eb      	ldr	r3, [r5, #28]
 8003f0a:	4a2d      	ldr	r2, [pc, #180]	; (8003fc0 <esf_dump+0x1d4>)
 8003f0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f10:	2400      	movs	r4, #0
 8003f12:	607c      	str	r4, [r7, #4]
 8003f14:	f04f 0a03 	mov.w	sl, #3
 8003f18:	f887 a004 	strb.w	sl, [r7, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f20:	4621      	mov	r1, r4
 8003f22:	f364 0100 	bfi	r1, r4, #0, #1
 8003f26:	f364 0141 	bfi	r1, r4, #1, #1
 8003f2a:	f364 0182 	bfi	r1, r4, #2, #1
 8003f2e:	f364 01c5 	bfi	r1, r4, #3, #3
 8003f32:	f366 1188 	bfi	r1, r6, #6, #3
 8003f36:	f04f 090c 	mov.w	r9, #12
 8003f3a:	f369 2152 	bfi	r1, r9, #9, #10
 8003f3e:	f364 41de 	bfi	r1, r4, #19, #12
 8003f42:	f364 71df 	bfi	r1, r4, #31, #1
 8003f46:	4623      	mov	r3, r4
 8003f48:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f4c:	4640      	mov	r0, r8
 8003f4e:	f00a ff08 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8003f52:	813e      	strh	r6, [r7, #8]
 8003f54:	69ab      	ldr	r3, [r5, #24]
 8003f56:	4a1b      	ldr	r2, [pc, #108]	; (8003fc4 <esf_dump+0x1d8>)
 8003f58:	653a      	str	r2, [r7, #80]	; 0x50
 8003f5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f5c:	607c      	str	r4, [r7, #4]
 8003f5e:	f887 a004 	strb.w	sl, [r7, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f66:	4621      	mov	r1, r4
 8003f68:	f364 0100 	bfi	r1, r4, #0, #1
 8003f6c:	f364 0141 	bfi	r1, r4, #1, #1
 8003f70:	f364 0182 	bfi	r1, r4, #2, #1
 8003f74:	f364 01c5 	bfi	r1, r4, #3, #3
 8003f78:	f366 1188 	bfi	r1, r6, #6, #3
 8003f7c:	f369 2152 	bfi	r1, r9, #9, #10
 8003f80:	f364 41de 	bfi	r1, r4, #19, #12
 8003f84:	f364 71df 	bfi	r1, r4, #31, #1
 8003f88:	4623      	mov	r3, r4
 8003f8a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003f8e:	4640      	mov	r0, r8
 8003f90:	f00a fee7 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		esf->basic.pc);
}
 8003f94:	3758      	adds	r7, #88	; 0x58
 8003f96:	46bd      	mov	sp, r7
 8003f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8003f9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fa0:	e733      	b.n	8003e0a <esf_dump+0x1e>
 8003fa2:	f06f 001b 	mvn.w	r0, #27
 8003fa6:	e74a      	b.n	8003e3e <esf_dump+0x52>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8003fa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fac:	e770      	b.n	8003e90 <esf_dump+0xa4>
 8003fae:	f06f 001b 	mvn.w	r0, #27
 8003fb2:	e786      	b.n	8003ec2 <esf_dump+0xd6>
 8003fb4:	08011fe4 	.word	0x08011fe4
 8003fb8:	080119bc 	.word	0x080119bc
 8003fbc:	08012014 	.word	0x08012014
 8003fc0:	08012044 	.word	0x08012044
 8003fc4:	08012054 	.word	0x08012054

08003fc8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003fc8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	db07      	blt.n	8003fde <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fce:	f000 021f 	and.w	r2, r0, #31
 8003fd2:	0940      	lsrs	r0, r0, #5
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4093      	lsls	r3, r2
 8003fd8:	4a01      	ldr	r2, [pc, #4]	; (8003fe0 <arch_irq_enable+0x18>)
 8003fda:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8003fde:	4770      	bx	lr
 8003fe0:	e000e100 	.word	0xe000e100

08003fe4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 8003fe4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	db0c      	blt.n	8004004 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fea:	f000 021f 	and.w	r2, r0, #31
 8003fee:	0940      	lsrs	r0, r0, #5
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	4093      	lsls	r3, r2
 8003ff4:	3020      	adds	r0, #32
 8003ff6:	4a04      	ldr	r2, [pc, #16]	; (8004008 <arch_irq_disable+0x24>)
 8003ff8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ffc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004000:	f3bf 8f6f 	isb	sy
}
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	e000e100 	.word	0xe000e100

0800400c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 800400c:	0942      	lsrs	r2, r0, #5
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <arch_irq_is_enabled+0x18>)
 8004010:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004014:	f000 001f 	and.w	r0, r0, #31
 8004018:	2301      	movs	r3, #1
 800401a:	fa03 f000 	lsl.w	r0, r3, r0
}
 800401e:	4010      	ands	r0, r2
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000e100 	.word	0xe000e100

08004028 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8004028:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 800402a:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800402c:	2800      	cmp	r0, #0
 800402e:	db08      	blt.n	8004042 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004030:	0109      	lsls	r1, r1, #4
 8004032:	b2c9      	uxtb	r1, r1
 8004034:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004038:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800403c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8004040:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004042:	f000 000f 	and.w	r0, r0, #15
 8004046:	0109      	lsls	r1, r1, #4
 8004048:	b2c9      	uxtb	r1, r1
 800404a:	4b01      	ldr	r3, [pc, #4]	; (8004050 <z_arm_irq_priority_set+0x28>)
 800404c:	5419      	strb	r1, [r3, r0]
}
 800404e:	4770      	bx	lr
 8004050:	e000ed14 	.word	0xe000ed14

08004054 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8004054:	bf30      	wfi
    b z_SysNmiOnReset
 8004056:	f7ff bffd 	b.w	8004054 <z_SysNmiOnReset>
 800405a:	bf00      	nop

0800405c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 800405c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <z_arm_prep_c+0x40>)
 8004060:	4a0f      	ldr	r2, [pc, #60]	; (80040a0 <z_arm_prep_c+0x44>)
 8004062:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004066:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8004068:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800406c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8004070:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004074:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800407c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8004080:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8004084:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8004088:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 800408c:	f007 f898 	bl	800b1c0 <z_bss_zero>
	z_data_copy();
 8004090:	f008 f810 	bl	800c0b4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8004094:	f000 feae 	bl	8004df4 <z_arm_interrupt_init>
	z_cstart();
 8004098:	f007 f89e 	bl	800b1d8 <z_cstart>
 800409c:	e000ed00 	.word	0xe000ed00
 80040a0:	08000000 	.word	0x08000000

080040a4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 80040a4:	4a09      	ldr	r2, [pc, #36]	; (80040cc <arch_swap+0x28>)
 80040a6:	6893      	ldr	r3, [r2, #8]
 80040a8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 80040aa:	4909      	ldr	r1, [pc, #36]	; (80040d0 <arch_swap+0x2c>)
 80040ac:	6809      	ldr	r1, [r1, #0]
 80040ae:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80040b0:	4908      	ldr	r1, [pc, #32]	; (80040d4 <arch_swap+0x30>)
 80040b2:	684b      	ldr	r3, [r1, #4]
 80040b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b8:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
 80040ba:	2300      	movs	r3, #0
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 80040c4:	6893      	ldr	r3, [r2, #8]
}
 80040c6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	200013ac 	.word	0x200013ac
 80040d0:	080132e0 	.word	0x080132e0
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 80040d8:	4912      	ldr	r1, [pc, #72]	; (8004124 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 80040da:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 80040dc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 80040e0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 80040e2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 80040e6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80040ea:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 80040ec:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 80040f0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 80040f4:	4f0c      	ldr	r7, [pc, #48]	; (8004128 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 80040f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 80040fa:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 80040fc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 80040fe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8004100:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8004102:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8004104:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8004106:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 800410a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 800410c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 800410e:	f000 fec5 	bl	8004e9c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8004112:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8004116:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 800411a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 800411e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8004122:	4770      	bx	lr
    ldr r1, =_kernel
 8004124:	200013ac 	.word	0x200013ac
    ldr v4, =_SCS_ICSR
 8004128:	e000ed04 	.word	0xe000ed04

0800412c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 800412c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8004130:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8004132:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8004136:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 800413a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 800413c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8004140:	2902      	cmp	r1, #2
    beq _oops
 8004142:	d0ff      	beq.n	8004144 <_oops>

08004144 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8004144:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8004146:	f00a fe85 	bl	800ee54 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 800414a:	bd01      	pop	{r0, pc}

0800414c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 800414c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 800414e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 8004152:	490d      	ldr	r1, [pc, #52]	; (8004188 <arch_new_thread+0x3c>)
 8004154:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8004158:	f021 0101 	bic.w	r1, r1, #1
 800415c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 8004160:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8004164:	9b01      	ldr	r3, [sp, #4]
 8004166:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 800416a:	9b02      	ldr	r3, [sp, #8]
 800416c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8004170:	9b03      	ldr	r3, [sp, #12]
 8004172:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8004176:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800417a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 800417e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8004184:	bc10      	pop	{r4}
 8004186:	4770      	bx	lr
 8004188:	0800e701 	.word	0x0800e701

0800418c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <z_check_thread_stack_fail+0x48>)
 800418e:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 8004190:	b1ea      	cbz	r2, 80041ce <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8004192:	f110 0f16 	cmn.w	r0, #22
 8004196:	d010      	beq.n	80041ba <z_check_thread_stack_fail+0x2e>
 8004198:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800419a:	f1a3 0c20 	sub.w	ip, r3, #32
 800419e:	4584      	cmp	ip, r0
 80041a0:	d805      	bhi.n	80041ae <z_check_thread_stack_fail+0x22>
 80041a2:	4283      	cmp	r3, r0
 80041a4:	d905      	bls.n	80041b2 <z_check_thread_stack_fail+0x26>
 80041a6:	428b      	cmp	r3, r1
 80041a8:	d805      	bhi.n	80041b6 <z_check_thread_stack_fail+0x2a>
 80041aa:	2100      	movs	r1, #0
 80041ac:	e00a      	b.n	80041c4 <z_check_thread_stack_fail+0x38>
 80041ae:	2100      	movs	r1, #0
 80041b0:	e008      	b.n	80041c4 <z_check_thread_stack_fail+0x38>
 80041b2:	2100      	movs	r1, #0
 80041b4:	e006      	b.n	80041c4 <z_check_thread_stack_fail+0x38>
 80041b6:	2101      	movs	r1, #1
 80041b8:	e004      	b.n	80041c4 <z_check_thread_stack_fail+0x38>
 80041ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80041bc:	428b      	cmp	r3, r1
 80041be:	bf94      	ite	ls
 80041c0:	2100      	movls	r1, #0
 80041c2:	2101      	movhi	r1, #1
 80041c4:	b909      	cbnz	r1, 80041ca <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 80041c6:	2000      	movs	r0, #0
}
 80041c8:	4770      	bx	lr
		return thread->stack_info.start;
 80041ca:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80041cc:	4770      	bx	lr
		return 0;
 80041ce:	2000      	movs	r0, #0
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	200013ac 	.word	0x200013ac

080041d8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 80041d8:	b508      	push	{r3, lr}
 80041da:	460d      	mov	r5, r1
 80041dc:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80041de:	4b08      	ldr	r3, [pc, #32]	; (8004200 <arch_switch_to_main_thread+0x28>)
 80041e0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80041e2:	f000 fe5b 	bl	8004e9c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80041e6:	4620      	mov	r0, r4
 80041e8:	f385 8809 	msr	PSP, r5
 80041ec:	2100      	movs	r1, #0
 80041ee:	b663      	cpsie	if
 80041f0:	f381 8811 	msr	BASEPRI, r1
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	2200      	movs	r2, #0
 80041fa:	2300      	movs	r3, #0
 80041fc:	f00a fa80 	bl	800e700 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8004200:	200013ac 	.word	0x200013ac

08004204 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8004204:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8004206:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 800420a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 800420e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8004212:	4904      	ldr	r1, [pc, #16]	; (8004224 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8004214:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8004216:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8004218:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 800421a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 800421e:	4902      	ldr	r1, [pc, #8]	; (8004228 <_isr_wrapper+0x24>)
	bx r1
 8004220:	4708      	bx	r1
 8004222:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8004224:	080116e4 	.word	0x080116e4
	ldr r1, =z_arm_int_exit
 8004228:	0800422d 	.word	0x0800422d

0800422c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800422e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8004230:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8004232:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8004234:	d003      	beq.n	800423e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8004236:	4903      	ldr	r1, [pc, #12]	; (8004244 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8004238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 800423c:	600a      	str	r2, [r1, #0]

0800423e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800423e:	4770      	bx	lr
	ldr r3, =_kernel
 8004240:	200013ac 	.word	0x200013ac
	ldr r1, =_SCS_ICSR
 8004244:	e000ed04 	.word	0xe000ed04

08004248 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 8004248:	b500      	push	{lr}
 800424a:	b085      	sub	sp, #20
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 800424c:	290f      	cmp	r1, #15
 800424e:	dc0f      	bgt.n	8004270 <reserved_exception+0x28>
 8004250:	4b08      	ldr	r3, [pc, #32]	; (8004274 <reserved_exception+0x2c>)
 8004252:	3910      	subs	r1, #16
 8004254:	9103      	str	r1, [sp, #12]
 8004256:	9302      	str	r3, [sp, #8]
 8004258:	4b07      	ldr	r3, [pc, #28]	; (8004278 <reserved_exception+0x30>)
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	2000      	movs	r0, #0
 800425e:	9000      	str	r0, [sp, #0]
 8004260:	4603      	mov	r3, r0
 8004262:	2201      	movs	r2, #1
 8004264:	4905      	ldr	r1, [pc, #20]	; (800427c <reserved_exception+0x34>)
 8004266:	f00a fe09 	bl	800ee7c <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 800426a:	b005      	add	sp, #20
 800426c:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
 8004270:	4b03      	ldr	r3, [pc, #12]	; (8004280 <reserved_exception+0x38>)
 8004272:	e7ee      	b.n	8004252 <reserved_exception+0xa>
 8004274:	080120a0 	.word	0x080120a0
 8004278:	080120b8 	.word	0x080120b8
 800427c:	080119bc 	.word	0x080119bc
 8004280:	08012084 	.word	0x08012084

08004284 <bus_fault>:
{
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	b0ba      	sub	sp, #232	; 0xe8
 8004288:	4605      	mov	r5, r0
 800428a:	460e      	mov	r6, r1
 800428c:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
 800428e:	2201      	movs	r2, #1
 8004290:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004294:	4ba8      	ldr	r3, [pc, #672]	; (8004538 <bus_fault+0x2b4>)
 8004296:	930e      	str	r3, [sp, #56]	; 0x38
 8004298:	2300      	movs	r3, #0
 800429a:	9301      	str	r3, [sp, #4]
 800429c:	2102      	movs	r1, #2
 800429e:	f88d 1004 	strb.w	r1, [sp, #4]
 80042a2:	9901      	ldr	r1, [sp, #4]
 80042a4:	910d      	str	r1, [sp, #52]	; 0x34
 80042a6:	4619      	mov	r1, r3
 80042a8:	f363 0100 	bfi	r1, r3, #0, #1
 80042ac:	f363 0141 	bfi	r1, r3, #1, #1
 80042b0:	f363 0182 	bfi	r1, r3, #2, #1
 80042b4:	f363 01c5 	bfi	r1, r3, #3, #3
 80042b8:	f362 1188 	bfi	r1, r2, #6, #3
 80042bc:	2208      	movs	r2, #8
 80042be:	f362 2152 	bfi	r1, r2, #9, #10
 80042c2:	f363 41de 	bfi	r1, r3, #19, #12
 80042c6:	f363 71df 	bfi	r1, r3, #31, #1
 80042ca:	aa0d      	add	r2, sp, #52	; 0x34
 80042cc:	489b      	ldr	r0, [pc, #620]	; (800453c <bus_fault+0x2b8>)
 80042ce:	f00a fd48 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80042d2:	4b9b      	ldr	r3, [pc, #620]	; (8004540 <bus_fault+0x2bc>)
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80042da:	d128      	bne.n	800432e <bus_fault+0xaa>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80042dc:	4b98      	ldr	r3, [pc, #608]	; (8004540 <bus_fault+0x2bc>)
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80042e4:	d146      	bne.n	8004374 <bus_fault+0xf0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80042e6:	4b96      	ldr	r3, [pc, #600]	; (8004540 <bus_fault+0x2bc>)
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	f413 7f00 	tst.w	r3, #512	; 0x200
 80042ee:	d164      	bne.n	80043ba <bus_fault+0x136>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80042f0:	4b93      	ldr	r3, [pc, #588]	; (8004540 <bus_fault+0x2bc>)
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80042f8:	f040 80b4 	bne.w	8004464 <bus_fault+0x1e0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80042fc:	4b90      	ldr	r3, [pc, #576]	; (8004540 <bus_fault+0x2bc>)
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004304:	f040 80d1 	bne.w	80044aa <bus_fault+0x226>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8004308:	4b8d      	ldr	r3, [pc, #564]	; (8004540 <bus_fault+0x2bc>)
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004310:	f040 80ee 	bne.w	80044f0 <bus_fault+0x26c>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004314:	4a8a      	ldr	r2, [pc, #552]	; (8004540 <bus_fault+0x2bc>)
 8004316:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004318:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800431c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800431e:	2101      	movs	r1, #1
 8004320:	4628      	mov	r0, r5
 8004322:	f00a fda9 	bl	800ee78 <memory_fault_recoverable>
 8004326:	7020      	strb	r0, [r4, #0]
}
 8004328:	2000      	movs	r0, #0
 800432a:	b03a      	add	sp, #232	; 0xe8
 800432c:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
 800432e:	2201      	movs	r2, #1
 8004330:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004334:	4b83      	ldr	r3, [pc, #524]	; (8004544 <bus_fault+0x2c0>)
 8004336:	9314      	str	r3, [sp, #80]	; 0x50
 8004338:	2300      	movs	r3, #0
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	2102      	movs	r1, #2
 800433e:	f88d 1004 	strb.w	r1, [sp, #4]
 8004342:	9901      	ldr	r1, [sp, #4]
 8004344:	9113      	str	r1, [sp, #76]	; 0x4c
 8004346:	4619      	mov	r1, r3
 8004348:	f363 0100 	bfi	r1, r3, #0, #1
 800434c:	f363 0141 	bfi	r1, r3, #1, #1
 8004350:	f363 0182 	bfi	r1, r3, #2, #1
 8004354:	f363 01c5 	bfi	r1, r3, #3, #3
 8004358:	f362 1188 	bfi	r1, r2, #6, #3
 800435c:	2208      	movs	r2, #8
 800435e:	f362 2152 	bfi	r1, r2, #9, #10
 8004362:	f363 41de 	bfi	r1, r3, #19, #12
 8004366:	f363 71df 	bfi	r1, r3, #31, #1
 800436a:	aa13      	add	r2, sp, #76	; 0x4c
 800436c:	4873      	ldr	r0, [pc, #460]	; (800453c <bus_fault+0x2b8>)
 800436e:	f00a fcf8 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8004372:	e7b3      	b.n	80042dc <bus_fault+0x58>
		PR_FAULT_INFO("  Unstacking error");
 8004374:	2201      	movs	r2, #1
 8004376:	f8ad 2008 	strh.w	r2, [sp, #8]
 800437a:	4b73      	ldr	r3, [pc, #460]	; (8004548 <bus_fault+0x2c4>)
 800437c:	931a      	str	r3, [sp, #104]	; 0x68
 800437e:	2300      	movs	r3, #0
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	2102      	movs	r1, #2
 8004384:	f88d 1004 	strb.w	r1, [sp, #4]
 8004388:	9901      	ldr	r1, [sp, #4]
 800438a:	9119      	str	r1, [sp, #100]	; 0x64
 800438c:	4619      	mov	r1, r3
 800438e:	f363 0100 	bfi	r1, r3, #0, #1
 8004392:	f363 0141 	bfi	r1, r3, #1, #1
 8004396:	f363 0182 	bfi	r1, r3, #2, #1
 800439a:	f363 01c5 	bfi	r1, r3, #3, #3
 800439e:	f362 1188 	bfi	r1, r2, #6, #3
 80043a2:	2208      	movs	r2, #8
 80043a4:	f362 2152 	bfi	r1, r2, #9, #10
 80043a8:	f363 41de 	bfi	r1, r3, #19, #12
 80043ac:	f363 71df 	bfi	r1, r3, #31, #1
 80043b0:	aa19      	add	r2, sp, #100	; 0x64
 80043b2:	4862      	ldr	r0, [pc, #392]	; (800453c <bus_fault+0x2b8>)
 80043b4:	f00a fcd5 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 80043b8:	e795      	b.n	80042e6 <bus_fault+0x62>
		PR_FAULT_INFO("  Precise data bus error");
 80043ba:	2201      	movs	r2, #1
 80043bc:	f8ad 2008 	strh.w	r2, [sp, #8]
 80043c0:	4b62      	ldr	r3, [pc, #392]	; (800454c <bus_fault+0x2c8>)
 80043c2:	9320      	str	r3, [sp, #128]	; 0x80
 80043c4:	2300      	movs	r3, #0
 80043c6:	9301      	str	r3, [sp, #4]
 80043c8:	2102      	movs	r1, #2
 80043ca:	f88d 1004 	strb.w	r1, [sp, #4]
 80043ce:	9901      	ldr	r1, [sp, #4]
 80043d0:	911f      	str	r1, [sp, #124]	; 0x7c
 80043d2:	4619      	mov	r1, r3
 80043d4:	f363 0100 	bfi	r1, r3, #0, #1
 80043d8:	f363 0141 	bfi	r1, r3, #1, #1
 80043dc:	f363 0182 	bfi	r1, r3, #2, #1
 80043e0:	f363 01c5 	bfi	r1, r3, #3, #3
 80043e4:	f362 1188 	bfi	r1, r2, #6, #3
 80043e8:	2208      	movs	r2, #8
 80043ea:	f362 2152 	bfi	r1, r2, #9, #10
 80043ee:	f363 41de 	bfi	r1, r3, #19, #12
 80043f2:	f363 71df 	bfi	r1, r3, #31, #1
 80043f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80043f8:	4850      	ldr	r0, [pc, #320]	; (800453c <bus_fault+0x2b8>)
 80043fa:	f00a fcb2 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
 80043fe:	4b50      	ldr	r3, [pc, #320]	; (8004540 <bus_fault+0x2bc>)
 8004400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004408:	f43f af72 	beq.w	80042f0 <bus_fault+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 800440c:	2001      	movs	r0, #1
 800440e:	f8ad 0008 	strh.w	r0, [sp, #8]
 8004412:	4b4f      	ldr	r3, [pc, #316]	; (8004550 <bus_fault+0x2cc>)
 8004414:	9326      	str	r3, [sp, #152]	; 0x98
 8004416:	9227      	str	r2, [sp, #156]	; 0x9c
 8004418:	2300      	movs	r3, #0
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	2203      	movs	r2, #3
 800441e:	f88d 2004 	strb.w	r2, [sp, #4]
 8004422:	9a01      	ldr	r2, [sp, #4]
 8004424:	9225      	str	r2, [sp, #148]	; 0x94
 8004426:	4619      	mov	r1, r3
 8004428:	f363 0100 	bfi	r1, r3, #0, #1
 800442c:	f363 0141 	bfi	r1, r3, #1, #1
 8004430:	f363 0182 	bfi	r1, r3, #2, #1
 8004434:	f363 01c5 	bfi	r1, r3, #3, #3
 8004438:	f360 1188 	bfi	r1, r0, #6, #3
 800443c:	220c      	movs	r2, #12
 800443e:	f362 2152 	bfi	r1, r2, #9, #10
 8004442:	f363 41de 	bfi	r1, r3, #19, #12
 8004446:	f363 71df 	bfi	r1, r3, #31, #1
 800444a:	aa25      	add	r2, sp, #148	; 0x94
 800444c:	483b      	ldr	r0, [pc, #236]	; (800453c <bus_fault+0x2b8>)
 800444e:	f00a fc88 	bl	800ed62 <z_impl_z_log_msg2_static_create>
			if (from_hard_fault != 0) {
 8004452:	2e00      	cmp	r6, #0
 8004454:	f43f af4c 	beq.w	80042f0 <bus_fault+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8004458:	4a39      	ldr	r2, [pc, #228]	; (8004540 <bus_fault+0x2bc>)
 800445a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800445c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004460:	6293      	str	r3, [r2, #40]	; 0x28
 8004462:	e745      	b.n	80042f0 <bus_fault+0x6c>
		PR_FAULT_INFO("  Imprecise data bus error");
 8004464:	2201      	movs	r2, #1
 8004466:	f8ad 2008 	strh.w	r2, [sp, #8]
 800446a:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <bus_fault+0x2d0>)
 800446c:	932c      	str	r3, [sp, #176]	; 0xb0
 800446e:	2300      	movs	r3, #0
 8004470:	9301      	str	r3, [sp, #4]
 8004472:	2102      	movs	r1, #2
 8004474:	f88d 1004 	strb.w	r1, [sp, #4]
 8004478:	9901      	ldr	r1, [sp, #4]
 800447a:	912b      	str	r1, [sp, #172]	; 0xac
 800447c:	4619      	mov	r1, r3
 800447e:	f363 0100 	bfi	r1, r3, #0, #1
 8004482:	f363 0141 	bfi	r1, r3, #1, #1
 8004486:	f363 0182 	bfi	r1, r3, #2, #1
 800448a:	f363 01c5 	bfi	r1, r3, #3, #3
 800448e:	f362 1188 	bfi	r1, r2, #6, #3
 8004492:	2208      	movs	r2, #8
 8004494:	f362 2152 	bfi	r1, r2, #9, #10
 8004498:	f363 41de 	bfi	r1, r3, #19, #12
 800449c:	f363 71df 	bfi	r1, r3, #31, #1
 80044a0:	aa2b      	add	r2, sp, #172	; 0xac
 80044a2:	4826      	ldr	r0, [pc, #152]	; (800453c <bus_fault+0x2b8>)
 80044a4:	f00a fc5d 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 80044a8:	e728      	b.n	80042fc <bus_fault+0x78>
		PR_FAULT_INFO("  Instruction bus error");
 80044aa:	2201      	movs	r2, #1
 80044ac:	f8ad 2008 	strh.w	r2, [sp, #8]
 80044b0:	4b29      	ldr	r3, [pc, #164]	; (8004558 <bus_fault+0x2d4>)
 80044b2:	9338      	str	r3, [sp, #224]	; 0xe0
 80044b4:	2300      	movs	r3, #0
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	2102      	movs	r1, #2
 80044ba:	f88d 1004 	strb.w	r1, [sp, #4]
 80044be:	9901      	ldr	r1, [sp, #4]
 80044c0:	9137      	str	r1, [sp, #220]	; 0xdc
 80044c2:	4619      	mov	r1, r3
 80044c4:	f363 0100 	bfi	r1, r3, #0, #1
 80044c8:	f363 0141 	bfi	r1, r3, #1, #1
 80044cc:	f363 0182 	bfi	r1, r3, #2, #1
 80044d0:	f363 01c5 	bfi	r1, r3, #3, #3
 80044d4:	f362 1188 	bfi	r1, r2, #6, #3
 80044d8:	2208      	movs	r2, #8
 80044da:	f362 2152 	bfi	r1, r2, #9, #10
 80044de:	f363 41de 	bfi	r1, r3, #19, #12
 80044e2:	f363 71df 	bfi	r1, r3, #31, #1
 80044e6:	aa37      	add	r2, sp, #220	; 0xdc
 80044e8:	4814      	ldr	r0, [pc, #80]	; (800453c <bus_fault+0x2b8>)
 80044ea:	f00a fc3a 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 80044ee:	e711      	b.n	8004314 <bus_fault+0x90>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 80044f0:	2201      	movs	r2, #1
 80044f2:	f8ad 2008 	strh.w	r2, [sp, #8]
 80044f6:	4b19      	ldr	r3, [pc, #100]	; (800455c <bus_fault+0x2d8>)
 80044f8:	9332      	str	r3, [sp, #200]	; 0xc8
 80044fa:	2300      	movs	r3, #0
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	2102      	movs	r1, #2
 8004500:	f88d 1004 	strb.w	r1, [sp, #4]
 8004504:	9901      	ldr	r1, [sp, #4]
 8004506:	9131      	str	r1, [sp, #196]	; 0xc4
 8004508:	4619      	mov	r1, r3
 800450a:	f363 0100 	bfi	r1, r3, #0, #1
 800450e:	f363 0141 	bfi	r1, r3, #1, #1
 8004512:	f363 0182 	bfi	r1, r3, #2, #1
 8004516:	f363 01c5 	bfi	r1, r3, #3, #3
 800451a:	f362 1188 	bfi	r1, r2, #6, #3
 800451e:	2208      	movs	r2, #8
 8004520:	f362 2152 	bfi	r1, r2, #9, #10
 8004524:	f363 41de 	bfi	r1, r3, #19, #12
 8004528:	f363 71df 	bfi	r1, r3, #31, #1
 800452c:	aa31      	add	r2, sp, #196	; 0xc4
 800452e:	4803      	ldr	r0, [pc, #12]	; (800453c <bus_fault+0x2b8>)
 8004530:	f00a fc17 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8004534:	e6ee      	b.n	8004314 <bus_fault+0x90>
 8004536:	bf00      	nop
 8004538:	080120cc 	.word	0x080120cc
 800453c:	080119bc 	.word	0x080119bc
 8004540:	e000ed00 	.word	0xe000ed00
 8004544:	080120e4 	.word	0x080120e4
 8004548:	080120f8 	.word	0x080120f8
 800454c:	0801210c 	.word	0x0801210c
 8004550:	08012128 	.word	0x08012128
 8004554:	08012140 	.word	0x08012140
 8004558:	0801215c 	.word	0x0801215c
 800455c:	08012174 	.word	0x08012174

08004560 <usage_fault>:
{
 8004560:	b500      	push	{lr}
 8004562:	b0b5      	sub	sp, #212	; 0xd4
	PR_FAULT_INFO("***** USAGE FAULT *****");
 8004564:	2201      	movs	r2, #1
 8004566:	f8ad 2008 	strh.w	r2, [sp, #8]
 800456a:	4b8e      	ldr	r3, [pc, #568]	; (80047a4 <usage_fault+0x244>)
 800456c:	930e      	str	r3, [sp, #56]	; 0x38
 800456e:	2300      	movs	r3, #0
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	2102      	movs	r1, #2
 8004574:	f88d 1004 	strb.w	r1, [sp, #4]
 8004578:	9901      	ldr	r1, [sp, #4]
 800457a:	910d      	str	r1, [sp, #52]	; 0x34
 800457c:	4619      	mov	r1, r3
 800457e:	f363 0100 	bfi	r1, r3, #0, #1
 8004582:	f363 0141 	bfi	r1, r3, #1, #1
 8004586:	f363 0182 	bfi	r1, r3, #2, #1
 800458a:	f363 01c5 	bfi	r1, r3, #3, #3
 800458e:	f362 1188 	bfi	r1, r2, #6, #3
 8004592:	2208      	movs	r2, #8
 8004594:	f362 2152 	bfi	r1, r2, #9, #10
 8004598:	f363 41de 	bfi	r1, r3, #19, #12
 800459c:	f363 71df 	bfi	r1, r3, #31, #1
 80045a0:	aa0d      	add	r2, sp, #52	; 0x34
 80045a2:	4881      	ldr	r0, [pc, #516]	; (80047a8 <usage_fault+0x248>)
 80045a4:	f00a fbdd 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80045a8:	4b80      	ldr	r3, [pc, #512]	; (80047ac <usage_fault+0x24c>)
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80045b0:	d125      	bne.n	80045fe <usage_fault+0x9e>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80045b2:	4b7e      	ldr	r3, [pc, #504]	; (80047ac <usage_fault+0x24c>)
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80045ba:	d143      	bne.n	8004644 <usage_fault+0xe4>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80045bc:	4b7b      	ldr	r3, [pc, #492]	; (80047ac <usage_fault+0x24c>)
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80045c4:	d161      	bne.n	800468a <usage_fault+0x12a>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 80045c6:	4b79      	ldr	r3, [pc, #484]	; (80047ac <usage_fault+0x24c>)
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80045ce:	d17f      	bne.n	80046d0 <usage_fault+0x170>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 80045d0:	4b76      	ldr	r3, [pc, #472]	; (80047ac <usage_fault+0x24c>)
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045d8:	f040 809d 	bne.w	8004716 <usage_fault+0x1b6>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80045dc:	4b73      	ldr	r3, [pc, #460]	; (80047ac <usage_fault+0x24c>)
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80045e4:	f040 80ba 	bne.w	800475c <usage_fault+0x1fc>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80045e8:	4a70      	ldr	r2, [pc, #448]	; (80047ac <usage_fault+0x24c>)
 80045ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80045ec:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80045f0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80045f4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80045f6:	2000      	movs	r0, #0
 80045f8:	b035      	add	sp, #212	; 0xd4
 80045fa:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
 80045fe:	2201      	movs	r2, #1
 8004600:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004604:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <usage_fault+0x250>)
 8004606:	9314      	str	r3, [sp, #80]	; 0x50
 8004608:	2300      	movs	r3, #0
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	2102      	movs	r1, #2
 800460e:	f88d 1004 	strb.w	r1, [sp, #4]
 8004612:	9901      	ldr	r1, [sp, #4]
 8004614:	9113      	str	r1, [sp, #76]	; 0x4c
 8004616:	4619      	mov	r1, r3
 8004618:	f363 0100 	bfi	r1, r3, #0, #1
 800461c:	f363 0141 	bfi	r1, r3, #1, #1
 8004620:	f363 0182 	bfi	r1, r3, #2, #1
 8004624:	f363 01c5 	bfi	r1, r3, #3, #3
 8004628:	f362 1188 	bfi	r1, r2, #6, #3
 800462c:	2208      	movs	r2, #8
 800462e:	f362 2152 	bfi	r1, r2, #9, #10
 8004632:	f363 41de 	bfi	r1, r3, #19, #12
 8004636:	f363 71df 	bfi	r1, r3, #31, #1
 800463a:	aa13      	add	r2, sp, #76	; 0x4c
 800463c:	485a      	ldr	r0, [pc, #360]	; (80047a8 <usage_fault+0x248>)
 800463e:	f00a fb90 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8004642:	e7b6      	b.n	80045b2 <usage_fault+0x52>
		PR_FAULT_INFO("  Unaligned memory access");
 8004644:	2201      	movs	r2, #1
 8004646:	f8ad 2008 	strh.w	r2, [sp, #8]
 800464a:	4b5a      	ldr	r3, [pc, #360]	; (80047b4 <usage_fault+0x254>)
 800464c:	931a      	str	r3, [sp, #104]	; 0x68
 800464e:	2300      	movs	r3, #0
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	2102      	movs	r1, #2
 8004654:	f88d 1004 	strb.w	r1, [sp, #4]
 8004658:	9901      	ldr	r1, [sp, #4]
 800465a:	9119      	str	r1, [sp, #100]	; 0x64
 800465c:	4619      	mov	r1, r3
 800465e:	f363 0100 	bfi	r1, r3, #0, #1
 8004662:	f363 0141 	bfi	r1, r3, #1, #1
 8004666:	f363 0182 	bfi	r1, r3, #2, #1
 800466a:	f363 01c5 	bfi	r1, r3, #3, #3
 800466e:	f362 1188 	bfi	r1, r2, #6, #3
 8004672:	2208      	movs	r2, #8
 8004674:	f362 2152 	bfi	r1, r2, #9, #10
 8004678:	f363 41de 	bfi	r1, r3, #19, #12
 800467c:	f363 71df 	bfi	r1, r3, #31, #1
 8004680:	aa19      	add	r2, sp, #100	; 0x64
 8004682:	4849      	ldr	r0, [pc, #292]	; (80047a8 <usage_fault+0x248>)
 8004684:	f00a fb6d 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8004688:	e798      	b.n	80045bc <usage_fault+0x5c>
		PR_FAULT_INFO("  No coprocessor instructions");
 800468a:	2201      	movs	r2, #1
 800468c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004690:	4b49      	ldr	r3, [pc, #292]	; (80047b8 <usage_fault+0x258>)
 8004692:	9320      	str	r3, [sp, #128]	; 0x80
 8004694:	2300      	movs	r3, #0
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	2102      	movs	r1, #2
 800469a:	f88d 1004 	strb.w	r1, [sp, #4]
 800469e:	9901      	ldr	r1, [sp, #4]
 80046a0:	911f      	str	r1, [sp, #124]	; 0x7c
 80046a2:	4619      	mov	r1, r3
 80046a4:	f363 0100 	bfi	r1, r3, #0, #1
 80046a8:	f363 0141 	bfi	r1, r3, #1, #1
 80046ac:	f363 0182 	bfi	r1, r3, #2, #1
 80046b0:	f363 01c5 	bfi	r1, r3, #3, #3
 80046b4:	f362 1188 	bfi	r1, r2, #6, #3
 80046b8:	2208      	movs	r2, #8
 80046ba:	f362 2152 	bfi	r1, r2, #9, #10
 80046be:	f363 41de 	bfi	r1, r3, #19, #12
 80046c2:	f363 71df 	bfi	r1, r3, #31, #1
 80046c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80046c8:	4837      	ldr	r0, [pc, #220]	; (80047a8 <usage_fault+0x248>)
 80046ca:	f00a fb4a 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 80046ce:	e77a      	b.n	80045c6 <usage_fault+0x66>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 80046d0:	2201      	movs	r2, #1
 80046d2:	f8ad 2008 	strh.w	r2, [sp, #8]
 80046d6:	4b39      	ldr	r3, [pc, #228]	; (80047bc <usage_fault+0x25c>)
 80046d8:	9326      	str	r3, [sp, #152]	; 0x98
 80046da:	2300      	movs	r3, #0
 80046dc:	9301      	str	r3, [sp, #4]
 80046de:	2102      	movs	r1, #2
 80046e0:	f88d 1004 	strb.w	r1, [sp, #4]
 80046e4:	9901      	ldr	r1, [sp, #4]
 80046e6:	9125      	str	r1, [sp, #148]	; 0x94
 80046e8:	4619      	mov	r1, r3
 80046ea:	f363 0100 	bfi	r1, r3, #0, #1
 80046ee:	f363 0141 	bfi	r1, r3, #1, #1
 80046f2:	f363 0182 	bfi	r1, r3, #2, #1
 80046f6:	f363 01c5 	bfi	r1, r3, #3, #3
 80046fa:	f362 1188 	bfi	r1, r2, #6, #3
 80046fe:	2208      	movs	r2, #8
 8004700:	f362 2152 	bfi	r1, r2, #9, #10
 8004704:	f363 41de 	bfi	r1, r3, #19, #12
 8004708:	f363 71df 	bfi	r1, r3, #31, #1
 800470c:	aa25      	add	r2, sp, #148	; 0x94
 800470e:	4826      	ldr	r0, [pc, #152]	; (80047a8 <usage_fault+0x248>)
 8004710:	f00a fb27 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8004714:	e75c      	b.n	80045d0 <usage_fault+0x70>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8004716:	2201      	movs	r2, #1
 8004718:	f8ad 2008 	strh.w	r2, [sp, #8]
 800471c:	4b28      	ldr	r3, [pc, #160]	; (80047c0 <usage_fault+0x260>)
 800471e:	932c      	str	r3, [sp, #176]	; 0xb0
 8004720:	2300      	movs	r3, #0
 8004722:	9301      	str	r3, [sp, #4]
 8004724:	2102      	movs	r1, #2
 8004726:	f88d 1004 	strb.w	r1, [sp, #4]
 800472a:	9901      	ldr	r1, [sp, #4]
 800472c:	912b      	str	r1, [sp, #172]	; 0xac
 800472e:	4619      	mov	r1, r3
 8004730:	f363 0100 	bfi	r1, r3, #0, #1
 8004734:	f363 0141 	bfi	r1, r3, #1, #1
 8004738:	f363 0182 	bfi	r1, r3, #2, #1
 800473c:	f363 01c5 	bfi	r1, r3, #3, #3
 8004740:	f362 1188 	bfi	r1, r2, #6, #3
 8004744:	2208      	movs	r2, #8
 8004746:	f362 2152 	bfi	r1, r2, #9, #10
 800474a:	f363 41de 	bfi	r1, r3, #19, #12
 800474e:	f363 71df 	bfi	r1, r3, #31, #1
 8004752:	aa2b      	add	r2, sp, #172	; 0xac
 8004754:	4814      	ldr	r0, [pc, #80]	; (80047a8 <usage_fault+0x248>)
 8004756:	f00a fb04 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 800475a:	e73f      	b.n	80045dc <usage_fault+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 800475c:	2201      	movs	r2, #1
 800475e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004762:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <usage_fault+0x264>)
 8004764:	9332      	str	r3, [sp, #200]	; 0xc8
 8004766:	2300      	movs	r3, #0
 8004768:	9301      	str	r3, [sp, #4]
 800476a:	2102      	movs	r1, #2
 800476c:	f88d 1004 	strb.w	r1, [sp, #4]
 8004770:	9901      	ldr	r1, [sp, #4]
 8004772:	9131      	str	r1, [sp, #196]	; 0xc4
 8004774:	4619      	mov	r1, r3
 8004776:	f363 0100 	bfi	r1, r3, #0, #1
 800477a:	f363 0141 	bfi	r1, r3, #1, #1
 800477e:	f363 0182 	bfi	r1, r3, #2, #1
 8004782:	f363 01c5 	bfi	r1, r3, #3, #3
 8004786:	f362 1188 	bfi	r1, r2, #6, #3
 800478a:	2208      	movs	r2, #8
 800478c:	f362 2152 	bfi	r1, r2, #9, #10
 8004790:	f363 41de 	bfi	r1, r3, #19, #12
 8004794:	f363 71df 	bfi	r1, r3, #31, #1
 8004798:	aa31      	add	r2, sp, #196	; 0xc4
 800479a:	4803      	ldr	r0, [pc, #12]	; (80047a8 <usage_fault+0x248>)
 800479c:	f00a fae1 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 80047a0:	e722      	b.n	80045e8 <usage_fault+0x88>
 80047a2:	bf00      	nop
 80047a4:	080121a4 	.word	0x080121a4
 80047a8:	080119bc 	.word	0x080119bc
 80047ac:	e000ed00 	.word	0xe000ed00
 80047b0:	080121bc 	.word	0x080121bc
 80047b4:	080121d0 	.word	0x080121d0
 80047b8:	080121ec 	.word	0x080121ec
 80047bc:	0801220c 	.word	0x0801220c
 80047c0:	08012234 	.word	0x08012234
 80047c4:	08012250 	.word	0x08012250

080047c8 <debug_monitor>:
{
 80047c8:	b500      	push	{lr}
 80047ca:	b091      	sub	sp, #68	; 0x44
	*recoverable = false;
 80047cc:	2300      	movs	r3, #0
 80047ce:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
 80047d0:	2201      	movs	r2, #1
 80047d2:	f8ad 2008 	strh.w	r2, [sp, #8]
 80047d6:	4910      	ldr	r1, [pc, #64]	; (8004818 <debug_monitor+0x50>)
 80047d8:	910e      	str	r1, [sp, #56]	; 0x38
 80047da:	9301      	str	r3, [sp, #4]
 80047dc:	2102      	movs	r1, #2
 80047de:	f88d 1004 	strb.w	r1, [sp, #4]
 80047e2:	9901      	ldr	r1, [sp, #4]
 80047e4:	910d      	str	r1, [sp, #52]	; 0x34
 80047e6:	4619      	mov	r1, r3
 80047e8:	f363 0100 	bfi	r1, r3, #0, #1
 80047ec:	f363 0141 	bfi	r1, r3, #1, #1
 80047f0:	f363 0182 	bfi	r1, r3, #2, #1
 80047f4:	f363 01c5 	bfi	r1, r3, #3, #3
 80047f8:	f362 1188 	bfi	r1, r2, #6, #3
 80047fc:	2208      	movs	r2, #8
 80047fe:	f362 2152 	bfi	r1, r2, #9, #10
 8004802:	f363 41de 	bfi	r1, r3, #19, #12
 8004806:	f363 71df 	bfi	r1, r3, #31, #1
 800480a:	aa0d      	add	r2, sp, #52	; 0x34
 800480c:	4803      	ldr	r0, [pc, #12]	; (800481c <debug_monitor+0x54>)
 800480e:	f00a faa8 	bl	800ed62 <z_impl_z_log_msg2_static_create>
}
 8004812:	b011      	add	sp, #68	; 0x44
 8004814:	f85d fb04 	ldr.w	pc, [sp], #4
 8004818:	0801227c 	.word	0x0801227c
 800481c:	080119bc 	.word	0x080119bc

08004820 <mem_manage_fault>:
{
 8004820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004822:	b0b5      	sub	sp, #212	; 0xd4
 8004824:	4605      	mov	r5, r0
 8004826:	460c      	mov	r4, r1
 8004828:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 800482a:	2201      	movs	r2, #1
 800482c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004830:	4ba3      	ldr	r3, [pc, #652]	; (8004ac0 <mem_manage_fault+0x2a0>)
 8004832:	930e      	str	r3, [sp, #56]	; 0x38
 8004834:	2300      	movs	r3, #0
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	2102      	movs	r1, #2
 800483a:	f88d 1004 	strb.w	r1, [sp, #4]
 800483e:	9901      	ldr	r1, [sp, #4]
 8004840:	910d      	str	r1, [sp, #52]	; 0x34
 8004842:	4619      	mov	r1, r3
 8004844:	f363 0100 	bfi	r1, r3, #0, #1
 8004848:	f363 0141 	bfi	r1, r3, #1, #1
 800484c:	f363 0182 	bfi	r1, r3, #2, #1
 8004850:	f363 01c5 	bfi	r1, r3, #3, #3
 8004854:	f362 1188 	bfi	r1, r2, #6, #3
 8004858:	2208      	movs	r2, #8
 800485a:	f362 2152 	bfi	r1, r2, #9, #10
 800485e:	f363 41de 	bfi	r1, r3, #19, #12
 8004862:	f363 71df 	bfi	r1, r3, #31, #1
 8004866:	aa0d      	add	r2, sp, #52	; 0x34
 8004868:	4896      	ldr	r0, [pc, #600]	; (8004ac4 <mem_manage_fault+0x2a4>)
 800486a:	f00a fa7a 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800486e:	4b96      	ldr	r3, [pc, #600]	; (8004ac8 <mem_manage_fault+0x2a8>)
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	f013 0f10 	tst.w	r3, #16
 8004876:	d134      	bne.n	80048e2 <mem_manage_fault+0xc2>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8004878:	4b93      	ldr	r3, [pc, #588]	; (8004ac8 <mem_manage_fault+0x2a8>)
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	f013 0f08 	tst.w	r3, #8
 8004880:	d152      	bne.n	8004928 <mem_manage_fault+0x108>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8004882:	4b91      	ldr	r3, [pc, #580]	; (8004ac8 <mem_manage_fault+0x2a8>)
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	f013 0f02 	tst.w	r3, #2
 800488a:	d170      	bne.n	800496e <mem_manage_fault+0x14e>
	uint32_t mmfar = -EINVAL;
 800488c:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8004890:	4b8d      	ldr	r3, [pc, #564]	; (8004ac8 <mem_manage_fault+0x2a8>)
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	f013 0f01 	tst.w	r3, #1
 8004898:	f040 80c0 	bne.w	8004a1c <mem_manage_fault+0x1fc>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800489c:	4b8a      	ldr	r3, [pc, #552]	; (8004ac8 <mem_manage_fault+0x2a8>)
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	f013 0f20 	tst.w	r3, #32
 80048a4:	f040 80dd 	bne.w	8004a62 <mem_manage_fault+0x242>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80048a8:	4b87      	ldr	r3, [pc, #540]	; (8004ac8 <mem_manage_fault+0x2a8>)
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	f013 0f10 	tst.w	r3, #16
 80048b0:	d104      	bne.n	80048bc <mem_manage_fault+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 80048b2:	4b85      	ldr	r3, [pc, #532]	; (8004ac8 <mem_manage_fault+0x2a8>)
 80048b4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80048b6:	f014 0402 	ands.w	r4, r4, #2
 80048ba:	d005      	beq.n	80048c8 <mem_manage_fault+0xa8>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 80048bc:	4b82      	ldr	r3, [pc, #520]	; (8004ac8 <mem_manage_fault+0x2a8>)
 80048be:	685c      	ldr	r4, [r3, #4]
 80048c0:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 80048c4:	f040 80f0 	bne.w	8004aa8 <mem_manage_fault+0x288>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80048c8:	4a7f      	ldr	r2, [pc, #508]	; (8004ac8 <mem_manage_fault+0x2a8>)
 80048ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80048cc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80048d0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80048d2:	2101      	movs	r1, #1
 80048d4:	4628      	mov	r0, r5
 80048d6:	f00a facf 	bl	800ee78 <memory_fault_recoverable>
 80048da:	7030      	strb	r0, [r6, #0]
}
 80048dc:	4620      	mov	r0, r4
 80048de:	b035      	add	sp, #212	; 0xd4
 80048e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
 80048e2:	2201      	movs	r2, #1
 80048e4:	f8ad 2008 	strh.w	r2, [sp, #8]
 80048e8:	4b78      	ldr	r3, [pc, #480]	; (8004acc <mem_manage_fault+0x2ac>)
 80048ea:	9314      	str	r3, [sp, #80]	; 0x50
 80048ec:	2300      	movs	r3, #0
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	2102      	movs	r1, #2
 80048f2:	f88d 1004 	strb.w	r1, [sp, #4]
 80048f6:	9901      	ldr	r1, [sp, #4]
 80048f8:	9113      	str	r1, [sp, #76]	; 0x4c
 80048fa:	4619      	mov	r1, r3
 80048fc:	f363 0100 	bfi	r1, r3, #0, #1
 8004900:	f363 0141 	bfi	r1, r3, #1, #1
 8004904:	f363 0182 	bfi	r1, r3, #2, #1
 8004908:	f363 01c5 	bfi	r1, r3, #3, #3
 800490c:	f362 1188 	bfi	r1, r2, #6, #3
 8004910:	2208      	movs	r2, #8
 8004912:	f362 2152 	bfi	r1, r2, #9, #10
 8004916:	f363 41de 	bfi	r1, r3, #19, #12
 800491a:	f363 71df 	bfi	r1, r3, #31, #1
 800491e:	aa13      	add	r2, sp, #76	; 0x4c
 8004920:	4868      	ldr	r0, [pc, #416]	; (8004ac4 <mem_manage_fault+0x2a4>)
 8004922:	f00a fa1e 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8004926:	e7a7      	b.n	8004878 <mem_manage_fault+0x58>
		PR_FAULT_INFO("  Unstacking error");
 8004928:	2201      	movs	r2, #1
 800492a:	f8ad 2008 	strh.w	r2, [sp, #8]
 800492e:	4b68      	ldr	r3, [pc, #416]	; (8004ad0 <mem_manage_fault+0x2b0>)
 8004930:	931a      	str	r3, [sp, #104]	; 0x68
 8004932:	2300      	movs	r3, #0
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	2102      	movs	r1, #2
 8004938:	f88d 1004 	strb.w	r1, [sp, #4]
 800493c:	9901      	ldr	r1, [sp, #4]
 800493e:	9119      	str	r1, [sp, #100]	; 0x64
 8004940:	4619      	mov	r1, r3
 8004942:	f363 0100 	bfi	r1, r3, #0, #1
 8004946:	f363 0141 	bfi	r1, r3, #1, #1
 800494a:	f363 0182 	bfi	r1, r3, #2, #1
 800494e:	f363 01c5 	bfi	r1, r3, #3, #3
 8004952:	f362 1188 	bfi	r1, r2, #6, #3
 8004956:	2208      	movs	r2, #8
 8004958:	f362 2152 	bfi	r1, r2, #9, #10
 800495c:	f363 41de 	bfi	r1, r3, #19, #12
 8004960:	f363 71df 	bfi	r1, r3, #31, #1
 8004964:	aa19      	add	r2, sp, #100	; 0x64
 8004966:	4857      	ldr	r0, [pc, #348]	; (8004ac4 <mem_manage_fault+0x2a4>)
 8004968:	f00a f9fb 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 800496c:	e789      	b.n	8004882 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Data Access Violation");
 800496e:	2201      	movs	r2, #1
 8004970:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004974:	4b57      	ldr	r3, [pc, #348]	; (8004ad4 <mem_manage_fault+0x2b4>)
 8004976:	9320      	str	r3, [sp, #128]	; 0x80
 8004978:	2300      	movs	r3, #0
 800497a:	9301      	str	r3, [sp, #4]
 800497c:	2102      	movs	r1, #2
 800497e:	f88d 1004 	strb.w	r1, [sp, #4]
 8004982:	9901      	ldr	r1, [sp, #4]
 8004984:	911f      	str	r1, [sp, #124]	; 0x7c
 8004986:	4619      	mov	r1, r3
 8004988:	f363 0100 	bfi	r1, r3, #0, #1
 800498c:	f363 0141 	bfi	r1, r3, #1, #1
 8004990:	f363 0182 	bfi	r1, r3, #2, #1
 8004994:	f363 01c5 	bfi	r1, r3, #3, #3
 8004998:	f362 1188 	bfi	r1, r2, #6, #3
 800499c:	2208      	movs	r2, #8
 800499e:	f362 2152 	bfi	r1, r2, #9, #10
 80049a2:	f363 41de 	bfi	r1, r3, #19, #12
 80049a6:	f363 71df 	bfi	r1, r3, #31, #1
 80049aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80049ac:	4845      	ldr	r0, [pc, #276]	; (8004ac4 <mem_manage_fault+0x2a4>)
 80049ae:	f00a f9d8 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		uint32_t temp = SCB->MMFAR;
 80049b2:	4b45      	ldr	r3, [pc, #276]	; (8004ac8 <mem_manage_fault+0x2a8>)
 80049b4:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80049bc:	d102      	bne.n	80049c4 <mem_manage_fault+0x1a4>
	uint32_t mmfar = -EINVAL;
 80049be:	f06f 0715 	mvn.w	r7, #21
 80049c2:	e765      	b.n	8004890 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 80049c4:	2201      	movs	r2, #1
 80049c6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80049ca:	4b43      	ldr	r3, [pc, #268]	; (8004ad8 <mem_manage_fault+0x2b8>)
 80049cc:	9326      	str	r3, [sp, #152]	; 0x98
 80049ce:	9727      	str	r7, [sp, #156]	; 0x9c
 80049d0:	2300      	movs	r3, #0
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	2103      	movs	r1, #3
 80049d6:	f88d 1004 	strb.w	r1, [sp, #4]
 80049da:	9901      	ldr	r1, [sp, #4]
 80049dc:	9125      	str	r1, [sp, #148]	; 0x94
 80049de:	4619      	mov	r1, r3
 80049e0:	f363 0100 	bfi	r1, r3, #0, #1
 80049e4:	f363 0141 	bfi	r1, r3, #1, #1
 80049e8:	f363 0182 	bfi	r1, r3, #2, #1
 80049ec:	f363 01c5 	bfi	r1, r3, #3, #3
 80049f0:	f362 1188 	bfi	r1, r2, #6, #3
 80049f4:	220c      	movs	r2, #12
 80049f6:	f362 2152 	bfi	r1, r2, #9, #10
 80049fa:	f363 41de 	bfi	r1, r3, #19, #12
 80049fe:	f363 71df 	bfi	r1, r3, #31, #1
 8004a02:	aa25      	add	r2, sp, #148	; 0x94
 8004a04:	482f      	ldr	r0, [pc, #188]	; (8004ac4 <mem_manage_fault+0x2a4>)
 8004a06:	f00a f9ac 	bl	800ed62 <z_impl_z_log_msg2_static_create>
			if (from_hard_fault != 0) {
 8004a0a:	2c00      	cmp	r4, #0
 8004a0c:	f43f af40 	beq.w	8004890 <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8004a10:	4a2d      	ldr	r2, [pc, #180]	; (8004ac8 <mem_manage_fault+0x2a8>)
 8004a12:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a18:	6293      	str	r3, [r2, #40]	; 0x28
 8004a1a:	e739      	b.n	8004890 <mem_manage_fault+0x70>
		PR_FAULT_INFO("  Instruction Access Violation");
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004a22:	4b2e      	ldr	r3, [pc, #184]	; (8004adc <mem_manage_fault+0x2bc>)
 8004a24:	932c      	str	r3, [sp, #176]	; 0xb0
 8004a26:	2300      	movs	r3, #0
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	2102      	movs	r1, #2
 8004a2c:	f88d 1004 	strb.w	r1, [sp, #4]
 8004a30:	9901      	ldr	r1, [sp, #4]
 8004a32:	912b      	str	r1, [sp, #172]	; 0xac
 8004a34:	4619      	mov	r1, r3
 8004a36:	f363 0100 	bfi	r1, r3, #0, #1
 8004a3a:	f363 0141 	bfi	r1, r3, #1, #1
 8004a3e:	f363 0182 	bfi	r1, r3, #2, #1
 8004a42:	f363 01c5 	bfi	r1, r3, #3, #3
 8004a46:	f362 1188 	bfi	r1, r2, #6, #3
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	f362 2152 	bfi	r1, r2, #9, #10
 8004a50:	f363 41de 	bfi	r1, r3, #19, #12
 8004a54:	f363 71df 	bfi	r1, r3, #31, #1
 8004a58:	aa2b      	add	r2, sp, #172	; 0xac
 8004a5a:	481a      	ldr	r0, [pc, #104]	; (8004ac4 <mem_manage_fault+0x2a4>)
 8004a5c:	f00a f981 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8004a60:	e71c      	b.n	800489c <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
 8004a62:	2201      	movs	r2, #1
 8004a64:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004a68:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <mem_manage_fault+0x2c0>)
 8004a6a:	9332      	str	r3, [sp, #200]	; 0xc8
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	2102      	movs	r1, #2
 8004a72:	f88d 1004 	strb.w	r1, [sp, #4]
 8004a76:	9901      	ldr	r1, [sp, #4]
 8004a78:	9131      	str	r1, [sp, #196]	; 0xc4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	f363 0100 	bfi	r1, r3, #0, #1
 8004a80:	f363 0141 	bfi	r1, r3, #1, #1
 8004a84:	f363 0182 	bfi	r1, r3, #2, #1
 8004a88:	f363 01c5 	bfi	r1, r3, #3, #3
 8004a8c:	f362 1188 	bfi	r1, r2, #6, #3
 8004a90:	2208      	movs	r2, #8
 8004a92:	f362 2152 	bfi	r1, r2, #9, #10
 8004a96:	f363 41de 	bfi	r1, r3, #19, #12
 8004a9a:	f363 71df 	bfi	r1, r3, #31, #1
 8004a9e:	aa31      	add	r2, sp, #196	; 0xc4
 8004aa0:	4808      	ldr	r0, [pc, #32]	; (8004ac4 <mem_manage_fault+0x2a4>)
 8004aa2:	f00a f95e 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8004aa6:	e6ff      	b.n	80048a8 <mem_manage_fault+0x88>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	4638      	mov	r0, r7
 8004aac:	f7ff fb6e 	bl	800418c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	f43f af08 	beq.w	80048c8 <mem_manage_fault+0xa8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004ab8:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8004abc:	2402      	movs	r4, #2
 8004abe:	e703      	b.n	80048c8 <mem_manage_fault+0xa8>
 8004ac0:	080122a0 	.word	0x080122a0
 8004ac4:	080119bc 	.word	0x080119bc
 8004ac8:	e000ed00 	.word	0xe000ed00
 8004acc:	080122b8 	.word	0x080122b8
 8004ad0:	080120f8 	.word	0x080120f8
 8004ad4:	080122ec 	.word	0x080122ec
 8004ad8:	08012304 	.word	0x08012304
 8004adc:	0801231c 	.word	0x0801231c
 8004ae0:	08012174 	.word	0x08012174

08004ae4 <hard_fault>:
{
 8004ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae6:	b0a9      	sub	sp, #164	; 0xa4
 8004ae8:	4607      	mov	r7, r0
 8004aea:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
 8004aec:	2301      	movs	r3, #1
 8004aee:	f8ad 3008 	strh.w	r3, [sp, #8]
 8004af2:	4a73      	ldr	r2, [pc, #460]	; (8004cc0 <hard_fault+0x1dc>)
 8004af4:	920e      	str	r2, [sp, #56]	; 0x38
 8004af6:	2400      	movs	r4, #0
 8004af8:	9401      	str	r4, [sp, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f88d 2004 	strb.w	r2, [sp, #4]
 8004b00:	9a01      	ldr	r2, [sp, #4]
 8004b02:	920d      	str	r2, [sp, #52]	; 0x34
 8004b04:	4621      	mov	r1, r4
 8004b06:	f364 0100 	bfi	r1, r4, #0, #1
 8004b0a:	f364 0141 	bfi	r1, r4, #1, #1
 8004b0e:	f364 0182 	bfi	r1, r4, #2, #1
 8004b12:	f364 01c5 	bfi	r1, r4, #3, #3
 8004b16:	f363 1188 	bfi	r1, r3, #6, #3
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	f363 2152 	bfi	r1, r3, #9, #10
 8004b20:	f364 41de 	bfi	r1, r4, #19, #12
 8004b24:	f364 71df 	bfi	r1, r4, #31, #1
 8004b28:	4623      	mov	r3, r4
 8004b2a:	aa0d      	add	r2, sp, #52	; 0x34
 8004b2c:	4865      	ldr	r0, [pc, #404]	; (8004cc4 <hard_fault+0x1e0>)
 8004b2e:	f00a f918 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	*recoverable = false;
 8004b32:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004b34:	4b64      	ldr	r3, [pc, #400]	; (8004cc8 <hard_fault+0x1e4>)
 8004b36:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8004b38:	f015 0502 	ands.w	r5, r5, #2
 8004b3c:	d10a      	bne.n	8004b54 <hard_fault+0x70>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8004b3e:	4b62      	ldr	r3, [pc, #392]	; (8004cc8 <hard_fault+0x1e4>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	db2a      	blt.n	8004b9c <hard_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8004b46:	4b60      	ldr	r3, [pc, #384]	; (8004cc8 <hard_fault+0x1e4>)
 8004b48:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004b4a:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 8004b4e:	d149      	bne.n	8004be4 <hard_fault+0x100>
}
 8004b50:	b029      	add	sp, #164	; 0xa4
 8004b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
 8004b54:	2301      	movs	r3, #1
 8004b56:	f8ad 3008 	strh.w	r3, [sp, #8]
 8004b5a:	4a5c      	ldr	r2, [pc, #368]	; (8004ccc <hard_fault+0x1e8>)
 8004b5c:	9226      	str	r2, [sp, #152]	; 0x98
 8004b5e:	9401      	str	r4, [sp, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f88d 2004 	strb.w	r2, [sp, #4]
 8004b66:	9a01      	ldr	r2, [sp, #4]
 8004b68:	9225      	str	r2, [sp, #148]	; 0x94
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	f364 0100 	bfi	r1, r4, #0, #1
 8004b70:	f364 0141 	bfi	r1, r4, #1, #1
 8004b74:	f364 0182 	bfi	r1, r4, #2, #1
 8004b78:	f364 01c5 	bfi	r1, r4, #3, #3
 8004b7c:	f363 1188 	bfi	r1, r3, #6, #3
 8004b80:	2308      	movs	r3, #8
 8004b82:	f363 2152 	bfi	r1, r3, #9, #10
 8004b86:	f364 41de 	bfi	r1, r4, #19, #12
 8004b8a:	f364 71df 	bfi	r1, r4, #31, #1
 8004b8e:	4623      	mov	r3, r4
 8004b90:	aa25      	add	r2, sp, #148	; 0x94
 8004b92:	484c      	ldr	r0, [pc, #304]	; (8004cc4 <hard_fault+0x1e0>)
 8004b94:	f00a f8e5 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004b98:	4620      	mov	r0, r4
 8004b9a:	e7d9      	b.n	8004b50 <hard_fault+0x6c>
		PR_EXC("  Debug event");
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004ba2:	4b4b      	ldr	r3, [pc, #300]	; (8004cd0 <hard_fault+0x1ec>)
 8004ba4:	9320      	str	r3, [sp, #128]	; 0x80
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	2102      	movs	r1, #2
 8004bac:	f88d 1004 	strb.w	r1, [sp, #4]
 8004bb0:	9901      	ldr	r1, [sp, #4]
 8004bb2:	911f      	str	r1, [sp, #124]	; 0x7c
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f363 0100 	bfi	r1, r3, #0, #1
 8004bba:	f363 0141 	bfi	r1, r3, #1, #1
 8004bbe:	f363 0182 	bfi	r1, r3, #2, #1
 8004bc2:	f363 01c5 	bfi	r1, r3, #3, #3
 8004bc6:	f362 1188 	bfi	r1, r2, #6, #3
 8004bca:	2208      	movs	r2, #8
 8004bcc:	f362 2152 	bfi	r1, r2, #9, #10
 8004bd0:	f363 41de 	bfi	r1, r3, #19, #12
 8004bd4:	f363 71df 	bfi	r1, r3, #31, #1
 8004bd8:	aa1f      	add	r2, sp, #124	; 0x7c
 8004bda:	483a      	ldr	r0, [pc, #232]	; (8004cc4 <hard_fault+0x1e0>)
 8004bdc:	f00a f8c1 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004be0:	4628      	mov	r0, r5
 8004be2:	e7b5      	b.n	8004b50 <hard_fault+0x6c>
		PR_EXC("  Fault escalation (see below)");
 8004be4:	2201      	movs	r2, #1
 8004be6:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004bea:	4b3a      	ldr	r3, [pc, #232]	; (8004cd4 <hard_fault+0x1f0>)
 8004bec:	9314      	str	r3, [sp, #80]	; 0x50
 8004bee:	2300      	movs	r3, #0
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	f88d 1004 	strb.w	r1, [sp, #4]
 8004bf8:	9901      	ldr	r1, [sp, #4]
 8004bfa:	9113      	str	r1, [sp, #76]	; 0x4c
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f363 0100 	bfi	r1, r3, #0, #1
 8004c02:	f363 0141 	bfi	r1, r3, #1, #1
 8004c06:	f363 0182 	bfi	r1, r3, #2, #1
 8004c0a:	f363 01c5 	bfi	r1, r3, #3, #3
 8004c0e:	f362 1188 	bfi	r1, r2, #6, #3
 8004c12:	2208      	movs	r2, #8
 8004c14:	f362 2152 	bfi	r1, r2, #9, #10
 8004c18:	f363 41de 	bfi	r1, r3, #19, #12
 8004c1c:	f363 71df 	bfi	r1, r3, #31, #1
 8004c20:	aa13      	add	r2, sp, #76	; 0x4c
 8004c22:	4828      	ldr	r0, [pc, #160]	; (8004cc4 <hard_fault+0x1e0>)
 8004c24:	f00a f89d 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8004c28:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 8004c2a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8004c2e:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d00d      	beq.n	8004c52 <hard_fault+0x16e>
		} else if (SCB_MMFSR != 0) {
 8004c36:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <hard_fault+0x1e4>)
 8004c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c3c:	bb7b      	cbnz	r3, 8004c9e <hard_fault+0x1ba>
		} else if (SCB_BFSR != 0) {
 8004c3e:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <hard_fault+0x1e4>)
 8004c40:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004c44:	bb8b      	cbnz	r3, 8004caa <hard_fault+0x1c6>
		} else if (SCB_UFSR != 0) {
 8004c46:	4b20      	ldr	r3, [pc, #128]	; (8004cc8 <hard_fault+0x1e4>)
 8004c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	bb9b      	cbnz	r3, 8004cb6 <hard_fault+0x1d2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004c4e:	4628      	mov	r0, r5
	return reason;
 8004c50:	e77e      	b.n	8004b50 <hard_fault+0x6c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8004c52:	2201      	movs	r2, #1
 8004c54:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004c58:	4b1f      	ldr	r3, [pc, #124]	; (8004cd8 <hard_fault+0x1f4>)
 8004c5a:	931a      	str	r3, [sp, #104]	; 0x68
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c60:	2300      	movs	r3, #0
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	2103      	movs	r1, #3
 8004c66:	f88d 1004 	strb.w	r1, [sp, #4]
 8004c6a:	9901      	ldr	r1, [sp, #4]
 8004c6c:	9119      	str	r1, [sp, #100]	; 0x64
 8004c6e:	4619      	mov	r1, r3
 8004c70:	f363 0100 	bfi	r1, r3, #0, #1
 8004c74:	f363 0141 	bfi	r1, r3, #1, #1
 8004c78:	f363 0182 	bfi	r1, r3, #2, #1
 8004c7c:	f363 01c5 	bfi	r1, r3, #3, #3
 8004c80:	f362 1188 	bfi	r1, r2, #6, #3
 8004c84:	220c      	movs	r2, #12
 8004c86:	f362 2152 	bfi	r1, r2, #9, #10
 8004c8a:	f363 41de 	bfi	r1, r3, #19, #12
 8004c8e:	f363 71df 	bfi	r1, r3, #31, #1
 8004c92:	aa19      	add	r2, sp, #100	; 0x64
 8004c94:	480b      	ldr	r0, [pc, #44]	; (8004cc4 <hard_fault+0x1e0>)
 8004c96:	f00a f864 	bl	800ed62 <z_impl_z_log_msg2_static_create>
			reason = esf->basic.r0;
 8004c9a:	6838      	ldr	r0, [r7, #0]
 8004c9c:	e758      	b.n	8004b50 <hard_fault+0x6c>
			reason = mem_manage_fault(esf, 1, recoverable);
 8004c9e:	4632      	mov	r2, r6
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	f7ff fdbc 	bl	8004820 <mem_manage_fault>
 8004ca8:	e752      	b.n	8004b50 <hard_fault+0x6c>
			reason = bus_fault(esf, 1, recoverable);
 8004caa:	4632      	mov	r2, r6
 8004cac:	2101      	movs	r1, #1
 8004cae:	4638      	mov	r0, r7
 8004cb0:	f7ff fae8 	bl	8004284 <bus_fault>
 8004cb4:	e74c      	b.n	8004b50 <hard_fault+0x6c>
			reason = usage_fault(esf);
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	f7ff fc52 	bl	8004560 <usage_fault>
 8004cbc:	e748      	b.n	8004b50 <hard_fault+0x6c>
 8004cbe:	bf00      	nop
 8004cc0:	0801233c 	.word	0x0801233c
 8004cc4:	080119bc 	.word	0x080119bc
 8004cc8:	e000ed00 	.word	0xe000ed00
 8004ccc:	08012354 	.word	0x08012354
 8004cd0:	08012378 	.word	0x08012378
 8004cd4:	08012388 	.word	0x08012388
 8004cd8:	080123a8 	.word	0x080123a8

08004cdc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	b098      	sub	sp, #96	; 0x60
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8004ce0:	4b38      	ldr	r3, [pc, #224]	; (8004dc4 <z_arm_fault+0xe8>)
 8004ce2:	685d      	ldr	r5, [r3, #4]
 8004ce4:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8004cf2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8004cf6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8004cfa:	d13c      	bne.n	8004d76 <z_arm_fault+0x9a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8004cfc:	f002 030c 	and.w	r3, r2, #12
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d010      	beq.n	8004d26 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8004d04:	f012 0f08 	tst.w	r2, #8
 8004d08:	d032      	beq.n	8004d70 <z_arm_fault+0x94>
			ptr_esf =  (z_arch_esf_t *)psp;
 8004d0a:	460c      	mov	r4, r1
	*nested_exc = false;
 8004d0c:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 8004d0e:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8004d12:	4629      	mov	r1, r5
 8004d14:	4620      	mov	r0, r4
 8004d16:	f00a f8be 	bl	800ee96 <fault_handle>
 8004d1a:	4605      	mov	r5, r0
	if (recoverable) {
 8004d1c:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8004d20:	b363      	cbz	r3, 8004d7c <z_arm_fault+0xa0>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 8004d22:	b018      	add	sp, #96	; 0x60
 8004d24:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8004d26:	2301      	movs	r3, #1
 8004d28:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004d2c:	4a26      	ldr	r2, [pc, #152]	; (8004dc8 <z_arm_fault+0xec>)
 8004d2e:	9216      	str	r2, [sp, #88]	; 0x58
 8004d30:	2400      	movs	r4, #0
 8004d32:	9400      	str	r4, [sp, #0]
 8004d34:	2202      	movs	r2, #2
 8004d36:	f88d 2000 	strb.w	r2, [sp]
 8004d3a:	9a00      	ldr	r2, [sp, #0]
 8004d3c:	9215      	str	r2, [sp, #84]	; 0x54
 8004d3e:	4621      	mov	r1, r4
 8004d40:	f364 0100 	bfi	r1, r4, #0, #1
 8004d44:	f364 0141 	bfi	r1, r4, #1, #1
 8004d48:	f364 0182 	bfi	r1, r4, #2, #1
 8004d4c:	f364 01c5 	bfi	r1, r4, #3, #3
 8004d50:	f363 1188 	bfi	r1, r3, #6, #3
 8004d54:	2308      	movs	r3, #8
 8004d56:	f363 2152 	bfi	r1, r3, #9, #10
 8004d5a:	f364 41de 	bfi	r1, r4, #19, #12
 8004d5e:	f364 71df 	bfi	r1, r4, #31, #1
 8004d62:	4623      	mov	r3, r4
 8004d64:	aa15      	add	r2, sp, #84	; 0x54
 8004d66:	4819      	ldr	r0, [pc, #100]	; (8004dcc <z_arm_fault+0xf0>)
 8004d68:	f009 fffb 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	*nested_exc = false;
 8004d6c:	4626      	mov	r6, r4
		return NULL;
 8004d6e:	e7ce      	b.n	8004d0e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8004d70:	4604      	mov	r4, r0
			*nested_exc = true;
 8004d72:	2601      	movs	r6, #1
 8004d74:	e7cb      	b.n	8004d0e <z_arm_fault+0x32>
	*nested_exc = false;
 8004d76:	2600      	movs	r6, #0
		return NULL;
 8004d78:	4634      	mov	r4, r6
 8004d7a:	e7c8      	b.n	8004d0e <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8004d7c:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8004d80:	6820      	ldr	r0, [r4, #0]
 8004d82:	6861      	ldr	r1, [r4, #4]
 8004d84:	68a2      	ldr	r2, [r4, #8]
 8004d86:	68e3      	ldr	r3, [r4, #12]
 8004d88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004d8c:	6920      	ldr	r0, [r4, #16]
 8004d8e:	6961      	ldr	r1, [r4, #20]
 8004d90:	69a2      	ldr	r2, [r4, #24]
 8004d92:	69e3      	ldr	r3, [r4, #28]
 8004d94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
 8004d98:	b146      	cbz	r6, 8004dac <z_arm_fault+0xd0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8004d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d9e:	b95a      	cbnz	r2, 8004db8 <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8004da0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8004da4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8004da8:	9310      	str	r3, [sp, #64]	; 0x40
 8004daa:	e005      	b.n	8004db8 <z_arm_fault+0xdc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8004dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004dae:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004db2:	f023 0301 	bic.w	r3, r3, #1
 8004db6:	9310      	str	r3, [sp, #64]	; 0x40
	z_arm_fatal_error(reason, &esf_copy);
 8004db8:	a909      	add	r1, sp, #36	; 0x24
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f00a f83e 	bl	800ee3c <z_arm_fatal_error>
 8004dc0:	e7af      	b.n	8004d22 <z_arm_fault+0x46>
 8004dc2:	bf00      	nop
 8004dc4:	e000ed00 	.word	0xe000ed00
 8004dc8:	080123c4 	.word	0x080123c4
 8004dcc:	080119bc 	.word	0x080119bc

08004dd0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8004dd0:	4a02      	ldr	r2, [pc, #8]	; (8004ddc <z_arm_fault_init+0xc>)
 8004dd2:	6953      	ldr	r3, [r2, #20]
 8004dd4:	f043 0310 	orr.w	r3, r3, #16
 8004dd8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8004dda:	4770      	bx	lr
 8004ddc:	e000ed00 	.word	0xe000ed00

08004de0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8004de0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8004de4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8004de8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8004dea:	4672      	mov	r2, lr
	bl z_arm_fault
 8004dec:	f7ff ff76 	bl	8004cdc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8004df0:	bd01      	pop	{r0, pc}
 8004df2:	bf00      	nop

08004df4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8004df4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8004df6:	e006      	b.n	8004e06 <z_arm_interrupt_init+0x12>
 8004df8:	f002 010f 	and.w	r1, r2, #15
 8004dfc:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <z_arm_interrupt_init+0x30>)
 8004dfe:	440b      	add	r3, r1
 8004e00:	2110      	movs	r1, #16
 8004e02:	7619      	strb	r1, [r3, #24]
 8004e04:	3201      	adds	r2, #1
 8004e06:	2a54      	cmp	r2, #84	; 0x54
 8004e08:	dc0a      	bgt.n	8004e20 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 8004e0a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	dbf3      	blt.n	8004df8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e10:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004e14:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8004e18:	2110      	movs	r1, #16
 8004e1a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8004e1e:	e7f1      	b.n	8004e04 <z_arm_interrupt_init+0x10>
	}
}
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	e000ecfc 	.word	0xe000ecfc

08004e28 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8004e28:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8004e2a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8004e2e:	4808      	ldr	r0, [pc, #32]	; (8004e50 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8004e30:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8004e34:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8004e36:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8004e3a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8004e3e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8004e40:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8004e42:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8004e46:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8004e4a:	f7ff f907 	bl	800405c <z_arm_prep_c>
 8004e4e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8004e50:	20002ce0 	.word	0x20002ce0

08004e54 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8004e54:	b508      	push	{r3, lr}
	if (_current == thread) {
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <z_impl_k_thread_abort+0x24>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	4283      	cmp	r3, r0
 8004e5c:	d002      	beq.n	8004e64 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8004e5e:	f007 f8ed 	bl	800c03c <z_thread_abort>
}
 8004e62:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e64:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f8      	beq.n	8004e5e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004e6c:	4a03      	ldr	r2, [pc, #12]	; (8004e7c <z_impl_k_thread_abort+0x28>)
 8004e6e:	6853      	ldr	r3, [r2, #4]
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e74:	6053      	str	r3, [r2, #4]
 8004e76:	e7f2      	b.n	8004e5e <z_impl_k_thread_abort+0xa>
 8004e78:	200013ac 	.word	0x200013ac
 8004e7c:	e000ed00 	.word	0xe000ed00

08004e80 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8004e80:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8004e82:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <z_arm_configure_static_mpu_regions+0x10>)
 8004e84:	4a03      	ldr	r2, [pc, #12]	; (8004e94 <z_arm_configure_static_mpu_regions+0x14>)
 8004e86:	2101      	movs	r1, #1
 8004e88:	4803      	ldr	r0, [pc, #12]	; (8004e98 <z_arm_configure_static_mpu_regions+0x18>)
 8004e8a:	f00a f859 	bl	800ef40 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8004e8e:	bd08      	pop	{r3, pc}
 8004e90:	20028000 	.word	0x20028000
 8004e94:	20000000 	.word	0x20000000
 8004e98:	080123f4 	.word	0x080123f4

08004e9c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8004e9c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8004e9e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004ea0:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8004ea2:	4805      	ldr	r0, [pc, #20]	; (8004eb8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8004ea4:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 8004ea6:	2320      	movs	r3, #32
 8004ea8:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8004eaa:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <z_arm_configure_dynamic_mpu_regions+0x20>)
 8004eac:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8004eae:	2101      	movs	r1, #1
 8004eb0:	f00a f84a 	bl	800ef48 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 8004eb4:	bd08      	pop	{r3, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000e60 	.word	0x20000e60
 8004ebc:	150b0000 	.word	0x150b0000

08004ec0 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8004ec0:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <region_init+0x24>)
 8004ec2:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004ec6:	680b      	ldr	r3, [r1, #0]
 8004ec8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8004ecc:	4303      	orrs	r3, r0
 8004ece:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004ed2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8004ed6:	688b      	ldr	r3, [r1, #8]
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	e000ed00 	.word	0xe000ed00

08004ee8 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	b090      	sub	sp, #64	; 0x40
 8004eec:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 8004eee:	2807      	cmp	r0, #7
 8004ef0:	d804      	bhi.n	8004efc <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 8004ef2:	f7ff ffe5 	bl	8004ec0 <region_init>

	return index;
 8004ef6:	4620      	mov	r0, r4
}
 8004ef8:	b010      	add	sp, #64	; 0x40
 8004efa:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8004efc:	2201      	movs	r2, #1
 8004efe:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <region_allocate_and_init+0x60>)
 8004f04:	930e      	str	r3, [sp, #56]	; 0x38
 8004f06:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	2103      	movs	r1, #3
 8004f0e:	f88d 1004 	strb.w	r1, [sp, #4]
 8004f12:	9901      	ldr	r1, [sp, #4]
 8004f14:	910d      	str	r1, [sp, #52]	; 0x34
 8004f16:	4619      	mov	r1, r3
 8004f18:	f363 0100 	bfi	r1, r3, #0, #1
 8004f1c:	f363 0141 	bfi	r1, r3, #1, #1
 8004f20:	f363 0182 	bfi	r1, r3, #2, #1
 8004f24:	f363 01c5 	bfi	r1, r3, #3, #3
 8004f28:	f362 1188 	bfi	r1, r2, #6, #3
 8004f2c:	220c      	movs	r2, #12
 8004f2e:	f362 2152 	bfi	r1, r2, #9, #10
 8004f32:	f363 41de 	bfi	r1, r3, #19, #12
 8004f36:	f363 71df 	bfi	r1, r3, #31, #1
 8004f3a:	aa0d      	add	r2, sp, #52	; 0x34
 8004f3c:	4803      	ldr	r0, [pc, #12]	; (8004f4c <region_allocate_and_init+0x64>)
 8004f3e:	f009 ff10 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8004f42:	f06f 0015 	mvn.w	r0, #21
 8004f46:	e7d7      	b.n	8004ef8 <region_allocate_and_init+0x10>
 8004f48:	08012400 	.word	0x08012400
 8004f4c:	080119b4 	.word	0x080119b4

08004f50 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8004f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f54:	b091      	sub	sp, #68	; 0x44
 8004f56:	4680      	mov	r8, r0
 8004f58:	460f      	mov	r7, r1
 8004f5a:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
 8004f5c:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
 8004f5e:	2500      	movs	r5, #0
 8004f60:	e009      	b.n	8004f76 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8004f62:	4621      	mov	r1, r4
 8004f64:	b2f0      	uxtb	r0, r6
 8004f66:	f009 ffcc 	bl	800ef02 <mpu_configure_region>
 8004f6a:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
 8004f6c:	f110 0f16 	cmn.w	r0, #22
 8004f70:	d037      	beq.n	8004fe2 <mpu_configure_regions+0x92>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 8004f72:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 8004f74:	3501      	adds	r5, #1
 8004f76:	42bd      	cmp	r5, r7
 8004f78:	da33      	bge.n	8004fe2 <mpu_configure_regions+0x92>
		if (regions[i].size == 0U) {
 8004f7a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8004f7e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8004f82:	6862      	ldr	r2, [r4, #4]
 8004f84:	2a00      	cmp	r2, #0
 8004f86:	d0f5      	beq.n	8004f74 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
 8004f88:	f1b9 0f00 	cmp.w	r9, #0
 8004f8c:	d0e9      	beq.n	8004f62 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f009 ffa6 	bl	800eee0 <mpu_partition_is_valid>
		if (do_sanity_check &&
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d1e4      	bne.n	8004f62 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004f9e:	4b13      	ldr	r3, [pc, #76]	; (8004fec <mpu_configure_regions+0x9c>)
 8004fa0:	930e      	str	r3, [sp, #56]	; 0x38
 8004fa2:	950f      	str	r5, [sp, #60]	; 0x3c
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	2103      	movs	r1, #3
 8004faa:	f88d 1004 	strb.w	r1, [sp, #4]
 8004fae:	9901      	ldr	r1, [sp, #4]
 8004fb0:	910d      	str	r1, [sp, #52]	; 0x34
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	f363 0100 	bfi	r1, r3, #0, #1
 8004fb8:	f363 0141 	bfi	r1, r3, #1, #1
 8004fbc:	f363 0182 	bfi	r1, r3, #2, #1
 8004fc0:	f363 01c5 	bfi	r1, r3, #3, #3
 8004fc4:	f362 1188 	bfi	r1, r2, #6, #3
 8004fc8:	220c      	movs	r2, #12
 8004fca:	f362 2152 	bfi	r1, r2, #9, #10
 8004fce:	f363 41de 	bfi	r1, r3, #19, #12
 8004fd2:	f363 71df 	bfi	r1, r3, #31, #1
 8004fd6:	aa0d      	add	r2, sp, #52	; 0x34
 8004fd8:	4805      	ldr	r0, [pc, #20]	; (8004ff0 <mpu_configure_regions+0xa0>)
 8004fda:	f009 fec2 	bl	800ed62 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
 8004fde:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	b011      	add	sp, #68	; 0x44
 8004fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fea:	bf00      	nop
 8004fec:	08012428 	.word	0x08012428
 8004ff0:	080119b4 	.word	0x080119b4

08004ff4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 8004ff4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 8004ff6:	4c03      	ldr	r4, [pc, #12]	; (8005004 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	7822      	ldrb	r2, [r4, #0]
 8004ffc:	f7ff ffa8 	bl	8004f50 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8005000:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 8005002:	bd10      	pop	{r4, pc}
 8005004:	2000140b 	.word	0x2000140b

08005008 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8005008:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800500a:	2300      	movs	r3, #0
 800500c:	4a09      	ldr	r2, [pc, #36]	; (8005034 <mpu_configure_dynamic_mpu_regions+0x2c>)
 800500e:	7812      	ldrb	r2, [r2, #0]
 8005010:	f7ff ff9e 	bl	8004f50 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8005014:	f110 0f16 	cmn.w	r0, #22
 8005018:	d00a      	beq.n	8005030 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800501a:	4603      	mov	r3, r0
 800501c:	e006      	b.n	800502c <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800501e:	4a06      	ldr	r2, [pc, #24]	; (8005038 <mpu_configure_dynamic_mpu_regions+0x30>)
 8005020:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8005024:	2100      	movs	r1, #0
 8005026:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 800502a:	3301      	adds	r3, #1
 800502c:	2b07      	cmp	r3, #7
 800502e:	ddf6      	ble.n	800501e <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 8005030:	bd08      	pop	{r3, pc}
 8005032:	bf00      	nop
 8005034:	2000140b 	.word	0x2000140b
 8005038:	e000ed00 	.word	0xe000ed00

0800503c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <arm_core_mpu_enable+0x14>)
 800503e:	2205      	movs	r2, #5
 8005040:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8005044:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005048:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	e000ed00 	.word	0xe000ed00

08005054 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005054:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8005058:	4b02      	ldr	r3, [pc, #8]	; (8005064 <arm_core_mpu_disable+0x10>)
 800505a:	2200      	movs	r2, #0
 800505c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	e000ed00 	.word	0xe000ed00

08005068 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 8005068:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800506a:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <z_arm_mpu_init+0x3c>)
 800506c:	681d      	ldr	r5, [r3, #0]
 800506e:	2d08      	cmp	r5, #8
 8005070:	d815      	bhi.n	800509e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8005072:	f7ff ffef 	bl	8005054 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8005076:	2400      	movs	r4, #0
 8005078:	e009      	b.n	800508e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 800507a:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <z_arm_mpu_init+0x3c>)
 800507c:	6859      	ldr	r1, [r3, #4]
 800507e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005082:	0093      	lsls	r3, r2, #2
 8005084:	4419      	add	r1, r3
 8005086:	4620      	mov	r0, r4
 8005088:	f7ff ff1a 	bl	8004ec0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800508c:	3401      	adds	r4, #1
 800508e:	42a5      	cmp	r5, r4
 8005090:	d8f3      	bhi.n	800507a <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8005092:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <z_arm_mpu_init+0x40>)
 8005094:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 8005096:	f7ff ffd1 	bl	800503c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 800509a:	2000      	movs	r0, #0
}
 800509c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 800509e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050a2:	e7fb      	b.n	800509c <z_arm_mpu_init+0x34>
 80050a4:	08012484 	.word	0x08012484
 80050a8:	2000140b 	.word	0x2000140b

080050ac <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 80050ac:	4b01      	ldr	r3, [pc, #4]	; (80050b4 <__stdout_hook_install+0x8>)
 80050ae:	6018      	str	r0, [r3, #0]
}
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	200002bc 	.word	0x200002bc

080050b8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4606      	mov	r6, r0
 80050bc:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 80050be:	2400      	movs	r4, #0
 80050c0:	e000      	b.n	80050c4 <z_impl_zephyr_read_stdin+0xc>
 80050c2:	3401      	adds	r4, #1
 80050c4:	42ac      	cmp	r4, r5
 80050c6:	da08      	bge.n	80050da <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <z_impl_zephyr_read_stdin+0x28>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4798      	blx	r3
 80050ce:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80050d0:	280a      	cmp	r0, #10
 80050d2:	d001      	beq.n	80050d8 <z_impl_zephyr_read_stdin+0x20>
 80050d4:	280d      	cmp	r0, #13
 80050d6:	d1f4      	bne.n	80050c2 <z_impl_zephyr_read_stdin+0xa>
			i++;
 80050d8:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 80050da:	4620      	mov	r0, r4
 80050dc:	bd70      	pop	{r4, r5, r6, pc}
 80050de:	bf00      	nop
 80050e0:	200002b8 	.word	0x200002b8

080050e4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	4605      	mov	r5, r0
 80050e8:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 80050ea:	2400      	movs	r4, #0
 80050ec:	e004      	b.n	80050f8 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 80050ee:	4b09      	ldr	r3, [pc, #36]	; (8005114 <z_impl_zephyr_write_stdout+0x30>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	7830      	ldrb	r0, [r6, #0]
 80050f4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 80050f6:	3401      	adds	r4, #1
 80050f8:	42bc      	cmp	r4, r7
 80050fa:	da08      	bge.n	800510e <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 80050fc:	192e      	adds	r6, r5, r4
 80050fe:	5d2b      	ldrb	r3, [r5, r4]
 8005100:	2b0a      	cmp	r3, #10
 8005102:	d1f4      	bne.n	80050ee <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 8005104:	4b03      	ldr	r3, [pc, #12]	; (8005114 <z_impl_zephyr_write_stdout+0x30>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	200d      	movs	r0, #13
 800510a:	4798      	blx	r3
 800510c:	e7ef      	b.n	80050ee <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 800510e:	4638      	mov	r0, r7
 8005110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005112:	bf00      	nop
 8005114:	200002bc 	.word	0x200002bc

08005118 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8005118:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 800511a:	2205      	movs	r2, #5
 800511c:	4902      	ldr	r1, [pc, #8]	; (8005128 <_exit+0x10>)
 800511e:	2001      	movs	r0, #1
 8005120:	f009 ff23 	bl	800ef6a <_write>
	while (1) {
 8005124:	e7fe      	b.n	8005124 <_exit+0xc>
 8005126:	bf00      	nop
 8005128:	0801244c 	.word	0x0801244c

0800512c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 800512c:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 800512e:	4b08      	ldr	r3, [pc, #32]	; (8005150 <_sbrk+0x24>)
 8005130:	6819      	ldr	r1, [r3, #0]
 8005132:	4b08      	ldr	r3, [pc, #32]	; (8005154 <_sbrk+0x28>)
 8005134:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8005136:	440a      	add	r2, r1
 8005138:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 800513c:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
 8005140:	429a      	cmp	r2, r3
 8005142:	d202      	bcs.n	800514a <_sbrk+0x1e>
		heap_sz += count;
 8005144:	4b02      	ldr	r3, [pc, #8]	; (8005150 <_sbrk+0x24>)
 8005146:	601a      	str	r2, [r3, #0]
		ret = ptr;
 8005148:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 800514a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 800514e:	4770      	bx	lr
 8005150:	20000e6c 	.word	0x20000e6c
 8005154:	20003920 	.word	0x20003920

08005158 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
 8005158:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
 800515a:	221d      	movs	r2, #29
 800515c:	4904      	ldr	r1, [pc, #16]	; (8005170 <__chk_fail+0x18>)
 800515e:	2002      	movs	r0, #2
 8005160:	f009 ff03 	bl	800ef6a <_write>
	k_oops();
 8005164:	4040      	eors	r0, r0
 8005166:	f380 8811 	msr	BASEPRI, r0
 800516a:	f04f 0003 	mov.w	r0, #3
 800516e:	df02      	svc	2
	CODE_UNREACHABLE;
 8005170:	08012454 	.word	0x08012454

08005174 <rand_get>:
	return random_num;
}
#endif /* CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR */

static int rand_get(uint8_t *dst, size_t outlen, bool csrand)
{
 8005174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005176:	b083      	sub	sp, #12
 8005178:	4605      	mov	r5, r0
 800517a:	460c      	mov	r4, r1
 800517c:	4616      	mov	r6, r2
	const struct device *dev = entropy_driver;
 800517e:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <rand_get+0x5c>)
 8005180:	6818      	ldr	r0, [r3, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
 8005182:	b148      	cbz	r0, 8005198 <rand_get+0x24>
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
	}

	ret = entropy_get_entropy(dev, dst, outlen);
 8005184:	b2a2      	uxth	r2, r4

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
 8005186:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4629      	mov	r1, r5
 800518c:	4798      	blx	r3
 800518e:	4603      	mov	r3, r0

	if (unlikely(ret < 0)) {
 8005190:	0fc0      	lsrs	r0, r0, #31
 8005192:	d107      	bne.n	80051a4 <rand_get+0x30>
			len += copylen;
		}
	}

	return 0;
}
 8005194:	b003      	add	sp, #12
 8005196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005198:	480e      	ldr	r0, [pc, #56]	; (80051d4 <rand_get+0x60>)
 800519a:	f005 fe75 	bl	800ae88 <z_impl_device_get_binding>
		entropy_driver = dev;
 800519e:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <rand_get+0x5c>)
 80051a0:	6018      	str	r0, [r3, #0]
 80051a2:	e7ef      	b.n	8005184 <rand_get+0x10>
		if (csrand) {
 80051a4:	b156      	cbz	r6, 80051bc <rand_get+0x48>
			return ret;
 80051a6:	4618      	mov	r0, r3
 80051a8:	e7f4      	b.n	8005194 <rand_get+0x20>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 80051aa:	f005 fcb7 	bl	800ab1c <sys_clock_cycle_get_32>
			random_num = k_cycle_get_32();
 80051ae:	9001      	str	r0, [sp, #4]
 80051b0:	463a      	mov	r2, r7
 80051b2:	a901      	add	r1, sp, #4
 80051b4:	19a8      	adds	r0, r5, r6
 80051b6:	f00b fd75 	bl	8010ca4 <memcpy>
			len += copylen;
 80051ba:	443e      	add	r6, r7
		while (len < outlen) {
 80051bc:	42a6      	cmp	r6, r4
 80051be:	d204      	bcs.n	80051ca <rand_get+0x56>
			size_t copylen = outlen - len;
 80051c0:	1ba7      	subs	r7, r4, r6
			if (copylen > blocksize) {
 80051c2:	2f04      	cmp	r7, #4
 80051c4:	d9f1      	bls.n	80051aa <rand_get+0x36>
				copylen = blocksize;
 80051c6:	2704      	movs	r7, #4
 80051c8:	e7ef      	b.n	80051aa <rand_get+0x36>
	return 0;
 80051ca:	2000      	movs	r0, #0
 80051cc:	e7e2      	b.n	8005194 <rand_get+0x20>
 80051ce:	bf00      	nop
 80051d0:	20000e70 	.word	0x20000e70
 80051d4:	080124a4 	.word	0x080124a4

080051d8 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	4604      	mov	r4, r0
 80051dc:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 80051de:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 80051e0:	e002      	b.n	80051e8 <__stm32_exti_isr+0x10>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80051e2:	2201      	movs	r2, #1
 80051e4:	e00c      	b.n	8005200 <__stm32_exti_isr+0x28>
 80051e6:	3401      	adds	r4, #1
 80051e8:	42ac      	cmp	r4, r5
 80051ea:	da17      	bge.n	800521c <__stm32_exti_isr+0x44>
	if (line < 32) {
 80051ec:	2c1f      	cmp	r4, #31
 80051ee:	dcfa      	bgt.n	80051e6 <__stm32_exti_isr+0xe>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80051f0:	2301      	movs	r3, #1
 80051f2:	40a3      	lsls	r3, r4
 80051f4:	4a0a      	ldr	r2, [pc, #40]	; (8005220 <__stm32_exti_isr+0x48>)
 80051f6:	6952      	ldr	r2, [r2, #20]
 80051f8:	ea33 0202 	bics.w	r2, r3, r2
 80051fc:	d0f1      	beq.n	80051e2 <__stm32_exti_isr+0xa>
 80051fe:	2200      	movs	r2, #0
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8005200:	2a00      	cmp	r2, #0
 8005202:	d0f0      	beq.n	80051e6 <__stm32_exti_isr+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005204:	4a06      	ldr	r2, [pc, #24]	; (8005220 <__stm32_exti_isr+0x48>)
 8005206:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8005208:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0ea      	beq.n	80051e6 <__stm32_exti_isr+0xe>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8005210:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8005214:	6851      	ldr	r1, [r2, #4]
 8005216:	4620      	mov	r0, r4
 8005218:	4798      	blx	r3
 800521a:	e7e4      	b.n	80051e6 <__stm32_exti_isr+0xe>
		}
	}
}
 800521c:	bd70      	pop	{r4, r5, r6, pc}
 800521e:	bf00      	nop
 8005220:	40010400 	.word	0x40010400

08005224 <stm32_exti_enable>:
{
 8005224:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8005226:	2301      	movs	r3, #1
 8005228:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 800522a:	4a04      	ldr	r2, [pc, #16]	; (800523c <stm32_exti_enable+0x18>)
 800522c:	6811      	ldr	r1, [r2, #0]
 800522e:	430b      	orrs	r3, r1
 8005230:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8005232:	4b03      	ldr	r3, [pc, #12]	; (8005240 <stm32_exti_enable+0x1c>)
 8005234:	5618      	ldrsb	r0, [r3, r0]
 8005236:	f7fe fec7 	bl	8003fc8 <arch_irq_enable>
}
 800523a:	bd08      	pop	{r3, pc}
 800523c:	40010400 	.word	0x40010400
 8005240:	080124c8 	.word	0x080124c8

08005244 <stm32_exti_disable>:
	if (line < 32) {
 8005244:	281f      	cmp	r0, #31
 8005246:	dc06      	bgt.n	8005256 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8005248:	2301      	movs	r3, #1
 800524a:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800524c:	4a02      	ldr	r2, [pc, #8]	; (8005258 <stm32_exti_disable+0x14>)
 800524e:	6810      	ldr	r0, [r2, #0]
 8005250:	ea20 0003 	bic.w	r0, r0, r3
 8005254:	6010      	str	r0, [r2, #0]
}
 8005256:	4770      	bx	lr
 8005258:	40010400 	.word	0x40010400

0800525c <stm32_exti_trigger>:
	switch (trigger) {
 800525c:	2903      	cmp	r1, #3
 800525e:	d832      	bhi.n	80052c6 <stm32_exti_trigger+0x6a>
 8005260:	e8df f001 	tbb	[pc, r1]
 8005264:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8005268:	2301      	movs	r3, #1
 800526a:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800526e:	4b16      	ldr	r3, [pc, #88]	; (80052c8 <stm32_exti_trigger+0x6c>)
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	ea22 0200 	bic.w	r2, r2, r0
 8005276:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	ea22 0000 	bic.w	r0, r2, r0
 800527e:	60d8      	str	r0, [r3, #12]
}
 8005280:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8005282:	2301      	movs	r3, #1
 8005284:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005288:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <stm32_exti_trigger+0x6c>)
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	4302      	orrs	r2, r0
 800528e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	ea22 0000 	bic.w	r0, r2, r0
 8005296:	60d8      	str	r0, [r3, #12]
}
 8005298:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800529a:	2301      	movs	r3, #1
 800529c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80052a0:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <stm32_exti_trigger+0x6c>)
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	4302      	orrs	r2, r0
 80052a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	ea22 0000 	bic.w	r0, r2, r0
 80052ae:	6098      	str	r0, [r3, #8]
}
 80052b0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80052b2:	2301      	movs	r3, #1
 80052b4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80052b8:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <stm32_exti_trigger+0x6c>)
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	4302      	orrs	r2, r0
 80052be:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	4310      	orrs	r0, r2
 80052c4:	60d8      	str	r0, [r3, #12]
}
 80052c6:	4770      	bx	lr
 80052c8:	40010400 	.word	0x40010400

080052cc <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80052cc:	4b07      	ldr	r3, [pc, #28]	; (80052ec <stm32_exti_set_callback+0x20>)
 80052ce:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80052d2:	b93b      	cbnz	r3, 80052e4 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <stm32_exti_set_callback+0x20>)
 80052d6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 80052da:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80052de:	6042      	str	r2, [r0, #4]

	return 0;
 80052e0:	2000      	movs	r0, #0
 80052e2:	4770      	bx	lr
		return -EBUSY;
 80052e4:	f06f 000f 	mvn.w	r0, #15
}
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20000e74 	.word	0x20000e74

080052f0 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 80052f0:	4b03      	ldr	r3, [pc, #12]	; (8005300 <stm32_exti_unset_callback+0x10>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 80052f8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80052fc:	605a      	str	r2, [r3, #4]
}
 80052fe:	4770      	bx	lr
 8005300:	20000e74 	.word	0x20000e74

08005304 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 8005304:	b086      	sub	sp, #24
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8005306:	680b      	ldr	r3, [r1, #0]
 8005308:	2b06      	cmp	r3, #6
 800530a:	d848      	bhi.n	800539e <stm32_clock_control_on+0x9a>
 800530c:	e8df f003 	tbb	[pc, r3]
 8005310:	3c261004 	.word	0x3c261004
 8005314:	4731      	.short	0x4731
 8005316:	1b          	.byte	0x1b
 8005317:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8005318:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800531a:	4a22      	ldr	r2, [pc, #136]	; (80053a4 <stm32_clock_control_on+0xa0>)
 800531c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800531e:	4319      	orrs	r1, r3
 8005320:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005322:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005324:	4013      	ands	r3, r2
 8005326:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8005328:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800532a:	2000      	movs	r0, #0
}
 800532c:	b006      	add	sp, #24
 800532e:	4770      	bx	lr
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8005330:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005332:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <stm32_clock_control_on+0xa0>)
 8005334:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8005336:	4319      	orrs	r1, r3
 8005338:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800533a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800533c:	4013      	ands	r3, r2
 800533e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005340:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8005342:	2000      	movs	r0, #0
}
 8005344:	e7f2      	b.n	800532c <stm32_clock_control_on+0x28>
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8005346:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005348:	4a16      	ldr	r2, [pc, #88]	; (80053a4 <stm32_clock_control_on+0xa0>)
 800534a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800534c:	4319      	orrs	r1, r3
 800534e:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005350:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005352:	4013      	ands	r3, r2
 8005354:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8005356:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8005358:	2000      	movs	r0, #0
}
 800535a:	e7e7      	b.n	800532c <stm32_clock_control_on+0x28>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 800535c:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800535e:	4a11      	ldr	r2, [pc, #68]	; (80053a4 <stm32_clock_control_on+0xa0>)
 8005360:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8005362:	4319      	orrs	r1, r3
 8005364:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005366:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005368:	4013      	ands	r3, r2
 800536a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800536c:	9b03      	ldr	r3, [sp, #12]
	return 0;
 800536e:	2000      	movs	r0, #0
}
 8005370:	e7dc      	b.n	800532c <stm32_clock_control_on+0x28>
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8005372:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8005374:	4a0b      	ldr	r2, [pc, #44]	; (80053a4 <stm32_clock_control_on+0xa0>)
 8005376:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8005378:	4319      	orrs	r1, r3
 800537a:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800537c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800537e:	4013      	ands	r3, r2
 8005380:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8005382:	9b04      	ldr	r3, [sp, #16]
	return 0;
 8005384:	2000      	movs	r0, #0
}
 8005386:	e7d1      	b.n	800532c <stm32_clock_control_on+0x28>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8005388:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800538a:	4a06      	ldr	r2, [pc, #24]	; (80053a4 <stm32_clock_control_on+0xa0>)
 800538c:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800538e:	4319      	orrs	r1, r3
 8005390:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005392:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8005394:	4013      	ands	r3, r2
 8005396:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8005398:	9b05      	ldr	r3, [sp, #20]
	return 0;
 800539a:	2000      	movs	r0, #0
}
 800539c:	e7c6      	b.n	800532c <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 800539e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80053a2:	e7c3      	b.n	800532c <stm32_clock_control_on+0x28>
 80053a4:	40021000 	.word	0x40021000

080053a8 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80053a8:	680b      	ldr	r3, [r1, #0]
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	d835      	bhi.n	800541a <stm32_clock_control_off+0x72>
 80053ae:	e8df f003 	tbb	[pc, r3]
 80053b2:	0c04      	.short	0x0c04
 80053b4:	34242c1c 	.word	0x34242c1c
 80053b8:	14          	.byte	0x14
 80053b9:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 80053ba:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80053bc:	4a18      	ldr	r2, [pc, #96]	; (8005420 <stm32_clock_control_off+0x78>)
 80053be:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80053c0:	ea23 0301 	bic.w	r3, r3, r1
 80053c4:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80053c6:	2000      	movs	r0, #0
}
 80053c8:	4770      	bx	lr
		LL_AHB2_GRP1_DisableClock(pclken->enr);
 80053ca:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80053cc:	4a14      	ldr	r2, [pc, #80]	; (8005420 <stm32_clock_control_off+0x78>)
 80053ce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80053d0:	ea23 0301 	bic.w	r3, r3, r1
 80053d4:	64d3      	str	r3, [r2, #76]	; 0x4c
	return 0;
 80053d6:	2000      	movs	r0, #0
}
 80053d8:	4770      	bx	lr
		LL_AHB3_GRP1_DisableClock(pclken->enr);
 80053da:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 80053dc:	4a10      	ldr	r2, [pc, #64]	; (8005420 <stm32_clock_control_off+0x78>)
 80053de:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80053e0:	ea23 0301 	bic.w	r3, r3, r1
 80053e4:	6513      	str	r3, [r2, #80]	; 0x50
	return 0;
 80053e6:	2000      	movs	r0, #0
}
 80053e8:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 80053ea:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80053ec:	4a0c      	ldr	r2, [pc, #48]	; (8005420 <stm32_clock_control_off+0x78>)
 80053ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80053f0:	ea23 0301 	bic.w	r3, r3, r1
 80053f4:	6593      	str	r3, [r2, #88]	; 0x58
	return 0;
 80053f6:	2000      	movs	r0, #0
}
 80053f8:	4770      	bx	lr
		LL_APB1_GRP2_DisableClock(pclken->enr);
 80053fa:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 80053fc:	4a08      	ldr	r2, [pc, #32]	; (8005420 <stm32_clock_control_off+0x78>)
 80053fe:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8005400:	ea23 0301 	bic.w	r3, r3, r1
 8005404:	65d3      	str	r3, [r2, #92]	; 0x5c
	return 0;
 8005406:	2000      	movs	r0, #0
}
 8005408:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 800540a:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800540c:	4a04      	ldr	r2, [pc, #16]	; (8005420 <stm32_clock_control_off+0x78>)
 800540e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8005410:	ea23 0301 	bic.w	r3, r3, r1
 8005414:	6613      	str	r3, [r2, #96]	; 0x60
	return 0;
 8005416:	2000      	movs	r0, #0
}
 8005418:	4770      	bx	lr
	switch (pclken->bus) {
 800541a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800541e:	4770      	bx	lr
 8005420:	40021000 	.word	0x40021000

08005424 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8005424:	b570      	push	{r4, r5, r6, lr}
 8005426:	460c      	mov	r4, r1
 8005428:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 800542a:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <stm32_clock_control_get_subsys_rate+0x3c>)
 800542c:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 800542e:	2101      	movs	r1, #1
 8005430:	4630      	mov	r0, r6
 8005432:	f009 fe31 	bl	800f098 <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	2b06      	cmp	r3, #6
 800543a:	d80e      	bhi.n	800545a <stm32_clock_control_get_subsys_rate+0x36>
 800543c:	e8df f003 	tbb	[pc, r3]
 8005440:	0a070404 	.word	0x0a070404
 8005444:	0d07      	.short	0x0d07
 8005446:	04          	.byte	0x04
 8005447:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 8005448:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800544a:	2000      	movs	r0, #0
}
 800544c:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 800544e:	6028      	str	r0, [r5, #0]
	return 0;
 8005450:	2000      	movs	r0, #0
		break;
 8005452:	e7fb      	b.n	800544c <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 8005454:	6028      	str	r0, [r5, #0]
	return 0;
 8005456:	2000      	movs	r0, #0
		break;
 8005458:	e7f8      	b.n	800544c <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 800545a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800545e:	e7f5      	b.n	800544c <stm32_clock_control_get_subsys_rate+0x28>
 8005460:	200003c0 	.word	0x200003c0

08005464 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005464:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <stm32_clock_switch_to_hsi+0x44>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800546c:	d109      	bne.n	8005482 <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800546e:	4a0e      	ldr	r2, [pc, #56]	; (80054a8 <stm32_clock_switch_to_hsi+0x44>)
 8005470:	6813      	ldr	r3, [r2, #0]
 8005472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005476:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005478:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <stm32_clock_switch_to_hsi+0x44>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005480:	d0fa      	beq.n	8005478 <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005482:	4a09      	ldr	r2, [pc, #36]	; (80054a8 <stm32_clock_switch_to_hsi+0x44>)
 8005484:	6893      	ldr	r3, [r2, #8]
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005490:	6893      	ldr	r3, [r2, #8]
 8005492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005496:	4318      	orrs	r0, r3
 8005498:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800549a:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <stm32_clock_switch_to_hsi+0x44>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d1f9      	bne.n	800549a <stm32_clock_switch_to_hsi+0x36>
	}
}
 80054a6:	4770      	bx	lr
 80054a8:	40021000 	.word	0x40021000

080054ac <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 80054ac:	b510      	push	{r4, lr}
 80054ae:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 80054b0:	a803      	add	r0, sp, #12
 80054b2:	f009 fdec 	bl	800f08e <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80054b6:	f000 f823 	bl	8005500 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 80054ba:	4668      	mov	r0, sp
 80054bc:	f009 fdef 	bl	800f09e <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 80054c0:	2000      	movs	r0, #0
 80054c2:	f7ff ffcf 	bl	8005464 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80054c6:	4c0d      	ldr	r4, [pc, #52]	; (80054fc <stm32_clock_control_init+0x50>)
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ce:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 80054d0:	68e3      	ldr	r3, [r4, #12]
 80054d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80054d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054da:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 80054dc:	a903      	add	r1, sp, #12
 80054de:	4668      	mov	r0, sp
 80054e0:	f005 fc6a 	bl	800adb8 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ea:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	f023 0301 	bic.w	r3, r3, #1
 80054f2:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80054f4:	2000      	movs	r0, #0
 80054f6:	b006      	add	sp, #24
 80054f8:	bd10      	pop	{r4, pc}
 80054fa:	bf00      	nop
 80054fc:	40021000 	.word	0x40021000

08005500 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8005500:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <config_enable_default_clocks+0x1c>)
 8005504:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005506:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800550a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800550c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005512:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005514:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 8005516:	b002      	add	sp, #8
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40021000 	.word	0x40021000

08005520 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 8005520:	b510      	push	{r4, lr}
 8005522:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8005524:	280a      	cmp	r0, #10
 8005526:	d007      	beq.n	8005538 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8005528:	4b07      	ldr	r3, [pc, #28]	; (8005548 <console_out+0x28>)
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 800552e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	4798      	blx	r3

	return c;
}
 8005534:	4620      	mov	r0, r4
 8005536:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 8005538:	4b03      	ldr	r3, [pc, #12]	; (8005548 <console_out+0x28>)
 800553a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800553c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	210d      	movs	r1, #13
 8005542:	4798      	blx	r3
}
 8005544:	e7f0      	b.n	8005528 <console_out+0x8>
 8005546:	bf00      	nop
 8005548:	20000ef4 	.word	0x20000ef4

0800554c <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
 800554c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
 800554e:	4c04      	ldr	r4, [pc, #16]	; (8005560 <uart_console_hook_install+0x14>)
 8005550:	4620      	mov	r0, r4
 8005552:	f7ff fdab 	bl	80050ac <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
 8005556:	4620      	mov	r0, r4
 8005558:	f7fd fa64 	bl	8002a24 <__printk_hook_install>
#endif
}
 800555c:	bd10      	pop	{r4, pc}
 800555e:	bf00      	nop
 8005560:	08005521 	.word	0x08005521

08005564 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8005564:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8005566:	4806      	ldr	r0, [pc, #24]	; (8005580 <uart_console_init+0x1c>)
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <uart_console_init+0x20>)
 800556a:	6018      	str	r0, [r3, #0]
 800556c:	f00a ff4d 	bl	801040a <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 8005570:	b118      	cbz	r0, 800557a <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
 8005572:	f7ff ffeb 	bl	800554c <uart_console_hook_install>

	return 0;
 8005576:	2000      	movs	r0, #0
}
 8005578:	bd08      	pop	{r3, pc}
		return -ENODEV;
 800557a:	f06f 0012 	mvn.w	r0, #18
 800557e:	e7fb      	b.n	8005578 <uart_console_init+0x14>
 8005580:	08011684 	.word	0x08011684
 8005584:	20000ef4 	.word	0x20000ef4

08005588 <dma_stm32_get_priority>:

#endif /* CONFIG_DMA_STM32_SHARED_IRQS */

static int dma_stm32_get_priority(uint8_t priority, uint32_t *ll_priority)
{
	switch (priority) {
 8005588:	2803      	cmp	r0, #3
 800558a:	d815      	bhi.n	80055b8 <dma_stm32_get_priority+0x30>
 800558c:	e8df f000 	tbb	[pc, r0]
 8005590:	0f0a0502 	.word	0x0f0a0502
	case 0x0:
		*ll_priority = LL_DMA_PRIORITY_LOW;
 8005594:	2000      	movs	r0, #0
 8005596:	6008      	str	r0, [r1, #0]
		break;
 8005598:	4770      	bx	lr
	case 0x1:
		*ll_priority = LL_DMA_PRIORITY_MEDIUM;
 800559a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800559e:	600b      	str	r3, [r1, #0]
	default:
		LOG_ERR("Priority error. %d", priority);
		return -EINVAL;
	}

	return 0;
 80055a0:	2000      	movs	r0, #0
		break;
 80055a2:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_HIGH;
 80055a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055a8:	600b      	str	r3, [r1, #0]
	return 0;
 80055aa:	2000      	movs	r0, #0
		break;
 80055ac:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_VERYHIGH;
 80055ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80055b2:	600b      	str	r3, [r1, #0]
	return 0;
 80055b4:	2000      	movs	r0, #0
}
 80055b6:	4770      	bx	lr
{
 80055b8:	b500      	push	{lr}
 80055ba:	b091      	sub	sp, #68	; 0x44
		LOG_ERR("Priority error. %d", priority);
 80055bc:	2201      	movs	r2, #1
 80055be:	f8ad 2008 	strh.w	r2, [sp, #8]
 80055c2:	4b12      	ldr	r3, [pc, #72]	; (800560c <dma_stm32_get_priority+0x84>)
 80055c4:	930e      	str	r3, [sp, #56]	; 0x38
 80055c6:	900f      	str	r0, [sp, #60]	; 0x3c
 80055c8:	2300      	movs	r3, #0
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	2103      	movs	r1, #3
 80055ce:	f88d 1004 	strb.w	r1, [sp, #4]
 80055d2:	9901      	ldr	r1, [sp, #4]
 80055d4:	910d      	str	r1, [sp, #52]	; 0x34
 80055d6:	4619      	mov	r1, r3
 80055d8:	f363 0100 	bfi	r1, r3, #0, #1
 80055dc:	f363 0141 	bfi	r1, r3, #1, #1
 80055e0:	f363 0182 	bfi	r1, r3, #2, #1
 80055e4:	f363 01c5 	bfi	r1, r3, #3, #3
 80055e8:	f362 1188 	bfi	r1, r2, #6, #3
 80055ec:	220c      	movs	r2, #12
 80055ee:	f362 2152 	bfi	r1, r2, #9, #10
 80055f2:	f363 41de 	bfi	r1, r3, #19, #12
 80055f6:	f363 71df 	bfi	r1, r3, #31, #1
 80055fa:	aa0d      	add	r2, sp, #52	; 0x34
 80055fc:	4804      	ldr	r0, [pc, #16]	; (8005610 <dma_stm32_get_priority+0x88>)
 80055fe:	f009 fbb0 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005602:	f06f 0015 	mvn.w	r0, #21
}
 8005606:	b011      	add	sp, #68	; 0x44
 8005608:	f85d fb04 	ldr.w	pc, [sp], #4
 800560c:	080124e8 	.word	0x080124e8
 8005610:	08011994 	.word	0x08011994

08005614 <dma_stm32_get_direction>:

static int dma_stm32_get_direction(enum dma_channel_direction direction,
				   uint32_t *ll_direction)
{
	switch (direction) {
 8005614:	2801      	cmp	r0, #1
 8005616:	d030      	beq.n	800567a <dma_stm32_get_direction+0x66>
 8005618:	2802      	cmp	r0, #2
 800561a:	d032      	beq.n	8005682 <dma_stm32_get_direction+0x6e>
 800561c:	b348      	cbz	r0, 8005672 <dma_stm32_get_direction+0x5e>
{
 800561e:	b500      	push	{lr}
 8005620:	b091      	sub	sp, #68	; 0x44
		break;
	case PERIPHERAL_TO_MEMORY:
		*ll_direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
		break;
	default:
		LOG_ERR("Direction error. %d", direction);
 8005622:	2201      	movs	r2, #1
 8005624:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005628:	4b17      	ldr	r3, [pc, #92]	; (8005688 <dma_stm32_get_direction+0x74>)
 800562a:	930e      	str	r3, [sp, #56]	; 0x38
 800562c:	900f      	str	r0, [sp, #60]	; 0x3c
 800562e:	2300      	movs	r3, #0
 8005630:	9301      	str	r3, [sp, #4]
 8005632:	2103      	movs	r1, #3
 8005634:	f88d 1004 	strb.w	r1, [sp, #4]
 8005638:	9901      	ldr	r1, [sp, #4]
 800563a:	910d      	str	r1, [sp, #52]	; 0x34
 800563c:	4619      	mov	r1, r3
 800563e:	f363 0100 	bfi	r1, r3, #0, #1
 8005642:	f363 0141 	bfi	r1, r3, #1, #1
 8005646:	f363 0182 	bfi	r1, r3, #2, #1
 800564a:	f363 01c5 	bfi	r1, r3, #3, #3
 800564e:	f362 1188 	bfi	r1, r2, #6, #3
 8005652:	220c      	movs	r2, #12
 8005654:	f362 2152 	bfi	r1, r2, #9, #10
 8005658:	f363 41de 	bfi	r1, r3, #19, #12
 800565c:	f363 71df 	bfi	r1, r3, #31, #1
 8005660:	aa0d      	add	r2, sp, #52	; 0x34
 8005662:	480a      	ldr	r0, [pc, #40]	; (800568c <dma_stm32_get_direction+0x78>)
 8005664:	f009 fb7d 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005668:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 800566c:	b011      	add	sp, #68	; 0x44
 800566e:	f85d fb04 	ldr.w	pc, [sp], #4
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_MEMORY;
 8005672:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005676:	600b      	str	r3, [r1, #0]
		break;
 8005678:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 800567a:	2310      	movs	r3, #16
 800567c:	600b      	str	r3, [r1, #0]
	return 0;
 800567e:	2000      	movs	r0, #0
		break;
 8005680:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8005682:	2000      	movs	r0, #0
 8005684:	6008      	str	r0, [r1, #0]
}
 8005686:	4770      	bx	lr
 8005688:	080124fc 	.word	0x080124fc
 800568c:	08011994 	.word	0x08011994

08005690 <dma_stm32_get_memory_increment>:

static int dma_stm32_get_memory_increment(enum dma_addr_adj increment,
					  uint32_t *ll_increment)
{
	switch (increment) {
 8005690:	2801      	cmp	r0, #1
 8005692:	d032      	beq.n	80056fa <dma_stm32_get_memory_increment+0x6a>
 8005694:	2802      	cmp	r0, #2
 8005696:	d02d      	beq.n	80056f4 <dma_stm32_get_memory_increment+0x64>
 8005698:	b348      	cbz	r0, 80056ee <dma_stm32_get_memory_increment+0x5e>
{
 800569a:	b500      	push	{lr}
 800569c:	b091      	sub	sp, #68	; 0x44
		*ll_increment = LL_DMA_MEMORY_NOINCREMENT;
		break;
	case DMA_ADDR_ADJ_DECREMENT:
		return -ENOTSUP;
	default:
		LOG_ERR("Memory increment error. %d", increment);
 800569e:	2201      	movs	r2, #1
 80056a0:	f8ad 2008 	strh.w	r2, [sp, #8]
 80056a4:	4b16      	ldr	r3, [pc, #88]	; (8005700 <dma_stm32_get_memory_increment+0x70>)
 80056a6:	930e      	str	r3, [sp, #56]	; 0x38
 80056a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80056aa:	2300      	movs	r3, #0
 80056ac:	9301      	str	r3, [sp, #4]
 80056ae:	2103      	movs	r1, #3
 80056b0:	f88d 1004 	strb.w	r1, [sp, #4]
 80056b4:	9901      	ldr	r1, [sp, #4]
 80056b6:	910d      	str	r1, [sp, #52]	; 0x34
 80056b8:	4619      	mov	r1, r3
 80056ba:	f363 0100 	bfi	r1, r3, #0, #1
 80056be:	f363 0141 	bfi	r1, r3, #1, #1
 80056c2:	f363 0182 	bfi	r1, r3, #2, #1
 80056c6:	f363 01c5 	bfi	r1, r3, #3, #3
 80056ca:	f362 1188 	bfi	r1, r2, #6, #3
 80056ce:	220c      	movs	r2, #12
 80056d0:	f362 2152 	bfi	r1, r2, #9, #10
 80056d4:	f363 41de 	bfi	r1, r3, #19, #12
 80056d8:	f363 71df 	bfi	r1, r3, #31, #1
 80056dc:	aa0d      	add	r2, sp, #52	; 0x34
 80056de:	4809      	ldr	r0, [pc, #36]	; (8005704 <dma_stm32_get_memory_increment+0x74>)
 80056e0:	f009 fb3f 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80056e4:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 80056e8:	b011      	add	sp, #68	; 0x44
 80056ea:	f85d fb04 	ldr.w	pc, [sp], #4
		*ll_increment = LL_DMA_MEMORY_INCREMENT;
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	600b      	str	r3, [r1, #0]
		break;
 80056f2:	4770      	bx	lr
		*ll_increment = LL_DMA_MEMORY_NOINCREMENT;
 80056f4:	2000      	movs	r0, #0
 80056f6:	6008      	str	r0, [r1, #0]
		break;
 80056f8:	4770      	bx	lr
	switch (increment) {
 80056fa:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80056fe:	4770      	bx	lr
 8005700:	08012510 	.word	0x08012510
 8005704:	08011994 	.word	0x08011994

08005708 <dma_stm32_get_periph_increment>:

static int dma_stm32_get_periph_increment(enum dma_addr_adj increment,
					  uint32_t *ll_increment)
{
	switch (increment) {
 8005708:	2801      	cmp	r0, #1
 800570a:	d032      	beq.n	8005772 <dma_stm32_get_periph_increment+0x6a>
 800570c:	2802      	cmp	r0, #2
 800570e:	d02d      	beq.n	800576c <dma_stm32_get_periph_increment+0x64>
 8005710:	b348      	cbz	r0, 8005766 <dma_stm32_get_periph_increment+0x5e>
{
 8005712:	b500      	push	{lr}
 8005714:	b091      	sub	sp, #68	; 0x44
		*ll_increment = LL_DMA_PERIPH_NOINCREMENT;
		break;
	case DMA_ADDR_ADJ_DECREMENT:
		return -ENOTSUP;
	default:
		LOG_ERR("Periph increment error. %d", increment);
 8005716:	2201      	movs	r2, #1
 8005718:	f8ad 2008 	strh.w	r2, [sp, #8]
 800571c:	4b16      	ldr	r3, [pc, #88]	; (8005778 <dma_stm32_get_periph_increment+0x70>)
 800571e:	930e      	str	r3, [sp, #56]	; 0x38
 8005720:	900f      	str	r0, [sp, #60]	; 0x3c
 8005722:	2300      	movs	r3, #0
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	2103      	movs	r1, #3
 8005728:	f88d 1004 	strb.w	r1, [sp, #4]
 800572c:	9901      	ldr	r1, [sp, #4]
 800572e:	910d      	str	r1, [sp, #52]	; 0x34
 8005730:	4619      	mov	r1, r3
 8005732:	f363 0100 	bfi	r1, r3, #0, #1
 8005736:	f363 0141 	bfi	r1, r3, #1, #1
 800573a:	f363 0182 	bfi	r1, r3, #2, #1
 800573e:	f363 01c5 	bfi	r1, r3, #3, #3
 8005742:	f362 1188 	bfi	r1, r2, #6, #3
 8005746:	220c      	movs	r2, #12
 8005748:	f362 2152 	bfi	r1, r2, #9, #10
 800574c:	f363 41de 	bfi	r1, r3, #19, #12
 8005750:	f363 71df 	bfi	r1, r3, #31, #1
 8005754:	aa0d      	add	r2, sp, #52	; 0x34
 8005756:	4809      	ldr	r0, [pc, #36]	; (800577c <dma_stm32_get_periph_increment+0x74>)
 8005758:	f009 fb03 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800575c:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 8005760:	b011      	add	sp, #68	; 0x44
 8005762:	f85d fb04 	ldr.w	pc, [sp], #4
		*ll_increment = LL_DMA_PERIPH_INCREMENT;
 8005766:	2340      	movs	r3, #64	; 0x40
 8005768:	600b      	str	r3, [r1, #0]
		break;
 800576a:	4770      	bx	lr
		*ll_increment = LL_DMA_PERIPH_NOINCREMENT;
 800576c:	2000      	movs	r0, #0
 800576e:	6008      	str	r0, [r1, #0]
		break;
 8005770:	4770      	bx	lr
	switch (increment) {
 8005772:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8005776:	4770      	bx	lr
 8005778:	0801252c 	.word	0x0801252c
 800577c:	08011994 	.word	0x08011994

08005780 <dma_stm32_irq_handler>:
{
 8005780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005784:	b096      	sub	sp, #88	; 0x58
 8005786:	4606      	mov	r6, r0
 8005788:	460d      	mov	r5, r1
	const struct dma_stm32_config *config = dev->config;
 800578a:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 800578c:	691f      	ldr	r7, [r3, #16]
	stream = &config->streams[id];
 800578e:	699c      	ldr	r4, [r3, #24]
 8005790:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8005794:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	callback_arg = id + STREAM_OFFSET;
 8005798:	f101 0801 	add.w	r8, r1, #1
		stream->busy = false;
 800579c:	2300      	movs	r3, #0
 800579e:	71a3      	strb	r3, [r4, #6]
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 80057a0:	4638      	mov	r0, r7
 80057a2:	f000 fd61 	bl	8006268 <stm32_dma_is_ht_irq_active>
 80057a6:	b178      	cbz	r0, 80057c8 <dma_stm32_irq_handler+0x48>
		if (!stream->hal_override) {
 80057a8:	7963      	ldrb	r3, [r4, #5]
 80057aa:	b143      	cbz	r3, 80057be <dma_stm32_irq_handler+0x3e>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 80057ac:	6965      	ldr	r5, [r4, #20]
 80057ae:	2300      	movs	r3, #0
 80057b0:	4642      	mov	r2, r8
 80057b2:	6921      	ldr	r1, [r4, #16]
 80057b4:	4630      	mov	r0, r6
 80057b6:	47a8      	blx	r5
}
 80057b8:	b016      	add	sp, #88	; 0x58
 80057ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			dma_stm32_clear_ht(dma, id);
 80057be:	4629      	mov	r1, r5
 80057c0:	4638      	mov	r0, r7
 80057c2:	f000 fc59 	bl	8006078 <dma_stm32_clear_ht>
 80057c6:	e7f1      	b.n	80057ac <dma_stm32_irq_handler+0x2c>
	} else if (stm32_dma_is_tc_irq_active(dma, id)) {
 80057c8:	4629      	mov	r1, r5
 80057ca:	4638      	mov	r0, r7
 80057cc:	f000 fd32 	bl	8006234 <stm32_dma_is_tc_irq_active>
 80057d0:	b168      	cbz	r0, 80057ee <dma_stm32_irq_handler+0x6e>
		if (!stream->hal_override) {
 80057d2:	7963      	ldrb	r3, [r4, #5]
 80057d4:	b133      	cbz	r3, 80057e4 <dma_stm32_irq_handler+0x64>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 80057d6:	6965      	ldr	r5, [r4, #20]
 80057d8:	2300      	movs	r3, #0
 80057da:	4642      	mov	r2, r8
 80057dc:	6921      	ldr	r1, [r4, #16]
 80057de:	4630      	mov	r0, r6
 80057e0:	47a8      	blx	r5
 80057e2:	e7e9      	b.n	80057b8 <dma_stm32_irq_handler+0x38>
			dma_stm32_clear_tc(dma, id);
 80057e4:	4629      	mov	r1, r5
 80057e6:	4638      	mov	r0, r7
 80057e8:	f000 fc4e 	bl	8006088 <dma_stm32_clear_tc>
 80057ec:	e7f3      	b.n	80057d6 <dma_stm32_irq_handler+0x56>
	} else if (stm32_dma_is_unexpected_irq_happened(dma, id)) {
 80057ee:	4629      	mov	r1, r5
 80057f0:	4638      	mov	r0, r7
 80057f2:	f009 fdf5 	bl	800f3e0 <stm32_dma_is_unexpected_irq_happened>
 80057f6:	b348      	cbz	r0, 800584c <dma_stm32_irq_handler+0xcc>
		LOG_ERR("Unexpected irq happened.");
 80057f8:	2201      	movs	r2, #1
 80057fa:	f8ad 2008 	strh.w	r2, [sp, #8]
 80057fe:	4b2c      	ldr	r3, [pc, #176]	; (80058b0 <dma_stm32_irq_handler+0x130>)
 8005800:	9314      	str	r3, [sp, #80]	; 0x50
 8005802:	2300      	movs	r3, #0
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	2102      	movs	r1, #2
 8005808:	f88d 1004 	strb.w	r1, [sp, #4]
 800580c:	9901      	ldr	r1, [sp, #4]
 800580e:	9113      	str	r1, [sp, #76]	; 0x4c
 8005810:	4619      	mov	r1, r3
 8005812:	f363 0100 	bfi	r1, r3, #0, #1
 8005816:	f363 0141 	bfi	r1, r3, #1, #1
 800581a:	f363 0182 	bfi	r1, r3, #2, #1
 800581e:	f363 01c5 	bfi	r1, r3, #3, #3
 8005822:	f362 1188 	bfi	r1, r2, #6, #3
 8005826:	2208      	movs	r2, #8
 8005828:	f362 2152 	bfi	r1, r2, #9, #10
 800582c:	f363 41de 	bfi	r1, r3, #19, #12
 8005830:	f363 71df 	bfi	r1, r3, #31, #1
 8005834:	aa13      	add	r2, sp, #76	; 0x4c
 8005836:	481f      	ldr	r0, [pc, #124]	; (80058b4 <dma_stm32_irq_handler+0x134>)
 8005838:	f009 fa93 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		stream->dma_callback(dev, stream->user_data,
 800583c:	6965      	ldr	r5, [r4, #20]
 800583e:	f06f 0304 	mvn.w	r3, #4
 8005842:	4642      	mov	r2, r8
 8005844:	6921      	ldr	r1, [r4, #16]
 8005846:	4630      	mov	r0, r6
 8005848:	47a8      	blx	r5
 800584a:	e7b5      	b.n	80057b8 <dma_stm32_irq_handler+0x38>
		LOG_ERR("Transfer Error.");
 800584c:	2201      	movs	r2, #1
 800584e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005852:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <dma_stm32_irq_handler+0x138>)
 8005854:	930e      	str	r3, [sp, #56]	; 0x38
 8005856:	2300      	movs	r3, #0
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	2102      	movs	r1, #2
 800585c:	f88d 1004 	strb.w	r1, [sp, #4]
 8005860:	9901      	ldr	r1, [sp, #4]
 8005862:	910d      	str	r1, [sp, #52]	; 0x34
 8005864:	4619      	mov	r1, r3
 8005866:	f363 0100 	bfi	r1, r3, #0, #1
 800586a:	f363 0141 	bfi	r1, r3, #1, #1
 800586e:	f363 0182 	bfi	r1, r3, #2, #1
 8005872:	f363 01c5 	bfi	r1, r3, #3, #3
 8005876:	f362 1188 	bfi	r1, r2, #6, #3
 800587a:	2208      	movs	r2, #8
 800587c:	f362 2152 	bfi	r1, r2, #9, #10
 8005880:	f363 41de 	bfi	r1, r3, #19, #12
 8005884:	f363 71df 	bfi	r1, r3, #31, #1
 8005888:	aa0d      	add	r2, sp, #52	; 0x34
 800588a:	480a      	ldr	r0, [pc, #40]	; (80058b4 <dma_stm32_irq_handler+0x134>)
 800588c:	f009 fa69 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		dma_stm32_dump_stream_irq(dev, id);
 8005890:	4629      	mov	r1, r5
 8005892:	4630      	mov	r0, r6
 8005894:	f009 fc45 	bl	800f122 <dma_stm32_dump_stream_irq>
		dma_stm32_clear_stream_irq(dev, id);
 8005898:	4629      	mov	r1, r5
 800589a:	4630      	mov	r0, r6
 800589c:	f009 fc47 	bl	800f12e <dma_stm32_clear_stream_irq>
		stream->dma_callback(dev, stream->user_data,
 80058a0:	6965      	ldr	r5, [r4, #20]
 80058a2:	f06f 0304 	mvn.w	r3, #4
 80058a6:	4642      	mov	r2, r8
 80058a8:	6921      	ldr	r1, [r4, #16]
 80058aa:	4630      	mov	r0, r6
 80058ac:	47a8      	blx	r5
}
 80058ae:	e783      	b.n	80057b8 <dma_stm32_irq_handler+0x38>
 80058b0:	08012548 	.word	0x08012548
 80058b4:	08011994 	.word	0x08011994
 80058b8:	08012564 	.word	0x08012564

080058bc <dma_stm32_get_status>:
	return 0;
}

DMA_STM32_EXPORT_API int dma_stm32_get_status(const struct device *dev,
				uint32_t id, struct dma_status *stat)
{
 80058bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c0:	4614      	mov	r4, r2
	const struct dma_stm32_config *config = dev->config;
 80058c2:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80058c4:	691e      	ldr	r6, [r3, #16]
	struct dma_stm32_stream *stream;

	/* give channel from index 0 */
	id = id - STREAM_OFFSET;
 80058c6:	1e48      	subs	r0, r1, #1
	if (id >= config->max_streams) {
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	4282      	cmp	r2, r0
 80058cc:	d916      	bls.n	80058fc <dma_stm32_get_status+0x40>
		return -EINVAL;
	}

	stream = &config->streams[id];
 80058ce:	699f      	ldr	r7, [r3, #24]
 80058d0:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80058d4:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80058d8:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
	stat->pending_length = LL_DMA_GetDataLength(dma, dma_stm32_id_to_stream(id));
 80058dc:	f000 fbc6 	bl	800606c <dma_stm32_id_to_stream>
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80058e0:	4b08      	ldr	r3, [pc, #32]	; (8005904 <dma_stm32_get_status+0x48>)
 80058e2:	5c1b      	ldrb	r3, [r3, r0]
 80058e4:	441e      	add	r6, r3
 80058e6:	6873      	ldr	r3, [r6, #4]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	6063      	str	r3, [r4, #4]
	stat->dir = stream->direction;
 80058ec:	f817 3008 	ldrb.w	r3, [r7, r8]
 80058f0:	7063      	strb	r3, [r4, #1]
	stat->busy = stream->busy;
 80058f2:	79ab      	ldrb	r3, [r5, #6]
 80058f4:	7023      	strb	r3, [r4, #0]

	return 0;
 80058f6:	2000      	movs	r0, #0
}
 80058f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
 80058fc:	f06f 0015 	mvn.w	r0, #21
 8005900:	e7fa      	b.n	80058f8 <dma_stm32_get_status+0x3c>
 8005902:	bf00      	nop
 8005904:	080126f4 	.word	0x080126f4

08005908 <dma_stm32_stop>:
{
 8005908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct dma_stm32_config *config = dev->config;
 800590a:	6842      	ldr	r2, [r0, #4]
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 800590c:	6996      	ldr	r6, [r2, #24]
 800590e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	3b18      	subs	r3, #24
 8005916:	441e      	add	r6, r3
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8005918:	6917      	ldr	r7, [r2, #16]
	id = id - STREAM_OFFSET;
 800591a:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 800591c:	6953      	ldr	r3, [r2, #20]
 800591e:	42a3      	cmp	r3, r4
 8005920:	d914      	bls.n	800594c <dma_stm32_stop+0x44>
 8005922:	4605      	mov	r5, r0
	LL_DMA_DisableIT_TC(dma, dma_stm32_id_to_stream(id));
 8005924:	4620      	mov	r0, r4
 8005926:	f000 fba1 	bl	800606c <dma_stm32_id_to_stream>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 800592a:	4b0a      	ldr	r3, [pc, #40]	; (8005954 <dma_stm32_stop+0x4c>)
 800592c:	5c1a      	ldrb	r2, [r3, r0]
 800592e:	58bb      	ldr	r3, [r7, r2]
 8005930:	f023 0302 	bic.w	r3, r3, #2
 8005934:	50bb      	str	r3, [r7, r2]
	dma_stm32_disable_stream(dma, id);
 8005936:	4621      	mov	r1, r4
 8005938:	4638      	mov	r0, r7
 800593a:	f009 fc2b 	bl	800f194 <dma_stm32_disable_stream>
	dma_stm32_clear_stream_irq(dev, id);
 800593e:	4621      	mov	r1, r4
 8005940:	4628      	mov	r0, r5
 8005942:	f009 fbf4 	bl	800f12e <dma_stm32_clear_stream_irq>
	stream->busy = false;
 8005946:	2000      	movs	r0, #0
 8005948:	71b0      	strb	r0, [r6, #6]
}
 800594a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
 800594c:	f06f 0015 	mvn.w	r0, #21
 8005950:	e7fb      	b.n	800594a <dma_stm32_stop+0x42>
 8005952:	bf00      	nop
 8005954:	080126f4 	.word	0x080126f4

08005958 <dma_stm32_reload>:
{
 8005958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	461f      	mov	r7, r3
	const struct dma_stm32_config *config = dev->config;
 800595e:	6840      	ldr	r0, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8005960:	6906      	ldr	r6, [r0, #16]
	id = id - STREAM_OFFSET;
 8005962:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 8005964:	6943      	ldr	r3, [r0, #20]
 8005966:	42a3      	cmp	r3, r4
 8005968:	d964      	bls.n	8005a34 <dma_stm32_reload+0xdc>
 800596a:	4690      	mov	r8, r2
	stream = &config->streams[id];
 800596c:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8005970:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8005974:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 8005978:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
	if (dma_stm32_disable_stream(dma, id) != 0) {
 800597c:	4621      	mov	r1, r4
 800597e:	4630      	mov	r0, r6
 8005980:	f009 fc08 	bl	800f194 <dma_stm32_disable_stream>
 8005984:	4681      	mov	r9, r0
 8005986:	2800      	cmp	r0, #0
 8005988:	d157      	bne.n	8005a3a <dma_stm32_reload+0xe2>
	switch (stream->direction) {
 800598a:	f85a 100b 	ldr.w	r1, [sl, fp]
 800598e:	2901      	cmp	r1, #1
 8005990:	d007      	beq.n	80059a2 <dma_stm32_reload+0x4a>
 8005992:	2902      	cmp	r1, #2
 8005994:	d02c      	beq.n	80059f0 <dma_stm32_reload+0x98>
 8005996:	b359      	cbz	r1, 80059f0 <dma_stm32_reload+0x98>
 8005998:	f06f 0915 	mvn.w	r9, #21
}
 800599c:	4648      	mov	r0, r9
 800599e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), src);
 80059a2:	4620      	mov	r0, r4
 80059a4:	f000 fb62 	bl	800606c <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80059a8:	f8df a094 	ldr.w	sl, [pc, #148]	; 8005a40 <dma_stm32_reload+0xe8>
 80059ac:	f81a 3000 	ldrb.w	r3, [sl, r0]
 80059b0:	4433      	add	r3, r6
 80059b2:	f8c3 800c 	str.w	r8, [r3, #12]
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), dst);
 80059b6:	4620      	mov	r0, r4
 80059b8:	f000 fb58 	bl	800606c <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80059bc:	f81a 3000 	ldrb.w	r3, [sl, r0]
 80059c0:	4433      	add	r3, r6
 80059c2:	609f      	str	r7, [r3, #8]
	if (stream->source_periph) {
 80059c4:	792b      	ldrb	r3, [r5, #4]
 80059c6:	b32b      	cbz	r3, 8005a14 <dma_stm32_reload+0xbc>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 fb4f 	bl	800606c <dma_stm32_id_to_stream>
				     size / stream->src_size);
 80059ce:	68ab      	ldr	r3, [r5, #8]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 80059d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059d2:	fbb2 f3f3 	udiv	r3, r2, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80059d6:	4a1a      	ldr	r2, [pc, #104]	; (8005a40 <dma_stm32_reload+0xe8>)
 80059d8:	5c11      	ldrb	r1, [r2, r0]
 80059da:	4431      	add	r1, r6
 80059dc:	684a      	ldr	r2, [r1, #4]
 80059de:	0c12      	lsrs	r2, r2, #16
 80059e0:	0412      	lsls	r2, r2, #16
 80059e2:	4313      	orrs	r3, r2
 80059e4:	604b      	str	r3, [r1, #4]
	stm32_dma_enable_stream(dma, id);
 80059e6:	4621      	mov	r1, r4
 80059e8:	4630      	mov	r0, r6
 80059ea:	f000 fc57 	bl	800629c <stm32_dma_enable_stream>
	return 0;
 80059ee:	e7d5      	b.n	800599c <dma_stm32_reload+0x44>
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), src);
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 fb3b 	bl	800606c <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80059f6:	f8df a048 	ldr.w	sl, [pc, #72]	; 8005a40 <dma_stm32_reload+0xe8>
 80059fa:	f81a 3000 	ldrb.w	r3, [sl, r0]
 80059fe:	4433      	add	r3, r6
 8005a00:	f8c3 8008 	str.w	r8, [r3, #8]
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), dst);
 8005a04:	4620      	mov	r0, r4
 8005a06:	f000 fb31 	bl	800606c <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8005a0a:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8005a0e:	4433      	add	r3, r6
 8005a10:	60df      	str	r7, [r3, #12]
}
 8005a12:	e7d7      	b.n	80059c4 <dma_stm32_reload+0x6c>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8005a14:	4620      	mov	r0, r4
 8005a16:	f000 fb29 	bl	800606c <dma_stm32_id_to_stream>
				     size / stream->dst_size);
 8005a1a:	68eb      	ldr	r3, [r5, #12]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8005a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a1e:	fbb2 f3f3 	udiv	r3, r2, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8005a22:	4a07      	ldr	r2, [pc, #28]	; (8005a40 <dma_stm32_reload+0xe8>)
 8005a24:	5c11      	ldrb	r1, [r2, r0]
 8005a26:	4431      	add	r1, r6
 8005a28:	684a      	ldr	r2, [r1, #4]
 8005a2a:	0c12      	lsrs	r2, r2, #16
 8005a2c:	0412      	lsls	r2, r2, #16
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	604b      	str	r3, [r1, #4]
}
 8005a32:	e7d8      	b.n	80059e6 <dma_stm32_reload+0x8e>
		return -EINVAL;
 8005a34:	f06f 0915 	mvn.w	r9, #21
 8005a38:	e7b0      	b.n	800599c <dma_stm32_reload+0x44>
		return -EBUSY;
 8005a3a:	f06f 090f 	mvn.w	r9, #15
 8005a3e:	e7ad      	b.n	800599c <dma_stm32_reload+0x44>
 8005a40:	080126f4 	.word	0x080126f4

08005a44 <dma_stm32_configure>:
{
 8005a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a48:	b0d1      	sub	sp, #324	; 0x144
 8005a4a:	4607      	mov	r7, r0
 8005a4c:	460d      	mov	r5, r1
 8005a4e:	4614      	mov	r4, r2
	const struct dma_stm32_config *dev_config = dev->config;
 8005a50:	f8d0 b004 	ldr.w	fp, [r0, #4]
				&dev_config->streams[id - STREAM_OFFSET];
 8005a54:	f8db 9018 	ldr.w	r9, [fp, #24]
 8005a58:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8005a5c:	00f6      	lsls	r6, r6, #3
 8005a5e:	3e18      	subs	r6, #24
	struct dma_stm32_stream *stream =
 8005a60:	eb09 0806 	add.w	r8, r9, r6
	DMA_TypeDef *dma = (DMA_TypeDef *)dev_config->base;
 8005a64:	f8db a010 	ldr.w	sl, [fp, #16]
	LL_DMA_StructInit(&DMA_InitStruct);
 8005a68:	a809      	add	r0, sp, #36	; 0x24
 8005a6a:	f00a fcb0 	bl	80103ce <LL_DMA_StructInit>
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 8005a6e:	8863      	ldrh	r3, [r4, #2]
 8005a70:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a74:	f5b3 6ffe 	cmp.w	r3, #2032	; 0x7f0
 8005a78:	f000 809c 	beq.w	8005bb4 <dma_stm32_configure+0x170>
 8005a7c:	3d01      	subs	r5, #1
	if (id >= dev_config->max_streams) {
 8005a7e:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005a82:	42ab      	cmp	r3, r5
 8005a84:	f240 80a6 	bls.w	8005bd4 <dma_stm32_configure+0x190>
	if (stream->busy) {
 8005a88:	f898 3006 	ldrb.w	r3, [r8, #6]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f040 80c7 	bne.w	8005c20 <dma_stm32_configure+0x1dc>
	if (dma_stm32_disable_stream(dma, id) != 0) {
 8005a92:	4629      	mov	r1, r5
 8005a94:	4650      	mov	r0, sl
 8005a96:	f009 fb7d 	bl	800f194 <dma_stm32_disable_stream>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	f040 80e6 	bne.w	8005c6c <dma_stm32_configure+0x228>
	dma_stm32_clear_stream_irq(dev, id);
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	f009 fb43 	bl	800f12e <dma_stm32_clear_stream_irq>
	if (config->head_block->block_size > DMA_STM32_MAX_DATA_ITEMS) {
 8005aa8:	6922      	ldr	r2, [r4, #16]
 8005aaa:	6953      	ldr	r3, [r2, #20]
 8005aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab0:	f080 8102 	bcs.w	8005cb8 <dma_stm32_configure+0x274>
	if ((config->dest_data_size != config->source_data_size)) {
 8005ab4:	88e1      	ldrh	r1, [r4, #6]
 8005ab6:	88a3      	ldrh	r3, [r4, #4]
 8005ab8:	4299      	cmp	r1, r3
 8005aba:	f040 8125 	bne.w	8005d08 <dma_stm32_configure+0x2c4>
	if (config->source_data_size != 4U &&
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d004      	beq.n	8005acc <dma_stm32_configure+0x88>
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d002      	beq.n	8005acc <dma_stm32_configure+0x88>
	    config->source_data_size != 2U &&
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	f040 8143 	bne.w	8005d52 <dma_stm32_configure+0x30e>
	if (config->head_block->source_reload_en !=
 8005acc:	7f13      	ldrb	r3, [r2, #28]
 8005ace:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8005ad2:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
 8005ad6:	f040 8163 	bne.w	8005da0 <dma_stm32_configure+0x35c>
	stream->busy		= true;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f888 3006 	strb.w	r3, [r8, #6]
	stream->dma_callback	= config->dma_callback;
 8005ae0:	69a3      	ldr	r3, [r4, #24]
 8005ae2:	f8c8 3014 	str.w	r3, [r8, #20]
	stream->direction	= config->channel_direction;
 8005ae6:	8823      	ldrh	r3, [r4, #0]
 8005ae8:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8005aec:	f849 3006 	str.w	r3, [r9, r6]
	stream->user_data       = config->user_data;
 8005af0:	6963      	ldr	r3, [r4, #20]
 8005af2:	f8c8 3010 	str.w	r3, [r8, #16]
	stream->src_size	= config->source_data_size;
 8005af6:	88a3      	ldrh	r3, [r4, #4]
 8005af8:	f8c8 3008 	str.w	r3, [r8, #8]
	stream->dst_size	= config->dest_data_size;
 8005afc:	88e3      	ldrh	r3, [r4, #6]
 8005afe:	f8c8 300c 	str.w	r3, [r8, #12]
	if ((config->head_block->source_address == 0)) {
 8005b02:	6923      	ldr	r3, [r4, #16]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 816f 	beq.w	8005dea <dma_stm32_configure+0x3a6>
	if ((config->head_block->dest_address == 0)) {
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 818d 	beq.w	8005e30 <dma_stm32_configure+0x3ec>
	if (stream->direction == MEMORY_TO_PERIPHERAL) {
 8005b16:	f859 3006 	ldr.w	r3, [r9, r6]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	f000 81ab 	beq.w	8005e76 <dma_stm32_configure+0x432>
					config->head_block->source_address;
 8005b20:	6923      	ldr	r3, [r4, #16]
 8005b22:	681a      	ldr	r2, [r3, #0]
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 8005b24:	9209      	str	r2, [sp, #36]	; 0x24
					config->head_block->dest_address;
 8005b26:	685b      	ldr	r3, [r3, #4]
		DMA_InitStruct.MemoryOrM2MDstAddress =
 8005b28:	930a      	str	r3, [sp, #40]	; 0x28
	ret = dma_stm32_get_priority(config->channel_priority,
 8005b2a:	6820      	ldr	r0, [r4, #0]
 8005b2c:	a913      	add	r1, sp, #76	; 0x4c
 8005b2e:	f3c0 3083 	ubfx	r0, r0, #14, #4
 8005b32:	f7ff fd29 	bl	8005588 <dma_stm32_get_priority>
	if (ret < 0) {
 8005b36:	1e07      	subs	r7, r0, #0
 8005b38:	db48      	blt.n	8005bcc <dma_stm32_configure+0x188>
	ret = dma_stm32_get_direction(config->channel_direction,
 8005b3a:	8820      	ldrh	r0, [r4, #0]
 8005b3c:	a90b      	add	r1, sp, #44	; 0x2c
 8005b3e:	f3c0 10c2 	ubfx	r0, r0, #7, #3
 8005b42:	f7ff fd67 	bl	8005614 <dma_stm32_get_direction>
	if (ret < 0) {
 8005b46:	1e07      	subs	r7, r0, #0
 8005b48:	db40      	blt.n	8005bcc <dma_stm32_configure+0x188>
	switch (config->channel_direction) {
 8005b4a:	8823      	ldrh	r3, [r4, #0]
 8005b4c:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	f000 821b 	beq.w	8005f8c <dma_stm32_configure+0x548>
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	f000 81aa 	beq.w	8005eb0 <dma_stm32_configure+0x46c>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 81a7 	beq.w	8005eb0 <dma_stm32_configure+0x46c>
		LOG_ERR("Channel direction error (%d).",
 8005b62:	2201      	movs	r2, #1
 8005b64:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005b68:	4bc6      	ldr	r3, [pc, #792]	; (8005e84 <dma_stm32_configure+0x440>)
 8005b6a:	932a      	str	r3, [sp, #168]	; 0xa8
 8005b6c:	8823      	ldrh	r3, [r4, #0]
 8005b6e:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8005b72:	932b      	str	r3, [sp, #172]	; 0xac
 8005b74:	2300      	movs	r3, #0
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	2103      	movs	r1, #3
 8005b7a:	f88d 1000 	strb.w	r1, [sp]
 8005b7e:	9900      	ldr	r1, [sp, #0]
 8005b80:	9129      	str	r1, [sp, #164]	; 0xa4
 8005b82:	4619      	mov	r1, r3
 8005b84:	f363 0100 	bfi	r1, r3, #0, #1
 8005b88:	f363 0141 	bfi	r1, r3, #1, #1
 8005b8c:	f363 0182 	bfi	r1, r3, #2, #1
 8005b90:	f363 01c5 	bfi	r1, r3, #3, #3
 8005b94:	f362 1188 	bfi	r1, r2, #6, #3
 8005b98:	220c      	movs	r2, #12
 8005b9a:	f362 2152 	bfi	r1, r2, #9, #10
 8005b9e:	f363 41de 	bfi	r1, r3, #19, #12
 8005ba2:	f363 71df 	bfi	r1, r3, #31, #1
 8005ba6:	aa29      	add	r2, sp, #164	; 0xa4
 8005ba8:	48b7      	ldr	r0, [pc, #732]	; (8005e88 <dma_stm32_configure+0x444>)
 8005baa:	f009 f8da 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005bae:	f06f 0715 	mvn.w	r7, #21
 8005bb2:	e00b      	b.n	8005bcc <dma_stm32_configure+0x188>
		stream->busy = true;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	f888 3006 	strb.w	r3, [r8, #6]
		stream->hal_override = true;
 8005bba:	f888 3005 	strb.w	r3, [r8, #5]
		stream->dma_callback = config->dma_callback;
 8005bbe:	69a3      	ldr	r3, [r4, #24]
 8005bc0:	f8c8 3014 	str.w	r3, [r8, #20]
		stream->user_data = config->user_data;
 8005bc4:	6963      	ldr	r3, [r4, #20]
 8005bc6:	f8c8 3010 	str.w	r3, [r8, #16]
		return 0;
 8005bca:	2700      	movs	r7, #0
}
 8005bcc:	4638      	mov	r0, r7
 8005bce:	b051      	add	sp, #324	; 0x144
 8005bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("cannot configure the dma stream %d.", id);
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005bda:	4bac      	ldr	r3, [pc, #688]	; (8005e8c <dma_stm32_configure+0x448>)
 8005bdc:	934e      	str	r3, [sp, #312]	; 0x138
 8005bde:	954f      	str	r5, [sp, #316]	; 0x13c
 8005be0:	2300      	movs	r3, #0
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	2103      	movs	r1, #3
 8005be6:	f88d 1000 	strb.w	r1, [sp]
 8005bea:	9900      	ldr	r1, [sp, #0]
 8005bec:	914d      	str	r1, [sp, #308]	; 0x134
 8005bee:	4619      	mov	r1, r3
 8005bf0:	f363 0100 	bfi	r1, r3, #0, #1
 8005bf4:	f363 0141 	bfi	r1, r3, #1, #1
 8005bf8:	f363 0182 	bfi	r1, r3, #2, #1
 8005bfc:	f363 01c5 	bfi	r1, r3, #3, #3
 8005c00:	f362 1188 	bfi	r1, r2, #6, #3
 8005c04:	220c      	movs	r2, #12
 8005c06:	f362 2152 	bfi	r1, r2, #9, #10
 8005c0a:	f363 41de 	bfi	r1, r3, #19, #12
 8005c0e:	f363 71df 	bfi	r1, r3, #31, #1
 8005c12:	aa4d      	add	r2, sp, #308	; 0x134
 8005c14:	489c      	ldr	r0, [pc, #624]	; (8005e88 <dma_stm32_configure+0x444>)
 8005c16:	f009 f8a4 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005c1a:	f06f 0715 	mvn.w	r7, #21
 8005c1e:	e7d5      	b.n	8005bcc <dma_stm32_configure+0x188>
		LOG_ERR("dma stream %d is busy.", id);
 8005c20:	2201      	movs	r2, #1
 8005c22:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005c26:	4b9a      	ldr	r3, [pc, #616]	; (8005e90 <dma_stm32_configure+0x44c>)
 8005c28:	9348      	str	r3, [sp, #288]	; 0x120
 8005c2a:	9549      	str	r5, [sp, #292]	; 0x124
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	2103      	movs	r1, #3
 8005c32:	f88d 1000 	strb.w	r1, [sp]
 8005c36:	9900      	ldr	r1, [sp, #0]
 8005c38:	9147      	str	r1, [sp, #284]	; 0x11c
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	f363 0100 	bfi	r1, r3, #0, #1
 8005c40:	f363 0141 	bfi	r1, r3, #1, #1
 8005c44:	f363 0182 	bfi	r1, r3, #2, #1
 8005c48:	f363 01c5 	bfi	r1, r3, #3, #3
 8005c4c:	f362 1188 	bfi	r1, r2, #6, #3
 8005c50:	220c      	movs	r2, #12
 8005c52:	f362 2152 	bfi	r1, r2, #9, #10
 8005c56:	f363 41de 	bfi	r1, r3, #19, #12
 8005c5a:	f363 71df 	bfi	r1, r3, #31, #1
 8005c5e:	aa47      	add	r2, sp, #284	; 0x11c
 8005c60:	4889      	ldr	r0, [pc, #548]	; (8005e88 <dma_stm32_configure+0x444>)
 8005c62:	f009 f87e 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EBUSY;
 8005c66:	f06f 070f 	mvn.w	r7, #15
 8005c6a:	e7af      	b.n	8005bcc <dma_stm32_configure+0x188>
		LOG_ERR("could not disable dma stream %d.", id);
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005c72:	4b88      	ldr	r3, [pc, #544]	; (8005e94 <dma_stm32_configure+0x450>)
 8005c74:	9342      	str	r3, [sp, #264]	; 0x108
 8005c76:	9543      	str	r5, [sp, #268]	; 0x10c
 8005c78:	2300      	movs	r3, #0
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	2103      	movs	r1, #3
 8005c7e:	f88d 1000 	strb.w	r1, [sp]
 8005c82:	9900      	ldr	r1, [sp, #0]
 8005c84:	9141      	str	r1, [sp, #260]	; 0x104
 8005c86:	4619      	mov	r1, r3
 8005c88:	f363 0100 	bfi	r1, r3, #0, #1
 8005c8c:	f363 0141 	bfi	r1, r3, #1, #1
 8005c90:	f363 0182 	bfi	r1, r3, #2, #1
 8005c94:	f363 01c5 	bfi	r1, r3, #3, #3
 8005c98:	f362 1188 	bfi	r1, r2, #6, #3
 8005c9c:	220c      	movs	r2, #12
 8005c9e:	f362 2152 	bfi	r1, r2, #9, #10
 8005ca2:	f363 41de 	bfi	r1, r3, #19, #12
 8005ca6:	f363 71df 	bfi	r1, r3, #31, #1
 8005caa:	aa41      	add	r2, sp, #260	; 0x104
 8005cac:	4876      	ldr	r0, [pc, #472]	; (8005e88 <dma_stm32_configure+0x444>)
 8005cae:	f009 f858 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EBUSY;
 8005cb2:	f06f 070f 	mvn.w	r7, #15
 8005cb6:	e789      	b.n	8005bcc <dma_stm32_configure+0x188>
		LOG_ERR("Data size too big: %d\n",
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005cbe:	4b76      	ldr	r3, [pc, #472]	; (8005e98 <dma_stm32_configure+0x454>)
 8005cc0:	933c      	str	r3, [sp, #240]	; 0xf0
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	933d      	str	r3, [sp, #244]	; 0xf4
 8005cc8:	2300      	movs	r3, #0
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	2103      	movs	r1, #3
 8005cce:	f88d 1000 	strb.w	r1, [sp]
 8005cd2:	9900      	ldr	r1, [sp, #0]
 8005cd4:	913b      	str	r1, [sp, #236]	; 0xec
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	f363 0100 	bfi	r1, r3, #0, #1
 8005cdc:	f363 0141 	bfi	r1, r3, #1, #1
 8005ce0:	f363 0182 	bfi	r1, r3, #2, #1
 8005ce4:	f363 01c5 	bfi	r1, r3, #3, #3
 8005ce8:	f362 1188 	bfi	r1, r2, #6, #3
 8005cec:	220c      	movs	r2, #12
 8005cee:	f362 2152 	bfi	r1, r2, #9, #10
 8005cf2:	f363 41de 	bfi	r1, r3, #19, #12
 8005cf6:	f363 71df 	bfi	r1, r3, #31, #1
 8005cfa:	aa3b      	add	r2, sp, #236	; 0xec
 8005cfc:	4862      	ldr	r0, [pc, #392]	; (8005e88 <dma_stm32_configure+0x444>)
 8005cfe:	f009 f830 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005d02:	f06f 0715 	mvn.w	r7, #21
 8005d06:	e761      	b.n	8005bcc <dma_stm32_configure+0x188>
		LOG_ERR("source and dest data size differ.");
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005d0e:	4b63      	ldr	r3, [pc, #396]	; (8005e9c <dma_stm32_configure+0x458>)
 8005d10:	9336      	str	r3, [sp, #216]	; 0xd8
 8005d12:	2300      	movs	r3, #0
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	2102      	movs	r1, #2
 8005d18:	f88d 1000 	strb.w	r1, [sp]
 8005d1c:	9900      	ldr	r1, [sp, #0]
 8005d1e:	9135      	str	r1, [sp, #212]	; 0xd4
 8005d20:	4619      	mov	r1, r3
 8005d22:	f363 0100 	bfi	r1, r3, #0, #1
 8005d26:	f363 0141 	bfi	r1, r3, #1, #1
 8005d2a:	f363 0182 	bfi	r1, r3, #2, #1
 8005d2e:	f363 01c5 	bfi	r1, r3, #3, #3
 8005d32:	f362 1188 	bfi	r1, r2, #6, #3
 8005d36:	2208      	movs	r2, #8
 8005d38:	f362 2152 	bfi	r1, r2, #9, #10
 8005d3c:	f363 41de 	bfi	r1, r3, #19, #12
 8005d40:	f363 71df 	bfi	r1, r3, #31, #1
 8005d44:	aa35      	add	r2, sp, #212	; 0xd4
 8005d46:	4850      	ldr	r0, [pc, #320]	; (8005e88 <dma_stm32_configure+0x444>)
 8005d48:	f009 f80b 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005d4c:	f06f 0715 	mvn.w	r7, #21
 8005d50:	e73c      	b.n	8005bcc <dma_stm32_configure+0x188>
		LOG_ERR("source and dest unit size error, %d",
 8005d52:	2201      	movs	r2, #1
 8005d54:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005d58:	4b51      	ldr	r3, [pc, #324]	; (8005ea0 <dma_stm32_configure+0x45c>)
 8005d5a:	9318      	str	r3, [sp, #96]	; 0x60
 8005d5c:	88a3      	ldrh	r3, [r4, #4]
 8005d5e:	9319      	str	r3, [sp, #100]	; 0x64
 8005d60:	2300      	movs	r3, #0
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	2103      	movs	r1, #3
 8005d66:	f88d 1000 	strb.w	r1, [sp]
 8005d6a:	9900      	ldr	r1, [sp, #0]
 8005d6c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005d6e:	4619      	mov	r1, r3
 8005d70:	f363 0100 	bfi	r1, r3, #0, #1
 8005d74:	f363 0141 	bfi	r1, r3, #1, #1
 8005d78:	f363 0182 	bfi	r1, r3, #2, #1
 8005d7c:	f363 01c5 	bfi	r1, r3, #3, #3
 8005d80:	f362 1188 	bfi	r1, r2, #6, #3
 8005d84:	220c      	movs	r2, #12
 8005d86:	f362 2152 	bfi	r1, r2, #9, #10
 8005d8a:	f363 41de 	bfi	r1, r3, #19, #12
 8005d8e:	f363 71df 	bfi	r1, r3, #31, #1
 8005d92:	aa17      	add	r2, sp, #92	; 0x5c
 8005d94:	483c      	ldr	r0, [pc, #240]	; (8005e88 <dma_stm32_configure+0x444>)
 8005d96:	f008 ffe4 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005d9a:	f06f 0715 	mvn.w	r7, #21
 8005d9e:	e715      	b.n	8005bcc <dma_stm32_configure+0x188>
		LOG_ERR("source_reload_en and dest_reload_en must "
 8005da0:	2201      	movs	r2, #1
 8005da2:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005da6:	4b3f      	ldr	r3, [pc, #252]	; (8005ea4 <dma_stm32_configure+0x460>)
 8005da8:	9330      	str	r3, [sp, #192]	; 0xc0
 8005daa:	2300      	movs	r3, #0
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	2102      	movs	r1, #2
 8005db0:	f88d 1000 	strb.w	r1, [sp]
 8005db4:	9900      	ldr	r1, [sp, #0]
 8005db6:	912f      	str	r1, [sp, #188]	; 0xbc
 8005db8:	4619      	mov	r1, r3
 8005dba:	f363 0100 	bfi	r1, r3, #0, #1
 8005dbe:	f363 0141 	bfi	r1, r3, #1, #1
 8005dc2:	f363 0182 	bfi	r1, r3, #2, #1
 8005dc6:	f363 01c5 	bfi	r1, r3, #3, #3
 8005dca:	f362 1188 	bfi	r1, r2, #6, #3
 8005dce:	2208      	movs	r2, #8
 8005dd0:	f362 2152 	bfi	r1, r2, #9, #10
 8005dd4:	f363 41de 	bfi	r1, r3, #19, #12
 8005dd8:	f363 71df 	bfi	r1, r3, #31, #1
 8005ddc:	aa2f      	add	r2, sp, #188	; 0xbc
 8005dde:	482a      	ldr	r0, [pc, #168]	; (8005e88 <dma_stm32_configure+0x444>)
 8005de0:	f008 ffbf 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005de4:	f06f 0715 	mvn.w	r7, #21
 8005de8:	e6f0      	b.n	8005bcc <dma_stm32_configure+0x188>
		LOG_WRN("source_buffer address is null.");
 8005dea:	2301      	movs	r3, #1
 8005dec:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005df0:	4b2d      	ldr	r3, [pc, #180]	; (8005ea8 <dma_stm32_configure+0x464>)
 8005df2:	931e      	str	r3, [sp, #120]	; 0x78
 8005df4:	2300      	movs	r3, #0
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	f88d 2000 	strb.w	r2, [sp]
 8005dfe:	9900      	ldr	r1, [sp, #0]
 8005e00:	911d      	str	r1, [sp, #116]	; 0x74
 8005e02:	4619      	mov	r1, r3
 8005e04:	f363 0100 	bfi	r1, r3, #0, #1
 8005e08:	f363 0141 	bfi	r1, r3, #1, #1
 8005e0c:	f363 0182 	bfi	r1, r3, #2, #1
 8005e10:	f363 01c5 	bfi	r1, r3, #3, #3
 8005e14:	f362 1188 	bfi	r1, r2, #6, #3
 8005e18:	2208      	movs	r2, #8
 8005e1a:	f362 2152 	bfi	r1, r2, #9, #10
 8005e1e:	f363 41de 	bfi	r1, r3, #19, #12
 8005e22:	f363 71df 	bfi	r1, r3, #31, #1
 8005e26:	aa1d      	add	r2, sp, #116	; 0x74
 8005e28:	4817      	ldr	r0, [pc, #92]	; (8005e88 <dma_stm32_configure+0x444>)
 8005e2a:	f008 ff9a 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8005e2e:	e66d      	b.n	8005b0c <dma_stm32_configure+0xc8>
		LOG_WRN("dest_buffer address is null.");
 8005e30:	2301      	movs	r3, #1
 8005e32:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005e36:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <dma_stm32_configure+0x468>)
 8005e38:	9324      	str	r3, [sp, #144]	; 0x90
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f88d 2000 	strb.w	r2, [sp]
 8005e44:	9900      	ldr	r1, [sp, #0]
 8005e46:	9123      	str	r1, [sp, #140]	; 0x8c
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f363 0100 	bfi	r1, r3, #0, #1
 8005e4e:	f363 0141 	bfi	r1, r3, #1, #1
 8005e52:	f363 0182 	bfi	r1, r3, #2, #1
 8005e56:	f363 01c5 	bfi	r1, r3, #3, #3
 8005e5a:	f362 1188 	bfi	r1, r2, #6, #3
 8005e5e:	2208      	movs	r2, #8
 8005e60:	f362 2152 	bfi	r1, r2, #9, #10
 8005e64:	f363 41de 	bfi	r1, r3, #19, #12
 8005e68:	f363 71df 	bfi	r1, r3, #31, #1
 8005e6c:	aa23      	add	r2, sp, #140	; 0x8c
 8005e6e:	4806      	ldr	r0, [pc, #24]	; (8005e88 <dma_stm32_configure+0x444>)
 8005e70:	f008 ff77 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8005e74:	e64f      	b.n	8005b16 <dma_stm32_configure+0xd2>
					config->head_block->source_address;
 8005e76:	6923      	ldr	r3, [r4, #16]
 8005e78:	681a      	ldr	r2, [r3, #0]
		DMA_InitStruct.MemoryOrM2MDstAddress =
 8005e7a:	920a      	str	r2, [sp, #40]	; 0x28
					config->head_block->dest_address;
 8005e7c:	685b      	ldr	r3, [r3, #4]
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 8005e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e80:	e653      	b.n	8005b2a <dma_stm32_configure+0xe6>
 8005e82:	bf00      	nop
 8005e84:	080126ac 	.word	0x080126ac
 8005e88:	08011994 	.word	0x08011994
 8005e8c:	08012574 	.word	0x08012574
 8005e90:	08012598 	.word	0x08012598
 8005e94:	080125b0 	.word	0x080125b0
 8005e98:	080125d4 	.word	0x080125d4
 8005e9c:	080125ec 	.word	0x080125ec
 8005ea0:	08012610 	.word	0x08012610
 8005ea4:	08012634 	.word	0x08012634
 8005ea8:	0801266c 	.word	0x0801266c
 8005eac:	0801268c 	.word	0x0801268c
		memory_addr_adj = config->head_block->dest_addr_adj;
 8005eb0:	6923      	ldr	r3, [r4, #16]
 8005eb2:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8005eb6:	f3cb 1001 	ubfx	r0, fp, #4, #2
		periph_addr_adj = config->head_block->source_addr_adj;
 8005eba:	f3cb 0b81 	ubfx	fp, fp, #2, #2
	ret = dma_stm32_get_memory_increment(memory_addr_adj,
 8005ebe:	a90e      	add	r1, sp, #56	; 0x38
 8005ec0:	f7ff fbe6 	bl	8005690 <dma_stm32_get_memory_increment>
	if (ret < 0) {
 8005ec4:	1e07      	subs	r7, r0, #0
 8005ec6:	f6ff ae81 	blt.w	8005bcc <dma_stm32_configure+0x188>
	ret = dma_stm32_get_periph_increment(periph_addr_adj,
 8005eca:	a90d      	add	r1, sp, #52	; 0x34
 8005ecc:	4658      	mov	r0, fp
 8005ece:	f7ff fc1b 	bl	8005708 <dma_stm32_get_periph_increment>
	if (ret < 0) {
 8005ed2:	1e07      	subs	r7, r0, #0
 8005ed4:	f6ff ae7a 	blt.w	8005bcc <dma_stm32_configure+0x188>
	if (config->head_block->source_reload_en) {
 8005ed8:	6923      	ldr	r3, [r4, #16]
 8005eda:	7f1b      	ldrb	r3, [r3, #28]
 8005edc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ee0:	d05c      	beq.n	8005f9c <dma_stm32_configure+0x558>
		DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 8005ee2:	2320      	movs	r3, #32
 8005ee4:	930c      	str	r3, [sp, #48]	; 0x30
	stream->source_periph = (stream->direction == PERIPHERAL_TO_MEMORY);
 8005ee6:	f859 3006 	ldr.w	r3, [r9, r6]
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	bf14      	ite	ne
 8005eee:	2300      	movne	r3, #0
 8005ef0:	2301      	moveq	r3, #1
 8005ef2:	f888 3004 	strb.w	r3, [r8, #4]
	int index = find_lsb_set(config->source_data_size) - 1;
 8005ef6:	88a3      	ldrh	r3, [r4, #4]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8005ef8:	fa93 f2a3 	rbit	r2, r3
 8005efc:	fab2 f282 	clz	r2, r2
 8005f00:	b90b      	cbnz	r3, 8005f06 <dma_stm32_configure+0x4c2>
 8005f02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	DMA_InitStruct.PeriphOrM2MSrcDataSize = table_p_size[index];
 8005f06:	4b2a      	ldr	r3, [pc, #168]	; (8005fb0 <dma_stm32_configure+0x56c>)
 8005f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0c:	930f      	str	r3, [sp, #60]	; 0x3c
	index = find_lsb_set(config->dest_data_size) - 1;
 8005f0e:	88e3      	ldrh	r3, [r4, #6]
 8005f10:	fa93 f2a3 	rbit	r2, r3
 8005f14:	fab2 f282 	clz	r2, r2
 8005f18:	b90b      	cbnz	r3, 8005f1e <dma_stm32_configure+0x4da>
 8005f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	DMA_InitStruct.MemoryOrM2MDstDataSize = table_m_size[index];
 8005f1e:	4b25      	ldr	r3, [pc, #148]	; (8005fb4 <dma_stm32_configure+0x570>)
 8005f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f24:	9310      	str	r3, [sp, #64]	; 0x40
	if (stream->source_periph) {
 8005f26:	f898 3004 	ldrb.w	r3, [r8, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d039      	beq.n	8005fa2 <dma_stm32_configure+0x55e>
		DMA_InitStruct.NbData = config->head_block->block_size /
 8005f2e:	6923      	ldr	r3, [r4, #16]
 8005f30:	695b      	ldr	r3, [r3, #20]
					config->source_data_size;
 8005f32:	88a2      	ldrh	r2, [r4, #4]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8005f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f38:	9311      	str	r3, [sp, #68]	; 0x44
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 8005f3a:	7823      	ldrb	r3, [r4, #0]
 8005f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f40:	9312      	str	r3, [sp, #72]	; 0x48
	LL_DMA_Init(dma, dma_stm32_id_to_stream(id), &DMA_InitStruct);
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 f892 	bl	800606c <dma_stm32_id_to_stream>
 8005f48:	4601      	mov	r1, r0
 8005f4a:	aa09      	add	r2, sp, #36	; 0x24
 8005f4c:	4650      	mov	r0, sl
 8005f4e:	f004 fe1b 	bl	800ab88 <LL_DMA_Init>
	LL_DMA_EnableIT_TC(dma, dma_stm32_id_to_stream(id));
 8005f52:	4628      	mov	r0, r5
 8005f54:	f000 f88a 	bl	800606c <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8005f58:	4b17      	ldr	r3, [pc, #92]	; (8005fb8 <dma_stm32_configure+0x574>)
 8005f5a:	5c1a      	ldrb	r2, [r3, r0]
 8005f5c:	f85a 3002 	ldr.w	r3, [sl, r2]
 8005f60:	f043 0302 	orr.w	r3, r3, #2
 8005f64:	f84a 3002 	str.w	r3, [sl, r2]
	if (config->head_block->source_reload_en) {
 8005f68:	6923      	ldr	r3, [r4, #16]
 8005f6a:	7f1b      	ldrb	r3, [r3, #28]
 8005f6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f70:	f43f ae2c 	beq.w	8005bcc <dma_stm32_configure+0x188>
		LL_DMA_EnableIT_HT(dma, dma_stm32_id_to_stream(id));
 8005f74:	4628      	mov	r0, r5
 8005f76:	f000 f879 	bl	800606c <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8005f7a:	4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <dma_stm32_configure+0x574>)
 8005f7c:	5c1a      	ldrb	r2, [r3, r0]
 8005f7e:	f85a 3002 	ldr.w	r3, [sl, r2]
 8005f82:	f043 0304 	orr.w	r3, r3, #4
 8005f86:	f84a 3002 	str.w	r3, [sl, r2]
}
 8005f8a:	e61f      	b.n	8005bcc <dma_stm32_configure+0x188>
		memory_addr_adj = config->head_block->source_addr_adj;
 8005f8c:	6923      	ldr	r3, [r4, #16]
 8005f8e:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8005f92:	f3cb 0081 	ubfx	r0, fp, #2, #2
		periph_addr_adj = config->head_block->dest_addr_adj;
 8005f96:	f3cb 1b01 	ubfx	fp, fp, #4, #2
		break;
 8005f9a:	e790      	b.n	8005ebe <dma_stm32_configure+0x47a>
		DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	930c      	str	r3, [sp, #48]	; 0x30
 8005fa0:	e7a1      	b.n	8005ee6 <dma_stm32_configure+0x4a2>
		DMA_InitStruct.NbData = config->head_block->block_size /
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	695b      	ldr	r3, [r3, #20]
					config->dest_data_size;
 8005fa6:	88e2      	ldrh	r2, [r4, #6]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8005fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fac:	9311      	str	r3, [sp, #68]	; 0x44
 8005fae:	e7c4      	b.n	8005f3a <dma_stm32_configure+0x4f6>
 8005fb0:	08012744 	.word	0x08012744
 8005fb4:	08012738 	.word	0x08012738
 8005fb8:	080126f4 	.word	0x080126f4

08005fbc <dma_stm32_init>:
{
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	b090      	sub	sp, #64	; 0x40
 8005fc0:	4605      	mov	r5, r0
	const struct dma_stm32_config *config = dev->config;
 8005fc2:	6844      	ldr	r4, [r0, #4]
 8005fc4:	4826      	ldr	r0, [pc, #152]	; (8006060 <dma_stm32_init+0xa4>)
 8005fc6:	f00a fa20 	bl	801040a <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 8005fca:	b158      	cbz	r0, 8005fe4 <dma_stm32_init+0x28>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8005fcc:	4824      	ldr	r0, [pc, #144]	; (8006060 <dma_stm32_init+0xa4>)
 8005fce:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4798      	blx	r3
 8005fd6:	4606      	mov	r6, r0
	if (clock_control_on(clk,
 8005fd8:	b93e      	cbnz	r6, 8005fea <dma_stm32_init+0x2e>
	config->config_irq(dev);
 8005fda:	68a3      	ldr	r3, [r4, #8]
 8005fdc:	4628      	mov	r0, r5
 8005fde:	4798      	blx	r3
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e02f      	b.n	8006044 <dma_stm32_init+0x88>
		return -ENODEV;
 8005fe4:	f06f 0612 	mvn.w	r6, #18
 8005fe8:	e7f6      	b.n	8005fd8 <dma_stm32_init+0x1c>
		LOG_ERR("clock op failed\n");
 8005fea:	2201      	movs	r2, #1
 8005fec:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005ff0:	4b1c      	ldr	r3, [pc, #112]	; (8006064 <dma_stm32_init+0xa8>)
 8005ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	2102      	movs	r1, #2
 8005ffa:	f88d 1004 	strb.w	r1, [sp, #4]
 8005ffe:	9901      	ldr	r1, [sp, #4]
 8006000:	910d      	str	r1, [sp, #52]	; 0x34
 8006002:	4619      	mov	r1, r3
 8006004:	f363 0100 	bfi	r1, r3, #0, #1
 8006008:	f363 0141 	bfi	r1, r3, #1, #1
 800600c:	f363 0182 	bfi	r1, r3, #2, #1
 8006010:	f363 01c5 	bfi	r1, r3, #3, #3
 8006014:	f362 1188 	bfi	r1, r2, #6, #3
 8006018:	2208      	movs	r2, #8
 800601a:	f362 2152 	bfi	r1, r2, #9, #10
 800601e:	f363 41de 	bfi	r1, r3, #19, #12
 8006022:	f363 71df 	bfi	r1, r3, #31, #1
 8006026:	aa0d      	add	r2, sp, #52	; 0x34
 8006028:	480f      	ldr	r0, [pc, #60]	; (8006068 <dma_stm32_init+0xac>)
 800602a:	f008 fe9a 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EIO;
 800602e:	f06f 0604 	mvn.w	r6, #4
 8006032:	e011      	b.n	8006058 <dma_stm32_init+0x9c>
		config->streams[i].busy = false;
 8006034:	69a2      	ldr	r2, [r4, #24]
 8006036:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800603a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800603e:	2100      	movs	r1, #0
 8006040:	7191      	strb	r1, [r2, #6]
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8006042:	3301      	adds	r3, #1
 8006044:	6962      	ldr	r2, [r4, #20]
 8006046:	4293      	cmp	r3, r2
 8006048:	d3f4      	bcc.n	8006034 <dma_stm32_init+0x78>
	((struct dma_stm32_data *)dev->data)->dma_ctx.magic = 0;
 800604a:	692a      	ldr	r2, [r5, #16]
 800604c:	2300      	movs	r3, #0
 800604e:	6013      	str	r3, [r2, #0]
	((struct dma_stm32_data *)dev->data)->dma_ctx.dma_channels = 0;
 8006050:	692a      	ldr	r2, [r5, #16]
 8006052:	6053      	str	r3, [r2, #4]
	((struct dma_stm32_data *)dev->data)->dma_ctx.atomic = 0;
 8006054:	692a      	ldr	r2, [r5, #16]
 8006056:	6093      	str	r3, [r2, #8]
}
 8006058:	4630      	mov	r0, r6
 800605a:	b010      	add	sp, #64	; 0x40
 800605c:	bd70      	pop	{r4, r5, r6, pc}
 800605e:	bf00      	nop
 8006060:	08011594 	.word	0x08011594
 8006064:	080126cc 	.word	0x080126cc
 8006068:	08011994 	.word	0x08011994

0800606c <dma_stm32_id_to_stream>:
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(stream_nr));

	return stream_nr[id];
}
 800606c:	4b01      	ldr	r3, [pc, #4]	; (8006074 <dma_stm32_id_to_stream+0x8>)
 800606e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006072:	4770      	bx	lr
 8006074:	0801284c 	.word	0x0801284c

08006078 <dma_stm32_clear_ht>:

void dma_stm32_clear_ht(DMA_TypeDef *DMAx, uint32_t id)
{
 8006078:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 800607a:	4b02      	ldr	r3, [pc, #8]	; (8006084 <dma_stm32_clear_ht+0xc>)
 800607c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006080:	4798      	blx	r3
}
 8006082:	bd08      	pop	{r3, pc}
 8006084:	08012830 	.word	0x08012830

08006088 <dma_stm32_clear_tc>:

void dma_stm32_clear_tc(DMA_TypeDef *DMAx, uint32_t id)
{
 8006088:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 800608a:	4b02      	ldr	r3, [pc, #8]	; (8006094 <dma_stm32_clear_tc+0xc>)
 800608c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006090:	4798      	blx	r3
}
 8006092:	bd08      	pop	{r3, pc}
 8006094:	08012814 	.word	0x08012814

08006098 <dma_stm32_is_ht_active>:

bool dma_stm32_is_ht_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8006098:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 800609a:	4b04      	ldr	r3, [pc, #16]	; (80060ac <dma_stm32_is_ht_active+0x14>)
 800609c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060a0:	4798      	blx	r3
}
 80060a2:	3800      	subs	r0, #0
 80060a4:	bf18      	it	ne
 80060a6:	2001      	movne	r0, #1
 80060a8:	bd08      	pop	{r3, pc}
 80060aa:	bf00      	nop
 80060ac:	080127f8 	.word	0x080127f8

080060b0 <dma_stm32_is_tc_active>:

bool dma_stm32_is_tc_active(DMA_TypeDef *DMAx, uint32_t id)
{
 80060b0:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 80060b2:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <dma_stm32_is_tc_active+0x14>)
 80060b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060b8:	4798      	blx	r3
}
 80060ba:	3800      	subs	r0, #0
 80060bc:	bf18      	it	ne
 80060be:	2001      	movne	r0, #1
 80060c0:	bd08      	pop	{r3, pc}
 80060c2:	bf00      	nop
 80060c4:	080127dc 	.word	0x080127dc

080060c8 <dma_stm32_clear_te>:


void dma_stm32_clear_te(DMA_TypeDef *DMAx, uint32_t id)
{
 80060c8:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTEIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 80060ca:	4b02      	ldr	r3, [pc, #8]	; (80060d4 <dma_stm32_clear_te+0xc>)
 80060cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060d0:	4798      	blx	r3
}
 80060d2:	bd08      	pop	{r3, pc}
 80060d4:	080127c0 	.word	0x080127c0

080060d8 <dma_stm32_is_te_active>:

	func[id](DMAx);
}

bool dma_stm32_is_te_active(DMA_TypeDef *DMAx, uint32_t id)
{
 80060d8:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTEIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 80060da:	4b04      	ldr	r3, [pc, #16]	; (80060ec <dma_stm32_is_te_active+0x14>)
 80060dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060e0:	4798      	blx	r3
}
 80060e2:	3800      	subs	r0, #0
 80060e4:	bf18      	it	ne
 80060e6:	2001      	movne	r0, #1
 80060e8:	bd08      	pop	{r3, pc}
 80060ea:	bf00      	nop
 80060ec:	080127a4 	.word	0x080127a4

080060f0 <dma_stm32_is_gi_active>:

bool dma_stm32_is_gi_active(DMA_TypeDef *DMAx, uint32_t id)
{
 80060f0:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CGIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 80060f2:	4b04      	ldr	r3, [pc, #16]	; (8006104 <dma_stm32_is_gi_active+0x14>)
 80060f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060f8:	4798      	blx	r3
}
 80060fa:	3800      	subs	r0, #0
 80060fc:	bf18      	it	ne
 80060fe:	2001      	movne	r0, #1
 8006100:	bd08      	pop	{r3, pc}
 8006102:	bf00      	nop
 8006104:	08012788 	.word	0x08012788

08006108 <stm32_dma_dump_stream_irq>:

void stm32_dma_dump_stream_irq(DMA_TypeDef *dma, uint32_t id)
{
 8006108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800610c:	b08b      	sub	sp, #44	; 0x2c
 800610e:	af00      	add	r7, sp, #0
 8006110:	4604      	mov	r4, r0
 8006112:	460d      	mov	r5, r1
	LOG_INF("tc: %d, ht: %d, te: %d, gi: %d",
 8006114:	2301      	movs	r3, #1
 8006116:	813b      	strh	r3, [r7, #8]
 8006118:	f7ff ffca 	bl	80060b0 <dma_stm32_is_tc_active>
 800611c:	4629      	mov	r1, r5
 800611e:	4620      	mov	r0, r4
 8006120:	f7ff ffba 	bl	8006098 <dma_stm32_is_ht_active>
 8006124:	4629      	mov	r1, r5
 8006126:	4620      	mov	r0, r4
 8006128:	f7ff ffd6 	bl	80060d8 <dma_stm32_is_te_active>
 800612c:	4629      	mov	r1, r5
 800612e:	4620      	mov	r0, r4
 8006130:	f7ff ffde 	bl	80060f0 <dma_stm32_is_gi_active>
 8006134:	b08a      	sub	sp, #40	; 0x28
 8006136:	46e9      	mov	r9, sp
 8006138:	f119 060c 	adds.w	r6, r9, #12
 800613c:	d053      	beq.n	80061e6 <stm32_dma_dump_stream_irq+0xde>
 800613e:	f04f 0818 	mov.w	r8, #24
 8006142:	2301      	movs	r3, #1
 8006144:	813b      	strh	r3, [r7, #8]
 8006146:	b12e      	cbz	r6, 8006154 <stm32_dma_dump_stream_irq+0x4c>
 8006148:	f1b8 0f04 	cmp.w	r8, #4
 800614c:	dd02      	ble.n	8006154 <stm32_dma_dump_stream_irq+0x4c>
 800614e:	4b37      	ldr	r3, [pc, #220]	; (800622c <stm32_dma_dump_stream_irq+0x124>)
 8006150:	f8c9 3010 	str.w	r3, [r9, #16]
 8006154:	4629      	mov	r1, r5
 8006156:	4620      	mov	r0, r4
 8006158:	f7ff ffaa 	bl	80060b0 <dma_stm32_is_tc_active>
 800615c:	b116      	cbz	r6, 8006164 <stm32_dma_dump_stream_irq+0x5c>
 800615e:	f1b8 0f08 	cmp.w	r8, #8
 8006162:	dc43      	bgt.n	80061ec <stm32_dma_dump_stream_irq+0xe4>
 8006164:	4629      	mov	r1, r5
 8006166:	4620      	mov	r0, r4
 8006168:	f7ff ff96 	bl	8006098 <dma_stm32_is_ht_active>
 800616c:	b116      	cbz	r6, 8006174 <stm32_dma_dump_stream_irq+0x6c>
 800616e:	f1b8 0f0c 	cmp.w	r8, #12
 8006172:	dc42      	bgt.n	80061fa <stm32_dma_dump_stream_irq+0xf2>
 8006174:	4629      	mov	r1, r5
 8006176:	4620      	mov	r0, r4
 8006178:	f7ff ffae 	bl	80060d8 <dma_stm32_is_te_active>
 800617c:	b116      	cbz	r6, 8006184 <stm32_dma_dump_stream_irq+0x7c>
 800617e:	f1b8 0f10 	cmp.w	r8, #16
 8006182:	dc41      	bgt.n	8006208 <stm32_dma_dump_stream_irq+0x100>
 8006184:	4629      	mov	r1, r5
 8006186:	4620      	mov	r0, r4
 8006188:	f7ff ffb2 	bl	80060f0 <dma_stm32_is_gi_active>
 800618c:	b116      	cbz	r6, 8006194 <stm32_dma_dump_stream_irq+0x8c>
 800618e:	f1b8 0f14 	cmp.w	r8, #20
 8006192:	dc40      	bgt.n	8006216 <stm32_dma_dump_stream_irq+0x10e>
 8006194:	f1b8 0f17 	cmp.w	r8, #23
 8006198:	dd44      	ble.n	8006224 <stm32_dma_dump_stream_irq+0x11c>
 800619a:	2318      	movs	r3, #24
 800619c:	b136      	cbz	r6, 80061ac <stm32_dma_dump_stream_irq+0xa4>
 800619e:	2200      	movs	r2, #0
 80061a0:	607a      	str	r2, [r7, #4]
 80061a2:	2206      	movs	r2, #6
 80061a4:	713a      	strb	r2, [r7, #4]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	f8c9 200c 	str.w	r2, [r9, #12]
 80061ac:	2100      	movs	r1, #0
 80061ae:	f36f 0100 	bfc	r1, #0, #1
 80061b2:	f36f 0141 	bfc	r1, #1, #1
 80061b6:	f36f 0182 	bfc	r1, #2, #1
 80061ba:	f36f 01c5 	bfc	r1, #3, #3
 80061be:	2203      	movs	r2, #3
 80061c0:	f362 1188 	bfi	r1, r2, #6, #3
 80061c4:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80061c8:	f363 2152 	bfi	r1, r3, #9, #10
 80061cc:	f36f 41de 	bfc	r1, #19, #12
 80061d0:	f36f 71df 	bfc	r1, #31, #1
 80061d4:	2300      	movs	r3, #0
 80061d6:	4632      	mov	r2, r6
 80061d8:	4815      	ldr	r0, [pc, #84]	; (8006230 <stm32_dma_dump_stream_irq+0x128>)
 80061da:	f008 fdc2 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		dma_stm32_is_tc_active(dma, id),
		dma_stm32_is_ht_active(dma, id),
		dma_stm32_is_te_active(dma, id),
		dma_stm32_is_gi_active(dma, id));
}
 80061de:	372c      	adds	r7, #44	; 0x2c
 80061e0:	46bd      	mov	sp, r7
 80061e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_INF("tc: %d, ht: %d, te: %d, gi: %d",
 80061e6:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 80061ea:	e7aa      	b.n	8006142 <stm32_dma_dump_stream_irq+0x3a>
 80061ec:	4629      	mov	r1, r5
 80061ee:	4620      	mov	r0, r4
 80061f0:	f7ff ff5e 	bl	80060b0 <dma_stm32_is_tc_active>
 80061f4:	f8c9 0014 	str.w	r0, [r9, #20]
 80061f8:	e7b4      	b.n	8006164 <stm32_dma_dump_stream_irq+0x5c>
 80061fa:	4629      	mov	r1, r5
 80061fc:	4620      	mov	r0, r4
 80061fe:	f7ff ff4b 	bl	8006098 <dma_stm32_is_ht_active>
 8006202:	f8c9 0018 	str.w	r0, [r9, #24]
 8006206:	e7b5      	b.n	8006174 <stm32_dma_dump_stream_irq+0x6c>
 8006208:	4629      	mov	r1, r5
 800620a:	4620      	mov	r0, r4
 800620c:	f7ff ff64 	bl	80060d8 <dma_stm32_is_te_active>
 8006210:	f8c9 001c 	str.w	r0, [r9, #28]
 8006214:	e7b6      	b.n	8006184 <stm32_dma_dump_stream_irq+0x7c>
 8006216:	4629      	mov	r1, r5
 8006218:	4620      	mov	r0, r4
 800621a:	f7ff ff69 	bl	80060f0 <dma_stm32_is_gi_active>
 800621e:	f8c9 0020 	str.w	r0, [r9, #32]
 8006222:	e7b7      	b.n	8006194 <stm32_dma_dump_stream_irq+0x8c>
 8006224:	f06f 031b 	mvn.w	r3, #27
 8006228:	e7b8      	b.n	800619c <stm32_dma_dump_stream_irq+0x94>
 800622a:	bf00      	nop
 800622c:	08012750 	.word	0x08012750
 8006230:	0801199c 	.word	0x0801199c

08006234 <stm32_dma_is_tc_irq_active>:

bool stm32_dma_is_tc_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4604      	mov	r4, r0
 8006238:	460d      	mov	r5, r1
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 800623a:	4608      	mov	r0, r1
 800623c:	f7ff ff16 	bl	800606c <dma_stm32_id_to_stream>
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8006240:	4b08      	ldr	r3, [pc, #32]	; (8006264 <stm32_dma_is_tc_irq_active+0x30>)
 8006242:	5c1b      	ldrb	r3, [r3, r0]
 8006244:	58e3      	ldr	r3, [r4, r3]
                   DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 8006246:	f013 0f02 	tst.w	r3, #2
 800624a:	d006      	beq.n	800625a <stm32_dma_is_tc_irq_active+0x26>
	       dma_stm32_is_tc_active(dma, id);
 800624c:	4629      	mov	r1, r5
 800624e:	4620      	mov	r0, r4
 8006250:	f7ff ff2e 	bl	80060b0 <dma_stm32_is_tc_active>
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 8006254:	b118      	cbz	r0, 800625e <stm32_dma_is_tc_irq_active+0x2a>
 8006256:	2001      	movs	r0, #1
 8006258:	e000      	b.n	800625c <stm32_dma_is_tc_irq_active+0x28>
 800625a:	2000      	movs	r0, #0
}
 800625c:	bd38      	pop	{r3, r4, r5, pc}
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 800625e:	2000      	movs	r0, #0
 8006260:	e7fc      	b.n	800625c <stm32_dma_is_tc_irq_active+0x28>
 8006262:	bf00      	nop
 8006264:	08012780 	.word	0x08012780

08006268 <stm32_dma_is_ht_irq_active>:

bool stm32_dma_is_ht_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4604      	mov	r4, r0
 800626c:	460d      	mov	r5, r1
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 800626e:	4608      	mov	r0, r1
 8006270:	f7ff fefc 	bl	800606c <dma_stm32_id_to_stream>
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8006274:	4b08      	ldr	r3, [pc, #32]	; (8006298 <stm32_dma_is_ht_irq_active+0x30>)
 8006276:	5c1b      	ldrb	r3, [r3, r0]
 8006278:	58e3      	ldr	r3, [r4, r3]
                   DMA_CCR_HTIE) == (DMA_CCR_HTIE)) ? 1UL : 0UL);
 800627a:	f013 0f04 	tst.w	r3, #4
 800627e:	d006      	beq.n	800628e <stm32_dma_is_ht_irq_active+0x26>
	       dma_stm32_is_ht_active(dma, id);
 8006280:	4629      	mov	r1, r5
 8006282:	4620      	mov	r0, r4
 8006284:	f7ff ff08 	bl	8006098 <dma_stm32_is_ht_active>
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8006288:	b118      	cbz	r0, 8006292 <stm32_dma_is_ht_irq_active+0x2a>
 800628a:	2001      	movs	r0, #1
 800628c:	e000      	b.n	8006290 <stm32_dma_is_ht_irq_active+0x28>
 800628e:	2000      	movs	r0, #0
}
 8006290:	bd38      	pop	{r3, r4, r5, pc}
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8006292:	2000      	movs	r0, #0
 8006294:	e7fc      	b.n	8006290 <stm32_dma_is_ht_irq_active+0x28>
 8006296:	bf00      	nop
 8006298:	08012780 	.word	0x08012780

0800629c <stm32_dma_enable_stream>:
	/* Preserve for future amending. */
	return false;
}

void stm32_dma_enable_stream(DMA_TypeDef *dma, uint32_t id)
{
 800629c:	b510      	push	{r4, lr}
 800629e:	4604      	mov	r4, r0
	LL_DMA_EnableChannel(dma, dma_stm32_id_to_stream(id));
 80062a0:	4608      	mov	r0, r1
 80062a2:	f7ff fee3 	bl	800606c <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80062a6:	4b03      	ldr	r3, [pc, #12]	; (80062b4 <stm32_dma_enable_stream+0x18>)
 80062a8:	5c1a      	ldrb	r2, [r3, r0]
 80062aa:	58a3      	ldr	r3, [r4, r2]
 80062ac:	f043 0301 	orr.w	r3, r3, #1
 80062b0:	50a3      	str	r3, [r4, r2]
}
 80062b2:	bd10      	pop	{r4, pc}
 80062b4:	08012780 	.word	0x08012780

080062b8 <stm32_dma_disable_stream>:

int stm32_dma_disable_stream(DMA_TypeDef *dma, uint32_t id)
{
 80062b8:	b510      	push	{r4, lr}
 80062ba:	4604      	mov	r4, r0
	LL_DMA_DisableChannel(dma, dma_stm32_id_to_stream(id));
 80062bc:	4608      	mov	r0, r1
 80062be:	f7ff fed5 	bl	800606c <dma_stm32_id_to_stream>
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80062c2:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <stm32_dma_disable_stream+0x28>)
 80062c4:	5c1b      	ldrb	r3, [r3, r0]
 80062c6:	58e2      	ldr	r2, [r4, r3]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	50e2      	str	r2, [r4, r3]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80062ce:	58e3      	ldr	r3, [r4, r3]
                  DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80062d0:	f013 0f01 	tst.w	r3, #1
 80062d4:	d002      	beq.n	80062dc <stm32_dma_disable_stream+0x24>

	if (!LL_DMA_IsEnabledChannel(dma, dma_stm32_id_to_stream(id))) {
		return 0;
	}

	return -EAGAIN;
 80062d6:	f06f 000a 	mvn.w	r0, #10
}
 80062da:	bd10      	pop	{r4, pc}
		return 0;
 80062dc:	2000      	movs	r0, #0
 80062de:	e7fc      	b.n	80062da <stm32_dma_disable_stream+0x22>
 80062e0:	08012780 	.word	0x08012780

080062e4 <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80062e4:	424a      	negs	r2, r1
 80062e6:	f001 0303 	and.w	r3, r1, #3
 80062ea:	f002 0203 	and.w	r2, r2, #3
 80062ee:	bf58      	it	pl
 80062f0:	4253      	negpl	r3, r2
 80062f2:	3304      	adds	r3, #4
 80062f4:	009a      	lsls	r2, r3, #2
 80062f6:	230f      	movs	r3, #15
 80062f8:	4093      	lsls	r3, r2
 80062fa:	460a      	mov	r2, r1
 80062fc:	2900      	cmp	r1, #0
 80062fe:	db19      	blt.n	8006334 <gpio_stm32_set_exti_source+0x50>
 8006300:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8006304:	fa5f fc83 	uxtb.w	ip, r3
 8006308:	f10c 0102 	add.w	r1, ip, #2
 800630c:	4a0b      	ldr	r2, [pc, #44]	; (800633c <gpio_stm32_set_exti_source+0x58>)
 800630e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8006312:	0c1a      	lsrs	r2, r3, #16
 8006314:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006318:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800631c:	b162      	cbz	r2, 8006338 <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 800631e:	fab2 f282 	clz	r2, r2
 8006322:	fa00 f202 	lsl.w	r2, r0, r2
 8006326:	431a      	orrs	r2, r3
 8006328:	f10c 0c02 	add.w	ip, ip, #2
 800632c:	4b03      	ldr	r3, [pc, #12]	; (800633c <gpio_stm32_set_exti_source+0x58>)
 800632e:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 8006332:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006334:	1cca      	adds	r2, r1, #3
 8006336:	e7e3      	b.n	8006300 <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 8006338:	2220      	movs	r2, #32
 800633a:	e7f2      	b.n	8006322 <gpio_stm32_set_exti_source+0x3e>
 800633c:	40010000 	.word	0x40010000

08006340 <gpio_stm32_get_exti_source>:
 8006340:	4242      	negs	r2, r0
 8006342:	f000 0303 	and.w	r3, r0, #3
 8006346:	f002 0203 	and.w	r2, r2, #3
 800634a:	bf58      	it	pl
 800634c:	4253      	negpl	r3, r2
 800634e:	3304      	adds	r3, #4
 8006350:	009a      	lsls	r2, r3, #2
 8006352:	230f      	movs	r3, #15
 8006354:	4093      	lsls	r3, r2
 8006356:	4602      	mov	r2, r0
 8006358:	2800      	cmp	r0, #0
 800635a:	db10      	blt.n	800637e <gpio_stm32_get_exti_source+0x3e>
 800635c:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8006360:	b2c3      	uxtb	r3, r0
 8006362:	3302      	adds	r3, #2
 8006364:	4a08      	ldr	r2, [pc, #32]	; (8006388 <gpio_stm32_get_exti_source+0x48>)
 8006366:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800636a:	0c03      	lsrs	r3, r0, #16
 800636c:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006370:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8006374:	b12b      	cbz	r3, 8006382 <gpio_stm32_get_exti_source+0x42>
  return __builtin_clz(value);
 8006376:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 800637a:	40d8      	lsrs	r0, r3
 800637c:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800637e:	1cc2      	adds	r2, r0, #3
 8006380:	e7ec      	b.n	800635c <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 8006382:	2320      	movs	r3, #32
 8006384:	e7f9      	b.n	800637a <gpio_stm32_get_exti_source+0x3a>
 8006386:	bf00      	nop
 8006388:	40010000 	.word	0x40010000

0800638c <gpio_stm32_clock_request>:
{
 800638c:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 800638e:	6844      	ldr	r4, [r0, #4]
	if (on) {
 8006390:	b169      	cbz	r1, 80063ae <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 8006392:	340c      	adds	r4, #12
 8006394:	480d      	ldr	r0, [pc, #52]	; (80063cc <gpio_stm32_clock_request+0x40>)
 8006396:	f00a f838 	bl	801040a <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800639a:	b128      	cbz	r0, 80063a8 <gpio_stm32_clock_request+0x1c>
	const struct clock_control_driver_api *api =
 800639c:	480b      	ldr	r0, [pc, #44]	; (80063cc <gpio_stm32_clock_request+0x40>)
 800639e:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4621      	mov	r1, r4
 80063a4:	4798      	blx	r3
}
 80063a6:	bd10      	pop	{r4, pc}
		return -ENODEV;
 80063a8:	f06f 0012 	mvn.w	r0, #18
 80063ac:	e7fb      	b.n	80063a6 <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 80063ae:	340c      	adds	r4, #12
 80063b0:	4806      	ldr	r0, [pc, #24]	; (80063cc <gpio_stm32_clock_request+0x40>)
 80063b2:	f00a f82a 	bl	801040a <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_off(const struct device *dev,
				    clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 80063b6:	b128      	cbz	r0, 80063c4 <gpio_stm32_clock_request+0x38>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 80063b8:	4804      	ldr	r0, [pc, #16]	; (80063cc <gpio_stm32_clock_request+0x40>)
 80063ba:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	4621      	mov	r1, r4
 80063c0:	4798      	blx	r3
 80063c2:	e7f0      	b.n	80063a6 <gpio_stm32_clock_request+0x1a>
		return -ENODEV;
 80063c4:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 80063c8:	e7ed      	b.n	80063a6 <gpio_stm32_clock_request+0x1a>
 80063ca:	bf00      	nop
 80063cc:	08011594 	.word	0x08011594

080063d0 <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	4606      	mov	r6, r0
 80063d6:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 80063d8:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <gpio_stm32_enable_int+0x40>)
 80063da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80063de:	ab02      	add	r3, sp, #8
 80063e0:	e903 0003 	stmdb	r3, {r0, r1}
 80063e4:	480b      	ldr	r0, [pc, #44]	; (8006414 <gpio_stm32_enable_int+0x44>)
 80063e6:	f00a f810 	bl	801040a <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80063ea:	b148      	cbz	r0, 8006400 <gpio_stm32_enable_int+0x30>
	const struct clock_control_driver_api *api =
 80063ec:	4809      	ldr	r0, [pc, #36]	; (8006414 <gpio_stm32_enable_int+0x44>)
 80063ee:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4669      	mov	r1, sp
 80063f4:	4798      	blx	r3
 80063f6:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 80063f8:	b12c      	cbz	r4, 8006406 <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 80063fa:	4620      	mov	r0, r4
 80063fc:	b002      	add	sp, #8
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
 8006400:	f06f 0412 	mvn.w	r4, #18
 8006404:	e7f8      	b.n	80063f8 <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 8006406:	4629      	mov	r1, r5
 8006408:	4630      	mov	r0, r6
 800640a:	f7ff ff6b 	bl	80062e4 <gpio_stm32_set_exti_source>
	return 0;
 800640e:	e7f4      	b.n	80063fa <gpio_stm32_enable_int+0x2a>
 8006410:	08011a98 	.word	0x08011a98
 8006414:	08011594 	.word	0x08011594

08006418 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8006418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641a:	460c      	mov	r4, r1
 800641c:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 800641e:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8006420:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8006422:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006426:	d01f      	beq.n	8006468 <gpio_stm32_pin_interrupt_configure+0x50>
 8006428:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 800642a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800642e:	d034      	beq.n	800649a <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8006430:	491d      	ldr	r1, [pc, #116]	; (80064a8 <gpio_stm32_pin_interrupt_configure+0x90>)
 8006432:	4620      	mov	r0, r4
 8006434:	f7fe ff4a 	bl	80052cc <stm32_exti_set_callback>
 8006438:	4606      	mov	r6, r0
 800643a:	bb88      	cbnz	r0, 80064a0 <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 800643c:	4621      	mov	r1, r4
 800643e:	68b8      	ldr	r0, [r7, #8]
 8006440:	f7ff ffc6 	bl	80063d0 <gpio_stm32_enable_int>

	switch (trig) {
 8006444:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8006448:	d023      	beq.n	8006492 <gpio_stm32_pin_interrupt_configure+0x7a>
 800644a:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 800644e:	d022      	beq.n	8006496 <gpio_stm32_pin_interrupt_configure+0x7e>
 8006450:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8006454:	d01b      	beq.n	800648e <gpio_stm32_pin_interrupt_configure+0x76>
 8006456:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8006458:	4620      	mov	r0, r4
 800645a:	f7fe feff 	bl	800525c <stm32_exti_trigger>

	stm32_exti_enable(pin);
 800645e:	4620      	mov	r0, r4
 8006460:	f7fe fee0 	bl	8005224 <stm32_exti_enable>

exit:
	return err;
}
 8006464:	4630      	mov	r0, r6
 8006466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8006468:	4620      	mov	r0, r4
 800646a:	f7ff ff69 	bl	8006340 <gpio_stm32_get_exti_source>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4298      	cmp	r0, r3
 8006472:	d001      	beq.n	8006478 <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 8006474:	2600      	movs	r6, #0
		goto exit;
 8006476:	e7f5      	b.n	8006464 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 8006478:	4620      	mov	r0, r4
 800647a:	f7fe fee3 	bl	8005244 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 800647e:	4620      	mov	r0, r4
 8006480:	f7fe ff36 	bl	80052f0 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8006484:	2100      	movs	r1, #0
 8006486:	4620      	mov	r0, r4
 8006488:	f7fe fee8 	bl	800525c <stm32_exti_trigger>
 800648c:	e7f2      	b.n	8006474 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 800648e:	2102      	movs	r1, #2
 8006490:	e7e2      	b.n	8006458 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 8006492:	2101      	movs	r1, #1
 8006494:	e7e0      	b.n	8006458 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 8006496:	2103      	movs	r1, #3
 8006498:	e7de      	b.n	8006458 <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 800649a:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800649e:	e7e1      	b.n	8006464 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 80064a0:	f06f 060f 	mvn.w	r6, #15
	return err;
 80064a4:	e7de      	b.n	8006464 <gpio_stm32_pin_interrupt_configure+0x4c>
 80064a6:	bf00      	nop
 80064a8:	0800f3e5 	.word	0x0800f3e5

080064ac <spi_stm32_get_err>:
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
}

static int spi_stm32_get_err(SPI_TypeDef *spi)
{
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 80064ac:	6883      	ldr	r3, [r0, #8]

	if (sr & SPI_STM32_ERR_MSK) {
 80064ae:	f413 73b8 	ands.w	r3, r3, #368	; 0x170
 80064b2:	d101      	bne.n	80064b8 <spi_stm32_get_err+0xc>
		}

		return -EIO;
	}

	return 0;
 80064b4:	2000      	movs	r0, #0
}
 80064b6:	4770      	bx	lr
{
 80064b8:	b510      	push	{r4, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	4604      	mov	r4, r0
		LOG_ERR("%s: err=%d", __func__,
 80064be:	9303      	str	r3, [sp, #12]
 80064c0:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <spi_stm32_get_err+0x48>)
 80064c2:	9302      	str	r3, [sp, #8]
 80064c4:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <spi_stm32_get_err+0x4c>)
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	2000      	movs	r0, #0
 80064ca:	9000      	str	r0, [sp, #0]
 80064cc:	4603      	mov	r3, r0
 80064ce:	2201      	movs	r2, #1
 80064d0:	490a      	ldr	r1, [pc, #40]	; (80064fc <spi_stm32_get_err+0x50>)
 80064d2:	f009 f91e 	bl	800f712 <z_log_msg2_runtime_create>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 80064d6:	68a3      	ldr	r3, [r4, #8]
 80064d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80064dc:	d005      	beq.n	80064ea <spi_stm32_get_err+0x3e>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 80064de:	68e3      	ldr	r3, [r4, #12]
 80064e0:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 80064e2:	9b05      	ldr	r3, [sp, #20]
  tmpreg = SPIx->SR;
 80064e4:	68a3      	ldr	r3, [r4, #8]
 80064e6:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 80064e8:	9b05      	ldr	r3, [sp, #20]
		return -EIO;
 80064ea:	f06f 0004 	mvn.w	r0, #4
}
 80064ee:	b006      	add	sp, #24
 80064f0:	bd10      	pop	{r4, pc}
 80064f2:	bf00      	nop
 80064f4:	08012a3c 	.word	0x08012a3c
 80064f8:	08012934 	.word	0x08012934
 80064fc:	080119d4 	.word	0x080119d4

08006500 <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 8006500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006504:	b098      	sub	sp, #96	; 0x60
 8006506:	af00      	add	r7, sp, #0
 8006508:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = dev->config;
 800650a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800650e:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 8006510:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006514:	f8df c298 	ldr.w	ip, [pc, #664]	; 80067b0 <spi_stm32_configure+0x2b0>
 8006518:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800651c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800651e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8006522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 8006526:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 800652a:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 800652c:	42ab      	cmp	r3, r5
 800652e:	f000 8139 	beq.w	80067a4 <spi_stm32_configure+0x2a4>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8006532:	88ab      	ldrh	r3, [r5, #4]
 8006534:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8006538:	2a08      	cmp	r2, #8
 800653a:	d002      	beq.n	8006542 <spi_stm32_configure+0x42>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 800653c:	2a10      	cmp	r2, #16
 800653e:	f040 8133 	bne.w	80067a8 <spi_stm32_configure+0x2a8>
		return -ENOTSUP;
	}

	/* configure the frame format Motorola (default) or TI */
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 8006542:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006546:	d11c      	bne.n	8006582 <spi_stm32_configure+0x82>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8006548:	6863      	ldr	r3, [r4, #4]
 800654a:	f023 0310 	bic.w	r3, r3, #16
 800654e:	6063      	str	r3, [r4, #4]
 8006550:	4898      	ldr	r0, [pc, #608]	; (80067b4 <spi_stm32_configure+0x2b4>)
 8006552:	f009 ff5a 	bl	801040a <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 8006556:	b1c8      	cbz	r0, 800658c <spi_stm32_configure+0x8c>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8006558:	4b96      	ldr	r3, [pc, #600]	; (80067b4 <spi_stm32_configure+0x2b4>)
 800655a:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	b1c3      	cbz	r3, 8006592 <spi_stm32_configure+0x92>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8006560:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006564:	4641      	mov	r1, r8
 8006566:	4893      	ldr	r0, [pc, #588]	; (80067b4 <spi_stm32_configure+0x2b4>)
 8006568:	4798      	blx	r3
	} else {
		LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif
}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800656a:	2800      	cmp	r0, #0
 800656c:	db14      	blt.n	8006598 <spi_stm32_configure+0x98>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800656e:	2301      	movs	r3, #1
 8006570:	2b08      	cmp	r3, #8
 8006572:	dc35      	bgt.n	80065e0 <spi_stm32_configure+0xe0>
		uint32_t clk = clock >> br;
 8006574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006576:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 8006578:	6829      	ldr	r1, [r5, #0]
 800657a:	4291      	cmp	r1, r2
 800657c:	d230      	bcs.n	80065e0 <spi_stm32_configure+0xe0>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800657e:	3301      	adds	r3, #1
 8006580:	e7f6      	b.n	8006570 <spi_stm32_configure+0x70>
 8006582:	6863      	ldr	r3, [r4, #4]
 8006584:	f043 0310 	orr.w	r3, r3, #16
 8006588:	6063      	str	r3, [r4, #4]
}
 800658a:	e7e1      	b.n	8006550 <spi_stm32_configure+0x50>
		return -ENODEV;
 800658c:	f06f 0012 	mvn.w	r0, #18
 8006590:	e7eb      	b.n	800656a <spi_stm32_configure+0x6a>
		return -ENOSYS;
 8006592:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8006596:	e7e8      	b.n	800656a <spi_stm32_configure+0x6a>
		LOG_ERR("Failed call clock_control_get_rate");
 8006598:	2201      	movs	r2, #1
 800659a:	80ba      	strh	r2, [r7, #4]
 800659c:	4b86      	ldr	r3, [pc, #536]	; (80067b8 <spi_stm32_configure+0x2b8>)
 800659e:	65bb      	str	r3, [r7, #88]	; 0x58
 80065a0:	2300      	movs	r3, #0
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	2102      	movs	r1, #2
 80065a6:	7039      	strb	r1, [r7, #0]
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6579      	str	r1, [r7, #84]	; 0x54
 80065ac:	4619      	mov	r1, r3
 80065ae:	f363 0100 	bfi	r1, r3, #0, #1
 80065b2:	f363 0141 	bfi	r1, r3, #1, #1
 80065b6:	f363 0182 	bfi	r1, r3, #2, #1
 80065ba:	f363 01c5 	bfi	r1, r3, #3, #3
 80065be:	f362 1188 	bfi	r1, r2, #6, #3
 80065c2:	2208      	movs	r2, #8
 80065c4:	f362 2152 	bfi	r1, r2, #9, #10
 80065c8:	f363 41de 	bfi	r1, r3, #19, #12
 80065cc:	f363 71df 	bfi	r1, r3, #31, #1
 80065d0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80065d4:	4879      	ldr	r0, [pc, #484]	; (80067bc <spi_stm32_configure+0x2bc>)
 80065d6:	f008 fbc4 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EIO;
 80065da:	f06f 0004 	mvn.w	r0, #4
 80065de:	e059      	b.n	8006694 <spi_stm32_configure+0x194>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	dc5b      	bgt.n	800669c <spi_stm32_configure+0x19c>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80065e4:	6822      	ldr	r2, [r4, #0]
 80065e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ea:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 80065ec:	3b01      	subs	r3, #1
 80065ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80065f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80065f6:	f853 3c38 	ldr.w	r3, [r3, #-56]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 80065fa:	6822      	ldr	r2, [r4, #0]
 80065fc:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8006600:	4313      	orrs	r3, r2
 8006602:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8006604:	88ab      	ldrh	r3, [r5, #4]
 8006606:	f013 0f02 	tst.w	r3, #2
 800660a:	f000 8098 	beq.w	800673e <spi_stm32_configure+0x23e>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	f043 0302 	orr.w	r3, r3, #2
 8006614:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8006616:	88ab      	ldrh	r3, [r5, #4]
 8006618:	f013 0f04 	tst.w	r3, #4
 800661c:	f000 8094 	beq.w	8006748 <spi_stm32_configure+0x248>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	f043 0301 	orr.w	r3, r3, #1
 8006626:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 800662e:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 8006630:	88ab      	ldrh	r3, [r5, #4]
 8006632:	f013 0f10 	tst.w	r3, #16
 8006636:	f000 808c 	beq.w	8006752 <spi_stm32_configure+0x252>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006640:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006648:	6023      	str	r3, [r4, #0]
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
	}

	LL_SPI_DisableCRC(spi);

	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 800664a:	68ab      	ldr	r3, [r5, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8085 	beq.w	800675c <spi_stm32_configure+0x25c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006658:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800665a:	6863      	ldr	r3, [r4, #4]
 800665c:	f023 0304 	bic.w	r3, r3, #4
 8006660:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 8006662:	88ab      	ldrh	r3, [r5, #4]
 8006664:	f013 0f01 	tst.w	r3, #1
 8006668:	f000 8090 	beq.w	800678c <spi_stm32_configure+0x28c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 8006672:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8006674:	88ab      	ldrh	r3, [r5, #4]
 8006676:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800667a:	2b08      	cmp	r3, #8
 800667c:	f000 808b 	beq.w	8006796 <spi_stm32_configure+0x296>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8006680:	6863      	ldr	r3, [r4, #4]
 8006682:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8006686:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8006688:	6863      	ldr	r3, [r4, #4]
 800668a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800668e:	6063      	str	r3, [r4, #4]
#if DT_HAS_COMPAT_STATUS_OKAY(st_stm32_spi_fifo)
	ll_func_set_fifo_threshold_8bit(spi);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 8006690:	6035      	str	r5, [r6, #0]
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 8006692:	2000      	movs	r0, #0
}
 8006694:	3760      	adds	r7, #96	; 0x60
 8006696:	46bd      	mov	sp, r7
 8006698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 800669c:	2301      	movs	r3, #1
 800669e:	80bb      	strh	r3, [r7, #4]
 80066a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066a2:	fa20 f603 	lsr.w	r6, r0, r3
 80066a6:	0a00      	lsrs	r0, r0, #8
 80066a8:	466c      	mov	r4, sp
 80066aa:	b088      	sub	sp, #32
 80066ac:	466b      	mov	r3, sp
 80066ae:	f113 020c 	adds.w	r2, r3, #12
 80066b2:	d03e      	beq.n	8006732 <spi_stm32_configure+0x232>
 80066b4:	2114      	movs	r1, #20
 80066b6:	f04f 0c01 	mov.w	ip, #1
 80066ba:	f8a7 c004 	strh.w	ip, [r7, #4]
 80066be:	b12a      	cbz	r2, 80066cc <spi_stm32_configure+0x1cc>
 80066c0:	2904      	cmp	r1, #4
 80066c2:	dd03      	ble.n	80066cc <spi_stm32_configure+0x1cc>
 80066c4:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80067c0 <spi_stm32_configure+0x2c0>
 80066c8:	f8c3 c010 	str.w	ip, [r3, #16]
 80066cc:	682d      	ldr	r5, [r5, #0]
 80066ce:	b112      	cbz	r2, 80066d6 <spi_stm32_configure+0x1d6>
 80066d0:	2908      	cmp	r1, #8
 80066d2:	dd00      	ble.n	80066d6 <spi_stm32_configure+0x1d6>
 80066d4:	615d      	str	r5, [r3, #20]
 80066d6:	b112      	cbz	r2, 80066de <spi_stm32_configure+0x1de>
 80066d8:	290c      	cmp	r1, #12
 80066da:	dd00      	ble.n	80066de <spi_stm32_configure+0x1de>
 80066dc:	619e      	str	r6, [r3, #24]
 80066de:	b112      	cbz	r2, 80066e6 <spi_stm32_configure+0x1e6>
 80066e0:	2910      	cmp	r1, #16
 80066e2:	dd00      	ble.n	80066e6 <spi_stm32_configure+0x1e6>
 80066e4:	61d8      	str	r0, [r3, #28]
 80066e6:	2913      	cmp	r1, #19
 80066e8:	dd26      	ble.n	8006738 <spi_stm32_configure+0x238>
 80066ea:	2014      	movs	r0, #20
 80066ec:	b12a      	cbz	r2, 80066fa <spi_stm32_configure+0x1fa>
 80066ee:	2100      	movs	r1, #0
 80066f0:	6039      	str	r1, [r7, #0]
 80066f2:	2105      	movs	r1, #5
 80066f4:	7039      	strb	r1, [r7, #0]
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	60d9      	str	r1, [r3, #12]
 80066fa:	2100      	movs	r1, #0
 80066fc:	f36f 0100 	bfc	r1, #0, #1
 8006700:	f36f 0141 	bfc	r1, #1, #1
 8006704:	f36f 0182 	bfc	r1, #2, #1
 8006708:	f36f 01c5 	bfc	r1, #3, #3
 800670c:	2301      	movs	r3, #1
 800670e:	f363 1188 	bfi	r1, r3, #6, #3
 8006712:	f400 707d 	and.w	r0, r0, #1012	; 0x3f4
 8006716:	f360 2152 	bfi	r1, r0, #9, #10
 800671a:	f36f 41de 	bfc	r1, #19, #12
 800671e:	f36f 71df 	bfc	r1, #31, #1
 8006722:	2300      	movs	r3, #0
 8006724:	4825      	ldr	r0, [pc, #148]	; (80067bc <spi_stm32_configure+0x2bc>)
 8006726:	f008 fb1c 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 800672a:	46a5      	mov	sp, r4
		return -EINVAL;
 800672c:	f06f 0015 	mvn.w	r0, #21
 8006730:	e7b0      	b.n	8006694 <spi_stm32_configure+0x194>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8006732:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006736:	e7be      	b.n	80066b6 <spi_stm32_configure+0x1b6>
 8006738:	f06f 001b 	mvn.w	r0, #27
 800673c:	e7d6      	b.n	80066ec <spi_stm32_configure+0x1ec>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	f023 0302 	bic.w	r3, r3, #2
 8006744:	6023      	str	r3, [r4, #0]
}
 8006746:	e766      	b.n	8006616 <spi_stm32_configure+0x116>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	f023 0301 	bic.w	r3, r3, #1
 800674e:	6023      	str	r3, [r4, #0]
}
 8006750:	e76a      	b.n	8006628 <spi_stm32_configure+0x128>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006758:	6023      	str	r3, [r4, #0]
}
 800675a:	e772      	b.n	8006642 <spi_stm32_configure+0x142>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 800675c:	88ab      	ldrh	r3, [r5, #4]
 800675e:	f013 0f01 	tst.w	r3, #1
 8006762:	d008      	beq.n	8006776 <spi_stm32_configure+0x276>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800676a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800676c:	6863      	ldr	r3, [r4, #4]
 800676e:	f023 0304 	bic.w	r3, r3, #4
 8006772:	6063      	str	r3, [r4, #4]
}
 8006774:	e775      	b.n	8006662 <spi_stm32_configure+0x162>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800677c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006780:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8006782:	6863      	ldr	r3, [r4, #4]
 8006784:	f043 0304 	orr.w	r3, r3, #4
 8006788:	6063      	str	r3, [r4, #4]
}
 800678a:	e76a      	b.n	8006662 <spi_stm32_configure+0x162>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8006792:	6023      	str	r3, [r4, #0]
}
 8006794:	e76e      	b.n	8006674 <spi_stm32_configure+0x174>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8006796:	6863      	ldr	r3, [r4, #4]
 8006798:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800679c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80067a0:	6063      	str	r3, [r4, #4]
}
 80067a2:	e771      	b.n	8006688 <spi_stm32_configure+0x188>
		return 0;
 80067a4:	2000      	movs	r0, #0
 80067a6:	e775      	b.n	8006694 <spi_stm32_configure+0x194>
		return -ENOTSUP;
 80067a8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80067ac:	e772      	b.n	8006694 <spi_stm32_configure+0x194>
 80067ae:	bf00      	nop
 80067b0:	08011aa0 	.word	0x08011aa0
 80067b4:	08011594 	.word	0x08011594
 80067b8:	08012940 	.word	0x08012940
 80067bc:	080119d4 	.word	0x080119d4
 80067c0:	08012964 	.word	0x08012964

080067c4 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 80067c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067c8:	b09b      	sub	sp, #108	; 0x6c
 80067ca:	4604      	mov	r4, r0
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 80067cc:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 80067ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80067d2:	4873      	ldr	r0, [pc, #460]	; (80069a0 <spi_stm32_init+0x1dc>)
 80067d4:	f009 fe19 	bl	801040a <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80067d8:	b1f8      	cbz	r0, 800681a <spi_stm32_init+0x56>
	const struct clock_control_driver_api *api =
 80067da:	4871      	ldr	r0, [pc, #452]	; (80069a0 <spi_stm32_init+0x1dc>)
 80067dc:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4641      	mov	r1, r8
 80067e2:	4798      	blx	r3
 80067e4:	4681      	mov	r9, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 80067e6:	f1b9 0f00 	cmp.w	r9, #0
 80067ea:	d119      	bne.n	8006820 <spi_stm32_init+0x5c>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 80067ec:	aa06      	add	r2, sp, #24
 80067ee:	2100      	movs	r1, #0
 80067f0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80067f4:	f009 fda7 	bl	8010346 <pinctrl_lookup_state>
	if (ret < 0) {
 80067f8:	1e07      	subs	r7, r0, #0
 80067fa:	db06      	blt.n	800680a <spi_stm32_init+0x46>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 80067fc:	9b06      	ldr	r3, [sp, #24]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80067fe:	2200      	movs	r2, #0
 8006800:	7919      	ldrb	r1, [r3, #4]
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	f009 fdb9 	bl	801037a <pinctrl_configure_pins>
 8006808:	4607      	mov	r7, r0
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 800680a:	2f00      	cmp	r7, #0
 800680c:	db2d      	blt.n	800686a <spi_stm32_init+0xa6>
			return err;
		}
	}

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
 800680e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006812:	4620      	mov	r0, r4
 8006814:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8006816:	68ac      	ldr	r4, [r5, #8]
 8006818:	e06c      	b.n	80068f4 <spi_stm32_init+0x130>
		return -ENODEV;
 800681a:	f06f 0912 	mvn.w	r9, #18
 800681e:	e7e2      	b.n	80067e6 <spi_stm32_init+0x22>
		LOG_ERR("Could not enable SPI clock");
 8006820:	2201      	movs	r2, #1
 8006822:	f8ad 2018 	strh.w	r2, [sp, #24]
 8006826:	4b5f      	ldr	r3, [pc, #380]	; (80069a4 <spi_stm32_init+0x1e0>)
 8006828:	9318      	str	r3, [sp, #96]	; 0x60
 800682a:	2300      	movs	r3, #0
 800682c:	9305      	str	r3, [sp, #20]
 800682e:	2102      	movs	r1, #2
 8006830:	f88d 1014 	strb.w	r1, [sp, #20]
 8006834:	9905      	ldr	r1, [sp, #20]
 8006836:	9117      	str	r1, [sp, #92]	; 0x5c
 8006838:	4619      	mov	r1, r3
 800683a:	f363 0100 	bfi	r1, r3, #0, #1
 800683e:	f363 0141 	bfi	r1, r3, #1, #1
 8006842:	f363 0182 	bfi	r1, r3, #2, #1
 8006846:	f363 01c5 	bfi	r1, r3, #3, #3
 800684a:	f362 1188 	bfi	r1, r2, #6, #3
 800684e:	2208      	movs	r2, #8
 8006850:	f362 2152 	bfi	r1, r2, #9, #10
 8006854:	f363 41de 	bfi	r1, r3, #19, #12
 8006858:	f363 71df 	bfi	r1, r3, #31, #1
 800685c:	aa17      	add	r2, sp, #92	; 0x5c
 800685e:	4852      	ldr	r0, [pc, #328]	; (80069a8 <spi_stm32_init+0x1e4>)
 8006860:	f008 fa7f 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8006864:	f06f 0704 	mvn.w	r7, #4
 8006868:	e087      	b.n	800697a <spi_stm32_init+0x1b6>
			LOG_ERR("SPI pinctrl setup failed (%d)", err);
 800686a:	2201      	movs	r2, #1
 800686c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8006870:	4b4e      	ldr	r3, [pc, #312]	; (80069ac <spi_stm32_init+0x1e8>)
 8006872:	9312      	str	r3, [sp, #72]	; 0x48
 8006874:	9713      	str	r7, [sp, #76]	; 0x4c
 8006876:	2300      	movs	r3, #0
 8006878:	9305      	str	r3, [sp, #20]
 800687a:	2103      	movs	r1, #3
 800687c:	f88d 1014 	strb.w	r1, [sp, #20]
 8006880:	9905      	ldr	r1, [sp, #20]
 8006882:	9111      	str	r1, [sp, #68]	; 0x44
 8006884:	4619      	mov	r1, r3
 8006886:	f363 0100 	bfi	r1, r3, #0, #1
 800688a:	f363 0141 	bfi	r1, r3, #1, #1
 800688e:	f363 0182 	bfi	r1, r3, #2, #1
 8006892:	f363 01c5 	bfi	r1, r3, #3, #3
 8006896:	f362 1188 	bfi	r1, r2, #6, #3
 800689a:	220c      	movs	r2, #12
 800689c:	f362 2152 	bfi	r1, r2, #9, #10
 80068a0:	f363 41de 	bfi	r1, r3, #19, #12
 80068a4:	f363 71df 	bfi	r1, r3, #31, #1
 80068a8:	aa11      	add	r2, sp, #68	; 0x44
 80068aa:	483f      	ldr	r0, [pc, #252]	; (80069a8 <spi_stm32_init+0x1e4>)
 80068ac:	f008 fa59 	bl	800ed62 <z_impl_z_log_msg2_static_create>
			return err;
 80068b0:	e063      	b.n	800697a <spi_stm32_init+0x1b6>
		if (!device_is_ready(cs_gpio->port)) {
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	7922      	ldrb	r2, [r4, #4]
 80068b6:	9203      	str	r2, [sp, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	9302      	str	r3, [sp, #8]
 80068bc:	4b3c      	ldr	r3, [pc, #240]	; (80069b0 <spi_stm32_init+0x1ec>)
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	9000      	str	r0, [sp, #0]
 80068c2:	4603      	mov	r3, r0
 80068c4:	2201      	movs	r2, #1
 80068c6:	4938      	ldr	r1, [pc, #224]	; (80069a8 <spi_stm32_init+0x1e4>)
 80068c8:	f008 ff23 	bl	800f712 <z_log_msg2_runtime_create>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
 80068cc:	f06f 0712 	mvn.w	r7, #18
 80068d0:	e034      	b.n	800693c <spi_stm32_init+0x178>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80068d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80068d6:	f013 0f01 	tst.w	r3, #1
 80068da:	d026      	beq.n	800692a <spi_stm32_init+0x166>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80068dc:	2301      	movs	r3, #1
 80068de:	fa03 fe01 	lsl.w	lr, r3, r1
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	ea43 030e 	orr.w	r3, r3, lr
 80068e8:	603b      	str	r3, [r7, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
 80068ea:	6833      	ldr	r3, [r6, #0]
 80068ec:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
 80068ee:	1e07      	subs	r7, r0, #0
 80068f0:	db24      	blt.n	800693c <spi_stm32_init+0x178>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 80068f2:	3408      	adds	r4, #8
 80068f4:	68ab      	ldr	r3, [r5, #8]
 80068f6:	68ea      	ldr	r2, [r5, #12]
 80068f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068fc:	429c      	cmp	r4, r3
 80068fe:	d21c      	bcs.n	800693a <spi_stm32_init+0x176>
		if (!device_is_ready(cs_gpio->port)) {
 8006900:	6820      	ldr	r0, [r4, #0]
 8006902:	f009 fd82 	bl	801040a <z_device_is_ready>
 8006906:	2800      	cmp	r0, #0
 8006908:	d0d3      	beq.n	80068b2 <spi_stm32_init+0xee>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
 800690a:	6820      	ldr	r0, [r4, #0]
 800690c:	7921      	ldrb	r1, [r4, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
 800690e:	7963      	ldrb	r3, [r4, #5]
	return gpio_pin_configure(spec->port,
 8006910:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600
	const struct gpio_driver_api *api =
 8006914:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
 8006916:	6907      	ldr	r7, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8006918:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800691c:	d0d9      	beq.n	80068d2 <spi_stm32_init+0x10e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800691e:	f013 0f01 	tst.w	r3, #1
 8006922:	d0d6      	beq.n	80068d2 <spi_stm32_init+0x10e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8006924:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8006928:	e7d3      	b.n	80068d2 <spi_stm32_init+0x10e>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800692a:	2301      	movs	r3, #1
 800692c:	fa03 fe01 	lsl.w	lr, r3, r1
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	ea23 030e 	bic.w	r3, r3, lr
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	e7d7      	b.n	80068ea <spi_stm32_init+0x126>
			return ret;
		}
	}

	return 0;
 800693a:	464f      	mov	r7, r9
		return -ENODEV;
	}
#endif /* CONFIG_SPI_STM32_DMA */

	err = spi_context_cs_configure_all(&data->ctx);
	if (err < 0) {
 800693c:	2f00      	cmp	r7, #0
 800693e:	db1c      	blt.n	800697a <spi_stm32_init+0x1b6>
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b1bb      	cbz	r3, 8006974 <spi_stm32_init+0x1b0>
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	b1ab      	cbz	r3, 8006974 <spi_stm32_init+0x1b0>
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	b19a      	cbz	r2, 8006974 <spi_stm32_init+0x1b0>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 800694c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 800694e:	f005 fd21 	bl	800c394 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	791a      	ldrb	r2, [r3, #4]
	const struct gpio_driver_data *const data =
 800695a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800695c:	6819      	ldr	r1, [r3, #0]
 800695e:	2301      	movs	r3, #1
 8006960:	4093      	lsls	r3, r2
 8006962:	4219      	tst	r1, r3
 8006964:	d10d      	bne.n	8006982 <spi_stm32_init+0x1be>
 8006966:	464b      	mov	r3, r9
	if (value != 0)	{
 8006968:	b16b      	cbz	r3, 8006986 <spi_stm32_init+0x1c2>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800696a:	2101      	movs	r1, #1
 800696c:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 800696e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	4798      	blx	r3
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
 8006974:	69ab      	ldr	r3, [r5, #24]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 8006976:	b163      	cbz	r3, 8006992 <spi_stm32_init+0x1ce>
		return err;
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
 8006978:	464f      	mov	r7, r9
}
 800697a:	4638      	mov	r0, r7
 800697c:	b01b      	add	sp, #108	; 0x6c
 800697e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = (value != 0) ? 0 : 1;
 8006982:	2301      	movs	r3, #1
 8006984:	e7f0      	b.n	8006968 <spi_stm32_init+0x1a4>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8006986:	2101      	movs	r1, #1
 8006988:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 800698a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 8006990:	e7f0      	b.n	8006974 <spi_stm32_init+0x1b0>
		ctx->owner = NULL;
 8006992:	606b      	str	r3, [r5, #4]
		k_sem_give(&ctx->lock);
 8006994:	f105 0010 	add.w	r0, r5, #16
	z_impl_k_sem_give(sem);
 8006998:	f004 fdc0 	bl	800b51c <z_impl_k_sem_give>
}
 800699c:	e7ec      	b.n	8006978 <spi_stm32_init+0x1b4>
 800699e:	bf00      	nop
 80069a0:	08011594 	.word	0x08011594
 80069a4:	08012994 	.word	0x08012994
 80069a8:	080119d4 	.word	0x080119d4
 80069ac:	080129b0 	.word	0x080129b0
 80069b0:	080129d0 	.word	0x080129d0

080069b4 <transceive>:
{
 80069b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069b8:	b091      	sub	sp, #68	; 0x44
 80069ba:	4605      	mov	r5, r0
 80069bc:	4688      	mov	r8, r1
 80069be:	461f      	mov	r7, r3
	const struct spi_stm32_config *cfg = dev->config;
 80069c0:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 80069c2:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 80069c4:	689e      	ldr	r6, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 80069c6:	4691      	mov	r9, r2
 80069c8:	b31a      	cbz	r2, 8006a12 <transceive+0x5e>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 80069ca:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80069ce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80069d2:	d004      	beq.n	80069de <transceive+0x2a>
 80069d4:	69a3      	ldr	r3, [r4, #24]
 80069d6:	b913      	cbnz	r3, 80069de <transceive+0x2a>
		(ctx->owner == spi_cfg)) {
 80069d8:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 80069da:	4598      	cmp	r8, r3
 80069dc:	d009      	beq.n	80069f2 <transceive+0x3e>
	k_sem_take(&ctx->lock, K_FOREVER);
 80069de:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
 80069e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069ea:	f004 fdbf 	bl	800b56c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 80069ee:	f8c4 8004 	str.w	r8, [r4, #4]
	ret = spi_stm32_configure(dev, config);
 80069f2:	4641      	mov	r1, r8
 80069f4:	4628      	mov	r0, r5
 80069f6:	f7ff fd83 	bl	8006500 <spi_stm32_configure>
	if (ret) {
 80069fa:	4680      	mov	r8, r0
 80069fc:	b170      	cbz	r0, 8006a1c <transceive+0x68>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	889b      	ldrh	r3, [r3, #4]
 8006a02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006a06:	f000 80ab 	beq.w	8006b60 <transceive+0x1ac>
}
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	b011      	add	sp, #68	; 0x44
 8006a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 8006a12:	2f00      	cmp	r7, #0
 8006a14:	d1d9      	bne.n	80069ca <transceive+0x16>
		return 0;
 8006a16:	f04f 0800 	mov.w	r8, #0
 8006a1a:	e7f6      	b.n	8006a0a <transceive+0x56>
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8006a1c:	f1b9 0f00 	cmp.w	r9, #0
 8006a20:	d00b      	beq.n	8006a3a <transceive+0x86>
 8006a22:	f8d9 3000 	ldr.w	r3, [r9]
 8006a26:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8006a28:	b14b      	cbz	r3, 8006a3e <transceive+0x8a>
 8006a2a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006a2e:	64a3      	str	r3, [r4, #72]	; 0x48
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 8006a30:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8006a34:	f104 0148 	add.w	r1, r4, #72	; 0x48
	while (*count) {
 8006a38:	e008      	b.n	8006a4c <transceive+0x98>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8006a3a:	464b      	mov	r3, r9
 8006a3c:	e7f3      	b.n	8006a26 <transceive+0x72>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e7f5      	b.n	8006a2e <transceive+0x7a>
		++(*current);
 8006a42:	3208      	adds	r2, #8
 8006a44:	6002      	str	r2, [r0, #0]
		--(*count);
 8006a46:	680b      	ldr	r3, [r1, #0]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	600b      	str	r3, [r1, #0]
	while (*count) {
 8006a4c:	680b      	ldr	r3, [r1, #0]
 8006a4e:	b13b      	cbz	r3, 8006a60 <transceive+0xac>
		if (((*current)->len / dfs) != 0) {
 8006a50:	6802      	ldr	r2, [r0, #0]
 8006a52:	6853      	ldr	r3, [r2, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0f4      	beq.n	8006a42 <transceive+0x8e>
			*buf_len = (*current)->len / dfs;
 8006a58:	65a3      	str	r3, [r4, #88]	; 0x58
			return (*current)->buf;
 8006a5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	e000      	b.n	8006a62 <transceive+0xae>
	*buf_len = 0;
 8006a60:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 8006a62:	6563      	str	r3, [r4, #84]	; 0x54
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8006a64:	b19f      	cbz	r7, 8006a8e <transceive+0xda>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8006a6a:	b193      	cbz	r3, 8006a92 <transceive+0xde>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 8006a70:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8006a74:	f104 0150 	add.w	r1, r4, #80	; 0x50
	while (*count) {
 8006a78:	680b      	ldr	r3, [r1, #0]
 8006a7a:	b183      	cbz	r3, 8006a9e <transceive+0xea>
		if (((*current)->len / dfs) != 0) {
 8006a7c:	6802      	ldr	r2, [r0, #0]
 8006a7e:	6853      	ldr	r3, [r2, #4]
 8006a80:	b94b      	cbnz	r3, 8006a96 <transceive+0xe2>
		++(*current);
 8006a82:	3208      	adds	r2, #8
 8006a84:	6002      	str	r2, [r0, #0]
		--(*count);
 8006a86:	680b      	ldr	r3, [r1, #0]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	600b      	str	r3, [r1, #0]
 8006a8c:	e7f4      	b.n	8006a78 <transceive+0xc4>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8006a8e:	463b      	mov	r3, r7
 8006a90:	e7ea      	b.n	8006a68 <transceive+0xb4>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e7eb      	b.n	8006a6e <transceive+0xba>
			*buf_len = (*current)->len / dfs;
 8006a96:	6623      	str	r3, [r4, #96]	; 0x60
			return (*current)->buf;
 8006a98:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	e000      	b.n	8006aa0 <transceive+0xec>
	*buf_len = 0;
 8006a9e:	6623      	str	r3, [r4, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
 8006aa0:	65e3      	str	r3, [r4, #92]	; 0x5c
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6423      	str	r3, [r4, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8006aa6:	68b3      	ldr	r3, [r6, #8]
 8006aa8:	f013 0f01 	tst.w	r3, #1
 8006aac:	d001      	beq.n	8006ab2 <transceive+0xfe>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 8006aae:	68f3      	ldr	r3, [r6, #12]
 8006ab0:	e7f9      	b.n	8006aa6 <transceive+0xf2>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006ab2:	6833      	ldr	r3, [r6, #0]
 8006ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ab8:	6033      	str	r3, [r6, #0]
	spi_stm32_cs_control(dev, true);
 8006aba:	2101      	movs	r1, #1
 8006abc:	4628      	mov	r0, r5
 8006abe:	f008 fe6f 	bl	800f7a0 <spi_stm32_cs_control>
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8006ac2:	6873      	ldr	r3, [r6, #4]
 8006ac4:	f043 0320 	orr.w	r3, r3, #32
 8006ac8:	6073      	str	r3, [r6, #4]
	if (rx_bufs) {
 8006aca:	b11f      	cbz	r7, 8006ad4 <transceive+0x120>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8006acc:	6873      	ldr	r3, [r6, #4]
 8006ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad2:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8006ad4:	6873      	ldr	r3, [r6, #4]
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ada:	6073      	str	r3, [r6, #4]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8006adc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	bf38      	it	cc
 8006ae4:	461a      	movcc	r2, r3
 8006ae6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006aea:	fb03 f202 	mul.w	r2, r3, r2
			     ctx->config->frequency;
 8006aee:	4620      	mov	r0, r4
 8006af0:	f850 3b28 	ldr.w	r3, [r0], #40
 8006af4:	681b      	ldr	r3, [r3, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8006af6:	fbb2 f2f3 	udiv	r2, r2, r3
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
 8006afa:	32c8      	adds	r2, #200	; 0xc8
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8006afc:	0f91      	lsrs	r1, r2, #30
 8006afe:	0093      	lsls	r3, r2, #2
 8006b00:	189a      	adds	r2, r3, r2
 8006b02:	f141 0300 	adc.w	r3, r1, #0
 8006b06:	1892      	adds	r2, r2, r2
 8006b08:	415b      	adcs	r3, r3
 8006b0a:	f004 fd2f 	bl	800b56c <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
 8006b0e:	b910      	cbnz	r0, 8006b16 <transceive+0x162>
	status = ctx->sync_status;
 8006b10:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
	return status;
 8006b14:	e773      	b.n	80069fe <transceive+0x4a>
		LOG_ERR("Timeout waiting for transfer complete");
 8006b16:	2201      	movs	r2, #1
 8006b18:	f8ad 2008 	strh.w	r2, [sp, #8]
 8006b1c:	4b14      	ldr	r3, [pc, #80]	; (8006b70 <transceive+0x1bc>)
 8006b1e:	930e      	str	r3, [sp, #56]	; 0x38
 8006b20:	2300      	movs	r3, #0
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	2102      	movs	r1, #2
 8006b26:	f88d 1004 	strb.w	r1, [sp, #4]
 8006b2a:	9901      	ldr	r1, [sp, #4]
 8006b2c:	910d      	str	r1, [sp, #52]	; 0x34
 8006b2e:	4619      	mov	r1, r3
 8006b30:	f363 0100 	bfi	r1, r3, #0, #1
 8006b34:	f363 0141 	bfi	r1, r3, #1, #1
 8006b38:	f363 0182 	bfi	r1, r3, #2, #1
 8006b3c:	f363 01c5 	bfi	r1, r3, #3, #3
 8006b40:	f362 1188 	bfi	r1, r2, #6, #3
 8006b44:	2208      	movs	r2, #8
 8006b46:	f362 2152 	bfi	r1, r2, #9, #10
 8006b4a:	f363 41de 	bfi	r1, r3, #19, #12
 8006b4e:	f363 71df 	bfi	r1, r3, #31, #1
 8006b52:	aa0d      	add	r2, sp, #52	; 0x34
 8006b54:	4807      	ldr	r0, [pc, #28]	; (8006b74 <transceive+0x1c0>)
 8006b56:	f008 f904 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -ETIMEDOUT;
 8006b5a:	f06f 0873 	mvn.w	r8, #115	; 0x73
 8006b5e:	e74e      	b.n	80069fe <transceive+0x4a>
		ctx->owner = NULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 8006b64:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 8006b68:	f004 fcd8 	bl	800b51c <z_impl_k_sem_give>
}
 8006b6c:	e74d      	b.n	8006a0a <transceive+0x56>
 8006b6e:	bf00      	nop
 8006b70:	080129f4 	.word	0x080129f4
 8006b74:	080119d4 	.word	0x080119d4

08006b78 <timer_callback>:
{
	TimerIrqHandler();
}

static void timer_callback(struct k_timer *_timer)
{
 8006b78:	b508      	push	{r3, lr}
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 8006b7a:	4802      	ldr	r0, [pc, #8]	; (8006b84 <timer_callback+0xc>)
 8006b7c:	f004 fe5a 	bl	800b834 <k_work_submit>
}
 8006b80:	bd08      	pop	{r3, pc}
 8006b82:	bf00      	nop
 8006b84:	2000033c 	.word	0x2000033c

08006b88 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 8006b88:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8006b8a:	f009 ffdc 	bl	8010b46 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8006b8e:	220a      	movs	r2, #10
 8006b90:	2300      	movs	r3, #0
 8006b92:	f7f9 ff23 	bl	80009dc <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 8006b96:	4b02      	ldr	r3, [pc, #8]	; (8006ba0 <RtcGetTimerElapsedTime+0x18>)
 8006b98:	681b      	ldr	r3, [r3, #0]
}
 8006b9a:	1ac0      	subs	r0, r0, r3
 8006b9c:	bd08      	pop	{r3, pc}
 8006b9e:	bf00      	nop
 8006ba0:	2000100c 	.word	0x2000100c

08006ba4 <RtcStopAlarm>:
{
	return 1;
}

void RtcStopAlarm(void)
{
 8006ba4:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
 8006ba6:	4802      	ldr	r0, [pc, #8]	; (8006bb0 <RtcStopAlarm+0xc>)
 8006ba8:	f009 ffdd 	bl	8010b66 <z_impl_k_timer_stop>
	k_timer_stop(&lora_timer);
}
 8006bac:	bd08      	pop	{r3, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000610 	.word	0x20000610

08006bb4 <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout)
{
 8006bb4:	b500      	push	{lr}
 8006bb6:	b083      	sub	sp, #12
			return t * ((uint64_t)to_hz / from_hz);
 8006bb8:	0f83      	lsrs	r3, r0, #30
 8006bba:	0082      	lsls	r2, r0, #2
 8006bbc:	1812      	adds	r2, r2, r0
 8006bbe:	f143 0300 	adc.w	r3, r3, #0
 8006bc2:	1892      	adds	r2, r2, r2
 8006bc4:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	2100      	movs	r1, #0
 8006bca:	e9cd 0100 	strd	r0, r1, [sp]
 8006bce:	4803      	ldr	r0, [pc, #12]	; (8006bdc <RtcSetAlarm+0x28>)
 8006bd0:	f005 fc44 	bl	800c45c <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8006bd4:	b003      	add	sp, #12
 8006bd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bda:	bf00      	nop
 8006bdc:	20000610 	.word	0x20000610

08006be0 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 8006be0:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8006be2:	f009 ffb0 	bl	8010b46 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8006be6:	220a      	movs	r2, #10
 8006be8:	2300      	movs	r3, #0
 8006bea:	f7f9 fef7 	bl	80009dc <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 8006bee:	4b01      	ldr	r3, [pc, #4]	; (8006bf4 <RtcSetTimerContext+0x14>)
 8006bf0:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 8006bf2:	bd08      	pop	{r3, pc}
 8006bf4:	2000100c 	.word	0x2000100c

08006bf8 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 8006bf8:	4b01      	ldr	r3, [pc, #4]	; (8006c00 <RtcGetTimerContext+0x8>)
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	2000100c 	.word	0x2000100c

08006c04 <modem_release>:
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
{
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	4604      	mov	r4, r0
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8006c08:	f100 0544 	add.w	r5, r0, #68	; 0x44
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	f3bf 8f5b 	dmb	ish
 8006c12:	e855 2f00 	ldrex	r2, [r5]
 8006c16:	2a01      	cmp	r2, #1
 8006c18:	d103      	bne.n	8006c22 <modem_release+0x1e>
 8006c1a:	e845 3100 	strex	r1, r3, [r5]
 8006c1e:	2900      	cmp	r1, #0
 8006c20:	d1f7      	bne.n	8006c12 <modem_release+0xe>
 8006c22:	f3bf 8f5b 	dmb	ish
 8006c26:	bf0c      	ite	eq
 8006c28:	2601      	moveq	r6, #1
 8006c2a:	2600      	movne	r6, #0
 8006c2c:	d10e      	bne.n	8006c4c <modem_release+0x48>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 8006c2e:	4b08      	ldr	r3, [pc, #32]	; (8006c50 <modem_release+0x4c>)
 8006c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c32:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	6063      	str	r3, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8006c38:	f3bf 8f5b 	dmb	ish
 8006c3c:	e855 2f00 	ldrex	r2, [r5]
 8006c40:	e845 3100 	strex	r1, r3, [r5]
 8006c44:	2900      	cmp	r1, #0
 8006c46:	d1f9      	bne.n	8006c3c <modem_release+0x38>
 8006c48:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
}
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	08012d08 	.word	0x08012d08

08006c54 <sx12xx_ev_tx_timed_out>:
		}
	}
}

static void sx12xx_ev_tx_timed_out(void)
{
 8006c54:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8006c56:	4806      	ldr	r0, [pc, #24]	; (8006c70 <sx12xx_ev_tx_timed_out+0x1c>)
 8006c58:	6844      	ldr	r4, [r0, #4]

    /* Clean up TX timeout event callback */
    dev_data.events.TxTimeout = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6143      	str	r3, [r0, #20]

    if (modem_release(&dev_data)) {
 8006c5e:	f7ff ffd1 	bl	8006c04 <modem_release>
 8006c62:	b120      	cbz	r0, 8006c6e <sx12xx_ev_tx_timed_out+0x1a>
		/* Raise signal if provided */
		if (sig) {
 8006c64:	b11c      	cbz	r4, 8006c6e <sx12xx_ev_tx_timed_out+0x1a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8006c66:	2100      	movs	r1, #0
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f005 fef3 	bl	800ca54 <z_impl_k_poll_signal_raise>
			k_poll_signal_raise(sig, 0);
		}
	}
}
 8006c6e:	bd10      	pop	{r4, pc}
 8006c70:	20001010 	.word	0x20001010

08006c74 <sx12xx_ev_rx_error_timeout>:

static void sx12xx_ev_rx_error_timeout(void)
{
 8006c74:	b510      	push	{r4, lr}
 8006c76:	b090      	sub	sp, #64	; 0x40
    LOG_DBG("Receive timeout/error");
 8006c78:	2301      	movs	r3, #1
 8006c7a:	f8ad 3008 	strh.w	r3, [sp, #8]
 8006c7e:	2302      	movs	r3, #2
 8006c80:	f8ad 300a 	strh.w	r3, [sp, #10]
 8006c84:	4b16      	ldr	r3, [pc, #88]	; (8006ce0 <sx12xx_ev_rx_error_timeout+0x6c>)
 8006c86:	930e      	str	r3, [sp, #56]	; 0x38
 8006c88:	4b16      	ldr	r3, [pc, #88]	; (8006ce4 <sx12xx_ev_rx_error_timeout+0x70>)
 8006c8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9301      	str	r3, [sp, #4]
 8006c90:	2203      	movs	r2, #3
 8006c92:	f88d 2004 	strb.w	r2, [sp, #4]
 8006c96:	9a01      	ldr	r2, [sp, #4]
 8006c98:	920d      	str	r2, [sp, #52]	; 0x34
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	f363 0100 	bfi	r1, r3, #0, #1
 8006ca0:	f363 0141 	bfi	r1, r3, #1, #1
 8006ca4:	f363 0182 	bfi	r1, r3, #2, #1
 8006ca8:	f363 01c5 	bfi	r1, r3, #3, #3
 8006cac:	2204      	movs	r2, #4
 8006cae:	f362 1188 	bfi	r1, r2, #6, #3
 8006cb2:	220c      	movs	r2, #12
 8006cb4:	f362 2152 	bfi	r1, r2, #9, #10
 8006cb8:	f363 41de 	bfi	r1, r3, #19, #12
 8006cbc:	f363 71df 	bfi	r1, r3, #31, #1
 8006cc0:	aa0d      	add	r2, sp, #52	; 0x34
 8006cc2:	4809      	ldr	r0, [pc, #36]	; (8006ce8 <sx12xx_ev_rx_error_timeout+0x74>)
 8006cc4:	f008 f84d 	bl	800ed62 <z_impl_z_log_msg2_static_create>
    struct k_poll_signal *sig = dev_data.operation_done;
 8006cc8:	4b08      	ldr	r3, [pc, #32]	; (8006cec <sx12xx_ev_rx_error_timeout+0x78>)
 8006cca:	685c      	ldr	r4, [r3, #4]

    /* Receiving in asynchronous mode */
    if (dev_data.async_rx_error_timeout_cb) {
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	b103      	cbz	r3, 8006cd2 <sx12xx_ev_rx_error_timeout+0x5e>
        /* Run the callback */
        dev_data.async_rx_error_timeout_cb();
 8006cd0:	4798      	blx	r3
    }

    /* Raise signal if provided */
    if (sig) {
 8006cd2:	b11c      	cbz	r4, 8006cdc <sx12xx_ev_rx_error_timeout+0x68>
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f005 febc 	bl	800ca54 <z_impl_k_poll_signal_raise>
        k_poll_signal_raise(sig, 0);
    }
}
 8006cdc:	b010      	add	sp, #64	; 0x40
 8006cde:	bd10      	pop	{r4, pc}
 8006ce0:	08012a94 	.word	0x08012a94
 8006ce4:	08012b98 	.word	0x08012b98
 8006ce8:	080119e4 	.word	0x080119e4
 8006cec:	20001010 	.word	0x20001010

08006cf0 <sx12xx_ev_tx_done>:
{
 8006cf0:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8006cf2:	4805      	ldr	r0, [pc, #20]	; (8006d08 <sx12xx_ev_tx_done+0x18>)
 8006cf4:	6844      	ldr	r4, [r0, #4]
	if (modem_release(&dev_data)) {
 8006cf6:	f7ff ff85 	bl	8006c04 <modem_release>
 8006cfa:	b120      	cbz	r0, 8006d06 <sx12xx_ev_tx_done+0x16>
		if (sig) {
 8006cfc:	b11c      	cbz	r4, 8006d06 <sx12xx_ev_tx_done+0x16>
 8006cfe:	2100      	movs	r1, #0
 8006d00:	4620      	mov	r0, r4
 8006d02:	f005 fea7 	bl	800ca54 <z_impl_k_poll_signal_raise>
}
 8006d06:	bd10      	pop	{r4, pc}
 8006d08:	20001010 	.word	0x20001010

08006d0c <sx12xx_ev_rx_done>:
{
 8006d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	4617      	mov	r7, r2
 8006d12:	461d      	mov	r5, r3
	struct k_poll_signal *sig = dev_data.operation_done;
 8006d14:	4c24      	ldr	r4, [pc, #144]	; (8006da8 <sx12xx_ev_rx_done+0x9c>)
 8006d16:	6866      	ldr	r6, [r4, #4]
	if (dev_data.async_rx_cb) {
 8006d18:	68a4      	ldr	r4, [r4, #8]
 8006d1a:	b15c      	cbz	r4, 8006d34 <sx12xx_ev_rx_done+0x28>
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	460a      	mov	r2, r1
 8006d22:	4601      	mov	r1, r0
 8006d24:	4820      	ldr	r0, [pc, #128]	; (8006da8 <sx12xx_ev_rx_done+0x9c>)
 8006d26:	6800      	ldr	r0, [r0, #0]
 8006d28:	47a0      	blx	r4
		Radio.Rx(0);
 8006d2a:	4b20      	ldr	r3, [pc, #128]	; (8006dac <sx12xx_ev_rx_done+0xa0>)
 8006d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2e:	2000      	movs	r0, #0
 8006d30:	4798      	blx	r3
		return;
 8006d32:	e037      	b.n	8006da4 <sx12xx_ev_rx_done+0x98>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8006d34:	4b1e      	ldr	r3, [pc, #120]	; (8006db0 <sx12xx_ev_rx_done+0xa4>)
 8006d36:	2202      	movs	r2, #2
 8006d38:	f3bf 8f5b 	dmb	ish
 8006d3c:	e853 4f00 	ldrex	r4, [r3]
 8006d40:	2c01      	cmp	r4, #1
 8006d42:	d104      	bne.n	8006d4e <sx12xx_ev_rx_done+0x42>
 8006d44:	e843 2c00 	strex	ip, r2, [r3]
 8006d48:	f1bc 0f00 	cmp.w	ip, #0
 8006d4c:	d1f6      	bne.n	8006d3c <sx12xx_ev_rx_done+0x30>
 8006d4e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8006d52:	d127      	bne.n	8006da4 <sx12xx_ev_rx_done+0x98>
	if (size < *dev_data.rx_params.size) {
 8006d54:	3b44      	subs	r3, #68	; 0x44
 8006d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d58:	781a      	ldrb	r2, [r3, #0]
 8006d5a:	428a      	cmp	r2, r1
 8006d5c:	d900      	bls.n	8006d60 <sx12xx_ev_rx_done+0x54>
		*dev_data.rx_params.size = size;
 8006d5e:	7019      	strb	r1, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
 8006d60:	4c11      	ldr	r4, [pc, #68]	; (8006da8 <sx12xx_ev_rx_done+0x9c>)
 8006d62:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006d64:	781a      	ldrb	r2, [r3, #0]
 8006d66:	4601      	mov	r1, r0
 8006d68:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006d6a:	f009 ff9b 	bl	8010ca4 <memcpy>
	if (dev_data.rx_params.rssi) {
 8006d6e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006d70:	b103      	cbz	r3, 8006d74 <sx12xx_ev_rx_done+0x68>
		*dev_data.rx_params.rssi = rssi;
 8006d72:	801f      	strh	r7, [r3, #0]
	if (dev_data.rx_params.snr) {
 8006d74:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <sx12xx_ev_rx_done+0x9c>)
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	b103      	cbz	r3, 8006d7c <sx12xx_ev_rx_done+0x70>
		*dev_data.rx_params.snr = snr;
 8006d7a:	701d      	strb	r5, [r3, #0]
	Radio.Sleep();
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <sx12xx_ev_rx_done+0xa0>)
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	4798      	blx	r3
	dev_data.operation_done = NULL;
 8006d82:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <sx12xx_ev_rx_done+0x9c>)
 8006d84:	2100      	movs	r1, #0
 8006d86:	6059      	str	r1, [r3, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8006d88:	3344      	adds	r3, #68	; 0x44
 8006d8a:	f3bf 8f5b 	dmb	ish
 8006d8e:	e853 2f00 	ldrex	r2, [r3]
 8006d92:	e843 1000 	strex	r0, r1, [r3]
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d1f9      	bne.n	8006d8e <sx12xx_ev_rx_done+0x82>
 8006d9a:	f3bf 8f5b 	dmb	ish
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f005 fe58 	bl	800ca54 <z_impl_k_poll_signal_raise>
}
 8006da4:	b003      	add	sp, #12
 8006da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006da8:	20001010 	.word	0x20001010
 8006dac:	08012d08 	.word	0x08012d08
 8006db0:	20001054 	.word	0x20001054

08006db4 <__sx12xx_configure_pin>:
{
 8006db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006db6:	b087      	sub	sp, #28
 8006db8:	4604      	mov	r4, r0
 8006dba:	460f      	mov	r7, r1
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	461d      	mov	r5, r3
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	f004 f861 	bl	800ae88 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 8006dc6:	6020      	str	r0, [r4, #0]
	if (!(*dev)) {
 8006dc8:	b1f8      	cbz	r0, 8006e0a <__sx12xx_configure_pin+0x56>
	const struct gpio_driver_api *api =
 8006dca:	6883      	ldr	r3, [r0, #8]
	struct gpio_driver_data *data =
 8006dcc:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8006dce:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8006dd2:	d007      	beq.n	8006de4 <__sx12xx_configure_pin+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8006dd4:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 8006dd8:	d004      	beq.n	8006de4 <__sx12xx_configure_pin+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8006dda:	f015 0f01 	tst.w	r5, #1
 8006dde:	d001      	beq.n	8006de4 <__sx12xx_configure_pin+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8006de0:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8006de4:	f425 5280 	bic.w	r2, r5, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8006de8:	f015 0f01 	tst.w	r5, #1
 8006dec:	d019      	beq.n	8006e22 <__sx12xx_configure_pin+0x6e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006dee:	2101      	movs	r1, #1
 8006df0:	fa01 f506 	lsl.w	r5, r1, r6
 8006df4:	6821      	ldr	r1, [r4, #0]
 8006df6:	4329      	orrs	r1, r5
 8006df8:	6021      	str	r1, [r4, #0]
	return api->pin_configure(port, pin, flags);
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4798      	blx	r3
	if (err) {
 8006e00:	4604      	mov	r4, r0
 8006e02:	b9b0      	cbnz	r0, 8006e32 <__sx12xx_configure_pin+0x7e>
}
 8006e04:	4620      	mov	r0, r4
 8006e06:	b007      	add	sp, #28
 8006e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Cannot get pointer to %s device", controller);
 8006e0a:	9702      	str	r7, [sp, #8]
 8006e0c:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <__sx12xx_configure_pin+0x98>)
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	9000      	str	r0, [sp, #0]
 8006e12:	4603      	mov	r3, r0
 8006e14:	2201      	movs	r2, #1
 8006e16:	490e      	ldr	r1, [pc, #56]	; (8006e50 <__sx12xx_configure_pin+0x9c>)
 8006e18:	f008 ff7c 	bl	800fd14 <z_log_msg2_runtime_create>
		return -EIO;
 8006e1c:	f06f 0404 	mvn.w	r4, #4
 8006e20:	e7f0      	b.n	8006e04 <__sx12xx_configure_pin+0x50>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8006e22:	2101      	movs	r1, #1
 8006e24:	fa01 f506 	lsl.w	r5, r1, r6
 8006e28:	6821      	ldr	r1, [r4, #0]
 8006e2a:	ea21 0105 	bic.w	r1, r1, r5
 8006e2e:	6021      	str	r1, [r4, #0]
 8006e30:	e7e3      	b.n	8006dfa <__sx12xx_configure_pin+0x46>
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
 8006e32:	9004      	str	r0, [sp, #16]
 8006e34:	9603      	str	r6, [sp, #12]
 8006e36:	9702      	str	r7, [sp, #8]
 8006e38:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <__sx12xx_configure_pin+0xa0>)
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	9000      	str	r0, [sp, #0]
 8006e40:	4603      	mov	r3, r0
 8006e42:	2201      	movs	r2, #1
 8006e44:	4902      	ldr	r1, [pc, #8]	; (8006e50 <__sx12xx_configure_pin+0x9c>)
 8006e46:	f008 ff65 	bl	800fd14 <z_log_msg2_runtime_create>
		return err;
 8006e4a:	e7db      	b.n	8006e04 <__sx12xx_configure_pin+0x50>
 8006e4c:	08012ab0 	.word	0x08012ab0
 8006e50:	080119e4 	.word	0x080119e4
 8006e54:	08012ad0 	.word	0x08012ad0

08006e58 <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 8006e58:	b570      	push	{r4, r5, r6, lr}
 8006e5a:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8006e5c:	490f      	ldr	r1, [pc, #60]	; (8006e9c <sx12xx_lora_send_async+0x44>)
 8006e5e:	2001      	movs	r0, #1
 8006e60:	f3bf 8f5b 	dmb	ish
 8006e64:	e851 4f00 	ldrex	r4, [r1]
 8006e68:	2c00      	cmp	r4, #0
 8006e6a:	d103      	bne.n	8006e74 <sx12xx_lora_send_async+0x1c>
 8006e6c:	e841 0600 	strex	r6, r0, [r1]
 8006e70:	2e00      	cmp	r6, #0
 8006e72:	d1f7      	bne.n	8006e64 <sx12xx_lora_send_async+0xc>
 8006e74:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8006e78:	d10c      	bne.n	8006e94 <sx12xx_lora_send_async+0x3c>
		return -EBUSY;
	}

	/* Store signal */
	dev_data.operation_done = async;
 8006e7a:	3944      	subs	r1, #68	; 0x44
 8006e7c:	604b      	str	r3, [r1, #4]

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8006e7e:	4e08      	ldr	r6, [pc, #32]	; (8006ea0 <sx12xx_lora_send_async+0x48>)
 8006e80:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8006e82:	b2d4      	uxtb	r4, r2
 8006e84:	4621      	mov	r1, r4
 8006e86:	4798      	blx	r3

	Radio.Send(data, data_len);
 8006e88:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	4798      	blx	r3

	return 0;
 8006e90:	2000      	movs	r0, #0
}
 8006e92:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8006e94:	f06f 000f 	mvn.w	r0, #15
 8006e98:	e7fb      	b.n	8006e92 <sx12xx_lora_send_async+0x3a>
 8006e9a:	bf00      	nop
 8006e9c:	20001054 	.word	0x20001054
 8006ea0:	08012d08 	.word	0x08012d08

08006ea4 <sx12xx_lora_send>:
{
 8006ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ea6:	b09d      	sub	sp, #116	; 0x74
 8006ea8:	af04      	add	r7, sp, #16
 8006eaa:	4615      	mov	r5, r2
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8006eac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006eb0:	63ba      	str	r2, [r7, #56]	; 0x38
 8006eb2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8006eb8:	647b      	str	r3, [r7, #68]	; 0x44
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006ec8:	2401      	movs	r4, #1
 8006eca:	f364 0304 	bfi	r3, r4, #0, #5
 8006ece:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8006ed2:	637a      	str	r2, [r7, #52]	; 0x34
	if (!dev_data.tx_cfg.frequency) {
 8006ed4:	4b5a      	ldr	r3, [pc, #360]	; (8007040 <sx12xx_lora_send+0x19c>)
 8006ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 80ae 	beq.w	800703a <sx12xx_lora_send+0x196>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 8006ede:	4613      	mov	r3, r2
 8006ee0:	462a      	mov	r2, r5
 8006ee2:	f7ff ffb9 	bl	8006e58 <sx12xx_lora_send_async>
	if (ret < 0) {
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	db6c      	blt.n	8006fc4 <sx12xx_lora_send+0x120>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8006eea:	4b56      	ldr	r3, [pc, #344]	; (8007044 <sx12xx_lora_send+0x1a0>)
 8006eec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
				   dev_data.tx_cfg.bandwidth,
 8006eee:	4854      	ldr	r0, [pc, #336]	; (8007040 <sx12xx_lora_send+0x19c>)
 8006ef0:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
				   dev_data.tx_cfg.datarate,
 8006ef4:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
				   dev_data.tx_cfg.coding_rate,
 8006ef8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8006efc:	2601      	movs	r6, #1
 8006efe:	9603      	str	r6, [sp, #12]
 8006f00:	fa5f fc85 	uxtb.w	ip, r5
 8006f04:	f8cd c008 	str.w	ip, [sp, #8]
 8006f08:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
 8006f0c:	f8cd c004 	str.w	ip, [sp, #4]
 8006f10:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8006f12:	9000      	str	r0, [sp, #0]
 8006f14:	4630      	mov	r0, r6
 8006f16:	47a0      	blx	r4
 8006f18:	4604      	mov	r4, r0
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
 8006f1a:	80be      	strh	r6, [r7, #4]
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	80fb      	strh	r3, [r7, #6]
 8006f20:	466e      	mov	r6, sp
 8006f22:	b088      	sub	sp, #32
 8006f24:	a904      	add	r1, sp, #16
 8006f26:	466b      	mov	r3, sp
 8006f28:	f113 021c 	adds.w	r2, r3, #28
 8006f2c:	d04d      	beq.n	8006fca <sx12xx_lora_send+0x126>
 8006f2e:	2314      	movs	r3, #20
 8006f30:	2001      	movs	r0, #1
 8006f32:	80b8      	strh	r0, [r7, #4]
 8006f34:	b11a      	cbz	r2, 8006f3e <sx12xx_lora_send+0x9a>
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	dd01      	ble.n	8006f3e <sx12xx_lora_send+0x9a>
 8006f3a:	4843      	ldr	r0, [pc, #268]	; (8007048 <sx12xx_lora_send+0x1a4>)
 8006f3c:	6108      	str	r0, [r1, #16]
 8006f3e:	2002      	movs	r0, #2
 8006f40:	80f8      	strh	r0, [r7, #6]
 8006f42:	b11a      	cbz	r2, 8006f4c <sx12xx_lora_send+0xa8>
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	dd01      	ble.n	8006f4c <sx12xx_lora_send+0xa8>
 8006f48:	4840      	ldr	r0, [pc, #256]	; (800704c <sx12xx_lora_send+0x1a8>)
 8006f4a:	6148      	str	r0, [r1, #20]
 8006f4c:	b112      	cbz	r2, 8006f54 <sx12xx_lora_send+0xb0>
 8006f4e:	2b0c      	cmp	r3, #12
 8006f50:	dd00      	ble.n	8006f54 <sx12xx_lora_send+0xb0>
 8006f52:	618d      	str	r5, [r1, #24]
 8006f54:	b112      	cbz	r2, 8006f5c <sx12xx_lora_send+0xb8>
 8006f56:	2b10      	cmp	r3, #16
 8006f58:	dd00      	ble.n	8006f5c <sx12xx_lora_send+0xb8>
 8006f5a:	61cc      	str	r4, [r1, #28]
 8006f5c:	2b13      	cmp	r3, #19
 8006f5e:	dd37      	ble.n	8006fd0 <sx12xx_lora_send+0x12c>
 8006f60:	2314      	movs	r3, #20
 8006f62:	b12a      	cbz	r2, 8006f70 <sx12xx_lora_send+0xcc>
 8006f64:	2000      	movs	r0, #0
 8006f66:	6038      	str	r0, [r7, #0]
 8006f68:	2005      	movs	r0, #5
 8006f6a:	7038      	strb	r0, [r7, #0]
 8006f6c:	6838      	ldr	r0, [r7, #0]
 8006f6e:	60c8      	str	r0, [r1, #12]
 8006f70:	2100      	movs	r1, #0
 8006f72:	f36f 0100 	bfc	r1, #0, #1
 8006f76:	f36f 0141 	bfc	r1, #1, #1
 8006f7a:	f36f 0182 	bfc	r1, #2, #1
 8006f7e:	f36f 01c5 	bfc	r1, #3, #3
 8006f82:	2004      	movs	r0, #4
 8006f84:	f360 1188 	bfi	r1, r0, #6, #3
 8006f88:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 8006f8c:	f363 2152 	bfi	r1, r3, #9, #10
 8006f90:	f36f 41de 	bfc	r1, #19, #12
 8006f94:	f36f 71df 	bfc	r1, #31, #1
 8006f98:	2300      	movs	r3, #0
 8006f9a:	482d      	ldr	r0, [pc, #180]	; (8007050 <sx12xx_lora_send+0x1ac>)
 8006f9c:	f007 fee1 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8006fa0:	46b5      	mov	sp, r6
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 8006fa2:	0060      	lsls	r0, r4, #1
			return t * ((uint64_t)to_hz / from_hz);
 8006fa4:	f3c4 7341 	ubfx	r3, r4, #29, #2
 8006fa8:	00e2      	lsls	r2, r4, #3
 8006faa:	1812      	adds	r2, r2, r0
 8006fac:	f143 0300 	adc.w	r3, r3, #0
 8006fb0:	1892      	adds	r2, r2, r2
 8006fb2:	415b      	adcs	r3, r3
	return z_impl_k_poll(events, num_events, timeout);
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006fba:	f005 fc9f 	bl	800c8fc <z_impl_k_poll>
	if (ret < 0) {
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	db09      	blt.n	8006fd6 <sx12xx_lora_send+0x132>
	return 0;
 8006fc2:	2000      	movs	r0, #0
}
 8006fc4:	3764      	adds	r7, #100	; 0x64
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
 8006fca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006fce:	e7af      	b.n	8006f30 <sx12xx_lora_send+0x8c>
 8006fd0:	f06f 031b 	mvn.w	r3, #27
 8006fd4:	e7c5      	b.n	8006f62 <sx12xx_lora_send+0xbe>
		LOG_ERR("Packet transmission failed!");
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	80ba      	strh	r2, [r7, #4]
 8006fda:	4b1e      	ldr	r3, [pc, #120]	; (8007054 <sx12xx_lora_send+0x1b0>)
 8006fdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fde:	2300      	movs	r3, #0
 8006fe0:	603b      	str	r3, [r7, #0]
 8006fe2:	2102      	movs	r1, #2
 8006fe4:	7039      	strb	r1, [r7, #0]
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6579      	str	r1, [r7, #84]	; 0x54
 8006fea:	4619      	mov	r1, r3
 8006fec:	f363 0100 	bfi	r1, r3, #0, #1
 8006ff0:	f363 0141 	bfi	r1, r3, #1, #1
 8006ff4:	f363 0182 	bfi	r1, r3, #2, #1
 8006ff8:	f363 01c5 	bfi	r1, r3, #3, #3
 8006ffc:	f362 1188 	bfi	r1, r2, #6, #3
 8007000:	2208      	movs	r2, #8
 8007002:	f362 2152 	bfi	r1, r2, #9, #10
 8007006:	f363 41de 	bfi	r1, r3, #19, #12
 800700a:	f363 71df 	bfi	r1, r3, #31, #1
 800700e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8007012:	480f      	ldr	r0, [pc, #60]	; (8007050 <sx12xx_lora_send+0x1ac>)
 8007014:	f007 fea5 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		if (!modem_release(&dev_data)) {
 8007018:	4809      	ldr	r0, [pc, #36]	; (8007040 <sx12xx_lora_send+0x19c>)
 800701a:	f7ff fdf3 	bl	8006c04 <modem_release>
 800701e:	b108      	cbz	r0, 8007024 <sx12xx_lora_send+0x180>
	return 0;
 8007020:	2000      	movs	r0, #0
 8007022:	e7cf      	b.n	8006fc4 <sx12xx_lora_send+0x120>
 8007024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800702c:	2101      	movs	r1, #1
 800702e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007032:	f005 fc63 	bl	800c8fc <z_impl_k_poll>
 8007036:	2000      	movs	r0, #0
 8007038:	e7c4      	b.n	8006fc4 <sx12xx_lora_send+0x120>
		return -EINVAL;
 800703a:	f06f 0015 	mvn.w	r0, #21
 800703e:	e7c1      	b.n	8006fc4 <sx12xx_lora_send+0x120>
 8007040:	20001010 	.word	0x20001010
 8007044:	08012d08 	.word	0x08012d08
 8007048:	08012af0 	.word	0x08012af0
 800704c:	08012bb4 	.word	0x08012bb4
 8007050:	080119e4 	.word	0x080119e4
 8007054:	08012b1c 	.word	0x08012b1c

08007058 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8007058:	b530      	push	{r4, r5, lr}
 800705a:	b09b      	sub	sp, #108	; 0x6c
 800705c:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8007060:	aa10      	add	r2, sp, #64	; 0x40
 8007062:	9210      	str	r2, [sp, #64]	; 0x40
 8007064:	9211      	str	r2, [sp, #68]	; 0x44
 8007066:	2300      	movs	r3, #0
 8007068:	9312      	str	r3, [sp, #72]	; 0x48
 800706a:	9313      	str	r3, [sp, #76]	; 0x4c
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800706c:	930b      	str	r3, [sp, #44]	; 0x2c
 800706e:	930c      	str	r3, [sp, #48]	; 0x30
 8007070:	930d      	str	r3, [sp, #52]	; 0x34
 8007072:	930e      	str	r3, [sp, #56]	; 0x38
 8007074:	930f      	str	r3, [sp, #60]	; 0x3c
 8007076:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800707a:	2001      	movs	r0, #1
 800707c:	f360 0304 	bfi	r3, r0, #0, #5
 8007080:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8007084:	920f      	str	r2, [sp, #60]	; 0x3c
 8007086:	4b32      	ldr	r3, [pc, #200]	; (8007150 <sx12xx_lora_recv+0xf8>)
 8007088:	f3bf 8f5b 	dmb	ish
 800708c:	e853 2f00 	ldrex	r2, [r3]
 8007090:	2a00      	cmp	r2, #0
 8007092:	d103      	bne.n	800709c <sx12xx_lora_recv+0x44>
 8007094:	e843 0400 	strex	r4, r0, [r3]
 8007098:	2c00      	cmp	r4, #0
 800709a:	d1f7      	bne.n	800708c <sx12xx_lora_recv+0x34>
 800709c:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 80070a0:	d153      	bne.n	800714a <sx12xx_lora_recv+0xf2>
		return -EBUSY;
	}

	dev_data.async_rx_cb = NULL;
 80070a2:	3b44      	subs	r3, #68	; 0x44
 80070a4:	2400      	movs	r4, #0
 80070a6:	609c      	str	r4, [r3, #8]
	/* Store operation signal */
	dev_data.operation_done = &done;
 80070a8:	aa10      	add	r2, sp, #64	; 0x40
 80070aa:	605a      	str	r2, [r3, #4]
	/* Set data output location */
	dev_data.rx_params.buf = data;
 80070ac:	6499      	str	r1, [r3, #72]	; 0x48
	dev_data.rx_params.size = &size;
 80070ae:	f10d 0207 	add.w	r2, sp, #7
 80070b2:	64da      	str	r2, [r3, #76]	; 0x4c
	dev_data.rx_params.rssi = rssi;
 80070b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070b6:	651a      	str	r2, [r3, #80]	; 0x50
	dev_data.rx_params.snr = snr;
 80070b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 80070bc:	4d25      	ldr	r5, [pc, #148]	; (8007154 <sx12xx_lora_recv+0xfc>)
 80070be:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80070c0:	21ff      	movs	r1, #255	; 0xff
 80070c2:	4798      	blx	r3
	Radio.Rx(0);
 80070c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80070c6:	4620      	mov	r0, r4
 80070c8:	4798      	blx	r3
 80070ca:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 80070ce:	2101      	movs	r1, #1
 80070d0:	a80b      	add	r0, sp, #44	; 0x2c
 80070d2:	f005 fc13 	bl	800c8fc <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 80070d6:	1e04      	subs	r4, r0, #0
 80070d8:	db04      	blt.n	80070e4 <sx12xx_lora_recv+0x8c>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 80070da:	f89d 4007 	ldrb.w	r4, [sp, #7]
}
 80070de:	4620      	mov	r0, r4
 80070e0:	b01b      	add	sp, #108	; 0x6c
 80070e2:	bd30      	pop	{r4, r5, pc}
		if (!modem_release(&dev_data)) {
 80070e4:	481c      	ldr	r0, [pc, #112]	; (8007158 <sx12xx_lora_recv+0x100>)
 80070e6:	f7ff fd8d 	bl	8006c04 <modem_release>
 80070ea:	b950      	cbnz	r0, 8007102 <sx12xx_lora_recv+0xaa>
 80070ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070f4:	2101      	movs	r1, #1
 80070f6:	a80b      	add	r0, sp, #44	; 0x2c
 80070f8:	f005 fc00 	bl	800c8fc <z_impl_k_poll>
			return size;
 80070fc:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8007100:	e7ed      	b.n	80070de <sx12xx_lora_recv+0x86>
		LOG_INF("Receive timeout");
 8007102:	2301      	movs	r3, #1
 8007104:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007108:	4b14      	ldr	r3, [pc, #80]	; (800715c <sx12xx_lora_recv+0x104>)
 800710a:	9318      	str	r3, [sp, #96]	; 0x60
 800710c:	2300      	movs	r3, #0
 800710e:	9302      	str	r3, [sp, #8]
 8007110:	2202      	movs	r2, #2
 8007112:	f88d 2008 	strb.w	r2, [sp, #8]
 8007116:	9a02      	ldr	r2, [sp, #8]
 8007118:	9217      	str	r2, [sp, #92]	; 0x5c
 800711a:	4619      	mov	r1, r3
 800711c:	f363 0100 	bfi	r1, r3, #0, #1
 8007120:	f363 0141 	bfi	r1, r3, #1, #1
 8007124:	f363 0182 	bfi	r1, r3, #2, #1
 8007128:	f363 01c5 	bfi	r1, r3, #3, #3
 800712c:	2203      	movs	r2, #3
 800712e:	f362 1188 	bfi	r1, r2, #6, #3
 8007132:	2208      	movs	r2, #8
 8007134:	f362 2152 	bfi	r1, r2, #9, #10
 8007138:	f363 41de 	bfi	r1, r3, #19, #12
 800713c:	f363 71df 	bfi	r1, r3, #31, #1
 8007140:	aa17      	add	r2, sp, #92	; 0x5c
 8007142:	4807      	ldr	r0, [pc, #28]	; (8007160 <sx12xx_lora_recv+0x108>)
 8007144:	f007 fe0d 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return ret;
 8007148:	e7c9      	b.n	80070de <sx12xx_lora_recv+0x86>
		return -EBUSY;
 800714a:	f06f 040f 	mvn.w	r4, #15
 800714e:	e7c6      	b.n	80070de <sx12xx_lora_recv+0x86>
 8007150:	20001054 	.word	0x20001054
 8007154:	08012d08 	.word	0x08012d08
 8007158:	20001010 	.word	0x20001010
 800715c:	08012b38 	.word	0x08012b38
 8007160:	080119e4 	.word	0x080119e4

08007164 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb,
  lora_recv_error_timeout_cb error_timeout_cb)
{
 8007164:	b510      	push	{r4, lr}
 8007166:	b090      	sub	sp, #64	; 0x40
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 8007168:	4613      	mov	r3, r2
 800716a:	b302      	cbz	r2, 80071ae <sx12xx_lora_recv_async+0x4a>
 800716c:	b103      	cbz	r3, 8007170 <sx12xx_lora_recv_async+0xc>
 800716e:	b301      	cbz	r1, 80071b2 <sx12xx_lora_recv_async+0x4e>
      LOG_ERR("One of callback functions cannot be equal NULL");
      return -EINVAL;
  }

	/* Cancel ongoing reception */
	if (cb == NULL) {
 8007170:	2900      	cmp	r1, #0
 8007172:	d043      	beq.n	80071fc <sx12xx_lora_recv_async+0x98>
 8007174:	4a27      	ldr	r2, [pc, #156]	; (8007214 <sx12xx_lora_recv_async+0xb0>)
 8007176:	2001      	movs	r0, #1
 8007178:	f3bf 8f5b 	dmb	ish
 800717c:	e852 4f00 	ldrex	r4, [r2]
 8007180:	2c00      	cmp	r4, #0
 8007182:	d104      	bne.n	800718e <sx12xx_lora_recv_async+0x2a>
 8007184:	e842 0c00 	strex	ip, r0, [r2]
 8007188:	f1bc 0f00 	cmp.w	ip, #0
 800718c:	d1f6      	bne.n	800717c <sx12xx_lora_recv_async+0x18>
 800718e:	f3bf 8f5b 	dmb	ish
		}
		return 0;
	}

	/* Ensure available */
	if (!modem_acquire(&dev_data)) {
 8007192:	d13c      	bne.n	800720e <sx12xx_lora_recv_async+0xaa>
		return -EBUSY;
	}

	/* Store parameters */
	dev_data.async_rx_cb = cb;
 8007194:	3a44      	subs	r2, #68	; 0x44
 8007196:	6091      	str	r1, [r2, #8]
   dev_data.async_rx_error_timeout_cb = error_timeout_cb;
 8007198:	60d3      	str	r3, [r2, #12]

	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 800719a:	4c1f      	ldr	r4, [pc, #124]	; (8007218 <sx12xx_lora_recv_async+0xb4>)
 800719c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800719e:	21ff      	movs	r1, #255	; 0xff
 80071a0:	4798      	blx	r3
	Radio.Rx(0);
 80071a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071a4:	2000      	movs	r0, #0
 80071a6:	4798      	blx	r3

	return 0;
 80071a8:	2000      	movs	r0, #0
}
 80071aa:	b010      	add	sp, #64	; 0x40
 80071ac:	bd10      	pop	{r4, pc}
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 80071ae:	2900      	cmp	r1, #0
 80071b0:	d0dc      	beq.n	800716c <sx12xx_lora_recv_async+0x8>
      LOG_ERR("One of callback functions cannot be equal NULL");
 80071b2:	2201      	movs	r2, #1
 80071b4:	f8ad 2008 	strh.w	r2, [sp, #8]
 80071b8:	4b18      	ldr	r3, [pc, #96]	; (800721c <sx12xx_lora_recv_async+0xb8>)
 80071ba:	930e      	str	r3, [sp, #56]	; 0x38
 80071bc:	2300      	movs	r3, #0
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	2102      	movs	r1, #2
 80071c2:	f88d 1004 	strb.w	r1, [sp, #4]
 80071c6:	9901      	ldr	r1, [sp, #4]
 80071c8:	910d      	str	r1, [sp, #52]	; 0x34
 80071ca:	4619      	mov	r1, r3
 80071cc:	f363 0100 	bfi	r1, r3, #0, #1
 80071d0:	f363 0141 	bfi	r1, r3, #1, #1
 80071d4:	f363 0182 	bfi	r1, r3, #2, #1
 80071d8:	f363 01c5 	bfi	r1, r3, #3, #3
 80071dc:	f362 1188 	bfi	r1, r2, #6, #3
 80071e0:	2208      	movs	r2, #8
 80071e2:	f362 2152 	bfi	r1, r2, #9, #10
 80071e6:	f363 41de 	bfi	r1, r3, #19, #12
 80071ea:	f363 71df 	bfi	r1, r3, #31, #1
 80071ee:	aa0d      	add	r2, sp, #52	; 0x34
 80071f0:	480b      	ldr	r0, [pc, #44]	; (8007220 <sx12xx_lora_recv_async+0xbc>)
 80071f2:	f007 fdb6 	bl	800ed62 <z_impl_z_log_msg2_static_create>
      return -EINVAL;
 80071f6:	f06f 0015 	mvn.w	r0, #21
 80071fa:	e7d6      	b.n	80071aa <sx12xx_lora_recv_async+0x46>
		if (!modem_release(&dev_data)) {
 80071fc:	4809      	ldr	r0, [pc, #36]	; (8007224 <sx12xx_lora_recv_async+0xc0>)
 80071fe:	f7ff fd01 	bl	8006c04 <modem_release>
 8007202:	b108      	cbz	r0, 8007208 <sx12xx_lora_recv_async+0xa4>
		return 0;
 8007204:	2000      	movs	r0, #0
 8007206:	e7d0      	b.n	80071aa <sx12xx_lora_recv_async+0x46>
			return -EINVAL;
 8007208:	f06f 0015 	mvn.w	r0, #21
 800720c:	e7cd      	b.n	80071aa <sx12xx_lora_recv_async+0x46>
		return -EBUSY;
 800720e:	f06f 000f 	mvn.w	r0, #15
 8007212:	e7ca      	b.n	80071aa <sx12xx_lora_recv_async+0x46>
 8007214:	20001054 	.word	0x20001054
 8007218:	08012d08 	.word	0x08012d08
 800721c:	08012b48 	.word	0x08012b48
 8007220:	080119e4 	.word	0x080119e4
 8007224:	20001010 	.word	0x20001010

08007228 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8007228:	b570      	push	{r4, r5, r6, lr}
 800722a:	b08a      	sub	sp, #40	; 0x28
 800722c:	460c      	mov	r4, r1
 800722e:	4b2b      	ldr	r3, [pc, #172]	; (80072dc <sx12xx_lora_config+0xb4>)
 8007230:	2201      	movs	r2, #1
 8007232:	f3bf 8f5b 	dmb	ish
 8007236:	e853 1f00 	ldrex	r1, [r3]
 800723a:	2900      	cmp	r1, #0
 800723c:	d103      	bne.n	8007246 <sx12xx_lora_config+0x1e>
 800723e:	e843 2000 	strex	r0, r2, [r3]
 8007242:	2800      	cmp	r0, #0
 8007244:	d1f7      	bne.n	8007236 <sx12xx_lora_config+0xe>
 8007246:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 800724a:	d143      	bne.n	80072d4 <sx12xx_lora_config+0xac>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 800724c:	4b24      	ldr	r3, [pc, #144]	; (80072e0 <sx12xx_lora_config+0xb8>)
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	6820      	ldr	r0, [r4, #0]
 8007252:	4798      	blx	r3

	if (config->tx) {
 8007254:	7b63      	ldrb	r3, [r4, #13]
 8007256:	b9eb      	cbnz	r3, 8007294 <sx12xx_lora_config+0x6c>
				  config->coding_rate, config->preamble_len,
				  config->fixed_len, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */

        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 8007258:	7ae2      	ldrb	r2, [r4, #11]
 800725a:	2a00      	cmp	r2, #0
 800725c:	d038      	beq.n	80072d0 <sx12xx_lora_config+0xa8>
 800725e:	7aa1      	ldrb	r1, [r4, #10]

		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 8007260:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <sx12xx_lora_config+0xb8>)
 8007262:	699d      	ldr	r5, [r3, #24]
 8007264:	2001      	movs	r0, #1
 8007266:	9009      	str	r0, [sp, #36]	; 0x24
 8007268:	2300      	movs	r3, #0
 800726a:	9308      	str	r3, [sp, #32]
 800726c:	9307      	str	r3, [sp, #28]
 800726e:	9306      	str	r3, [sp, #24]
 8007270:	9305      	str	r3, [sp, #20]
 8007272:	9104      	str	r1, [sp, #16]
 8007274:	9203      	str	r2, [sp, #12]
 8007276:	220a      	movs	r2, #10
 8007278:	9202      	str	r2, [sp, #8]
 800727a:	8922      	ldrh	r2, [r4, #8]
 800727c:	9201      	str	r2, [sp, #4]
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	79a3      	ldrb	r3, [r4, #6]
 8007282:	7962      	ldrb	r2, [r4, #5]
 8007284:	7921      	ldrb	r1, [r4, #4]
 8007286:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, config->fixed_len, payload_len,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 8007288:	4816      	ldr	r0, [pc, #88]	; (80072e4 <sx12xx_lora_config+0xbc>)
 800728a:	f7ff fcbb 	bl	8006c04 <modem_release>
	return 0;
 800728e:	2000      	movs	r0, #0
}
 8007290:	b00a      	add	sp, #40	; 0x28
 8007292:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 8007294:	4d14      	ldr	r5, [pc, #80]	; (80072e8 <sx12xx_lora_config+0xc0>)
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	6861      	ldr	r1, [r4, #4]
 800729a:	68a2      	ldr	r2, [r4, #8]
 800729c:	68e3      	ldr	r3, [r4, #12]
 800729e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 80072a0:	4b0f      	ldr	r3, [pc, #60]	; (80072e0 <sx12xx_lora_config+0xb8>)
 80072a2:	69dd      	ldr	r5, [r3, #28]
				  config->bandwidth, config->datarate,
 80072a4:	7963      	ldrb	r3, [r4, #5]
				  config->coding_rate, config->preamble_len,
 80072a6:	79a1      	ldrb	r1, [r4, #6]
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 80072a8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80072ac:	9208      	str	r2, [sp, #32]
 80072ae:	2200      	movs	r2, #0
 80072b0:	9207      	str	r2, [sp, #28]
 80072b2:	9206      	str	r2, [sp, #24]
 80072b4:	9205      	str	r2, [sp, #20]
 80072b6:	2001      	movs	r0, #1
 80072b8:	9004      	str	r0, [sp, #16]
 80072ba:	7ae6      	ldrb	r6, [r4, #11]
 80072bc:	9603      	str	r6, [sp, #12]
 80072be:	8926      	ldrh	r6, [r4, #8]
 80072c0:	9602      	str	r6, [sp, #8]
 80072c2:	9101      	str	r1, [sp, #4]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	7923      	ldrb	r3, [r4, #4]
 80072c8:	f994 100c 	ldrsb.w	r1, [r4, #12]
 80072cc:	47a8      	blx	r5
 80072ce:	e7db      	b.n	8007288 <sx12xx_lora_config+0x60>
        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 80072d0:	2100      	movs	r1, #0
 80072d2:	e7c5      	b.n	8007260 <sx12xx_lora_config+0x38>
		return -EBUSY;
 80072d4:	f06f 000f 	mvn.w	r0, #15
 80072d8:	e7da      	b.n	8007290 <sx12xx_lora_config+0x68>
 80072da:	bf00      	nop
 80072dc:	20001054 	.word	0x20001054
 80072e0:	08012d08 	.word	0x08012d08
 80072e4:	20001010 	.word	0x20001010
 80072e8:	20001044 	.word	0x20001044

080072ec <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 80072ec:	b530      	push	{r4, r5, lr}
 80072ee:	b099      	sub	sp, #100	; 0x64
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	461d      	mov	r5, r3
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 80072f6:	ab0e      	add	r3, sp, #56	; 0x38
 80072f8:	930e      	str	r3, [sp, #56]	; 0x38
 80072fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80072fc:	2400      	movs	r4, #0
 80072fe:	9410      	str	r4, [sp, #64]	; 0x40
 8007300:	9411      	str	r4, [sp, #68]	; 0x44
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8007302:	9409      	str	r4, [sp, #36]	; 0x24
 8007304:	940a      	str	r4, [sp, #40]	; 0x28
 8007306:	940b      	str	r4, [sp, #44]	; 0x2c
 8007308:	940c      	str	r4, [sp, #48]	; 0x30
 800730a:	940d      	str	r4, [sp, #52]	; 0x34
 800730c:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 8007310:	2401      	movs	r4, #1
 8007312:	f364 0c04 	bfi	ip, r4, #0, #5
 8007316:	f88d c031 	strb.w	ip, [sp, #49]	; 0x31
 800731a:	930d      	str	r3, [sp, #52]	; 0x34
 800731c:	4b32      	ldr	r3, [pc, #200]	; (80073e8 <sx12xx_lora_test_cw+0xfc>)
 800731e:	f3bf 8f5b 	dmb	ish
 8007322:	e853 2f00 	ldrex	r2, [r3]
 8007326:	2a00      	cmp	r2, #0
 8007328:	d104      	bne.n	8007334 <sx12xx_lora_test_cw+0x48>
 800732a:	e843 4c00 	strex	ip, r4, [r3]
 800732e:	f1bc 0f00 	cmp.w	ip, #0
 8007332:	d1f6      	bne.n	8007322 <sx12xx_lora_test_cw+0x36>
 8007334:	f3bf 8f5b 	dmb	ish
        K_POLL_TYPE_SIGNAL,
        K_POLL_MODE_NOTIFY_ONLY,
        &done);
    int ret;
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8007338:	d153      	bne.n	80073e2 <sx12xx_lora_test_cw+0xf6>
		return -EBUSY;
	}

    /* Store signal */
    dev_data.operation_done = &done;
 800733a:	3b44      	subs	r3, #68	; 0x44
 800733c:	aa0e      	add	r2, sp, #56	; 0x38
 800733e:	605a      	str	r2, [r3, #4]

    /* Act TX timeout event as successfully end of CW transmission */
    dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;
 8007340:	4a2a      	ldr	r2, [pc, #168]	; (80073ec <sx12xx_lora_test_cw+0x100>)
 8007342:	615a      	str	r2, [r3, #20]

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8007344:	4b2a      	ldr	r3, [pc, #168]	; (80073f0 <sx12xx_lora_test_cw+0x104>)
 8007346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007348:	462a      	mov	r2, r5
 800734a:	4798      	blx	r3

    ret = k_poll(&evt, 1, K_MSEC(2000 * duration));
 800734c:	b12d      	cbz	r5, 800735a <sx12xx_lora_test_cw+0x6e>
 800734e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007352:	fb02 f105 	mul.w	r1, r2, r5
 8007356:	2300      	movs	r3, #0
 8007358:	e001      	b.n	800735e <sx12xx_lora_test_cw+0x72>
 800735a:	2100      	movs	r1, #0
 800735c:	460b      	mov	r3, r1
 800735e:	008a      	lsls	r2, r1, #2
 8007360:	1852      	adds	r2, r2, r1
 8007362:	eb43 0383 	adc.w	r3, r3, r3, lsl #2
 8007366:	1892      	adds	r2, r2, r2
 8007368:	415b      	adcs	r3, r3
 800736a:	2101      	movs	r1, #1
 800736c:	a809      	add	r0, sp, #36	; 0x24
 800736e:	f005 fac5 	bl	800c8fc <z_impl_k_poll>
    if (ret < 0) {
 8007372:	2800      	cmp	r0, #0
 8007374:	db02      	blt.n	800737c <sx12xx_lora_test_cw+0x90>
            k_poll(&evt, 1, K_FOREVER);
        }
        /* Clean up TX timeout event callback */
        dev_data.events.TxTimeout = NULL;
    }
	return 0;
 8007376:	2000      	movs	r0, #0
}
 8007378:	b019      	add	sp, #100	; 0x64
 800737a:	bd30      	pop	{r4, r5, pc}
        LOG_ERR("CW test failed!");
 800737c:	2201      	movs	r2, #1
 800737e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007382:	4b1c      	ldr	r3, [pc, #112]	; (80073f4 <sx12xx_lora_test_cw+0x108>)
 8007384:	9316      	str	r3, [sp, #88]	; 0x58
 8007386:	2300      	movs	r3, #0
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	2102      	movs	r1, #2
 800738c:	f88d 1000 	strb.w	r1, [sp]
 8007390:	9900      	ldr	r1, [sp, #0]
 8007392:	9115      	str	r1, [sp, #84]	; 0x54
 8007394:	4619      	mov	r1, r3
 8007396:	f363 0100 	bfi	r1, r3, #0, #1
 800739a:	f363 0141 	bfi	r1, r3, #1, #1
 800739e:	f363 0182 	bfi	r1, r3, #2, #1
 80073a2:	f363 01c5 	bfi	r1, r3, #3, #3
 80073a6:	f362 1188 	bfi	r1, r2, #6, #3
 80073aa:	2208      	movs	r2, #8
 80073ac:	f362 2152 	bfi	r1, r2, #9, #10
 80073b0:	f363 41de 	bfi	r1, r3, #19, #12
 80073b4:	f363 71df 	bfi	r1, r3, #31, #1
 80073b8:	aa15      	add	r2, sp, #84	; 0x54
 80073ba:	480f      	ldr	r0, [pc, #60]	; (80073f8 <sx12xx_lora_test_cw+0x10c>)
 80073bc:	f007 fcd1 	bl	800ed62 <z_impl_z_log_msg2_static_create>
        if (!modem_release(&dev_data)) {
 80073c0:	480e      	ldr	r0, [pc, #56]	; (80073fc <sx12xx_lora_test_cw+0x110>)
 80073c2:	f7ff fc1f 	bl	8006c04 <modem_release>
 80073c6:	b118      	cbz	r0, 80073d0 <sx12xx_lora_test_cw+0xe4>
        dev_data.events.TxTimeout = NULL;
 80073c8:	2000      	movs	r0, #0
 80073ca:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <sx12xx_lora_test_cw+0x110>)
 80073cc:	6158      	str	r0, [r3, #20]
 80073ce:	e7d3      	b.n	8007378 <sx12xx_lora_test_cw+0x8c>
 80073d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073d8:	2101      	movs	r1, #1
 80073da:	a809      	add	r0, sp, #36	; 0x24
 80073dc:	f005 fa8e 	bl	800c8fc <z_impl_k_poll>
 80073e0:	e7f2      	b.n	80073c8 <sx12xx_lora_test_cw+0xdc>
		return -EBUSY;
 80073e2:	f06f 000f 	mvn.w	r0, #15
 80073e6:	e7c7      	b.n	8007378 <sx12xx_lora_test_cw+0x8c>
 80073e8:	20001054 	.word	0x20001054
 80073ec:	08006c55 	.word	0x08006c55
 80073f0:	08012d08 	.word	0x08012d08
 80073f4:	08012b78 	.word	0x08012b78
 80073f8:	080119e4 	.word	0x080119e4
 80073fc:	20001010 	.word	0x20001010

08007400 <sx12xx_lora_time_on_air>:

int sx12xx_lora_time_on_air(const struct device *dev,
            const struct lora_modem_config *config,
            uint32_t data_len)
{
    if(config == NULL) {
 8007400:	b189      	cbz	r1, 8007426 <sx12xx_lora_time_on_air+0x26>
{
 8007402:	b510      	push	{r4, lr}
 8007404:	b084      	sub	sp, #16
        return -EINVAL;
    }
    return (int) Radio.TimeOnAir(MODEM_LORA, config->bandwidth,
 8007406:	4b09      	ldr	r3, [pc, #36]	; (800742c <sx12xx_lora_time_on_air+0x2c>)
 8007408:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800740a:	2001      	movs	r0, #1
 800740c:	9003      	str	r0, [sp, #12]
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	9202      	str	r2, [sp, #8]
 8007412:	7acb      	ldrb	r3, [r1, #11]
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	890b      	ldrh	r3, [r1, #8]
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	798b      	ldrb	r3, [r1, #6]
 800741c:	794a      	ldrb	r2, [r1, #5]
 800741e:	7909      	ldrb	r1, [r1, #4]
 8007420:	47a0      	blx	r4
                                 config->datarate, config->coding_rate,
                                 config->preamble_len,
                                 config->fixed_len, (uint8_t) data_len, true);
}
 8007422:	b004      	add	sp, #16
 8007424:	bd10      	pop	{r4, pc}
        return -EINVAL;
 8007426:	f06f 0015 	mvn.w	r0, #21
}
 800742a:	4770      	bx	lr
 800742c:	08012d08 	.word	0x08012d08

08007430 <sx12xx_lora_is_channel_free>:
int sx12xx_lora_is_channel_free(const struct device *dev,
            const struct lora_modem_config *config,
            int16_t rssi_theshold, uint32_t timeout)
{
    bool is_free;
    if(config == NULL) {
 8007430:	b311      	cbz	r1, 8007478 <sx12xx_lora_is_channel_free+0x48>
{
 8007432:	b510      	push	{r4, lr}
 8007434:	4608      	mov	r0, r1
 8007436:	4915      	ldr	r1, [pc, #84]	; (800748c <sx12xx_lora_is_channel_free+0x5c>)
 8007438:	2401      	movs	r4, #1
 800743a:	f3bf 8f5b 	dmb	ish
 800743e:	e851 cf00 	ldrex	ip, [r1]
 8007442:	f1bc 0f00 	cmp.w	ip, #0
 8007446:	d104      	bne.n	8007452 <sx12xx_lora_is_channel_free+0x22>
 8007448:	e841 4e00 	strex	lr, r4, [r1]
 800744c:	f1be 0f00 	cmp.w	lr, #0
 8007450:	d1f5      	bne.n	800743e <sx12xx_lora_is_channel_free+0xe>
 8007452:	f3bf 8f5b 	dmb	ish
        return -EINVAL;
    }
    if (!modem_acquire(&dev_data)) {
 8007456:	d112      	bne.n	800747e <sx12xx_lora_is_channel_free+0x4e>
        125000, /* BW_125_KHZ = 0 */
        250000, /* BW_250_KHZ */
        500000, /* BW_500_KHZ */
    };

    is_free = Radio.IsChannelFree(config->frequency, rx_bw[config->bandwidth],
 8007458:	490d      	ldr	r1, [pc, #52]	; (8007490 <sx12xx_lora_is_channel_free+0x60>)
 800745a:	690c      	ldr	r4, [r1, #16]
 800745c:	f890 c004 	ldrb.w	ip, [r0, #4]
 8007460:	490c      	ldr	r1, [pc, #48]	; (8007494 <sx12xx_lora_is_channel_free+0x64>)
 8007462:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8007466:	6800      	ldr	r0, [r0, #0]
 8007468:	47a0      	blx	r4
 800746a:	4604      	mov	r4, r0
                            rssi_theshold, timeout);
    if (!modem_release(&dev_data)) {
 800746c:	480a      	ldr	r0, [pc, #40]	; (8007498 <sx12xx_lora_is_channel_free+0x68>)
 800746e:	f7ff fbc9 	bl	8006c04 <modem_release>
 8007472:	b138      	cbz	r0, 8007484 <sx12xx_lora_is_channel_free+0x54>
        /* Not receiving or already being stopped */
        return -EINVAL;
    }
    return is_free ? 1 : 0;
 8007474:	4620      	mov	r0, r4
}
 8007476:	bd10      	pop	{r4, pc}
        return -EINVAL;
 8007478:	f06f 0015 	mvn.w	r0, #21
}
 800747c:	4770      	bx	lr
        return -EBUSY;
 800747e:	f06f 000f 	mvn.w	r0, #15
 8007482:	e7f8      	b.n	8007476 <sx12xx_lora_is_channel_free+0x46>
        return -EINVAL;
 8007484:	f06f 0015 	mvn.w	r0, #21
 8007488:	e7f5      	b.n	8007476 <sx12xx_lora_is_channel_free+0x46>
 800748a:	bf00      	nop
 800748c:	20001054 	.word	0x20001054
 8007490:	08012d08 	.word	0x08012d08
 8007494:	08012bc8 	.word	0x08012bc8
 8007498:	20001010 	.word	0x20001010

0800749c <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 800749c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800749e:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <sx12xx_init+0x40>)
 80074a0:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80074a4:	2400      	movs	r4, #0
 80074a6:	f3bf 8f5b 	dmb	ish
 80074aa:	e852 1f00 	ldrex	r1, [r2]
 80074ae:	e842 4500 	strex	r5, r4, [r2]
 80074b2:	2d00      	cmp	r5, #0
 80074b4:	d1f9      	bne.n	80074aa <sx12xx_init+0xe>
 80074b6:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
 80074ba:	6018      	str	r0, [r3, #0]
	dev_data.events.TxDone = sx12xx_ev_tx_done;
 80074bc:	4a08      	ldr	r2, [pc, #32]	; (80074e0 <sx12xx_init+0x44>)
 80074be:	611a      	str	r2, [r3, #16]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 80074c0:	4a08      	ldr	r2, [pc, #32]	; (80074e4 <sx12xx_init+0x48>)
 80074c2:	619a      	str	r2, [r3, #24]
  dev_data.events.RxError = sx12xx_ev_rx_error_timeout;
 80074c4:	4a08      	ldr	r2, [pc, #32]	; (80074e8 <sx12xx_init+0x4c>)
 80074c6:	621a      	str	r2, [r3, #32]
  dev_data.events.RxTimeout = sx12xx_ev_rx_error_timeout;
 80074c8:	61da      	str	r2, [r3, #28]
	Radio.Init(&dev_data.events);
 80074ca:	4d08      	ldr	r5, [pc, #32]	; (80074ec <sx12xx_init+0x50>)
 80074cc:	682a      	ldr	r2, [r5, #0]
 80074ce:	f103 0010 	add.w	r0, r3, #16
 80074d2:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 80074d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80074d6:	4798      	blx	r3

	return 0;
}
 80074d8:	4620      	mov	r0, r4
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	20001010 	.word	0x20001010
 80074e0:	08006cf1 	.word	0x08006cf1
 80074e4:	08006d0d 	.word	0x08006d0d
 80074e8:	08006c75 	.word	0x08006c75
 80074ec:	08012d08 	.word	0x08012d08

080074f0 <sx127x_dio_work_handle>:

	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
 80074f0:	b508      	push	{r3, lr}
	int dio = work - dev_data.dio_work;
 80074f2:	4b04      	ldr	r3, [pc, #16]	; (8007504 <sx127x_dio_work_handle+0x14>)
 80074f4:	1ac0      	subs	r0, r0, r3
 80074f6:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
 80074f8:	4b03      	ldr	r3, [pc, #12]	; (8007508 <sx127x_dio_work_handle+0x18>)
 80074fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80074fe:	2000      	movs	r0, #0
 8007500:	4798      	blx	r3
}
 8007502:	bd08      	pop	{r3, pc}
 8007504:	200010bc 	.word	0x200010bc
 8007508:	2000034c 	.word	0x2000034c

0800750c <sx127x_transceive>:
	}

}

static int sx127x_transceive(uint8_t reg, bool write, void *data, size_t length)
{
 800750c:	b510      	push	{r4, lr}
 800750e:	b08a      	sub	sp, #40	; 0x28
 8007510:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 8007514:	f10d 0007 	add.w	r0, sp, #7
 8007518:	9006      	str	r0, [sp, #24]
 800751a:	2001      	movs	r0, #1
 800751c:	9007      	str	r0, [sp, #28]
 800751e:	9208      	str	r2, [sp, #32]
 8007520:	9309      	str	r3, [sp, #36]	; 0x24
			.buf = data,
			.len = length
		}
	};

	struct spi_buf_set tx = {
 8007522:	ab06      	add	r3, sp, #24
 8007524:	9304      	str	r3, [sp, #16]
 8007526:	2302      	movs	r3, #2
 8007528:	9305      	str	r3, [sp, #20]
		.buffers = buf,
		.count = ARRAY_SIZE(buf),
	};

	if (!write) {
 800752a:	b149      	cbz	r1, 8007540 <sx127x_transceive+0x34>
		};

		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
	}

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 800752c:	490b      	ldr	r1, [pc, #44]	; (800755c <sx127x_transceive+0x50>)
 800752e:	6848      	ldr	r0, [r1, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
 8007530:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8007532:	681c      	ldr	r4, [r3, #0]
 8007534:	2300      	movs	r3, #0
 8007536:	aa04      	add	r2, sp, #16
 8007538:	3108      	adds	r1, #8
 800753a:	47a0      	blx	r4
}
 800753c:	b00a      	add	sp, #40	; 0x28
 800753e:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
 8007540:	ab06      	add	r3, sp, #24
 8007542:	9302      	str	r3, [sp, #8]
 8007544:	2302      	movs	r3, #2
 8007546:	9303      	str	r3, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8007548:	4904      	ldr	r1, [pc, #16]	; (800755c <sx127x_transceive+0x50>)
 800754a:	6848      	ldr	r0, [r1, #4]
	const struct spi_driver_api *api =
 800754c:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 800754e:	681c      	ldr	r4, [r3, #0]
 8007550:	ab02      	add	r3, sp, #8
 8007552:	aa04      	add	r2, sp, #16
 8007554:	3108      	adds	r1, #8
 8007556:	47a0      	blx	r4
 8007558:	e7f0      	b.n	800753c <sx127x_transceive+0x30>
 800755a:	bf00      	nop
 800755c:	20001098 	.word	0x20001098

08007560 <sx127x_irq_callback>:
{
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	4605      	mov	r5, r0
 8007564:	fa92 f6a2 	rbit	r6, r2
 8007568:	fab6 f686 	clz	r6, r6
 800756c:	b90a      	cbnz	r2, 8007572 <sx127x_irq_callback+0x12>
 800756e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8007572:	2400      	movs	r4, #0
 8007574:	e000      	b.n	8007578 <sx127x_irq_callback+0x18>
 8007576:	3401      	adds	r4, #1
 8007578:	2c03      	cmp	r4, #3
 800757a:	d813      	bhi.n	80075a4 <sx127x_irq_callback+0x44>
		if (dev == dev_data.dio_dev[i] &&
 800757c:	1d23      	adds	r3, r4, #4
 800757e:	4a0a      	ldr	r2, [pc, #40]	; (80075a8 <sx127x_irq_callback+0x48>)
 8007580:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	42ab      	cmp	r3, r5
 8007588:	d1f5      	bne.n	8007576 <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
 800758a:	4b08      	ldr	r3, [pc, #32]	; (80075ac <sx127x_irq_callback+0x4c>)
 800758c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007590:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
 8007592:	42b3      	cmp	r3, r6
 8007594:	d1ef      	bne.n	8007576 <sx127x_irq_callback+0x16>
			k_work_submit(&dev_data.dio_work[i]);
 8007596:	1ca0      	adds	r0, r4, #2
 8007598:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 800759c:	3004      	adds	r0, #4
 800759e:	f004 f949 	bl	800b834 <k_work_submit>
 80075a2:	e7e8      	b.n	8007576 <sx127x_irq_callback+0x16>
}
 80075a4:	bd70      	pop	{r4, r5, r6, pc}
 80075a6:	bf00      	nop
 80075a8:	20001098 	.word	0x20001098
 80075ac:	08012d74 	.word	0x08012d74

080075b0 <SX1276Reset>:
{
 80075b0:	b508      	push	{r3, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 80075b2:	4b18      	ldr	r3, [pc, #96]	; (8007614 <SX1276Reset+0x64>)
 80075b4:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 80075b6:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f013 0f01 	tst.w	r3, #1
 80075be:	d11b      	bne.n	80075f8 <SX1276Reset+0x48>
 80075c0:	2301      	movs	r3, #1
	if (value != 0)	{
 80075c2:	b1db      	cbz	r3, 80075fc <SX1276Reset+0x4c>
	const struct gpio_driver_api *api =
 80075c4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	2101      	movs	r1, #1
 80075ca:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 80075cc:	200a      	movs	r0, #10
 80075ce:	2100      	movs	r1, #0
 80075d0:	f004 fd06 	bl	800bfe0 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 80075d4:	4b0f      	ldr	r3, [pc, #60]	; (8007614 <SX1276Reset+0x64>)
 80075d6:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 80075d8:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f013 0f01 	tst.w	r3, #1
 80075e0:	d111      	bne.n	8007606 <SX1276Reset+0x56>
 80075e2:	2300      	movs	r3, #0
	if (value != 0)	{
 80075e4:	b18b      	cbz	r3, 800760a <SX1276Reset+0x5a>
	const struct gpio_driver_api *api =
 80075e6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	2101      	movs	r1, #1
 80075ec:	4798      	blx	r3
 80075ee:	203c      	movs	r0, #60	; 0x3c
 80075f0:	2100      	movs	r1, #0
 80075f2:	f004 fcf5 	bl	800bfe0 <z_impl_k_sleep>
}
 80075f6:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 80075f8:	2300      	movs	r3, #0
 80075fa:	e7e2      	b.n	80075c2 <SX1276Reset+0x12>
	const struct gpio_driver_api *api =
 80075fc:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2101      	movs	r1, #1
 8007602:	4798      	blx	r3
 8007604:	e7e2      	b.n	80075cc <SX1276Reset+0x1c>
		value = (value != 0) ? 0 : 1;
 8007606:	2301      	movs	r3, #1
 8007608:	e7ec      	b.n	80075e4 <SX1276Reset+0x34>
	const struct gpio_driver_api *api =
 800760a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	2101      	movs	r1, #1
 8007610:	4798      	blx	r3
 8007612:	e7ec      	b.n	80075ee <SX1276Reset+0x3e>
 8007614:	20001098 	.word	0x20001098

08007618 <SX1276IoIrqInit>:
{
 8007618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800761a:	b095      	sub	sp, #84	; 0x54
 800761c:	4605      	mov	r5, r0
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 800761e:	2400      	movs	r4, #0
 8007620:	e04c      	b.n	80076bc <SX1276IoIrqInit+0xa4>
			LOG_ERR("Cannot get pointer to %s device",
 8007622:	4b5a      	ldr	r3, [pc, #360]	; (800778c <SX1276IoIrqInit+0x174>)
 8007624:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 8007628:	9302      	str	r3, [sp, #8]
 800762a:	4b59      	ldr	r3, [pc, #356]	; (8007790 <SX1276IoIrqInit+0x178>)
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	9000      	str	r0, [sp, #0]
 8007630:	4603      	mov	r3, r0
 8007632:	2201      	movs	r2, #1
 8007634:	4957      	ldr	r1, [pc, #348]	; (8007794 <SX1276IoIrqInit+0x17c>)
 8007636:	f008 fb86 	bl	800fd46 <z_log_msg2_runtime_create>
}
 800763a:	b015      	add	sp, #84	; 0x54
 800763c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800763e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8007642:	f013 0f01 	tst.w	r3, #1
 8007646:	d06f      	beq.n	8007728 <SX1276IoIrqInit+0x110>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8007648:	2301      	movs	r3, #1
 800764a:	fa03 fc01 	lsl.w	ip, r3, r1
 800764e:	6833      	ldr	r3, [r6, #0]
 8007650:	ea43 030c 	orr.w	r3, r3, ip
 8007654:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	4798      	blx	r3
		gpio_init_callback(&callbacks[i],
 800765a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800765e:	4b4e      	ldr	r3, [pc, #312]	; (8007798 <SX1276IoIrqInit+0x180>)
 8007660:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				   BIT(sx127x_dios[i].pin));
 8007664:	4b49      	ldr	r3, [pc, #292]	; (800778c <SX1276IoIrqInit+0x174>)
 8007666:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800766a:	791e      	ldrb	r6, [r3, #4]
 800766c:	2301      	movs	r3, #1
 800766e:	40b3      	lsls	r3, r6
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8007670:	4a4a      	ldr	r2, [pc, #296]	; (800779c <SX1276IoIrqInit+0x184>)
 8007672:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 8007674:	608b      	str	r3, [r1, #8]
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8007676:	1d23      	adds	r3, r4, #4
 8007678:	4a49      	ldr	r2, [pc, #292]	; (80077a0 <SX1276IoIrqInit+0x188>)
 800767a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800767e:	6858      	ldr	r0, [r3, #4]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 8007680:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d057      	beq.n	8007738 <SX1276IoIrqInit+0x120>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8007688:	2201      	movs	r2, #1
 800768a:	4798      	blx	r3
 800768c:	2800      	cmp	r0, #0
 800768e:	db56      	blt.n	800773e <SX1276IoIrqInit+0x126>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8007690:	1d23      	adds	r3, r4, #4
 8007692:	4a43      	ldr	r2, [pc, #268]	; (80077a0 <SX1276IoIrqInit+0x188>)
 8007694:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007698:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 800769a:	6881      	ldr	r1, [r0, #8]
	const struct gpio_driver_data *const data =
 800769c:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	2301      	movs	r3, #1
 80076a2:	40b3      	lsls	r3, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 80076a4:	421a      	tst	r2, r3
 80076a6:	d16d      	bne.n	8007784 <SX1276IoIrqInit+0x16c>
 80076a8:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 80076ac:	698f      	ldr	r7, [r1, #24]
 80076ae:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 80076b2:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 80076b6:	4631      	mov	r1, r6
 80076b8:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 80076ba:	3401      	adds	r4, #1
 80076bc:	2c03      	cmp	r4, #3
 80076be:	d8bc      	bhi.n	800763a <SX1276IoIrqInit+0x22>
		if (!irqHandlers[i]) {
 80076c0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0f8      	beq.n	80076ba <SX1276IoIrqInit+0xa2>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 80076c8:	4b30      	ldr	r3, [pc, #192]	; (800778c <SX1276IoIrqInit+0x174>)
 80076ca:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 80076ce:	f003 fbdb 	bl	800ae88 <z_impl_device_get_binding>
 80076d2:	1d23      	adds	r3, r4, #4
 80076d4:	4a32      	ldr	r2, [pc, #200]	; (80077a0 <SX1276IoIrqInit+0x188>)
 80076d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076da:	6058      	str	r0, [r3, #4]
		if (dev_data.dio_dev[i] == NULL) {
 80076dc:	2800      	cmp	r0, #0
 80076de:	d0a0      	beq.n	8007622 <SX1276IoIrqInit+0xa>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 80076e0:	4e2f      	ldr	r6, [pc, #188]	; (80077a0 <SX1276IoIrqInit+0x188>)
 80076e2:	1ca0      	adds	r0, r4, #2
 80076e4:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 80076e8:	492e      	ldr	r1, [pc, #184]	; (80077a4 <SX1276IoIrqInit+0x18c>)
 80076ea:	3004      	adds	r0, #4
 80076ec:	f008 ffbb 	bl	8010666 <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 80076f0:	1d23      	adds	r3, r4, #4
 80076f2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80076f6:	6870      	ldr	r0, [r6, #4]
 80076f8:	4b24      	ldr	r3, [pc, #144]	; (800778c <SX1276IoIrqInit+0x174>)
 80076fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076fe:	7919      	ldrb	r1, [r3, #4]
				   | sx127x_dios[i].flags);
 8007700:	795b      	ldrb	r3, [r3, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8007702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 800770a:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 800770c:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800770e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007712:	2a00      	cmp	r2, #0
 8007714:	d093      	beq.n	800763e <SX1276IoIrqInit+0x26>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8007716:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800771a:	d090      	beq.n	800763e <SX1276IoIrqInit+0x26>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800771c:	f013 0f01 	tst.w	r3, #1
 8007720:	d08d      	beq.n	800763e <SX1276IoIrqInit+0x26>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8007722:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8007726:	e78a      	b.n	800763e <SX1276IoIrqInit+0x26>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8007728:	2301      	movs	r3, #1
 800772a:	fa03 fc01 	lsl.w	ip, r3, r1
 800772e:	6833      	ldr	r3, [r6, #0]
 8007730:	ea23 030c 	bic.w	r3, r3, ip
 8007734:	6033      	str	r3, [r6, #0]
 8007736:	e78e      	b.n	8007656 <SX1276IoIrqInit+0x3e>
		return -ENOTSUP;
 8007738:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800773c:	e7a6      	b.n	800768c <SX1276IoIrqInit+0x74>
			LOG_ERR("Could not set gpio callback.");
 800773e:	2201      	movs	r2, #1
 8007740:	f8ad 2018 	strh.w	r2, [sp, #24]
 8007744:	4b18      	ldr	r3, [pc, #96]	; (80077a8 <SX1276IoIrqInit+0x190>)
 8007746:	9312      	str	r3, [sp, #72]	; 0x48
 8007748:	2300      	movs	r3, #0
 800774a:	9305      	str	r3, [sp, #20]
 800774c:	2102      	movs	r1, #2
 800774e:	f88d 1014 	strb.w	r1, [sp, #20]
 8007752:	9905      	ldr	r1, [sp, #20]
 8007754:	9111      	str	r1, [sp, #68]	; 0x44
 8007756:	4619      	mov	r1, r3
 8007758:	f363 0100 	bfi	r1, r3, #0, #1
 800775c:	f363 0141 	bfi	r1, r3, #1, #1
 8007760:	f363 0182 	bfi	r1, r3, #2, #1
 8007764:	f363 01c5 	bfi	r1, r3, #3, #3
 8007768:	f362 1188 	bfi	r1, r2, #6, #3
 800776c:	2208      	movs	r2, #8
 800776e:	f362 2152 	bfi	r1, r2, #9, #10
 8007772:	f363 41de 	bfi	r1, r3, #19, #12
 8007776:	f363 71df 	bfi	r1, r3, #31, #1
 800777a:	aa11      	add	r2, sp, #68	; 0x44
 800777c:	4805      	ldr	r0, [pc, #20]	; (8007794 <SX1276IoIrqInit+0x17c>)
 800777e:	f007 faf0 	bl	800ed62 <z_impl_z_log_msg2_static_create>
			return;
 8007782:	e75a      	b.n	800763a <SX1276IoIrqInit+0x22>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8007784:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8007788:	e790      	b.n	80076ac <SX1276IoIrqInit+0x94>
 800778a:	bf00      	nop
 800778c:	08012d74 	.word	0x08012d74
 8007790:	08012ab0 	.word	0x08012ab0
 8007794:	080119dc 	.word	0x080119dc
 8007798:	20001068 	.word	0x20001068
 800779c:	08007561 	.word	0x08007561
 80077a0:	20001098 	.word	0x20001098
 80077a4:	080074f1 	.word	0x080074f1
 80077a8:	08012bd4 	.word	0x08012bd4

080077ac <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 80077ac:	b510      	push	{r4, lr}
 80077ae:	b090      	sub	sp, #64	; 0x40
 80077b0:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
 80077b2:	b2c0      	uxtb	r0, r0
 80077b4:	f008 fad9 	bl	800fd6a <sx127x_read>
	if (ret < 0) {
 80077b8:	2800      	cmp	r0, #0
 80077ba:	db01      	blt.n	80077c0 <SX1276ReadBuffer+0x14>
		LOG_ERR("Unable to read address: 0x%x", addr);
	}
}
 80077bc:	b010      	add	sp, #64	; 0x40
 80077be:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to read address: 0x%x", addr);
 80077c0:	2201      	movs	r2, #1
 80077c2:	f8ad 2008 	strh.w	r2, [sp, #8]
 80077c6:	4b10      	ldr	r3, [pc, #64]	; (8007808 <SX1276ReadBuffer+0x5c>)
 80077c8:	930e      	str	r3, [sp, #56]	; 0x38
 80077ca:	940f      	str	r4, [sp, #60]	; 0x3c
 80077cc:	2300      	movs	r3, #0
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	2103      	movs	r1, #3
 80077d2:	f88d 1004 	strb.w	r1, [sp, #4]
 80077d6:	9901      	ldr	r1, [sp, #4]
 80077d8:	910d      	str	r1, [sp, #52]	; 0x34
 80077da:	4619      	mov	r1, r3
 80077dc:	f363 0100 	bfi	r1, r3, #0, #1
 80077e0:	f363 0141 	bfi	r1, r3, #1, #1
 80077e4:	f363 0182 	bfi	r1, r3, #2, #1
 80077e8:	f363 01c5 	bfi	r1, r3, #3, #3
 80077ec:	f362 1188 	bfi	r1, r2, #6, #3
 80077f0:	220c      	movs	r2, #12
 80077f2:	f362 2152 	bfi	r1, r2, #9, #10
 80077f6:	f363 41de 	bfi	r1, r3, #19, #12
 80077fa:	f363 71df 	bfi	r1, r3, #31, #1
 80077fe:	aa0d      	add	r2, sp, #52	; 0x34
 8007800:	4802      	ldr	r0, [pc, #8]	; (800780c <SX1276ReadBuffer+0x60>)
 8007802:	f007 faae 	bl	800ed62 <z_impl_z_log_msg2_static_create>
}
 8007806:	e7d9      	b.n	80077bc <SX1276ReadBuffer+0x10>
 8007808:	08012bf4 	.word	0x08012bf4
 800780c:	080119dc 	.word	0x080119dc

08007810 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 8007810:	b530      	push	{r4, r5, lr}
 8007812:	b0a7      	sub	sp, #156	; 0x9c
 8007814:	4604      	mov	r4, r0
 8007816:	4882      	ldr	r0, [pc, #520]	; (8007a20 <sx127x_lora_init+0x210>)
 8007818:	f003 fb36 	bl	800ae88 <z_impl_device_get_binding>
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 800781c:	4b81      	ldr	r3, [pc, #516]	; (8007a24 <sx127x_lora_init+0x214>)
 800781e:	6058      	str	r0, [r3, #4]
	if (!dev_data.spi) {
 8007820:	b300      	cbz	r0, 8007864 <sx127x_lora_init+0x54>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 8007822:	4b80      	ldr	r3, [pc, #512]	; (8007a24 <sx127x_lora_init+0x214>)
 8007824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007828:	819a      	strh	r2, [r3, #12]
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
 800782a:	4a7f      	ldr	r2, [pc, #508]	; (8007a28 <sx127x_lora_init+0x218>)
 800782c:	609a      	str	r2, [r3, #8]
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);
 800782e:	2200      	movs	r2, #0
 8007830:	81da      	strh	r2, [r3, #14]
 8007832:	487e      	ldr	r0, [pc, #504]	; (8007a2c <sx127x_lora_init+0x21c>)
 8007834:	f003 fb28 	bl	800ae88 <z_impl_device_get_binding>

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8007838:	4b7d      	ldr	r3, [pc, #500]	; (8007a30 <sx127x_lora_init+0x220>)
 800783a:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
 800783c:	b1f8      	cbz	r0, 800787e <sx127x_lora_init+0x6e>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 800783e:	4b7c      	ldr	r3, [pc, #496]	; (8007a30 <sx127x_lora_init+0x220>)
 8007840:	2206      	movs	r2, #6
 8007842:	711a      	strb	r2, [r3, #4]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
 8007844:	2201      	movs	r2, #1
 8007846:	715a      	strb	r2, [r3, #5]
	spi_cs.delay = 0U;
 8007848:	2200      	movs	r2, #0
 800784a:	609a      	str	r2, [r3, #8]

	dev_data.spi_cfg.cs = &spi_cs;
 800784c:	4875      	ldr	r0, [pc, #468]	; (8007a24 <sx127x_lora_init+0x214>)
 800784e:	6103      	str	r3, [r0, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 8007850:	f641 2307 	movw	r3, #6663	; 0x1a07
 8007854:	4975      	ldr	r1, [pc, #468]	; (8007a2c <sx127x_lora_init+0x21c>)
 8007856:	f7ff faad 	bl	8006db4 <__sx12xx_configure_pin>
	if (ret) {
 800785a:	4605      	mov	r5, r0
 800785c:	b1e0      	cbz	r0, 8007898 <sx127x_lora_init+0x88>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 800785e:	4628      	mov	r0, r5
 8007860:	b027      	add	sp, #156	; 0x9c
 8007862:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Cannot get pointer to %s device",
 8007864:	4b6e      	ldr	r3, [pc, #440]	; (8007a20 <sx127x_lora_init+0x210>)
 8007866:	9302      	str	r3, [sp, #8]
 8007868:	4b72      	ldr	r3, [pc, #456]	; (8007a34 <sx127x_lora_init+0x224>)
 800786a:	9301      	str	r3, [sp, #4]
 800786c:	9000      	str	r0, [sp, #0]
 800786e:	4603      	mov	r3, r0
 8007870:	2201      	movs	r2, #1
 8007872:	4971      	ldr	r1, [pc, #452]	; (8007a38 <sx127x_lora_init+0x228>)
 8007874:	f008 fa67 	bl	800fd46 <z_log_msg2_runtime_create>
		return -EINVAL;
 8007878:	f06f 0515 	mvn.w	r5, #21
 800787c:	e7ef      	b.n	800785e <sx127x_lora_init+0x4e>
		LOG_ERR("Cannot get pointer to %s device",
 800787e:	4b6b      	ldr	r3, [pc, #428]	; (8007a2c <sx127x_lora_init+0x21c>)
 8007880:	9302      	str	r3, [sp, #8]
 8007882:	4b6c      	ldr	r3, [pc, #432]	; (8007a34 <sx127x_lora_init+0x224>)
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	9000      	str	r0, [sp, #0]
 8007888:	4603      	mov	r3, r0
 800788a:	2201      	movs	r2, #1
 800788c:	496a      	ldr	r1, [pc, #424]	; (8007a38 <sx127x_lora_init+0x228>)
 800788e:	f008 fa5a 	bl	800fd46 <z_log_msg2_runtime_create>
		return -EIO;
 8007892:	f06f 0504 	mvn.w	r5, #4
 8007896:	e7e2      	b.n	800785e <sx127x_lora_init+0x4e>
 8007898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800789c:	2100      	movs	r1, #0
 800789e:	f004 fb9f 	bl	800bfe0 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 80078a2:	4b60      	ldr	r3, [pc, #384]	; (8007a24 <sx127x_lora_init+0x214>)
 80078a4:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 80078a6:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f013 0f01 	tst.w	r3, #1
 80078ae:	d165      	bne.n	800797c <sx127x_lora_init+0x16c>
 80078b0:	462b      	mov	r3, r5
	if (value != 0)	{
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d064      	beq.n	8007980 <sx127x_lora_init+0x170>
	const struct gpio_driver_api *api =
 80078b6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	2101      	movs	r1, #1
 80078bc:	4798      	blx	r3
 80078be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078c2:	2100      	movs	r1, #0
 80078c4:	f004 fb8c 	bl	800bfe0 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
 80078c8:	2201      	movs	r2, #1
 80078ca:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 80078ce:	2042      	movs	r0, #66	; 0x42
 80078d0:	f008 fa4b 	bl	800fd6a <sx127x_read>
	if (ret < 0) {
 80078d4:	2800      	cmp	r0, #0
 80078d6:	db58      	blt.n	800798a <sx127x_lora_init+0x17a>
	LOG_INF("SX127x version 0x%02x found", regval);
 80078d8:	2301      	movs	r3, #1
 80078da:	f8ad 3014 	strh.w	r3, [sp, #20]
 80078de:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80078e2:	4a56      	ldr	r2, [pc, #344]	; (8007a3c <sx127x_lora_init+0x22c>)
 80078e4:	9212      	str	r2, [sp, #72]	; 0x48
 80078e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80078e8:	2300      	movs	r3, #0
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	2203      	movs	r2, #3
 80078ee:	f88d 2010 	strb.w	r2, [sp, #16]
 80078f2:	9904      	ldr	r1, [sp, #16]
 80078f4:	9111      	str	r1, [sp, #68]	; 0x44
 80078f6:	4619      	mov	r1, r3
 80078f8:	f363 0100 	bfi	r1, r3, #0, #1
 80078fc:	f363 0141 	bfi	r1, r3, #1, #1
 8007900:	f363 0182 	bfi	r1, r3, #2, #1
 8007904:	f363 01c5 	bfi	r1, r3, #3, #3
 8007908:	f362 1188 	bfi	r1, r2, #6, #3
 800790c:	220c      	movs	r2, #12
 800790e:	f362 2152 	bfi	r1, r2, #9, #10
 8007912:	f363 41de 	bfi	r1, r3, #19, #12
 8007916:	f363 71df 	bfi	r1, r3, #31, #1
 800791a:	aa11      	add	r2, sp, #68	; 0x44
 800791c:	4846      	ldr	r0, [pc, #280]	; (8007a38 <sx127x_lora_init+0x228>)
 800791e:	f007 fa20 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	ret = sx127x_antenna_configure();
 8007922:	f008 fa0e 	bl	800fd42 <sx127x_antenna_configure>
	if (ret < 0) {
 8007926:	2800      	cmp	r0, #0
 8007928:	db54      	blt.n	80079d4 <sx127x_lora_init+0x1c4>
	ret = sx12xx_init(dev);
 800792a:	4620      	mov	r0, r4
 800792c:	f7ff fdb6 	bl	800749c <sx12xx_init>
	if (ret < 0) {
 8007930:	1e04      	subs	r4, r0, #0
 8007932:	da94      	bge.n	800785e <sx127x_lora_init+0x4e>
		LOG_ERR("Failed to initialize SX12xx common");
 8007934:	2201      	movs	r2, #1
 8007936:	f8ad 2014 	strh.w	r2, [sp, #20]
 800793a:	4b41      	ldr	r3, [pc, #260]	; (8007a40 <sx127x_lora_init+0x230>)
 800793c:	9318      	str	r3, [sp, #96]	; 0x60
 800793e:	2300      	movs	r3, #0
 8007940:	9304      	str	r3, [sp, #16]
 8007942:	2102      	movs	r1, #2
 8007944:	f88d 1010 	strb.w	r1, [sp, #16]
 8007948:	9904      	ldr	r1, [sp, #16]
 800794a:	9117      	str	r1, [sp, #92]	; 0x5c
 800794c:	4619      	mov	r1, r3
 800794e:	f363 0100 	bfi	r1, r3, #0, #1
 8007952:	f363 0141 	bfi	r1, r3, #1, #1
 8007956:	f363 0182 	bfi	r1, r3, #2, #1
 800795a:	f363 01c5 	bfi	r1, r3, #3, #3
 800795e:	f362 1188 	bfi	r1, r2, #6, #3
 8007962:	2208      	movs	r2, #8
 8007964:	f362 2152 	bfi	r1, r2, #9, #10
 8007968:	f363 41de 	bfi	r1, r3, #19, #12
 800796c:	f363 71df 	bfi	r1, r3, #31, #1
 8007970:	aa17      	add	r2, sp, #92	; 0x5c
 8007972:	4831      	ldr	r0, [pc, #196]	; (8007a38 <sx127x_lora_init+0x228>)
 8007974:	f007 f9f5 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return ret;
 8007978:	4625      	mov	r5, r4
 800797a:	e770      	b.n	800785e <sx127x_lora_init+0x4e>
		value = (value != 0) ? 0 : 1;
 800797c:	2301      	movs	r3, #1
 800797e:	e798      	b.n	80078b2 <sx127x_lora_init+0xa2>
	const struct gpio_driver_api *api =
 8007980:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	2101      	movs	r1, #1
 8007986:	4798      	blx	r3
 8007988:	e799      	b.n	80078be <sx127x_lora_init+0xae>
		LOG_ERR("Unable to read version info");
 800798a:	2201      	movs	r2, #1
 800798c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007990:	4b2c      	ldr	r3, [pc, #176]	; (8007a44 <sx127x_lora_init+0x234>)
 8007992:	9324      	str	r3, [sp, #144]	; 0x90
 8007994:	2300      	movs	r3, #0
 8007996:	9304      	str	r3, [sp, #16]
 8007998:	2102      	movs	r1, #2
 800799a:	f88d 1010 	strb.w	r1, [sp, #16]
 800799e:	9904      	ldr	r1, [sp, #16]
 80079a0:	9123      	str	r1, [sp, #140]	; 0x8c
 80079a2:	4619      	mov	r1, r3
 80079a4:	f363 0100 	bfi	r1, r3, #0, #1
 80079a8:	f363 0141 	bfi	r1, r3, #1, #1
 80079ac:	f363 0182 	bfi	r1, r3, #2, #1
 80079b0:	f363 01c5 	bfi	r1, r3, #3, #3
 80079b4:	f362 1188 	bfi	r1, r2, #6, #3
 80079b8:	2208      	movs	r2, #8
 80079ba:	f362 2152 	bfi	r1, r2, #9, #10
 80079be:	f363 41de 	bfi	r1, r3, #19, #12
 80079c2:	f363 71df 	bfi	r1, r3, #31, #1
 80079c6:	aa23      	add	r2, sp, #140	; 0x8c
 80079c8:	481b      	ldr	r0, [pc, #108]	; (8007a38 <sx127x_lora_init+0x228>)
 80079ca:	f007 f9ca 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EIO;
 80079ce:	f06f 0504 	mvn.w	r5, #4
 80079d2:	e744      	b.n	800785e <sx127x_lora_init+0x4e>
		LOG_ERR("Unable to configure antenna");
 80079d4:	2201      	movs	r2, #1
 80079d6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80079da:	4b1b      	ldr	r3, [pc, #108]	; (8007a48 <sx127x_lora_init+0x238>)
 80079dc:	931e      	str	r3, [sp, #120]	; 0x78
 80079de:	2300      	movs	r3, #0
 80079e0:	9304      	str	r3, [sp, #16]
 80079e2:	2102      	movs	r1, #2
 80079e4:	f88d 1010 	strb.w	r1, [sp, #16]
 80079e8:	9904      	ldr	r1, [sp, #16]
 80079ea:	911d      	str	r1, [sp, #116]	; 0x74
 80079ec:	4619      	mov	r1, r3
 80079ee:	f363 0100 	bfi	r1, r3, #0, #1
 80079f2:	f363 0141 	bfi	r1, r3, #1, #1
 80079f6:	f363 0182 	bfi	r1, r3, #2, #1
 80079fa:	f363 01c5 	bfi	r1, r3, #3, #3
 80079fe:	f362 1188 	bfi	r1, r2, #6, #3
 8007a02:	2208      	movs	r2, #8
 8007a04:	f362 2152 	bfi	r1, r2, #9, #10
 8007a08:	f363 41de 	bfi	r1, r3, #19, #12
 8007a0c:	f363 71df 	bfi	r1, r3, #31, #1
 8007a10:	aa1d      	add	r2, sp, #116	; 0x74
 8007a12:	4809      	ldr	r0, [pc, #36]	; (8007a38 <sx127x_lora_init+0x228>)
 8007a14:	f007 f9a5 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8007a18:	f06f 0504 	mvn.w	r5, #4
 8007a1c:	e71f      	b.n	800785e <sx127x_lora_init+0x4e>
 8007a1e:	bf00      	nop
 8007a20:	08012a1c 	.word	0x08012a1c
 8007a24:	20001098 	.word	0x20001098
 8007a28:	0007a120 	.word	0x0007a120
 8007a2c:	08012888 	.word	0x08012888
 8007a30:	200010fc 	.word	0x200010fc
 8007a34:	08012ab0 	.word	0x08012ab0
 8007a38:	080119dc 	.word	0x080119dc
 8007a3c:	08012c30 	.word	0x08012c30
 8007a40:	08012c68 	.word	0x08012c68
 8007a44:	08012c14 	.word	0x08012c14
 8007a48:	08012c4c 	.word	0x08012c4c

08007a4c <SX1276WriteBuffer>:
{
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	b090      	sub	sp, #64	; 0x40
 8007a50:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
 8007a52:	b2c0      	uxtb	r0, r0
 8007a54:	f008 f990 	bl	800fd78 <sx127x_write>
	if (ret < 0) {
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	db01      	blt.n	8007a60 <SX1276WriteBuffer+0x14>
}
 8007a5c:	b010      	add	sp, #64	; 0x40
 8007a5e:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to write address: 0x%x", addr);
 8007a60:	2201      	movs	r2, #1
 8007a62:	f8ad 2008 	strh.w	r2, [sp, #8]
 8007a66:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <SX1276WriteBuffer+0x5c>)
 8007a68:	930e      	str	r3, [sp, #56]	; 0x38
 8007a6a:	940f      	str	r4, [sp, #60]	; 0x3c
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	2103      	movs	r1, #3
 8007a72:	f88d 1004 	strb.w	r1, [sp, #4]
 8007a76:	9901      	ldr	r1, [sp, #4]
 8007a78:	910d      	str	r1, [sp, #52]	; 0x34
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	f363 0100 	bfi	r1, r3, #0, #1
 8007a80:	f363 0141 	bfi	r1, r3, #1, #1
 8007a84:	f363 0182 	bfi	r1, r3, #2, #1
 8007a88:	f363 01c5 	bfi	r1, r3, #3, #3
 8007a8c:	f362 1188 	bfi	r1, r2, #6, #3
 8007a90:	220c      	movs	r2, #12
 8007a92:	f362 2152 	bfi	r1, r2, #9, #10
 8007a96:	f363 41de 	bfi	r1, r3, #19, #12
 8007a9a:	f363 71df 	bfi	r1, r3, #31, #1
 8007a9e:	aa0d      	add	r2, sp, #52	; 0x34
 8007aa0:	4802      	ldr	r0, [pc, #8]	; (8007aac <SX1276WriteBuffer+0x60>)
 8007aa2:	f007 f95e 	bl	800ed62 <z_impl_z_log_msg2_static_create>
}
 8007aa6:	e7d9      	b.n	8007a5c <SX1276WriteBuffer+0x10>
 8007aa8:	08012c8c 	.word	0x08012c8c
 8007aac:	080119dc 	.word	0x080119dc

08007ab0 <SX1276SetRfTxPower>:
{
 8007ab0:	b530      	push	{r4, r5, lr}
 8007ab2:	b09d      	sub	sp, #116	; 0x74
 8007ab4:	4605      	mov	r5, r0
	uint8_t pa_config = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	uint8_t pa_dac = 0;
 8007abc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8007ac6:	204d      	movs	r0, #77	; 0x4d
 8007ac8:	f008 f94f 	bl	800fd6a <sx127x_read>
	if (ret < 0) {
 8007acc:	2800      	cmp	r0, #0
 8007ace:	db2e      	blt.n	8007b2e <SX1276SetRfTxPower+0x7e>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8007ad0:	f89d 4026 	ldrb.w	r4, [sp, #38]	; 0x26
 8007ad4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8007ad8:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
		power = clamp_int8(power, 2, 20);
 8007adc:	2214      	movs	r2, #20
 8007ade:	2102      	movs	r1, #2
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f008 f924 	bl	800fd2e <clamp_int8>
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 8007ae6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8007aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aee:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		if (power > 17) {
 8007af2:	2811      	cmp	r0, #17
 8007af4:	dd3e      	ble.n	8007b74 <SX1276SetRfTxPower+0xc4>
			pa_dac |= SX127X_PADAC_20DBM_ON;
 8007af6:	f044 0407 	orr.w	r4, r4, #7
 8007afa:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8007afe:	3805      	subs	r0, #5
 8007b00:	f000 000f 	and.w	r0, r0, #15
 8007b04:	4318      	orrs	r0, r3
 8007b06:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8007b10:	2009      	movs	r0, #9
 8007b12:	f008 f931 	bl	800fd78 <sx127x_write>
	if (ret < 0) {
 8007b16:	2800      	cmp	r0, #0
 8007b18:	db37      	blt.n	8007b8a <SX1276SetRfTxPower+0xda>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8007b20:	204d      	movs	r0, #77	; 0x4d
 8007b22:	f008 f929 	bl	800fd78 <sx127x_write>
	if (ret < 0) {
 8007b26:	2800      	cmp	r0, #0
 8007b28:	db52      	blt.n	8007bd0 <SX1276SetRfTxPower+0x120>
}
 8007b2a:	b01d      	add	sp, #116	; 0x74
 8007b2c:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Unable to read PA dac");
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007b34:	4b38      	ldr	r3, [pc, #224]	; (8007c18 <SX1276SetRfTxPower+0x168>)
 8007b36:	931a      	str	r3, [sp, #104]	; 0x68
 8007b38:	2300      	movs	r3, #0
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	2102      	movs	r1, #2
 8007b3e:	f88d 1000 	strb.w	r1, [sp]
 8007b42:	9900      	ldr	r1, [sp, #0]
 8007b44:	9119      	str	r1, [sp, #100]	; 0x64
 8007b46:	4619      	mov	r1, r3
 8007b48:	f363 0100 	bfi	r1, r3, #0, #1
 8007b4c:	f363 0141 	bfi	r1, r3, #1, #1
 8007b50:	f363 0182 	bfi	r1, r3, #2, #1
 8007b54:	f363 01c5 	bfi	r1, r3, #3, #3
 8007b58:	f362 1188 	bfi	r1, r2, #6, #3
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	f362 2152 	bfi	r1, r2, #9, #10
 8007b62:	f363 41de 	bfi	r1, r3, #19, #12
 8007b66:	f363 71df 	bfi	r1, r3, #31, #1
 8007b6a:	aa19      	add	r2, sp, #100	; 0x64
 8007b6c:	482b      	ldr	r0, [pc, #172]	; (8007c1c <SX1276SetRfTxPower+0x16c>)
 8007b6e:	f007 f8f8 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return;
 8007b72:	e7da      	b.n	8007b2a <SX1276SetRfTxPower+0x7a>
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8007b74:	f044 0404 	orr.w	r4, r4, #4
 8007b78:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8007b7c:	3802      	subs	r0, #2
 8007b7e:	f000 000f 	and.w	r0, r0, #15
 8007b82:	4318      	orrs	r0, r3
 8007b84:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8007b88:	e7bf      	b.n	8007b0a <SX1276SetRfTxPower+0x5a>
		LOG_ERR("Unable to write PA config");
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007b90:	4b23      	ldr	r3, [pc, #140]	; (8007c20 <SX1276SetRfTxPower+0x170>)
 8007b92:	9314      	str	r3, [sp, #80]	; 0x50
 8007b94:	2300      	movs	r3, #0
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	2102      	movs	r1, #2
 8007b9a:	f88d 1000 	strb.w	r1, [sp]
 8007b9e:	9900      	ldr	r1, [sp, #0]
 8007ba0:	9113      	str	r1, [sp, #76]	; 0x4c
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	f363 0100 	bfi	r1, r3, #0, #1
 8007ba8:	f363 0141 	bfi	r1, r3, #1, #1
 8007bac:	f363 0182 	bfi	r1, r3, #2, #1
 8007bb0:	f363 01c5 	bfi	r1, r3, #3, #3
 8007bb4:	f362 1188 	bfi	r1, r2, #6, #3
 8007bb8:	2208      	movs	r2, #8
 8007bba:	f362 2152 	bfi	r1, r2, #9, #10
 8007bbe:	f363 41de 	bfi	r1, r3, #19, #12
 8007bc2:	f363 71df 	bfi	r1, r3, #31, #1
 8007bc6:	aa13      	add	r2, sp, #76	; 0x4c
 8007bc8:	4814      	ldr	r0, [pc, #80]	; (8007c1c <SX1276SetRfTxPower+0x16c>)
 8007bca:	f007 f8ca 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return;
 8007bce:	e7ac      	b.n	8007b2a <SX1276SetRfTxPower+0x7a>
		LOG_ERR("Unable to write PA dac");
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007bd6:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <SX1276SetRfTxPower+0x174>)
 8007bd8:	930e      	str	r3, [sp, #56]	; 0x38
 8007bda:	2300      	movs	r3, #0
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	2102      	movs	r1, #2
 8007be0:	f88d 1000 	strb.w	r1, [sp]
 8007be4:	9900      	ldr	r1, [sp, #0]
 8007be6:	910d      	str	r1, [sp, #52]	; 0x34
 8007be8:	4619      	mov	r1, r3
 8007bea:	f363 0100 	bfi	r1, r3, #0, #1
 8007bee:	f363 0141 	bfi	r1, r3, #1, #1
 8007bf2:	f363 0182 	bfi	r1, r3, #2, #1
 8007bf6:	f363 01c5 	bfi	r1, r3, #3, #3
 8007bfa:	f362 1188 	bfi	r1, r2, #6, #3
 8007bfe:	2208      	movs	r2, #8
 8007c00:	f362 2152 	bfi	r1, r2, #9, #10
 8007c04:	f363 41de 	bfi	r1, r3, #19, #12
 8007c08:	f363 71df 	bfi	r1, r3, #31, #1
 8007c0c:	aa0d      	add	r2, sp, #52	; 0x34
 8007c0e:	4803      	ldr	r0, [pc, #12]	; (8007c1c <SX1276SetRfTxPower+0x16c>)
 8007c10:	f007 f8a7 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return;
 8007c14:	e789      	b.n	8007b2a <SX1276SetRfTxPower+0x7a>
 8007c16:	bf00      	nop
 8007c18:	08012cac 	.word	0x08012cac
 8007c1c:	080119dc 	.word	0x080119dc
 8007c20:	08012cc4 	.word	0x08012cc4
 8007c24:	08012ce0 	.word	0x08012ce0

08007c28 <SX1276GetDio1PinState>:
{
 8007c28:	b510      	push	{r4, lr}
 8007c2a:	b082      	sub	sp, #8
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 8007c2c:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <SX1276GetDio1PinState+0x34>)
 8007c2e:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
 8007c30:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
 8007c32:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	a901      	add	r1, sp, #4
 8007c38:	4798      	blx	r3
	if (ret == 0) {
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	b918      	cbnz	r0, 8007c46 <SX1276GetDio1PinState+0x1e>
		*value ^= data->invert;
 8007c3e:	6821      	ldr	r1, [r4, #0]
 8007c40:	9a01      	ldr	r2, [sp, #4]
 8007c42:	404a      	eors	r2, r1
 8007c44:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 8007c46:	b913      	cbnz	r3, 8007c4e <SX1276GetDio1PinState+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8007c48:	9b01      	ldr	r3, [sp, #4]
 8007c4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	dc02      	bgt.n	8007c58 <SX1276GetDio1PinState+0x30>
	return 0U;
 8007c52:	2000      	movs	r0, #0
}
 8007c54:	b002      	add	sp, #8
 8007c56:	bd10      	pop	{r4, pc}
		return 1U;
 8007c58:	2001      	movs	r0, #1
 8007c5a:	e7fb      	b.n	8007c54 <SX1276GetDio1PinState+0x2c>
 8007c5c:	20001098 	.word	0x20001098

08007c60 <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8007c60:	4b09      	ldr	r3, [pc, #36]	; (8007c88 <TimerInsertTimer+0x28>)
 8007c62:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 8007c64:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 8007c66:	e001      	b.n	8007c6c <TimerInsertTimer+0xc>
    {
        if( obj->Timestamp > next->Timestamp )
        {
            cur = next;
 8007c68:	461a      	mov	r2, r3
            next = next->Next;
 8007c6a:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 8007c6c:	6951      	ldr	r1, [r2, #20]
 8007c6e:	b139      	cbz	r1, 8007c80 <TimerInsertTimer+0x20>
        if( obj->Timestamp > next->Timestamp )
 8007c70:	6819      	ldr	r1, [r3, #0]
 8007c72:	f8d0 c000 	ldr.w	ip, [r0]
 8007c76:	458c      	cmp	ip, r1
 8007c78:	d8f6      	bhi.n	8007c68 <TimerInsertTimer+0x8>
        }
        else
        {
            cur->Next = obj;
 8007c7a:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 8007c7c:	6143      	str	r3, [r0, #20]
            return;
 8007c7e:	4770      	bx	lr
        }
    }
    cur->Next = obj;
 8007c80:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	6143      	str	r3, [r0, #20]
}
 8007c86:	4770      	bx	lr
 8007c88:	20001108 	.word	0x20001108

08007c8c <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8007c8c:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <TimerExists+0x18>)
 8007c8e:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 8007c90:	e000      	b.n	8007c94 <TimerExists+0x8>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 8007c92:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 8007c94:	b11b      	cbz	r3, 8007c9e <TimerExists+0x12>
        if( cur == obj )
 8007c96:	4283      	cmp	r3, r0
 8007c98:	d1fb      	bne.n	8007c92 <TimerExists+0x6>
            return true;
 8007c9a:	2001      	movs	r0, #1
    }
    return false;
}
 8007c9c:	4770      	bx	lr
    return false;
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	20001108 	.word	0x20001108

08007ca8 <TimerInsertNewHeadTimer>:
{
 8007ca8:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 8007caa:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <TimerInsertNewHeadTimer+0x18>)
 8007cac:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 8007cae:	b10b      	cbz	r3, 8007cb4 <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 8007cb4:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 8007cb6:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <TimerInsertNewHeadTimer+0x18>)
 8007cb8:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 8007cba:	f008 f871 	bl	800fda0 <TimerSetTimeout>
}
 8007cbe:	bd08      	pop	{r3, pc}
 8007cc0:	20001108 	.word	0x20001108

08007cc4 <TimerStart>:
{
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8007cca:	a801      	add	r0, sp, #4
 8007ccc:	f008 f812 	bl	800fcf4 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8007cd0:	b1f4      	cbz	r4, 8007d10 <TimerStart+0x4c>
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7ff ffda 	bl	8007c8c <TimerExists>
 8007cd8:	b9d0      	cbnz	r0, 8007d10 <TimerStart+0x4c>
    obj->Timestamp = obj->ReloadValue;
 8007cda:	6863      	ldr	r3, [r4, #4]
 8007cdc:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 8007ce6:	4b11      	ldr	r3, [pc, #68]	; (8007d2c <TimerStart+0x68>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	b1ab      	cbz	r3, 8007d18 <TimerStart+0x54>
        elapsedTime = RtcGetTimerElapsedTime( );
 8007cec:	f7fe ff4c 	bl	8006b88 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	4418      	add	r0, r3
 8007cf4:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8007cf6:	4b0d      	ldr	r3, [pc, #52]	; (8007d2c <TimerStart+0x68>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4298      	cmp	r0, r3
 8007cfe:	d211      	bcs.n	8007d24 <TimerStart+0x60>
            TimerInsertNewHeadTimer( obj );
 8007d00:	4620      	mov	r0, r4
 8007d02:	f7ff ffd1 	bl	8007ca8 <TimerInsertNewHeadTimer>
    CRITICAL_SECTION_END( );
 8007d06:	a801      	add	r0, sp, #4
 8007d08:	f007 fffe 	bl	800fd08 <BoardCriticalSectionEnd>
}
 8007d0c:	b002      	add	sp, #8
 8007d0e:	bd10      	pop	{r4, pc}
        CRITICAL_SECTION_END( );
 8007d10:	a801      	add	r0, sp, #4
 8007d12:	f007 fff9 	bl	800fd08 <BoardCriticalSectionEnd>
        return;
 8007d16:	e7f9      	b.n	8007d0c <TimerStart+0x48>
        RtcSetTimerContext( );
 8007d18:	f7fe ff62 	bl	8006be0 <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f7ff ffc3 	bl	8007ca8 <TimerInsertNewHeadTimer>
 8007d22:	e7f0      	b.n	8007d06 <TimerStart+0x42>
            TimerInsertTimer( obj );
 8007d24:	4620      	mov	r0, r4
 8007d26:	f7ff ff9b 	bl	8007c60 <TimerInsertTimer>
 8007d2a:	e7ec      	b.n	8007d06 <TimerStart+0x42>
 8007d2c:	20001108 	.word	0x20001108

08007d30 <TimerIrqHandler>:
{
 8007d30:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 8007d32:	f7fe ff61 	bl	8006bf8 <RtcGetTimerContext>
 8007d36:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8007d38:	f7fe ff52 	bl	8006be0 <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 8007d3c:	eba0 0c05 	sub.w	ip, r0, r5
    if( TimerListHead != NULL )
 8007d40:	4b1c      	ldr	r3, [pc, #112]	; (8007db4 <TimerIrqHandler+0x84>)
 8007d42:	681e      	ldr	r6, [r3, #0]
 8007d44:	b16e      	cbz	r6, 8007d62 <TimerIrqHandler+0x32>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8007d46:	4632      	mov	r2, r6
 8007d48:	e002      	b.n	8007d50 <TimerIrqHandler+0x20>
                next->Timestamp = 0;
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	6019      	str	r1, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8007d4e:	6952      	ldr	r2, [r2, #20]
 8007d50:	6953      	ldr	r3, [r2, #20]
 8007d52:	b133      	cbz	r3, 8007d62 <TimerIrqHandler+0x32>
            if( next->Timestamp > deltaContext )
 8007d54:	6819      	ldr	r1, [r3, #0]
 8007d56:	4561      	cmp	r1, ip
 8007d58:	d9f7      	bls.n	8007d4a <TimerIrqHandler+0x1a>
                next->Timestamp -= deltaContext;
 8007d5a:	1a2c      	subs	r4, r5, r0
 8007d5c:	4421      	add	r1, r4
 8007d5e:	6019      	str	r1, [r3, #0]
 8007d60:	e7f5      	b.n	8007d4e <TimerIrqHandler+0x1e>
    if ( TimerListHead != NULL )
 8007d62:	b146      	cbz	r6, 8007d76 <TimerIrqHandler+0x46>
        TimerListHead = TimerListHead->Next;
 8007d64:	6972      	ldr	r2, [r6, #20]
 8007d66:	4b13      	ldr	r3, [pc, #76]	; (8007db4 <TimerIrqHandler+0x84>)
 8007d68:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	7233      	strb	r3, [r6, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8007d6e:	68f3      	ldr	r3, [r6, #12]
 8007d70:	b1a3      	cbz	r3, 8007d9c <TimerIrqHandler+0x6c>
 8007d72:	6930      	ldr	r0, [r6, #16]
 8007d74:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8007d76:	4b0f      	ldr	r3, [pc, #60]	; (8007db4 <TimerIrqHandler+0x84>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	b18b      	cbz	r3, 8007da0 <TimerIrqHandler+0x70>
 8007d7c:	681c      	ldr	r4, [r3, #0]
 8007d7e:	f7fe ff03 	bl	8006b88 <RtcGetTimerElapsedTime>
 8007d82:	4284      	cmp	r4, r0
 8007d84:	d20c      	bcs.n	8007da0 <TimerIrqHandler+0x70>
        cur = TimerListHead;
 8007d86:	4a0b      	ldr	r2, [pc, #44]	; (8007db4 <TimerIrqHandler+0x84>)
 8007d88:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 8007d8a:	6959      	ldr	r1, [r3, #20]
 8007d8c:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 8007d8e:	2200      	movs	r2, #0
 8007d90:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	b11a      	cbz	r2, 8007d9e <TimerIrqHandler+0x6e>
 8007d96:	6918      	ldr	r0, [r3, #16]
 8007d98:	4790      	blx	r2
 8007d9a:	e7ec      	b.n	8007d76 <TimerIrqHandler+0x46>
        ExecuteCallBack( cur->Callback, cur->Context );
 8007d9c:	e7fe      	b.n	8007d9c <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 8007d9e:	e7fe      	b.n	8007d9e <TimerIrqHandler+0x6e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8007da0:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <TimerIrqHandler+0x84>)
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	b108      	cbz	r0, 8007daa <TimerIrqHandler+0x7a>
 8007da6:	7a43      	ldrb	r3, [r0, #9]
 8007da8:	b103      	cbz	r3, 8007dac <TimerIrqHandler+0x7c>
}
 8007daa:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 8007dac:	f007 fff8 	bl	800fda0 <TimerSetTimeout>
}
 8007db0:	e7fb      	b.n	8007daa <TimerIrqHandler+0x7a>
 8007db2:	bf00      	nop
 8007db4:	20001108 	.word	0x20001108

08007db8 <TimerStop>:
{
 8007db8:	b510      	push	{r4, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8007dbe:	a801      	add	r0, sp, #4
 8007dc0:	f007 ff98 	bl	800fcf4 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 8007dc4:	4b1b      	ldr	r3, [pc, #108]	; (8007e34 <TimerStop+0x7c>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8007dc8:	b15a      	cbz	r2, 8007de2 <TimerStop+0x2a>
 8007dca:	b154      	cbz	r4, 8007de2 <TimerStop+0x2a>
    obj->IsStarted = false;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	7223      	strb	r3, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8007dd0:	42a2      	cmp	r2, r4
 8007dd2:	d00a      	beq.n	8007dea <TimerStop+0x32>
    TimerEvent_t* cur = TimerListHead;
 8007dd4:	4613      	mov	r3, r2
        while( cur != NULL )
 8007dd6:	b32b      	cbz	r3, 8007e24 <TimerStop+0x6c>
            if( cur == obj )
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	d020      	beq.n	8007e1e <TimerStop+0x66>
                prev = cur;
 8007ddc:	461a      	mov	r2, r3
                cur = cur->Next;
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	e7f9      	b.n	8007dd6 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 8007de2:	a801      	add	r0, sp, #4
 8007de4:	f007 ff90 	bl	800fd08 <BoardCriticalSectionEnd>
        return;
 8007de8:	e01f      	b.n	8007e2a <TimerStop+0x72>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8007dea:	7a53      	ldrb	r3, [r2, #9]
 8007dec:	b173      	cbz	r3, 8007e0c <TimerStop+0x54>
            TimerListHead->IsNext2Expire = false;
 8007dee:	2300      	movs	r3, #0
 8007df0:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 8007df2:	6950      	ldr	r0, [r2, #20]
 8007df4:	b120      	cbz	r0, 8007e00 <TimerStop+0x48>
                TimerListHead = TimerListHead->Next;
 8007df6:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <TimerStop+0x7c>)
 8007df8:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 8007dfa:	f007 ffd1 	bl	800fda0 <TimerSetTimeout>
 8007dfe:	e011      	b.n	8007e24 <TimerStop+0x6c>
                RtcStopAlarm( );
 8007e00:	f7fe fed0 	bl	8006ba4 <RtcStopAlarm>
                TimerListHead = NULL;
 8007e04:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <TimerStop+0x7c>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	e00b      	b.n	8007e24 <TimerStop+0x6c>
            if( TimerListHead->Next != NULL )
 8007e0c:	6953      	ldr	r3, [r2, #20]
 8007e0e:	b113      	cbz	r3, 8007e16 <TimerStop+0x5e>
                TimerListHead = TimerListHead->Next;
 8007e10:	4a08      	ldr	r2, [pc, #32]	; (8007e34 <TimerStop+0x7c>)
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	e006      	b.n	8007e24 <TimerStop+0x6c>
                TimerListHead = NULL;
 8007e16:	4b07      	ldr	r3, [pc, #28]	; (8007e34 <TimerStop+0x7c>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	e002      	b.n	8007e24 <TimerStop+0x6c>
                if( cur->Next != NULL )
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	b12b      	cbz	r3, 8007e2e <TimerStop+0x76>
                    prev->Next = cur;
 8007e22:	6153      	str	r3, [r2, #20]
    CRITICAL_SECTION_END( );
 8007e24:	a801      	add	r0, sp, #4
 8007e26:	f007 ff6f 	bl	800fd08 <BoardCriticalSectionEnd>
}
 8007e2a:	b002      	add	sp, #8
 8007e2c:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	6153      	str	r3, [r2, #20]
 8007e32:	e7f7      	b.n	8007e24 <TimerStop+0x6c>
 8007e34:	20001108 	.word	0x20001108

08007e38 <SX1276ConvertFreqInHzToPllStep>:
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8007e38:	4908      	ldr	r1, [pc, #32]	; (8007e5c <SX1276ConvertFreqInHzToPllStep+0x24>)
 8007e3a:	fba1 3200 	umull	r3, r2, r1, r0
 8007e3e:	0b12      	lsrs	r2, r2, #12
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8007e40:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007e44:	fb03 0012 	mls	r0, r3, r2, r0
 8007e48:	f641 6384 	movw	r3, #7812	; 0x1e84
 8007e4c:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8007e50:	fba1 1303 	umull	r1, r3, r1, r3
 8007e54:	0b1b      	lsrs	r3, r3, #12
             SX1276_PLL_STEP_SCALED );
}
 8007e56:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 8007e5a:	4770      	bx	lr
 8007e5c:	431bde83 	.word	0x431bde83

08007e60 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8007e60:	2300      	movs	r3, #0
 8007e62:	e008      	b.n	8007e76 <GetFskBandwidthRegValue+0x16>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 8007e64:	e7fe      	b.n	8007e64 <GetFskBandwidthRegValue+0x4>
            return FskBandwidths[i].RegValue;
 8007e66:	4b11      	ldr	r3, [pc, #68]	; (8007eac <GetFskBandwidthRegValue+0x4c>)
 8007e68:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007e6c:	7908      	ldrb	r0, [r1, #4]
}
 8007e6e:	bc10      	pop	{r4}
 8007e70:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8007e72:	3301      	adds	r3, #1
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b14      	cmp	r3, #20
 8007e78:	d817      	bhi.n	8007eaa <GetFskBandwidthRegValue+0x4a>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4a0b      	ldr	r2, [pc, #44]	; (8007eac <GetFskBandwidthRegValue+0x4c>)
 8007e7e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007e82:	4282      	cmp	r2, r0
 8007e84:	d8f5      	bhi.n	8007e72 <GetFskBandwidthRegValue+0x12>
{
 8007e86:	b410      	push	{r4}
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	4c08      	ldr	r4, [pc, #32]	; (8007eac <GetFskBandwidthRegValue+0x4c>)
 8007e8c:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8007e90:	4282      	cmp	r2, r0
 8007e92:	d8e8      	bhi.n	8007e66 <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8007e94:	3301      	adds	r3, #1
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b14      	cmp	r3, #20
 8007e9a:	d8e3      	bhi.n	8007e64 <GetFskBandwidthRegValue+0x4>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4a03      	ldr	r2, [pc, #12]	; (8007eac <GetFskBandwidthRegValue+0x4c>)
 8007ea0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007ea4:	4282      	cmp	r2, r0
 8007ea6:	d8f5      	bhi.n	8007e94 <GetFskBandwidthRegValue+0x34>
 8007ea8:	e7ee      	b.n	8007e88 <GetFskBandwidthRegValue+0x28>
    while( 1 );
 8007eaa:	e7fe      	b.n	8007eaa <GetFskBandwidthRegValue+0x4a>
 8007eac:	08012db4 	.word	0x08012db4

08007eb0 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8007eb0:	2801      	cmp	r0, #1
 8007eb2:	d006      	beq.n	8007ec2 <SX1276GetLoRaBandwidthInHz+0x12>
 8007eb4:	2802      	cmp	r0, #2
 8007eb6:	d006      	beq.n	8007ec6 <SX1276GetLoRaBandwidthInHz+0x16>
 8007eb8:	b108      	cbz	r0, 8007ebe <SX1276GetLoRaBandwidthInHz+0xe>
 8007eba:	2000      	movs	r0, #0
        bandwidthInHz = 500000UL;
        break;
    }

    return bandwidthInHz;
}
 8007ebc:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8007ebe:	4803      	ldr	r0, [pc, #12]	; (8007ecc <SX1276GetLoRaBandwidthInHz+0x1c>)
 8007ec0:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 8007ec2:	4803      	ldr	r0, [pc, #12]	; (8007ed0 <SX1276GetLoRaBandwidthInHz+0x20>)
 8007ec4:	4770      	bx	lr
        bandwidthInHz = 500000UL;
 8007ec6:	4803      	ldr	r0, [pc, #12]	; (8007ed4 <SX1276GetLoRaBandwidthInHz+0x24>)
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	0001e848 	.word	0x0001e848
 8007ed0:	0003d090 	.word	0x0003d090
 8007ed4:	0007a120 	.word	0x0007a120

08007ed8 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8007ed8:	4b06      	ldr	r3, [pc, #24]	; (8007ef4 <SX1276OnDio4Irq+0x1c>)
 8007eda:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8007ede:	b93b      	cbnz	r3, 8007ef0 <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8007ee0:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <SX1276OnDio4Irq+0x1c>)
 8007ee2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8007ee6:	b91b      	cbnz	r3, 8007ef0 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8007ee8:	4b02      	ldr	r3, [pc, #8]	; (8007ef4 <SX1276OnDio4Irq+0x1c>)
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	20001240 	.word	0x20001240

08007ef8 <SX1276GetStatus>:
}
 8007ef8:	4b01      	ldr	r3, [pc, #4]	; (8007f00 <SX1276GetStatus+0x8>)
 8007efa:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 8007efe:	4770      	bx	lr
 8007f00:	20001240 	.word	0x20001240

08007f04 <SX1276SetChannel>:
{
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	4605      	mov	r5, r0
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8007f08:	f7ff ff96 	bl	8007e38 <SX1276ConvertFreqInHzToPllStep>
 8007f0c:	4604      	mov	r4, r0
    SX1276.Settings.Channel = freq;
 8007f0e:	4b09      	ldr	r3, [pc, #36]	; (8007f34 <SX1276SetChannel+0x30>)
 8007f10:	f8c3 50e4 	str.w	r5, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8007f14:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8007f18:	2006      	movs	r0, #6
 8007f1a:	f008 f838 	bl	800ff8e <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8007f1e:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8007f22:	2007      	movs	r0, #7
 8007f24:	f008 f833 	bl	800ff8e <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8007f28:	b2e1      	uxtb	r1, r4
 8007f2a:	2008      	movs	r0, #8
 8007f2c:	f008 f82f 	bl	800ff8e <SX1276Write>
}
 8007f30:	bd38      	pop	{r3, r4, r5, pc}
 8007f32:	bf00      	nop
 8007f34:	20001240 	.word	0x20001240

08007f38 <SX1276OnDio3Irq>:
{
 8007f38:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 8007f3a:	4b14      	ldr	r3, [pc, #80]	; (8007f8c <SX1276OnDio3Irq+0x54>)
 8007f3c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d000      	beq.n	8007f46 <SX1276OnDio3Irq+0xe>
}
 8007f44:	bd08      	pop	{r3, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8007f46:	2012      	movs	r0, #18
 8007f48:	f008 f82d 	bl	800ffa6 <SX1276Read>
 8007f4c:	f010 0f01 	tst.w	r0, #1
 8007f50:	d00d      	beq.n	8007f6e <SX1276OnDio3Irq+0x36>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8007f52:	2105      	movs	r1, #5
 8007f54:	2012      	movs	r0, #18
 8007f56:	f008 f81a 	bl	800ff8e <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007f5a:	4b0d      	ldr	r3, [pc, #52]	; (8007f90 <SX1276OnDio3Irq+0x58>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0f0      	beq.n	8007f44 <SX1276OnDio3Irq+0xc>
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0ed      	beq.n	8007f44 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( true );
 8007f68:	2001      	movs	r0, #1
 8007f6a:	4798      	blx	r3
 8007f6c:	e7ea      	b.n	8007f44 <SX1276OnDio3Irq+0xc>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8007f6e:	2104      	movs	r1, #4
 8007f70:	2012      	movs	r0, #18
 8007f72:	f008 f80c 	bl	800ff8e <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007f76:	4b06      	ldr	r3, [pc, #24]	; (8007f90 <SX1276OnDio3Irq+0x58>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0e2      	beq.n	8007f44 <SX1276OnDio3Irq+0xc>
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0df      	beq.n	8007f44 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( false );
 8007f84:	2000      	movs	r0, #0
 8007f86:	4798      	blx	r3
}
 8007f88:	e7dc      	b.n	8007f44 <SX1276OnDio3Irq+0xc>
 8007f8a:	bf00      	nop
 8007f8c:	20001240 	.word	0x20001240
 8007f90:	2000110c 	.word	0x2000110c

08007f94 <SX1276OnDio2Irq>:
{
 8007f94:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 8007f96:	4b3a      	ldr	r3, [pc, #232]	; (8008080 <SX1276OnDio2Irq+0xec>)
 8007f98:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d002      	beq.n	8007fa6 <SX1276OnDio2Irq+0x12>
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d051      	beq.n	8008048 <SX1276OnDio2Irq+0xb4>
}
 8007fa4:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 8007fa6:	4b36      	ldr	r3, [pc, #216]	; (8008080 <SX1276OnDio2Irq+0xec>)
 8007fa8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8007fac:	b1c3      	cbz	r3, 8007fe0 <SX1276OnDio2Irq+0x4c>
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d1f8      	bne.n	8007fa4 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007fb2:	4b33      	ldr	r3, [pc, #204]	; (8008080 <SX1276OnDio2Irq+0xec>)
 8007fb4:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d0f3      	beq.n	8007fa4 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8007fbc:	2102      	movs	r1, #2
 8007fbe:	2012      	movs	r0, #18
 8007fc0:	f007 ffe5 	bl	800ff8e <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8007fc4:	4b2f      	ldr	r3, [pc, #188]	; (8008084 <SX1276OnDio2Irq+0xf0>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0eb      	beq.n	8007fa4 <SX1276OnDio2Irq+0x10>
 8007fcc:	695c      	ldr	r4, [r3, #20]
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	d0e8      	beq.n	8007fa4 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8007fd2:	201c      	movs	r0, #28
 8007fd4:	f007 ffe7 	bl	800ffa6 <SX1276Read>
 8007fd8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8007fdc:	47a0      	blx	r4
 8007fde:	e7e1      	b.n	8007fa4 <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
 8007fe0:	4b27      	ldr	r3, [pc, #156]	; (8008080 <SX1276OnDio2Irq+0xec>)
 8007fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fe4:	b35b      	cbz	r3, 800803e <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8007fe6:	4b26      	ldr	r3, [pc, #152]	; (8008080 <SX1276OnDio2Irq+0xec>)
 8007fe8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d0d9      	beq.n	8007fa4 <SX1276OnDio2Irq+0x10>
 8007ff0:	4b23      	ldr	r3, [pc, #140]	; (8008080 <SX1276OnDio2Irq+0xec>)
 8007ff2:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1d4      	bne.n	8007fa4 <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
 8007ffa:	4823      	ldr	r0, [pc, #140]	; (8008088 <SX1276OnDio2Irq+0xf4>)
 8007ffc:	f7ff fedc 	bl	8007db8 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8008000:	4c1f      	ldr	r4, [pc, #124]	; (8008080 <SX1276OnDio2Irq+0xec>)
 8008002:	2301      	movs	r3, #1
 8008004:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8008008:	2011      	movs	r0, #17
 800800a:	f007 ffcc 	bl	800ffa6 <SX1276Read>
 800800e:	0843      	lsrs	r3, r0, #1
 8008010:	425b      	negs	r3, r3
 8008012:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8008016:	201b      	movs	r0, #27
 8008018:	f007 ffc5 	bl	800ffa6 <SX1276Read>
 800801c:	0205      	lsls	r5, r0, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800801e:	201c      	movs	r0, #28
 8008020:	f007 ffc1 	bl	800ffa6 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8008024:	4328      	orrs	r0, r5
 8008026:	f007 ff05 	bl	800fe34 <SX1276ConvertPllStepToFreqInHz>
 800802a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800802e:	200c      	movs	r0, #12
 8008030:	f007 ffb9 	bl	800ffa6 <SX1276Read>
 8008034:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8008038:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
 800803c:	e7b2      	b.n	8007fa4 <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800803e:	4b10      	ldr	r3, [pc, #64]	; (8008080 <SX1276OnDio2Irq+0xec>)
 8008040:	2201      	movs	r2, #1
 8008042:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8008046:	e7ce      	b.n	8007fe6 <SX1276OnDio2Irq+0x52>
            switch( SX1276.Settings.Modem )
 8008048:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <SX1276OnDio2Irq+0xec>)
 800804a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800804e:	2b01      	cmp	r3, #1
 8008050:	d1a8      	bne.n	8007fa4 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008052:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <SX1276OnDio2Irq+0xec>)
 8008054:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0a3      	beq.n	8007fa4 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800805c:	2102      	movs	r1, #2
 800805e:	2012      	movs	r0, #18
 8008060:	f007 ff95 	bl	800ff8e <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8008064:	4b07      	ldr	r3, [pc, #28]	; (8008084 <SX1276OnDio2Irq+0xf0>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d09b      	beq.n	8007fa4 <SX1276OnDio2Irq+0x10>
 800806c:	695c      	ldr	r4, [r3, #20]
 800806e:	2c00      	cmp	r4, #0
 8008070:	d098      	beq.n	8007fa4 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8008072:	201c      	movs	r0, #28
 8008074:	f007 ff97 	bl	800ffa6 <SX1276Read>
 8008078:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800807c:	47a0      	blx	r4
}
 800807e:	e791      	b.n	8007fa4 <SX1276OnDio2Irq+0x10>
 8008080:	20001240 	.word	0x20001240
 8008084:	2000110c 	.word	0x2000110c
 8008088:	20001110 	.word	0x20001110

0800808c <SX1276OnDio1Irq>:
{
 800808c:	b508      	push	{r3, lr}
    SX1276Read(REG_IRQFLAGS1);
 800808e:	203e      	movs	r0, #62	; 0x3e
 8008090:	f007 ff89 	bl	800ffa6 <SX1276Read>
    SX1276Read(REG_IRQFLAGS2);
 8008094:	203f      	movs	r0, #63	; 0x3f
 8008096:	f007 ff86 	bl	800ffa6 <SX1276Read>
    switch( SX1276.Settings.State )
 800809a:	4b4b      	ldr	r3, [pc, #300]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 800809c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d002      	beq.n	80080aa <SX1276OnDio1Irq+0x1e>
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d062      	beq.n	800816e <SX1276OnDio1Irq+0xe2>
}
 80080a8:	bd08      	pop	{r3, pc}
            switch( SX1276.Settings.Modem )
 80080aa:	4b47      	ldr	r3, [pc, #284]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 80080ac:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80080b0:	b1cb      	cbz	r3, 80080e6 <SX1276OnDio1Irq+0x5a>
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d1f8      	bne.n	80080a8 <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 0 )
 80080b6:	f7ff fdb7 	bl	8007c28 <SX1276GetDio1PinState>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d0f4      	beq.n	80080a8 <SX1276OnDio1Irq+0x1c>
                TimerStop( &RxTimeoutTimer );
 80080be:	4843      	ldr	r0, [pc, #268]	; (80081cc <SX1276OnDio1Irq+0x140>)
 80080c0:	f7ff fe7a 	bl	8007db8 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80080c4:	2180      	movs	r1, #128	; 0x80
 80080c6:	2012      	movs	r0, #18
 80080c8:	f007 ff61 	bl	800ff8e <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80080cc:	4b3e      	ldr	r3, [pc, #248]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80080d4:	4b3e      	ldr	r3, [pc, #248]	; (80081d0 <SX1276OnDio1Irq+0x144>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0e5      	beq.n	80080a8 <SX1276OnDio1Irq+0x1c>
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0e2      	beq.n	80080a8 <SX1276OnDio1Irq+0x1c>
                    RadioEvents->RxTimeout( );
 80080e2:	4798      	blx	r3
 80080e4:	e7e0      	b.n	80080a8 <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 0 )
 80080e6:	f7ff fd9f 	bl	8007c28 <SX1276GetDio1PinState>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d0dc      	beq.n	80080a8 <SX1276OnDio1Irq+0x1c>
                TimerStop( &RxTimeoutSyncWord );
 80080ee:	4839      	ldr	r0, [pc, #228]	; (80081d4 <SX1276OnDio1Irq+0x148>)
 80080f0:	f7ff fe62 	bl	8007db8 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80080f4:	4b34      	ldr	r3, [pc, #208]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 80080f6:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 80080fa:	b95b      	cbnz	r3, 8008114 <SX1276OnDio1Irq+0x88>
 80080fc:	4b32      	ldr	r3, [pc, #200]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 80080fe:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8008102:	b93b      	cbnz	r3, 8008114 <SX1276OnDio1Irq+0x88>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8008104:	4b30      	ldr	r3, [pc, #192]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 8008106:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800810a:	b9eb      	cbnz	r3, 8008148 <SX1276OnDio1Irq+0xbc>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800810c:	2101      	movs	r1, #1
 800810e:	4832      	ldr	r0, [pc, #200]	; (80081d8 <SX1276OnDio1Irq+0x14c>)
 8008110:	f007 fefd 	bl	800ff0e <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8008114:	4b2c      	ldr	r3, [pc, #176]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 8008116:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 800811a:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 800811e:	1a88      	subs	r0, r1, r2
 8008120:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8008124:	4298      	cmp	r0, r3
 8008126:	db16      	blt.n	8008156 <SX1276OnDio1Irq+0xca>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8008128:	1e59      	subs	r1, r3, #1
 800812a:	b2c9      	uxtb	r1, r1
 800812c:	482b      	ldr	r0, [pc, #172]	; (80081dc <SX1276OnDio1Irq+0x150>)
 800812e:	4410      	add	r0, r2
 8008130:	f007 feed 	bl	800ff0e <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8008134:	4a24      	ldr	r2, [pc, #144]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 8008136:	f892 311a 	ldrb.w	r3, [r2, #282]	; 0x11a
 800813a:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 800813e:	440b      	add	r3, r1
 8008140:	3b01      	subs	r3, #1
 8008142:	f8a2 3118 	strh.w	r3, [r2, #280]	; 0x118
 8008146:	e7af      	b.n	80080a8 <SX1276OnDio1Irq+0x1c>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8008148:	2032      	movs	r0, #50	; 0x32
 800814a:	f007 ff2c 	bl	800ffa6 <SX1276Read>
 800814e:	4b1e      	ldr	r3, [pc, #120]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 8008150:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8008154:	e7de      	b.n	8008114 <SX1276OnDio1Irq+0x88>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008156:	1a89      	subs	r1, r1, r2
 8008158:	b2c9      	uxtb	r1, r1
 800815a:	4820      	ldr	r0, [pc, #128]	; (80081dc <SX1276OnDio1Irq+0x150>)
 800815c:	4410      	add	r0, r2
 800815e:	f007 fed6 	bl	800ff0e <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008162:	4b19      	ldr	r3, [pc, #100]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 8008164:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8008168:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 800816c:	e79c      	b.n	80080a8 <SX1276OnDio1Irq+0x1c>
            switch( SX1276.Settings.Modem )
 800816e:	4b16      	ldr	r3, [pc, #88]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 8008170:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008174:	2b00      	cmp	r3, #0
 8008176:	d197      	bne.n	80080a8 <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 1 )
 8008178:	f7ff fd56 	bl	8007c28 <SX1276GetDio1PinState>
 800817c:	2801      	cmp	r0, #1
 800817e:	d093      	beq.n	80080a8 <SX1276OnDio1Irq+0x1c>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8008180:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 8008182:	f8b3 0116 	ldrh.w	r0, [r3, #278]	; 0x116
 8008186:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 800818a:	eba0 0c02 	sub.w	ip, r0, r2
 800818e:	f893 111b 	ldrb.w	r1, [r3, #283]	; 0x11b
 8008192:	458c      	cmp	ip, r1
 8008194:	dd0c      	ble.n	80081b0 <SX1276OnDio1Irq+0x124>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8008196:	4811      	ldr	r0, [pc, #68]	; (80081dc <SX1276OnDio1Irq+0x150>)
 8008198:	4410      	add	r0, r2
 800819a:	f007 febf 	bl	800ff1c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800819e:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 80081a0:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 80081a4:	f8b3 1118 	ldrh.w	r1, [r3, #280]	; 0x118
 80081a8:	440a      	add	r2, r1
 80081aa:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 80081ae:	e77b      	b.n	80080a8 <SX1276OnDio1Irq+0x1c>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80081b0:	1a81      	subs	r1, r0, r2
 80081b2:	b2c9      	uxtb	r1, r1
 80081b4:	4809      	ldr	r0, [pc, #36]	; (80081dc <SX1276OnDio1Irq+0x150>)
 80081b6:	4410      	add	r0, r2
 80081b8:	f007 feb0 	bl	800ff1c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80081bc:	4b02      	ldr	r3, [pc, #8]	; (80081c8 <SX1276OnDio1Irq+0x13c>)
 80081be:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 80081c2:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
}
 80081c6:	e76f      	b.n	80080a8 <SX1276OnDio1Irq+0x1c>
 80081c8:	20001240 	.word	0x20001240
 80081cc:	20001128 	.word	0x20001128
 80081d0:	2000110c 	.word	0x2000110c
 80081d4:	20001110 	.word	0x20001110
 80081d8:	20001356 	.word	0x20001356
 80081dc:	20001140 	.word	0x20001140

080081e0 <SX1276OnDio0Irq>:
{
 80081e0:	b510      	push	{r4, lr}
 80081e2:	b082      	sub	sp, #8
    SX1276Read(REG_IRQFLAGS1);
 80081e4:	203e      	movs	r0, #62	; 0x3e
 80081e6:	f007 fede 	bl	800ffa6 <SX1276Read>
    SX1276Read(REG_IRQFLAGS2);
 80081ea:	203f      	movs	r0, #63	; 0x3f
 80081ec:	f007 fedb 	bl	800ffa6 <SX1276Read>
    volatile uint8_t irqFlags = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 80081f6:	4bb1      	ldr	r3, [pc, #708]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 80081f8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d004      	beq.n	800820a <SX1276OnDio0Irq+0x2a>
 8008200:	2b02      	cmp	r3, #2
 8008202:	f000 813f 	beq.w	8008484 <SX1276OnDio0Irq+0x2a4>
}
 8008206:	b002      	add	sp, #8
 8008208:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 800820a:	4bac      	ldr	r3, [pc, #688]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 800820c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008210:	b343      	cbz	r3, 8008264 <SX1276OnDio0Irq+0x84>
 8008212:	2b01      	cmp	r3, #1
 8008214:	d1f7      	bne.n	8008206 <SX1276OnDio0Irq+0x26>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8008216:	2140      	movs	r1, #64	; 0x40
 8008218:	2012      	movs	r0, #18
 800821a:	f007 feb8 	bl	800ff8e <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800821e:	2012      	movs	r0, #18
 8008220:	f007 fec1 	bl	800ffa6 <SX1276Read>
 8008224:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8008228:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800822c:	f013 0f20 	tst.w	r3, #32
 8008230:	f000 80bd 	beq.w	80083ae <SX1276OnDio0Irq+0x1ce>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8008234:	2120      	movs	r1, #32
 8008236:	2012      	movs	r0, #18
 8008238:	f007 fea9 	bl	800ff8e <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800823c:	4b9f      	ldr	r3, [pc, #636]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 800823e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8008242:	b91b      	cbnz	r3, 800824c <SX1276OnDio0Irq+0x6c>
                            SX1276.Settings.State = RF_IDLE;
 8008244:	4b9d      	ldr	r3, [pc, #628]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 8008246:	2200      	movs	r2, #0
 8008248:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 800824c:	489c      	ldr	r0, [pc, #624]	; (80084c0 <SX1276OnDio0Irq+0x2e0>)
 800824e:	f7ff fdb3 	bl	8007db8 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8008252:	4b9c      	ldr	r3, [pc, #624]	; (80084c4 <SX1276OnDio0Irq+0x2e4>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0d5      	beq.n	8008206 <SX1276OnDio0Irq+0x26>
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0d2      	beq.n	8008206 <SX1276OnDio0Irq+0x26>
                            RadioEvents->RxError( );
 8008260:	4798      	blx	r3
 8008262:	e7d0      	b.n	8008206 <SX1276OnDio0Irq+0x26>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8008264:	4b95      	ldr	r3, [pc, #596]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 8008266:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800826a:	bb0b      	cbnz	r3, 80082b0 <SX1276OnDio0Irq+0xd0>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800826c:	4b93      	ldr	r3, [pc, #588]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 800826e:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 8008272:	2900      	cmp	r1, #0
 8008274:	d15e      	bne.n	8008334 <SX1276OnDio0Irq+0x154>
 8008276:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800827a:	2b00      	cmp	r3, #0
 800827c:	d15a      	bne.n	8008334 <SX1276OnDio0Irq+0x154>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800827e:	4b8f      	ldr	r3, [pc, #572]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 8008280:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8008284:	2b00      	cmp	r3, #0
 8008286:	d14e      	bne.n	8008326 <SX1276OnDio0Irq+0x146>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8008288:	2101      	movs	r1, #1
 800828a:	488f      	ldr	r0, [pc, #572]	; (80084c8 <SX1276OnDio0Irq+0x2e8>)
 800828c:	f007 fe3f 	bl	800ff0e <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008290:	4c8a      	ldr	r4, [pc, #552]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 8008292:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8008296:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 800829a:	1ac9      	subs	r1, r1, r3
 800829c:	b2c9      	uxtb	r1, r1
 800829e:	488b      	ldr	r0, [pc, #556]	; (80084cc <SX1276OnDio0Irq+0x2ec>)
 80082a0:	4418      	add	r0, r3
 80082a2:	f007 fe34 	bl	800ff0e <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80082a6:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 80082aa:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 80082ae:	e04e      	b.n	800834e <SX1276OnDio0Irq+0x16e>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80082b0:	203f      	movs	r0, #63	; 0x3f
 80082b2:	f007 fe78 	bl	800ffa6 <SX1276Read>
 80082b6:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80082ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80082be:	f013 0f02 	tst.w	r3, #2
 80082c2:	d1d3      	bne.n	800826c <SX1276OnDio0Irq+0x8c>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80082c4:	210b      	movs	r1, #11
 80082c6:	203e      	movs	r0, #62	; 0x3e
 80082c8:	f007 fe61 	bl	800ff8e <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80082cc:	2110      	movs	r1, #16
 80082ce:	203f      	movs	r0, #63	; 0x3f
 80082d0:	f007 fe5d 	bl	800ff8e <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80082d4:	487a      	ldr	r0, [pc, #488]	; (80084c0 <SX1276OnDio0Irq+0x2e0>)
 80082d6:	f7ff fd6f 	bl	8007db8 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80082da:	4b78      	ldr	r3, [pc, #480]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 80082dc:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80082e0:	b9bb      	cbnz	r3, 8008312 <SX1276OnDio0Irq+0x132>
                            TimerStop( &RxTimeoutSyncWord );
 80082e2:	487b      	ldr	r0, [pc, #492]	; (80084d0 <SX1276OnDio0Irq+0x2f0>)
 80082e4:	f7ff fd68 	bl	8007db8 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80082e8:	4b74      	ldr	r3, [pc, #464]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80082f0:	4b74      	ldr	r3, [pc, #464]	; (80084c4 <SX1276OnDio0Irq+0x2e4>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	b113      	cbz	r3, 80082fc <SX1276OnDio0Irq+0x11c>
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	b103      	cbz	r3, 80082fc <SX1276OnDio0Irq+0x11c>
                            RadioEvents->RxError( );
 80082fa:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80082fc:	4b6f      	ldr	r3, [pc, #444]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8008304:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008308:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800830c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                        break;
 8008310:	e779      	b.n	8008206 <SX1276OnDio0Irq+0x26>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8008312:	200d      	movs	r0, #13
 8008314:	f007 fe47 	bl	800ffa6 <SX1276Read>
 8008318:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800831c:	b2c9      	uxtb	r1, r1
 800831e:	200d      	movs	r0, #13
 8008320:	f007 fe35 	bl	800ff8e <SX1276Write>
 8008324:	e7e4      	b.n	80082f0 <SX1276OnDio0Irq+0x110>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8008326:	2032      	movs	r0, #50	; 0x32
 8008328:	f007 fe3d 	bl	800ffa6 <SX1276Read>
 800832c:	4b63      	ldr	r3, [pc, #396]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 800832e:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8008332:	e7ad      	b.n	8008290 <SX1276OnDio0Irq+0xb0>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008334:	4c61      	ldr	r4, [pc, #388]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 8008336:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 800833a:	1ac9      	subs	r1, r1, r3
 800833c:	b2c9      	uxtb	r1, r1
 800833e:	4863      	ldr	r0, [pc, #396]	; (80084cc <SX1276OnDio0Irq+0x2ec>)
 8008340:	4418      	add	r0, r3
 8008342:	f007 fde4 	bl	800ff0e <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008346:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 800834a:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 800834e:	485c      	ldr	r0, [pc, #368]	; (80084c0 <SX1276OnDio0Irq+0x2e0>)
 8008350:	f7ff fd32 	bl	8007db8 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8008354:	4b59      	ldr	r3, [pc, #356]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 8008356:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800835a:	b9f3      	cbnz	r3, 800839a <SX1276OnDio0Irq+0x1ba>
                    SX1276.Settings.State = RF_IDLE;
 800835c:	4b57      	ldr	r3, [pc, #348]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 800835e:	2200      	movs	r2, #0
 8008360:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 8008364:	485a      	ldr	r0, [pc, #360]	; (80084d0 <SX1276OnDio0Irq+0x2f0>)
 8008366:	f7ff fd27 	bl	8007db8 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800836a:	4b56      	ldr	r3, [pc, #344]	; (80084c4 <SX1276OnDio0Irq+0x2e4>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	b14b      	cbz	r3, 8008384 <SX1276OnDio0Irq+0x1a4>
 8008370:	689c      	ldr	r4, [r3, #8]
 8008372:	b13c      	cbz	r4, 8008384 <SX1276OnDio0Irq+0x1a4>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8008374:	4951      	ldr	r1, [pc, #324]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 8008376:	2300      	movs	r3, #0
 8008378:	f991 210e 	ldrsb.w	r2, [r1, #270]	; 0x10e
 800837c:	f8b1 1116 	ldrh.w	r1, [r1, #278]	; 0x116
 8008380:	4852      	ldr	r0, [pc, #328]	; (80084cc <SX1276OnDio0Irq+0x2ec>)
 8008382:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8008384:	4b4d      	ldr	r3, [pc, #308]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 8008386:	2200      	movs	r2, #0
 8008388:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800838c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008390:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                SX1276.Settings.FskPacketHandler.Size = 0;
 8008394:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                break;
 8008398:	e735      	b.n	8008206 <SX1276OnDio0Irq+0x26>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800839a:	200d      	movs	r0, #13
 800839c:	f007 fe03 	bl	800ffa6 <SX1276Read>
 80083a0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80083a4:	b2c9      	uxtb	r1, r1
 80083a6:	200d      	movs	r0, #13
 80083a8:	f007 fdf1 	bl	800ff8e <SX1276Write>
 80083ac:	e7dd      	b.n	800836a <SX1276OnDio0Irq+0x18a>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80083ae:	2019      	movs	r0, #25
 80083b0:	f007 fdf9 	bl	800ffa6 <SX1276Read>
 80083b4:	b243      	sxtb	r3, r0
 80083b6:	3302      	adds	r3, #2
 80083b8:	109b      	asrs	r3, r3, #2
 80083ba:	4c40      	ldr	r4, [pc, #256]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 80083bc:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80083c0:	201a      	movs	r0, #26
 80083c2:	f007 fdf0 	bl	800ffa6 <SX1276Read>
 80083c6:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80083c8:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
 80083cc:	2a00      	cmp	r2, #0
 80083ce:	db39      	blt.n	8008444 <SX1276OnDio0Irq+0x264>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80083d0:	4a3a      	ldr	r2, [pc, #232]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 80083d2:	f8d2 10e4 	ldr.w	r1, [r2, #228]	; 0xe4
 80083d6:	4a3f      	ldr	r2, [pc, #252]	; (80084d4 <SX1276OnDio0Irq+0x2f4>)
 80083d8:	4291      	cmp	r1, r2
 80083da:	d94c      	bls.n	8008476 <SX1276OnDio0Irq+0x296>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 80083dc:	eb00 1023 	add.w	r0, r0, r3, asr #4
 80083e0:	389d      	subs	r0, #157	; 0x9d
 80083e2:	4b36      	ldr	r3, [pc, #216]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 80083e4:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80083e8:	2013      	movs	r0, #19
 80083ea:	f007 fddc 	bl	800ffa6 <SX1276Read>
 80083ee:	4c33      	ldr	r4, [pc, #204]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 80083f0:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80083f4:	2010      	movs	r0, #16
 80083f6:	f007 fdd6 	bl	800ffa6 <SX1276Read>
 80083fa:	4601      	mov	r1, r0
 80083fc:	200d      	movs	r0, #13
 80083fe:	f007 fdc6 	bl	800ff8e <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8008402:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8008406:	4831      	ldr	r0, [pc, #196]	; (80084cc <SX1276OnDio0Irq+0x2ec>)
 8008408:	f007 fd81 	bl	800ff0e <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800840c:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 8008410:	b913      	cbnz	r3, 8008418 <SX1276OnDio0Irq+0x238>
                        SX1276.Settings.State = RF_IDLE;
 8008412:	2200      	movs	r2, #0
 8008414:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 8008418:	4829      	ldr	r0, [pc, #164]	; (80084c0 <SX1276OnDio0Irq+0x2e0>)
 800841a:	f7ff fccd 	bl	8007db8 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800841e:	4b29      	ldr	r3, [pc, #164]	; (80084c4 <SX1276OnDio0Irq+0x2e4>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f43f aeef 	beq.w	8008206 <SX1276OnDio0Irq+0x26>
 8008428:	689c      	ldr	r4, [r3, #8]
 800842a:	2c00      	cmp	r4, #0
 800842c:	f43f aeeb 	beq.w	8008206 <SX1276OnDio0Irq+0x26>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8008430:	4922      	ldr	r1, [pc, #136]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 8008432:	f991 313c 	ldrsb.w	r3, [r1, #316]	; 0x13c
 8008436:	f9b1 213e 	ldrsh.w	r2, [r1, #318]	; 0x13e
 800843a:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 800843e:	4823      	ldr	r0, [pc, #140]	; (80084cc <SX1276OnDio0Irq+0x2ec>)
 8008440:	47a0      	blx	r4
 8008442:	e6e0      	b.n	8008206 <SX1276OnDio0Irq+0x26>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008444:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8008448:	4922      	ldr	r1, [pc, #136]	; (80084d4 <SX1276OnDio0Irq+0x2f4>)
 800844a:	428c      	cmp	r4, r1
 800844c:	d909      	bls.n	8008462 <SX1276OnDio0Irq+0x282>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800844e:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8008452:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8008454:	fa12 f383 	uxtah	r3, r2, r3
 8008458:	3b9d      	subs	r3, #157	; 0x9d
 800845a:	4a18      	ldr	r2, [pc, #96]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 800845c:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 8008460:	e7c2      	b.n	80083e8 <SX1276OnDio0Irq+0x208>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8008462:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8008466:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8008468:	fa12 f383 	uxtah	r3, r2, r3
 800846c:	3ba4      	subs	r3, #164	; 0xa4
 800846e:	4a13      	ldr	r2, [pc, #76]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 8008470:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 8008474:	e7b8      	b.n	80083e8 <SX1276OnDio0Irq+0x208>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8008476:	eb00 1023 	add.w	r0, r0, r3, asr #4
 800847a:	38a4      	subs	r0, #164	; 0xa4
 800847c:	4b0f      	ldr	r3, [pc, #60]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 800847e:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 8008482:	e7b1      	b.n	80083e8 <SX1276OnDio0Irq+0x208>
            TimerStop( &TxTimeoutTimer );
 8008484:	4814      	ldr	r0, [pc, #80]	; (80084d8 <SX1276OnDio0Irq+0x2f8>)
 8008486:	f7ff fc97 	bl	8007db8 <TimerStop>
            switch( SX1276.Settings.Modem )
 800848a:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 800848c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008490:	2b01      	cmp	r3, #1
 8008492:	d00e      	beq.n	80084b2 <SX1276OnDio0Irq+0x2d2>
                SX1276.Settings.State = RF_IDLE;
 8008494:	4b09      	ldr	r3, [pc, #36]	; (80084bc <SX1276OnDio0Irq+0x2dc>)
 8008496:	2200      	movs	r2, #0
 8008498:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800849c:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <SX1276OnDio0Irq+0x2e4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f43f aeb0 	beq.w	8008206 <SX1276OnDio0Irq+0x26>
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f43f aeac 	beq.w	8008206 <SX1276OnDio0Irq+0x26>
                    RadioEvents->TxDone( );
 80084ae:	4798      	blx	r3
}
 80084b0:	e6a9      	b.n	8008206 <SX1276OnDio0Irq+0x26>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80084b2:	2108      	movs	r1, #8
 80084b4:	2012      	movs	r0, #18
 80084b6:	f007 fd6a 	bl	800ff8e <SX1276Write>
 80084ba:	e7eb      	b.n	8008494 <SX1276OnDio0Irq+0x2b4>
 80084bc:	20001240 	.word	0x20001240
 80084c0:	20001128 	.word	0x20001128
 80084c4:	2000110c 	.word	0x2000110c
 80084c8:	20001356 	.word	0x20001356
 80084cc:	20001140 	.word	0x20001140
 80084d0:	20001110 	.word	0x20001110
 80084d4:	1f4add40 	.word	0x1f4add40
 80084d8:	20001384 	.word	0x20001384

080084dc <RxChainCalibration>:
{
 80084dc:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80084de:	2009      	movs	r0, #9
 80084e0:	f007 fd61 	bl	800ffa6 <SX1276Read>
 80084e4:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80084e6:	2006      	movs	r0, #6
 80084e8:	f007 fd5d 	bl	800ffa6 <SX1276Read>
 80084ec:	0404      	lsls	r4, r0, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80084ee:	2007      	movs	r0, #7
 80084f0:	f007 fd59 	bl	800ffa6 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80084f4:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 80084f8:	2008      	movs	r0, #8
 80084fa:	f007 fd54 	bl	800ffa6 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80084fe:	4320      	orrs	r0, r4
 8008500:	f007 fc98 	bl	800fe34 <SX1276ConvertPllStepToFreqInHz>
 8008504:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 8008506:	2100      	movs	r1, #0
 8008508:	2009      	movs	r0, #9
 800850a:	f007 fd40 	bl	800ff8e <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800850e:	203b      	movs	r0, #59	; 0x3b
 8008510:	f007 fd49 	bl	800ffa6 <SX1276Read>
 8008514:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8008518:	b2c9      	uxtb	r1, r1
 800851a:	203b      	movs	r0, #59	; 0x3b
 800851c:	f007 fd37 	bl	800ff8e <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8008520:	203b      	movs	r0, #59	; 0x3b
 8008522:	f007 fd40 	bl	800ffa6 <SX1276Read>
 8008526:	f010 0f20 	tst.w	r0, #32
 800852a:	d1f9      	bne.n	8008520 <RxChainCalibration+0x44>
    SX1276SetChannel( 868000000 );
 800852c:	480c      	ldr	r0, [pc, #48]	; (8008560 <RxChainCalibration+0x84>)
 800852e:	f7ff fce9 	bl	8007f04 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8008532:	203b      	movs	r0, #59	; 0x3b
 8008534:	f007 fd37 	bl	800ffa6 <SX1276Read>
 8008538:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800853c:	b2c9      	uxtb	r1, r1
 800853e:	203b      	movs	r0, #59	; 0x3b
 8008540:	f007 fd25 	bl	800ff8e <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8008544:	203b      	movs	r0, #59	; 0x3b
 8008546:	f007 fd2e 	bl	800ffa6 <SX1276Read>
 800854a:	f010 0f20 	tst.w	r0, #32
 800854e:	d1f9      	bne.n	8008544 <RxChainCalibration+0x68>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8008550:	4629      	mov	r1, r5
 8008552:	2009      	movs	r0, #9
 8008554:	f007 fd1b 	bl	800ff8e <SX1276Write>
    SX1276SetChannel( initialFreq );
 8008558:	4620      	mov	r0, r4
 800855a:	f7ff fcd3 	bl	8007f04 <SX1276SetChannel>
}
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	33bca100 	.word	0x33bca100

08008564 <SX1276SetSleep>:
{
 8008564:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8008566:	480a      	ldr	r0, [pc, #40]	; (8008590 <SX1276SetSleep+0x2c>)
 8008568:	f7ff fc26 	bl	8007db8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800856c:	4809      	ldr	r0, [pc, #36]	; (8008594 <SX1276SetSleep+0x30>)
 800856e:	f7ff fc23 	bl	8007db8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8008572:	4809      	ldr	r0, [pc, #36]	; (8008598 <SX1276SetSleep+0x34>)
 8008574:	f7ff fc20 	bl	8007db8 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008578:	2000      	movs	r0, #0
 800857a:	f007 fd20 	bl	800ffbe <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
 800857e:	2000      	movs	r0, #0
 8008580:	f007 fbf1 	bl	800fd66 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 8008584:	4b05      	ldr	r3, [pc, #20]	; (800859c <SX1276SetSleep+0x38>)
 8008586:	2200      	movs	r2, #0
 8008588:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 800858c:	bd08      	pop	{r3, pc}
 800858e:	bf00      	nop
 8008590:	20001128 	.word	0x20001128
 8008594:	20001384 	.word	0x20001384
 8008598:	20001110 	.word	0x20001110
 800859c:	20001240 	.word	0x20001240

080085a0 <SX1276SetStby>:
{
 80085a0:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80085a2:	4808      	ldr	r0, [pc, #32]	; (80085c4 <SX1276SetStby+0x24>)
 80085a4:	f7ff fc08 	bl	8007db8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80085a8:	4807      	ldr	r0, [pc, #28]	; (80085c8 <SX1276SetStby+0x28>)
 80085aa:	f7ff fc05 	bl	8007db8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80085ae:	4807      	ldr	r0, [pc, #28]	; (80085cc <SX1276SetStby+0x2c>)
 80085b0:	f7ff fc02 	bl	8007db8 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80085b4:	2001      	movs	r0, #1
 80085b6:	f007 fd02 	bl	800ffbe <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80085ba:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <SX1276SetStby+0x30>)
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80085c2:	bd08      	pop	{r3, pc}
 80085c4:	20001128 	.word	0x20001128
 80085c8:	20001384 	.word	0x20001384
 80085cc:	20001110 	.word	0x20001110
 80085d0:	20001240 	.word	0x20001240

080085d4 <SX1276SetTx>:
{
 80085d4:	b510      	push	{r4, lr}
 80085d6:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 80085d8:	4829      	ldr	r0, [pc, #164]	; (8008680 <SX1276SetTx+0xac>)
 80085da:	f7ff fbed 	bl	8007db8 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80085de:	4621      	mov	r1, r4
 80085e0:	4828      	ldr	r0, [pc, #160]	; (8008684 <SX1276SetTx+0xb0>)
 80085e2:	f007 fbfc 	bl	800fdde <TimerSetValue>
    switch( SX1276.Settings.Modem )
 80085e6:	4b28      	ldr	r3, [pc, #160]	; (8008688 <SX1276SetTx+0xb4>)
 80085e8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80085ec:	b163      	cbz	r3, 8008608 <SX1276SetTx+0x34>
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d023      	beq.n	800863a <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 80085f2:	4b25      	ldr	r3, [pc, #148]	; (8008688 <SX1276SetTx+0xb4>)
 80085f4:	2202      	movs	r2, #2
 80085f6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 80085fa:	4822      	ldr	r0, [pc, #136]	; (8008684 <SX1276SetTx+0xb0>)
 80085fc:	f7ff fb62 	bl	8007cc4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8008600:	2003      	movs	r0, #3
 8008602:	f007 fcdc 	bl	800ffbe <SX1276SetOpMode>
}
 8008606:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008608:	2040      	movs	r0, #64	; 0x40
 800860a:	f007 fccc 	bl	800ffa6 <SX1276Read>
 800860e:	f000 0103 	and.w	r1, r0, #3
 8008612:	2040      	movs	r0, #64	; 0x40
 8008614:	f007 fcbb 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8008618:	2041      	movs	r0, #65	; 0x41
 800861a:	f007 fcc4 	bl	800ffa6 <SX1276Read>
 800861e:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 8008622:	2041      	movs	r0, #65	; 0x41
 8008624:	f007 fcb3 	bl	800ff8e <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8008628:	2035      	movs	r0, #53	; 0x35
 800862a:	f007 fcbc 	bl	800ffa6 <SX1276Read>
 800862e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008632:	4b15      	ldr	r3, [pc, #84]	; (8008688 <SX1276SetTx+0xb4>)
 8008634:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
        break;
 8008638:	e7db      	b.n	80085f2 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800863a:	4b13      	ldr	r3, [pc, #76]	; (8008688 <SX1276SetTx+0xb4>)
 800863c:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008640:	b173      	cbz	r3, 8008660 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8008642:	21f5      	movs	r1, #245	; 0xf5
 8008644:	2011      	movs	r0, #17
 8008646:	f007 fca2 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800864a:	2040      	movs	r0, #64	; 0x40
 800864c:	f007 fcab 	bl	800ffa6 <SX1276Read>
 8008650:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8008654:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008658:	2040      	movs	r0, #64	; 0x40
 800865a:	f007 fc98 	bl	800ff8e <SX1276Write>
 800865e:	e7c8      	b.n	80085f2 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8008660:	21f7      	movs	r1, #247	; 0xf7
 8008662:	2011      	movs	r0, #17
 8008664:	f007 fc93 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8008668:	2040      	movs	r0, #64	; 0x40
 800866a:	f007 fc9c 	bl	800ffa6 <SX1276Read>
 800866e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8008672:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008676:	2040      	movs	r0, #64	; 0x40
 8008678:	f007 fc89 	bl	800ff8e <SX1276Write>
 800867c:	e7b9      	b.n	80085f2 <SX1276SetTx+0x1e>
 800867e:	bf00      	nop
 8008680:	20001128 	.word	0x20001128
 8008684:	20001384 	.word	0x20001384
 8008688:	20001240 	.word	0x20001240

0800868c <SX1276Send>:
{
 800868c:	b530      	push	{r4, r5, lr}
 800868e:	b083      	sub	sp, #12
 8008690:	4604      	mov	r4, r0
 8008692:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 8008696:	4b44      	ldr	r3, [pc, #272]	; (80087a8 <SX1276Send+0x11c>)
 8008698:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800869c:	b133      	cbz	r3, 80086ac <SX1276Send+0x20>
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d03a      	beq.n	8008718 <SX1276Send+0x8c>
 80086a2:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 80086a4:	f7ff ff96 	bl	80085d4 <SX1276SetTx>
}
 80086a8:	b003      	add	sp, #12
 80086aa:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80086ac:	4b3e      	ldr	r3, [pc, #248]	; (80087a8 <SX1276Send+0x11c>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 80086b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80086b8:	f8a3 1116 	strh.w	r1, [r3, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
 80086bc:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80086c0:	b9eb      	cbnz	r3, 80086fe <SX1276Send+0x72>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 80086c2:	2101      	movs	r1, #1
 80086c4:	f10d 0007 	add.w	r0, sp, #7
 80086c8:	f007 fc28 	bl	800ff1c <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 80086cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80086d0:	1e53      	subs	r3, r2, #1
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b3f      	cmp	r3, #63	; 0x3f
 80086d6:	d816      	bhi.n	8008706 <SX1276Send+0x7a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80086d8:	4b33      	ldr	r3, [pc, #204]	; (80087a8 <SX1276Send+0x11c>)
 80086da:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 80086de:	4d32      	ldr	r5, [pc, #200]	; (80087a8 <SX1276Send+0x11c>)
 80086e0:	f895 111b 	ldrb.w	r1, [r5, #283]	; 0x11b
 80086e4:	4620      	mov	r0, r4
 80086e6:	f007 fc19 	bl	800ff1c <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80086ea:	f895 311b 	ldrb.w	r3, [r5, #283]	; 0x11b
 80086ee:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 80086f2:	4413      	add	r3, r2
 80086f4:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80086f8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
        break;
 80086fc:	e7d2      	b.n	80086a4 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 80086fe:	2032      	movs	r0, #50	; 0x32
 8008700:	f007 fc45 	bl	800ff8e <SX1276Write>
 8008704:	e7e2      	b.n	80086cc <SX1276Send+0x40>
                memcpy1( RxTxBuffer, buffer, size );
 8008706:	4621      	mov	r1, r4
 8008708:	4828      	ldr	r0, [pc, #160]	; (80087ac <SX1276Send+0x120>)
 800870a:	f007 fb3e 	bl	800fd8a <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800870e:	4b26      	ldr	r3, [pc, #152]	; (80087a8 <SX1276Send+0x11c>)
 8008710:	2220      	movs	r2, #32
 8008712:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8008716:	e7e2      	b.n	80086de <SX1276Send+0x52>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008718:	4b23      	ldr	r3, [pc, #140]	; (80087a8 <SX1276Send+0x11c>)
 800871a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800871e:	b353      	cbz	r3, 8008776 <SX1276Send+0xea>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8008720:	2033      	movs	r0, #51	; 0x33
 8008722:	f007 fc40 	bl	800ffa6 <SX1276Read>
 8008726:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 800872a:	2033      	movs	r0, #51	; 0x33
 800872c:	f007 fc2f 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8008730:	2119      	movs	r1, #25
 8008732:	203b      	movs	r0, #59	; 0x3b
 8008734:	f007 fc2b 	bl	800ff8e <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8008738:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800873c:	4b1a      	ldr	r3, [pc, #104]	; (80087a8 <SX1276Send+0x11c>)
 800873e:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8008742:	2022      	movs	r0, #34	; 0x22
 8008744:	f007 fc23 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8008748:	2100      	movs	r1, #0
 800874a:	200e      	movs	r0, #14
 800874c:	f007 fc1f 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8008750:	2100      	movs	r1, #0
 8008752:	200d      	movs	r0, #13
 8008754:	f007 fc1b 	bl	800ff8e <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8008758:	2001      	movs	r0, #1
 800875a:	f007 fc24 	bl	800ffa6 <SX1276Read>
 800875e:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8008762:	d01a      	beq.n	800879a <SX1276Send+0x10e>
            SX1276WriteFifo( buffer, size );
 8008764:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008768:	4620      	mov	r0, r4
 800876a:	f007 fbd7 	bl	800ff1c <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800876e:	4b0e      	ldr	r3, [pc, #56]	; (80087a8 <SX1276Send+0x11c>)
 8008770:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
        break;
 8008774:	e796      	b.n	80086a4 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8008776:	2033      	movs	r0, #51	; 0x33
 8008778:	f007 fc15 	bl	800ffa6 <SX1276Read>
 800877c:	b241      	sxtb	r1, r0
 800877e:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8008782:	f041 0101 	orr.w	r1, r1, #1
 8008786:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 800878a:	2033      	movs	r0, #51	; 0x33
 800878c:	f007 fbff 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8008790:	211d      	movs	r1, #29
 8008792:	203b      	movs	r0, #59	; 0x3b
 8008794:	f007 fbfb 	bl	800ff8e <SX1276Write>
 8008798:	e7ce      	b.n	8008738 <SX1276Send+0xac>
                SX1276SetStby( );
 800879a:	f7ff ff01 	bl	80085a0 <SX1276SetStby>
                DelayMs( 1 );
 800879e:	2001      	movs	r0, #1
 80087a0:	f007 fb44 	bl	800fe2c <DelayMs>
 80087a4:	e7de      	b.n	8008764 <SX1276Send+0xd8>
 80087a6:	bf00      	nop
 80087a8:	20001240 	.word	0x20001240
 80087ac:	20001140 	.word	0x20001140

080087b0 <SX1276SetRx>:
{
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	4604      	mov	r4, r0
    TimerStop( &TxTimeoutTimer );
 80087b4:	489d      	ldr	r0, [pc, #628]	; (8008a2c <SX1276SetRx+0x27c>)
 80087b6:	f7ff faff 	bl	8007db8 <TimerStop>
    switch( SX1276.Settings.Modem )
 80087ba:	4b9d      	ldr	r3, [pc, #628]	; (8008a30 <SX1276SetRx+0x280>)
 80087bc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80087c0:	b1e3      	cbz	r3, 80087fc <SX1276SetRx+0x4c>
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d045      	beq.n	8008852 <SX1276SetRx+0xa2>
 80087c6:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 80087c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087cc:	2100      	movs	r1, #0
 80087ce:	4899      	ldr	r0, [pc, #612]	; (8008a34 <SX1276SetRx+0x284>)
 80087d0:	f008 fa89 	bl	8010ce6 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 80087d4:	4b96      	ldr	r3, [pc, #600]	; (8008a30 <SX1276SetRx+0x280>)
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if( timeout != 0 )
 80087dc:	2c00      	cmp	r4, #0
 80087de:	f040 8107 	bne.w	80089f0 <SX1276SetRx+0x240>
    if( SX1276.Settings.Modem == MODEM_FSK )
 80087e2:	4b93      	ldr	r3, [pc, #588]	; (8008a30 <SX1276SetRx+0x280>)
 80087e4:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 810a 	beq.w	8008a02 <SX1276SetRx+0x252>
        if( rxContinuous == true )
 80087ee:	2e00      	cmp	r6, #0
 80087f0:	f000 8118 	beq.w	8008a24 <SX1276SetRx+0x274>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80087f4:	2005      	movs	r0, #5
 80087f6:	f007 fbe2 	bl	800ffbe <SX1276SetOpMode>
}
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80087fc:	4d8c      	ldr	r5, [pc, #560]	; (8008a30 <SX1276SetRx+0x280>)
 80087fe:	f895 6102 	ldrb.w	r6, [r5, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008802:	2040      	movs	r0, #64	; 0x40
 8008804:	f007 fbcf 	bl	800ffa6 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8008808:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800880c:	f041 010c 	orr.w	r1, r1, #12
 8008810:	2040      	movs	r0, #64	; 0x40
 8008812:	f007 fbbc 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8008816:	2041      	movs	r0, #65	; 0x41
 8008818:	f007 fbc5 	bl	800ffa6 <SX1276Read>
 800881c:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8008820:	b2c9      	uxtb	r1, r1
 8008822:	2041      	movs	r0, #65	; 0x41
 8008824:	f007 fbb3 	bl	800ff8e <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8008828:	2035      	movs	r0, #53	; 0x35
 800882a:	f007 fbbc 	bl	800ffa6 <SX1276Read>
 800882e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008832:	f885 011a 	strb.w	r0, [r5, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8008836:	211e      	movs	r1, #30
 8008838:	200d      	movs	r0, #13
 800883a:	f007 fba8 	bl	800ff8e <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800883e:	2300      	movs	r3, #0
 8008840:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8008844:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008848:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 800884c:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
        break;
 8008850:	e7ba      	b.n	80087c8 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008852:	4b77      	ldr	r3, [pc, #476]	; (8008a30 <SX1276SetRx+0x280>)
 8008854:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008858:	b353      	cbz	r3, 80088b0 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800885a:	2033      	movs	r0, #51	; 0x33
 800885c:	f007 fba3 	bl	800ffa6 <SX1276Read>
 8008860:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8008864:	b2c9      	uxtb	r1, r1
 8008866:	2033      	movs	r0, #51	; 0x33
 8008868:	f007 fb91 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800886c:	2119      	movs	r1, #25
 800886e:	203b      	movs	r0, #59	; 0x3b
 8008870:	f007 fb8d 	bl	800ff8e <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8008874:	4b6e      	ldr	r3, [pc, #440]	; (8008a30 <SX1276SetRx+0x280>)
 8008876:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800887a:	2b08      	cmp	r3, #8
 800887c:	f200 8087 	bhi.w	800898e <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8008880:	2031      	movs	r0, #49	; 0x31
 8008882:	f007 fb90 	bl	800ffa6 <SX1276Read>
 8008886:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800888a:	2031      	movs	r0, #49	; 0x31
 800888c:	f007 fb7f 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8008890:	2100      	movs	r1, #0
 8008892:	2030      	movs	r0, #48	; 0x30
 8008894:	f007 fb7b 	bl	800ff8e <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8008898:	4b65      	ldr	r3, [pc, #404]	; (8008a30 <SX1276SetRx+0x280>)
 800889a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800889e:	2b08      	cmp	r3, #8
 80088a0:	d87e      	bhi.n	80089a0 <SX1276SetRx+0x1f0>
 80088a2:	e8df f003 	tbb	[pc, r3]
 80088a6:	2417      	.short	0x2417
 80088a8:	584b3e31 	.word	0x584b3e31
 80088ac:	6a65      	.short	0x6a65
 80088ae:	6f          	.byte	0x6f
 80088af:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80088b0:	2033      	movs	r0, #51	; 0x33
 80088b2:	f007 fb78 	bl	800ffa6 <SX1276Read>
 80088b6:	b241      	sxtb	r1, r0
 80088b8:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 80088bc:	f041 0101 	orr.w	r1, r1, #1
 80088c0:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 80088c4:	2033      	movs	r0, #51	; 0x33
 80088c6:	f007 fb62 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80088ca:	211d      	movs	r1, #29
 80088cc:	203b      	movs	r0, #59	; 0x3b
 80088ce:	f007 fb5e 	bl	800ff8e <SX1276Write>
 80088d2:	e7cf      	b.n	8008874 <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 80088d4:	2148      	movs	r1, #72	; 0x48
 80088d6:	202f      	movs	r0, #47	; 0x2f
 80088d8:	f007 fb59 	bl	800ff8e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80088dc:	4b54      	ldr	r3, [pc, #336]	; (8008a30 <SX1276SetRx+0x280>)
 80088de:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 80088e2:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 80088e6:	3002      	adds	r0, #2
 80088e8:	f7ff fb0c 	bl	8007f04 <SX1276SetChannel>
                    break;
 80088ec:	e058      	b.n	80089a0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80088ee:	2144      	movs	r1, #68	; 0x44
 80088f0:	202f      	movs	r0, #47	; 0x2f
 80088f2:	f007 fb4c 	bl	800ff8e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80088f6:	4b4e      	ldr	r3, [pc, #312]	; (8008a30 <SX1276SetRx+0x280>)
 80088f8:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 80088fc:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8008900:	3034      	adds	r0, #52	; 0x34
 8008902:	f7ff faff 	bl	8007f04 <SX1276SetChannel>
                    break;
 8008906:	e04b      	b.n	80089a0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008908:	2144      	movs	r1, #68	; 0x44
 800890a:	202f      	movs	r0, #47	; 0x2f
 800890c:	f007 fb3f 	bl	800ff8e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8008910:	4b47      	ldr	r3, [pc, #284]	; (8008a30 <SX1276SetRx+0x280>)
 8008912:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008916:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 800891a:	3004      	adds	r0, #4
 800891c:	f7ff faf2 	bl	8007f04 <SX1276SetChannel>
                    break;
 8008920:	e03e      	b.n	80089a0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008922:	2144      	movs	r1, #68	; 0x44
 8008924:	202f      	movs	r0, #47	; 0x2f
 8008926:	f007 fb32 	bl	800ff8e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 800892a:	4b41      	ldr	r3, [pc, #260]	; (8008a30 <SX1276SetRx+0x280>)
 800892c:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008930:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8008934:	305e      	adds	r0, #94	; 0x5e
 8008936:	f7ff fae5 	bl	8007f04 <SX1276SetChannel>
                    break;
 800893a:	e031      	b.n	80089a0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800893c:	2144      	movs	r1, #68	; 0x44
 800893e:	202f      	movs	r0, #47	; 0x2f
 8008940:	f007 fb25 	bl	800ff8e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8008944:	4b3a      	ldr	r3, [pc, #232]	; (8008a30 <SX1276SetRx+0x280>)
 8008946:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 800894a:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 800894e:	3012      	adds	r0, #18
 8008950:	f7ff fad8 	bl	8007f04 <SX1276SetChannel>
                    break;
 8008954:	e024      	b.n	80089a0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008956:	2144      	movs	r1, #68	; 0x44
 8008958:	202f      	movs	r0, #47	; 0x2f
 800895a:	f007 fb18 	bl	800ff8e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800895e:	4b34      	ldr	r3, [pc, #208]	; (8008a30 <SX1276SetRx+0x280>)
 8008960:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008964:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8008968:	30c6      	adds	r0, #198	; 0xc6
 800896a:	f7ff facb 	bl	8007f04 <SX1276SetChannel>
                    break;
 800896e:	e017      	b.n	80089a0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008970:	2140      	movs	r1, #64	; 0x40
 8008972:	202f      	movs	r0, #47	; 0x2f
 8008974:	f007 fb0b 	bl	800ff8e <SX1276Write>
                    break;
 8008978:	e012      	b.n	80089a0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800897a:	2140      	movs	r1, #64	; 0x40
 800897c:	202f      	movs	r0, #47	; 0x2f
 800897e:	f007 fb06 	bl	800ff8e <SX1276Write>
                    break;
 8008982:	e00d      	b.n	80089a0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008984:	2140      	movs	r1, #64	; 0x40
 8008986:	202f      	movs	r0, #47	; 0x2f
 8008988:	f007 fb01 	bl	800ff8e <SX1276Write>
                    break;
 800898c:	e008      	b.n	80089a0 <SX1276SetRx+0x1f0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800898e:	2031      	movs	r0, #49	; 0x31
 8008990:	f007 fb09 	bl	800ffa6 <SX1276Read>
 8008994:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8008998:	b2c9      	uxtb	r1, r1
 800899a:	2031      	movs	r0, #49	; 0x31
 800899c:	f007 faf7 	bl	800ff8e <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80089a0:	4b23      	ldr	r3, [pc, #140]	; (8008a30 <SX1276SetRx+0x280>)
 80089a2:	f893 6132 	ldrb.w	r6, [r3, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80089a6:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80089aa:	b1a3      	cbz	r3, 80089d6 <SX1276SetRx+0x226>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80089ac:	211d      	movs	r1, #29
 80089ae:	2011      	movs	r0, #17
 80089b0:	f007 faed 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80089b4:	2040      	movs	r0, #64	; 0x40
 80089b6:	f007 faf6 	bl	800ffa6 <SX1276Read>
 80089ba:	f000 0133 	and.w	r1, r0, #51	; 0x33
 80089be:	2040      	movs	r0, #64	; 0x40
 80089c0:	f007 fae5 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 80089c4:	2100      	movs	r1, #0
 80089c6:	200f      	movs	r0, #15
 80089c8:	f007 fae1 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80089cc:	2100      	movs	r1, #0
 80089ce:	200d      	movs	r0, #13
 80089d0:	f007 fadd 	bl	800ff8e <SX1276Write>
        break;
 80089d4:	e6f8      	b.n	80087c8 <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80089d6:	211f      	movs	r1, #31
 80089d8:	2011      	movs	r0, #17
 80089da:	f007 fad8 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80089de:	2040      	movs	r0, #64	; 0x40
 80089e0:	f007 fae1 	bl	800ffa6 <SX1276Read>
 80089e4:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 80089e8:	2040      	movs	r0, #64	; 0x40
 80089ea:	f007 fad0 	bl	800ff8e <SX1276Write>
 80089ee:	e7e9      	b.n	80089c4 <SX1276SetRx+0x214>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80089f0:	4d11      	ldr	r5, [pc, #68]	; (8008a38 <SX1276SetRx+0x288>)
 80089f2:	4621      	mov	r1, r4
 80089f4:	4628      	mov	r0, r5
 80089f6:	f007 f9f2 	bl	800fdde <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80089fa:	4628      	mov	r0, r5
 80089fc:	f7ff f962 	bl	8007cc4 <TimerStart>
 8008a00:	e6ef      	b.n	80087e2 <SX1276SetRx+0x32>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8008a02:	2005      	movs	r0, #5
 8008a04:	f007 fadb 	bl	800ffbe <SX1276SetOpMode>
        if( rxContinuous == false )
 8008a08:	2e00      	cmp	r6, #0
 8008a0a:	f47f aef6 	bne.w	80087fa <SX1276SetRx+0x4a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8008a0e:	4c0b      	ldr	r4, [pc, #44]	; (8008a3c <SX1276SetRx+0x28c>)
 8008a10:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <SX1276SetRx+0x280>)
 8008a12:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8008a16:	4620      	mov	r0, r4
 8008a18:	f007 f9e1 	bl	800fdde <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f7ff f951 	bl	8007cc4 <TimerStart>
 8008a22:	e6ea      	b.n	80087fa <SX1276SetRx+0x4a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8008a24:	2006      	movs	r0, #6
 8008a26:	f007 faca 	bl	800ffbe <SX1276SetOpMode>
}
 8008a2a:	e6e6      	b.n	80087fa <SX1276SetRx+0x4a>
 8008a2c:	20001384 	.word	0x20001384
 8008a30:	20001240 	.word	0x20001240
 8008a34:	20001140 	.word	0x20001140
 8008a38:	20001128 	.word	0x20001128
 8008a3c:	20001110 	.word	0x20001110

08008a40 <SX1276ReadRssi>:
{
 8008a40:	b508      	push	{r3, lr}
    switch( modem )
 8008a42:	b120      	cbz	r0, 8008a4e <SX1276ReadRssi+0xe>
 8008a44:	2801      	cmp	r0, #1
 8008a46:	d00a      	beq.n	8008a5e <SX1276ReadRssi+0x1e>
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008a4c:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8008a4e:	2011      	movs	r0, #17
 8008a50:	f007 faa9 	bl	800ffa6 <SX1276Read>
 8008a54:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8008a58:	4240      	negs	r0, r0
 8008a5a:	b200      	sxth	r0, r0
        break;
 8008a5c:	e7f6      	b.n	8008a4c <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008a5e:	4b0a      	ldr	r3, [pc, #40]	; (8008a88 <SX1276ReadRssi+0x48>)
 8008a60:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8008a64:	4b09      	ldr	r3, [pc, #36]	; (8008a8c <SX1276ReadRssi+0x4c>)
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d906      	bls.n	8008a78 <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8008a6a:	201b      	movs	r0, #27
 8008a6c:	f007 fa9b 	bl	800ffa6 <SX1276Read>
 8008a70:	b280      	uxth	r0, r0
 8008a72:	389d      	subs	r0, #157	; 0x9d
 8008a74:	b200      	sxth	r0, r0
 8008a76:	e7e9      	b.n	8008a4c <SX1276ReadRssi+0xc>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8008a78:	201b      	movs	r0, #27
 8008a7a:	f007 fa94 	bl	800ffa6 <SX1276Read>
 8008a7e:	b280      	uxth	r0, r0
 8008a80:	38a4      	subs	r0, #164	; 0xa4
 8008a82:	b200      	sxth	r0, r0
 8008a84:	e7e2      	b.n	8008a4c <SX1276ReadRssi+0xc>
 8008a86:	bf00      	nop
 8008a88:	20001240 	.word	0x20001240
 8008a8c:	1f4add40 	.word	0x1f4add40

08008a90 <SX1276SetModem>:
{
 8008a90:	b510      	push	{r4, lr}
 8008a92:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8008a94:	2001      	movs	r0, #1
 8008a96:	f007 fa86 	bl	800ffa6 <SX1276Read>
 8008a9a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008a9e:	d121      	bne.n	8008ae4 <SX1276SetModem+0x54>
        SX1276.Settings.Modem = MODEM_FSK;
 8008aa0:	4b1d      	ldr	r3, [pc, #116]	; (8008b18 <SX1276SetModem+0x88>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    if( SX1276.Settings.Modem == modem )
 8008aa8:	4b1b      	ldr	r3, [pc, #108]	; (8008b18 <SX1276SetModem+0x88>)
 8008aaa:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008aae:	42a3      	cmp	r3, r4
 8008ab0:	d017      	beq.n	8008ae2 <SX1276SetModem+0x52>
    SX1276.Settings.Modem = modem;
 8008ab2:	4b19      	ldr	r3, [pc, #100]	; (8008b18 <SX1276SetModem+0x88>)
 8008ab4:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 8008ab8:	2c01      	cmp	r4, #1
 8008aba:	d018      	beq.n	8008aee <SX1276SetModem+0x5e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008abc:	2000      	movs	r0, #0
 8008abe:	f007 fa7e 	bl	800ffbe <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8008ac2:	2001      	movs	r0, #1
 8008ac4:	f007 fa6f 	bl	800ffa6 <SX1276Read>
 8008ac8:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8008acc:	2001      	movs	r0, #1
 8008ace:	f007 fa5e 	bl	800ff8e <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	2040      	movs	r0, #64	; 0x40
 8008ad6:	f007 fa5a 	bl	800ff8e <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8008ada:	2130      	movs	r1, #48	; 0x30
 8008adc:	2041      	movs	r0, #65	; 0x41
 8008ade:	f007 fa56 	bl	800ff8e <SX1276Write>
}
 8008ae2:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 8008ae4:	4b0c      	ldr	r3, [pc, #48]	; (8008b18 <SX1276SetModem+0x88>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8008aec:	e7dc      	b.n	8008aa8 <SX1276SetModem+0x18>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008aee:	2000      	movs	r0, #0
 8008af0:	f007 fa65 	bl	800ffbe <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8008af4:	2001      	movs	r0, #1
 8008af6:	f007 fa56 	bl	800ffa6 <SX1276Read>
 8008afa:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8008afe:	b2c9      	uxtb	r1, r1
 8008b00:	2001      	movs	r0, #1
 8008b02:	f007 fa44 	bl	800ff8e <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8008b06:	2100      	movs	r1, #0
 8008b08:	2040      	movs	r0, #64	; 0x40
 8008b0a:	f007 fa40 	bl	800ff8e <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8008b0e:	2100      	movs	r1, #0
 8008b10:	2041      	movs	r0, #65	; 0x41
 8008b12:	f007 fa3c 	bl	800ff8e <SX1276Write>
        break;
 8008b16:	e7e4      	b.n	8008ae2 <SX1276SetModem+0x52>
 8008b18:	20001240 	.word	0x20001240

08008b1c <SX1276Init>:
{
 8008b1c:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 8008b1e:	4b19      	ldr	r3, [pc, #100]	; (8008b84 <SX1276Init+0x68>)
 8008b20:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8008b22:	4c19      	ldr	r4, [pc, #100]	; (8008b88 <SX1276Init+0x6c>)
 8008b24:	4621      	mov	r1, r4
 8008b26:	4819      	ldr	r0, [pc, #100]	; (8008b8c <SX1276Init+0x70>)
 8008b28:	f007 f950 	bl	800fdcc <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4818      	ldr	r0, [pc, #96]	; (8008b90 <SX1276Init+0x74>)
 8008b30:	f007 f94c 	bl	800fdcc <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8008b34:	4621      	mov	r1, r4
 8008b36:	4817      	ldr	r0, [pc, #92]	; (8008b94 <SX1276Init+0x78>)
 8008b38:	f007 f948 	bl	800fdcc <TimerInit>
    SX1276Reset( );
 8008b3c:	f7fe fd38 	bl	80075b0 <SX1276Reset>
    RxChainCalibration( );
 8008b40:	f7ff fccc 	bl	80084dc <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008b44:	2000      	movs	r0, #0
 8008b46:	f007 fa3a 	bl	800ffbe <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
 8008b4a:	4813      	ldr	r0, [pc, #76]	; (8008b98 <SX1276Init+0x7c>)
 8008b4c:	f7fe fd64 	bl	8007618 <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8008b50:	2400      	movs	r4, #0
 8008b52:	e00c      	b.n	8008b6e <SX1276Init+0x52>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8008b54:	4a11      	ldr	r2, [pc, #68]	; (8008b9c <SX1276Init+0x80>)
 8008b56:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008b5a:	18d5      	adds	r5, r2, r3
 8008b5c:	5cd0      	ldrb	r0, [r2, r3]
 8008b5e:	f7ff ff97 	bl	8008a90 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8008b62:	78a9      	ldrb	r1, [r5, #2]
 8008b64:	7868      	ldrb	r0, [r5, #1]
 8008b66:	f007 fa12 	bl	800ff8e <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8008b6a:	3401      	adds	r4, #1
 8008b6c:	b2e4      	uxtb	r4, r4
 8008b6e:	2c0f      	cmp	r4, #15
 8008b70:	d9f0      	bls.n	8008b54 <SX1276Init+0x38>
    SX1276SetModem( MODEM_FSK );
 8008b72:	2000      	movs	r0, #0
 8008b74:	f7ff ff8c 	bl	8008a90 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8008b78:	4b09      	ldr	r3, [pc, #36]	; (8008ba0 <SX1276Init+0x84>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8008b80:	bd38      	pop	{r3, r4, r5, pc}
 8008b82:	bf00      	nop
 8008b84:	2000110c 	.word	0x2000110c
 8008b88:	0800919d 	.word	0x0800919d
 8008b8c:	20001384 	.word	0x20001384
 8008b90:	20001128 	.word	0x20001128
 8008b94:	20001110 	.word	0x20001110
 8008b98:	2000034c 	.word	0x2000034c
 8008b9c:	08012e64 	.word	0x08012e64
 8008ba0:	20001240 	.word	0x20001240

08008ba4 <SX1276SetRxConfig>:
{
 8008ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	b085      	sub	sp, #20
 8008baa:	4604      	mov	r4, r0
 8008bac:	9101      	str	r1, [sp, #4]
 8008bae:	4615      	mov	r5, r2
 8008bb0:	9303      	str	r3, [sp, #12]
 8008bb2:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 8008bb6:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8008bba:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8008bbe:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8008bc2:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8008bc6:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8008bca:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8008bce:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
 8008bd0:	f7ff ff5e 	bl	8008a90 <SX1276SetModem>
    switch( modem )
 8008bd4:	b124      	cbz	r4, 8008be0 <SX1276SetRxConfig+0x3c>
 8008bd6:	2c01      	cmp	r4, #1
 8008bd8:	d069      	beq.n	8008cae <SX1276SetRxConfig+0x10a>
}
 8008bda:	b005      	add	sp, #20
 8008bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8008be0:	4ba0      	ldr	r3, [pc, #640]	; (8008e64 <SX1276SetRxConfig+0x2c0>)
 8008be2:	9c01      	ldr	r4, [sp, #4]
 8008be4:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8008be8:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8008bec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bee:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 8008bf2:	f883 70fe 	strb.w	r7, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8008bf6:	f883 90ff 	strb.w	r9, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8008bfa:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8008bfe:	f883 b101 	strb.w	fp, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8008c02:	9a02      	ldr	r2, [sp, #8]
 8008c04:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8008c08:	f8a3 80fc 	strh.w	r8, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8008c0c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008c10:	fb02 fa0a 	mul.w	sl, r2, sl
 8008c14:	fbba f2f5 	udiv	r2, sl, r5
 8008c18:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8008c1c:	4b92      	ldr	r3, [pc, #584]	; (8008e68 <SX1276SetRxConfig+0x2c4>)
 8008c1e:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8008c22:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8008c26:	2002      	movs	r0, #2
 8008c28:	f007 f9b1 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8008c2c:	b2e9      	uxtb	r1, r5
 8008c2e:	2003      	movs	r0, #3
 8008c30:	f007 f9ad 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8008c34:	4620      	mov	r0, r4
 8008c36:	f7ff f913 	bl	8007e60 <GetFskBandwidthRegValue>
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	2012      	movs	r0, #18
 8008c3e:	f007 f9a6 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8008c42:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008c44:	f7ff f90c 	bl	8007e60 <GetFskBandwidthRegValue>
 8008c48:	4601      	mov	r1, r0
 8008c4a:	2013      	movs	r0, #19
 8008c4c:	f007 f99f 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8008c50:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8008c54:	2025      	movs	r0, #37	; 0x25
 8008c56:	f007 f99a 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8008c5a:	fa5f f188 	uxtb.w	r1, r8
 8008c5e:	2026      	movs	r0, #38	; 0x26
 8008c60:	f007 f995 	bl	800ff8e <SX1276Write>
            if( fixLen == 1 )
 8008c64:	b1df      	cbz	r7, 8008c9e <SX1276SetRxConfig+0xfa>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8008c66:	4649      	mov	r1, r9
 8008c68:	2032      	movs	r0, #50	; 0x32
 8008c6a:	f007 f990 	bl	800ff8e <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8008c6e:	2030      	movs	r0, #48	; 0x30
 8008c70:	f007 f999 	bl	800ffa6 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8008c74:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8008c78:	b1b7      	cbz	r7, 8008ca8 <SX1276SetRxConfig+0x104>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8008c7e:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8008c82:	b2c9      	uxtb	r1, r1
 8008c84:	2030      	movs	r0, #48	; 0x30
 8008c86:	f007 f982 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8008c8a:	2031      	movs	r0, #49	; 0x31
 8008c8c:	f007 f98b 	bl	800ffa6 <SX1276Read>
 8008c90:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8008c94:	b2c9      	uxtb	r1, r1
 8008c96:	2031      	movs	r0, #49	; 0x31
 8008c98:	f007 f979 	bl	800ff8e <SX1276Write>
        break;
 8008c9c:	e79d      	b.n	8008bda <SX1276SetRxConfig+0x36>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8008c9e:	21ff      	movs	r1, #255	; 0xff
 8008ca0:	2032      	movs	r0, #50	; 0x32
 8008ca2:	f007 f974 	bl	800ff8e <SX1276Write>
 8008ca6:	e7e2      	b.n	8008c6e <SX1276SetRxConfig+0xca>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8008ca8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8008cac:	e7e6      	b.n	8008c7c <SX1276SetRxConfig+0xd8>
            if( bandwidth > 2 )
 8008cae:	9b01      	ldr	r3, [sp, #4]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d900      	bls.n	8008cb6 <SX1276SetRxConfig+0x112>
                while( 1 );
 8008cb4:	e7fe      	b.n	8008cb4 <SX1276SetRxConfig+0x110>
            bandwidth += 7;
 8008cb6:	9c01      	ldr	r4, [sp, #4]
 8008cb8:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8008cba:	4b6a      	ldr	r3, [pc, #424]	; (8008e64 <SX1276SetRxConfig+0x2c0>)
 8008cbc:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8008cc0:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8008cc4:	9a03      	ldr	r2, [sp, #12]
 8008cc6:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8008cca:	f8a3 812a 	strh.w	r8, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8008cce:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8008cd2:	f883 912d 	strb.w	r9, [r3, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8008cd6:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8008cda:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8008cde:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8008ce2:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8008ce6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8008cea:	f883 b131 	strb.w	fp, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8008cee:	9a02      	ldr	r2, [sp, #8]
 8008cf0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            if( datarate > 12 )
 8008cf4:	2d0c      	cmp	r5, #12
 8008cf6:	d803      	bhi.n	8008d00 <SX1276SetRxConfig+0x15c>
            else if( datarate < 6 )
 8008cf8:	2d05      	cmp	r5, #5
 8008cfa:	d802      	bhi.n	8008d02 <SX1276SetRxConfig+0x15e>
                datarate = 6;
 8008cfc:	2506      	movs	r5, #6
 8008cfe:	e000      	b.n	8008d02 <SX1276SetRxConfig+0x15e>
                datarate = 12;
 8008d00:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008d02:	2c07      	cmp	r4, #7
 8008d04:	d063      	beq.n	8008dce <SX1276SetRxConfig+0x22a>
 8008d06:	2c08      	cmp	r4, #8
 8008d08:	d06a      	beq.n	8008de0 <SX1276SetRxConfig+0x23c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8008d0a:	4b56      	ldr	r3, [pc, #344]	; (8008e64 <SX1276SetRxConfig+0x2c0>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8008d12:	201d      	movs	r0, #29
 8008d14:	f007 f947 	bl	800ffa6 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8008d18:	0123      	lsls	r3, r4, #4
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8008d24:	ea43 0107 	orr.w	r1, r3, r7
 8008d28:	201d      	movs	r0, #29
 8008d2a:	f007 f930 	bl	800ff8e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8008d2e:	201e      	movs	r0, #30
 8008d30:	f007 f939 	bl	800ffa6 <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8008d34:	f000 0308 	and.w	r3, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8008d38:	012a      	lsls	r2, r5, #4
 8008d3a:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8008d3c:	431a      	orrs	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8008d3e:	00b3      	lsls	r3, r6, #2
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8008d44:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8008d48:	4319      	orrs	r1, r3
 8008d4a:	201e      	movs	r0, #30
 8008d4c:	f007 f91f 	bl	800ff8e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8008d50:	2026      	movs	r0, #38	; 0x26
 8008d52:	f007 f928 	bl	800ffa6 <SX1276Read>
 8008d56:	b241      	sxtb	r1, r0
 8008d58:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8008d5c:	4b41      	ldr	r3, [pc, #260]	; (8008e64 <SX1276SetRxConfig+0x2c0>)
 8008d5e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8008d62:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8008d66:	b2c9      	uxtb	r1, r1
 8008d68:	2026      	movs	r0, #38	; 0x26
 8008d6a:	f007 f910 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8008d6e:	fa5f f18a 	uxtb.w	r1, sl
 8008d72:	201f      	movs	r0, #31
 8008d74:	f007 f90b 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8008d78:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8008d7c:	2020      	movs	r0, #32
 8008d7e:	f007 f906 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8008d82:	fa5f f188 	uxtb.w	r1, r8
 8008d86:	2021      	movs	r0, #33	; 0x21
 8008d88:	f007 f901 	bl	800ff8e <SX1276Write>
            if( fixLen == 1 )
 8008d8c:	bb5f      	cbnz	r7, 8008de6 <SX1276SetRxConfig+0x242>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008d8e:	4b35      	ldr	r3, [pc, #212]	; (8008e64 <SX1276SetRxConfig+0x2c0>)
 8008d90:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008d94:	bb63      	cbnz	r3, 8008df0 <SX1276SetRxConfig+0x24c>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8008d96:	2c09      	cmp	r4, #9
 8008d98:	d03a      	beq.n	8008e10 <SX1276SetRxConfig+0x26c>
            else if( bandwidth == 9 )
 8008d9a:	2c09      	cmp	r4, #9
 8008d9c:	d047      	beq.n	8008e2e <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8008d9e:	2103      	movs	r1, #3
 8008da0:	2036      	movs	r0, #54	; 0x36
 8008da2:	f007 f8f4 	bl	800ff8e <SX1276Write>
            if( datarate == 6 )
 8008da6:	2d06      	cmp	r5, #6
 8008da8:	d04a      	beq.n	8008e40 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8008daa:	2031      	movs	r0, #49	; 0x31
 8008dac:	f007 f8fb 	bl	800ffa6 <SX1276Read>
 8008db0:	b241      	sxtb	r1, r0
 8008db2:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8008db6:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8008dba:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8008dbe:	2031      	movs	r0, #49	; 0x31
 8008dc0:	f007 f8e5 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8008dc4:	210a      	movs	r1, #10
 8008dc6:	2037      	movs	r0, #55	; 0x37
 8008dc8:	f007 f8e1 	bl	800ff8e <SX1276Write>
}
 8008dcc:	e705      	b.n	8008bda <SX1276SetRxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008dce:	f1a5 030b 	sub.w	r3, r5, #11
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d897      	bhi.n	8008d06 <SX1276SetRxConfig+0x162>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8008dd6:	4b23      	ldr	r3, [pc, #140]	; (8008e64 <SX1276SetRxConfig+0x2c0>)
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8008dde:	e798      	b.n	8008d12 <SX1276SetRxConfig+0x16e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8008de0:	2d0c      	cmp	r5, #12
 8008de2:	d192      	bne.n	8008d0a <SX1276SetRxConfig+0x166>
 8008de4:	e7f7      	b.n	8008dd6 <SX1276SetRxConfig+0x232>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8008de6:	4649      	mov	r1, r9
 8008de8:	2022      	movs	r0, #34	; 0x22
 8008dea:	f007 f8d0 	bl	800ff8e <SX1276Write>
 8008dee:	e7ce      	b.n	8008d8e <SX1276SetRxConfig+0x1ea>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8008df0:	2044      	movs	r0, #68	; 0x44
 8008df2:	f007 f8d8 	bl	800ffa6 <SX1276Read>
 8008df6:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8008dfa:	b2c9      	uxtb	r1, r1
 8008dfc:	2044      	movs	r0, #68	; 0x44
 8008dfe:	f007 f8c6 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8008e02:	4b18      	ldr	r3, [pc, #96]	; (8008e64 <SX1276SetRxConfig+0x2c0>)
 8008e04:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8008e08:	2024      	movs	r0, #36	; 0x24
 8008e0a:	f007 f8c0 	bl	800ff8e <SX1276Write>
 8008e0e:	e7c2      	b.n	8008d96 <SX1276SetRxConfig+0x1f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8008e10:	4b14      	ldr	r3, [pc, #80]	; (8008e64 <SX1276SetRxConfig+0x2c0>)
 8008e12:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8008e16:	4b15      	ldr	r3, [pc, #84]	; (8008e6c <SX1276SetRxConfig+0x2c8>)
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d9be      	bls.n	8008d9a <SX1276SetRxConfig+0x1f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8008e1c:	2102      	movs	r1, #2
 8008e1e:	2036      	movs	r0, #54	; 0x36
 8008e20:	f007 f8b5 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8008e24:	2164      	movs	r1, #100	; 0x64
 8008e26:	203a      	movs	r0, #58	; 0x3a
 8008e28:	f007 f8b1 	bl	800ff8e <SX1276Write>
 8008e2c:	e7bb      	b.n	8008da6 <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8008e2e:	2102      	movs	r1, #2
 8008e30:	2036      	movs	r0, #54	; 0x36
 8008e32:	f007 f8ac 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8008e36:	217f      	movs	r1, #127	; 0x7f
 8008e38:	203a      	movs	r0, #58	; 0x3a
 8008e3a:	f007 f8a8 	bl	800ff8e <SX1276Write>
 8008e3e:	e7b2      	b.n	8008da6 <SX1276SetRxConfig+0x202>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8008e40:	2031      	movs	r0, #49	; 0x31
 8008e42:	f007 f8b0 	bl	800ffa6 <SX1276Read>
 8008e46:	b241      	sxtb	r1, r0
 8008e48:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8008e4c:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8008e50:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8008e54:	2031      	movs	r0, #49	; 0x31
 8008e56:	f007 f89a 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8008e5a:	210c      	movs	r1, #12
 8008e5c:	2037      	movs	r0, #55	; 0x37
 8008e5e:	f007 f896 	bl	800ff8e <SX1276Write>
 8008e62:	e6ba      	b.n	8008bda <SX1276SetRxConfig+0x36>
 8008e64:	20001240 	.word	0x20001240
 8008e68:	01e84800 	.word	0x01e84800
 8008e6c:	1f4add40 	.word	0x1f4add40

08008e70 <SX1276SetTxConfig>:
{
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	b083      	sub	sp, #12
 8008e76:	4604      	mov	r4, r0
 8008e78:	460d      	mov	r5, r1
 8008e7a:	9201      	str	r2, [sp, #4]
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8008e82:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 8008e86:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 8008e8a:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8008e8e:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 8008e92:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    SX1276SetModem( modem );
 8008e96:	f7ff fdfb 	bl	8008a90 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f7fe fe08 	bl	8007ab0 <SX1276SetRfTxPower>
    switch( modem )
 8008ea0:	b124      	cbz	r4, 8008eac <SX1276SetTxConfig+0x3c>
 8008ea2:	2c01      	cmp	r4, #1
 8008ea4:	d057      	beq.n	8008f56 <SX1276SetTxConfig+0xe6>
}
 8008ea6:	b003      	add	sp, #12
 8008ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 8008eac:	4b81      	ldr	r3, [pc, #516]	; (80090b4 <SX1276SetTxConfig+0x244>)
 8008eae:	f883 50e8 	strb.w	r5, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Fdev = fdev;
 8008eb2:	9801      	ldr	r0, [sp, #4]
 8008eb4:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8008eb8:	9a00      	ldr	r2, [sp, #0]
 8008eba:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8008ebe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ec0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8008ec4:	f8a3 70fc 	strh.w	r7, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 8008ec8:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8008ecc:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8008ed0:	f883 a101 	strb.w	sl, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8008ed4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ed6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 8008eda:	f7fe ffad 	bl	8007e38 <SX1276ConvertFreqInHzToPllStep>
 8008ede:	4604      	mov	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8008ee0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8008ee4:	2004      	movs	r0, #4
 8008ee6:	f007 f852 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8008eea:	b2e1      	uxtb	r1, r4
 8008eec:	2005      	movs	r0, #5
 8008eee:	f007 f84e 	bl	800ff8e <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8008ef2:	4c71      	ldr	r4, [pc, #452]	; (80090b8 <SX1276SetTxConfig+0x248>)
 8008ef4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ef6:	fbb4 f4f3 	udiv	r4, r4, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8008efa:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8008efe:	2002      	movs	r0, #2
 8008f00:	f007 f845 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8008f04:	b2e1      	uxtb	r1, r4
 8008f06:	2003      	movs	r0, #3
 8008f08:	f007 f841 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8008f0c:	0a39      	lsrs	r1, r7, #8
 8008f0e:	2025      	movs	r0, #37	; 0x25
 8008f10:	f007 f83d 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8008f14:	b2f9      	uxtb	r1, r7
 8008f16:	2026      	movs	r0, #38	; 0x26
 8008f18:	f007 f839 	bl	800ff8e <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8008f1c:	2030      	movs	r0, #48	; 0x30
 8008f1e:	f007 f842 	bl	800ffa6 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8008f22:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8008f26:	f1b8 0f00 	cmp.w	r8, #0
 8008f2a:	d011      	beq.n	8008f50 <SX1276SetTxConfig+0xe0>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8008f30:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8008f34:	b2c9      	uxtb	r1, r1
 8008f36:	2030      	movs	r0, #48	; 0x30
 8008f38:	f007 f829 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8008f3c:	2031      	movs	r0, #49	; 0x31
 8008f3e:	f007 f832 	bl	800ffa6 <SX1276Read>
 8008f42:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8008f46:	b2c9      	uxtb	r1, r1
 8008f48:	2031      	movs	r0, #49	; 0x31
 8008f4a:	f007 f820 	bl	800ff8e <SX1276Write>
        break;
 8008f4e:	e7aa      	b.n	8008ea6 <SX1276SetTxConfig+0x36>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8008f50:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8008f54:	e7eb      	b.n	8008f2e <SX1276SetTxConfig+0xbe>
            SX1276.Settings.LoRa.Power = power;
 8008f56:	4b57      	ldr	r3, [pc, #348]	; (80090b4 <SX1276SetTxConfig+0x244>)
 8008f58:	f883 511c 	strb.w	r5, [r3, #284]	; 0x11c
            if( bandwidth > 2 )
 8008f5c:	9b00      	ldr	r3, [sp, #0]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d900      	bls.n	8008f64 <SX1276SetTxConfig+0xf4>
                while( 1 );
 8008f62:	e7fe      	b.n	8008f62 <SX1276SetTxConfig+0xf2>
            bandwidth += 7;
 8008f64:	9c00      	ldr	r4, [sp, #0]
 8008f66:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8008f68:	4b52      	ldr	r3, [pc, #328]	; (80090b4 <SX1276SetTxConfig+0x244>)
 8008f6a:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8008f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f70:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8008f74:	f883 9129 	strb.w	r9, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8008f78:	f8a3 712a 	strh.w	r7, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8008f7c:	f883 812c 	strb.w	r8, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8008f80:	f883 b12f 	strb.w	fp, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8008f84:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8008f88:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8008f8c:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8008f90:	f883 a131 	strb.w	sl, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8008f94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f96:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            if( datarate > 12 )
 8008f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f9c:	2b0c      	cmp	r3, #12
 8008f9e:	d804      	bhi.n	8008faa <SX1276SetTxConfig+0x13a>
            else if( datarate < 6 )
 8008fa0:	2b05      	cmp	r3, #5
 8008fa2:	d804      	bhi.n	8008fae <SX1276SetTxConfig+0x13e>
                datarate = 6;
 8008fa4:	2306      	movs	r3, #6
 8008fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8008fa8:	e001      	b.n	8008fae <SX1276SetTxConfig+0x13e>
                datarate = 12;
 8008faa:	230c      	movs	r3, #12
 8008fac:	930c      	str	r3, [sp, #48]	; 0x30
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008fae:	2c07      	cmp	r4, #7
 8008fb0:	d051      	beq.n	8009056 <SX1276SetTxConfig+0x1e6>
 8008fb2:	2c08      	cmp	r4, #8
 8008fb4:	d058      	beq.n	8009068 <SX1276SetTxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8008fb6:	4b3f      	ldr	r3, [pc, #252]	; (80090b4 <SX1276SetTxConfig+0x244>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008fbe:	f1bb 0f00 	cmp.w	fp, #0
 8008fc2:	d155      	bne.n	8009070 <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8008fc4:	201d      	movs	r0, #29
 8008fc6:	f006 ffee 	bl	800ffa6 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8008fca:	0123      	lsls	r3, r4, #4
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8008fd6:	ea43 0108 	orr.w	r1, r3, r8
 8008fda:	201d      	movs	r0, #29
 8008fdc:	f006 ffd7 	bl	800ff8e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8008fe0:	201e      	movs	r0, #30
 8008fe2:	f006 ffe0 	bl	800ffa6 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 8008fe6:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8008fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fec:	011b      	lsls	r3, r3, #4
 8008fee:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8008ff0:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8008ff2:	00b3      	lsls	r3, r6, #2
 8008ff4:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8008ff6:	4319      	orrs	r1, r3
 8008ff8:	201e      	movs	r0, #30
 8008ffa:	f006 ffc8 	bl	800ff8e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8008ffe:	2026      	movs	r0, #38	; 0x26
 8009000:	f006 ffd1 	bl	800ffa6 <SX1276Read>
 8009004:	b241      	sxtb	r1, r0
 8009006:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800900a:	4b2a      	ldr	r3, [pc, #168]	; (80090b4 <SX1276SetTxConfig+0x244>)
 800900c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8009010:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8009014:	b2c9      	uxtb	r1, r1
 8009016:	2026      	movs	r0, #38	; 0x26
 8009018:	f006 ffb9 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800901c:	0a39      	lsrs	r1, r7, #8
 800901e:	2020      	movs	r0, #32
 8009020:	f006 ffb5 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8009024:	b2f9      	uxtb	r1, r7
 8009026:	2021      	movs	r0, #33	; 0x21
 8009028:	f006 ffb1 	bl	800ff8e <SX1276Write>
            if( datarate == 6 )
 800902c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800902e:	2b06      	cmp	r3, #6
 8009030:	d02e      	beq.n	8009090 <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8009032:	2031      	movs	r0, #49	; 0x31
 8009034:	f006 ffb7 	bl	800ffa6 <SX1276Read>
 8009038:	b241      	sxtb	r1, r0
 800903a:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800903e:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8009042:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8009046:	2031      	movs	r0, #49	; 0x31
 8009048:	f006 ffa1 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800904c:	210a      	movs	r1, #10
 800904e:	2037      	movs	r0, #55	; 0x37
 8009050:	f006 ff9d 	bl	800ff8e <SX1276Write>
}
 8009054:	e727      	b.n	8008ea6 <SX1276SetTxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009058:	3b0b      	subs	r3, #11
 800905a:	2b01      	cmp	r3, #1
 800905c:	d8a9      	bhi.n	8008fb2 <SX1276SetTxConfig+0x142>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800905e:	4b15      	ldr	r3, [pc, #84]	; (80090b4 <SX1276SetTxConfig+0x244>)
 8009060:	2201      	movs	r2, #1
 8009062:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8009066:	e7aa      	b.n	8008fbe <SX1276SetTxConfig+0x14e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8009068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800906a:	2b0c      	cmp	r3, #12
 800906c:	d1a3      	bne.n	8008fb6 <SX1276SetTxConfig+0x146>
 800906e:	e7f6      	b.n	800905e <SX1276SetTxConfig+0x1ee>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8009070:	2044      	movs	r0, #68	; 0x44
 8009072:	f006 ff98 	bl	800ffa6 <SX1276Read>
 8009076:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800907a:	b2c9      	uxtb	r1, r1
 800907c:	2044      	movs	r0, #68	; 0x44
 800907e:	f006 ff86 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8009082:	4b0c      	ldr	r3, [pc, #48]	; (80090b4 <SX1276SetTxConfig+0x244>)
 8009084:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8009088:	2024      	movs	r0, #36	; 0x24
 800908a:	f006 ff80 	bl	800ff8e <SX1276Write>
 800908e:	e799      	b.n	8008fc4 <SX1276SetTxConfig+0x154>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8009090:	2031      	movs	r0, #49	; 0x31
 8009092:	f006 ff88 	bl	800ffa6 <SX1276Read>
 8009096:	b241      	sxtb	r1, r0
 8009098:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800909c:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80090a0:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80090a4:	2031      	movs	r0, #49	; 0x31
 80090a6:	f006 ff72 	bl	800ff8e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80090aa:	210c      	movs	r1, #12
 80090ac:	2037      	movs	r0, #55	; 0x37
 80090ae:	f006 ff6e 	bl	800ff8e <SX1276Write>
 80090b2:	e6f8      	b.n	8008ea6 <SX1276SetTxConfig+0x36>
 80090b4:	20001240 	.word	0x20001240
 80090b8:	01e84800 	.word	0x01e84800

080090bc <SX1276SetTxContinuousWave>:
{
 80090bc:	b530      	push	{r4, r5, lr}
 80090be:	b08b      	sub	sp, #44	; 0x2c
 80090c0:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80090c2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80090c6:	fb02 f404 	mul.w	r4, r2, r4
    SX1276SetChannel( freq );
 80090ca:	f7fe ff1b 	bl	8007f04 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80090ce:	9408      	str	r4, [sp, #32]
 80090d0:	2000      	movs	r0, #0
 80090d2:	9007      	str	r0, [sp, #28]
 80090d4:	9006      	str	r0, [sp, #24]
 80090d6:	9005      	str	r0, [sp, #20]
 80090d8:	9004      	str	r0, [sp, #16]
 80090da:	9003      	str	r0, [sp, #12]
 80090dc:	2305      	movs	r3, #5
 80090de:	9302      	str	r3, [sp, #8]
 80090e0:	9001      	str	r0, [sp, #4]
 80090e2:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	4603      	mov	r3, r0
 80090ea:	4602      	mov	r2, r0
 80090ec:	4629      	mov	r1, r5
 80090ee:	f7ff febf 	bl	8008e70 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80090f2:	2031      	movs	r0, #49	; 0x31
 80090f4:	f006 ff57 	bl	800ffa6 <SX1276Read>
 80090f8:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 80090fc:	2031      	movs	r0, #49	; 0x31
 80090fe:	f006 ff46 	bl	800ff8e <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8009102:	21f0      	movs	r1, #240	; 0xf0
 8009104:	2040      	movs	r0, #64	; 0x40
 8009106:	f006 ff42 	bl	800ff8e <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800910a:	21a0      	movs	r1, #160	; 0xa0
 800910c:	2041      	movs	r0, #65	; 0x41
 800910e:	f006 ff3e 	bl	800ff8e <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8009112:	4d08      	ldr	r5, [pc, #32]	; (8009134 <SX1276SetTxContinuousWave+0x78>)
 8009114:	4621      	mov	r1, r4
 8009116:	4628      	mov	r0, r5
 8009118:	f006 fe61 	bl	800fdde <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 800911c:	4b06      	ldr	r3, [pc, #24]	; (8009138 <SX1276SetTxContinuousWave+0x7c>)
 800911e:	2202      	movs	r2, #2
 8009120:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8009124:	4628      	mov	r0, r5
 8009126:	f7fe fdcd 	bl	8007cc4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800912a:	2003      	movs	r0, #3
 800912c:	f006 ff47 	bl	800ffbe <SX1276SetOpMode>
}
 8009130:	b00b      	add	sp, #44	; 0x2c
 8009132:	bd30      	pop	{r4, r5, pc}
 8009134:	20001384 	.word	0x20001384
 8009138:	20001240 	.word	0x20001240

0800913c <SX1276SetMaxPayloadLength>:
{
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4604      	mov	r4, r0
 8009140:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 8009142:	f7ff fca5 	bl	8008a90 <SX1276SetModem>
    switch( modem )
 8009146:	b114      	cbz	r4, 800914e <SX1276SetMaxPayloadLength+0x12>
 8009148:	2c01      	cmp	r4, #1
 800914a:	d00a      	beq.n	8009162 <SX1276SetMaxPayloadLength+0x26>
}
 800914c:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800914e:	4b07      	ldr	r3, [pc, #28]	; (800916c <SX1276SetMaxPayloadLength+0x30>)
 8009150:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1f9      	bne.n	800914c <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8009158:	4629      	mov	r1, r5
 800915a:	2032      	movs	r0, #50	; 0x32
 800915c:	f006 ff17 	bl	800ff8e <SX1276Write>
 8009160:	e7f4      	b.n	800914c <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8009162:	4629      	mov	r1, r5
 8009164:	2023      	movs	r0, #35	; 0x23
 8009166:	f006 ff12 	bl	800ff8e <SX1276Write>
}
 800916a:	e7ef      	b.n	800914c <SX1276SetMaxPayloadLength+0x10>
 800916c:	20001240 	.word	0x20001240

08009170 <SX1276SetPublicNetwork>:
{
 8009170:	b510      	push	{r4, lr}
 8009172:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 8009174:	2001      	movs	r0, #1
 8009176:	f7ff fc8b 	bl	8008a90 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800917a:	4b07      	ldr	r3, [pc, #28]	; (8009198 <SX1276SetPublicNetwork+0x28>)
 800917c:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 8009180:	b124      	cbz	r4, 800918c <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8009182:	2134      	movs	r1, #52	; 0x34
 8009184:	2039      	movs	r0, #57	; 0x39
 8009186:	f006 ff02 	bl	800ff8e <SX1276Write>
}
 800918a:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800918c:	2112      	movs	r1, #18
 800918e:	2039      	movs	r0, #57	; 0x39
 8009190:	f006 fefd 	bl	800ff8e <SX1276Write>
}
 8009194:	e7f9      	b.n	800918a <SX1276SetPublicNetwork+0x1a>
 8009196:	bf00      	nop
 8009198:	20001240 	.word	0x20001240

0800919c <SX1276OnTimeoutIrq>:
{
 800919c:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 800919e:	4b33      	ldr	r3, [pc, #204]	; (800926c <SX1276OnTimeoutIrq+0xd0>)
 80091a0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d002      	beq.n	80091ae <SX1276OnTimeoutIrq+0x12>
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d033      	beq.n	8009214 <SX1276OnTimeoutIrq+0x78>
}
 80091ac:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 80091ae:	4b2f      	ldr	r3, [pc, #188]	; (800926c <SX1276OnTimeoutIrq+0xd0>)
 80091b0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80091b4:	b143      	cbz	r3, 80091c8 <SX1276OnTimeoutIrq+0x2c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80091b6:	4b2e      	ldr	r3, [pc, #184]	; (8009270 <SX1276OnTimeoutIrq+0xd4>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0f6      	beq.n	80091ac <SX1276OnTimeoutIrq+0x10>
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d0f3      	beq.n	80091ac <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
 80091c4:	4798      	blx	r3
 80091c6:	e7f1      	b.n	80091ac <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80091c8:	4c28      	ldr	r4, [pc, #160]	; (800926c <SX1276OnTimeoutIrq+0xd0>)
 80091ca:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80091ce:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80091d2:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 80091d6:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80091da:	210b      	movs	r1, #11
 80091dc:	203e      	movs	r0, #62	; 0x3e
 80091de:	f006 fed6 	bl	800ff8e <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80091e2:	2110      	movs	r1, #16
 80091e4:	203f      	movs	r0, #63	; 0x3f
 80091e6:	f006 fed2 	bl	800ff8e <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 80091ea:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 80091ee:	b14b      	cbz	r3, 8009204 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80091f0:	200d      	movs	r0, #13
 80091f2:	f006 fed8 	bl	800ffa6 <SX1276Read>
 80091f6:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80091fa:	b2c9      	uxtb	r1, r1
 80091fc:	200d      	movs	r0, #13
 80091fe:	f006 fec6 	bl	800ff8e <SX1276Write>
 8009202:	e7d8      	b.n	80091b6 <SX1276OnTimeoutIrq+0x1a>
                SX1276.Settings.State = RF_IDLE;
 8009204:	4b19      	ldr	r3, [pc, #100]	; (800926c <SX1276OnTimeoutIrq+0xd0>)
 8009206:	2200      	movs	r2, #0
 8009208:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 800920c:	4819      	ldr	r0, [pc, #100]	; (8009274 <SX1276OnTimeoutIrq+0xd8>)
 800920e:	f7fe fdd3 	bl	8007db8 <TimerStop>
 8009212:	e7d0      	b.n	80091b6 <SX1276OnTimeoutIrq+0x1a>
        SX1276Reset( );
 8009214:	f7fe f9cc 	bl	80075b0 <SX1276Reset>
        RxChainCalibration( );
 8009218:	f7ff f960 	bl	80084dc <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800921c:	2000      	movs	r0, #0
 800921e:	f006 fece 	bl	800ffbe <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8009222:	2400      	movs	r4, #0
 8009224:	e00c      	b.n	8009240 <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8009226:	4a14      	ldr	r2, [pc, #80]	; (8009278 <SX1276OnTimeoutIrq+0xdc>)
 8009228:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800922c:	18d5      	adds	r5, r2, r3
 800922e:	5cd0      	ldrb	r0, [r2, r3]
 8009230:	f7ff fc2e 	bl	8008a90 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8009234:	78a9      	ldrb	r1, [r5, #2]
 8009236:	7868      	ldrb	r0, [r5, #1]
 8009238:	f006 fea9 	bl	800ff8e <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800923c:	3401      	adds	r4, #1
 800923e:	b2e4      	uxtb	r4, r4
 8009240:	2c0f      	cmp	r4, #15
 8009242:	d9f0      	bls.n	8009226 <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 8009244:	2000      	movs	r0, #0
 8009246:	f7ff fc23 	bl	8008a90 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800924a:	4c08      	ldr	r4, [pc, #32]	; (800926c <SX1276OnTimeoutIrq+0xd0>)
 800924c:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 8009250:	f7ff ff8e 	bl	8009170 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8009254:	2300      	movs	r3, #0
 8009256:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800925a:	4b05      	ldr	r3, [pc, #20]	; (8009270 <SX1276OnTimeoutIrq+0xd4>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d0a4      	beq.n	80091ac <SX1276OnTimeoutIrq+0x10>
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0a1      	beq.n	80091ac <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
 8009268:	4798      	blx	r3
}
 800926a:	e79f      	b.n	80091ac <SX1276OnTimeoutIrq+0x10>
 800926c:	20001240 	.word	0x20001240
 8009270:	2000110c 	.word	0x2000110c
 8009274:	20001110 	.word	0x20001110
 8009278:	08012e64 	.word	0x08012e64

0800927c <uart_stm32_async_rx_buf_rsp>:
	LOG_DBG("tx: async timeout");
}

static int uart_stm32_async_rx_buf_rsp(const struct device *dev, uint8_t *buf,
				       size_t len)
{
 800927c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800927e:	b08b      	sub	sp, #44	; 0x2c
 8009280:	af00      	add	r7, sp, #0
 8009282:	460d      	mov	r5, r1
 8009284:	4614      	mov	r4, r2
	struct uart_stm32_data *data = dev->data;
 8009286:	6906      	ldr	r6, [r0, #16]

	LOG_DBG("replace buffer (%d)", len);
 8009288:	2301      	movs	r3, #1
 800928a:	813b      	strh	r3, [r7, #8]
 800928c:	2302      	movs	r3, #2
 800928e:	817b      	strh	r3, [r7, #10]
 8009290:	b088      	sub	sp, #32
 8009292:	466b      	mov	r3, sp
 8009294:	f113 020c 	adds.w	r2, r3, #12
 8009298:	d03c      	beq.n	8009314 <uart_stm32_async_rx_buf_rsp+0x98>
 800929a:	2010      	movs	r0, #16
 800929c:	2101      	movs	r1, #1
 800929e:	8139      	strh	r1, [r7, #8]
 80092a0:	b11a      	cbz	r2, 80092aa <uart_stm32_async_rx_buf_rsp+0x2e>
 80092a2:	2804      	cmp	r0, #4
 80092a4:	dd01      	ble.n	80092aa <uart_stm32_async_rx_buf_rsp+0x2e>
 80092a6:	491e      	ldr	r1, [pc, #120]	; (8009320 <uart_stm32_async_rx_buf_rsp+0xa4>)
 80092a8:	6119      	str	r1, [r3, #16]
 80092aa:	2102      	movs	r1, #2
 80092ac:	8179      	strh	r1, [r7, #10]
 80092ae:	b11a      	cbz	r2, 80092b8 <uart_stm32_async_rx_buf_rsp+0x3c>
 80092b0:	2808      	cmp	r0, #8
 80092b2:	dd01      	ble.n	80092b8 <uart_stm32_async_rx_buf_rsp+0x3c>
 80092b4:	491b      	ldr	r1, [pc, #108]	; (8009324 <uart_stm32_async_rx_buf_rsp+0xa8>)
 80092b6:	6159      	str	r1, [r3, #20]
 80092b8:	b112      	cbz	r2, 80092c0 <uart_stm32_async_rx_buf_rsp+0x44>
 80092ba:	280c      	cmp	r0, #12
 80092bc:	dd00      	ble.n	80092c0 <uart_stm32_async_rx_buf_rsp+0x44>
 80092be:	619c      	str	r4, [r3, #24]
 80092c0:	280f      	cmp	r0, #15
 80092c2:	dd2a      	ble.n	800931a <uart_stm32_async_rx_buf_rsp+0x9e>
 80092c4:	2010      	movs	r0, #16
 80092c6:	b12a      	cbz	r2, 80092d4 <uart_stm32_async_rx_buf_rsp+0x58>
 80092c8:	2100      	movs	r1, #0
 80092ca:	6079      	str	r1, [r7, #4]
 80092cc:	2104      	movs	r1, #4
 80092ce:	7139      	strb	r1, [r7, #4]
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	60d9      	str	r1, [r3, #12]
 80092d4:	2100      	movs	r1, #0
 80092d6:	f36f 0100 	bfc	r1, #0, #1
 80092da:	f36f 0141 	bfc	r1, #1, #1
 80092de:	f36f 0182 	bfc	r1, #2, #1
 80092e2:	f36f 01c5 	bfc	r1, #3, #3
 80092e6:	2304      	movs	r3, #4
 80092e8:	f363 1188 	bfi	r1, r3, #6, #3
 80092ec:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 80092f0:	f363 2152 	bfi	r1, r3, #9, #10
 80092f4:	f36f 41de 	bfc	r1, #19, #12
 80092f8:	f36f 71df 	bfc	r1, #31, #1
 80092fc:	2300      	movs	r3, #0
 80092fe:	480a      	ldr	r0, [pc, #40]	; (8009328 <uart_stm32_async_rx_buf_rsp+0xac>)
 8009300:	f005 fd2f 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	data->rx_next_buffer = buf;
 8009304:	f8c6 5148 	str.w	r5, [r6, #328]	; 0x148
	data->rx_next_buffer_len = len;
 8009308:	f8c6 414c 	str.w	r4, [r6, #332]	; 0x14c

	return 0;
}
 800930c:	2000      	movs	r0, #0
 800930e:	372c      	adds	r7, #44	; 0x2c
 8009310:	46bd      	mov	sp, r7
 8009312:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_DBG("replace buffer (%d)", len);
 8009314:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8009318:	e7c0      	b.n	800929c <uart_stm32_async_rx_buf_rsp+0x20>
 800931a:	f06f 001b 	mvn.w	r0, #27
 800931e:	e7d2      	b.n	80092c6 <uart_stm32_async_rx_buf_rsp+0x4a>
 8009320:	08012e94 	.word	0x08012e94
 8009324:	0801318c 	.word	0x0801318c
 8009328:	080119ec 	.word	0x080119ec

0800932c <uart_stm32_configure>:
{
 800932c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009330:	b090      	sub	sp, #64	; 0x40
 8009332:	460c      	mov	r4, r1
	struct uart_stm32_data *data = dev->data;
 8009334:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009336:	6843      	ldr	r3, [r0, #4]
 8009338:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800933a:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 800933c:	2a01      	cmp	r2, #1
 800933e:	d015      	beq.n	800936c <uart_stm32_configure+0x40>
 8009340:	2a02      	cmp	r2, #2
 8009342:	d116      	bne.n	8009372 <uart_stm32_configure+0x46>
		return LL_USART_PARITY_EVEN;
 8009344:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8009348:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 800934a:	2b01      	cmp	r3, #1
 800934c:	d017      	beq.n	800937e <uart_stm32_configure+0x52>
 800934e:	2b02      	cmp	r3, #2
 8009350:	d018      	beq.n	8009384 <uart_stm32_configure+0x58>
 8009352:	b18b      	cbz	r3, 8009378 <uart_stm32_configure+0x4c>
		return LL_USART_STOPBITS_2;
 8009354:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8009358:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 800935a:	2902      	cmp	r1, #2
 800935c:	d015      	beq.n	800938a <uart_stm32_configure+0x5e>
 800935e:	2904      	cmp	r1, #4
 8009360:	d019      	beq.n	8009396 <uart_stm32_configure+0x6a>
		if (p == UART_CFG_PARITY_NONE) {
 8009362:	2a00      	cmp	r2, #0
 8009364:	f040 8097 	bne.w	8009496 <uart_stm32_configure+0x16a>
			return LL_USART_DATAWIDTH_8B;
 8009368:	2700      	movs	r7, #0
 800936a:	e016      	b.n	800939a <uart_stm32_configure+0x6e>
	switch (parity) {
 800936c:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 8009370:	e7ea      	b.n	8009348 <uart_stm32_configure+0x1c>
		return LL_USART_PARITY_NONE;
 8009372:	f04f 0e00 	mov.w	lr, #0
 8009376:	e7e7      	b.n	8009348 <uart_stm32_configure+0x1c>
	switch (sb) {
 8009378:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 800937c:	e7ec      	b.n	8009358 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1;
 800937e:	f04f 0c00 	mov.w	ip, #0
 8009382:	e7e9      	b.n	8009358 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1_5;
 8009384:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8009388:	e7e6      	b.n	8009358 <uart_stm32_configure+0x2c>
		if (p == UART_CFG_PARITY_NONE) {
 800938a:	b10a      	cbz	r2, 8009390 <uart_stm32_configure+0x64>
			return LL_USART_DATAWIDTH_8B;
 800938c:	2700      	movs	r7, #0
 800938e:	e004      	b.n	800939a <uart_stm32_configure+0x6e>
			return LL_USART_DATAWIDTH_7B;
 8009390:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8009394:	e001      	b.n	800939a <uart_stm32_configure+0x6e>
	switch (db) {
 8009396:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800939a:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800939e:	f1ba 0f01 	cmp.w	sl, #1
 80093a2:	d07b      	beq.n	800949c <uart_stm32_configure+0x170>
	return LL_USART_HWCONTROL_NONE;
 80093a4:	f04f 0800 	mov.w	r8, #0
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80093a8:	f1a2 0903 	sub.w	r9, r2, #3
 80093ac:	fa5f f989 	uxtb.w	r9, r9
 80093b0:	f1b9 0f01 	cmp.w	r9, #1
 80093b4:	f240 80c1 	bls.w	800953a <uart_stm32_configure+0x20e>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 80093b8:	b112      	cbz	r2, 80093c0 <uart_stm32_configure+0x94>
 80093ba:	2904      	cmp	r1, #4
 80093bc:	f000 80c0 	beq.w	8009540 <uart_stm32_configure+0x214>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 80c0 	beq.w	8009546 <uart_stm32_configure+0x21a>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	f000 80c0 	beq.w	800954c <uart_stm32_configure+0x220>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 80093cc:	2901      	cmp	r1, #1
 80093ce:	f240 80c0 	bls.w	8009552 <uart_stm32_configure+0x226>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 80093d2:	2904      	cmp	r1, #4
 80093d4:	f000 80c0 	beq.w	8009558 <uart_stm32_configure+0x22c>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 80093d8:	f1ba 0f00 	cmp.w	sl, #0
 80093dc:	d017      	beq.n	800940e <uart_stm32_configure+0xe2>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 80093de:	4b63      	ldr	r3, [pc, #396]	; (800956c <uart_stm32_configure+0x240>)
 80093e0:	429d      	cmp	r5, r3
 80093e2:	d010      	beq.n	8009406 <uart_stm32_configure+0xda>
 80093e4:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80093e8:	429d      	cmp	r5, r3
 80093ea:	d00c      	beq.n	8009406 <uart_stm32_configure+0xda>
 80093ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093f0:	429d      	cmp	r5, r3
 80093f2:	d008      	beq.n	8009406 <uart_stm32_configure+0xda>
 80093f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093f8:	429d      	cmp	r5, r3
 80093fa:	d004      	beq.n	8009406 <uart_stm32_configure+0xda>
 80093fc:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8009400:	429d      	cmp	r5, r3
 8009402:	f040 80ac 	bne.w	800955e <uart_stm32_configure+0x232>
 8009406:	f1ba 0f01 	cmp.w	sl, #1
 800940a:	f040 80ab 	bne.w	8009564 <uart_stm32_configure+0x238>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800940e:	682b      	ldr	r3, [r5, #0]
 8009410:	f023 0301 	bic.w	r3, r3, #1
 8009414:	602b      	str	r3, [r5, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009416:	6843      	ldr	r3, [r0, #4]
 8009418:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800941a:	6813      	ldr	r3, [r2, #0]
 800941c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8009420:	459e      	cmp	lr, r3
 8009422:	d005      	beq.n	8009430 <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8009424:	6813      	ldr	r3, [r2, #0]
 8009426:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800942a:	ea4e 0303 	orr.w	r3, lr, r3
 800942e:	6013      	str	r3, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009430:	6843      	ldr	r3, [r0, #4]
 8009432:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8009434:	6853      	ldr	r3, [r2, #4]
 8009436:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800943a:	459c      	cmp	ip, r3
 800943c:	d005      	beq.n	800944a <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800943e:	6853      	ldr	r3, [r2, #4]
 8009440:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009444:	ea4c 0303 	orr.w	r3, ip, r3
 8009448:	6053      	str	r3, [r2, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800944a:	6843      	ldr	r3, [r0, #4]
 800944c:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800944e:	6813      	ldr	r3, [r2, #0]
 8009450:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8009454:	429f      	cmp	r7, r3
 8009456:	d004      	beq.n	8009462 <uart_stm32_configure+0x136>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8009458:	6813      	ldr	r3, [r2, #0]
 800945a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800945e:	431f      	orrs	r7, r3
 8009460:	6017      	str	r7, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009462:	6843      	ldr	r3, [r0, #4]
 8009464:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8009466:	6893      	ldr	r3, [r2, #8]
 8009468:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800946c:	4598      	cmp	r8, r3
 800946e:	d005      	beq.n	800947c <uart_stm32_configure+0x150>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009470:	6893      	ldr	r3, [r2, #8]
 8009472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009476:	ea48 0303 	orr.w	r3, r8, r3
 800947a:	6093      	str	r3, [r2, #8]
	if (cfg->baudrate != data->baud_rate) {
 800947c:	f8d4 8000 	ldr.w	r8, [r4]
 8009480:	6833      	ldr	r3, [r6, #0]
 8009482:	4598      	cmp	r8, r3
 8009484:	d10d      	bne.n	80094a2 <uart_stm32_configure+0x176>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8009486:	682b      	ldr	r3, [r5, #0]
 8009488:	f043 0301 	orr.w	r3, r3, #1
 800948c:	602b      	str	r3, [r5, #0]
	return 0;
 800948e:	2000      	movs	r0, #0
};
 8009490:	b010      	add	sp, #64	; 0x40
 8009492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return LL_USART_DATAWIDTH_9B;
 8009496:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 800949a:	e77e      	b.n	800939a <uart_stm32_configure+0x6e>
		return LL_USART_HWCONTROL_RTS_CTS;
 800949c:	f44f 7840 	mov.w	r8, #768	; 0x300
 80094a0:	e782      	b.n	80093a8 <uart_stm32_configure+0x7c>
	struct uart_stm32_data *data = dev->data;
 80094a2:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80094a4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80094a8:	f859 7b0c 	ldr.w	r7, [r9], #12
	if (clock_control_get_rate(data->clock,
 80094ac:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80094b0:	4650      	mov	r0, sl
 80094b2:	f006 ffaa 	bl	801040a <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80094b6:	b1b8      	cbz	r0, 80094e8 <uart_stm32_configure+0x1bc>
	const struct clock_control_driver_api *api =
 80094b8:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	b1b3      	cbz	r3, 80094ee <uart_stm32_configure+0x1c2>
	return api->get_rate(dev, sys, rate);
 80094c0:	466a      	mov	r2, sp
 80094c2:	4649      	mov	r1, r9
 80094c4:	4650      	mov	r0, sl
 80094c6:	4798      	blx	r3
 80094c8:	2800      	cmp	r0, #0
 80094ca:	db13      	blt.n	80094f4 <uart_stm32_configure+0x1c8>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094d2:	603b      	str	r3, [r7, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80094d4:	9b00      	ldr	r3, [sp, #0]
 80094d6:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 80094da:	fbb3 f3f8 	udiv	r3, r3, r8
 80094de:	b29b      	uxth	r3, r3
 80094e0:	60fb      	str	r3, [r7, #12]
		data->baud_rate = cfg->baudrate;
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	6033      	str	r3, [r6, #0]
 80094e6:	e7ce      	b.n	8009486 <uart_stm32_configure+0x15a>
		return -ENODEV;
 80094e8:	f06f 0012 	mvn.w	r0, #18
 80094ec:	e7ec      	b.n	80094c8 <uart_stm32_configure+0x19c>
		return -ENOSYS;
 80094ee:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80094f2:	e7e9      	b.n	80094c8 <uart_stm32_configure+0x19c>
		LOG_ERR("Failed call clock_control_get_rate");
 80094f4:	2201      	movs	r2, #1
 80094f6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80094fa:	4b1d      	ldr	r3, [pc, #116]	; (8009570 <uart_stm32_configure+0x244>)
 80094fc:	930e      	str	r3, [sp, #56]	; 0x38
 80094fe:	2300      	movs	r3, #0
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	2102      	movs	r1, #2
 8009504:	f88d 1004 	strb.w	r1, [sp, #4]
 8009508:	9901      	ldr	r1, [sp, #4]
 800950a:	910d      	str	r1, [sp, #52]	; 0x34
 800950c:	4619      	mov	r1, r3
 800950e:	f363 0100 	bfi	r1, r3, #0, #1
 8009512:	f363 0141 	bfi	r1, r3, #1, #1
 8009516:	f363 0182 	bfi	r1, r3, #2, #1
 800951a:	f363 01c5 	bfi	r1, r3, #3, #3
 800951e:	f362 1188 	bfi	r1, r2, #6, #3
 8009522:	2208      	movs	r2, #8
 8009524:	f362 2152 	bfi	r1, r2, #9, #10
 8009528:	f363 41de 	bfi	r1, r3, #19, #12
 800952c:	f363 71df 	bfi	r1, r3, #31, #1
 8009530:	aa0d      	add	r2, sp, #52	; 0x34
 8009532:	4810      	ldr	r0, [pc, #64]	; (8009574 <uart_stm32_configure+0x248>)
 8009534:	f005 fc15 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return;
 8009538:	e7d3      	b.n	80094e2 <uart_stm32_configure+0x1b6>
		return -ENOTSUP;
 800953a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800953e:	e7a7      	b.n	8009490 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8009540:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009544:	e7a4      	b.n	8009490 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8009546:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800954a:	e7a1      	b.n	8009490 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 800954c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009550:	e79e      	b.n	8009490 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8009552:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009556:	e79b      	b.n	8009490 <uart_stm32_configure+0x164>
 8009558:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800955c:	e798      	b.n	8009490 <uart_stm32_configure+0x164>
			return -ENOTSUP;
 800955e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009562:	e795      	b.n	8009490 <uart_stm32_configure+0x164>
 8009564:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009568:	e792      	b.n	8009490 <uart_stm32_configure+0x164>
 800956a:	bf00      	nop
 800956c:	40013800 	.word	0x40013800
 8009570:	08012940 	.word	0x08012940
 8009574:	080119ec 	.word	0x080119ec

08009578 <uart_stm32_async_init>:

static int uart_stm32_async_init(const struct device *dev)
{
 8009578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800957c:	4605      	mov	r5, r0
	struct uart_stm32_data *data = dev->data;
 800957e:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009580:	6843      	ldr	r3, [r0, #4]
 8009582:	681e      	ldr	r6, [r3, #0]

	data->uart_dev = dev;
 8009584:	60a0      	str	r0, [r4, #8]

	if (data->dma_rx.dma_dev != NULL) {
 8009586:	69a0      	ldr	r0, [r4, #24]
 8009588:	b120      	cbz	r0, 8009594 <uart_stm32_async_init+0x1c>
 800958a:	f006 ff3e 	bl	801040a <z_device_is_ready>
		if (!device_is_ready(data->dma_rx.dma_dev)) {
 800958e:	2800      	cmp	r0, #0
 8009590:	f000 80a3 	beq.w	80096da <uart_stm32_async_init+0x162>
			return -ENODEV;
		}
	}

	if (data->dma_tx.dma_dev != NULL) {
 8009594:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009598:	b12b      	cbz	r3, 80095a6 <uart_stm32_async_init+0x2e>
		if (!device_is_ready(data->dma_rx.dma_dev)) {
 800959a:	69a0      	ldr	r0, [r4, #24]
 800959c:	f006 ff35 	bl	801040a <z_device_is_ready>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	f000 809d 	beq.w	80096e0 <uart_stm32_async_init+0x168>
	struct uart_stm32_data *data = dev->data;
 80095a6:	692b      	ldr	r3, [r5, #16]
	data->dma_rx.enabled = false;
 80095a8:	2700      	movs	r7, #0
 80095aa:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80095ae:	686b      	ldr	r3, [r5, #4]
 80095b0:	681a      	ldr	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_TX(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 80095b2:	6893      	ldr	r3, [r2, #8]
 80095b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095b8:	6093      	str	r3, [r2, #8]

	/* Disable both TX and RX DMA requests */
	uart_stm32_dma_rx_disable(dev);
	uart_stm32_dma_tx_disable(dev);

	k_work_init_delayable(&data->dma_rx.timeout_work,
 80095ba:	494b      	ldr	r1, [pc, #300]	; (80096e8 <uart_stm32_async_init+0x170>)
 80095bc:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80095c0:	f007 f878 	bl	80106b4 <k_work_init_delayable>
			    uart_stm32_async_rx_timeout);
	k_work_init_delayable(&data->dma_tx.timeout_work,
 80095c4:	4949      	ldr	r1, [pc, #292]	; (80096ec <uart_stm32_async_init+0x174>)
 80095c6:	f504 7088 	add.w	r0, r4, #272	; 0x110
 80095ca:	f007 f873 	bl	80106b4 <k_work_init_delayable>
			    uart_stm32_async_tx_timeout);

	/* Configure dma rx config */
	memset(&data->dma_rx.blk_cfg, 0, sizeof(data->dma_rx.blk_cfg));
 80095ce:	f104 0844 	add.w	r8, r4, #68	; 0x44
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 80095d2:	2220      	movs	r2, #32
 80095d4:	4639      	mov	r1, r7
 80095d6:	4640      	mov	r0, r8
 80095d8:	f007 fb85 	bl	8010ce6 <memset>
    data_reg_addr = (uint32_t) &(USARTx->TDR);
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80095dc:	f106 0324 	add.w	r3, r6, #36	; 0x24
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X)
	data->dma_rx.blk_cfg.source_address =
				LL_USART_DMA_GetRegAddr(UartInstance);
#else
	data->dma_rx.blk_cfg.source_address =
 80095e0:	6463      	str	r3, [r4, #68]	; 0x44
				LL_USART_DMA_GetRegAddr(UartInstance,
						LL_USART_DMA_REG_DATA_RECEIVE);
#endif

	data->dma_rx.blk_cfg.dest_address = 0; /* dest not ready */
 80095e2:	64a7      	str	r7, [r4, #72]	; 0x48

	if (data->dma_rx.src_addr_increment) {
 80095e4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d056      	beq.n	800969a <uart_stm32_async_init+0x122>
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 80095ec:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80095f0:	f36f 0383 	bfc	r3, #2, #2
 80095f4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	} else {
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	if (data->dma_rx.dst_addr_increment) {
 80095f8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d054      	beq.n	80096aa <uart_stm32_async_init+0x132>
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8009600:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009604:	f36f 1305 	bfc	r3, #4, #2
 8009608:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	} else {
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	/* RX disable circular buffer */
	data->dma_rx.blk_cfg.source_reload_en  = 0;
 800960c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009610:	f36f 1386 	bfc	r3, #6, #1
 8009614:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	data->dma_rx.blk_cfg.dest_reload_en = 0;
 8009618:	b2db      	uxtb	r3, r3
 800961a:	f36f 13c7 	bfc	r3, #7, #1
 800961e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	data->dma_rx.blk_cfg.fifo_mode_control = data->dma_rx.fifo_threshold;
 8009622:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009624:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8009628:	f362 0303 	bfi	r3, r2, #0, #4
 800962c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

	data->dma_rx.dma_cfg.head_block = &data->dma_rx.blk_cfg;
 8009630:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	data->dma_rx.dma_cfg.user_data = (void *)dev;
 8009634:	6365      	str	r5, [r4, #52]	; 0x34
	data->rx_next_buffer = NULL;
 8009636:	2700      	movs	r7, #0
 8009638:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
	data->rx_next_buffer_len = 0;
 800963c:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c

	/* Configure dma tx config */
	memset(&data->dma_tx.blk_cfg, 0, sizeof(data->dma_tx.blk_cfg));
 8009640:	f104 08dc 	add.w	r8, r4, #220	; 0xdc
 8009644:	2220      	movs	r2, #32
 8009646:	4639      	mov	r1, r7
 8009648:	4640      	mov	r0, r8
 800964a:	f007 fb4c 	bl	8010ce6 <memset>
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 800964e:	3628      	adds	r6, #40	; 0x28
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X)
	data->dma_tx.blk_cfg.dest_address =
			LL_USART_DMA_GetRegAddr(UartInstance);
#else
	data->dma_tx.blk_cfg.dest_address =
 8009650:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
			LL_USART_DMA_GetRegAddr(UartInstance,
					LL_USART_DMA_REG_DATA_TRANSMIT);
#endif

	data->dma_tx.blk_cfg.source_address = 0; /* not ready */
 8009654:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc

	if (data->dma_tx.src_addr_increment) {
 8009658:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
 800965c:	b36b      	cbz	r3, 80096ba <uart_stm32_async_init+0x142>
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 800965e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 8009662:	f36f 0383 	bfc	r3, #2, #2
 8009666:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	} else {
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	if (data->dma_tx.dst_addr_increment) {
 800966a:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
 800966e:	b363      	cbz	r3, 80096ca <uart_stm32_async_init+0x152>
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8009670:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 8009674:	f36f 1305 	bfc	r3, #4, #2
 8009678:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	} else {
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	data->dma_tx.blk_cfg.fifo_mode_control = data->dma_tx.fifo_threshold;
 800967c:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 8009680:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
 8009684:	f362 0303 	bfi	r3, r2, #0, #4
 8009688:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9

	data->dma_tx.dma_cfg.head_block = &data->dma_tx.blk_cfg;
 800968c:	f8c4 80c8 	str.w	r8, [r4, #200]	; 0xc8
	data->dma_tx.dma_cfg.user_data = (void *)dev;
 8009690:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc

	return 0;
 8009694:	2000      	movs	r0, #0
}
 8009696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 800969a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800969e:	2202      	movs	r2, #2
 80096a0:	f362 0383 	bfi	r3, r2, #2, #2
 80096a4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80096a8:	e7a6      	b.n	80095f8 <uart_stm32_async_init+0x80>
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80096aa:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80096ae:	2202      	movs	r2, #2
 80096b0:	f362 1305 	bfi	r3, r2, #4, #2
 80096b4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80096b8:	e7a8      	b.n	800960c <uart_stm32_async_init+0x94>
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80096ba:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 80096be:	2202      	movs	r2, #2
 80096c0:	f362 0383 	bfi	r3, r2, #2, #2
 80096c4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 80096c8:	e7cf      	b.n	800966a <uart_stm32_async_init+0xf2>
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80096ca:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 80096ce:	2202      	movs	r2, #2
 80096d0:	f362 1305 	bfi	r3, r2, #4, #2
 80096d4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 80096d8:	e7d0      	b.n	800967c <uart_stm32_async_init+0x104>
			return -ENODEV;
 80096da:	f06f 0012 	mvn.w	r0, #18
 80096de:	e7da      	b.n	8009696 <uart_stm32_async_init+0x11e>
			return -ENODEV;
 80096e0:	f06f 0012 	mvn.w	r0, #18
 80096e4:	e7d7      	b.n	8009696 <uart_stm32_async_init+0x11e>
 80096e6:	bf00      	nop
 80096e8:	08009d89 	.word	0x08009d89
 80096ec:	08009935 	.word	0x08009935

080096f0 <uart_stm32_dma_replace_buffer>:
{
 80096f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f4:	b08c      	sub	sp, #48	; 0x30
 80096f6:	af02      	add	r7, sp, #8
 80096f8:	4605      	mov	r5, r0
	struct uart_stm32_data *data = dev->data;
 80096fa:	6904      	ldr	r4, [r0, #16]
	LOG_DBG("Replacing RX buffer: %d", data->rx_next_buffer_len);
 80096fc:	2301      	movs	r3, #1
 80096fe:	813b      	strh	r3, [r7, #8]
 8009700:	2302      	movs	r3, #2
 8009702:	817b      	strh	r3, [r7, #10]
 8009704:	466e      	mov	r6, sp
 8009706:	b088      	sub	sp, #32
 8009708:	a902      	add	r1, sp, #8
 800970a:	466b      	mov	r3, sp
 800970c:	f113 0214 	adds.w	r2, r3, #20
 8009710:	d06e      	beq.n	80097f0 <uart_stm32_dma_replace_buffer+0x100>
 8009712:	2310      	movs	r3, #16
 8009714:	2001      	movs	r0, #1
 8009716:	8138      	strh	r0, [r7, #8]
 8009718:	b11a      	cbz	r2, 8009722 <uart_stm32_dma_replace_buffer+0x32>
 800971a:	2b04      	cmp	r3, #4
 800971c:	dd01      	ble.n	8009722 <uart_stm32_dma_replace_buffer+0x32>
 800971e:	4837      	ldr	r0, [pc, #220]	; (80097fc <uart_stm32_dma_replace_buffer+0x10c>)
 8009720:	6108      	str	r0, [r1, #16]
 8009722:	2002      	movs	r0, #2
 8009724:	8178      	strh	r0, [r7, #10]
 8009726:	b11a      	cbz	r2, 8009730 <uart_stm32_dma_replace_buffer+0x40>
 8009728:	2b08      	cmp	r3, #8
 800972a:	dd01      	ble.n	8009730 <uart_stm32_dma_replace_buffer+0x40>
 800972c:	4834      	ldr	r0, [pc, #208]	; (8009800 <uart_stm32_dma_replace_buffer+0x110>)
 800972e:	6148      	str	r0, [r1, #20]
 8009730:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
 8009734:	b112      	cbz	r2, 800973c <uart_stm32_dma_replace_buffer+0x4c>
 8009736:	2b0c      	cmp	r3, #12
 8009738:	dd00      	ble.n	800973c <uart_stm32_dma_replace_buffer+0x4c>
 800973a:	6188      	str	r0, [r1, #24]
 800973c:	2b0f      	cmp	r3, #15
 800973e:	dd5a      	ble.n	80097f6 <uart_stm32_dma_replace_buffer+0x106>
 8009740:	2310      	movs	r3, #16
 8009742:	b12a      	cbz	r2, 8009750 <uart_stm32_dma_replace_buffer+0x60>
 8009744:	2000      	movs	r0, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	2004      	movs	r0, #4
 800974a:	7138      	strb	r0, [r7, #4]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	60c8      	str	r0, [r1, #12]
 8009750:	2100      	movs	r1, #0
 8009752:	f36f 0100 	bfc	r1, #0, #1
 8009756:	f36f 0141 	bfc	r1, #1, #1
 800975a:	f36f 0182 	bfc	r1, #2, #1
 800975e:	f36f 01c5 	bfc	r1, #3, #3
 8009762:	2004      	movs	r0, #4
 8009764:	f360 1188 	bfi	r1, r0, #6, #3
 8009768:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 800976c:	f363 2152 	bfi	r1, r3, #9, #10
 8009770:	f36f 41de 	bfc	r1, #19, #12
 8009774:	f36f 71df 	bfc	r1, #31, #1
 8009778:	2300      	movs	r3, #0
 800977a:	4822      	ldr	r0, [pc, #136]	; (8009804 <uart_stm32_dma_replace_buffer+0x114>)
 800977c:	f005 faf1 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8009780:	46b5      	mov	sp, r6
	data->dma_rx.offset = 0;
 8009782:	2200      	movs	r2, #0
 8009784:	66e2      	str	r2, [r4, #108]	; 0x6c
	data->dma_rx.counter = 0;
 8009786:	6722      	str	r2, [r4, #112]	; 0x70
	data->dma_rx.buffer = data->rx_next_buffer;
 8009788:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800978c:	6663      	str	r3, [r4, #100]	; 0x64
	data->dma_rx.buffer_length = data->rx_next_buffer_len;
 800978e:	f8d4 614c 	ldr.w	r6, [r4, #332]	; 0x14c
 8009792:	66a6      	str	r6, [r4, #104]	; 0x68
	data->dma_rx.blk_cfg.block_size = data->dma_rx.buffer_length;
 8009794:	65a6      	str	r6, [r4, #88]	; 0x58
	data->dma_rx.blk_cfg.dest_address = (uint32_t)data->dma_rx.buffer;
 8009796:	64a3      	str	r3, [r4, #72]	; 0x48
	data->rx_next_buffer = NULL;
 8009798:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	data->rx_next_buffer_len = 0;
 800979c:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
	dma_reload(data->dma_rx.dma_dev, data->dma_rx.dma_channel,
 80097a0:	69a0      	ldr	r0, [r4, #24]
 80097a2:	69e1      	ldr	r1, [r4, #28]
 80097a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
#endif
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	if (api->reload) {
 80097a6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80097aa:	f8dc 8004 	ldr.w	r8, [ip, #4]
 80097ae:	f1b8 0f00 	cmp.w	r8, #0
 80097b2:	d001      	beq.n	80097b8 <uart_stm32_dma_replace_buffer+0xc8>
		return api->reload(dev, channel, src, dst, size);
 80097b4:	9600      	str	r6, [sp, #0]
 80097b6:	47c0      	blx	r8
	dma_start(data->dma_rx.dma_dev, data->dma_rx.dma_channel);
 80097b8:	69a0      	ldr	r0, [r4, #24]
 80097ba:	69e1      	ldr	r1, [r4, #28]
 */
__syscall int dma_start(const struct device *dev, uint32_t channel);

static inline int z_impl_dma_start(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
 80097bc:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	return api->start(dev, channel);
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	4798      	blx	r3
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80097c2:	686b      	ldr	r3, [r5, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80097c6:	2210      	movs	r2, #16
 80097c8:	621a      	str	r2, [r3, #32]
	struct uart_event evt = {
 80097ca:	2300      	movs	r3, #0
 80097cc:	60bb      	str	r3, [r7, #8]
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	613b      	str	r3, [r7, #16]
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	61bb      	str	r3, [r7, #24]
 80097d6:	2303      	movs	r3, #3
 80097d8:	723b      	strb	r3, [r7, #8]
	if (data->async_cb) {
 80097da:	68e3      	ldr	r3, [r4, #12]
 80097dc:	b123      	cbz	r3, 80097e8 <uart_stm32_dma_replace_buffer+0xf8>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 80097de:	6922      	ldr	r2, [r4, #16]
 80097e0:	f107 0108 	add.w	r1, r7, #8
 80097e4:	68a0      	ldr	r0, [r4, #8]
 80097e6:	4798      	blx	r3
}
 80097e8:	3728      	adds	r7, #40	; 0x28
 80097ea:	46bd      	mov	sp, r7
 80097ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_DBG("Replacing RX buffer: %d", data->rx_next_buffer_len);
 80097f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80097f4:	e78e      	b.n	8009714 <uart_stm32_dma_replace_buffer+0x24>
 80097f6:	f06f 031b 	mvn.w	r3, #27
 80097fa:	e7a2      	b.n	8009742 <uart_stm32_dma_replace_buffer+0x52>
 80097fc:	08012eac 	.word	0x08012eac
 8009800:	080130c8 	.word	0x080130c8
 8009804:	080119ec 	.word	0x080119ec

08009808 <uart_stm32_async_tx_abort>:
{
 8009808:	b5b0      	push	{r4, r5, r7, lr}
 800980a:	b08c      	sub	sp, #48	; 0x30
 800980c:	af00      	add	r7, sp, #0
	struct uart_stm32_data *data = dev->data;
 800980e:	6904      	ldr	r4, [r0, #16]
	size_t tx_buffer_length = data->dma_tx.buffer_length;
 8009810:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
	if (tx_buffer_length == 0) {
 8009814:	2d00      	cmp	r5, #0
 8009816:	f000 8083 	beq.w	8009920 <uart_stm32_async_tx_abort+0x118>
	(void)k_work_cancel_delayable(&data->dma_tx.timeout_work);
 800981a:	f504 7088 	add.w	r0, r4, #272	; 0x110
 800981e:	f006 ff7b 	bl	8010718 <k_work_cancel_delayable>
	if (!dma_get_status(data->dma_tx.dma_dev,
 8009822:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8009826:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 * @retval Negative errno code if failure.
 */
static inline int dma_get_status(const struct device *dev, uint32_t channel,
				 struct dma_status *stat)
{
	const struct dma_driver_api *api =
 800982a:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	if (api->get_status) {
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	b13b      	cbz	r3, 8009840 <uart_stm32_async_tx_abort+0x38>
		return api->get_status(dev, channel, stat);
 8009830:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009834:	4798      	blx	r3
 8009836:	b918      	cbnz	r0, 8009840 <uart_stm32_async_tx_abort+0x38>
		data->dma_tx.counter = tx_buffer_length - stat.pending_length;
 8009838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983a:	1aed      	subs	r5, r5, r3
 800983c:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	dma_stop(data->dma_tx.dma_dev, data->dma_tx.dma_channel);
 8009840:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8009844:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	const struct dma_driver_api *api =
 8009848:	6883      	ldr	r3, [r0, #8]
	return api->stop(dev, channel);
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	4798      	blx	r3
	LOG_DBG("tx abort: %d", data->dma_tx.counter);
 800984e:	2301      	movs	r3, #1
 8009850:	813b      	strh	r3, [r7, #8]
 8009852:	2302      	movs	r3, #2
 8009854:	817b      	strh	r3, [r7, #10]
 8009856:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800985a:	466d      	mov	r5, sp
 800985c:	b088      	sub	sp, #32
 800985e:	466b      	mov	r3, sp
 8009860:	f113 020c 	adds.w	r2, r3, #12
 8009864:	d056      	beq.n	8009914 <uart_stm32_async_tx_abort+0x10c>
 8009866:	2110      	movs	r1, #16
 8009868:	2001      	movs	r0, #1
 800986a:	8138      	strh	r0, [r7, #8]
 800986c:	b11a      	cbz	r2, 8009876 <uart_stm32_async_tx_abort+0x6e>
 800986e:	2904      	cmp	r1, #4
 8009870:	dd01      	ble.n	8009876 <uart_stm32_async_tx_abort+0x6e>
 8009872:	482d      	ldr	r0, [pc, #180]	; (8009928 <uart_stm32_async_tx_abort+0x120>)
 8009874:	6118      	str	r0, [r3, #16]
 8009876:	2002      	movs	r0, #2
 8009878:	8178      	strh	r0, [r7, #10]
 800987a:	b11a      	cbz	r2, 8009884 <uart_stm32_async_tx_abort+0x7c>
 800987c:	2908      	cmp	r1, #8
 800987e:	dd01      	ble.n	8009884 <uart_stm32_async_tx_abort+0x7c>
 8009880:	482a      	ldr	r0, [pc, #168]	; (800992c <uart_stm32_async_tx_abort+0x124>)
 8009882:	6158      	str	r0, [r3, #20]
 8009884:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
 8009888:	b122      	cbz	r2, 8009894 <uart_stm32_async_tx_abort+0x8c>
 800988a:	290c      	cmp	r1, #12
 800988c:	dd02      	ble.n	8009894 <uart_stm32_async_tx_abort+0x8c>
 800988e:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
 8009892:	6198      	str	r0, [r3, #24]
 8009894:	290f      	cmp	r1, #15
 8009896:	dd40      	ble.n	800991a <uart_stm32_async_tx_abort+0x112>
 8009898:	2010      	movs	r0, #16
 800989a:	b12a      	cbz	r2, 80098a8 <uart_stm32_async_tx_abort+0xa0>
 800989c:	2100      	movs	r1, #0
 800989e:	6079      	str	r1, [r7, #4]
 80098a0:	2104      	movs	r1, #4
 80098a2:	7139      	strb	r1, [r7, #4]
 80098a4:	6879      	ldr	r1, [r7, #4]
 80098a6:	60d9      	str	r1, [r3, #12]
 80098a8:	2100      	movs	r1, #0
 80098aa:	f36f 0100 	bfc	r1, #0, #1
 80098ae:	f36f 0141 	bfc	r1, #1, #1
 80098b2:	f36f 0182 	bfc	r1, #2, #1
 80098b6:	f36f 01c5 	bfc	r1, #3, #3
 80098ba:	2304      	movs	r3, #4
 80098bc:	f363 1188 	bfi	r1, r3, #6, #3
 80098c0:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 80098c4:	f363 2152 	bfi	r1, r3, #9, #10
 80098c8:	f36f 41de 	bfc	r1, #19, #12
 80098cc:	f36f 71df 	bfc	r1, #31, #1
 80098d0:	2300      	movs	r3, #0
 80098d2:	4817      	ldr	r0, [pc, #92]	; (8009930 <uart_stm32_async_tx_abort+0x128>)
 80098d4:	f005 fa45 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 80098d8:	46ad      	mov	sp, r5
	struct uart_event event = {
 80098da:	2300      	movs	r3, #0
 80098dc:	60bb      	str	r3, [r7, #8]
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	613b      	str	r3, [r7, #16]
 80098e2:	617b      	str	r3, [r7, #20]
 80098e4:	61bb      	str	r3, [r7, #24]
 80098e6:	2201      	movs	r2, #1
 80098e8:	723a      	strb	r2, [r7, #8]
		.data.tx.buf = data->dma_tx.buffer,
 80098ea:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	struct uart_event event = {
 80098ee:	60fa      	str	r2, [r7, #12]
		.data.tx.len = data->dma_tx.counter
 80098f0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	struct uart_event event = {
 80098f4:	613a      	str	r2, [r7, #16]
	data->dma_tx.buffer_length = 0;
 80098f6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	data->dma_tx.counter = 0;
 80098fa:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	if (data->async_cb) {
 80098fe:	68e3      	ldr	r3, [r4, #12]
 8009900:	b123      	cbz	r3, 800990c <uart_stm32_async_tx_abort+0x104>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8009902:	6922      	ldr	r2, [r4, #16]
 8009904:	f107 0108 	add.w	r1, r7, #8
 8009908:	68a0      	ldr	r0, [r4, #8]
 800990a:	4798      	blx	r3
	return 0;
 800990c:	2000      	movs	r0, #0
}
 800990e:	3730      	adds	r7, #48	; 0x30
 8009910:	46bd      	mov	sp, r7
 8009912:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_DBG("tx abort: %d", data->dma_tx.counter);
 8009914:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009918:	e7a6      	b.n	8009868 <uart_stm32_async_tx_abort+0x60>
 800991a:	f06f 001b 	mvn.w	r0, #27
 800991e:	e7bc      	b.n	800989a <uart_stm32_async_tx_abort+0x92>
		return -EFAULT;
 8009920:	f06f 000d 	mvn.w	r0, #13
 8009924:	e7f3      	b.n	800990e <uart_stm32_async_tx_abort+0x106>
 8009926:	bf00      	nop
 8009928:	08012ec8 	.word	0x08012ec8
 800992c:	0801315c 	.word	0x0801315c
 8009930:	080119ec 	.word	0x080119ec

08009934 <uart_stm32_async_tx_timeout>:
{
 8009934:	b500      	push	{lr}
 8009936:	b091      	sub	sp, #68	; 0x44
	const struct device *dev = data->uart_dev;
 8009938:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
	uart_stm32_async_tx_abort(dev);
 800993c:	6880      	ldr	r0, [r0, #8]
 800993e:	f7ff ff63 	bl	8009808 <uart_stm32_async_tx_abort>
	LOG_DBG("tx: async timeout");
 8009942:	2301      	movs	r3, #1
 8009944:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009948:	2302      	movs	r3, #2
 800994a:	f8ad 300a 	strh.w	r3, [sp, #10]
 800994e:	4b12      	ldr	r3, [pc, #72]	; (8009998 <uart_stm32_async_tx_timeout+0x64>)
 8009950:	930e      	str	r3, [sp, #56]	; 0x38
 8009952:	4b12      	ldr	r3, [pc, #72]	; (800999c <uart_stm32_async_tx_timeout+0x68>)
 8009954:	930f      	str	r3, [sp, #60]	; 0x3c
 8009956:	2300      	movs	r3, #0
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	2203      	movs	r2, #3
 800995c:	f88d 2004 	strb.w	r2, [sp, #4]
 8009960:	9a01      	ldr	r2, [sp, #4]
 8009962:	920d      	str	r2, [sp, #52]	; 0x34
 8009964:	4619      	mov	r1, r3
 8009966:	f363 0100 	bfi	r1, r3, #0, #1
 800996a:	f363 0141 	bfi	r1, r3, #1, #1
 800996e:	f363 0182 	bfi	r1, r3, #2, #1
 8009972:	f363 01c5 	bfi	r1, r3, #3, #3
 8009976:	2204      	movs	r2, #4
 8009978:	f362 1188 	bfi	r1, r2, #6, #3
 800997c:	220c      	movs	r2, #12
 800997e:	f362 2152 	bfi	r1, r2, #9, #10
 8009982:	f363 41de 	bfi	r1, r3, #19, #12
 8009986:	f363 71df 	bfi	r1, r3, #31, #1
 800998a:	aa0d      	add	r2, sp, #52	; 0x34
 800998c:	4804      	ldr	r0, [pc, #16]	; (80099a0 <uart_stm32_async_tx_timeout+0x6c>)
 800998e:	f005 f9e8 	bl	800ed62 <z_impl_z_log_msg2_static_create>
}
 8009992:	b011      	add	sp, #68	; 0x44
 8009994:	f85d fb04 	ldr.w	pc, [sp], #4
 8009998:	08012edc 	.word	0x08012edc
 800999c:	080130ac 	.word	0x080130ac
 80099a0:	080119ec 	.word	0x080119ec

080099a4 <uart_stm32_async_rx_enable>:
{
 80099a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099a6:	b0a3      	sub	sp, #140	; 0x8c
 80099a8:	4606      	mov	r6, r0
	struct uart_stm32_data *data = dev->data;
 80099aa:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80099ac:	6840      	ldr	r0, [r0, #4]
 80099ae:	6805      	ldr	r5, [r0, #0]
	if (data->dma_rx.dma_dev == NULL) {
 80099b0:	69a0      	ldr	r0, [r4, #24]
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f000 80e0 	beq.w	8009b78 <uart_stm32_async_rx_enable+0x1d4>
	if (data->dma_rx.enabled) {
 80099b8:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
 80099bc:	2800      	cmp	r0, #0
 80099be:	d16c      	bne.n	8009a9a <uart_stm32_async_rx_enable+0xf6>
	data->dma_rx.offset = 0;
 80099c0:	2000      	movs	r0, #0
 80099c2:	66e0      	str	r0, [r4, #108]	; 0x6c
	data->dma_rx.buffer = rx_buf;
 80099c4:	6661      	str	r1, [r4, #100]	; 0x64
	data->dma_rx.buffer_length = buf_size;
 80099c6:	66a2      	str	r2, [r4, #104]	; 0x68
	data->dma_rx.counter = 0;
 80099c8:	6720      	str	r0, [r4, #112]	; 0x70
	data->dma_rx.timeout = timeout;
 80099ca:	6763      	str	r3, [r4, #116]	; 0x74
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	f023 0320 	bic.w	r3, r3, #32
 80099d2:	602b      	str	r3, [r5, #0]
	data->dma_rx.blk_cfg.block_size = buf_size;
 80099d4:	65a2      	str	r2, [r4, #88]	; 0x58
	data->dma_rx.blk_cfg.dest_address = (uint32_t)data->dma_rx.buffer;
 80099d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099d8:	64a3      	str	r3, [r4, #72]	; 0x48
	ret = dma_config(data->dma_rx.dma_dev, data->dma_rx.dma_channel,
 80099da:	69a0      	ldr	r0, [r4, #24]
	const struct dma_driver_api *api =
 80099dc:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, channel, config);
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f104 0220 	add.w	r2, r4, #32
 80099e4:	69e1      	ldr	r1, [r4, #28]
 80099e6:	4798      	blx	r3
	if (ret != 0) {
 80099e8:	4607      	mov	r7, r0
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d17a      	bne.n	8009ae4 <uart_stm32_async_rx_enable+0x140>
	if (dma_start(data->dma_rx.dma_dev, data->dma_rx.dma_channel)) {
 80099ee:	69a0      	ldr	r0, [r4, #24]
 80099f0:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 80099f2:	6883      	ldr	r3, [r0, #8]
	return api->start(dev, channel);
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	4798      	blx	r3
 80099f8:	2800      	cmp	r0, #0
 80099fa:	f040 8098 	bne.w	8009b2e <uart_stm32_async_rx_enable+0x18a>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80099fe:	6873      	ldr	r3, [r6, #4]
 8009a00:	681a      	ldr	r2, [r3, #0]
	struct uart_stm32_data *data = dev->data;
 8009a02:	6931      	ldr	r1, [r6, #16]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8009a04:	6893      	ldr	r3, [r2, #8]
 8009a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a0a:	6093      	str	r3, [r2, #8]
	data->dma_rx.enabled = true;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8009a12:	2310      	movs	r3, #16
 8009a14:	622b      	str	r3, [r5, #32]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8009a16:	682b      	ldr	r3, [r5, #0]
 8009a18:	f043 0310 	orr.w	r3, r3, #16
 8009a1c:	602b      	str	r3, [r5, #0]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8009a1e:	68ab      	ldr	r3, [r5, #8]
 8009a20:	f043 0301 	orr.w	r3, r3, #1
 8009a24:	60ab      	str	r3, [r5, #8]
	struct uart_event evt = {
 8009a26:	2300      	movs	r3, #0
 8009a28:	9302      	str	r3, [sp, #8]
 8009a2a:	9303      	str	r3, [sp, #12]
 8009a2c:	9304      	str	r3, [sp, #16]
 8009a2e:	9305      	str	r3, [sp, #20]
 8009a30:	9306      	str	r3, [sp, #24]
 8009a32:	2303      	movs	r3, #3
 8009a34:	f88d 3008 	strb.w	r3, [sp, #8]
	if (data->async_cb) {
 8009a38:	68e3      	ldr	r3, [r4, #12]
 8009a3a:	b11b      	cbz	r3, 8009a44 <uart_stm32_async_rx_enable+0xa0>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8009a3c:	6922      	ldr	r2, [r4, #16]
 8009a3e:	a902      	add	r1, sp, #8
 8009a40:	68a0      	ldr	r0, [r4, #8]
 8009a42:	4798      	blx	r3
	LOG_DBG("async rx enabled");
 8009a44:	2301      	movs	r3, #1
 8009a46:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009a50:	4b4b      	ldr	r3, [pc, #300]	; (8009b80 <uart_stm32_async_rx_enable+0x1dc>)
 8009a52:	930e      	str	r3, [sp, #56]	; 0x38
 8009a54:	4b4b      	ldr	r3, [pc, #300]	; (8009b84 <uart_stm32_async_rx_enable+0x1e0>)
 8009a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a58:	2300      	movs	r3, #0
 8009a5a:	9301      	str	r3, [sp, #4]
 8009a5c:	2203      	movs	r2, #3
 8009a5e:	f88d 2004 	strb.w	r2, [sp, #4]
 8009a62:	9a01      	ldr	r2, [sp, #4]
 8009a64:	920d      	str	r2, [sp, #52]	; 0x34
 8009a66:	4619      	mov	r1, r3
 8009a68:	f363 0100 	bfi	r1, r3, #0, #1
 8009a6c:	f363 0141 	bfi	r1, r3, #1, #1
 8009a70:	f363 0182 	bfi	r1, r3, #2, #1
 8009a74:	f363 01c5 	bfi	r1, r3, #3, #3
 8009a78:	2204      	movs	r2, #4
 8009a7a:	f362 1188 	bfi	r1, r2, #6, #3
 8009a7e:	220c      	movs	r2, #12
 8009a80:	f362 2152 	bfi	r1, r2, #9, #10
 8009a84:	f363 41de 	bfi	r1, r3, #19, #12
 8009a88:	f363 71df 	bfi	r1, r3, #31, #1
 8009a8c:	aa0d      	add	r2, sp, #52	; 0x34
 8009a8e:	483e      	ldr	r0, [pc, #248]	; (8009b88 <uart_stm32_async_rx_enable+0x1e4>)
 8009a90:	f005 f967 	bl	800ed62 <z_impl_z_log_msg2_static_create>
}
 8009a94:	4638      	mov	r0, r7
 8009a96:	b023      	add	sp, #140	; 0x8c
 8009a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("RX was already enabled");
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009aa0:	4b3a      	ldr	r3, [pc, #232]	; (8009b8c <uart_stm32_async_rx_enable+0x1e8>)
 8009aa2:	9320      	str	r3, [sp, #128]	; 0x80
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	9301      	str	r3, [sp, #4]
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	f88d 2004 	strb.w	r2, [sp, #4]
 8009aae:	9901      	ldr	r1, [sp, #4]
 8009ab0:	911f      	str	r1, [sp, #124]	; 0x7c
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	f363 0100 	bfi	r1, r3, #0, #1
 8009ab8:	f363 0141 	bfi	r1, r3, #1, #1
 8009abc:	f363 0182 	bfi	r1, r3, #2, #1
 8009ac0:	f363 01c5 	bfi	r1, r3, #3, #3
 8009ac4:	f362 1188 	bfi	r1, r2, #6, #3
 8009ac8:	2208      	movs	r2, #8
 8009aca:	f362 2152 	bfi	r1, r2, #9, #10
 8009ace:	f363 41de 	bfi	r1, r3, #19, #12
 8009ad2:	f363 71df 	bfi	r1, r3, #31, #1
 8009ad6:	aa1f      	add	r2, sp, #124	; 0x7c
 8009ad8:	482b      	ldr	r0, [pc, #172]	; (8009b88 <uart_stm32_async_rx_enable+0x1e4>)
 8009ada:	f005 f942 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EBUSY;
 8009ade:	f06f 070f 	mvn.w	r7, #15
 8009ae2:	e7d7      	b.n	8009a94 <uart_stm32_async_rx_enable+0xf0>
		LOG_ERR("UART ERR: RX DMA config failed!");
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f8ad 2008 	strh.w	r2, [sp, #8]
 8009aea:	4b29      	ldr	r3, [pc, #164]	; (8009b90 <uart_stm32_async_rx_enable+0x1ec>)
 8009aec:	931a      	str	r3, [sp, #104]	; 0x68
 8009aee:	2300      	movs	r3, #0
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	2102      	movs	r1, #2
 8009af4:	f88d 1004 	strb.w	r1, [sp, #4]
 8009af8:	9901      	ldr	r1, [sp, #4]
 8009afa:	9119      	str	r1, [sp, #100]	; 0x64
 8009afc:	4619      	mov	r1, r3
 8009afe:	f363 0100 	bfi	r1, r3, #0, #1
 8009b02:	f363 0141 	bfi	r1, r3, #1, #1
 8009b06:	f363 0182 	bfi	r1, r3, #2, #1
 8009b0a:	f363 01c5 	bfi	r1, r3, #3, #3
 8009b0e:	f362 1188 	bfi	r1, r2, #6, #3
 8009b12:	2208      	movs	r2, #8
 8009b14:	f362 2152 	bfi	r1, r2, #9, #10
 8009b18:	f363 41de 	bfi	r1, r3, #19, #12
 8009b1c:	f363 71df 	bfi	r1, r3, #31, #1
 8009b20:	aa19      	add	r2, sp, #100	; 0x64
 8009b22:	4819      	ldr	r0, [pc, #100]	; (8009b88 <uart_stm32_async_rx_enable+0x1e4>)
 8009b24:	f005 f91d 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8009b28:	f06f 0715 	mvn.w	r7, #21
 8009b2c:	e7b2      	b.n	8009a94 <uart_stm32_async_rx_enable+0xf0>
		LOG_ERR("UART ERR: RX DMA start failed!");
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f8ad 2008 	strh.w	r2, [sp, #8]
 8009b34:	4b17      	ldr	r3, [pc, #92]	; (8009b94 <uart_stm32_async_rx_enable+0x1f0>)
 8009b36:	9314      	str	r3, [sp, #80]	; 0x50
 8009b38:	2300      	movs	r3, #0
 8009b3a:	9301      	str	r3, [sp, #4]
 8009b3c:	2102      	movs	r1, #2
 8009b3e:	f88d 1004 	strb.w	r1, [sp, #4]
 8009b42:	9901      	ldr	r1, [sp, #4]
 8009b44:	9113      	str	r1, [sp, #76]	; 0x4c
 8009b46:	4619      	mov	r1, r3
 8009b48:	f363 0100 	bfi	r1, r3, #0, #1
 8009b4c:	f363 0141 	bfi	r1, r3, #1, #1
 8009b50:	f363 0182 	bfi	r1, r3, #2, #1
 8009b54:	f363 01c5 	bfi	r1, r3, #3, #3
 8009b58:	f362 1188 	bfi	r1, r2, #6, #3
 8009b5c:	2208      	movs	r2, #8
 8009b5e:	f362 2152 	bfi	r1, r2, #9, #10
 8009b62:	f363 41de 	bfi	r1, r3, #19, #12
 8009b66:	f363 71df 	bfi	r1, r3, #31, #1
 8009b6a:	aa13      	add	r2, sp, #76	; 0x4c
 8009b6c:	4806      	ldr	r0, [pc, #24]	; (8009b88 <uart_stm32_async_rx_enable+0x1e4>)
 8009b6e:	f005 f8f8 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EFAULT;
 8009b72:	f06f 070d 	mvn.w	r7, #13
 8009b76:	e78d      	b.n	8009a94 <uart_stm32_async_rx_enable+0xf0>
		return -ENODEV;
 8009b78:	f06f 0712 	mvn.w	r7, #18
 8009b7c:	e78a      	b.n	8009a94 <uart_stm32_async_rx_enable+0xf0>
 8009b7e:	bf00      	nop
 8009b80:	08012f4c 	.word	0x08012f4c
 8009b84:	08013170 	.word	0x08013170
 8009b88:	080119ec 	.word	0x080119ec
 8009b8c:	08012ef4 	.word	0x08012ef4
 8009b90:	08012f0c 	.word	0x08012f0c
 8009b94:	08012f2c 	.word	0x08012f2c

08009b98 <async_evt_rx_rdy>:
{
 8009b98:	b5b0      	push	{r4, r5, r7, lr}
 8009b9a:	b08e      	sub	sp, #56	; 0x38
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4604      	mov	r4, r0
	LOG_DBG("rx_rdy: (%d %d)", data->dma_rx.offset, data->dma_rx.counter);
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	80bb      	strh	r3, [r7, #4]
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	80fb      	strh	r3, [r7, #6]
 8009ba8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8009baa:	466d      	mov	r5, sp
 8009bac:	b088      	sub	sp, #32
 8009bae:	466b      	mov	r3, sp
 8009bb0:	f113 020c 	adds.w	r2, r3, #12
 8009bb4:	d052      	beq.n	8009c5c <async_evt_rx_rdy+0xc4>
 8009bb6:	2114      	movs	r1, #20
 8009bb8:	2001      	movs	r0, #1
 8009bba:	80b8      	strh	r0, [r7, #4]
 8009bbc:	b11a      	cbz	r2, 8009bc6 <async_evt_rx_rdy+0x2e>
 8009bbe:	2904      	cmp	r1, #4
 8009bc0:	dd01      	ble.n	8009bc6 <async_evt_rx_rdy+0x2e>
 8009bc2:	482e      	ldr	r0, [pc, #184]	; (8009c7c <async_evt_rx_rdy+0xe4>)
 8009bc4:	6118      	str	r0, [r3, #16]
 8009bc6:	2002      	movs	r0, #2
 8009bc8:	80f8      	strh	r0, [r7, #6]
 8009bca:	b11a      	cbz	r2, 8009bd4 <async_evt_rx_rdy+0x3c>
 8009bcc:	2908      	cmp	r1, #8
 8009bce:	dd01      	ble.n	8009bd4 <async_evt_rx_rdy+0x3c>
 8009bd0:	482b      	ldr	r0, [pc, #172]	; (8009c80 <async_evt_rx_rdy+0xe8>)
 8009bd2:	6158      	str	r0, [r3, #20]
 8009bd4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009bd6:	b112      	cbz	r2, 8009bde <async_evt_rx_rdy+0x46>
 8009bd8:	290c      	cmp	r1, #12
 8009bda:	dd00      	ble.n	8009bde <async_evt_rx_rdy+0x46>
 8009bdc:	6198      	str	r0, [r3, #24]
 8009bde:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009be0:	b11a      	cbz	r2, 8009bea <async_evt_rx_rdy+0x52>
 8009be2:	2910      	cmp	r1, #16
 8009be4:	dd01      	ble.n	8009bea <async_evt_rx_rdy+0x52>
 8009be6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009be8:	61d8      	str	r0, [r3, #28]
 8009bea:	2913      	cmp	r1, #19
 8009bec:	dd39      	ble.n	8009c62 <async_evt_rx_rdy+0xca>
 8009bee:	2014      	movs	r0, #20
 8009bf0:	b12a      	cbz	r2, 8009bfe <async_evt_rx_rdy+0x66>
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	6039      	str	r1, [r7, #0]
 8009bf6:	2105      	movs	r1, #5
 8009bf8:	7039      	strb	r1, [r7, #0]
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	60d9      	str	r1, [r3, #12]
 8009bfe:	2100      	movs	r1, #0
 8009c00:	f36f 0100 	bfc	r1, #0, #1
 8009c04:	f36f 0141 	bfc	r1, #1, #1
 8009c08:	f36f 0182 	bfc	r1, #2, #1
 8009c0c:	f36f 01c5 	bfc	r1, #3, #3
 8009c10:	2304      	movs	r3, #4
 8009c12:	f363 1188 	bfi	r1, r3, #6, #3
 8009c16:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8009c1a:	f363 2152 	bfi	r1, r3, #9, #10
 8009c1e:	f36f 41de 	bfc	r1, #19, #12
 8009c22:	f36f 71df 	bfc	r1, #31, #1
 8009c26:	2300      	movs	r3, #0
 8009c28:	4816      	ldr	r0, [pc, #88]	; (8009c84 <async_evt_rx_rdy+0xec>)
 8009c2a:	f005 f89a 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8009c2e:	46ad      	mov	sp, r5
	struct uart_event event = {
 8009c30:	2300      	movs	r3, #0
 8009c32:	627b      	str	r3, [r7, #36]	; 0x24
 8009c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c38:	633b      	str	r3, [r7, #48]	; 0x30
 8009c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		.data.rx.buf = data->dma_rx.buffer,
 8009c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event event = {
 8009c44:	62bb      	str	r3, [r7, #40]	; 0x28
		.data.rx.offset = data->dma_rx.offset
 8009c46:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
	struct uart_event event = {
 8009c48:	62fa      	str	r2, [r7, #44]	; 0x2c
		.data.rx.len = data->dma_rx.counter - data->dma_rx.offset,
 8009c4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009c4c:	1a9b      	subs	r3, r3, r2
	struct uart_event event = {
 8009c4e:	633b      	str	r3, [r7, #48]	; 0x30
	data->dma_rx.offset = data->dma_rx.counter;
 8009c50:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8009c52:	66e2      	str	r2, [r4, #108]	; 0x6c
	if (event.data.rx.len > 0) {
 8009c54:	b943      	cbnz	r3, 8009c68 <async_evt_rx_rdy+0xd0>
}
 8009c56:	3738      	adds	r7, #56	; 0x38
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_DBG("rx_rdy: (%d %d)", data->dma_rx.offset, data->dma_rx.counter);
 8009c5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c60:	e7aa      	b.n	8009bb8 <async_evt_rx_rdy+0x20>
 8009c62:	f06f 001b 	mvn.w	r0, #27
 8009c66:	e7c3      	b.n	8009bf0 <async_evt_rx_rdy+0x58>
	if (data->async_cb) {
 8009c68:	68e3      	ldr	r3, [r4, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d0f3      	beq.n	8009c56 <async_evt_rx_rdy+0xbe>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8009c6e:	6922      	ldr	r2, [r4, #16]
 8009c70:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009c74:	68a0      	ldr	r0, [r4, #8]
 8009c76:	4798      	blx	r3
}
 8009c78:	e7ed      	b.n	8009c56 <async_evt_rx_rdy+0xbe>
 8009c7a:	bf00      	nop
 8009c7c:	08012f64 	.word	0x08012f64
 8009c80:	080130e8 	.word	0x080130e8
 8009c84:	080119ec 	.word	0x080119ec

08009c88 <uart_stm32_async_rx_disable>:
{
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	b094      	sub	sp, #80	; 0x50
	struct uart_stm32_data *data = dev->data;
 8009c8c:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009c8e:	6843      	ldr	r3, [r0, #4]
 8009c90:	681e      	ldr	r6, [r3, #0]
	struct uart_event disabled_event = {
 8009c92:	2300      	movs	r3, #0
 8009c94:	9309      	str	r3, [sp, #36]	; 0x24
 8009c96:	930a      	str	r3, [sp, #40]	; 0x28
 8009c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c9a:	930c      	str	r3, [sp, #48]	; 0x30
 8009c9c:	930d      	str	r3, [sp, #52]	; 0x34
 8009c9e:	2305      	movs	r3, #5
 8009ca0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	if (!data->dma_rx.enabled) {
 8009ca4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d05d      	beq.n	8009d68 <uart_stm32_async_rx_disable+0xe0>
 8009cac:	4605      	mov	r5, r0
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8009cae:	6833      	ldr	r3, [r6, #0]
 8009cb0:	f023 0310 	bic.w	r3, r3, #16
 8009cb4:	6033      	str	r3, [r6, #0]
	uart_stm32_dma_rx_flush(dev);
 8009cb6:	f006 faf2 	bl	801029e <uart_stm32_dma_rx_flush>
	struct uart_event evt = {
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9301      	str	r3, [sp, #4]
 8009cbe:	9302      	str	r3, [sp, #8]
 8009cc0:	9303      	str	r3, [sp, #12]
 8009cc2:	9304      	str	r3, [sp, #16]
 8009cc4:	9305      	str	r3, [sp, #20]
 8009cc6:	2304      	movs	r3, #4
 8009cc8:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_buf.buf = data->dma_rx.buffer,
 8009ccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event evt = {
 8009cce:	9302      	str	r3, [sp, #8]
	if (data->async_cb) {
 8009cd0:	68e3      	ldr	r3, [r4, #12]
 8009cd2:	b11b      	cbz	r3, 8009cdc <uart_stm32_async_rx_disable+0x54>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8009cd4:	6922      	ldr	r2, [r4, #16]
 8009cd6:	a901      	add	r1, sp, #4
 8009cd8:	68a0      	ldr	r0, [r4, #8]
 8009cda:	4798      	blx	r3
	struct uart_stm32_data *data = dev->data;
 8009cdc:	692b      	ldr	r3, [r5, #16]
	data->dma_rx.enabled = false;
 8009cde:	2500      	movs	r5, #0
 8009ce0:	f883 50a8 	strb.w	r5, [r3, #168]	; 0xa8
	(void)k_work_cancel_delayable(&data->dma_rx.timeout_work);
 8009ce4:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8009ce8:	f006 fd16 	bl	8010718 <k_work_cancel_delayable>
	dma_stop(data->dma_rx.dma_dev, data->dma_rx.dma_channel);
 8009cec:	69a0      	ldr	r0, [r4, #24]
 8009cee:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 8009cf0:	6883      	ldr	r3, [r0, #8]
	return api->stop(dev, channel);
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	4798      	blx	r3
	data->rx_next_buffer = NULL;
 8009cf6:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
	data->rx_next_buffer_len = 0;
 8009cfa:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8009cfe:	6833      	ldr	r3, [r6, #0]
 8009d00:	f043 0320 	orr.w	r3, r3, #32
 8009d04:	6033      	str	r3, [r6, #0]
	LOG_DBG("rx: disabled");
 8009d06:	2301      	movs	r3, #1
 8009d08:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009d12:	4b1a      	ldr	r3, [pc, #104]	; (8009d7c <uart_stm32_async_rx_disable+0xf4>)
 8009d14:	9312      	str	r3, [sp, #72]	; 0x48
 8009d16:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <uart_stm32_async_rx_disable+0xf8>)
 8009d18:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d1a:	9500      	str	r5, [sp, #0]
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	f88d 3000 	strb.w	r3, [sp]
 8009d22:	9b00      	ldr	r3, [sp, #0]
 8009d24:	9311      	str	r3, [sp, #68]	; 0x44
 8009d26:	4629      	mov	r1, r5
 8009d28:	f365 0100 	bfi	r1, r5, #0, #1
 8009d2c:	f365 0141 	bfi	r1, r5, #1, #1
 8009d30:	f365 0182 	bfi	r1, r5, #2, #1
 8009d34:	f365 01c5 	bfi	r1, r5, #3, #3
 8009d38:	2304      	movs	r3, #4
 8009d3a:	f363 1188 	bfi	r1, r3, #6, #3
 8009d3e:	230c      	movs	r3, #12
 8009d40:	f363 2152 	bfi	r1, r3, #9, #10
 8009d44:	f365 41de 	bfi	r1, r5, #19, #12
 8009d48:	f365 71df 	bfi	r1, r5, #31, #1
 8009d4c:	462b      	mov	r3, r5
 8009d4e:	aa11      	add	r2, sp, #68	; 0x44
 8009d50:	480c      	ldr	r0, [pc, #48]	; (8009d84 <uart_stm32_async_rx_disable+0xfc>)
 8009d52:	f005 f806 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	if (data->async_cb) {
 8009d56:	68e3      	ldr	r3, [r4, #12]
 8009d58:	b11b      	cbz	r3, 8009d62 <uart_stm32_async_rx_disable+0xda>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8009d5a:	6922      	ldr	r2, [r4, #16]
 8009d5c:	a909      	add	r1, sp, #36	; 0x24
 8009d5e:	68a0      	ldr	r0, [r4, #8]
 8009d60:	4798      	blx	r3
	return 0;
 8009d62:	2000      	movs	r0, #0
}
 8009d64:	b014      	add	sp, #80	; 0x50
 8009d66:	bd70      	pop	{r4, r5, r6, pc}
	if (data->async_cb) {
 8009d68:	68e3      	ldr	r3, [r4, #12]
 8009d6a:	b11b      	cbz	r3, 8009d74 <uart_stm32_async_rx_disable+0xec>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8009d6c:	6922      	ldr	r2, [r4, #16]
 8009d6e:	a909      	add	r1, sp, #36	; 0x24
 8009d70:	68a0      	ldr	r0, [r4, #8]
 8009d72:	4798      	blx	r3
		return -EFAULT;
 8009d74:	f06f 000d 	mvn.w	r0, #13
}
 8009d78:	e7f4      	b.n	8009d64 <uart_stm32_async_rx_disable+0xdc>
 8009d7a:	bf00      	nop
 8009d7c:	08012f78 	.word	0x08012f78
 8009d80:	080131a8 	.word	0x080131a8
 8009d84:	080119ec 	.word	0x080119ec

08009d88 <uart_stm32_async_rx_timeout>:
{
 8009d88:	b530      	push	{r4, r5, lr}
 8009d8a:	b091      	sub	sp, #68	; 0x44
 8009d8c:	4604      	mov	r4, r0
	const struct device *dev = data->uart_dev;
 8009d8e:	f850 5c70 	ldr.w	r5, [r0, #-112]
	LOG_DBG("rx timeout");
 8009d92:	2301      	movs	r3, #1
 8009d94:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009d98:	2302      	movs	r3, #2
 8009d9a:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009d9e:	4b18      	ldr	r3, [pc, #96]	; (8009e00 <uart_stm32_async_rx_timeout+0x78>)
 8009da0:	930e      	str	r3, [sp, #56]	; 0x38
 8009da2:	4b18      	ldr	r3, [pc, #96]	; (8009e04 <uart_stm32_async_rx_timeout+0x7c>)
 8009da4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009da6:	2300      	movs	r3, #0
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	2203      	movs	r2, #3
 8009dac:	f88d 2004 	strb.w	r2, [sp, #4]
 8009db0:	9a01      	ldr	r2, [sp, #4]
 8009db2:	920d      	str	r2, [sp, #52]	; 0x34
 8009db4:	4619      	mov	r1, r3
 8009db6:	f363 0100 	bfi	r1, r3, #0, #1
 8009dba:	f363 0141 	bfi	r1, r3, #1, #1
 8009dbe:	f363 0182 	bfi	r1, r3, #2, #1
 8009dc2:	f363 01c5 	bfi	r1, r3, #3, #3
 8009dc6:	2204      	movs	r2, #4
 8009dc8:	f362 1188 	bfi	r1, r2, #6, #3
 8009dcc:	220c      	movs	r2, #12
 8009dce:	f362 2152 	bfi	r1, r2, #9, #10
 8009dd2:	f363 41de 	bfi	r1, r3, #19, #12
 8009dd6:	f363 71df 	bfi	r1, r3, #31, #1
 8009dda:	aa0d      	add	r2, sp, #52	; 0x34
 8009ddc:	480a      	ldr	r0, [pc, #40]	; (8009e08 <uart_stm32_async_rx_timeout+0x80>)
 8009dde:	f004 ffc0 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	if (data->dma_rx.counter == data->dma_rx.buffer_length) {
 8009de2:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8009de6:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d004      	beq.n	8009df8 <uart_stm32_async_rx_timeout+0x70>
		uart_stm32_dma_rx_flush(dev);
 8009dee:	4628      	mov	r0, r5
 8009df0:	f006 fa55 	bl	801029e <uart_stm32_dma_rx_flush>
}
 8009df4:	b011      	add	sp, #68	; 0x44
 8009df6:	bd30      	pop	{r4, r5, pc}
		uart_stm32_async_rx_disable(dev);
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f7ff ff45 	bl	8009c88 <uart_stm32_async_rx_disable>
 8009dfe:	e7f9      	b.n	8009df4 <uart_stm32_async_rx_timeout+0x6c>
 8009e00:	08012f8c 	.word	0x08012f8c
 8009e04:	08013090 	.word	0x08013090
 8009e08:	080119ec 	.word	0x080119ec

08009e0c <uart_stm32_dma_rx_cb>:
{
 8009e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e0e:	b08b      	sub	sp, #44	; 0x2c
 8009e10:	af00      	add	r7, sp, #0
	struct uart_stm32_data *data = uart_dev->data;
 8009e12:	690c      	ldr	r4, [r1, #16]
	if (status != 0) {
 8009e14:	bb2b      	cbnz	r3, 8009e62 <uart_stm32_dma_rx_cb+0x56>
 8009e16:	460d      	mov	r5, r1
	(void)k_work_cancel_delayable(&data->dma_rx.timeout_work);
 8009e18:	f104 0678 	add.w	r6, r4, #120	; 0x78
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f006 fc7b 	bl	8010718 <k_work_cancel_delayable>
	data->dma_rx.counter = data->dma_rx.buffer_length;
 8009e22:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009e24:	6723      	str	r3, [r4, #112]	; 0x70
	async_evt_rx_rdy(data);
 8009e26:	4620      	mov	r0, r4
 8009e28:	f7ff feb6 	bl	8009b98 <async_evt_rx_rdy>
	if (data->rx_next_buffer != NULL) {
 8009e2c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d06f      	beq.n	8009f14 <uart_stm32_dma_rx_cb+0x108>
	struct uart_event evt = {
 8009e34:	2300      	movs	r3, #0
 8009e36:	60bb      	str	r3, [r7, #8]
 8009e38:	60fb      	str	r3, [r7, #12]
 8009e3a:	613b      	str	r3, [r7, #16]
 8009e3c:	617b      	str	r3, [r7, #20]
 8009e3e:	61bb      	str	r3, [r7, #24]
 8009e40:	2304      	movs	r3, #4
 8009e42:	723b      	strb	r3, [r7, #8]
		.data.rx_buf.buf = data->dma_rx.buffer,
 8009e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event evt = {
 8009e46:	60fb      	str	r3, [r7, #12]
	if (data->async_cb) {
 8009e48:	68e3      	ldr	r3, [r4, #12]
 8009e4a:	b123      	cbz	r3, 8009e56 <uart_stm32_dma_rx_cb+0x4a>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8009e4c:	6922      	ldr	r2, [r4, #16]
 8009e4e:	f107 0108 	add.w	r1, r7, #8
 8009e52:	68a0      	ldr	r0, [r4, #8]
 8009e54:	4798      	blx	r3
		uart_stm32_dma_replace_buffer(uart_dev);
 8009e56:	4628      	mov	r0, r5
 8009e58:	f7ff fc4a 	bl	80096f0 <uart_stm32_dma_replace_buffer>
}
 8009e5c:	372c      	adds	r7, #44	; 0x2c
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e62:	461e      	mov	r6, r3
	LOG_DBG("rx error: %d", err_code);
 8009e64:	2301      	movs	r3, #1
 8009e66:	813b      	strh	r3, [r7, #8]
 8009e68:	2302      	movs	r3, #2
 8009e6a:	817b      	strh	r3, [r7, #10]
 8009e6c:	466d      	mov	r5, sp
 8009e6e:	b088      	sub	sp, #32
 8009e70:	466b      	mov	r3, sp
 8009e72:	f113 020c 	adds.w	r2, r3, #12
 8009e76:	d047      	beq.n	8009f08 <uart_stm32_dma_rx_cb+0xfc>
 8009e78:	2110      	movs	r1, #16
 8009e7a:	2001      	movs	r0, #1
 8009e7c:	8138      	strh	r0, [r7, #8]
 8009e7e:	b11a      	cbz	r2, 8009e88 <uart_stm32_dma_rx_cb+0x7c>
 8009e80:	2904      	cmp	r1, #4
 8009e82:	dd01      	ble.n	8009e88 <uart_stm32_dma_rx_cb+0x7c>
 8009e84:	4826      	ldr	r0, [pc, #152]	; (8009f20 <uart_stm32_dma_rx_cb+0x114>)
 8009e86:	6118      	str	r0, [r3, #16]
 8009e88:	2002      	movs	r0, #2
 8009e8a:	8178      	strh	r0, [r7, #10]
 8009e8c:	b11a      	cbz	r2, 8009e96 <uart_stm32_dma_rx_cb+0x8a>
 8009e8e:	2908      	cmp	r1, #8
 8009e90:	dd01      	ble.n	8009e96 <uart_stm32_dma_rx_cb+0x8a>
 8009e92:	4824      	ldr	r0, [pc, #144]	; (8009f24 <uart_stm32_dma_rx_cb+0x118>)
 8009e94:	6158      	str	r0, [r3, #20]
 8009e96:	b112      	cbz	r2, 8009e9e <uart_stm32_dma_rx_cb+0x92>
 8009e98:	290c      	cmp	r1, #12
 8009e9a:	dd00      	ble.n	8009e9e <uart_stm32_dma_rx_cb+0x92>
 8009e9c:	619e      	str	r6, [r3, #24]
 8009e9e:	290f      	cmp	r1, #15
 8009ea0:	dd35      	ble.n	8009f0e <uart_stm32_dma_rx_cb+0x102>
 8009ea2:	2010      	movs	r0, #16
 8009ea4:	b12a      	cbz	r2, 8009eb2 <uart_stm32_dma_rx_cb+0xa6>
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	6079      	str	r1, [r7, #4]
 8009eaa:	2104      	movs	r1, #4
 8009eac:	7139      	strb	r1, [r7, #4]
 8009eae:	6879      	ldr	r1, [r7, #4]
 8009eb0:	60d9      	str	r1, [r3, #12]
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	f36f 0100 	bfc	r1, #0, #1
 8009eb8:	f36f 0141 	bfc	r1, #1, #1
 8009ebc:	f36f 0182 	bfc	r1, #2, #1
 8009ec0:	f36f 01c5 	bfc	r1, #3, #3
 8009ec4:	2304      	movs	r3, #4
 8009ec6:	f363 1188 	bfi	r1, r3, #6, #3
 8009eca:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8009ece:	f363 2152 	bfi	r1, r3, #9, #10
 8009ed2:	f36f 41de 	bfc	r1, #19, #12
 8009ed6:	f36f 71df 	bfc	r1, #31, #1
 8009eda:	2300      	movs	r3, #0
 8009edc:	4812      	ldr	r0, [pc, #72]	; (8009f28 <uart_stm32_dma_rx_cb+0x11c>)
 8009ede:	f004 ff40 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 8009ee2:	46ad      	mov	sp, r5
	struct uart_event event = {
 8009ee4:	2306      	movs	r3, #6
 8009ee6:	723b      	strb	r3, [r7, #8]
 8009ee8:	733e      	strb	r6, [r7, #12]
		.data.rx_stop.data.buf = data->dma_rx.buffer
 8009eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event event = {
 8009eec:	613b      	str	r3, [r7, #16]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]
		.data.rx_stop.data.len = data->dma_rx.counter,
 8009ef2:	6f23      	ldr	r3, [r4, #112]	; 0x70
	struct uart_event event = {
 8009ef4:	61bb      	str	r3, [r7, #24]
	if (data->async_cb) {
 8009ef6:	68e3      	ldr	r3, [r4, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d0af      	beq.n	8009e5c <uart_stm32_dma_rx_cb+0x50>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8009efc:	6922      	ldr	r2, [r4, #16]
 8009efe:	f107 0108 	add.w	r1, r7, #8
 8009f02:	68a0      	ldr	r0, [r4, #8]
 8009f04:	4798      	blx	r3
}
 8009f06:	e7a9      	b.n	8009e5c <uart_stm32_dma_rx_cb+0x50>
	LOG_DBG("rx error: %d", err_code);
 8009f08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f0c:	e7b5      	b.n	8009e7a <uart_stm32_dma_rx_cb+0x6e>
 8009f0e:	f06f 001b 	mvn.w	r0, #27
 8009f12:	e7c7      	b.n	8009ea4 <uart_stm32_dma_rx_cb+0x98>
		k_work_reschedule(&data->dma_rx.timeout_work, K_TICKS(1));
 8009f14:	2201      	movs	r2, #1
 8009f16:	2300      	movs	r3, #0
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f001 fcd1 	bl	800b8c0 <k_work_reschedule>
 8009f1e:	e79d      	b.n	8009e5c <uart_stm32_dma_rx_cb+0x50>
 8009f20:	08012f9c 	.word	0x08012f9c
 8009f24:	080130fc 	.word	0x080130fc
 8009f28:	080119ec 	.word	0x080119ec

08009f2c <uart_stm32_isr>:
{
 8009f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f30:	b091      	sub	sp, #68	; 0x44
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	4604      	mov	r4, r0
	struct uart_stm32_data *data = dev->data;
 8009f36:	6905      	ldr	r5, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009f38:	6843      	ldr	r3, [r0, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	f012 0f10 	tst.w	r2, #16
 8009f42:	f000 8097 	beq.w	800a074 <uart_stm32_isr+0x148>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8009f46:	69da      	ldr	r2, [r3, #28]
 8009f48:	f012 0f10 	tst.w	r2, #16
 8009f4c:	f000 8092 	beq.w	800a074 <uart_stm32_isr+0x148>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8009f50:	2210      	movs	r2, #16
 8009f52:	621a      	str	r2, [r3, #32]
		LOG_DBG("idle interrupt occurred");
 8009f54:	2301      	movs	r3, #1
 8009f56:	813b      	strh	r3, [r7, #8]
 8009f58:	2302      	movs	r3, #2
 8009f5a:	817b      	strh	r3, [r7, #10]
 8009f5c:	4b87      	ldr	r3, [pc, #540]	; (800a17c <uart_stm32_isr+0x250>)
 8009f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f60:	4b87      	ldr	r3, [pc, #540]	; (800a180 <uart_stm32_isr+0x254>)
 8009f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f64:	2300      	movs	r3, #0
 8009f66:	607b      	str	r3, [r7, #4]
 8009f68:	2203      	movs	r2, #3
 8009f6a:	713a      	strb	r2, [r7, #4]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	637a      	str	r2, [r7, #52]	; 0x34
 8009f70:	4619      	mov	r1, r3
 8009f72:	f363 0100 	bfi	r1, r3, #0, #1
 8009f76:	f363 0141 	bfi	r1, r3, #1, #1
 8009f7a:	f363 0182 	bfi	r1, r3, #2, #1
 8009f7e:	f363 01c5 	bfi	r1, r3, #3, #3
 8009f82:	2204      	movs	r2, #4
 8009f84:	f362 1188 	bfi	r1, r2, #6, #3
 8009f88:	220c      	movs	r2, #12
 8009f8a:	f362 2152 	bfi	r1, r2, #9, #10
 8009f8e:	f363 41de 	bfi	r1, r3, #19, #12
 8009f92:	f363 71df 	bfi	r1, r3, #31, #1
 8009f96:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009f9a:	487a      	ldr	r0, [pc, #488]	; (800a184 <uart_stm32_isr+0x258>)
 8009f9c:	f004 fee1 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		async_timer_start(&data->dma_rx.timeout_work,
 8009fa0:	f105 0878 	add.w	r8, r5, #120	; 0x78
 8009fa4:	6f6e      	ldr	r6, [r5, #116]	; 0x74
	if ((timeout != SYS_FOREVER_US) && (timeout != 0)) {
 8009fa6:	1c73      	adds	r3, r6, #1
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d950      	bls.n	800a04e <uart_stm32_isr+0x122>
		LOG_DBG("async timer started for %d us", timeout);
 8009fac:	2301      	movs	r3, #1
 8009fae:	813b      	strh	r3, [r7, #8]
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	817b      	strh	r3, [r7, #10]
 8009fb4:	46e9      	mov	r9, sp
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	466b      	mov	r3, sp
 8009fba:	f113 020c 	adds.w	r2, r3, #12
 8009fbe:	d04f      	beq.n	800a060 <uart_stm32_isr+0x134>
 8009fc0:	2110      	movs	r1, #16
 8009fc2:	2001      	movs	r0, #1
 8009fc4:	8138      	strh	r0, [r7, #8]
 8009fc6:	b11a      	cbz	r2, 8009fd0 <uart_stm32_isr+0xa4>
 8009fc8:	2904      	cmp	r1, #4
 8009fca:	dd01      	ble.n	8009fd0 <uart_stm32_isr+0xa4>
 8009fcc:	486e      	ldr	r0, [pc, #440]	; (800a188 <uart_stm32_isr+0x25c>)
 8009fce:	6118      	str	r0, [r3, #16]
 8009fd0:	2002      	movs	r0, #2
 8009fd2:	8178      	strh	r0, [r7, #10]
 8009fd4:	b11a      	cbz	r2, 8009fde <uart_stm32_isr+0xb2>
 8009fd6:	2908      	cmp	r1, #8
 8009fd8:	dd01      	ble.n	8009fde <uart_stm32_isr+0xb2>
 8009fda:	486c      	ldr	r0, [pc, #432]	; (800a18c <uart_stm32_isr+0x260>)
 8009fdc:	6158      	str	r0, [r3, #20]
 8009fde:	b112      	cbz	r2, 8009fe6 <uart_stm32_isr+0xba>
 8009fe0:	290c      	cmp	r1, #12
 8009fe2:	dd00      	ble.n	8009fe6 <uart_stm32_isr+0xba>
 8009fe4:	619e      	str	r6, [r3, #24]
 8009fe6:	290f      	cmp	r1, #15
 8009fe8:	dd3d      	ble.n	800a066 <uart_stm32_isr+0x13a>
 8009fea:	2010      	movs	r0, #16
 8009fec:	b12a      	cbz	r2, 8009ffa <uart_stm32_isr+0xce>
 8009fee:	2100      	movs	r1, #0
 8009ff0:	6079      	str	r1, [r7, #4]
 8009ff2:	2104      	movs	r1, #4
 8009ff4:	7139      	strb	r1, [r7, #4]
 8009ff6:	6879      	ldr	r1, [r7, #4]
 8009ff8:	60d9      	str	r1, [r3, #12]
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	f36f 0100 	bfc	r1, #0, #1
 800a000:	f36f 0141 	bfc	r1, #1, #1
 800a004:	f36f 0182 	bfc	r1, #2, #1
 800a008:	f36f 01c5 	bfc	r1, #3, #3
 800a00c:	2304      	movs	r3, #4
 800a00e:	f363 1188 	bfi	r1, r3, #6, #3
 800a012:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 800a016:	f363 2152 	bfi	r1, r3, #9, #10
 800a01a:	f36f 41de 	bfc	r1, #19, #12
 800a01e:	f36f 71df 	bfc	r1, #31, #1
 800a022:	2300      	movs	r3, #0
 800a024:	4857      	ldr	r0, [pc, #348]	; (800a184 <uart_stm32_isr+0x258>)
 800a026:	f004 fe9c 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 800a02a:	46cd      	mov	sp, r9
		k_work_reschedule(work, K_USEC(timeout));
 800a02c:	ea26 70e6 	bic.w	r0, r6, r6, asr #31
 800a030:	17c1      	asrs	r1, r0, #31
		t += off;
 800a032:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
 800a034:	f04f 0264 	mov.w	r2, #100	; 0x64
 800a038:	f04f 0300 	mov.w	r3, #0
 800a03c:	f141 0100 	adc.w	r1, r1, #0
 800a040:	f7f6 fccc 	bl	80009dc <__aeabi_uldivmod>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	4640      	mov	r0, r8
 800a04a:	f001 fc39 	bl	800b8c0 <k_work_reschedule>
		if (data->dma_rx.timeout == 0) {
 800a04e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a050:	b163      	cbz	r3, 800a06c <uart_stm32_isr+0x140>
	uart_stm32_err_check(dev);
 800a052:	4620      	mov	r0, r4
 800a054:	f006 f8ab 	bl	80101ae <uart_stm32_err_check>
}
 800a058:	3744      	adds	r7, #68	; 0x44
 800a05a:	46bd      	mov	sp, r7
 800a05c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_DBG("async timer started for %d us", timeout);
 800a060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a064:	e7ad      	b.n	8009fc2 <uart_stm32_isr+0x96>
 800a066:	f06f 001b 	mvn.w	r0, #27
 800a06a:	e7bf      	b.n	8009fec <uart_stm32_isr+0xc0>
			uart_stm32_dma_rx_flush(dev);
 800a06c:	4620      	mov	r0, r4
 800a06e:	f006 f916 	bl	801029e <uart_stm32_dma_rx_flush>
 800a072:	e7ee      	b.n	800a052 <uart_stm32_isr+0x126>
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a07a:	d06e      	beq.n	800a15a <uart_stm32_isr+0x22e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800a07c:	69da      	ldr	r2, [r3, #28]
 800a07e:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a082:	d06a      	beq.n	800a15a <uart_stm32_isr+0x22e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a08a:	601a      	str	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800a08c:	2240      	movs	r2, #64	; 0x40
 800a08e:	621a      	str	r2, [r3, #32]
	LOG_DBG("tx done: %d", data->dma_tx.counter);
 800a090:	2301      	movs	r3, #1
 800a092:	813b      	strh	r3, [r7, #8]
 800a094:	2302      	movs	r3, #2
 800a096:	817b      	strh	r3, [r7, #10]
 800a098:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a09c:	466e      	mov	r6, sp
 800a09e:	b088      	sub	sp, #32
 800a0a0:	466b      	mov	r3, sp
 800a0a2:	f113 020c 	adds.w	r2, r3, #12
 800a0a6:	d052      	beq.n	800a14e <uart_stm32_isr+0x222>
 800a0a8:	2110      	movs	r1, #16
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	8138      	strh	r0, [r7, #8]
 800a0ae:	b11a      	cbz	r2, 800a0b8 <uart_stm32_isr+0x18c>
 800a0b0:	2904      	cmp	r1, #4
 800a0b2:	dd01      	ble.n	800a0b8 <uart_stm32_isr+0x18c>
 800a0b4:	4836      	ldr	r0, [pc, #216]	; (800a190 <uart_stm32_isr+0x264>)
 800a0b6:	6118      	str	r0, [r3, #16]
 800a0b8:	2002      	movs	r0, #2
 800a0ba:	8178      	strh	r0, [r7, #10]
 800a0bc:	b11a      	cbz	r2, 800a0c6 <uart_stm32_isr+0x19a>
 800a0be:	2908      	cmp	r1, #8
 800a0c0:	dd01      	ble.n	800a0c6 <uart_stm32_isr+0x19a>
 800a0c2:	4834      	ldr	r0, [pc, #208]	; (800a194 <uart_stm32_isr+0x268>)
 800a0c4:	6158      	str	r0, [r3, #20]
 800a0c6:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
 800a0ca:	b122      	cbz	r2, 800a0d6 <uart_stm32_isr+0x1aa>
 800a0cc:	290c      	cmp	r1, #12
 800a0ce:	dd02      	ble.n	800a0d6 <uart_stm32_isr+0x1aa>
 800a0d0:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
 800a0d4:	6198      	str	r0, [r3, #24]
 800a0d6:	290f      	cmp	r1, #15
 800a0d8:	dd3c      	ble.n	800a154 <uart_stm32_isr+0x228>
 800a0da:	2010      	movs	r0, #16
 800a0dc:	b12a      	cbz	r2, 800a0ea <uart_stm32_isr+0x1be>
 800a0de:	2100      	movs	r1, #0
 800a0e0:	6079      	str	r1, [r7, #4]
 800a0e2:	2104      	movs	r1, #4
 800a0e4:	7139      	strb	r1, [r7, #4]
 800a0e6:	6879      	ldr	r1, [r7, #4]
 800a0e8:	60d9      	str	r1, [r3, #12]
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	f36f 0100 	bfc	r1, #0, #1
 800a0f0:	f36f 0141 	bfc	r1, #1, #1
 800a0f4:	f36f 0182 	bfc	r1, #2, #1
 800a0f8:	f36f 01c5 	bfc	r1, #3, #3
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	f363 1188 	bfi	r1, r3, #6, #3
 800a102:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 800a106:	f363 2152 	bfi	r1, r3, #9, #10
 800a10a:	f36f 41de 	bfc	r1, #19, #12
 800a10e:	f36f 71df 	bfc	r1, #31, #1
 800a112:	2300      	movs	r3, #0
 800a114:	481b      	ldr	r0, [pc, #108]	; (800a184 <uart_stm32_isr+0x258>)
 800a116:	f004 fe24 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 800a11a:	46b5      	mov	sp, r6
	struct uart_event event = {
 800a11c:	2300      	movs	r3, #0
 800a11e:	60bb      	str	r3, [r7, #8]
 800a120:	60fb      	str	r3, [r7, #12]
 800a122:	613b      	str	r3, [r7, #16]
 800a124:	617b      	str	r3, [r7, #20]
 800a126:	61bb      	str	r3, [r7, #24]
		.data.tx.buf = data->dma_tx.buffer,
 800a128:	f8d5 20fc 	ldr.w	r2, [r5, #252]	; 0xfc
	struct uart_event event = {
 800a12c:	60fa      	str	r2, [r7, #12]
		.data.tx.len = data->dma_tx.counter
 800a12e:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
	struct uart_event event = {
 800a132:	613a      	str	r2, [r7, #16]
	data->dma_tx.buffer_length = 0;
 800a134:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	data->dma_tx.counter = 0;
 800a138:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	if (data->async_cb) {
 800a13c:	68eb      	ldr	r3, [r5, #12]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d087      	beq.n	800a052 <uart_stm32_isr+0x126>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a142:	692a      	ldr	r2, [r5, #16]
 800a144:	f107 0108 	add.w	r1, r7, #8
 800a148:	68a8      	ldr	r0, [r5, #8]
 800a14a:	4798      	blx	r3
}
 800a14c:	e781      	b.n	800a052 <uart_stm32_isr+0x126>
	LOG_DBG("tx done: %d", data->dma_tx.counter);
 800a14e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a152:	e7aa      	b.n	800a0aa <uart_stm32_isr+0x17e>
 800a154:	f06f 001b 	mvn.w	r0, #27
 800a158:	e7c0      	b.n	800a0dc <uart_stm32_isr+0x1b0>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	f012 0f20 	tst.w	r2, #32
 800a160:	f43f af77 	beq.w	800a052 <uart_stm32_isr+0x126>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800a164:	69da      	ldr	r2, [r3, #28]
 800a166:	f012 0f20 	tst.w	r2, #32
 800a16a:	f43f af72 	beq.w	800a052 <uart_stm32_isr+0x126>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 800a16e:	8b1a      	ldrh	r2, [r3, #24]
 800a170:	b292      	uxth	r2, r2
 800a172:	f042 0208 	orr.w	r2, r2, #8
 800a176:	831a      	strh	r2, [r3, #24]
}
 800a178:	e76b      	b.n	800a052 <uart_stm32_isr+0x126>
 800a17a:	bf00      	nop
 800a17c:	08012fb0 	.word	0x08012fb0
 800a180:	08013124 	.word	0x08013124
 800a184:	080119ec 	.word	0x080119ec
 800a188:	08012fcc 	.word	0x08012fcc
 800a18c:	08013134 	.word	0x08013134
 800a190:	08012ff0 	.word	0x08012ff0
 800a194:	08013110 	.word	0x08013110

0800a198 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 800a198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a19c:	b096      	sub	sp, #88	; 0x58
 800a19e:	4605      	mov	r5, r0
	const struct uart_stm32_config *config = dev->config;
 800a1a0:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800a1a2:	6907      	ldr	r7, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a1a4:	46b0      	mov	r8, r6
 800a1a6:	f858 4b0c 	ldr.w	r4, [r8], #12
	data->clock = clk;
 800a1aa:	4872      	ldr	r0, [pc, #456]	; (800a374 <uart_stm32_init+0x1dc>)
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	f006 f92c 	bl	801040a <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800a1b2:	b348      	cbz	r0, 800a208 <uart_stm32_init+0x70>
	const struct clock_control_driver_api *api =
 800a1b4:	486f      	ldr	r0, [pc, #444]	; (800a374 <uart_stm32_init+0x1dc>)
 800a1b6:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4641      	mov	r1, r8
 800a1bc:	4798      	blx	r3
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	f040 80d4 	bne.w	800a36c <uart_stm32_init+0x1d4>
	ret = pinctrl_lookup_state(config, id, &state);
 800a1c4:	aa02      	add	r2, sp, #8
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	6a30      	ldr	r0, [r6, #32]
 800a1ca:	f006 f8bc 	bl	8010346 <pinctrl_lookup_state>
	if (ret < 0) {
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	db05      	blt.n	800a1de <uart_stm32_init+0x46>
	return pinctrl_apply_state_direct(config, state);
 800a1d2:	9b02      	ldr	r3, [sp, #8]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	7919      	ldrb	r1, [r3, #4]
 800a1d8:	6818      	ldr	r0, [r3, #0]
 800a1da:	f006 f8ce 	bl	801037a <pinctrl_configure_pins>
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f2c0 8093 	blt.w	800a30a <uart_stm32_init+0x172>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	f023 0301 	bic.w	r3, r3, #1
 800a1ea:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	f043 030c 	orr.w	r3, r3, #12
 800a1f2:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 800a1f4:	69b3      	ldr	r3, [r6, #24]
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d033      	beq.n	800a262 <uart_stm32_init+0xca>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	f000 8088 	beq.w	800a310 <uart_stm32_init+0x178>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 800a200:	b92b      	cbnz	r3, 800a20e <uart_stm32_init+0x76>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800a202:	2100      	movs	r1, #0
		ll_parity = LL_USART_PARITY_NONE;
 800a204:	460b      	mov	r3, r1
 800a206:	e030      	b.n	800a26a <uart_stm32_init+0xd2>
		return -ENODEV;
 800a208:	f06f 0012 	mvn.w	r0, #18
 800a20c:	e7d7      	b.n	800a1be <uart_stm32_init+0x26>
			LOG_WRN("Invalid parity setting '%d'."
 800a20e:	2201      	movs	r2, #1
 800a210:	f8ad 2008 	strh.w	r2, [sp, #8]
 800a214:	4a58      	ldr	r2, [pc, #352]	; (800a378 <uart_stm32_init+0x1e0>)
 800a216:	920e      	str	r2, [sp, #56]	; 0x38
 800a218:	930f      	str	r3, [sp, #60]	; 0x3c
 800a21a:	f04f 0800 	mov.w	r8, #0
 800a21e:	f8cd 8004 	str.w	r8, [sp, #4]
 800a222:	2303      	movs	r3, #3
 800a224:	f88d 3004 	strb.w	r3, [sp, #4]
 800a228:	9b01      	ldr	r3, [sp, #4]
 800a22a:	930d      	str	r3, [sp, #52]	; 0x34
 800a22c:	4641      	mov	r1, r8
 800a22e:	f368 0100 	bfi	r1, r8, #0, #1
 800a232:	f368 0141 	bfi	r1, r8, #1, #1
 800a236:	f368 0182 	bfi	r1, r8, #2, #1
 800a23a:	f368 01c5 	bfi	r1, r8, #3, #3
 800a23e:	2302      	movs	r3, #2
 800a240:	f363 1188 	bfi	r1, r3, #6, #3
 800a244:	230c      	movs	r3, #12
 800a246:	f363 2152 	bfi	r1, r3, #9, #10
 800a24a:	f368 41de 	bfi	r1, r8, #19, #12
 800a24e:	f368 71df 	bfi	r1, r8, #31, #1
 800a252:	4643      	mov	r3, r8
 800a254:	aa0d      	add	r2, sp, #52	; 0x34
 800a256:	4849      	ldr	r0, [pc, #292]	; (800a37c <uart_stm32_init+0x1e4>)
 800a258:	f004 fd83 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800a25c:	4641      	mov	r1, r8
		ll_parity = LL_USART_PARITY_NONE;
 800a25e:	4643      	mov	r3, r8
 800a260:	e003      	b.n	800a26a <uart_stm32_init+0xd2>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800a262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800a266:	f44f 6380 	mov.w	r3, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800a26a:	6822      	ldr	r2, [r4, #0]
 800a26c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a270:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800a274:	4319      	orrs	r1, r3
 800a276:	430a      	orrs	r2, r1
 800a278:	6022      	str	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a27a:	6863      	ldr	r3, [r4, #4]
 800a27c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a280:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 800a282:	7d33      	ldrb	r3, [r6, #20]
 800a284:	b12b      	cbz	r3, 800a292 <uart_stm32_init+0xfa>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a286:	686b      	ldr	r3, [r5, #4]
 800a288:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a28a:	6893      	ldr	r3, [r2, #8]
 800a28c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a290:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800a292:	f8d7 9000 	ldr.w	r9, [r7]
	struct uart_stm32_data *data = dev->data;
 800a296:	692b      	ldr	r3, [r5, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a298:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800a29c:	f858 7b0c 	ldr.w	r7, [r8], #12
	if (clock_control_get_rate(data->clock,
 800a2a0:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800a2a4:	4650      	mov	r0, sl
 800a2a6:	f006 f8b0 	bl	801040a <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d035      	beq.n	800a31a <uart_stm32_init+0x182>
	const struct clock_control_driver_api *api =
 800a2ae:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d033      	beq.n	800a320 <uart_stm32_init+0x188>
	return api->get_rate(dev, sys, rate);
 800a2b8:	466a      	mov	r2, sp
 800a2ba:	4641      	mov	r1, r8
 800a2bc:	4650      	mov	r0, sl
 800a2be:	4798      	blx	r3
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	db30      	blt.n	800a326 <uart_stm32_init+0x18e>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a2ca:	603b      	str	r3, [r7, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800a2cc:	9b00      	ldr	r3, [sp, #0]
 800a2ce:	eb03 0359 	add.w	r3, r3, r9, lsr #1
 800a2d2:	fbb3 f3f9 	udiv	r3, r3, r9
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	60fb      	str	r3, [r7, #12]

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 800a2da:	7f33      	ldrb	r3, [r6, #28]
 800a2dc:	b11b      	cbz	r3, 800a2e6 <uart_stm32_init+0x14e>
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800a2de:	68a3      	ldr	r3, [r4, #8]
 800a2e0:	f043 0308 	orr.w	r3, r3, #8
 800a2e4:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	f043 0301 	orr.w	r3, r3, #1
 800a2ec:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800a2ee:	69e3      	ldr	r3, [r4, #28]
 800a2f0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800a2f4:	d0fb      	beq.n	800a2ee <uart_stm32_init+0x156>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800a2f6:	69e3      	ldr	r3, [r4, #28]
 800a2f8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800a2fc:	d0fb      	beq.n	800a2f6 <uart_stm32_init+0x15e>
	while (!(LL_USART_IsActiveFlag_REACK(UartInstance))) {
	}
#endif /* !USART_ISR_REACK */

#if defined(CONFIG_UART_INTERRUPT_DRIVEN) || defined(CONFIG_UART_ASYNC_API)
	config->uconf.irq_config_func(dev);
 800a2fe:	68b3      	ldr	r3, [r6, #8]
 800a300:	4628      	mov	r0, r5
 800a302:	4798      	blx	r3
#elif defined(CONFIG_PM)
	config->irq_config_func(dev);
#endif /* defined(CONFIG_UART_INTERRUPT_DRIVEN) || defined(CONFIG_UART_ASYNC_API) */

#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
 800a304:	4628      	mov	r0, r5
 800a306:	f7ff f937 	bl	8009578 <uart_stm32_async_init>
#else
	return 0;
#endif
}
 800a30a:	b016      	add	sp, #88	; 0x58
 800a30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800a310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 800a314:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a318:	e7a7      	b.n	800a26a <uart_stm32_init+0xd2>
		return -ENODEV;
 800a31a:	f06f 0012 	mvn.w	r0, #18
 800a31e:	e7cf      	b.n	800a2c0 <uart_stm32_init+0x128>
		return -ENOSYS;
 800a320:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800a324:	e7cc      	b.n	800a2c0 <uart_stm32_init+0x128>
		LOG_ERR("Failed call clock_control_get_rate");
 800a326:	2201      	movs	r2, #1
 800a328:	f8ad 2008 	strh.w	r2, [sp, #8]
 800a32c:	4b14      	ldr	r3, [pc, #80]	; (800a380 <uart_stm32_init+0x1e8>)
 800a32e:	9314      	str	r3, [sp, #80]	; 0x50
 800a330:	2300      	movs	r3, #0
 800a332:	9301      	str	r3, [sp, #4]
 800a334:	2102      	movs	r1, #2
 800a336:	f88d 1004 	strb.w	r1, [sp, #4]
 800a33a:	9901      	ldr	r1, [sp, #4]
 800a33c:	9113      	str	r1, [sp, #76]	; 0x4c
 800a33e:	4619      	mov	r1, r3
 800a340:	f363 0100 	bfi	r1, r3, #0, #1
 800a344:	f363 0141 	bfi	r1, r3, #1, #1
 800a348:	f363 0182 	bfi	r1, r3, #2, #1
 800a34c:	f363 01c5 	bfi	r1, r3, #3, #3
 800a350:	f362 1188 	bfi	r1, r2, #6, #3
 800a354:	2208      	movs	r2, #8
 800a356:	f362 2152 	bfi	r1, r2, #9, #10
 800a35a:	f363 41de 	bfi	r1, r3, #19, #12
 800a35e:	f363 71df 	bfi	r1, r3, #31, #1
 800a362:	aa13      	add	r2, sp, #76	; 0x4c
 800a364:	4805      	ldr	r0, [pc, #20]	; (800a37c <uart_stm32_init+0x1e4>)
 800a366:	f004 fcfc 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return;
 800a36a:	e7b6      	b.n	800a2da <uart_stm32_init+0x142>
		return -EIO;
 800a36c:	f06f 0004 	mvn.w	r0, #4
 800a370:	e7cb      	b.n	800a30a <uart_stm32_init+0x172>
 800a372:	bf00      	nop
 800a374:	08011594 	.word	0x08011594
 800a378:	08013000 	.word	0x08013000
 800a37c:	080119ec 	.word	0x080119ec
 800a380:	08012940 	.word	0x08012940

0800a384 <uart_stm32_async_tx>:
{
 800a384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a388:	b097      	sub	sp, #92	; 0x5c
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	4605      	mov	r5, r0
	struct uart_stm32_data *data = dev->data;
 800a38e:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a390:	6840      	ldr	r0, [r0, #4]
 800a392:	6806      	ldr	r6, [r0, #0]
	if (data->dma_tx.dma_dev == NULL) {
 800a394:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800a398:	2800      	cmp	r0, #0
 800a39a:	f000 812d 	beq.w	800a5f8 <uart_stm32_async_tx+0x274>
	if (data->dma_tx.buffer_length != 0) {
 800a39e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	f040 812b 	bne.w	800a5fe <uart_stm32_async_tx+0x27a>
	data->dma_tx.buffer = (uint8_t *)tx_data;
 800a3a8:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
	data->dma_tx.buffer_length = buf_size;
 800a3ac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	data->dma_tx.timeout = timeout;
 800a3b0:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	LOG_DBG("tx: l=%d", data->dma_tx.buffer_length);
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	813b      	strh	r3, [r7, #8]
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	817b      	strh	r3, [r7, #10]
 800a3bc:	46e8      	mov	r8, sp
 800a3be:	b088      	sub	sp, #32
 800a3c0:	466b      	mov	r3, sp
 800a3c2:	f113 020c 	adds.w	r2, r3, #12
 800a3c6:	f000 80c3 	beq.w	800a550 <uart_stm32_async_tx+0x1cc>
 800a3ca:	2110      	movs	r1, #16
 800a3cc:	2001      	movs	r0, #1
 800a3ce:	8138      	strh	r0, [r7, #8]
 800a3d0:	b11a      	cbz	r2, 800a3da <uart_stm32_async_tx+0x56>
 800a3d2:	2904      	cmp	r1, #4
 800a3d4:	dd01      	ble.n	800a3da <uart_stm32_async_tx+0x56>
 800a3d6:	488b      	ldr	r0, [pc, #556]	; (800a604 <uart_stm32_async_tx+0x280>)
 800a3d8:	6118      	str	r0, [r3, #16]
 800a3da:	2002      	movs	r0, #2
 800a3dc:	8178      	strh	r0, [r7, #10]
 800a3de:	b11a      	cbz	r2, 800a3e8 <uart_stm32_async_tx+0x64>
 800a3e0:	2908      	cmp	r1, #8
 800a3e2:	dd01      	ble.n	800a3e8 <uart_stm32_async_tx+0x64>
 800a3e4:	4888      	ldr	r0, [pc, #544]	; (800a608 <uart_stm32_async_tx+0x284>)
 800a3e6:	6158      	str	r0, [r3, #20]
 800a3e8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800a3ec:	b112      	cbz	r2, 800a3f4 <uart_stm32_async_tx+0x70>
 800a3ee:	290c      	cmp	r1, #12
 800a3f0:	dd00      	ble.n	800a3f4 <uart_stm32_async_tx+0x70>
 800a3f2:	6198      	str	r0, [r3, #24]
 800a3f4:	290f      	cmp	r1, #15
 800a3f6:	f340 80ae 	ble.w	800a556 <uart_stm32_async_tx+0x1d2>
 800a3fa:	2010      	movs	r0, #16
 800a3fc:	b12a      	cbz	r2, 800a40a <uart_stm32_async_tx+0x86>
 800a3fe:	2100      	movs	r1, #0
 800a400:	6079      	str	r1, [r7, #4]
 800a402:	2104      	movs	r1, #4
 800a404:	7139      	strb	r1, [r7, #4]
 800a406:	6879      	ldr	r1, [r7, #4]
 800a408:	60d9      	str	r1, [r3, #12]
 800a40a:	2100      	movs	r1, #0
 800a40c:	f36f 0100 	bfc	r1, #0, #1
 800a410:	f36f 0141 	bfc	r1, #1, #1
 800a414:	f36f 0182 	bfc	r1, #2, #1
 800a418:	f36f 01c5 	bfc	r1, #3, #3
 800a41c:	2304      	movs	r3, #4
 800a41e:	f363 1188 	bfi	r1, r3, #6, #3
 800a422:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 800a426:	f363 2152 	bfi	r1, r3, #9, #10
 800a42a:	f36f 41de 	bfc	r1, #19, #12
 800a42e:	f36f 71df 	bfc	r1, #31, #1
 800a432:	2300      	movs	r3, #0
 800a434:	4875      	ldr	r0, [pc, #468]	; (800a60c <uart_stm32_async_tx+0x288>)
 800a436:	f004 fc94 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 800a43a:	46c5      	mov	sp, r8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800a43c:	2340      	movs	r3, #64	; 0x40
 800a43e:	6233      	str	r3, [r6, #32]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800a440:	6833      	ldr	r3, [r6, #0]
 800a442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a446:	6033      	str	r3, [r6, #0]
	data->dma_tx.blk_cfg.source_address = (uint32_t)data->dma_tx.buffer;
 800a448:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800a44c:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	data->dma_tx.blk_cfg.block_size = data->dma_tx.buffer_length;
 800a450:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a454:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	ret = dma_config(data->dma_tx.dma_dev, data->dma_tx.dma_channel,
 800a458:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
	const struct dma_driver_api *api =
 800a45c:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, channel, config);
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
 800a464:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800a468:	4798      	blx	r3
	if (ret != 0) {
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d176      	bne.n	800a55c <uart_stm32_async_tx+0x1d8>
	if (dma_start(data->dma_tx.dma_dev, data->dma_tx.dma_channel)) {
 800a46e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800a472:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	const struct dma_driver_api *api =
 800a476:	6883      	ldr	r3, [r0, #8]
	return api->start(dev, channel);
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	4798      	blx	r3
 800a47c:	4606      	mov	r6, r0
 800a47e:	2800      	cmp	r0, #0
 800a480:	f040 8090 	bne.w	800a5a4 <uart_stm32_async_tx+0x220>
	async_timer_start(&data->dma_tx.timeout_work, data->dma_tx.timeout);
 800a484:	f504 7888 	add.w	r8, r4, #272	; 0x110
 800a488:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
	if ((timeout != SYS_FOREVER_US) && (timeout != 0)) {
 800a48c:	1c63      	adds	r3, r4, #1
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d953      	bls.n	800a53a <uart_stm32_async_tx+0x1b6>
		LOG_DBG("async timer started for %d us", timeout);
 800a492:	2301      	movs	r3, #1
 800a494:	813b      	strh	r3, [r7, #8]
 800a496:	2302      	movs	r3, #2
 800a498:	817b      	strh	r3, [r7, #10]
 800a49a:	46e9      	mov	r9, sp
 800a49c:	b088      	sub	sp, #32
 800a49e:	466b      	mov	r3, sp
 800a4a0:	f113 020c 	adds.w	r2, r3, #12
 800a4a4:	f000 80a2 	beq.w	800a5ec <uart_stm32_async_tx+0x268>
 800a4a8:	2110      	movs	r1, #16
 800a4aa:	2001      	movs	r0, #1
 800a4ac:	8138      	strh	r0, [r7, #8]
 800a4ae:	b11a      	cbz	r2, 800a4b8 <uart_stm32_async_tx+0x134>
 800a4b0:	2904      	cmp	r1, #4
 800a4b2:	dd01      	ble.n	800a4b8 <uart_stm32_async_tx+0x134>
 800a4b4:	4856      	ldr	r0, [pc, #344]	; (800a610 <uart_stm32_async_tx+0x28c>)
 800a4b6:	6118      	str	r0, [r3, #16]
 800a4b8:	2002      	movs	r0, #2
 800a4ba:	8178      	strh	r0, [r7, #10]
 800a4bc:	b11a      	cbz	r2, 800a4c6 <uart_stm32_async_tx+0x142>
 800a4be:	2908      	cmp	r1, #8
 800a4c0:	dd01      	ble.n	800a4c6 <uart_stm32_async_tx+0x142>
 800a4c2:	4854      	ldr	r0, [pc, #336]	; (800a614 <uart_stm32_async_tx+0x290>)
 800a4c4:	6158      	str	r0, [r3, #20]
 800a4c6:	b112      	cbz	r2, 800a4ce <uart_stm32_async_tx+0x14a>
 800a4c8:	290c      	cmp	r1, #12
 800a4ca:	dd00      	ble.n	800a4ce <uart_stm32_async_tx+0x14a>
 800a4cc:	619c      	str	r4, [r3, #24]
 800a4ce:	290f      	cmp	r1, #15
 800a4d0:	f340 808f 	ble.w	800a5f2 <uart_stm32_async_tx+0x26e>
 800a4d4:	2010      	movs	r0, #16
 800a4d6:	b12a      	cbz	r2, 800a4e4 <uart_stm32_async_tx+0x160>
 800a4d8:	2100      	movs	r1, #0
 800a4da:	6079      	str	r1, [r7, #4]
 800a4dc:	2104      	movs	r1, #4
 800a4de:	7139      	strb	r1, [r7, #4]
 800a4e0:	6879      	ldr	r1, [r7, #4]
 800a4e2:	60d9      	str	r1, [r3, #12]
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	f36f 0100 	bfc	r1, #0, #1
 800a4ea:	f36f 0141 	bfc	r1, #1, #1
 800a4ee:	f36f 0182 	bfc	r1, #2, #1
 800a4f2:	f36f 01c5 	bfc	r1, #3, #3
 800a4f6:	2304      	movs	r3, #4
 800a4f8:	f363 1188 	bfi	r1, r3, #6, #3
 800a4fc:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 800a500:	f363 2152 	bfi	r1, r3, #9, #10
 800a504:	f36f 41de 	bfc	r1, #19, #12
 800a508:	f36f 71df 	bfc	r1, #31, #1
 800a50c:	2300      	movs	r3, #0
 800a50e:	483f      	ldr	r0, [pc, #252]	; (800a60c <uart_stm32_async_tx+0x288>)
 800a510:	f004 fc27 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 800a514:	46cd      	mov	sp, r9
		k_work_reschedule(work, K_USEC(timeout));
 800a516:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800a51a:	17d9      	asrs	r1, r3, #31
		t += off;
 800a51c:	f113 0063 	adds.w	r0, r3, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
 800a520:	f04f 0264 	mov.w	r2, #100	; 0x64
 800a524:	f04f 0300 	mov.w	r3, #0
 800a528:	f141 0100 	adc.w	r1, r1, #0
 800a52c:	f7f6 fa56 	bl	80009dc <__aeabi_uldivmod>
 800a530:	4602      	mov	r2, r0
 800a532:	460b      	mov	r3, r1
 800a534:	4640      	mov	r0, r8
 800a536:	f001 f9c3 	bl	800b8c0 <k_work_reschedule>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a53a:	686b      	ldr	r3, [r5, #4]
 800a53c:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800a53e:	6893      	ldr	r3, [r2, #8]
 800a540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a544:	6093      	str	r3, [r2, #8]
}
 800a546:	4630      	mov	r0, r6
 800a548:	375c      	adds	r7, #92	; 0x5c
 800a54a:	46bd      	mov	sp, r7
 800a54c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_DBG("tx: l=%d", data->dma_tx.buffer_length);
 800a550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a554:	e73a      	b.n	800a3cc <uart_stm32_async_tx+0x48>
 800a556:	f06f 001b 	mvn.w	r0, #27
 800a55a:	e74f      	b.n	800a3fc <uart_stm32_async_tx+0x78>
		LOG_ERR("dma tx config error!");
 800a55c:	2201      	movs	r2, #1
 800a55e:	813a      	strh	r2, [r7, #8]
 800a560:	4b2d      	ldr	r3, [pc, #180]	; (800a618 <uart_stm32_async_tx+0x294>)
 800a562:	653b      	str	r3, [r7, #80]	; 0x50
 800a564:	2300      	movs	r3, #0
 800a566:	607b      	str	r3, [r7, #4]
 800a568:	2102      	movs	r1, #2
 800a56a:	7139      	strb	r1, [r7, #4]
 800a56c:	6879      	ldr	r1, [r7, #4]
 800a56e:	64f9      	str	r1, [r7, #76]	; 0x4c
 800a570:	4619      	mov	r1, r3
 800a572:	f363 0100 	bfi	r1, r3, #0, #1
 800a576:	f363 0141 	bfi	r1, r3, #1, #1
 800a57a:	f363 0182 	bfi	r1, r3, #2, #1
 800a57e:	f363 01c5 	bfi	r1, r3, #3, #3
 800a582:	f362 1188 	bfi	r1, r2, #6, #3
 800a586:	2208      	movs	r2, #8
 800a588:	f362 2152 	bfi	r1, r2, #9, #10
 800a58c:	f363 41de 	bfi	r1, r3, #19, #12
 800a590:	f363 71df 	bfi	r1, r3, #31, #1
 800a594:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800a598:	481c      	ldr	r0, [pc, #112]	; (800a60c <uart_stm32_async_tx+0x288>)
 800a59a:	f004 fbe2 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800a59e:	f06f 0615 	mvn.w	r6, #21
 800a5a2:	e7d0      	b.n	800a546 <uart_stm32_async_tx+0x1c2>
		LOG_ERR("UART err: TX DMA start failed!");
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	813a      	strh	r2, [r7, #8]
 800a5a8:	4b1c      	ldr	r3, [pc, #112]	; (800a61c <uart_stm32_async_tx+0x298>)
 800a5aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	607b      	str	r3, [r7, #4]
 800a5b0:	2102      	movs	r1, #2
 800a5b2:	7139      	strb	r1, [r7, #4]
 800a5b4:	6879      	ldr	r1, [r7, #4]
 800a5b6:	6379      	str	r1, [r7, #52]	; 0x34
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	f363 0100 	bfi	r1, r3, #0, #1
 800a5be:	f363 0141 	bfi	r1, r3, #1, #1
 800a5c2:	f363 0182 	bfi	r1, r3, #2, #1
 800a5c6:	f363 01c5 	bfi	r1, r3, #3, #3
 800a5ca:	f362 1188 	bfi	r1, r2, #6, #3
 800a5ce:	2208      	movs	r2, #8
 800a5d0:	f362 2152 	bfi	r1, r2, #9, #10
 800a5d4:	f363 41de 	bfi	r1, r3, #19, #12
 800a5d8:	f363 71df 	bfi	r1, r3, #31, #1
 800a5dc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800a5e0:	480a      	ldr	r0, [pc, #40]	; (800a60c <uart_stm32_async_tx+0x288>)
 800a5e2:	f004 fbbe 	bl	800ed62 <z_impl_z_log_msg2_static_create>
		return -EFAULT;
 800a5e6:	f06f 060d 	mvn.w	r6, #13
 800a5ea:	e7ac      	b.n	800a546 <uart_stm32_async_tx+0x1c2>
		LOG_DBG("async timer started for %d us", timeout);
 800a5ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5f0:	e75b      	b.n	800a4aa <uart_stm32_async_tx+0x126>
 800a5f2:	f06f 001b 	mvn.w	r0, #27
 800a5f6:	e76e      	b.n	800a4d6 <uart_stm32_async_tx+0x152>
		return -ENODEV;
 800a5f8:	f06f 0612 	mvn.w	r6, #18
 800a5fc:	e7a3      	b.n	800a546 <uart_stm32_async_tx+0x1c2>
		return -EBUSY;
 800a5fe:	f06f 060f 	mvn.w	r6, #15
 800a602:	e7a0      	b.n	800a546 <uart_stm32_async_tx+0x1c2>
 800a604:	08013034 	.word	0x08013034
 800a608:	08013148 	.word	0x08013148
 800a60c:	080119ec 	.word	0x080119ec
 800a610:	08012fcc 	.word	0x08012fcc
 800a614:	08013134 	.word	0x08013134
 800a618:	08013044 	.word	0x08013044
 800a61c:	0801305c 	.word	0x0801305c

0800a620 <random_byte_get>:
	return 0;
}
#endif /* !STM32_CONDRST_SUPPORT */

static int random_byte_get(void)
{
 800a620:	b538      	push	{r3, r4, r5, lr}
	int retval = -EAGAIN;
	unsigned int key;
	RNG_TypeDef *rng = entropy_stm32_rng_data.rng;
 800a622:	4b17      	ldr	r3, [pc, #92]	; (800a680 <random_byte_get+0x60>)
 800a624:	681c      	ldr	r4, [r3, #0]
	__asm__ volatile(
 800a626:	f04f 0310 	mov.w	r3, #16
 800a62a:	f3ef 8511 	mrs	r5, BASEPRI
 800a62e:	f383 8812 	msr	BASEPRI_MAX, r3
 800a632:	f3bf 8f6f 	isb	sy
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_SEIS(RNG_TypeDef *RNGx)
{
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800a636:	6863      	ldr	r3, [r4, #4]
 800a638:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a63c:	d004      	beq.n	800a648 <random_byte_get+0x28>

	key = irq_lock();

	if (LL_RNG_IsActiveFlag_SEIS(rng) && (recover_seed_error(rng) < 0)) {
 800a63e:	4620      	mov	r0, r4
 800a640:	f005 fe53 	bl	80102ea <recover_seed_error>
 800a644:	2800      	cmp	r0, #0
 800a646:	db0b      	blt.n	800a660 <random_byte_get+0x40>
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 800a648:	6863      	ldr	r3, [r4, #4]
 800a64a:	f013 0f01 	tst.w	r3, #1
 800a64e:	d00a      	beq.n	800a666 <random_byte_get+0x46>
		retval = -EIO;
		goto out;
	}

	if ((LL_RNG_IsActiveFlag_DRDY(rng) == 1)) {
		if (entropy_stm32_got_error(rng)) {
 800a650:	4620      	mov	r0, r4
 800a652:	f005 fe3c 	bl	80102ce <entropy_stm32_got_error>
 800a656:	b968      	cbnz	r0, 800a674 <random_byte_get+0x54>
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(RNG_TypeDef *RNGx)
{
  return (uint32_t)(READ_REG(RNGx->DR));
 800a658:	68a0      	ldr	r0, [r4, #8]
			retval = -EIO;
			goto out;
		}

		retval = LL_RNG_ReadRandData32(rng);
		if (retval == 0) {
 800a65a:	b170      	cbz	r0, 800a67a <random_byte_get+0x5a>
			 */
			retval = -EAGAIN;
			goto out;
		}

		retval &= 0xFF;
 800a65c:	b2c0      	uxtb	r0, r0
 800a65e:	e004      	b.n	800a66a <random_byte_get+0x4a>
		retval = -EIO;
 800a660:	f06f 0004 	mvn.w	r0, #4
 800a664:	e001      	b.n	800a66a <random_byte_get+0x4a>
	int retval = -EAGAIN;
 800a666:	f06f 000a 	mvn.w	r0, #10
	__asm__ volatile(
 800a66a:	f385 8811 	msr	BASEPRI, r5
 800a66e:	f3bf 8f6f 	isb	sy

out:
	irq_unlock(key);

	return retval;
}
 800a672:	bd38      	pop	{r3, r4, r5, pc}
			retval = -EIO;
 800a674:	f06f 0004 	mvn.w	r0, #4
 800a678:	e7f7      	b.n	800a66a <random_byte_get+0x4a>
			retval = -EAGAIN;
 800a67a:	f06f 000a 	mvn.w	r0, #10
 800a67e:	e7f4      	b.n	800a66a <random_byte_get+0x4a>
 800a680:	20000364 	.word	0x20000364

0800a684 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
 800a684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a686:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
 800a688:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
 800a68a:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
 800a68c:	f04f 0310 	mov.w	r3, #16
 800a690:	f3ef 8c11 	mrs	ip, BASEPRI
 800a694:	f383 8812 	msr	BASEPRI_MAX, r3
 800a698:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
 800a69c:	7806      	ldrb	r6, [r0, #0]
 800a69e:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
 800a6a0:	7847      	ldrb	r7, [r0, #1]

	available = (last - first) & mask;
 800a6a2:	1bad      	subs	r5, r5, r6
 800a6a4:	4025      	ands	r5, r4
	if (available < len) {
 800a6a6:	42aa      	cmp	r2, r5
 800a6a8:	d900      	bls.n	800a6ac <rng_pool_get+0x28>
		len = available;
 800a6aa:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
 800a6ac:	18b0      	adds	r0, r6, r2
 800a6ae:	4020      	ands	r0, r4
 800a6b0:	f88e 0000 	strb.w	r0, [lr]
	__asm__ volatile(
 800a6b4:	f38c 8811 	msr	BASEPRI, ip
 800a6b8:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
 800a6bc:	4608      	mov	r0, r1
}
 800a6be:	e007      	b.n	800a6d0 <rng_pool_get+0x4c>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
 800a6c0:	eb0e 0203 	add.w	r2, lr, r3
 800a6c4:	7952      	ldrb	r2, [r2, #5]
 800a6c6:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	4023      	ands	r3, r4
	while (likely(len--)) {
 800a6ce:	4662      	mov	r2, ip
 800a6d0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800a6d4:	fa1f fc8c 	uxth.w	ip, ip
 800a6d8:	2a00      	cmp	r2, #0
 800a6da:	d1f1      	bne.n	800a6c0 <rng_pool_get+0x3c>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
 800a6dc:	42be      	cmp	r6, r7
 800a6de:	d10f      	bne.n	800a700 <rng_pool_get+0x7c>
	__asm__ volatile(
 800a6e0:	f04f 0210 	mov.w	r2, #16
 800a6e4:	f3ef 8311 	mrs	r3, BASEPRI
 800a6e8:	f382 8812 	msr	BASEPRI_MAX, r2
 800a6ec:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
 800a6f0:	f89e 2000 	ldrb.w	r2, [lr]
 800a6f4:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
 800a700:	1a40      	subs	r0, r0, r1
 800a702:	b280      	uxth	r0, r0
	available = available - len;
 800a704:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
 800a706:	f89e 3004 	ldrb.w	r3, [lr, #4]
 800a70a:	42ab      	cmp	r3, r5
 800a70c:	d305      	bcc.n	800a71a <rng_pool_get+0x96>
		LL_RNG_EnableIT(entropy_stm32_rng_data.rng);
 800a70e:	4b03      	ldr	r3, [pc, #12]	; (800a71c <rng_pool_get+0x98>)
 800a710:	681a      	ldr	r2, [r3, #0]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 800a712:	6813      	ldr	r3, [r2, #0]
 800a714:	f043 0308 	orr.w	r3, r3, #8
 800a718:	6013      	str	r3, [r2, #0]
	}

	return len;
}
 800a71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a71c:	20000364 	.word	0x20000364

0800a720 <entropy_stm32_rng_get_entropy_isr>:

static int entropy_stm32_rng_get_entropy_isr(const struct device *dev,
						uint8_t *buf,
						uint16_t len,
					uint32_t flags)
{
 800a720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a722:	460d      	mov	r5, r1
 800a724:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_stm32_rng_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 800a726:	f013 0f01 	tst.w	r3, #1
 800a72a:	d103      	bne.n	800a734 <entropy_stm32_rng_get_entropy_isr+0x14>
		return rng_pool_get(
 800a72c:	481f      	ldr	r0, [pc, #124]	; (800a7ac <entropy_stm32_rng_get_entropy_isr+0x8c>)
 800a72e:	f7ff ffa9 	bl	800a684 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
 800a732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
 800a734:	b90a      	cbnz	r2, 800a73a <entropy_stm32_rng_get_entropy_isr+0x1a>
	return cnt;
 800a736:	4620      	mov	r0, r4
 800a738:	e7fb      	b.n	800a732 <entropy_stm32_rng_get_entropy_isr+0x12>
	__asm__ volatile(
 800a73a:	f04f 0310 	mov.w	r3, #16
 800a73e:	f3ef 8611 	mrs	r6, BASEPRI
 800a742:	f383 8812 	msr	BASEPRI_MAX, r3
 800a746:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
 800a74a:	2050      	movs	r0, #80	; 0x50
 800a74c:	f7f9 fc5e 	bl	800400c <arch_irq_is_enabled>
 800a750:	4607      	mov	r7, r0
		irq_disable(IRQN);
 800a752:	2050      	movs	r0, #80	; 0x50
 800a754:	f7f9 fc46 	bl	8003fe4 <arch_irq_disable>
	__asm__ volatile(
 800a758:	f386 8811 	msr	BASEPRI, r6
 800a75c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a760:	4b13      	ldr	r3, [pc, #76]	; (800a7b0 <entropy_stm32_rng_get_entropy_isr+0x90>)
 800a762:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a766:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 800a76a:	4626      	mov	r6, r4
 800a76c:	e004      	b.n	800a778 <entropy_stm32_rng_get_entropy_isr+0x58>
  __ASM volatile ("dsb 0xF":::"memory");
 800a76e:	f3bf 8f4f 	dsb	sy
				__WFE();
 800a772:	bf20      	wfe
				__SEV();
 800a774:	bf40      	sev
				__WFE();
 800a776:	bf20      	wfe
			while (LL_RNG_IsActiveFlag_DRDY(
 800a778:	4b0e      	ldr	r3, [pc, #56]	; (800a7b4 <entropy_stm32_rng_get_entropy_isr+0x94>)
 800a77a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	f013 0f01 	tst.w	r3, #1
 800a782:	d0f4      	beq.n	800a76e <entropy_stm32_rng_get_entropy_isr+0x4e>
			byte = random_byte_get();
 800a784:	f7ff ff4c 	bl	800a620 <random_byte_get>
 800a788:	4b09      	ldr	r3, [pc, #36]	; (800a7b0 <entropy_stm32_rng_get_entropy_isr+0x90>)
 800a78a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a78e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			if (byte < 0) {
 800a792:	2800      	cmp	r0, #0
 800a794:	db02      	blt.n	800a79c <entropy_stm32_rng_get_entropy_isr+0x7c>
			buf[--len] = byte;
 800a796:	3e01      	subs	r6, #1
 800a798:	b2b6      	uxth	r6, r6
 800a79a:	55a8      	strb	r0, [r5, r6]
		} while (len);
 800a79c:	2e00      	cmp	r6, #0
 800a79e:	d1eb      	bne.n	800a778 <entropy_stm32_rng_get_entropy_isr+0x58>
		if (irq_enabled) {
 800a7a0:	2f00      	cmp	r7, #0
 800a7a2:	d0c8      	beq.n	800a736 <entropy_stm32_rng_get_entropy_isr+0x16>
			irq_enable(IRQN);
 800a7a4:	2050      	movs	r0, #80	; 0x50
 800a7a6:	f7f9 fc0f 	bl	8003fc8 <arch_irq_enable>
 800a7aa:	e7c4      	b.n	800a736 <entropy_stm32_rng_get_entropy_isr+0x16>
 800a7ac:	2000039c 	.word	0x2000039c
 800a7b0:	e000e100 	.word	0xe000e100
 800a7b4:	20000364 	.word	0x20000364

0800a7b8 <stm32_rng_isr>:
{
 800a7b8:	b510      	push	{r4, lr}
	byte = random_byte_get();
 800a7ba:	f7ff ff31 	bl	800a620 <random_byte_get>
	if (byte < 0) {
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	db06      	blt.n	800a7d0 <stm32_rng_isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_stm32_rng_data.isr),
 800a7c2:	b2c4      	uxtb	r4, r0
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	480b      	ldr	r0, [pc, #44]	; (800a7f4 <stm32_rng_isr+0x3c>)
 800a7c8:	f005 fda1 	bl	801030e <rng_pool_put>
	if (ret < 0) {
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	db00      	blt.n	800a7d2 <stm32_rng_isr+0x1a>
}
 800a7d0:	bd10      	pop	{r4, pc}
		ret = rng_pool_put(
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	4808      	ldr	r0, [pc, #32]	; (800a7f8 <stm32_rng_isr+0x40>)
 800a7d6:	f005 fd9a 	bl	801030e <rng_pool_put>
		if (ret < 0) {
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	db03      	blt.n	800a7e6 <stm32_rng_isr+0x2e>
	z_impl_k_sem_give(sem);
 800a7de:	4807      	ldr	r0, [pc, #28]	; (800a7fc <stm32_rng_isr+0x44>)
 800a7e0:	f000 fe9c 	bl	800b51c <z_impl_k_sem_give>
}
 800a7e4:	e7f4      	b.n	800a7d0 <stm32_rng_isr+0x18>
			LL_RNG_DisableIT(entropy_stm32_rng_data.rng);
 800a7e6:	4b06      	ldr	r3, [pc, #24]	; (800a800 <stm32_rng_isr+0x48>)
 800a7e8:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(RNGx->CR, RNG_CR_IE);
 800a7ea:	6813      	ldr	r3, [r2, #0]
 800a7ec:	f023 0308 	bic.w	r3, r3, #8
 800a7f0:	6013      	str	r3, [r2, #0]
}
 800a7f2:	e7f4      	b.n	800a7de <stm32_rng_isr+0x26>
 800a7f4:	2000039c 	.word	0x2000039c
 800a7f8:	200003b1 	.word	0x200003b1
 800a7fc:	20000384 	.word	0x20000384
 800a800:	20000364 	.word	0x20000364

0800a804 <entropy_stm32_rng_get_entropy>:
{
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	460f      	mov	r7, r1
 800a808:	4614      	mov	r4, r2
	while (len) {
 800a80a:	e007      	b.n	800a81c <entropy_stm32_rng_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
 800a80c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a814:	f106 0018 	add.w	r0, r6, #24
 800a818:	f000 fea8 	bl	800b56c <z_impl_k_sem_take>
 800a81c:	b1cc      	cbz	r4, 800a852 <entropy_stm32_rng_get_entropy+0x4e>
 800a81e:	4d0e      	ldr	r5, [pc, #56]	; (800a858 <entropy_stm32_rng_get_entropy+0x54>)
 800a820:	f105 0608 	add.w	r6, r5, #8
 800a824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a82c:	4630      	mov	r0, r6
 800a82e:	f000 fe9d 	bl	800b56c <z_impl_k_sem_take>
		bytes = rng_pool_get(
 800a832:	4622      	mov	r2, r4
 800a834:	4639      	mov	r1, r7
 800a836:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 800a83a:	f7ff ff23 	bl	800a684 <rng_pool_get>
 800a83e:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 800a840:	4630      	mov	r0, r6
 800a842:	f000 fe6b 	bl	800b51c <z_impl_k_sem_give>
		if (bytes == 0U) {
 800a846:	2d00      	cmp	r5, #0
 800a848:	d0e0      	beq.n	800a80c <entropy_stm32_rng_get_entropy+0x8>
		len -= bytes;
 800a84a:	1b64      	subs	r4, r4, r5
 800a84c:	b2a4      	uxth	r4, r4
		buf += bytes;
 800a84e:	442f      	add	r7, r5
 800a850:	e7e4      	b.n	800a81c <entropy_stm32_rng_get_entropy+0x18>
}
 800a852:	2000      	movs	r0, #0
 800a854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a856:	bf00      	nop
 800a858:	20000364 	.word	0x20000364

0800a85c <entropy_stm32_rng_init>:

static int entropy_stm32_rng_init(const struct device *dev)
{
 800a85c:	b538      	push	{r3, r4, r5, lr}
	const struct entropy_stm32_rng_dev_cfg *dev_cfg;
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	dev_data = dev->data;
 800a85e:	6904      	ldr	r4, [r0, #16]
	dev_cfg = dev->config;
 800a860:	6845      	ldr	r5, [r0, #4]
  *         @arg @ref LL_RCC_PLLSAI1Q_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 800a862:	4b2d      	ldr	r3, [pc, #180]	; (800a918 <entropy_stm32_rng_init+0xbc>)
 800a864:	68da      	ldr	r2, [r3, #12]
 800a866:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800a86a:	f042 0201 	orr.w	r2, r2, #1
 800a86e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLQ);
 800a870:	691a      	ldr	r2, [r3, #16]
 800a872:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800a876:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800a87a:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 800a87e:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a886:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLSAI1CFGR  PLLSAI1QEN    LL_RCC_PLLSAI1_EnableDomain_48M
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_48M(void)
{
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN);
 800a888:	691a      	ldr	r2, [r3, #16]
 800a88a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a88e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800a890:	4b21      	ldr	r3, [pc, #132]	; (800a918 <entropy_stm32_rng_init+0xbc>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800a898:	d0fa      	beq.n	800a890 <entropy_stm32_rng_init+0x34>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, RNGxSource);
 800a89a:	4a1f      	ldr	r2, [pc, #124]	; (800a918 <entropy_stm32_rng_init+0xbc>)
 800a89c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a8a0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a8a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a8a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	z_stm32_hsem_unlock(CFG_HW_CLK48_CONFIG_SEMID);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

#endif /* CONFIG_SOC_SERIES_STM32L4X */

	dev_data->clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
 800a8ac:	481b      	ldr	r0, [pc, #108]	; (800a91c <entropy_stm32_rng_init+0xc0>)
 800a8ae:	6060      	str	r0, [r4, #4]
 800a8b0:	f005 fdab 	bl	801040a <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800a8b4:	b120      	cbz	r0, 800a8c0 <entropy_stm32_rng_init+0x64>
	const struct clock_control_driver_api *api =
 800a8b6:	4819      	ldr	r0, [pc, #100]	; (800a91c <entropy_stm32_rng_init+0xc0>)
 800a8b8:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4629      	mov	r1, r5
 800a8be:	4798      	blx	r3
#endif
	/* Write RNG HTCR configuration */
	LL_RNG_SetHealthConfig(dev_data->rng, DT_INST_PROP(0, health_test_config));
#endif

	LL_RNG_EnableIT(dev_data->rng);
 800a8c0:	6822      	ldr	r2, [r4, #0]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 800a8c2:	6813      	ldr	r3, [r2, #0]
 800a8c4:	f043 0308 	orr.w	r3, r3, #8
 800a8c8:	6013      	str	r3, [r2, #0]

	LL_RNG_Enable(dev_data->rng);
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f850 2b08 	ldr.w	r2, [r0], #8
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800a8d0:	6813      	ldr	r3, [r2, #0]
 800a8d2:	f043 0304 	orr.w	r3, r3, #4
 800a8d6:	6013      	str	r3, [r2, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
 800a8d8:	2201      	movs	r2, #1
 800a8da:	4611      	mov	r1, r2
 800a8dc:	f005 fe43 	bl	8010566 <z_impl_k_sem_init>

	/* Locking semaphore initialized to 1 (unlocked) */
	k_sem_init(&dev_data->sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&dev_data->sem_sync, 0, 1);
 800a8e0:	f104 0020 	add.w	r0, r4, #32
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	f005 fe3d 	bl	8010566 <z_impl_k_sem_init>

	rng_pool_init((struct rng_pool *)(dev_data->thr),
 800a8ec:	2204      	movs	r2, #4
 800a8ee:	2108      	movs	r1, #8
 800a8f0:	f104 004d 	add.w	r0, r4, #77	; 0x4d
 800a8f4:	f005 fd1f 	bl	8010336 <rng_pool_init>
		      CONFIG_ENTROPY_STM32_THR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(dev_data->isr),
 800a8f8:	220c      	movs	r2, #12
 800a8fa:	2110      	movs	r1, #16
 800a8fc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800a900:	f005 fd19 	bl	8010336 <rng_pool_init>
		      CONFIG_ENTROPY_STM32_ISR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_ISR_THRESHOLD);

	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 800a904:	2200      	movs	r2, #0
 800a906:	4611      	mov	r1, r2
 800a908:	2050      	movs	r0, #80	; 0x50
 800a90a:	f7f9 fb8d 	bl	8004028 <z_arm_irq_priority_set>
	irq_enable(IRQN);
 800a90e:	2050      	movs	r0, #80	; 0x50
 800a910:	f7f9 fb5a 	bl	8003fc8 <arch_irq_enable>

	return 0;
}
 800a914:	2000      	movs	r0, #0
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	40021000 	.word	0x40021000
 800a91c:	08011594 	.word	0x08011594

0800a920 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800a920:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a924:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 800a926:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 800a928:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800a92a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800a92e:	d101      	bne.n	800a934 <elapsed+0x14>
	    || (val1 < val2)) {
 800a930:	4281      	cmp	r1, r0
 800a932:	d208      	bcs.n	800a946 <elapsed+0x26>
		overflow_cyc += last_load;
 800a934:	4b07      	ldr	r3, [pc, #28]	; (800a954 <elapsed+0x34>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	4907      	ldr	r1, [pc, #28]	; (800a958 <elapsed+0x38>)
 800a93a:	6809      	ldr	r1, [r1, #0]
 800a93c:	440a      	add	r2, r1
 800a93e:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800a940:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a944:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 800a946:	4b04      	ldr	r3, [pc, #16]	; (800a958 <elapsed+0x38>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	1a1b      	subs	r3, r3, r0
 800a94c:	4a01      	ldr	r2, [pc, #4]	; (800a954 <elapsed+0x34>)
 800a94e:	6810      	ldr	r0, [r2, #0]
}
 800a950:	4418      	add	r0, r3
 800a952:	4770      	bx	lr
 800a954:	200013a8 	.word	0x200013a8
 800a958:	200013a4 	.word	0x200013a4

0800a95c <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a95c:	4b09      	ldr	r3, [pc, #36]	; (800a984 <sys_clock_driver_init+0x28>)
 800a95e:	2210      	movs	r2, #16
 800a960:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800a964:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800a968:	4b07      	ldr	r3, [pc, #28]	; (800a988 <sys_clock_driver_init+0x2c>)
 800a96a:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 800a96c:	2000      	movs	r0, #0
 800a96e:	4b07      	ldr	r3, [pc, #28]	; (800a98c <sys_clock_driver_init+0x30>)
 800a970:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800a972:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a976:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800a978:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800a97a:	691a      	ldr	r2, [r3, #16]
 800a97c:	f042 0207 	orr.w	r2, r2, #7
 800a980:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800a982:	4770      	bx	lr
 800a984:	e000ed00 	.word	0xe000ed00
 800a988:	200013a4 	.word	0x200013a4
 800a98c:	200013a8 	.word	0x200013a8

0800a990 <sys_clock_isr>:
{
 800a990:	b508      	push	{r3, lr}
	elapsed();
 800a992:	f7ff ffc5 	bl	800a920 <elapsed>
	cycle_count += overflow_cyc;
 800a996:	4b0c      	ldr	r3, [pc, #48]	; (800a9c8 <sys_clock_isr+0x38>)
 800a998:	6818      	ldr	r0, [r3, #0]
 800a99a:	4a0c      	ldr	r2, [pc, #48]	; (800a9cc <sys_clock_isr+0x3c>)
 800a99c:	6811      	ldr	r1, [r2, #0]
 800a99e:	4408      	add	r0, r1
 800a9a0:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800a9a6:	4a0a      	ldr	r2, [pc, #40]	; (800a9d0 <sys_clock_isr+0x40>)
 800a9a8:	6813      	ldr	r3, [r2, #0]
 800a9aa:	1ac0      	subs	r0, r0, r3
 800a9ac:	4909      	ldr	r1, [pc, #36]	; (800a9d4 <sys_clock_isr+0x44>)
 800a9ae:	fba1 1000 	umull	r1, r0, r1, r0
 800a9b2:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 800a9b4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800a9b8:	fb01 3300 	mla	r3, r1, r0, r3
 800a9bc:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 800a9be:	f001 fc67 	bl	800c290 <sys_clock_announce>
	z_arm_int_exit();
 800a9c2:	f7f9 fc33 	bl	800422c <z_arm_exc_exit>
}
 800a9c6:	bd08      	pop	{r3, pc}
 800a9c8:	200013a8 	.word	0x200013a8
 800a9cc:	200013a0 	.word	0x200013a0
 800a9d0:	2000139c 	.word	0x2000139c
 800a9d4:	10624dd3 	.word	0x10624dd3

0800a9d8 <sys_clock_set_timeout>:
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 800a9d8:	b111      	cbz	r1, 800a9e0 <sys_clock_set_timeout+0x8>
 800a9da:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a9de:	d03a      	beq.n	800aa56 <sys_clock_set_timeout+0x7e>
{
 800a9e0:	b570      	push	{r4, r5, r6, lr}
	uint32_t last_load_ = last_load;
 800a9e2:	4b38      	ldr	r3, [pc, #224]	; (800aac4 <sys_clock_set_timeout+0xec>)
 800a9e4:	681d      	ldr	r5, [r3, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800a9e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a9ea:	d03f      	beq.n	800aa6c <sys_clock_set_timeout+0x94>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800a9ec:	2801      	cmp	r0, #1
 800a9ee:	dd40      	ble.n	800aa72 <sys_clock_set_timeout+0x9a>
 800a9f0:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 800a9f4:	dc3f      	bgt.n	800aa76 <sys_clock_set_timeout+0x9e>
 800a9f6:	1e44      	subs	r4, r0, #1
	__asm__ volatile(
 800a9f8:	f04f 0310 	mov.w	r3, #16
 800a9fc:	f3ef 8611 	mrs	r6, BASEPRI
 800aa00:	f383 8812 	msr	BASEPRI_MAX, r3
 800aa04:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 800aa08:	f7ff ff8a 	bl	800a920 <elapsed>
	val1 = SysTick->VAL;
 800aa0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aa10:	6999      	ldr	r1, [r3, #24]
	cycle_count += pending;
 800aa12:	4b2d      	ldr	r3, [pc, #180]	; (800aac8 <sys_clock_set_timeout+0xf0>)
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	4410      	add	r0, r2
 800aa18:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 800aa1a:	4b2c      	ldr	r3, [pc, #176]	; (800aacc <sys_clock_set_timeout+0xf4>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800aa20:	4b2b      	ldr	r3, [pc, #172]	; (800aad0 <sys_clock_set_timeout+0xf8>)
 800aa22:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800aa24:	1a83      	subs	r3, r0, r2
 800aa26:	d429      	bmi.n	800aa7c <sys_clock_set_timeout+0xa4>
		delay = ticks * CYC_PER_TICK;
 800aa28:	f44f 5cfa 	mov.w	ip, #8000	; 0x1f40
		delay += unannounced;
 800aa2c:	fb0c 3304 	mla	r3, ip, r4, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800aa30:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 800aa34:	331f      	adds	r3, #31
 800aa36:	4c27      	ldr	r4, [pc, #156]	; (800aad4 <sys_clock_set_timeout+0xfc>)
 800aa38:	fba4 4303 	umull	r4, r3, r4, r3
 800aa3c:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 800aa3e:	1a12      	subs	r2, r2, r0
 800aa40:	fb0c 2303 	mla	r3, ip, r3, r2
		delay = MAX(delay, MIN_DELAY);
 800aa44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa48:	d91d      	bls.n	800aa86 <sys_clock_set_timeout+0xae>
		if (delay > MAX_CYCLES) {
 800aa4a:	4a23      	ldr	r2, [pc, #140]	; (800aad8 <sys_clock_set_timeout+0x100>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d91c      	bls.n	800aa8a <sys_clock_set_timeout+0xb2>
			last_load = MAX_CYCLES;
 800aa50:	4b1c      	ldr	r3, [pc, #112]	; (800aac4 <sys_clock_set_timeout+0xec>)
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	e01b      	b.n	800aa8e <sys_clock_set_timeout+0xb6>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800aa56:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800aa5a:	6913      	ldr	r3, [r2, #16]
 800aa5c:	f023 0301 	bic.w	r3, r3, #1
 800aa60:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 800aa62:	4b18      	ldr	r3, [pc, #96]	; (800aac4 <sys_clock_set_timeout+0xec>)
 800aa64:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800aa68:	601a      	str	r2, [r3, #0]
		return;
 800aa6a:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800aa6c:	f44f 6003 	mov.w	r0, #2096	; 0x830
 800aa70:	e7be      	b.n	800a9f0 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800aa72:	2400      	movs	r4, #0
 800aa74:	e7c0      	b.n	800a9f8 <sys_clock_set_timeout+0x20>
 800aa76:	f44f 6403 	mov.w	r4, #2096	; 0x830
 800aa7a:	e7bd      	b.n	800a9f8 <sys_clock_set_timeout+0x20>
		last_load = MIN_DELAY;
 800aa7c:	4b11      	ldr	r3, [pc, #68]	; (800aac4 <sys_clock_set_timeout+0xec>)
 800aa7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	e003      	b.n	800aa8e <sys_clock_set_timeout+0xb6>
		delay = MAX(delay, MIN_DELAY);
 800aa86:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 800aa8a:	4a0e      	ldr	r2, [pc, #56]	; (800aac4 <sys_clock_set_timeout+0xec>)
 800aa8c:	6013      	str	r3, [r2, #0]
	val2 = SysTick->VAL;
 800aa8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aa92:	699c      	ldr	r4, [r3, #24]
	SysTick->LOAD = last_load - 1;
 800aa94:	4a0b      	ldr	r2, [pc, #44]	; (800aac4 <sys_clock_set_timeout+0xec>)
 800aa96:	6812      	ldr	r2, [r2, #0]
 800aa98:	3a01      	subs	r2, #1
 800aa9a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	619a      	str	r2, [r3, #24]
	if (val1 < val2) {
 800aaa0:	42a1      	cmp	r1, r4
 800aaa2:	d209      	bcs.n	800aab8 <sys_clock_set_timeout+0xe0>
		cycle_count += (val1 + (last_load_ - val2));
 800aaa4:	1b2d      	subs	r5, r5, r4
 800aaa6:	440d      	add	r5, r1
 800aaa8:	4428      	add	r0, r5
 800aaaa:	4b07      	ldr	r3, [pc, #28]	; (800aac8 <sys_clock_set_timeout+0xf0>)
 800aaac:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 800aaae:	f386 8811 	msr	BASEPRI, r6
 800aab2:	f3bf 8f6f 	isb	sy
}
 800aab6:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 800aab8:	1b0d      	subs	r5, r1, r4
 800aaba:	4428      	add	r0, r5
 800aabc:	4b02      	ldr	r3, [pc, #8]	; (800aac8 <sys_clock_set_timeout+0xf0>)
 800aabe:	6018      	str	r0, [r3, #0]
 800aac0:	e7f5      	b.n	800aaae <sys_clock_set_timeout+0xd6>
 800aac2:	bf00      	nop
 800aac4:	200013a4 	.word	0x200013a4
 800aac8:	200013a0 	.word	0x200013a0
 800aacc:	200013a8 	.word	0x200013a8
 800aad0:	2000139c 	.word	0x2000139c
 800aad4:	10624dd3 	.word	0x10624dd3
 800aad8:	00ffdc00 	.word	0x00ffdc00

0800aadc <sys_clock_elapsed>:
{
 800aadc:	b510      	push	{r4, lr}
	__asm__ volatile(
 800aade:	f04f 0310 	mov.w	r3, #16
 800aae2:	f3ef 8411 	mrs	r4, BASEPRI
 800aae6:	f383 8812 	msr	BASEPRI_MAX, r3
 800aaea:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800aaee:	f7ff ff17 	bl	800a920 <elapsed>
 800aaf2:	4b07      	ldr	r3, [pc, #28]	; (800ab10 <sys_clock_elapsed+0x34>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4418      	add	r0, r3
 800aaf8:	4b06      	ldr	r3, [pc, #24]	; (800ab14 <sys_clock_elapsed+0x38>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 800aafe:	f384 8811 	msr	BASEPRI, r4
 800ab02:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
 800ab06:	4b04      	ldr	r3, [pc, #16]	; (800ab18 <sys_clock_elapsed+0x3c>)
 800ab08:	fba3 3000 	umull	r3, r0, r3, r0
}
 800ab0c:	0a40      	lsrs	r0, r0, #9
 800ab0e:	bd10      	pop	{r4, pc}
 800ab10:	200013a0 	.word	0x200013a0
 800ab14:	2000139c 	.word	0x2000139c
 800ab18:	10624dd3 	.word	0x10624dd3

0800ab1c <sys_clock_cycle_get_32>:
{
 800ab1c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800ab1e:	f04f 0310 	mov.w	r3, #16
 800ab22:	f3ef 8411 	mrs	r4, BASEPRI
 800ab26:	f383 8812 	msr	BASEPRI_MAX, r3
 800ab2a:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 800ab2e:	f7ff fef7 	bl	800a920 <elapsed>
 800ab32:	4b04      	ldr	r3, [pc, #16]	; (800ab44 <sys_clock_cycle_get_32+0x28>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4418      	add	r0, r3
	__asm__ volatile(
 800ab38:	f384 8811 	msr	BASEPRI, r4
 800ab3c:	f3bf 8f6f 	isb	sy
}
 800ab40:	bd10      	pop	{r4, pc}
 800ab42:	bf00      	nop
 800ab44:	200013a0 	.word	0x200013a0

0800ab48 <stm32_pin_configure>:

static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;

	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800ab48:	28af      	cmp	r0, #175	; 0xaf
 800ab4a:	d817      	bhi.n	800ab7c <stm32_pin_configure+0x34>
{
 800ab4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4e:	4604      	mov	r4, r0
 800ab50:	460d      	mov	r5, r1
 800ab52:	4616      	mov	r6, r2
 800ab54:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 800ab56:	4a0b      	ldr	r2, [pc, #44]	; (800ab84 <stm32_pin_configure+0x3c>)
 800ab58:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800ab5c:	b15f      	cbz	r7, 800ab76 <stm32_pin_configure+0x2e>
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f005 fc53 	bl	801040a <z_device_is_ready>
 800ab64:	b138      	cbz	r0, 800ab76 <stm32_pin_configure+0x2e>
		return -ENODEV;
	}

	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 800ab66:	4633      	mov	r3, r6
 800ab68:	462a      	mov	r2, r5
 800ab6a:	f004 010f 	and.w	r1, r4, #15
 800ab6e:	4638      	mov	r0, r7
 800ab70:	f004 fdc0 	bl	800f6f4 <gpio_stm32_configure>
}
 800ab74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
 800ab76:	f06f 0012 	mvn.w	r0, #18
 800ab7a:	e7fb      	b.n	800ab74 <stm32_pin_configure+0x2c>
		return -EINVAL;
 800ab7c:	f06f 0015 	mvn.w	r0, #21
}
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	08013288 	.word	0x08013288

0800ab88 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800ab88:	b530      	push	{r4, r5, lr}
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800ab8a:	6893      	ldr	r3, [r2, #8]
                        DMA_InitStruct->Mode                   | \
 800ab8c:	68d4      	ldr	r4, [r2, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800ab8e:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800ab90:	6914      	ldr	r4, [r2, #16]
                        DMA_InitStruct->Mode                   | \
 800ab92:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800ab94:	6954      	ldr	r4, [r2, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800ab96:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800ab98:	6994      	ldr	r4, [r2, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800ab9a:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800ab9c:	69d4      	ldr	r4, [r2, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800ab9e:	4323      	orrs	r3, r4
                        DMA_InitStruct->Priority);
 800aba0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800aba2:	4323      	orrs	r3, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800aba4:	4c17      	ldr	r4, [pc, #92]	; (800ac04 <LL_DMA_Init+0x7c>)
 800aba6:	5c65      	ldrb	r5, [r4, r1]
 800aba8:	eb00 0e05 	add.w	lr, r0, r5
 800abac:	5944      	ldr	r4, [r0, r5]
 800abae:	f424 4cff 	bic.w	ip, r4, #32640	; 0x7f80
 800abb2:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800abb6:	ea43 030c 	orr.w	r3, r3, ip
 800abba:	5143      	str	r3, [r0, r5]

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800abbc:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800abbe:	f8ce 300c 	str.w	r3, [lr, #12]

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800abc2:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800abc4:	f8ce 3008 	str.w	r3, [lr, #8]

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800abc8:	6a14      	ldr	r4, [r2, #32]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800abca:	f8de 3004 	ldr.w	r3, [lr, #4]
 800abce:	0c1b      	lsrs	r3, r3, #16
 800abd0:	041b      	lsls	r3, r3, #16
 800abd2:	4323      	orrs	r3, r4
 800abd4:	f8ce 3004 	str.w	r3, [lr, #4]
#else
  /*--------------------------- DMAx CSELR Configuration -----------------------
   * Configure the DMA request for DMA instance on Channel x with parameter :
   * - PeriphRequest: DMA_CSELR[31:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800abd8:	6a54      	ldr	r4, [r2, #36]	; 0x24
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 800abda:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 800abde:	008a      	lsls	r2, r1, #2
 800abe0:	210f      	movs	r1, #15
 800abe2:	4091      	lsls	r1, r2
 800abe4:	ea23 0301 	bic.w	r3, r3, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abe8:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 800abec:	b141      	cbz	r1, 800ac00 <LL_DMA_Init+0x78>
  return __builtin_clz(value);
 800abee:	fab1 f181 	clz	r1, r1
 800abf2:	fa04 f101 	lsl.w	r1, r4, r1
 800abf6:	4319      	orrs	r1, r3
 800abf8:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
#endif /* DMAMUX1 */

  return SUCCESS;
}
 800abfc:	2000      	movs	r0, #0
 800abfe:	bd30      	pop	{r4, r5, pc}
    return 32U;
 800ac00:	2120      	movs	r1, #32
 800ac02:	e7f6      	b.n	800abf2 <LL_DMA_Init+0x6a>
 800ac04:	080132c4 	.word	0x080132c4

0800ac08 <UTILS_PLL_IsBusy>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800ac08:	4b07      	ldr	r3, [pc, #28]	; (800ac28 <UTILS_PLL_IsBusy+0x20>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800ac10:	d007      	beq.n	800ac22 <UTILS_PLL_IsBusy+0x1a>

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 800ac12:	2001      	movs	r0, #1
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800ac14:	4b04      	ldr	r3, [pc, #16]	; (800ac28 <UTILS_PLL_IsBusy+0x20>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800ac1c:	d000      	beq.n	800ac20 <UTILS_PLL_IsBusy+0x18>
#if defined(RCC_PLLSAI1_SUPPORT)
  /* Check if PLLSAI1 is busy*/
  if(LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
 800ac1e:	2001      	movs	r0, #1
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 800ac20:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 800ac22:	2000      	movs	r0, #0
 800ac24:	e7f6      	b.n	800ac14 <UTILS_PLL_IsBusy+0xc>
 800ac26:	bf00      	nop
 800ac28:	40021000 	.word	0x40021000

0800ac2c <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 800ac2c:	4b01      	ldr	r3, [pc, #4]	; (800ac34 <LL_SetSystemCoreClock+0x8>)
 800ac2e:	6018      	str	r0, [r3, #0]
}
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	200003c0 	.word	0x200003c0

0800ac38 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 800ac38:	1e42      	subs	r2, r0, #1
 800ac3a:	4b29      	ldr	r3, [pc, #164]	; (800ace0 <LL_SetFlashLatency+0xa8>)
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d84c      	bhi.n	800acda <LL_SetFlashLatency+0xa2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 800ac40:	4b28      	ldr	r3, [pc, #160]	; (800ace4 <LL_SetFlashLatency+0xac>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800ac48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac4c:	d011      	beq.n	800ac72 <LL_SetFlashLatency+0x3a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 800ac4e:	4b26      	ldr	r3, [pc, #152]	; (800ace8 <LL_SetFlashLatency+0xb0>)
 800ac50:	4298      	cmp	r0, r3
 800ac52:	d829      	bhi.n	800aca8 <LL_SetFlashLatency+0x70>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 800ac54:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 800ac58:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 800ac5c:	4298      	cmp	r0, r3
 800ac5e:	d832      	bhi.n	800acc6 <LL_SetFlashLatency+0x8e>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 800ac60:	4b22      	ldr	r3, [pc, #136]	; (800acec <LL_SetFlashLatency+0xb4>)
 800ac62:	4298      	cmp	r0, r3
 800ac64:	d832      	bhi.n	800accc <LL_SetFlashLatency+0x94>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800ac66:	4b22      	ldr	r3, [pc, #136]	; (800acf0 <LL_SetFlashLatency+0xb8>)
 800ac68:	4298      	cmp	r0, r3
 800ac6a:	d832      	bhi.n	800acd2 <LL_SetFlashLatency+0x9a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800ac6c:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800ac6e:	4608      	mov	r0, r1
 800ac70:	e01c      	b.n	800acac <LL_SetFlashLatency+0x74>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 800ac72:	4b20      	ldr	r3, [pc, #128]	; (800acf4 <LL_SetFlashLatency+0xbc>)
 800ac74:	4298      	cmp	r0, r3
 800ac76:	d80b      	bhi.n	800ac90 <LL_SetFlashLatency+0x58>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 800ac78:	4b1f      	ldr	r3, [pc, #124]	; (800acf8 <LL_SetFlashLatency+0xc0>)
 800ac7a:	4298      	cmp	r0, r3
 800ac7c:	d80b      	bhi.n	800ac96 <LL_SetFlashLatency+0x5e>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 800ac7e:	4b1f      	ldr	r3, [pc, #124]	; (800acfc <LL_SetFlashLatency+0xc4>)
 800ac80:	4298      	cmp	r0, r3
 800ac82:	d80b      	bhi.n	800ac9c <LL_SetFlashLatency+0x64>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 800ac84:	4b1e      	ldr	r3, [pc, #120]	; (800ad00 <LL_SetFlashLatency+0xc8>)
 800ac86:	4298      	cmp	r0, r3
 800ac88:	d80b      	bhi.n	800aca2 <LL_SetFlashLatency+0x6a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800ac8a:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800ac8c:	4608      	mov	r0, r1
 800ac8e:	e00d      	b.n	800acac <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_4;
 800ac90:	2104      	movs	r1, #4
  ErrorStatus status = SUCCESS;
 800ac92:	2000      	movs	r0, #0
 800ac94:	e00a      	b.n	800acac <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_3;
 800ac96:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 800ac98:	2000      	movs	r0, #0
 800ac9a:	e007      	b.n	800acac <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 800ac9c:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 800ac9e:	2000      	movs	r0, #0
 800aca0:	e004      	b.n	800acac <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 800aca2:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 800aca4:	2000      	movs	r0, #0
 800aca6:	e001      	b.n	800acac <LL_SetFlashLatency+0x74>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800aca8:	2100      	movs	r1, #0
        status = ERROR;
 800acaa:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800acac:	4a15      	ldr	r2, [pc, #84]	; (800ad04 <LL_SetFlashLatency+0xcc>)
 800acae:	6813      	ldr	r3, [r2, #0]
 800acb0:	f023 0307 	bic.w	r3, r3, #7
 800acb4:	430b      	orrs	r3, r1
 800acb6:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800acb8:	6813      	ldr	r3, [r2, #0]
 800acba:	f003 0307 	and.w	r3, r3, #7
    if(LL_FLASH_GetLatency() != latency)
 800acbe:	4299      	cmp	r1, r3
 800acc0:	d00a      	beq.n	800acd8 <LL_SetFlashLatency+0xa0>
      status = ERROR;
 800acc2:	2001      	movs	r0, #1
}
 800acc4:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 800acc6:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 800acc8:	2000      	movs	r0, #0
 800acca:	e7ef      	b.n	800acac <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 800accc:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 800acce:	2000      	movs	r0, #0
 800acd0:	e7ec      	b.n	800acac <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 800acd2:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 800acd4:	2000      	movs	r0, #0
 800acd6:	e7e9      	b.n	800acac <LL_SetFlashLatency+0x74>
 800acd8:	4770      	bx	lr
    status = ERROR;
 800acda:	2001      	movs	r0, #1
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	04c4b3ff 	.word	0x04c4b3ff
 800ace4:	40007000 	.word	0x40007000
 800ace8:	018cba80 	.word	0x018cba80
 800acec:	00b71b00 	.word	0x00b71b00
 800acf0:	005b8d80 	.word	0x005b8d80
 800acf4:	03d09000 	.word	0x03d09000
 800acf8:	02dc6c00 	.word	0x02dc6c00
 800acfc:	01e84800 	.word	0x01e84800
 800ad00:	00f42400 	.word	0x00f42400
 800ad04:	40022000 	.word	0x40022000

0800ad08 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800ad0c:	680b      	ldr	r3, [r1, #0]
 800ad0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ad12:	4a26      	ldr	r2, [pc, #152]	; (800adac <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 800ad14:	5cd3      	ldrb	r3, [r2, r3]
 800ad16:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 800ad1a:	4b25      	ldr	r3, [pc, #148]	; (800adb0 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	42ab      	cmp	r3, r5
 800ad20:	d333      	bcc.n	800ad8a <UTILS_EnablePLLAndSwitchSystem+0x82>
  ErrorStatus status = SUCCESS;
 800ad22:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800ad24:	4b23      	ldr	r3, [pc, #140]	; (800adb4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800ad2c:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800ad2e:	68da      	ldr	r2, [r3, #12]
 800ad30:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800ad34:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800ad36:	4b1f      	ldr	r3, [pc, #124]	; (800adb4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800ad3e:	d0fa      	beq.n	800ad36 <UTILS_EnablePLLAndSwitchSystem+0x2e>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 800ad40:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ad42:	4b1c      	ldr	r3, [pc, #112]	; (800adb4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800ad44:	6899      	ldr	r1, [r3, #8]
 800ad46:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800ad4e:	689a      	ldr	r2, [r3, #8]
 800ad50:	f042 0203 	orr.w	r2, r2, #3
 800ad54:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ad56:	4b17      	ldr	r3, [pc, #92]	; (800adb4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800ad5e:	2b0c      	cmp	r3, #12
 800ad60:	d1f9      	bne.n	800ad56 <UTILS_EnablePLLAndSwitchSystem+0x4e>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 800ad62:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800ad64:	4b13      	ldr	r3, [pc, #76]	; (800adb4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800ad66:	6899      	ldr	r1, [r3, #8]
 800ad68:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800ad6c:	430a      	orrs	r2, r1
 800ad6e:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 800ad70:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800ad72:	6899      	ldr	r1, [r3, #8]
 800ad74:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 800ad78:	430a      	orrs	r2, r1
 800ad7a:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 800ad7c:	4b0c      	ldr	r3, [pc, #48]	; (800adb0 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	42ab      	cmp	r3, r5
 800ad82:	d809      	bhi.n	800ad98 <UTILS_EnablePLLAndSwitchSystem+0x90>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 800ad84:	b16e      	cbz	r6, 800ada2 <UTILS_EnablePLLAndSwitchSystem+0x9a>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 800ad86:	4630      	mov	r0, r6
 800ad88:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f7ff ff54 	bl	800ac38 <LL_SetFlashLatency>
  if(status == SUCCESS)
 800ad90:	4606      	mov	r6, r0
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d1f2      	bne.n	800ad7c <UTILS_EnablePLLAndSwitchSystem+0x74>
 800ad96:	e7c5      	b.n	800ad24 <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 800ad98:	4628      	mov	r0, r5
 800ad9a:	f7ff ff4d 	bl	800ac38 <LL_SetFlashLatency>
 800ad9e:	4606      	mov	r6, r0
 800ada0:	e7f0      	b.n	800ad84 <UTILS_EnablePLLAndSwitchSystem+0x7c>
    LL_SetSystemCoreClock(hclk_frequency);
 800ada2:	4628      	mov	r0, r5
 800ada4:	f7ff ff42 	bl	800ac2c <LL_SetSystemCoreClock>
 800ada8:	e7ed      	b.n	800ad86 <UTILS_EnablePLLAndSwitchSystem+0x7e>
 800adaa:	bf00      	nop
 800adac:	080132b4 	.word	0x080132b4
 800adb0:	200003c0 	.word	0x200003c0
 800adb4:	40021000 	.word	0x40021000

0800adb8 <LL_PLL_ConfigSystemClock_HSI>:
{
 800adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adba:	4604      	mov	r4, r0
 800adbc:	460d      	mov	r5, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 800adbe:	f7ff ff23 	bl	800ac08 <UTILS_PLL_IsBusy>
 800adc2:	bb20      	cbnz	r0, 800ae0e <LL_PLL_ConfigSystemClock_HSI+0x56>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 800adc4:	4621      	mov	r1, r4
 800adc6:	4813      	ldr	r0, [pc, #76]	; (800ae14 <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 800adc8:	f005 fb0e 	bl	80103e8 <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800adcc:	4b12      	ldr	r3, [pc, #72]	; (800ae18 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800add4:	d109      	bne.n	800adea <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800add6:	4a10      	ldr	r2, [pc, #64]	; (800ae18 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800add8:	6813      	ldr	r3, [r2, #0]
 800adda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adde:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800ade0:	4b0d      	ldr	r3, [pc, #52]	; (800ae18 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800ade8:	d0fa      	beq.n	800ade0 <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 800adea:	6822      	ldr	r2, [r4, #0]
 800adec:	6866      	ldr	r6, [r4, #4]
 800adee:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800adf0:	4c09      	ldr	r4, [pc, #36]	; (800ae18 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800adf2:	68e7      	ldr	r7, [r4, #12]
 800adf4:	4b09      	ldr	r3, [pc, #36]	; (800ae1c <LL_PLL_ConfigSystemClock_HSI+0x64>)
 800adf6:	403b      	ands	r3, r7
 800adf8:	f042 0202 	orr.w	r2, r2, #2
 800adfc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 800ae00:	430a      	orrs	r2, r1
 800ae02:	4313      	orrs	r3, r2
 800ae04:	60e3      	str	r3, [r4, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 800ae06:	4629      	mov	r1, r5
 800ae08:	f7ff ff7e 	bl	800ad08 <UTILS_EnablePLLAndSwitchSystem>
}
 800ae0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ERROR;
 800ae0e:	2001      	movs	r0, #1
 800ae10:	e7fc      	b.n	800ae0c <LL_PLL_ConfigSystemClock_HSI+0x54>
 800ae12:	bf00      	nop
 800ae14:	00f42400 	.word	0x00f42400
 800ae18:	40021000 	.word	0x40021000
 800ae1c:	f9ff808c 	.word	0xf9ff808c

0800ae20 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 800ae20:	4b03      	ldr	r3, [pc, #12]	; (800ae30 <z_device_state_init+0x10>)

	while (dev < __device_end) {
 800ae22:	e000      	b.n	800ae26 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 800ae24:	3318      	adds	r3, #24
	while (dev < __device_end) {
 800ae26:	4a03      	ldr	r2, [pc, #12]	; (800ae34 <z_device_state_init+0x14>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d3fb      	bcc.n	800ae24 <z_device_state_init+0x4>
	}
}
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	08011594 	.word	0x08011594
 800ae34:	080116e4 	.word	0x080116e4

0800ae38 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 800ae38:	b570      	push	{r4, r5, r6, lr}
 800ae3a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800ae3c:	4b11      	ldr	r3, [pc, #68]	; (800ae84 <z_sys_init_run_level+0x4c>)
 800ae3e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800ae42:	e009      	b.n	800ae58 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 800ae44:	4240      	negs	r0, r0
 800ae46:	e017      	b.n	800ae78 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 800ae48:	68eb      	ldr	r3, [r5, #12]
 800ae4a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 800ae4c:	68ea      	ldr	r2, [r5, #12]
 800ae4e:	7853      	ldrb	r3, [r2, #1]
 800ae50:	f043 0301 	orr.w	r3, r3, #1
 800ae54:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800ae56:	3408      	adds	r4, #8
 800ae58:	1c73      	adds	r3, r6, #1
 800ae5a:	4a0a      	ldr	r2, [pc, #40]	; (800ae84 <z_sys_init_run_level+0x4c>)
 800ae5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae60:	42a3      	cmp	r3, r4
 800ae62:	d90d      	bls.n	800ae80 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 800ae64:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	4628      	mov	r0, r5
 800ae6a:	4798      	blx	r3
		if (dev != NULL) {
 800ae6c:	2d00      	cmp	r5, #0
 800ae6e:	d0f2      	beq.n	800ae56 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d0eb      	beq.n	800ae4c <z_sys_init_run_level+0x14>
				if (rc < 0) {
 800ae74:	2800      	cmp	r0, #0
 800ae76:	dbe5      	blt.n	800ae44 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 800ae78:	28ff      	cmp	r0, #255	; 0xff
 800ae7a:	dde5      	ble.n	800ae48 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 800ae7c:	20ff      	movs	r0, #255	; 0xff
 800ae7e:	e7e3      	b.n	800ae48 <z_sys_init_run_level+0x10>
		}
	}
}
 800ae80:	bd70      	pop	{r4, r5, r6, pc}
 800ae82:	bf00      	nop
 800ae84:	080132cc 	.word	0x080132cc

0800ae88 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 800ae88:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	b328      	cbz	r0, 800aeda <z_impl_device_get_binding+0x52>
 800ae8e:	7803      	ldrb	r3, [r0, #0]
 800ae90:	b32b      	cbz	r3, 800aede <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 800ae92:	4c14      	ldr	r4, [pc, #80]	; (800aee4 <z_impl_device_get_binding+0x5c>)
 800ae94:	e000      	b.n	800ae98 <z_impl_device_get_binding+0x10>
 800ae96:	3418      	adds	r4, #24
 800ae98:	4b13      	ldr	r3, [pc, #76]	; (800aee8 <z_impl_device_get_binding+0x60>)
 800ae9a:	429c      	cmp	r4, r3
 800ae9c:	d008      	beq.n	800aeb0 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f005 fab3 	bl	801040a <z_device_is_ready>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d0f6      	beq.n	800ae96 <z_impl_device_get_binding+0xe>
 800aea8:	6823      	ldr	r3, [r4, #0]
 800aeaa:	42ab      	cmp	r3, r5
 800aeac:	d1f3      	bne.n	800ae96 <z_impl_device_get_binding+0xe>
 800aeae:	e012      	b.n	800aed6 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 800aeb0:	4c0c      	ldr	r4, [pc, #48]	; (800aee4 <z_impl_device_get_binding+0x5c>)
 800aeb2:	e000      	b.n	800aeb6 <z_impl_device_get_binding+0x2e>
 800aeb4:	3418      	adds	r4, #24
 800aeb6:	4b0c      	ldr	r3, [pc, #48]	; (800aee8 <z_impl_device_get_binding+0x60>)
 800aeb8:	429c      	cmp	r4, r3
 800aeba:	d00b      	beq.n	800aed4 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800aebc:	4620      	mov	r0, r4
 800aebe:	f005 faa4 	bl	801040a <z_device_is_ready>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d0f6      	beq.n	800aeb4 <z_impl_device_get_binding+0x2c>
 800aec6:	6821      	ldr	r1, [r4, #0]
 800aec8:	4628      	mov	r0, r5
 800aeca:	f7f5 ffba 	bl	8000e42 <strcmp>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d1f0      	bne.n	800aeb4 <z_impl_device_get_binding+0x2c>
 800aed2:	e000      	b.n	800aed6 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 800aed4:	2400      	movs	r4, #0
}
 800aed6:	4620      	mov	r0, r4
 800aed8:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 800aeda:	4604      	mov	r4, r0
 800aedc:	e7fb      	b.n	800aed6 <z_impl_device_get_binding+0x4e>
 800aede:	2400      	movs	r4, #0
 800aee0:	e7f9      	b.n	800aed6 <z_impl_device_get_binding+0x4e>
 800aee2:	bf00      	nop
 800aee4:	08011594 	.word	0x08011594
 800aee8:	080116e4 	.word	0x080116e4

0800aeec <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 800aeec:	4b01      	ldr	r3, [pc, #4]	; (800aef4 <z_impl_z_errno+0x8>)
 800aeee:	6898      	ldr	r0, [r3, #8]
}
 800aef0:	3064      	adds	r0, #100	; 0x64
 800aef2:	4770      	bx	lr
 800aef4:	200013ac 	.word	0x200013ac

0800aef8 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 800aef8:	2804      	cmp	r0, #4
 800aefa:	d80c      	bhi.n	800af16 <reason_to_str+0x1e>
 800aefc:	e8df f000 	tbb	[pc, r0]
 800af00:	07050d03 	.word	0x07050d03
 800af04:	09          	.byte	0x09
 800af05:	00          	.byte	0x00
 800af06:	4806      	ldr	r0, [pc, #24]	; (800af20 <reason_to_str+0x28>)
 800af08:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
 800af0a:	4806      	ldr	r0, [pc, #24]	; (800af24 <reason_to_str+0x2c>)
 800af0c:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
 800af0e:	4806      	ldr	r0, [pc, #24]	; (800af28 <reason_to_str+0x30>)
 800af10:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 800af12:	4806      	ldr	r0, [pc, #24]	; (800af2c <reason_to_str+0x34>)
 800af14:	4770      	bx	lr
	default:
		return "Unknown error";
 800af16:	4806      	ldr	r0, [pc, #24]	; (800af30 <reason_to_str+0x38>)
 800af18:	4770      	bx	lr
		return "Unhandled interrupt";
 800af1a:	4806      	ldr	r0, [pc, #24]	; (800af34 <reason_to_str+0x3c>)
	}
}
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	08013334 	.word	0x08013334
 800af24:	08013308 	.word	0x08013308
 800af28:	08013318 	.word	0x08013318
 800af2c:	08013324 	.word	0x08013324
 800af30:	080132e4 	.word	0x080132e4
 800af34:	080132f4 	.word	0x080132f4

0800af38 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800af38:	b130      	cbz	r0, 800af48 <thread_name_get+0x10>
{
 800af3a:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800af3c:	f005 fab7 	bl	80104ae <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 800af40:	b120      	cbz	r0, 800af4c <thread_name_get+0x14>
 800af42:	7803      	ldrb	r3, [r0, #0]
 800af44:	b123      	cbz	r3, 800af50 <thread_name_get+0x18>
}
 800af46:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 800af48:	4802      	ldr	r0, [pc, #8]	; (800af54 <thread_name_get+0x1c>)
}
 800af4a:	4770      	bx	lr
		thread_name = "unknown";
 800af4c:	4801      	ldr	r0, [pc, #4]	; (800af54 <thread_name_get+0x1c>)
 800af4e:	e7fa      	b.n	800af46 <thread_name_get+0xe>
 800af50:	4800      	ldr	r0, [pc, #0]	; (800af54 <thread_name_get+0x1c>)
	return thread_name;
 800af52:	e7f8      	b.n	800af46 <thread_name_get+0xe>
 800af54:	08013344 	.word	0x08013344

0800af58 <k_sys_fatal_error_handler>:
{
 800af58:	b510      	push	{r4, lr}
 800af5a:	b090      	sub	sp, #64	; 0x40
 800af5c:	4604      	mov	r4, r0
	z_impl_log_panic();
 800af5e:	f7f8 fc85 	bl	800386c <z_impl_log_panic>
	LOG_ERR("Halting system");
 800af62:	2201      	movs	r2, #1
 800af64:	f8ad 2008 	strh.w	r2, [sp, #8]
 800af68:	4b10      	ldr	r3, [pc, #64]	; (800afac <k_sys_fatal_error_handler+0x54>)
 800af6a:	930e      	str	r3, [sp, #56]	; 0x38
 800af6c:	2300      	movs	r3, #0
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	2102      	movs	r1, #2
 800af72:	f88d 1004 	strb.w	r1, [sp, #4]
 800af76:	9901      	ldr	r1, [sp, #4]
 800af78:	910d      	str	r1, [sp, #52]	; 0x34
 800af7a:	4619      	mov	r1, r3
 800af7c:	f363 0100 	bfi	r1, r3, #0, #1
 800af80:	f363 0141 	bfi	r1, r3, #1, #1
 800af84:	f363 0182 	bfi	r1, r3, #2, #1
 800af88:	f363 01c5 	bfi	r1, r3, #3, #3
 800af8c:	f362 1188 	bfi	r1, r2, #6, #3
 800af90:	2208      	movs	r2, #8
 800af92:	f362 2152 	bfi	r1, r2, #9, #10
 800af96:	f363 41de 	bfi	r1, r3, #19, #12
 800af9a:	f363 71df 	bfi	r1, r3, #31, #1
 800af9e:	aa0d      	add	r2, sp, #52	; 0x34
 800afa0:	4803      	ldr	r0, [pc, #12]	; (800afb0 <k_sys_fatal_error_handler+0x58>)
 800afa2:	f003 fede 	bl	800ed62 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
 800afa6:	4620      	mov	r0, r4
 800afa8:	f005 fa49 	bl	801043e <arch_system_halt>
 800afac:	0801334c 	.word	0x0801334c
 800afb0:	080119bc 	.word	0x080119bc

0800afb4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800afb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afb6:	b097      	sub	sp, #92	; 0x5c
 800afb8:	4605      	mov	r5, r0
 800afba:	460e      	mov	r6, r1
	__asm__ volatile(
 800afbc:	f04f 0310 	mov.w	r3, #16
 800afc0:	f3ef 8711 	mrs	r7, BASEPRI
 800afc4:	f383 8812 	msr	BASEPRI_MAX, r3
 800afc8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800afcc:	f001 f820 	bl	800c010 <z_impl_z_current_get>
 800afd0:	4604      	mov	r4, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 800afd2:	4628      	mov	r0, r5
 800afd4:	f7ff ff90 	bl	800aef8 <reason_to_str>
 800afd8:	2300      	movs	r3, #0
 800afda:	9304      	str	r3, [sp, #16]
 800afdc:	9003      	str	r0, [sp, #12]
 800afde:	9502      	str	r5, [sp, #8]
 800afe0:	4a25      	ldr	r2, [pc, #148]	; (800b078 <z_fatal_error+0xc4>)
 800afe2:	9201      	str	r2, [sp, #4]
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	2201      	movs	r2, #1
 800afe8:	4924      	ldr	r1, [pc, #144]	; (800b07c <z_fatal_error+0xc8>)
 800afea:	4618      	mov	r0, r3
 800afec:	f005 fa1a 	bl	8010424 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800aff0:	b11e      	cbz	r6, 800affa <z_fatal_error+0x46>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800aff2:	69f3      	ldr	r3, [r6, #28]
 800aff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff8:	b9d3      	cbnz	r3, 800b030 <z_fatal_error+0x7c>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800affa:	4620      	mov	r0, r4
 800affc:	f7ff ff9c 	bl	800af38 <thread_name_get>
 800b000:	9003      	str	r0, [sp, #12]
 800b002:	9402      	str	r4, [sp, #8]
 800b004:	4b1e      	ldr	r3, [pc, #120]	; (800b080 <z_fatal_error+0xcc>)
 800b006:	9301      	str	r3, [sp, #4]
 800b008:	2000      	movs	r0, #0
 800b00a:	9000      	str	r0, [sp, #0]
 800b00c:	4603      	mov	r3, r0
 800b00e:	2201      	movs	r2, #1
 800b010:	491a      	ldr	r1, [pc, #104]	; (800b07c <z_fatal_error+0xc8>)
 800b012:	f005 fa07 	bl	8010424 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800b016:	4631      	mov	r1, r6
 800b018:	4628      	mov	r0, r5
 800b01a:	f7ff ff9d 	bl	800af58 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800b01e:	f387 8811 	msr	BASEPRI, r7
 800b022:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800b026:	4620      	mov	r0, r4
 800b028:	f7f9 ff14 	bl	8004e54 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800b02c:	b017      	add	sp, #92	; 0x5c
 800b02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
 800b030:	2201      	movs	r2, #1
 800b032:	f8ad 2020 	strh.w	r2, [sp, #32]
 800b036:	4b13      	ldr	r3, [pc, #76]	; (800b084 <z_fatal_error+0xd0>)
 800b038:	9314      	str	r3, [sp, #80]	; 0x50
 800b03a:	2300      	movs	r3, #0
 800b03c:	9307      	str	r3, [sp, #28]
 800b03e:	2102      	movs	r1, #2
 800b040:	f88d 101c 	strb.w	r1, [sp, #28]
 800b044:	9907      	ldr	r1, [sp, #28]
 800b046:	9113      	str	r1, [sp, #76]	; 0x4c
 800b048:	4619      	mov	r1, r3
 800b04a:	f363 0100 	bfi	r1, r3, #0, #1
 800b04e:	f363 0141 	bfi	r1, r3, #1, #1
 800b052:	f363 0182 	bfi	r1, r3, #2, #1
 800b056:	f363 01c5 	bfi	r1, r3, #3, #3
 800b05a:	f362 1188 	bfi	r1, r2, #6, #3
 800b05e:	2208      	movs	r2, #8
 800b060:	f362 2152 	bfi	r1, r2, #9, #10
 800b064:	f363 41de 	bfi	r1, r3, #19, #12
 800b068:	f363 71df 	bfi	r1, r3, #31, #1
 800b06c:	aa13      	add	r2, sp, #76	; 0x4c
 800b06e:	4803      	ldr	r0, [pc, #12]	; (800b07c <z_fatal_error+0xc8>)
 800b070:	f003 fe77 	bl	800ed62 <z_impl_z_log_msg2_static_create>
 800b074:	e7c1      	b.n	800affa <z_fatal_error+0x46>
 800b076:	bf00      	nop
 800b078:	0801335c 	.word	0x0801335c
 800b07c:	080119bc 	.word	0x080119bc
 800b080:	080133a8 	.word	0x080133a8
 800b084:	08013384 	.word	0x08013384

0800b088 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 800b088:	b510      	push	{r4, lr}
 800b08a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 800b08c:	4c10      	ldr	r4, [pc, #64]	; (800b0d0 <init_idle_thread+0x48>)
 800b08e:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800b092:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800b096:	4b0f      	ldr	r3, [pc, #60]	; (800b0d4 <init_idle_thread+0x4c>)
 800b098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
 800b09c:	2200      	movs	r2, #0
 800b09e:	9205      	str	r2, [sp, #20]
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	9104      	str	r1, [sp, #16]
 800b0a4:	210f      	movs	r1, #15
 800b0a6:	9103      	str	r1, [sp, #12]
 800b0a8:	9202      	str	r2, [sp, #8]
 800b0aa:	9201      	str	r2, [sp, #4]
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	4b0a      	ldr	r3, [pc, #40]	; (800b0d8 <init_idle_thread+0x50>)
 800b0b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800b0b4:	4909      	ldr	r1, [pc, #36]	; (800b0dc <init_idle_thread+0x54>)
 800b0b6:	f44f 7cb0 	mov.w	ip, #352	; 0x160
 800b0ba:	fb0c 1100 	mla	r1, ip, r0, r1
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f000 f8ee 	bl	800b2a0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800b0c4:	7b63      	ldrb	r3, [r4, #13]
 800b0c6:	f023 0304 	bic.w	r3, r3, #4
 800b0ca:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 800b0cc:	b006      	add	sp, #24
 800b0ce:	bd10      	pop	{r4, pc}
 800b0d0:	20000bd8 	.word	0x20000bd8
 800b0d4:	200013ac 	.word	0x200013ac
 800b0d8:	08010515 	.word	0x08010515
 800b0dc:	20002b80 	.word	0x20002b80

0800b0e0 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 800b0e0:	b570      	push	{r4, r5, r6, lr}
 800b0e2:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 800b0e4:	f000 fee0 	bl	800bea8 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 800b0e8:	4d1b      	ldr	r5, [pc, #108]	; (800b158 <prepare_multithreading+0x78>)
 800b0ea:	4b1c      	ldr	r3, [pc, #112]	; (800b15c <prepare_multithreading+0x7c>)
 800b0ec:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800b0ee:	4b1c      	ldr	r3, [pc, #112]	; (800b160 <prepare_multithreading+0x80>)
 800b0f0:	9305      	str	r3, [sp, #20]
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	9304      	str	r3, [sp, #16]
 800b0f6:	2400      	movs	r4, #0
 800b0f8:	9403      	str	r4, [sp, #12]
 800b0fa:	9402      	str	r4, [sp, #8]
 800b0fc:	9401      	str	r4, [sp, #4]
 800b0fe:	9400      	str	r4, [sp, #0]
 800b100:	4b18      	ldr	r3, [pc, #96]	; (800b164 <prepare_multithreading+0x84>)
 800b102:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b106:	4918      	ldr	r1, [pc, #96]	; (800b168 <prepare_multithreading+0x88>)
 800b108:	4628      	mov	r0, r5
 800b10a:	f000 f8c9 	bl	800b2a0 <z_setup_new_thread>
 800b10e:	4606      	mov	r6, r0
 800b110:	7b6b      	ldrb	r3, [r5, #13]
 800b112:	f023 0304 	bic.w	r3, r3, #4
 800b116:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 800b118:	4628      	mov	r0, r5
 800b11a:	f005 fb83 	bl	8010824 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 800b11e:	2c00      	cmp	r4, #0
 800b120:	dd02      	ble.n	800b128 <prepare_multithreading+0x48>
			CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
	}

	return stack_ptr;
}
 800b122:	4630      	mov	r0, r6
 800b124:	b006      	add	sp, #24
 800b126:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 800b128:	4620      	mov	r0, r4
 800b12a:	f7ff ffad 	bl	800b088 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 800b12e:	4a0f      	ldr	r2, [pc, #60]	; (800b16c <prepare_multithreading+0x8c>)
 800b130:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 800b134:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800b138:	4b08      	ldr	r3, [pc, #32]	; (800b15c <prepare_multithreading+0x7c>)
 800b13a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b13e:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 800b140:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 800b142:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 800b146:	4a0a      	ldr	r2, [pc, #40]	; (800b170 <prepare_multithreading+0x90>)
 800b148:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800b14c:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 800b150:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 800b152:	3401      	adds	r4, #1
 800b154:	e7e3      	b.n	800b11e <prepare_multithreading+0x3e>
 800b156:	bf00      	nop
 800b158:	20000c58 	.word	0x20000c58
 800b15c:	200013ac 	.word	0x200013ac
 800b160:	080133c0 	.word	0x080133c0
 800b164:	0800b175 	.word	0x0800b175
 800b168:	20001b60 	.word	0x20001b60
 800b16c:	20000bd8 	.word	0x20000bd8
 800b170:	20002ce0 	.word	0x20002ce0

0800b174 <bg_thread_main>:
{
 800b174:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 800b176:	4b0b      	ldr	r3, [pc, #44]	; (800b1a4 <bg_thread_main+0x30>)
 800b178:	2201      	movs	r2, #1
 800b17a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800b17c:	2002      	movs	r0, #2
 800b17e:	f7ff fe5b 	bl	800ae38 <z_sys_init_run_level>
	boot_banner();
 800b182:	f001 fc91 	bl	800caa8 <boot_banner>
	z_cpp_init_static();
 800b186:	f003 fe53 	bl	800ee30 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800b18a:	2003      	movs	r0, #3
 800b18c:	f7ff fe54 	bl	800ae38 <z_sys_init_run_level>
	z_init_static_threads();
 800b190:	f000 f8b6 	bl	800b300 <z_init_static_threads>
	main();
 800b194:	f005 fd80 	bl	8010c98 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800b198:	4a03      	ldr	r2, [pc, #12]	; (800b1a8 <bg_thread_main+0x34>)
 800b19a:	7b13      	ldrb	r3, [r2, #12]
 800b19c:	f023 0301 	bic.w	r3, r3, #1
 800b1a0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800b1a2:	bd08      	pop	{r3, pc}
 800b1a4:	2000140c 	.word	0x2000140c
 800b1a8:	20000c58 	.word	0x20000c58

0800b1ac <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 800b1ac:	b508      	push	{r3, lr}
 800b1ae:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800b1b0:	4a01      	ldr	r2, [pc, #4]	; (800b1b8 <switch_to_main_thread+0xc>)
 800b1b2:	4802      	ldr	r0, [pc, #8]	; (800b1bc <switch_to_main_thread+0x10>)
 800b1b4:	f7f9 f810 	bl	80041d8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800b1b8:	0800b175 	.word	0x0800b175
 800b1bc:	20000c58 	.word	0x20000c58

0800b1c0 <z_bss_zero>:
{
 800b1c0:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 800b1c2:	4803      	ldr	r0, [pc, #12]	; (800b1d0 <z_bss_zero+0x10>)
 800b1c4:	4a03      	ldr	r2, [pc, #12]	; (800b1d4 <z_bss_zero+0x14>)
 800b1c6:	1a12      	subs	r2, r2, r0
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	f005 fd8c 	bl	8010ce6 <memset>
}
 800b1ce:	bd08      	pop	{r3, pc}
 800b1d0:	200006a0 	.word	0x200006a0
 800b1d4:	20001410 	.word	0x20001410

0800b1d8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800b1d8:	b500      	push	{lr}
 800b1da:	b0a1      	sub	sp, #132	; 0x84
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800b1dc:	4b1d      	ldr	r3, [pc, #116]	; (800b254 <z_cstart+0x7c>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800b1de:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800b1e2:	4c1d      	ldr	r4, [pc, #116]	; (800b258 <z_cstart+0x80>)
 800b1e4:	6963      	ldr	r3, [r4, #20]
 800b1e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b1ea:	6163      	str	r3, [r4, #20]
 800b1ec:	23f0      	movs	r3, #240	; 0xf0
 800b1ee:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800b1f2:	2500      	movs	r5, #0
 800b1f4:	77e5      	strb	r5, [r4, #31]
 800b1f6:	7625      	strb	r5, [r4, #24]
 800b1f8:	7665      	strb	r5, [r4, #25]
 800b1fa:	76a5      	strb	r5, [r4, #26]
 800b1fc:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800b200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b202:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b206:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800b208:	f7f9 fde2 	bl	8004dd0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800b20c:	f7f8 fdda 	bl	8003dc4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800b210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b214:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800b216:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800b218:	f7f9 ff26 	bl	8005068 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800b21c:	f7f9 fe30 	bl	8004e80 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 800b220:	f7f8 fa40 	bl	80036a4 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 800b224:	2401      	movs	r4, #1
 800b226:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 800b22a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 800b22e:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
 800b230:	951b      	str	r5, [sp, #108]	; 0x6c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
 800b232:	951d      	str	r5, [sp, #116]	; 0x74
#endif

	_current_cpu->current = dummy_thread;
 800b234:	4b09      	ldr	r3, [pc, #36]	; (800b25c <z_cstart+0x84>)
 800b236:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800b23a:	f7ff fdf1 	bl	800ae20 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800b23e:	4628      	mov	r0, r5
 800b240:	f7ff fdfa 	bl	800ae38 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800b244:	4620      	mov	r0, r4
 800b246:	f7ff fdf7 	bl	800ae38 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 800b24a:	f7ff ff49 	bl	800b0e0 <prepare_multithreading>
 800b24e:	f7ff ffad 	bl	800b1ac <switch_to_main_thread>
 800b252:	bf00      	nop
 800b254:	20003500 	.word	0x20003500
 800b258:	e000ed00 	.word	0xe000ed00
 800b25c:	200013ac 	.word	0x200013ac

0800b260 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
 800b260:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800b262:	4c06      	ldr	r4, [pc, #24]	; (800b27c <init_mem_slab_module+0x1c>)
	int rc = 0;
 800b264:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800b266:	e000      	b.n	800b26a <init_mem_slab_module+0xa>
 800b268:	3420      	adds	r4, #32
 800b26a:	4b05      	ldr	r3, [pc, #20]	; (800b280 <init_mem_slab_module+0x20>)
 800b26c:	429c      	cmp	r4, r3
 800b26e:	d204      	bcs.n	800b27a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 800b270:	4620      	mov	r0, r4
 800b272:	f005 f8ed 	bl	8010450 <create_free_list>
		if (rc < 0) {
 800b276:	2800      	cmp	r0, #0
 800b278:	daf6      	bge.n	800b268 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
 800b27a:	bd10      	pop	{r4, pc}
 800b27c:	20000648 	.word	0x20000648
 800b280:	20000648 	.word	0x20000648

0800b284 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 800b284:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800b286:	ea53 0102 	orrs.w	r1, r3, r2
 800b28a:	d102      	bne.n	800b292 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 800b28c:	f005 f911 	bl	80104b2 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 800b290:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800b292:	4902      	ldr	r1, [pc, #8]	; (800b29c <schedule_new_thread+0x18>)
 800b294:	3018      	adds	r0, #24
 800b296:	f000 ff6f 	bl	800c178 <z_add_timeout>
 800b29a:	e7f9      	b.n	800b290 <schedule_new_thread+0xc>
 800b29c:	0801085d 	.word	0x0801085d

0800b2a0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800b2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	460e      	mov	r6, r1
 800b2a8:	4615      	mov	r5, r2
 800b2aa:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800b2ac:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 800b2b0:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 800b2b2:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 800b2b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2b6:	2204      	movs	r2, #4
 800b2b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b2ba:	f005 f8fe 	bl	80104ba <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 800b2be:	462a      	mov	r2, r5
 800b2c0:	4631      	mov	r1, r6
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f005 f8db 	bl	801047e <setup_thread_stack>
 800b2c8:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800b2ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2cc:	9302      	str	r3, [sp, #8]
 800b2ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	463b      	mov	r3, r7
 800b2d8:	4602      	mov	r2, r0
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f7f8 ff35 	bl	800414c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	6563      	str	r3, [r4, #84]	; 0x54
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 800b2e6:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <z_setup_new_thread+0x5c>)
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	b123      	cbz	r3, 800b2f6 <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 800b2ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ee:	6763      	str	r3, [r4, #116]	; 0x74
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	b005      	add	sp, #20
 800b2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 800b2f6:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
 800b2f8:	e7fa      	b.n	800b2f0 <z_setup_new_thread+0x50>
 800b2fa:	bf00      	nop
 800b2fc:	200013ac 	.word	0x200013ac

0800b300 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 800b300:	b510      	push	{r4, lr}
 800b302:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 800b304:	4c1d      	ldr	r4, [pc, #116]	; (800b37c <z_init_static_threads+0x7c>)
 800b306:	e014      	b.n	800b332 <z_init_static_threads+0x32>
		z_setup_new_thread(
 800b308:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b30a:	9305      	str	r3, [sp, #20]
 800b30c:	6a23      	ldr	r3, [r4, #32]
 800b30e:	9304      	str	r3, [sp, #16]
 800b310:	69e3      	ldr	r3, [r4, #28]
 800b312:	9303      	str	r3, [sp, #12]
 800b314:	69a3      	ldr	r3, [r4, #24]
 800b316:	9302      	str	r3, [sp, #8]
 800b318:	6963      	ldr	r3, [r4, #20]
 800b31a:	9301      	str	r3, [sp, #4]
 800b31c:	6923      	ldr	r3, [r4, #16]
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	68e3      	ldr	r3, [r4, #12]
 800b322:	68a2      	ldr	r2, [r4, #8]
 800b324:	6861      	ldr	r1, [r4, #4]
 800b326:	6820      	ldr	r0, [r4, #0]
 800b328:	f7ff ffba 	bl	800b2a0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800b330:	3430      	adds	r4, #48	; 0x30
 800b332:	4b13      	ldr	r3, [pc, #76]	; (800b380 <z_init_static_threads+0x80>)
 800b334:	429c      	cmp	r4, r3
 800b336:	d3e7      	bcc.n	800b308 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 800b338:	f000 fb3a 	bl	800b9b0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800b33c:	4c0f      	ldr	r4, [pc, #60]	; (800b37c <z_init_static_threads+0x7c>)
 800b33e:	e000      	b.n	800b342 <z_init_static_threads+0x42>
 800b340:	3430      	adds	r4, #48	; 0x30
 800b342:	4b0f      	ldr	r3, [pc, #60]	; (800b380 <z_init_static_threads+0x80>)
 800b344:	429c      	cmp	r4, r3
 800b346:	d214      	bcs.n	800b372 <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800b348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b34a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b34e:	d0f7      	beq.n	800b340 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 800b350:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b354:	17d8      	asrs	r0, r3, #31
			return t * ((uint64_t)to_hz / from_hz);
 800b356:	0082      	lsls	r2, r0, #2
 800b358:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800b35c:	0099      	lsls	r1, r3, #2
 800b35e:	18c9      	adds	r1, r1, r3
 800b360:	eb40 0002 	adc.w	r0, r0, r2
 800b364:	184a      	adds	r2, r1, r1
 800b366:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 800b36a:	6820      	ldr	r0, [r4, #0]
 800b36c:	f7ff ff8a 	bl	800b284 <schedule_new_thread>
 800b370:	e7e6      	b.n	800b340 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 800b372:	f000 fd27 	bl	800bdc4 <k_sched_unlock>
}
 800b376:	b006      	add	sp, #24
 800b378:	bd10      	pop	{r4, pc}
 800b37a:	bf00      	nop
 800b37c:	200005dc 	.word	0x200005dc
 800b380:	2000060c 	.word	0x2000060c

0800b384 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800b384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b388:	b083      	sub	sp, #12
 800b38a:	4604      	mov	r4, r0
 800b38c:	461d      	mov	r5, r3
	__asm__ volatile(
 800b38e:	f04f 0310 	mov.w	r3, #16
 800b392:	f3ef 8711 	mrs	r7, BASEPRI
 800b396:	f383 8812 	msr	BASEPRI_MAX, r3
 800b39a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800b39e:	68c1      	ldr	r1, [r0, #12]
 800b3a0:	b999      	cbnz	r1, 800b3ca <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 800b3a2:	2900      	cmp	r1, #0
 800b3a4:	d14f      	bne.n	800b446 <z_impl_k_mutex_lock+0xc2>
 800b3a6:	4b3a      	ldr	r3, [pc, #232]	; (800b490 <z_impl_k_mutex_lock+0x10c>)
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800b3ae:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 800b3b0:	3101      	adds	r1, #1
 800b3b2:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 800b3b4:	4b36      	ldr	r3, [pc, #216]	; (800b490 <z_impl_k_mutex_lock+0x10c>)
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800b3ba:	f387 8811 	msr	BASEPRI, r7
 800b3be:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 800b3c2:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800b3c4:	b003      	add	sp, #12
 800b3c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3ca:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800b3cc:	6882      	ldr	r2, [r0, #8]
 800b3ce:	4b30      	ldr	r3, [pc, #192]	; (800b490 <z_impl_k_mutex_lock+0x10c>)
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d0e5      	beq.n	800b3a2 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800b3d6:	ea55 0106 	orrs.w	r1, r5, r6
 800b3da:	bf0c      	ite	eq
 800b3dc:	f04f 0801 	moveq.w	r8, #1
 800b3e0:	f04f 0800 	movne.w	r8, #0
 800b3e4:	d031      	beq.n	800b44a <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 800b3e6:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800b3ea:	4649      	mov	r1, r9
 800b3ec:	f993 000e 	ldrsb.w	r0, [r3, #14]
 800b3f0:	f005 f89c 	bl	801052c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800b3f4:	4581      	cmp	r9, r0
 800b3f6:	dc2f      	bgt.n	800b458 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 800b3f8:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800b3fc:	9600      	str	r6, [sp, #0]
 800b3fe:	9501      	str	r5, [sp, #4]
 800b400:	4622      	mov	r2, r4
 800b402:	4639      	mov	r1, r7
 800b404:	4823      	ldr	r0, [pc, #140]	; (800b494 <z_impl_k_mutex_lock+0x110>)
 800b406:	f000 fc27 	bl	800bc58 <z_pend_curr>
	if (got_mutex == 0) {
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d0da      	beq.n	800b3c4 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 800b40e:	f04f 0310 	mov.w	r3, #16
 800b412:	f3ef 8511 	mrs	r5, BASEPRI
 800b416:	f383 8812 	msr	BASEPRI_MAX, r3
 800b41a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800b41e:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b420:	42a3      	cmp	r3, r4
 800b422:	d01f      	beq.n	800b464 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800b424:	b1f3      	cbz	r3, 800b464 <z_impl_k_mutex_lock+0xe0>
 800b426:	6921      	ldr	r1, [r4, #16]
 800b428:	f993 000e 	ldrsb.w	r0, [r3, #14]
 800b42c:	f005 f87e 	bl	801052c <new_prio_for_inheritance>
 800b430:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800b432:	4620      	mov	r0, r4
 800b434:	f005 f885 	bl	8010542 <adjust_owner_prio>
 800b438:	b9b0      	cbnz	r0, 800b468 <z_impl_k_mutex_lock+0xe4>
 800b43a:	f1b9 0f00 	cmp.w	r9, #0
 800b43e:	d015      	beq.n	800b46c <z_impl_k_mutex_lock+0xe8>
 800b440:	f04f 0801 	mov.w	r8, #1
 800b444:	e012      	b.n	800b46c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 800b446:	6923      	ldr	r3, [r4, #16]
 800b448:	e7b1      	b.n	800b3ae <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 800b44a:	f387 8811 	msr	BASEPRI, r7
 800b44e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 800b452:	f06f 000f 	mvn.w	r0, #15
 800b456:	e7b5      	b.n	800b3c4 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 800b458:	4601      	mov	r1, r0
 800b45a:	4620      	mov	r0, r4
 800b45c:	f005 f871 	bl	8010542 <adjust_owner_prio>
 800b460:	4681      	mov	r9, r0
 800b462:	e7cb      	b.n	800b3fc <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800b464:	6921      	ldr	r1, [r4, #16]
 800b466:	e7e4      	b.n	800b432 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800b468:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 800b46c:	f1b8 0f00 	cmp.w	r8, #0
 800b470:	d106      	bne.n	800b480 <z_impl_k_mutex_lock+0xfc>
 800b472:	f385 8811 	msr	BASEPRI, r5
 800b476:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 800b47a:	f06f 000a 	mvn.w	r0, #10
 800b47e:	e7a1      	b.n	800b3c4 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 800b480:	4629      	mov	r1, r5
 800b482:	4804      	ldr	r0, [pc, #16]	; (800b494 <z_impl_k_mutex_lock+0x110>)
 800b484:	f000 fa78 	bl	800b978 <z_reschedule>
	return -EAGAIN;
 800b488:	f06f 000a 	mvn.w	r0, #10
 800b48c:	e79a      	b.n	800b3c4 <z_impl_k_mutex_lock+0x40>
 800b48e:	bf00      	nop
 800b490:	200013ac 	.word	0x200013ac
 800b494:	200013d0 	.word	0x200013d0

0800b498 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800b498:	6882      	ldr	r2, [r0, #8]
 800b49a:	2a00      	cmp	r2, #0
 800b49c:	d034      	beq.n	800b508 <z_impl_k_mutex_unlock+0x70>
{
 800b49e:	b538      	push	{r3, r4, r5, lr}
 800b4a0:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 800b4a2:	4b1c      	ldr	r3, [pc, #112]	; (800b514 <z_impl_k_mutex_unlock+0x7c>)
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d131      	bne.n	800b50e <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800b4aa:	7bda      	ldrb	r2, [r3, #15]
 800b4ac:	3a01      	subs	r2, #1
 800b4ae:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 800b4b0:	68c3      	ldr	r3, [r0, #12]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d905      	bls.n	800b4c2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800b4ba:	f000 fc83 	bl	800bdc4 <k_sched_unlock>

	return 0;
 800b4be:	2000      	movs	r0, #0
}
 800b4c0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800b4c2:	f04f 0310 	mov.w	r3, #16
 800b4c6:	f3ef 8511 	mrs	r5, BASEPRI
 800b4ca:	f383 8812 	msr	BASEPRI_MAX, r3
 800b4ce:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800b4d2:	6901      	ldr	r1, [r0, #16]
 800b4d4:	f005 f835 	bl	8010542 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f005 fa6a 	bl	80109b2 <z_unpend_first_thread>
	mutex->owner = new_owner;
 800b4de:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800b4e0:	b158      	cbz	r0, 800b4fa <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 800b4e2:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800b4e6:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 800b4ec:	f005 f99a 	bl	8010824 <z_ready_thread>
		z_reschedule(&lock, key);
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	4809      	ldr	r0, [pc, #36]	; (800b518 <z_impl_k_mutex_unlock+0x80>)
 800b4f4:	f000 fa40 	bl	800b978 <z_reschedule>
 800b4f8:	e7df      	b.n	800b4ba <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 800b4fe:	f385 8811 	msr	BASEPRI, r5
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	e7d8      	b.n	800b4ba <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 800b508:	f06f 0015 	mvn.w	r0, #21
}
 800b50c:	4770      	bx	lr
		return -EPERM;
 800b50e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b512:	e7d5      	b.n	800b4c0 <z_impl_k_mutex_unlock+0x28>
 800b514:	200013ac 	.word	0x200013ac
 800b518:	200013d0 	.word	0x200013d0

0800b51c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4604      	mov	r4, r0
	__asm__ volatile(
 800b520:	f04f 0310 	mov.w	r3, #16
 800b524:	f3ef 8511 	mrs	r5, BASEPRI
 800b528:	f383 8812 	msr	BASEPRI_MAX, r3
 800b52c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800b530:	f005 fa3f 	bl	80109b2 <z_unpend_first_thread>

	if (thread != NULL) {
 800b534:	b140      	cbz	r0, 800b548 <z_impl_k_sem_give+0x2c>
 800b536:	2200      	movs	r2, #0
 800b538:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800b53a:	f005 f973 	bl	8010824 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800b53e:	4629      	mov	r1, r5
 800b540:	4809      	ldr	r0, [pc, #36]	; (800b568 <z_impl_k_sem_give+0x4c>)
 800b542:	f000 fa19 	bl	800b978 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800b546:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	68e2      	ldr	r2, [r4, #12]
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d008      	beq.n	800b562 <z_impl_k_sem_give+0x46>
 800b550:	2201      	movs	r2, #1
 800b552:	4413      	add	r3, r2
 800b554:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800b556:	2102      	movs	r1, #2
 800b558:	f104 0010 	add.w	r0, r4, #16
 800b55c:	f005 fb8c 	bl	8010c78 <z_handle_obj_poll_events>
}
 800b560:	e7ed      	b.n	800b53e <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800b562:	2200      	movs	r2, #0
 800b564:	e7f5      	b.n	800b552 <z_impl_k_sem_give+0x36>
 800b566:	bf00      	nop
 800b568:	200013d4 	.word	0x200013d4

0800b56c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800b56c:	b510      	push	{r4, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	f04f 0410 	mov.w	r4, #16
 800b574:	f3ef 8111 	mrs	r1, BASEPRI
 800b578:	f384 8812 	msr	BASEPRI_MAX, r4
 800b57c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800b580:	6884      	ldr	r4, [r0, #8]
 800b582:	b144      	cbz	r4, 800b596 <z_impl_k_sem_take+0x2a>
		sem->count--;
 800b584:	3c01      	subs	r4, #1
 800b586:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 800b588:	f381 8811 	msr	BASEPRI, r1
 800b58c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800b590:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800b592:	b002      	add	sp, #8
 800b594:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800b596:	ea53 0402 	orrs.w	r4, r3, r2
 800b59a:	d006      	beq.n	800b5aa <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800b59c:	9200      	str	r2, [sp, #0]
 800b59e:	9301      	str	r3, [sp, #4]
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	4805      	ldr	r0, [pc, #20]	; (800b5b8 <z_impl_k_sem_take+0x4c>)
 800b5a4:	f000 fb58 	bl	800bc58 <z_pend_curr>
	return ret;
 800b5a8:	e7f3      	b.n	800b592 <z_impl_k_sem_take+0x26>
 800b5aa:	f381 8811 	msr	BASEPRI, r1
 800b5ae:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800b5b2:	f06f 000f 	mvn.w	r0, #15
 800b5b6:	e7ec      	b.n	800b592 <z_impl_k_sem_take+0x26>
 800b5b8:	200013d4 	.word	0x200013d4

0800b5bc <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 800b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5be:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 800b5c0:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800b5c2:	f013 0f02 	tst.w	r3, #2
 800b5c6:	d15c      	bne.n	800b682 <submit_to_queue_locked+0xc6>
 800b5c8:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800b5ca:	f013 0f04 	tst.w	r3, #4
 800b5ce:	d15d      	bne.n	800b68c <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 800b5d0:	680b      	ldr	r3, [r1, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d038      	beq.n	800b648 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 800b5d6:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800b5d8:	f013 0f01 	tst.w	r3, #1
 800b5dc:	d037      	beq.n	800b64e <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 800b5de:	68a3      	ldr	r3, [r4, #8]
 800b5e0:	602b      	str	r3, [r5, #0]
			ret = 2;
 800b5e2:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 800b5e4:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 800b5e6:	2e00      	cmp	r6, #0
 800b5e8:	d03f      	beq.n	800b66a <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800b5ea:	4b29      	ldr	r3, [pc, #164]	; (800b690 <submit_to_queue_locked+0xd4>)
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	42b3      	cmp	r3, r6
 800b5f0:	d02f      	beq.n	800b652 <submit_to_queue_locked+0x96>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 800b5f6:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800b5fa:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800b5fe:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800b602:	f013 0f01 	tst.w	r3, #1
 800b606:	d033      	beq.n	800b670 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 800b608:	b101      	cbz	r1, 800b60c <submit_to_queue_locked+0x50>
 800b60a:	b3a2      	cbz	r2, 800b676 <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 800b60c:	b100      	cbz	r0, 800b610 <submit_to_queue_locked+0x54>
 800b60e:	b3a9      	cbz	r1, 800b67c <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 800b610:	2300      	movs	r3, #0
 800b612:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 800b614:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 800b618:	b313      	cbz	r3, 800b660 <submit_to_queue_locked+0xa4>
	parent->next = child;
 800b61a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800b61c:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
 800b620:	b12e      	cbz	r6, 800b62e <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 800b622:	2200      	movs	r2, #0
 800b624:	4611      	mov	r1, r2
 800b626:	f106 0088 	add.w	r0, r6, #136	; 0x88
 800b62a:	f005 f9f1 	bl	8010a10 <z_sched_wake>
		ret = 1;
 800b62e:	2001      	movs	r0, #1

		if (rc < 0) {
 800b630:	2800      	cmp	r0, #0
 800b632:	db06      	blt.n	800b642 <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 800b634:	68e3      	ldr	r3, [r4, #12]
 800b636:	f043 0304 	orr.w	r3, r3, #4
 800b63a:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	60a3      	str	r3, [r4, #8]
 800b640:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 800b642:	2800      	cmp	r0, #0
 800b644:	dc21      	bgt.n	800b68a <submit_to_queue_locked+0xce>
 800b646:	e01e      	b.n	800b686 <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 800b648:	6883      	ldr	r3, [r0, #8]
 800b64a:	600b      	str	r3, [r1, #0]
 800b64c:	e7c3      	b.n	800b5d6 <submit_to_queue_locked+0x1a>
		ret = 1;
 800b64e:	2701      	movs	r7, #1
 800b650:	e7c8      	b.n	800b5e4 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800b652:	f004 ff23 	bl	801049c <k_is_in_isr>
 800b656:	b908      	cbnz	r0, 800b65c <submit_to_queue_locked+0xa0>
 800b658:	2301      	movs	r3, #1
 800b65a:	e7cb      	b.n	800b5f4 <submit_to_queue_locked+0x38>
 800b65c:	2300      	movs	r3, #0
 800b65e:	e7c9      	b.n	800b5f4 <submit_to_queue_locked+0x38>
 800b660:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
 800b664:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
 800b668:	e7da      	b.n	800b620 <submit_to_queue_locked+0x64>
		return -EINVAL;
 800b66a:	f06f 0015 	mvn.w	r0, #21
 800b66e:	e7df      	b.n	800b630 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 800b670:	f06f 0012 	mvn.w	r0, #18
 800b674:	e7dc      	b.n	800b630 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800b676:	f06f 000f 	mvn.w	r0, #15
 800b67a:	e7d9      	b.n	800b630 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800b67c:	f06f 000f 	mvn.w	r0, #15
 800b680:	e7d6      	b.n	800b630 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800b682:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 800b686:	2300      	movs	r3, #0
 800b688:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 800b68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 800b68c:	2000      	movs	r0, #0
 800b68e:	e7fa      	b.n	800b686 <submit_to_queue_locked+0xca>
 800b690:	200013ac 	.word	0x200013ac

0800b694 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 800b694:	b508      	push	{r3, lr}
 800b696:	4684      	mov	ip, r0
 800b698:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800b69a:	ea53 0102 	orrs.w	r1, r3, r2
 800b69e:	d00c      	beq.n	800b6ba <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
 800b6a0:	68c1      	ldr	r1, [r0, #12]
 800b6a2:	f041 0108 	orr.w	r1, r1, #8
 800b6a6:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
 800b6a8:	f8dc 1000 	ldr.w	r1, [ip]
 800b6ac:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800b6ae:	4905      	ldr	r1, [pc, #20]	; (800b6c4 <schedule_for_queue_locked+0x30>)
 800b6b0:	3010      	adds	r0, #16
 800b6b2:	f000 fd61 	bl	800c178 <z_add_timeout>

	return ret;
 800b6b6:	2001      	movs	r0, #1
}
 800b6b8:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
 800b6ba:	4661      	mov	r1, ip
 800b6bc:	f7ff ff7e 	bl	800b5bc <submit_to_queue_locked>
 800b6c0:	e7fa      	b.n	800b6b8 <schedule_for_queue_locked+0x24>
 800b6c2:	bf00      	nop
 800b6c4:	080105ff 	.word	0x080105ff

0800b6c8 <finalize_cancel_locked>:
{
 800b6c8:	b570      	push	{r4, r5, r6, lr}
 800b6ca:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 800b6cc:	68c3      	ldr	r3, [r0, #12]
 800b6ce:	f023 0302 	bic.w	r3, r3, #2
 800b6d2:	60c3      	str	r3, [r0, #12]
	return list->head;
 800b6d4:	4b1a      	ldr	r3, [pc, #104]	; (800b740 <finalize_cancel_locked+0x78>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800b6d8:	b1fb      	cbz	r3, 800b71a <finalize_cancel_locked+0x52>
 800b6da:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 800b6dc:	b103      	cbz	r3, 800b6e0 <finalize_cancel_locked+0x18>
	return node->next;
 800b6de:	681c      	ldr	r4, [r3, #0]
 800b6e0:	2600      	movs	r6, #0
 800b6e2:	e01f      	b.n	800b724 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 800b6e4:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 800b6e6:	b166      	cbz	r6, 800b702 <finalize_cancel_locked+0x3a>
	return node->next;
 800b6e8:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 800b6ea:	6031      	str	r1, [r6, #0]
	return list->tail;
 800b6ec:	4914      	ldr	r1, [pc, #80]	; (800b740 <finalize_cancel_locked+0x78>)
 800b6ee:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800b6f0:	428b      	cmp	r3, r1
 800b6f2:	d00f      	beq.n	800b714 <finalize_cancel_locked+0x4c>
	parent->next = child;
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 800b6f8:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 800b6fc:	f7ff ff0e 	bl	800b51c <z_impl_k_sem_give>
}
 800b700:	e015      	b.n	800b72e <finalize_cancel_locked+0x66>
	return node->next;
 800b702:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 800b704:	490e      	ldr	r1, [pc, #56]	; (800b740 <finalize_cancel_locked+0x78>)
 800b706:	6008      	str	r0, [r1, #0]
	return list->tail;
 800b708:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800b70a:	428b      	cmp	r3, r1
 800b70c:	d1f2      	bne.n	800b6f4 <finalize_cancel_locked+0x2c>
	list->tail = node;
 800b70e:	490c      	ldr	r1, [pc, #48]	; (800b740 <finalize_cancel_locked+0x78>)
 800b710:	6048      	str	r0, [r1, #4]
}
 800b712:	e7ef      	b.n	800b6f4 <finalize_cancel_locked+0x2c>
	list->tail = node;
 800b714:	490a      	ldr	r1, [pc, #40]	; (800b740 <finalize_cancel_locked+0x78>)
 800b716:	604e      	str	r6, [r1, #4]
}
 800b718:	e7ec      	b.n	800b6f4 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800b71a:	461c      	mov	r4, r3
 800b71c:	e7e0      	b.n	800b6e0 <finalize_cancel_locked+0x18>
 800b71e:	4622      	mov	r2, r4
 800b720:	4623      	mov	r3, r4
 800b722:	4614      	mov	r4, r2
 800b724:	b153      	cbz	r3, 800b73c <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 800b726:	685a      	ldr	r2, [r3, #4]
 800b728:	42aa      	cmp	r2, r5
 800b72a:	d0db      	beq.n	800b6e4 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 800b72c:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800b72e:	2c00      	cmp	r4, #0
 800b730:	d0f5      	beq.n	800b71e <finalize_cancel_locked+0x56>
 800b732:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800b734:	2c00      	cmp	r4, #0
 800b736:	d0f3      	beq.n	800b720 <finalize_cancel_locked+0x58>
	return node->next;
 800b738:	6822      	ldr	r2, [r4, #0]
 800b73a:	e7f1      	b.n	800b720 <finalize_cancel_locked+0x58>
}
 800b73c:	bd70      	pop	{r4, r5, r6, pc}
 800b73e:	bf00      	nop
 800b740:	200013dc 	.word	0x200013dc

0800b744 <work_queue_main>:
{
 800b744:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b746:	b085      	sub	sp, #20
 800b748:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 800b74a:	e016      	b.n	800b77a <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 800b74c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 800b750:	f023 0204 	bic.w	r2, r3, #4
 800b754:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
 800b758:	f013 0f04 	tst.w	r3, #4
 800b75c:	d159      	bne.n	800b812 <work_queue_main+0xce>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800b75e:	2300      	movs	r3, #0
 800b760:	9302      	str	r3, [sp, #8]
 800b762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b76a:	e9cd 2300 	strd	r2, r3, [sp]
 800b76e:	f105 0288 	add.w	r2, r5, #136	; 0x88
 800b772:	4631      	mov	r1, r6
 800b774:	482e      	ldr	r0, [pc, #184]	; (800b830 <work_queue_main+0xec>)
 800b776:	f000 fc89 	bl	800c08c <z_sched_wait>
	__asm__ volatile(
 800b77a:	f04f 0310 	mov.w	r3, #16
 800b77e:	f3ef 8611 	mrs	r6, BASEPRI
 800b782:	f383 8812 	msr	BASEPRI_MAX, r3
 800b786:	f3bf 8f6f 	isb	sy
	return list->head;
 800b78a:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 800b78e:	2c00      	cmp	r4, #0
 800b790:	d0dc      	beq.n	800b74c <work_queue_main+0x8>
	return node->next;
 800b792:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 800b794:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
 800b798:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800b79c:	4294      	cmp	r4, r2
 800b79e:	d035      	beq.n	800b80c <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 800b7a0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800b7a4:	f043 0302 	orr.w	r3, r3, #2
 800b7a8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 800b7ac:	68e3      	ldr	r3, [r4, #12]
 800b7ae:	f043 0301 	orr.w	r3, r3, #1
 800b7b2:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 800b7b4:	f023 0304 	bic.w	r3, r3, #4
 800b7b8:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 800b7ba:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 800b7bc:	2c00      	cmp	r4, #0
 800b7be:	d0ce      	beq.n	800b75e <work_queue_main+0x1a>
	__asm__ volatile(
 800b7c0:	f386 8811 	msr	BASEPRI, r6
 800b7c4:	f3bf 8f6f 	isb	sy
		handler(work);
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	4798      	blx	r3
	__asm__ volatile(
 800b7cc:	f04f 0310 	mov.w	r3, #16
 800b7d0:	f3ef 8611 	mrs	r6, BASEPRI
 800b7d4:	f383 8812 	msr	BASEPRI_MAX, r3
 800b7d8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 800b7dc:	68e3      	ldr	r3, [r4, #12]
 800b7de:	f023 0301 	bic.w	r3, r3, #1
 800b7e2:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800b7e4:	f013 0f02 	tst.w	r3, #2
 800b7e8:	d11e      	bne.n	800b828 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 800b7ea:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800b7ee:	f023 0302 	bic.w	r3, r3, #2
 800b7f2:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
 800b7f6:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 800b7fa:	f386 8811 	msr	BASEPRI, r6
 800b7fe:	f3bf 8f6f 	isb	sy
		if (yield) {
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1b9      	bne.n	800b77a <work_queue_main+0x36>
	z_impl_k_yield();
 800b806:	f000 fb5b 	bl	800bec0 <z_impl_k_yield>
}
 800b80a:	e7b6      	b.n	800b77a <work_queue_main+0x36>
	list->tail = node;
 800b80c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 800b810:	e7c6      	b.n	800b7a0 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 800b812:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 800b816:	2200      	movs	r2, #0
 800b818:	2101      	movs	r1, #1
 800b81a:	4638      	mov	r0, r7
 800b81c:	f005 f8f8 	bl	8010a10 <z_sched_wake>
 800b820:	2800      	cmp	r0, #0
 800b822:	d1f8      	bne.n	800b816 <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 800b824:	2300      	movs	r3, #0
 800b826:	e7c9      	b.n	800b7bc <work_queue_main+0x78>
			finalize_cancel_locked(work);
 800b828:	4620      	mov	r0, r4
 800b82a:	f7ff ff4d 	bl	800b6c8 <finalize_cancel_locked>
 800b82e:	e7dc      	b.n	800b7ea <work_queue_main+0xa6>
 800b830:	200013d8 	.word	0x200013d8

0800b834 <k_work_submit>:
{
 800b834:	b508      	push	{r3, lr}
 800b836:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 800b838:	4801      	ldr	r0, [pc, #4]	; (800b840 <k_work_submit+0xc>)
 800b83a:	f004 ff1b 	bl	8010674 <k_work_submit_to_queue>
}
 800b83e:	bd08      	pop	{r3, pc}
 800b840:	20000ce0 	.word	0x20000ce0

0800b844 <k_work_queue_start>:
{
 800b844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b846:	b089      	sub	sp, #36	; 0x24
 800b848:	4604      	mov	r4, r0
 800b84a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 800b84c:	2000      	movs	r0, #0
 800b84e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
 800b852:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800b856:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
 800b85a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
 800b85e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800b862:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
 800b866:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
 800b86a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
	if ((cfg != NULL) && cfg->no_yield) {
 800b86e:	b1fd      	cbz	r5, 800b8b0 <k_work_queue_start+0x6c>
 800b870:	7928      	ldrb	r0, [r5, #4]
 800b872:	b9f8      	cbnz	r0, 800b8b4 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800b874:	2001      	movs	r0, #1
	*flagp = flags;
 800b876:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800b87a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b87e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b882:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b886:	2000      	movs	r0, #0
 800b888:	9004      	str	r0, [sp, #16]
 800b88a:	9303      	str	r3, [sp, #12]
 800b88c:	9002      	str	r0, [sp, #8]
 800b88e:	9001      	str	r0, [sp, #4]
 800b890:	9400      	str	r4, [sp, #0]
 800b892:	4b0a      	ldr	r3, [pc, #40]	; (800b8bc <k_work_queue_start+0x78>)
 800b894:	4620      	mov	r0, r4
 800b896:	f004 fe1b 	bl	80104d0 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
 800b89a:	b125      	cbz	r5, 800b8a6 <k_work_queue_start+0x62>
 800b89c:	6829      	ldr	r1, [r5, #0]
 800b89e:	b111      	cbz	r1, 800b8a6 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f004 fe01 	bl	80104a8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f004 fe03 	bl	80104b2 <z_impl_k_thread_start>
}
 800b8ac:	b009      	add	sp, #36	; 0x24
 800b8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800b8b0:	2001      	movs	r0, #1
 800b8b2:	e7e0      	b.n	800b876 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 800b8b4:	f240 1001 	movw	r0, #257	; 0x101
 800b8b8:	e7dd      	b.n	800b876 <k_work_queue_start+0x32>
 800b8ba:	bf00      	nop
 800b8bc:	0800b745 	.word	0x0800b745

0800b8c0 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 800b8c0:	b508      	push	{r3, lr}
 800b8c2:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
 800b8c4:	4801      	ldr	r0, [pc, #4]	; (800b8cc <k_work_reschedule+0xc>)
 800b8c6:	f004 ff01 	bl	80106cc <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
 800b8ca:	bd08      	pop	{r3, pc}
 800b8cc:	20000ce0 	.word	0x20000ce0

0800b8d0 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800b8d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8d4:	bf08      	it	eq
 800b8d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800b8da:	d100      	bne.n	800b8de <add_thread_timeout+0xe>
 800b8dc:	4770      	bx	lr
{
 800b8de:	b508      	push	{r3, lr}
 800b8e0:	4902      	ldr	r1, [pc, #8]	; (800b8ec <add_thread_timeout+0x1c>)
 800b8e2:	3018      	adds	r0, #24
 800b8e4:	f000 fc48 	bl	800c178 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 800b8e8:	bd08      	pop	{r3, pc}
 800b8ea:	bf00      	nop
 800b8ec:	0801085d 	.word	0x0801085d

0800b8f0 <z_reset_time_slice>:
{
 800b8f0:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 800b8f2:	4b08      	ldr	r3, [pc, #32]	; (800b914 <z_reset_time_slice+0x24>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	b903      	cbnz	r3, 800b8fa <z_reset_time_slice+0xa>
}
 800b8f8:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800b8fa:	f7ff f8ef 	bl	800aadc <sys_clock_elapsed>
 800b8fe:	4603      	mov	r3, r0
 800b900:	4a04      	ldr	r2, [pc, #16]	; (800b914 <z_reset_time_slice+0x24>)
 800b902:	6810      	ldr	r0, [r2, #0]
 800b904:	4403      	add	r3, r0
 800b906:	4a04      	ldr	r2, [pc, #16]	; (800b918 <z_reset_time_slice+0x28>)
 800b908:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 800b90a:	2100      	movs	r1, #0
 800b90c:	f005 f8ec 	bl	8010ae8 <z_set_timeout_expiry>
}
 800b910:	e7f2      	b.n	800b8f8 <z_reset_time_slice+0x8>
 800b912:	bf00      	nop
 800b914:	200013f0 	.word	0x200013f0
 800b918:	200013ac 	.word	0x200013ac

0800b91c <k_sched_time_slice_set>:
{
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	4604      	mov	r4, r0
 800b920:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 800b922:	2300      	movs	r3, #0
	__asm__ volatile(
 800b924:	f04f 0210 	mov.w	r2, #16
 800b928:	f3ef 8611 	mrs	r6, BASEPRI
 800b92c:	f382 8812 	msr	BASEPRI_MAX, r2
 800b930:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 800b934:	e00c      	b.n	800b950 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 800b936:	2b02      	cmp	r3, #2
 800b938:	bfb8      	it	lt
 800b93a:	2302      	movlt	r3, #2
 800b93c:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 800b93e:	4b0b      	ldr	r3, [pc, #44]	; (800b96c <k_sched_time_slice_set+0x50>)
 800b940:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 800b942:	f7ff ffd5 	bl	800b8f0 <z_reset_time_slice>
	__asm__ volatile(
 800b946:	f386 8811 	msr	BASEPRI, r6
 800b94a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800b94e:	2301      	movs	r3, #1
 800b950:	b953      	cbnz	r3, 800b968 <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 800b952:	4b07      	ldr	r3, [pc, #28]	; (800b970 <k_sched_time_slice_set+0x54>)
 800b954:	2200      	movs	r2, #0
 800b956:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 800b958:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800b95c:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 800b95e:	4a05      	ldr	r2, [pc, #20]	; (800b974 <k_sched_time_slice_set+0x58>)
 800b960:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800b962:	2c00      	cmp	r4, #0
 800b964:	dce7      	bgt.n	800b936 <k_sched_time_slice_set+0x1a>
 800b966:	e7ea      	b.n	800b93e <k_sched_time_slice_set+0x22>
}
 800b968:	bd70      	pop	{r4, r5, r6, pc}
 800b96a:	bf00      	nop
 800b96c:	200013ec 	.word	0x200013ec
 800b970:	200013ac 	.word	0x200013ac
 800b974:	200013f0 	.word	0x200013f0

0800b978 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 800b978:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 800b97a:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800b97c:	b921      	cbnz	r1, 800b988 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b97e:	f3ef 8305 	mrs	r3, IPSR
 800b982:	b913      	cbnz	r3, 800b98a <z_reschedule+0x12>
 800b984:	2101      	movs	r1, #1
 800b986:	e000      	b.n	800b98a <z_reschedule+0x12>
 800b988:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 800b98a:	f011 0f01 	tst.w	r1, #1
 800b98e:	d007      	beq.n	800b9a0 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 800b990:	4b06      	ldr	r3, [pc, #24]	; (800b9ac <z_reschedule+0x34>)
 800b992:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 800b994:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 800b996:	429a      	cmp	r2, r3
 800b998:	d002      	beq.n	800b9a0 <z_reschedule+0x28>
	ret = arch_swap(key);
 800b99a:	f7f8 fb83 	bl	80040a4 <arch_swap>
		z_swap(lock, key);
 800b99e:	e003      	b.n	800b9a8 <z_reschedule+0x30>
 800b9a0:	f380 8811 	msr	BASEPRI, r0
 800b9a4:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 800b9a8:	bd08      	pop	{r3, pc}
 800b9aa:	bf00      	nop
 800b9ac:	200013ac 	.word	0x200013ac

0800b9b0 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 800b9b0:	2300      	movs	r3, #0
	__asm__ volatile(
 800b9b2:	f04f 0210 	mov.w	r2, #16
 800b9b6:	f3ef 8111 	mrs	r1, BASEPRI
 800b9ba:	f382 8812 	msr	BASEPRI_MAX, r2
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	e009      	b.n	800b9d8 <k_sched_lock+0x28>
	--_current->base.sched_locked;
 800b9c4:	4b06      	ldr	r3, [pc, #24]	; (800b9e0 <k_sched_lock+0x30>)
 800b9c6:	689a      	ldr	r2, [r3, #8]
 800b9c8:	7bd3      	ldrb	r3, [r2, #15]
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800b9ce:	f381 8811 	msr	BASEPRI, r1
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d0f3      	beq.n	800b9c4 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	200013ac 	.word	0x200013ac

0800b9e4 <update_cache>:
{
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
 800b9e8:	480f      	ldr	r0, [pc, #60]	; (800ba28 <update_cache+0x44>)
 800b9ea:	f004 ff14 	bl	8010816 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800b9ee:	4605      	mov	r5, r0
 800b9f0:	b170      	cbz	r0, 800ba10 <update_cache+0x2c>
	if (preempt_ok != 0) {
 800b9f2:	b984      	cbnz	r4, 800ba16 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 800b9f4:	4b0d      	ldr	r3, [pc, #52]	; (800ba2c <update_cache+0x48>)
 800b9f6:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 800b9f8:	7b5a      	ldrb	r2, [r3, #13]
 800b9fa:	f012 0f1f 	tst.w	r2, #31
 800b9fe:	d10a      	bne.n	800ba16 <update_cache+0x32>
	return node->next != NULL;
 800ba00:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800ba02:	b942      	cbnz	r2, 800ba16 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800ba04:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 800ba06:	2a7f      	cmp	r2, #127	; 0x7f
 800ba08:	d905      	bls.n	800ba16 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 800ba0a:	4a08      	ldr	r2, [pc, #32]	; (800ba2c <update_cache+0x48>)
 800ba0c:	6193      	str	r3, [r2, #24]
 800ba0e:	e00a      	b.n	800ba26 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800ba10:	4b06      	ldr	r3, [pc, #24]	; (800ba2c <update_cache+0x48>)
 800ba12:	68dd      	ldr	r5, [r3, #12]
 800ba14:	e7ed      	b.n	800b9f2 <update_cache+0xe>
		if (thread != _current) {
 800ba16:	4b05      	ldr	r3, [pc, #20]	; (800ba2c <update_cache+0x48>)
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	42ab      	cmp	r3, r5
 800ba1c:	d001      	beq.n	800ba22 <update_cache+0x3e>
			z_reset_time_slice();
 800ba1e:	f7ff ff67 	bl	800b8f0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800ba22:	4b02      	ldr	r3, [pc, #8]	; (800ba2c <update_cache+0x48>)
 800ba24:	619d      	str	r5, [r3, #24]
}
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	200013c8 	.word	0x200013c8
 800ba2c:	200013ac 	.word	0x200013ac

0800ba30 <move_thread_to_end_of_prio_q>:
{
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 800ba34:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800ba36:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	db28      	blt.n	800ba90 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 800ba3e:	7b6b      	ldrb	r3, [r5, #13]
 800ba40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba44:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800ba46:	4b1a      	ldr	r3, [pc, #104]	; (800bab0 <move_thread_to_end_of_prio_q+0x80>)
 800ba48:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ba4c:	429c      	cmp	r4, r3
 800ba4e:	d02d      	beq.n	800baac <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ba50:	b16c      	cbz	r4, 800ba6e <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800ba52:	4621      	mov	r1, r4
 800ba54:	4628      	mov	r0, r5
 800ba56:	f004 fe73 	bl	8010740 <z_sched_prio_cmp>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	dc20      	bgt.n	800baa0 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800ba5e:	b134      	cbz	r4, 800ba6e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 800ba60:	4b13      	ldr	r3, [pc, #76]	; (800bab0 <move_thread_to_end_of_prio_q+0x80>)
 800ba62:	6a1b      	ldr	r3, [r3, #32]
 800ba64:	429c      	cmp	r4, r3
 800ba66:	d002      	beq.n	800ba6e <move_thread_to_end_of_prio_q+0x3e>
 800ba68:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ba6a:	2c00      	cmp	r4, #0
 800ba6c:	d1f0      	bne.n	800ba50 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 800ba6e:	4b10      	ldr	r3, [pc, #64]	; (800bab0 <move_thread_to_end_of_prio_q+0x80>)
 800ba70:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 800ba72:	f103 011c 	add.w	r1, r3, #28
 800ba76:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800ba78:	606a      	str	r2, [r5, #4]

	tail->next = node;
 800ba7a:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800ba7c:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 800ba7e:	4b0c      	ldr	r3, [pc, #48]	; (800bab0 <move_thread_to_end_of_prio_q+0x80>)
 800ba80:	6898      	ldr	r0, [r3, #8]
 800ba82:	42a8      	cmp	r0, r5
 800ba84:	bf14      	ite	ne
 800ba86:	2000      	movne	r0, #0
 800ba88:	2001      	moveq	r0, #1
 800ba8a:	f7ff ffab 	bl	800b9e4 <update_cache>
}
 800ba8e:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800ba90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ba94:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800ba96:	4601      	mov	r1, r0
 800ba98:	4806      	ldr	r0, [pc, #24]	; (800bab4 <move_thread_to_end_of_prio_q+0x84>)
 800ba9a:	f004 fe90 	bl	80107be <z_priq_dumb_remove>
}
 800ba9e:	e7ce      	b.n	800ba3e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800baa0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 800baa2:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800baa4:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800baa6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800baa8:	6065      	str	r5, [r4, #4]
}
 800baaa:	e7e8      	b.n	800ba7e <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800baac:	2400      	movs	r4, #0
 800baae:	e7cf      	b.n	800ba50 <move_thread_to_end_of_prio_q+0x20>
 800bab0:	200013ac 	.word	0x200013ac
 800bab4:	200013c8 	.word	0x200013c8

0800bab8 <z_time_slice>:
{
 800bab8:	b510      	push	{r4, lr}
	__asm__ volatile(
 800baba:	f04f 0310 	mov.w	r3, #16
 800babe:	f3ef 8411 	mrs	r4, BASEPRI
 800bac2:	f383 8812 	msr	BASEPRI_MAX, r3
 800bac6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800baca:	4b21      	ldr	r3, [pc, #132]	; (800bb50 <z_time_slice+0x98>)
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	4a21      	ldr	r2, [pc, #132]	; (800bb54 <z_time_slice+0x9c>)
 800bad0:	6812      	ldr	r2, [r2, #0]
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d017      	beq.n	800bb06 <z_time_slice+0x4e>
	pending_current = NULL;
 800bad6:	4a1f      	ldr	r2, [pc, #124]	; (800bb54 <z_time_slice+0x9c>)
 800bad8:	2100      	movs	r1, #0
 800bada:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800badc:	4a1e      	ldr	r2, [pc, #120]	; (800bb58 <z_time_slice+0xa0>)
 800bade:	6812      	ldr	r2, [r2, #0]
 800bae0:	b372      	cbz	r2, 800bb40 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800bae2:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 800bae4:	2a7f      	cmp	r2, #127	; 0x7f
 800bae6:	d815      	bhi.n	800bb14 <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 800bae8:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 800baea:	f012 0f1f 	tst.w	r2, #31
 800baee:	d11b      	bne.n	800bb28 <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800baf0:	f993 100e 	ldrsb.w	r1, [r3, #14]
 800baf4:	4a19      	ldr	r2, [pc, #100]	; (800bb5c <z_time_slice+0xa4>)
 800baf6:	6812      	ldr	r2, [r2, #0]
 800baf8:	4291      	cmp	r1, r2
 800bafa:	db17      	blt.n	800bb2c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 800bafc:	4a18      	ldr	r2, [pc, #96]	; (800bb60 <z_time_slice+0xa8>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d016      	beq.n	800bb30 <z_time_slice+0x78>
 800bb02:	2201      	movs	r2, #1
 800bb04:	e007      	b.n	800bb16 <z_time_slice+0x5e>
		z_reset_time_slice();
 800bb06:	f7ff fef3 	bl	800b8f0 <z_reset_time_slice>
	__asm__ volatile(
 800bb0a:	f384 8811 	msr	BASEPRI, r4
 800bb0e:	f3bf 8f6f 	isb	sy
		return;
 800bb12:	e01c      	b.n	800bb4e <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 800bb14:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 800bb16:	b19a      	cbz	r2, 800bb40 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 800bb18:	4a0d      	ldr	r2, [pc, #52]	; (800bb50 <z_time_slice+0x98>)
 800bb1a:	6912      	ldr	r2, [r2, #16]
 800bb1c:	4282      	cmp	r2, r0
 800bb1e:	dd09      	ble.n	800bb34 <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 800bb20:	1a10      	subs	r0, r2, r0
 800bb22:	4b0b      	ldr	r3, [pc, #44]	; (800bb50 <z_time_slice+0x98>)
 800bb24:	6118      	str	r0, [r3, #16]
 800bb26:	e00e      	b.n	800bb46 <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 800bb28:	2200      	movs	r2, #0
 800bb2a:	e7f4      	b.n	800bb16 <z_time_slice+0x5e>
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	e7f2      	b.n	800bb16 <z_time_slice+0x5e>
 800bb30:	2200      	movs	r2, #0
 800bb32:	e7f0      	b.n	800bb16 <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7ff ff7b 	bl	800ba30 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 800bb3a:	f7ff fed9 	bl	800b8f0 <z_reset_time_slice>
 800bb3e:	e002      	b.n	800bb46 <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 800bb40:	4b03      	ldr	r3, [pc, #12]	; (800bb50 <z_time_slice+0x98>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	611a      	str	r2, [r3, #16]
 800bb46:	f384 8811 	msr	BASEPRI, r4
 800bb4a:	f3bf 8f6f 	isb	sy
}
 800bb4e:	bd10      	pop	{r4, pc}
 800bb50:	200013ac 	.word	0x200013ac
 800bb54:	200013e4 	.word	0x200013e4
 800bb58:	200013f0 	.word	0x200013f0
 800bb5c:	200013ec 	.word	0x200013ec
 800bb60:	20000bd8 	.word	0x20000bd8

0800bb64 <ready_thread>:
{
 800bb64:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 800bb66:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800bb68:	f990 200d 	ldrsb.w	r2, [r0, #13]
 800bb6c:	2a00      	cmp	r2, #0
 800bb6e:	db2d      	blt.n	800bbcc <ready_thread+0x68>
 800bb70:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800bb72:	f013 0f1f 	tst.w	r3, #31
 800bb76:	d105      	bne.n	800bb84 <ready_thread+0x20>
	return node->next != NULL;
 800bb78:	6982      	ldr	r2, [r0, #24]
 800bb7a:	b10a      	cbz	r2, 800bb80 <ready_thread+0x1c>
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	e002      	b.n	800bb86 <ready_thread+0x22>
 800bb80:	2201      	movs	r2, #1
 800bb82:	e000      	b.n	800bb86 <ready_thread+0x22>
 800bb84:	2200      	movs	r2, #0
 800bb86:	b30a      	cbz	r2, 800bbcc <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 800bb88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb8c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800bb8e:	4b14      	ldr	r3, [pc, #80]	; (800bbe0 <ready_thread+0x7c>)
 800bb90:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bb94:	429d      	cmp	r5, r3
 800bb96:	d020      	beq.n	800bbda <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800bb98:	b16d      	cbz	r5, 800bbb6 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f004 fdcf 	bl	8010740 <z_sched_prio_cmp>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	dc13      	bgt.n	800bbce <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800bba6:	b135      	cbz	r5, 800bbb6 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 800bba8:	4b0d      	ldr	r3, [pc, #52]	; (800bbe0 <ready_thread+0x7c>)
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	429d      	cmp	r5, r3
 800bbae:	d002      	beq.n	800bbb6 <ready_thread+0x52>
 800bbb0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800bbb2:	2d00      	cmp	r5, #0
 800bbb4:	d1f0      	bne.n	800bb98 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 800bbb6:	4b0a      	ldr	r3, [pc, #40]	; (800bbe0 <ready_thread+0x7c>)
 800bbb8:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800bbba:	f103 011c 	add.w	r1, r3, #28
 800bbbe:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 800bbc0:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800bbc2:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800bbc4:	621c      	str	r4, [r3, #32]
		update_cache(0);
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	f7ff ff0c 	bl	800b9e4 <update_cache>
}
 800bbcc:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 800bbce:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 800bbd0:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800bbd2:	6025      	str	r5, [r4, #0]
	prev->next = node;
 800bbd4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800bbd6:	606c      	str	r4, [r5, #4]
}
 800bbd8:	e7f5      	b.n	800bbc6 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800bbda:	2500      	movs	r5, #0
 800bbdc:	e7dc      	b.n	800bb98 <ready_thread+0x34>
 800bbde:	bf00      	nop
 800bbe0:	200013ac 	.word	0x200013ac

0800bbe4 <z_sched_start>:
{
 800bbe4:	b510      	push	{r4, lr}
	__asm__ volatile(
 800bbe6:	f04f 0310 	mov.w	r3, #16
 800bbea:	f3ef 8411 	mrs	r4, BASEPRI
 800bbee:	f383 8812 	msr	BASEPRI_MAX, r3
 800bbf2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800bbf6:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 800bbf8:	f013 0f04 	tst.w	r3, #4
 800bbfc:	d104      	bne.n	800bc08 <z_sched_start+0x24>
	__asm__ volatile(
 800bbfe:	f384 8811 	msr	BASEPRI, r4
 800bc02:	f3bf 8f6f 	isb	sy
}
 800bc06:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800bc08:	f023 0304 	bic.w	r3, r3, #4
 800bc0c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 800bc0e:	f7ff ffa9 	bl	800bb64 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 800bc12:	4621      	mov	r1, r4
 800bc14:	4801      	ldr	r0, [pc, #4]	; (800bc1c <z_sched_start+0x38>)
 800bc16:	f7ff feaf 	bl	800b978 <z_reschedule>
 800bc1a:	e7f4      	b.n	800bc06 <z_sched_start+0x22>
 800bc1c:	200013e8 	.word	0x200013e8

0800bc20 <unready_thread>:
{
 800bc20:	b510      	push	{r4, lr}
 800bc22:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 800bc24:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800bc26:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	db08      	blt.n	800bc40 <unready_thread+0x20>
	update_cache(thread == _current);
 800bc2e:	4b08      	ldr	r3, [pc, #32]	; (800bc50 <unready_thread+0x30>)
 800bc30:	6898      	ldr	r0, [r3, #8]
 800bc32:	42a0      	cmp	r0, r4
 800bc34:	bf14      	ite	ne
 800bc36:	2000      	movne	r0, #0
 800bc38:	2001      	moveq	r0, #1
 800bc3a:	f7ff fed3 	bl	800b9e4 <update_cache>
}
 800bc3e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800bc40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bc44:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800bc46:	4601      	mov	r1, r0
 800bc48:	4802      	ldr	r0, [pc, #8]	; (800bc54 <unready_thread+0x34>)
 800bc4a:	f004 fdb8 	bl	80107be <z_priq_dumb_remove>
}
 800bc4e:	e7ee      	b.n	800bc2e <unready_thread+0xe>
 800bc50:	200013ac 	.word	0x200013ac
 800bc54:	200013c8 	.word	0x200013c8

0800bc58 <z_pend_curr>:
{
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	4611      	mov	r1, r2
	pending_current = _current;
 800bc5e:	4b06      	ldr	r3, [pc, #24]	; (800bc78 <z_pend_curr+0x20>)
 800bc60:	6898      	ldr	r0, [r3, #8]
 800bc62:	4b06      	ldr	r3, [pc, #24]	; (800bc7c <z_pend_curr+0x24>)
 800bc64:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 800bc66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc6a:	f004 fe59 	bl	8010920 <pend>
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f7f8 fa18 	bl	80040a4 <arch_swap>
}
 800bc74:	bd10      	pop	{r4, pc}
 800bc76:	bf00      	nop
 800bc78:	200013ac 	.word	0x200013ac
 800bc7c:	200013e4 	.word	0x200013e4

0800bc80 <z_set_prio>:
{
 800bc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc84:	4604      	mov	r4, r0
 800bc86:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 800bc88:	2300      	movs	r3, #0
	__asm__ volatile(
 800bc8a:	f04f 0210 	mov.w	r2, #16
 800bc8e:	f3ef 8811 	mrs	r8, BASEPRI
 800bc92:	f382 8812 	msr	BASEPRI_MAX, r2
 800bc96:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 800bc9a:	461f      	mov	r7, r3
 800bc9c:	e008      	b.n	800bcb0 <z_set_prio+0x30>
		if (need_sched) {
 800bc9e:	f012 0701 	ands.w	r7, r2, #1
 800bca2:	d111      	bne.n	800bcc8 <z_set_prio+0x48>
			thread->base.prio = prio;
 800bca4:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 800bca6:	f388 8811 	msr	BASEPRI, r8
 800bcaa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800bcae:	2301      	movs	r3, #1
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d13d      	bne.n	800bd32 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 800bcb6:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800bcb8:	f013 0f1f 	tst.w	r3, #31
 800bcbc:	d1ef      	bne.n	800bc9e <z_set_prio+0x1e>
	return node->next != NULL;
 800bcbe:	69a1      	ldr	r1, [r4, #24]
 800bcc0:	2900      	cmp	r1, #0
 800bcc2:	d1ec      	bne.n	800bc9e <z_set_prio+0x1e>
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	e7ea      	b.n	800bc9e <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800bcc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bccc:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800bcce:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800bd38 <z_set_prio+0xb8>
 800bcd2:	4621      	mov	r1, r4
 800bcd4:	4648      	mov	r0, r9
 800bcd6:	f004 fd72 	bl	80107be <z_priq_dumb_remove>
				thread->base.prio = prio;
 800bcda:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 800bcdc:	7b63      	ldrb	r3, [r4, #13]
 800bcde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bce2:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800bce4:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bce8:	454d      	cmp	r5, r9
 800bcea:	d020      	beq.n	800bd2e <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800bcec:	b16d      	cbz	r5, 800bd0a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800bcee:	4629      	mov	r1, r5
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f004 fd25 	bl	8010740 <z_sched_prio_cmp>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	dc13      	bgt.n	800bd22 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800bcfa:	b135      	cbz	r5, 800bd0a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 800bcfc:	4b0f      	ldr	r3, [pc, #60]	; (800bd3c <z_set_prio+0xbc>)
 800bcfe:	6a1b      	ldr	r3, [r3, #32]
 800bd00:	429d      	cmp	r5, r3
 800bd02:	d002      	beq.n	800bd0a <z_set_prio+0x8a>
 800bd04:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800bd06:	2d00      	cmp	r5, #0
 800bd08:	d1f0      	bne.n	800bcec <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 800bd0a:	4b0c      	ldr	r3, [pc, #48]	; (800bd3c <z_set_prio+0xbc>)
 800bd0c:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800bd0e:	f103 011c 	add.w	r1, r3, #28
 800bd12:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 800bd14:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800bd16:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800bd18:	621c      	str	r4, [r3, #32]
			update_cache(1);
 800bd1a:	2001      	movs	r0, #1
 800bd1c:	f7ff fe62 	bl	800b9e4 <update_cache>
 800bd20:	e7c1      	b.n	800bca6 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 800bd22:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 800bd24:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800bd26:	6025      	str	r5, [r4, #0]
	prev->next = node;
 800bd28:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800bd2a:	606c      	str	r4, [r5, #4]
}
 800bd2c:	e7f5      	b.n	800bd1a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800bd2e:	2500      	movs	r5, #0
 800bd30:	e7dc      	b.n	800bcec <z_set_prio+0x6c>
}
 800bd32:	4638      	mov	r0, r7
 800bd34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd38:	200013c8 	.word	0x200013c8
 800bd3c:	200013ac 	.word	0x200013ac

0800bd40 <z_impl_k_thread_suspend>:
{
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800bd44:	3018      	adds	r0, #24
 800bd46:	f004 feb1 	bl	8010aac <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 800bd4a:	2300      	movs	r3, #0
	__asm__ volatile(
 800bd4c:	f04f 0210 	mov.w	r2, #16
 800bd50:	f3ef 8511 	mrs	r5, BASEPRI
 800bd54:	f382 8812 	msr	BASEPRI_MAX, r2
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	e010      	b.n	800bd80 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800bd5e:	7b63      	ldrb	r3, [r4, #13]
 800bd60:	f043 0310 	orr.w	r3, r3, #16
 800bd64:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 800bd66:	4b15      	ldr	r3, [pc, #84]	; (800bdbc <z_impl_k_thread_suspend+0x7c>)
 800bd68:	6898      	ldr	r0, [r3, #8]
 800bd6a:	42a0      	cmp	r0, r4
 800bd6c:	bf14      	ite	ne
 800bd6e:	2000      	movne	r0, #0
 800bd70:	2001      	moveq	r0, #1
 800bd72:	f7ff fe37 	bl	800b9e4 <update_cache>
	__asm__ volatile(
 800bd76:	f385 8811 	msr	BASEPRI, r5
 800bd7a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800bd7e:	2301      	movs	r3, #1
 800bd80:	b963      	cbnz	r3, 800bd9c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 800bd82:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 800bd84:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	dae8      	bge.n	800bd5e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800bd8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bd90:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800bd92:	4621      	mov	r1, r4
 800bd94:	480a      	ldr	r0, [pc, #40]	; (800bdc0 <z_impl_k_thread_suspend+0x80>)
 800bd96:	f004 fd12 	bl	80107be <z_priq_dumb_remove>
}
 800bd9a:	e7e0      	b.n	800bd5e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 800bd9c:	4b07      	ldr	r3, [pc, #28]	; (800bdbc <z_impl_k_thread_suspend+0x7c>)
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	42a3      	cmp	r3, r4
 800bda2:	d000      	beq.n	800bda6 <z_impl_k_thread_suspend+0x66>
}
 800bda4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800bda6:	f04f 0310 	mov.w	r3, #16
 800bdaa:	f3ef 8011 	mrs	r0, BASEPRI
 800bdae:	f383 8812 	msr	BASEPRI_MAX, r3
 800bdb2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800bdb6:	f004 fced 	bl	8010794 <z_reschedule_irqlock>
 800bdba:	e7f3      	b.n	800bda4 <z_impl_k_thread_suspend+0x64>
 800bdbc:	200013ac 	.word	0x200013ac
 800bdc0:	200013c8 	.word	0x200013c8

0800bdc4 <k_sched_unlock>:

void k_sched_unlock(void)
{
 800bdc4:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f04f 0210 	mov.w	r2, #16
 800bdcc:	f3ef 8411 	mrs	r4, BASEPRI
 800bdd0:	f382 8812 	msr	BASEPRI_MAX, r2
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	e00c      	b.n	800bdf4 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 800bdda:	4b0d      	ldr	r3, [pc, #52]	; (800be10 <k_sched_unlock+0x4c>)
 800bddc:	689a      	ldr	r2, [r3, #8]
 800bdde:	7bd3      	ldrb	r3, [r2, #15]
 800bde0:	3301      	adds	r3, #1
 800bde2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800bde4:	2000      	movs	r0, #0
 800bde6:	f7ff fdfd 	bl	800b9e4 <update_cache>
	__asm__ volatile(
 800bdea:	f384 8811 	msr	BASEPRI, r4
 800bdee:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d0f0      	beq.n	800bdda <k_sched_unlock+0x16>
	__asm__ volatile(
 800bdf8:	f04f 0310 	mov.w	r3, #16
 800bdfc:	f3ef 8011 	mrs	r0, BASEPRI
 800be00:	f383 8812 	msr	BASEPRI_MAX, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f004 fcc4 	bl	8010794 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 800be0c:	bd10      	pop	{r4, pc}
 800be0e:	bf00      	nop
 800be10:	200013ac 	.word	0x200013ac

0800be14 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 800be14:	7b43      	ldrb	r3, [r0, #13]
 800be16:	f013 0f08 	tst.w	r3, #8
 800be1a:	d142      	bne.n	800bea2 <end_thread+0x8e>
{
 800be1c:	b570      	push	{r4, r5, r6, lr}
 800be1e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 800be20:	f043 0308 	orr.w	r3, r3, #8
 800be24:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800be26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800be2a:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 800be2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800be30:	d12b      	bne.n	800be8a <end_thread+0x76>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
 800be32:	68ab      	ldr	r3, [r5, #8]
 800be34:	b15b      	cbz	r3, 800be4e <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800be36:	4628      	mov	r0, r5
 800be38:	f004 fc80 	bl	801073c <pended_on_thread>
 800be3c:	4629      	mov	r1, r5
 800be3e:	f004 fcbe 	bl	80107be <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800be42:	7b6b      	ldrb	r3, [r5, #13]
 800be44:	f023 0302 	bic.w	r3, r3, #2
 800be48:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800be4a:	2300      	movs	r3, #0
 800be4c:	60ab      	str	r3, [r5, #8]
 800be4e:	f105 0018 	add.w	r0, r5, #24
 800be52:	f004 fe2b 	bl	8010aac <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 800be56:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 800be58:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800be5a:	42ac      	cmp	r4, r5
 800be5c:	d01d      	beq.n	800be9a <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800be5e:	b1e4      	cbz	r4, 800be9a <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800be60:	4620      	mov	r0, r4
 800be62:	f004 fc6b 	bl	801073c <pended_on_thread>
 800be66:	4621      	mov	r1, r4
 800be68:	f004 fca9 	bl	80107be <z_priq_dumb_remove>
 800be6c:	7b63      	ldrb	r3, [r4, #13]
 800be6e:	f023 0302 	bic.w	r3, r3, #2
 800be72:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800be74:	2600      	movs	r6, #0
 800be76:	60a6      	str	r6, [r4, #8]
 800be78:	f104 0018 	add.w	r0, r4, #24
 800be7c:	f004 fe16 	bl	8010aac <z_abort_timeout>
 800be80:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 800be82:	4620      	mov	r0, r4
 800be84:	f7ff fe6e 	bl	800bb64 <ready_thread>
 800be88:	e7e6      	b.n	800be58 <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800be8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be8e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800be90:	4601      	mov	r1, r0
 800be92:	4804      	ldr	r0, [pc, #16]	; (800bea4 <end_thread+0x90>)
 800be94:	f004 fc93 	bl	80107be <z_priq_dumb_remove>
}
 800be98:	e7cb      	b.n	800be32 <end_thread+0x1e>
		update_cache(1);
 800be9a:	2001      	movs	r0, #1
 800be9c:	f7ff fda2 	bl	800b9e4 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 800bea0:	bd70      	pop	{r4, r5, r6, pc}
 800bea2:	4770      	bx	lr
 800bea4:	200013c8 	.word	0x200013c8

0800bea8 <z_sched_init>:
{
 800bea8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
 800beaa:	4804      	ldr	r0, [pc, #16]	; (800bebc <z_sched_init+0x14>)
 800beac:	f004 fdac 	bl	8010a08 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800beb0:	2100      	movs	r1, #0
 800beb2:	4608      	mov	r0, r1
 800beb4:	f7ff fd32 	bl	800b91c <k_sched_time_slice_set>
}
 800beb8:	bd08      	pop	{r3, pc}
 800beba:	bf00      	nop
 800bebc:	200013c4 	.word	0x200013c4

0800bec0 <z_impl_k_yield>:
{
 800bec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec2:	f04f 0310 	mov.w	r3, #16
 800bec6:	f3ef 8611 	mrs	r6, BASEPRI
 800beca:	f383 8812 	msr	BASEPRI_MAX, r3
 800bece:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
 800bed2:	4c1c      	ldr	r4, [pc, #112]	; (800bf44 <z_impl_k_yield+0x84>)
 800bed4:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800bed6:	7b4b      	ldrb	r3, [r1, #13]
 800bed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bedc:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800bede:	f104 071c 	add.w	r7, r4, #28
 800bee2:	4638      	mov	r0, r7
 800bee4:	f004 fc6b 	bl	80107be <z_priq_dumb_remove>
	queue_thread(_current);
 800bee8:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 800beea:	7b6b      	ldrb	r3, [r5, #13]
 800beec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bef0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800bef2:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bef4:	42bc      	cmp	r4, r7
 800bef6:	d023      	beq.n	800bf40 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800bef8:	b16c      	cbz	r4, 800bf16 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800befa:	4621      	mov	r1, r4
 800befc:	4628      	mov	r0, r5
 800befe:	f004 fc1f 	bl	8010740 <z_sched_prio_cmp>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	dc16      	bgt.n	800bf34 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800bf06:	b134      	cbz	r4, 800bf16 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 800bf08:	4b0e      	ldr	r3, [pc, #56]	; (800bf44 <z_impl_k_yield+0x84>)
 800bf0a:	6a1b      	ldr	r3, [r3, #32]
 800bf0c:	429c      	cmp	r4, r3
 800bf0e:	d002      	beq.n	800bf16 <z_impl_k_yield+0x56>
 800bf10:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800bf12:	2c00      	cmp	r4, #0
 800bf14:	d1f0      	bne.n	800bef8 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 800bf16:	4b0b      	ldr	r3, [pc, #44]	; (800bf44 <z_impl_k_yield+0x84>)
 800bf18:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800bf1a:	f103 011c 	add.w	r1, r3, #28
 800bf1e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800bf20:	606a      	str	r2, [r5, #4]
	tail->next = node;
 800bf22:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800bf24:	621d      	str	r5, [r3, #32]
	update_cache(1);
 800bf26:	2001      	movs	r0, #1
 800bf28:	f7ff fd5c 	bl	800b9e4 <update_cache>
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	f7f8 f8b9 	bl	80040a4 <arch_swap>
}
 800bf32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 800bf34:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800bf36:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800bf38:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800bf3a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800bf3c:	6065      	str	r5, [r4, #4]
}
 800bf3e:	e7f2      	b.n	800bf26 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800bf40:	2400      	movs	r4, #0
 800bf42:	e7d9      	b.n	800bef8 <z_impl_k_yield+0x38>
 800bf44:	200013ac 	.word	0x200013ac

0800bf48 <z_tick_sleep>:
{
 800bf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 800bf4c:	ea50 0301 	orrs.w	r3, r0, r1
 800bf50:	d038      	beq.n	800bfc4 <z_tick_sleep+0x7c>
 800bf52:	4604      	mov	r4, r0
 800bf54:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 800bf56:	f06f 0301 	mvn.w	r3, #1
 800bf5a:	1a1b      	subs	r3, r3, r0
 800bf5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf60:	eb62 0201 	sbc.w	r2, r2, r1
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	f172 0300 	sbcs.w	r3, r2, #0
 800bf6a:	db2f      	blt.n	800bfcc <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 800bf6c:	f06f 0501 	mvn.w	r5, #1
 800bf70:	1a2d      	subs	r5, r5, r0
 800bf72:	f04f 0310 	mov.w	r3, #16
 800bf76:	f3ef 8811 	mrs	r8, BASEPRI
 800bf7a:	f383 8812 	msr	BASEPRI_MAX, r3
 800bf7e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 800bf82:	4f14      	ldr	r7, [pc, #80]	; (800bfd4 <z_tick_sleep+0x8c>)
 800bf84:	68b8      	ldr	r0, [r7, #8]
 800bf86:	4b14      	ldr	r3, [pc, #80]	; (800bfd8 <z_tick_sleep+0x90>)
 800bf88:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 800bf8a:	f7ff fe49 	bl	800bc20 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 800bf8e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800bf90:	4622      	mov	r2, r4
 800bf92:	4633      	mov	r3, r6
 800bf94:	4911      	ldr	r1, [pc, #68]	; (800bfdc <z_tick_sleep+0x94>)
 800bf96:	3018      	adds	r0, #24
 800bf98:	f000 f8ee 	bl	800c178 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 800bf9c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800bf9e:	7b53      	ldrb	r3, [r2, #13]
 800bfa0:	f043 0310 	orr.w	r3, r3, #16
 800bfa4:	7353      	strb	r3, [r2, #13]
 800bfa6:	4640      	mov	r0, r8
 800bfa8:	f7f8 f87c 	bl	80040a4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 800bfac:	f004 fdc7 	bl	8010b3e <sys_clock_tick_get_32>
 800bfb0:	1a28      	subs	r0, r5, r0
 800bfb2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800bfb6:	2801      	cmp	r0, #1
 800bfb8:	f173 0300 	sbcs.w	r3, r3, #0
 800bfbc:	da00      	bge.n	800bfc0 <z_tick_sleep+0x78>
	return 0;
 800bfbe:	2000      	movs	r0, #0
}
 800bfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 800bfc4:	f7ff ff7c 	bl	800bec0 <z_impl_k_yield>
		return 0;
 800bfc8:	2000      	movs	r0, #0
 800bfca:	e7f9      	b.n	800bfc0 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 800bfcc:	f004 fdb7 	bl	8010b3e <sys_clock_tick_get_32>
 800bfd0:	1905      	adds	r5, r0, r4
 800bfd2:	e7ce      	b.n	800bf72 <z_tick_sleep+0x2a>
 800bfd4:	200013ac 	.word	0x200013ac
 800bfd8:	200013e4 	.word	0x200013e4
 800bfdc:	0801085d 	.word	0x0801085d

0800bfe0 <z_impl_k_sleep>:
{
 800bfe0:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800bfe2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800bfe6:	bf08      	it	eq
 800bfe8:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 800bfec:	d007      	beq.n	800bffe <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 800bfee:	f7ff ffab 	bl	800bf48 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 800bff2:	220a      	movs	r2, #10
 800bff4:	2300      	movs	r3, #0
 800bff6:	17c1      	asrs	r1, r0, #31
 800bff8:	f7f4 fcf0 	bl	80009dc <__aeabi_uldivmod>
}
 800bffc:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 800bffe:	4b03      	ldr	r3, [pc, #12]	; (800c00c <z_impl_k_sleep+0x2c>)
 800c000:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800c002:	f7ff fe9d 	bl	800bd40 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 800c006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c00a:	e7f7      	b.n	800bffc <z_impl_k_sleep+0x1c>
 800c00c:	200013ac 	.word	0x200013ac

0800c010 <z_impl_z_current_get>:
}
 800c010:	4b01      	ldr	r3, [pc, #4]	; (800c018 <z_impl_z_current_get+0x8>)
 800c012:	6898      	ldr	r0, [r3, #8]
 800c014:	4770      	bx	lr
 800c016:	bf00      	nop
 800c018:	200013ac 	.word	0x200013ac

0800c01c <z_impl_k_is_preempt_thread>:
 800c01c:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 800c020:	b933      	cbnz	r3, 800c030 <z_impl_k_is_preempt_thread+0x14>
 800c022:	4b05      	ldr	r3, [pc, #20]	; (800c038 <z_impl_k_is_preempt_thread+0x1c>)
 800c024:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800c026:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 800c028:	2b7f      	cmp	r3, #127	; 0x7f
 800c02a:	d803      	bhi.n	800c034 <z_impl_k_is_preempt_thread+0x18>
 800c02c:	2001      	movs	r0, #1
 800c02e:	4770      	bx	lr
 800c030:	2000      	movs	r0, #0
 800c032:	4770      	bx	lr
 800c034:	2000      	movs	r0, #0
}
 800c036:	4770      	bx	lr
 800c038:	200013ac 	.word	0x200013ac

0800c03c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 800c03c:	b538      	push	{r3, r4, r5, lr}
 800c03e:	f04f 0310 	mov.w	r3, #16
 800c042:	f3ef 8511 	mrs	r5, BASEPRI
 800c046:	f383 8812 	msr	BASEPRI_MAX, r3
 800c04a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800c04e:	7b43      	ldrb	r3, [r0, #13]
 800c050:	f013 0f08 	tst.w	r3, #8
 800c054:	d004      	beq.n	800c060 <z_thread_abort+0x24>
	__asm__ volatile(
 800c056:	f385 8811 	msr	BASEPRI, r5
 800c05a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 800c05e:	bd38      	pop	{r3, r4, r5, pc}
 800c060:	4604      	mov	r4, r0
	end_thread(thread);
 800c062:	f7ff fed7 	bl	800be14 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 800c066:	4b08      	ldr	r3, [pc, #32]	; (800c088 <z_thread_abort+0x4c>)
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	42a3      	cmp	r3, r4
 800c06c:	d004      	beq.n	800c078 <z_thread_abort+0x3c>
 800c06e:	f385 8811 	msr	BASEPRI, r5
 800c072:	f3bf 8f6f 	isb	sy
 800c076:	e7f2      	b.n	800c05e <z_thread_abort+0x22>
 800c078:	f3ef 8305 	mrs	r3, IPSR
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d1f6      	bne.n	800c06e <z_thread_abort+0x32>
 800c080:	4628      	mov	r0, r5
 800c082:	f7f8 f80f 	bl	80040a4 <arch_swap>
	return ret;
 800c086:	e7f2      	b.n	800c06e <z_thread_abort+0x32>
 800c088:	200013ac 	.word	0x200013ac

0800c08c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 800c08c:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 800c090:	b083      	sub	sp, #12
 800c092:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 800c094:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 800c098:	e9cd bc00 	strd	fp, ip, [sp]
 800c09c:	f7ff fddc 	bl	800bc58 <z_pend_curr>

	if (data != NULL) {
 800c0a0:	b11c      	cbz	r4, 800c0aa <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
 800c0a2:	4b03      	ldr	r3, [pc, #12]	; (800c0b0 <z_sched_wait+0x24>)
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	695b      	ldr	r3, [r3, #20]
 800c0a8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 800c0aa:	b003      	add	sp, #12
 800c0ac:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
 800c0b0:	200013ac 	.word	0x200013ac

0800c0b4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 800c0b4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 800c0b6:	4806      	ldr	r0, [pc, #24]	; (800c0d0 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800c0b8:	4a06      	ldr	r2, [pc, #24]	; (800c0d4 <z_data_copy+0x20>)
 800c0ba:	1a12      	subs	r2, r2, r0
 800c0bc:	4906      	ldr	r1, [pc, #24]	; (800c0d8 <z_data_copy+0x24>)
 800c0be:	f004 fdf1 	bl	8010ca4 <memcpy>
 800c0c2:	4a06      	ldr	r2, [pc, #24]	; (800c0dc <z_data_copy+0x28>)
 800c0c4:	4906      	ldr	r1, [pc, #24]	; (800c0e0 <z_data_copy+0x2c>)
 800c0c6:	4807      	ldr	r0, [pc, #28]	; (800c0e4 <z_data_copy+0x30>)
 800c0c8:	f004 fdec 	bl	8010ca4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800c0cc:	bd08      	pop	{r3, pc}
 800c0ce:	bf00      	nop
 800c0d0:	20000000 	.word	0x20000000
 800c0d4:	2000069c 	.word	0x2000069c
 800c0d8:	08013764 	.word	0x08013764
 800c0dc:	00000000 	.word	0x00000000
 800c0e0:	08013764 	.word	0x08013764
 800c0e4:	20000000 	.word	0x20000000

0800c0e8 <first>:
	return list->head == list;
 800c0e8:	4b03      	ldr	r3, [pc, #12]	; (800c0f8 <first+0x10>)
 800c0ea:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c0ec:	4298      	cmp	r0, r3
 800c0ee:	d000      	beq.n	800c0f2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 800c0f0:	4770      	bx	lr
 800c0f2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 800c0f4:	e7fc      	b.n	800c0f0 <first+0x8>
 800c0f6:	bf00      	nop
 800c0f8:	200003c4 	.word	0x200003c4

0800c0fc <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c0fc:	b130      	cbz	r0, 800c10c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 800c0fe:	4a04      	ldr	r2, [pc, #16]	; (800c110 <next+0x14>)
 800c100:	6852      	ldr	r2, [r2, #4]
 800c102:	4290      	cmp	r0, r2
 800c104:	d001      	beq.n	800c10a <next+0xe>
 800c106:	6800      	ldr	r0, [r0, #0]
 800c108:	4770      	bx	lr
 800c10a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	200003c4 	.word	0x200003c4

0800c114 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 800c114:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800c116:	4b04      	ldr	r3, [pc, #16]	; (800c128 <elapsed+0x14>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	b10b      	cbz	r3, 800c120 <elapsed+0xc>
 800c11c:	2000      	movs	r0, #0
}
 800c11e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800c120:	f7fe fcdc 	bl	800aadc <sys_clock_elapsed>
 800c124:	e7fb      	b.n	800c11e <elapsed+0xa>
 800c126:	bf00      	nop
 800c128:	200013f4 	.word	0x200013f4

0800c12c <next_timeout>:

static int32_t next_timeout(void)
{
 800c12c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 800c12e:	f7ff ffdb 	bl	800c0e8 <first>
 800c132:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 800c134:	f7ff ffee 	bl	800c114 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 800c138:	b17c      	cbz	r4, 800c15a <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	6962      	ldr	r2, [r4, #20]
 800c13e:	1a1b      	subs	r3, r3, r0
 800c140:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 800c144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c148:	f170 0200 	sbcs.w	r2, r0, #0
 800c14c:	da08      	bge.n	800c160 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 800c14e:	2800      	cmp	r0, #0
 800c150:	db01      	blt.n	800c156 <next_timeout+0x2a>
 800c152:	4618      	mov	r0, r3
 800c154:	e006      	b.n	800c164 <next_timeout+0x38>
 800c156:	2300      	movs	r3, #0
 800c158:	e7fb      	b.n	800c152 <next_timeout+0x26>
		ret = MAX_WAIT;
 800c15a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800c15e:	e001      	b.n	800c164 <next_timeout+0x38>
 800c160:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800c164:	4b03      	ldr	r3, [pc, #12]	; (800c174 <next_timeout+0x48>)
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	b113      	cbz	r3, 800c170 <next_timeout+0x44>
 800c16a:	4283      	cmp	r3, r0
 800c16c:	da00      	bge.n	800c170 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
 800c16e:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 800c170:	bd10      	pop	{r4, pc}
 800c172:	bf00      	nop
 800c174:	200013ac 	.word	0x200013ac

0800c178 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800c178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c17c:	bf08      	it	eq
 800c17e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800c182:	d07d      	beq.n	800c280 <z_add_timeout+0x108>
{
 800c184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c188:	4604      	mov	r4, r0
 800c18a:	4692      	mov	sl, r2
 800c18c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800c18e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 800c190:	2300      	movs	r3, #0
	__asm__ volatile(
 800c192:	f04f 0210 	mov.w	r2, #16
 800c196:	f3ef 8711 	mrs	r7, BASEPRI
 800c19a:	f382 8812 	msr	BASEPRI_MAX, r2
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	e021      	b.n	800c1e8 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 800c1a4:	f11a 0801 	adds.w	r8, sl, #1
 800c1a8:	f145 0900 	adc.w	r9, r5, #0
 800c1ac:	f7ff ffb2 	bl	800c114 <elapsed>
 800c1b0:	eb18 0300 	adds.w	r3, r8, r0
 800c1b4:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
 800c1b8:	6123      	str	r3, [r4, #16]
 800c1ba:	6160      	str	r0, [r4, #20]
 800c1bc:	e036      	b.n	800c22c <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 800c1be:	1a51      	subs	r1, r2, r1
 800c1c0:	eb66 0303 	sbc.w	r3, r6, r3
 800c1c4:	6101      	str	r1, [r0, #16]
 800c1c6:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 800c1c8:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 800c1ca:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c1cc:	6020      	str	r0, [r4, #0]
	prev->next = node;
 800c1ce:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c1d0:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	d03e      	beq.n	800c254 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 800c1d6:	f7ff ff87 	bl	800c0e8 <first>
 800c1da:	4284      	cmp	r4, r0
 800c1dc:	d041      	beq.n	800c262 <z_add_timeout+0xea>
	__asm__ volatile(
 800c1de:	f387 8811 	msr	BASEPRI, r7
 800c1e2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d147      	bne.n	800c27c <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800c1ec:	4653      	mov	r3, sl
 800c1ee:	f06f 0101 	mvn.w	r1, #1
 800c1f2:	ebb1 010a 	subs.w	r1, r1, sl
 800c1f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1fa:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800c1fe:	2a00      	cmp	r2, #0
 800c200:	dbd0      	blt.n	800c1a4 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800c202:	4a20      	ldr	r2, [pc, #128]	; (800c284 <z_add_timeout+0x10c>)
 800c204:	6811      	ldr	r1, [r2, #0]
 800c206:	6852      	ldr	r2, [r2, #4]
 800c208:	185b      	adds	r3, r3, r1
 800c20a:	eb42 0205 	adc.w	r2, r2, r5
 800c20e:	f06f 0101 	mvn.w	r1, #1
 800c212:	1acb      	subs	r3, r1, r3
 800c214:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
 800c218:	4618      	mov	r0, r3
 800c21a:	4611      	mov	r1, r2
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	f172 0300 	sbcs.w	r3, r2, #0
 800c222:	da01      	bge.n	800c228 <z_add_timeout+0xb0>
 800c224:	2001      	movs	r0, #1
 800c226:	2100      	movs	r1, #0
 800c228:	6120      	str	r0, [r4, #16]
 800c22a:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800c22c:	f7ff ff5c 	bl	800c0e8 <first>
 800c230:	2800      	cmp	r0, #0
 800c232:	d0ce      	beq.n	800c1d2 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 800c234:	6902      	ldr	r2, [r0, #16]
 800c236:	6946      	ldr	r6, [r0, #20]
 800c238:	6921      	ldr	r1, [r4, #16]
 800c23a:	6963      	ldr	r3, [r4, #20]
 800c23c:	4291      	cmp	r1, r2
 800c23e:	eb73 0c06 	sbcs.w	ip, r3, r6
 800c242:	dbbc      	blt.n	800c1be <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 800c244:	1a89      	subs	r1, r1, r2
 800c246:	eb63 0306 	sbc.w	r3, r3, r6
 800c24a:	6121      	str	r1, [r4, #16]
 800c24c:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800c24e:	f7ff ff55 	bl	800c0fc <next>
 800c252:	e7ed      	b.n	800c230 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
 800c254:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <z_add_timeout+0x110>)
 800c256:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 800c258:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 800c25a:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800c25c:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800c25e:	605c      	str	r4, [r3, #4]
}
 800c260:	e7b9      	b.n	800c1d6 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800c262:	f7ff ff63 	bl	800c12c <next_timeout>

			if (next_time == 0 ||
 800c266:	4603      	mov	r3, r0
 800c268:	b118      	cbz	r0, 800c272 <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
 800c26a:	4a08      	ldr	r2, [pc, #32]	; (800c28c <z_add_timeout+0x114>)
 800c26c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 800c26e:	4282      	cmp	r2, r0
 800c270:	d0b5      	beq.n	800c1de <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 800c272:	2100      	movs	r1, #0
 800c274:	4618      	mov	r0, r3
 800c276:	f7fe fbaf 	bl	800a9d8 <sys_clock_set_timeout>
 800c27a:	e7b0      	b.n	800c1de <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 800c27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	20000cd8 	.word	0x20000cd8
 800c288:	200003c4 	.word	0x200003c4
 800c28c:	200013ac 	.word	0x200013ac

0800c290 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800c294:	f7ff fc10 	bl	800bab8 <z_time_slice>
	__asm__ volatile(
 800c298:	f04f 0310 	mov.w	r3, #16
 800c29c:	f3ef 8511 	mrs	r5, BASEPRI
 800c2a0:	f383 8812 	msr	BASEPRI_MAX, r3
 800c2a4:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800c2a8:	4b28      	ldr	r3, [pc, #160]	; (800c34c <sys_clock_announce+0xbc>)
 800c2aa:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 800c2ac:	e020      	b.n	800c2f0 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800c2ae:	4828      	ldr	r0, [pc, #160]	; (800c350 <sys_clock_announce+0xc0>)
 800c2b0:	6801      	ldr	r1, [r0, #0]
 800c2b2:	6846      	ldr	r6, [r0, #4]
 800c2b4:	1889      	adds	r1, r1, r2
 800c2b6:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 800c2ba:	6001      	str	r1, [r0, #0]
 800c2bc:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 800c2be:	1a9b      	subs	r3, r3, r2
 800c2c0:	4a22      	ldr	r2, [pc, #136]	; (800c34c <sys_clock_announce+0xbc>)
 800c2c2:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f004 fbd6 	bl	8010a7e <remove_timeout>
	__asm__ volatile(
 800c2d2:	f385 8811 	msr	BASEPRI, r5
 800c2d6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 800c2da:	68a3      	ldr	r3, [r4, #8]
 800c2dc:	4620      	mov	r0, r4
 800c2de:	4798      	blx	r3
	__asm__ volatile(
 800c2e0:	f04f 0310 	mov.w	r3, #16
 800c2e4:	f3ef 8511 	mrs	r5, BASEPRI
 800c2e8:	f383 8812 	msr	BASEPRI_MAX, r3
 800c2ec:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800c2f0:	f7ff fefa 	bl	800c0e8 <first>
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	b140      	cbz	r0, 800c30a <sys_clock_announce+0x7a>
 800c2f8:	6902      	ldr	r2, [r0, #16]
 800c2fa:	6941      	ldr	r1, [r0, #20]
 800c2fc:	4b13      	ldr	r3, [pc, #76]	; (800c34c <sys_clock_announce+0xbc>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	17d8      	asrs	r0, r3, #31
 800c302:	4293      	cmp	r3, r2
 800c304:	eb70 0101 	sbcs.w	r1, r0, r1
 800c308:	dad1      	bge.n	800c2ae <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 800c30a:	b144      	cbz	r4, 800c31e <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 800c30c:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <sys_clock_announce+0xbc>)
 800c30e:	6819      	ldr	r1, [r3, #0]
 800c310:	6923      	ldr	r3, [r4, #16]
 800c312:	6962      	ldr	r2, [r4, #20]
 800c314:	1a5b      	subs	r3, r3, r1
 800c316:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 800c31a:	6123      	str	r3, [r4, #16]
 800c31c:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 800c31e:	4a0c      	ldr	r2, [pc, #48]	; (800c350 <sys_clock_announce+0xc0>)
 800c320:	4e0a      	ldr	r6, [pc, #40]	; (800c34c <sys_clock_announce+0xbc>)
 800c322:	6830      	ldr	r0, [r6, #0]
 800c324:	6813      	ldr	r3, [r2, #0]
 800c326:	6851      	ldr	r1, [r2, #4]
 800c328:	181b      	adds	r3, r3, r0
 800c32a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 800c32e:	6013      	str	r3, [r2, #0]
 800c330:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 800c332:	2400      	movs	r4, #0
 800c334:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 800c336:	f7ff fef9 	bl	800c12c <next_timeout>
 800c33a:	4621      	mov	r1, r4
 800c33c:	f7fe fb4c 	bl	800a9d8 <sys_clock_set_timeout>
	__asm__ volatile(
 800c340:	f385 8811 	msr	BASEPRI, r5
 800c344:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800c348:	bd70      	pop	{r4, r5, r6, pc}
 800c34a:	bf00      	nop
 800c34c:	200013f4 	.word	0x200013f4
 800c350:	20000cd8 	.word	0x20000cd8

0800c354 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 800c354:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 800c356:	2300      	movs	r3, #0
	__asm__ volatile(
 800c358:	f04f 0210 	mov.w	r2, #16
 800c35c:	f3ef 8411 	mrs	r4, BASEPRI
 800c360:	f382 8812 	msr	BASEPRI_MAX, r2
 800c364:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 800c368:	4618      	mov	r0, r3
 800c36a:	4619      	mov	r1, r3
 800c36c:	e00c      	b.n	800c388 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 800c36e:	f7fe fbb5 	bl	800aadc <sys_clock_elapsed>
 800c372:	4a07      	ldr	r2, [pc, #28]	; (800c390 <sys_clock_tick_get+0x3c>)
 800c374:	6813      	ldr	r3, [r2, #0]
 800c376:	6851      	ldr	r1, [r2, #4]
 800c378:	18c0      	adds	r0, r0, r3
 800c37a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800c37e:	f384 8811 	msr	BASEPRI, r4
 800c382:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800c386:	2301      	movs	r3, #1
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d0f0      	beq.n	800c36e <sys_clock_tick_get+0x1a>
	}
	return t;
}
 800c38c:	bd10      	pop	{r4, pc}
 800c38e:	bf00      	nop
 800c390:	20000cd8 	.word	0x20000cd8

0800c394 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 800c394:	b900      	cbnz	r0, 800c398 <z_impl_k_busy_wait+0x4>
 800c396:	4770      	bx	lr
{
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4604      	mov	r4, r0
 800c39c:	f7fe fbbe 	bl	800ab1c <sys_clock_cycle_get_32>
 800c3a0:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800c3a2:	4907      	ldr	r1, [pc, #28]	; (800c3c0 <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800c3a4:	4a07      	ldr	r2, [pc, #28]	; (800c3c4 <z_impl_k_busy_wait+0x30>)
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	fba4 0101 	umull	r0, r1, r4, r1
 800c3ac:	f7f4 fb16 	bl	80009dc <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	f7fe fbb3 	bl	800ab1c <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800c3b6:	1b40      	subs	r0, r0, r5
 800c3b8:	42a0      	cmp	r0, r4
 800c3ba:	d3fa      	bcc.n	800c3b2 <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 800c3bc:	bd38      	pop	{r3, r4, r5, pc}
 800c3be:	bf00      	nop
 800c3c0:	04c4b400 	.word	0x04c4b400
 800c3c4:	000f4240 	.word	0x000f4240

0800c3c8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 800c3c8:	b570      	push	{r4, r5, r6, lr}
 800c3ca:	4604      	mov	r4, r0
	__asm__ volatile(
 800c3cc:	f04f 0310 	mov.w	r3, #16
 800c3d0:	f3ef 8611 	mrs	r6, BASEPRI
 800c3d4:	f383 8812 	msr	BASEPRI_MAX, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800c3de:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800c3e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c3e2:	ea52 0103 	orrs.w	r1, r2, r3
 800c3e6:	d005      	beq.n	800c3f4 <z_timer_expiration_handler+0x2c>
 800c3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3ec:	bf08      	it	eq
 800c3ee:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800c3f2:	d126      	bne.n	800c442 <z_timer_expiration_handler+0x7a>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 800c3f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 800c3fa:	6a23      	ldr	r3, [r4, #32]
 800c3fc:	b173      	cbz	r3, 800c41c <z_timer_expiration_handler+0x54>
	__asm__ volatile(
 800c3fe:	f386 8811 	msr	BASEPRI, r6
 800c402:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 800c406:	6a23      	ldr	r3, [r4, #32]
 800c408:	4620      	mov	r0, r4
 800c40a:	4798      	blx	r3
	__asm__ volatile(
 800c40c:	f04f 0310 	mov.w	r3, #16
 800c410:	f3ef 8511 	mrs	r5, BASEPRI
 800c414:	f383 8812 	msr	BASEPRI_MAX, r3
 800c418:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 800c41c:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 800c420:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c422:	42a3      	cmp	r3, r4
 800c424:	d013      	beq.n	800c44e <z_timer_expiration_handler+0x86>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 800c426:	b194      	cbz	r4, 800c44e <z_timer_expiration_handler+0x86>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 800c428:	4620      	mov	r0, r4
 800c42a:	f004 f993 	bl	8010754 <z_unpend_thread_no_timeout>
 800c42e:	2300      	movs	r3, #0
 800c430:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
 800c432:	f385 8811 	msr	BASEPRI, r5
 800c436:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 800c43a:	4620      	mov	r0, r4
 800c43c:	f004 f9f2 	bl	8010824 <z_ready_thread>
}
 800c440:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800c442:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 800c446:	4904      	ldr	r1, [pc, #16]	; (800c458 <z_timer_expiration_handler+0x90>)
 800c448:	f7ff fe96 	bl	800c178 <z_add_timeout>
 800c44c:	e7d2      	b.n	800c3f4 <z_timer_expiration_handler+0x2c>
 800c44e:	f385 8811 	msr	BASEPRI, r5
 800c452:	f3bf 8f6f 	isb	sy
		return;
 800c456:	e7f3      	b.n	800c440 <z_timer_expiration_handler+0x78>
 800c458:	0800c3c9 	.word	0x0800c3c9

0800c45c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800c45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c460:	9f06      	ldr	r7, [sp, #24]
 800c462:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800c466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c46a:	bf08      	it	eq
 800c46c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800c470:	d02f      	beq.n	800c4d2 <z_impl_k_timer_start+0x76>
 800c472:	4605      	mov	r5, r0
 800c474:	4614      	mov	r4, r2
 800c476:	461e      	mov	r6, r3
 800c478:	4611      	mov	r1, r2
 800c47a:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800c47c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800c480:	bf08      	it	eq
 800c482:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 800c486:	d00d      	beq.n	800c4a4 <z_impl_k_timer_start+0x48>
 800c488:	ea57 0c08 	orrs.w	ip, r7, r8
 800c48c:	d00a      	beq.n	800c4a4 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
 800c48e:	f06f 0c01 	mvn.w	ip, #1
 800c492:	ebbc 0c07 	subs.w	ip, ip, r7
 800c496:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c49a:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800c49e:	f1bc 0f00 	cmp.w	ip, #0
 800c4a2:	db18      	blt.n	800c4d6 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800c4a4:	f06f 0301 	mvn.w	r3, #1
 800c4a8:	1a5b      	subs	r3, r3, r1
 800c4aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4ae:	eb63 0300 	sbc.w	r3, r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	db1a      	blt.n	800c4ec <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f004 faf8 	bl	8010aac <z_abort_timeout>
	timer->period = period;
 800c4bc:	62af      	str	r7, [r5, #40]	; 0x28
 800c4be:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800c4c6:	4622      	mov	r2, r4
 800c4c8:	4633      	mov	r3, r6
 800c4ca:	490e      	ldr	r1, [pc, #56]	; (800c504 <z_impl_k_timer_start+0xa8>)
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	f7ff fe53 	bl	800c178 <z_add_timeout>
		     duration);
}
 800c4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 800c4d6:	2f02      	cmp	r7, #2
 800c4d8:	f178 0300 	sbcs.w	r3, r8, #0
 800c4dc:	da02      	bge.n	800c4e4 <z_impl_k_timer_start+0x88>
 800c4de:	2702      	movs	r7, #2
 800c4e0:	f04f 0800 	mov.w	r8, #0
 800c4e4:	3f01      	subs	r7, #1
 800c4e6:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
 800c4ea:	e7db      	b.n	800c4a4 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800c4ec:	460c      	mov	r4, r1
 800c4ee:	4606      	mov	r6, r0
 800c4f0:	2901      	cmp	r1, #1
 800c4f2:	f170 0300 	sbcs.w	r3, r0, #0
 800c4f6:	da01      	bge.n	800c4fc <z_impl_k_timer_start+0xa0>
 800c4f8:	2401      	movs	r4, #1
 800c4fa:	2600      	movs	r6, #0
 800c4fc:	3c01      	subs	r4, #1
 800c4fe:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
 800c502:	e7d8      	b.n	800c4b6 <z_impl_k_timer_start+0x5a>
 800c504:	0800c3c9 	.word	0x0800c3c9

0800c508 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	b087      	sub	sp, #28
 800c50e:	4682      	mov	sl, r0
 800c510:	460f      	mov	r7, r1
 800c512:	4693      	mov	fp, r2
 800c514:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 800c516:	2500      	movs	r5, #0
	int events_registered = 0;
 800c518:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
 800c51a:	e02f      	b.n	800c57c <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
 800c51c:	6923      	ldr	r3, [r4, #16]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	b1cb      	cbz	r3, 800c556 <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 800c522:	f04f 0902 	mov.w	r9, #2
			return true;
 800c526:	2301      	movs	r3, #1
 800c528:	e015      	b.n	800c556 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 800c52a:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	b193      	cbz	r3, 800c556 <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 800c530:	f04f 0904 	mov.w	r9, #4
			return true;
 800c534:	2301      	movs	r3, #1
 800c536:	e00e      	b.n	800c556 <register_events+0x4e>
		if (event->signal->signaled != 0U) {
 800c538:	6923      	ldr	r3, [r4, #16]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	b15b      	cbz	r3, 800c556 <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
 800c53e:	f04f 0901 	mov.w	r9, #1
			return true;
 800c542:	464b      	mov	r3, r9
 800c544:	e007      	b.n	800c556 <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
 800c546:	6923      	ldr	r3, [r4, #16]
 800c548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54a:	b123      	cbz	r3, 800c556 <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 800c54c:	f04f 0910 	mov.w	r9, #16
			return true;
 800c550:	2301      	movs	r3, #1
 800c552:	e000      	b.n	800c556 <register_events+0x4e>
	switch (event->type) {
 800c554:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
 800c556:	2b00      	cmp	r3, #0
 800c558:	d03a      	beq.n	800c5d0 <register_events+0xc8>
	event->poller = NULL;
 800c55a:	2100      	movs	r1, #0
 800c55c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 800c55e:	68e3      	ldr	r3, [r4, #12]
 800c560:	f3c3 3245 	ubfx	r2, r3, #13, #6
 800c564:	ea49 0202 	orr.w	r2, r9, r2
 800c568:	f362 3352 	bfi	r3, r2, #13, #6
 800c56c:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
 800c56e:	f88b 1000 	strb.w	r1, [fp]
 800c572:	f386 8811 	msr	BASEPRI, r6
 800c576:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 800c57a:	3501      	adds	r5, #1
 800c57c:	42bd      	cmp	r5, r7
 800c57e:	f280 81b9 	bge.w	800c8f4 <register_events+0x3ec>
	__asm__ volatile(
 800c582:	f04f 0310 	mov.w	r3, #16
 800c586:	f3ef 8611 	mrs	r6, BASEPRI
 800c58a:	f383 8812 	msr	BASEPRI_MAX, r3
 800c58e:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 800c592:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800c596:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800c59a:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
 800c59e:	7b63      	ldrb	r3, [r4, #13]
 800c5a0:	f003 031f 	and.w	r3, r3, #31
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	2b07      	cmp	r3, #7
 800c5a8:	d8d4      	bhi.n	800c554 <register_events+0x4c>
 800c5aa:	a201      	add	r2, pc, #4	; (adr r2, 800c5b0 <register_events+0xa8>)
 800c5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b0:	0800c539 	.word	0x0800c539
 800c5b4:	0800c51d 	.word	0x0800c51d
 800c5b8:	0800c555 	.word	0x0800c555
 800c5bc:	0800c52b 	.word	0x0800c52b
 800c5c0:	0800c555 	.word	0x0800c555
 800c5c4:	0800c555 	.word	0x0800c555
 800c5c8:	0800c555 	.word	0x0800c555
 800c5cc:	0800c547 	.word	0x0800c547
		} else if (!just_check && poller->is_polling) {
 800c5d0:	9b00      	ldr	r3, [sp, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1cd      	bne.n	800c572 <register_events+0x6a>
 800c5d6:	f89b 3000 	ldrb.w	r3, [fp]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d0c9      	beq.n	800c572 <register_events+0x6a>
	switch (event->type) {
 800c5de:	7b63      	ldrb	r3, [r4, #13]
 800c5e0:	f003 031f 	and.w	r3, r3, #31
 800c5e4:	3b01      	subs	r3, #1
 800c5e6:	2b07      	cmp	r3, #7
 800c5e8:	d848      	bhi.n	800c67c <register_events+0x174>
 800c5ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c5ee:	00cb      	.short	0x00cb
 800c5f0:	00470008 	.word	0x00470008
 800c5f4:	0047006d 	.word	0x0047006d
 800c5f8:	00470047 	.word	0x00470047
 800c5fc:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
 800c5fe:	6923      	ldr	r3, [r4, #16]
 800c600:	9304      	str	r3, [sp, #16]
 800c602:	f103 0210 	add.w	r2, r3, #16
 800c606:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800c608:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d02f      	beq.n	800c66e <register_events+0x166>
 800c60e:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800c610:	2b00      	cmp	r3, #0
 800c612:	d02c      	beq.n	800c66e <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800c614:	6898      	ldr	r0, [r3, #8]
 800c616:	f004 fac1 	bl	8010b9c <poller_thread>
 800c61a:	9005      	str	r0, [sp, #20]
 800c61c:	4658      	mov	r0, fp
 800c61e:	f004 fabd 	bl	8010b9c <poller_thread>
 800c622:	4601      	mov	r1, r0
 800c624:	9003      	str	r0, [sp, #12]
 800c626:	9805      	ldr	r0, [sp, #20]
 800c628:	f004 f88a 	bl	8010740 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800c62c:	2800      	cmp	r0, #0
 800c62e:	dc1e      	bgt.n	800c66e <register_events+0x166>
	return list->head == list;
 800c630:	9b04      	ldr	r3, [sp, #16]
 800c632:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c634:	9a02      	ldr	r2, [sp, #8]
 800c636:	429a      	cmp	r2, r3
 800c638:	d030      	beq.n	800c69c <register_events+0x194>
 800c63a:	9404      	str	r4, [sp, #16]
 800c63c:	9505      	str	r5, [sp, #20]
 800c63e:	9d02      	ldr	r5, [sp, #8]
 800c640:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c642:	2c00      	cmp	r4, #0
 800c644:	d030      	beq.n	800c6a8 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
 800c646:	68a0      	ldr	r0, [r4, #8]
 800c648:	f004 faa8 	bl	8010b9c <poller_thread>
 800c64c:	4601      	mov	r1, r0
 800c64e:	9803      	ldr	r0, [sp, #12]
 800c650:	f004 f876 	bl	8010740 <z_sched_prio_cmp>
 800c654:	2800      	cmp	r0, #0
 800c656:	dc17      	bgt.n	800c688 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c658:	2c00      	cmp	r4, #0
 800c65a:	d028      	beq.n	800c6ae <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
 800c65c:	686b      	ldr	r3, [r5, #4]
 800c65e:	429c      	cmp	r4, r3
 800c660:	d02f      	beq.n	800c6c2 <register_events+0x1ba>
 800c662:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c664:	2c00      	cmp	r4, #0
 800c666:	d1ec      	bne.n	800c642 <register_events+0x13a>
 800c668:	9c04      	ldr	r4, [sp, #16]
 800c66a:	9d05      	ldr	r5, [sp, #20]
 800c66c:	e021      	b.n	800c6b2 <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
 800c66e:	9a02      	ldr	r2, [sp, #8]
 800c670:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c672:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c676:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c678:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c67a:	6054      	str	r4, [r2, #4]
	event->poller = poller;
 800c67c:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
 800c680:	9b01      	ldr	r3, [sp, #4]
 800c682:	3301      	adds	r3, #1
 800c684:	9301      	str	r3, [sp, #4]
 800c686:	e774      	b.n	800c572 <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
 800c688:	9d05      	ldr	r5, [sp, #20]
 800c68a:	4622      	mov	r2, r4
 800c68c:	9c04      	ldr	r4, [sp, #16]
 800c68e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800c690:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c692:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800c696:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c698:	6054      	str	r4, [r2, #4]
			return;
 800c69a:	e7ef      	b.n	800c67c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c69c:	2300      	movs	r3, #0
 800c69e:	9404      	str	r4, [sp, #16]
 800c6a0:	9505      	str	r5, [sp, #20]
 800c6a2:	9d02      	ldr	r5, [sp, #8]
 800c6a4:	461c      	mov	r4, r3
 800c6a6:	e7cc      	b.n	800c642 <register_events+0x13a>
 800c6a8:	9c04      	ldr	r4, [sp, #16]
 800c6aa:	9d05      	ldr	r5, [sp, #20]
 800c6ac:	e001      	b.n	800c6b2 <register_events+0x1aa>
 800c6ae:	9c04      	ldr	r4, [sp, #16]
 800c6b0:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800c6b2:	9a02      	ldr	r2, [sp, #8]
 800c6b4:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c6b6:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c6ba:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c6bc:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c6be:	6054      	str	r4, [r2, #4]
}
 800c6c0:	e7dc      	b.n	800c67c <register_events+0x174>
 800c6c2:	9c04      	ldr	r4, [sp, #16]
 800c6c4:	9d05      	ldr	r5, [sp, #20]
 800c6c6:	e7f4      	b.n	800c6b2 <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
 800c6c8:	6923      	ldr	r3, [r4, #16]
 800c6ca:	9304      	str	r3, [sp, #16]
 800c6cc:	f103 0214 	add.w	r2, r3, #20
 800c6d0:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800c6d2:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d02d      	beq.n	800c734 <register_events+0x22c>
 800c6d8:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800c6da:	b35b      	cbz	r3, 800c734 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800c6dc:	6898      	ldr	r0, [r3, #8]
 800c6de:	f004 fa5d 	bl	8010b9c <poller_thread>
 800c6e2:	9005      	str	r0, [sp, #20]
 800c6e4:	4658      	mov	r0, fp
 800c6e6:	f004 fa59 	bl	8010b9c <poller_thread>
 800c6ea:	4601      	mov	r1, r0
 800c6ec:	9003      	str	r0, [sp, #12]
 800c6ee:	9805      	ldr	r0, [sp, #20]
 800c6f0:	f004 f826 	bl	8010740 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	dc1d      	bgt.n	800c734 <register_events+0x22c>
	return list->head == list;
 800c6f8:	9b04      	ldr	r3, [sp, #16]
 800c6fa:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c6fc:	9a02      	ldr	r2, [sp, #8]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d02a      	beq.n	800c758 <register_events+0x250>
 800c702:	9404      	str	r4, [sp, #16]
 800c704:	9505      	str	r5, [sp, #20]
 800c706:	9d02      	ldr	r5, [sp, #8]
 800c708:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c70a:	2c00      	cmp	r4, #0
 800c70c:	d02a      	beq.n	800c764 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
 800c70e:	68a0      	ldr	r0, [r4, #8]
 800c710:	f004 fa44 	bl	8010b9c <poller_thread>
 800c714:	4601      	mov	r1, r0
 800c716:	9803      	ldr	r0, [sp, #12]
 800c718:	f004 f812 	bl	8010740 <z_sched_prio_cmp>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	dc11      	bgt.n	800c744 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c720:	b31c      	cbz	r4, 800c76a <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
 800c722:	686b      	ldr	r3, [r5, #4]
 800c724:	429c      	cmp	r4, r3
 800c726:	d02a      	beq.n	800c77e <register_events+0x276>
 800c728:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c72a:	2c00      	cmp	r4, #0
 800c72c:	d1ed      	bne.n	800c70a <register_events+0x202>
 800c72e:	9c04      	ldr	r4, [sp, #16]
 800c730:	9d05      	ldr	r5, [sp, #20]
 800c732:	e01c      	b.n	800c76e <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
 800c734:	9a02      	ldr	r2, [sp, #8]
 800c736:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c738:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c73c:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c73e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c740:	6054      	str	r4, [r2, #4]
		return;
 800c742:	e79b      	b.n	800c67c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800c744:	9d05      	ldr	r5, [sp, #20]
 800c746:	4622      	mov	r2, r4
 800c748:	9c04      	ldr	r4, [sp, #16]
 800c74a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800c74c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c74e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800c752:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c754:	6054      	str	r4, [r2, #4]
			return;
 800c756:	e791      	b.n	800c67c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c758:	2300      	movs	r3, #0
 800c75a:	9404      	str	r4, [sp, #16]
 800c75c:	9505      	str	r5, [sp, #20]
 800c75e:	9d02      	ldr	r5, [sp, #8]
 800c760:	461c      	mov	r4, r3
 800c762:	e7d2      	b.n	800c70a <register_events+0x202>
 800c764:	9c04      	ldr	r4, [sp, #16]
 800c766:	9d05      	ldr	r5, [sp, #20]
 800c768:	e001      	b.n	800c76e <register_events+0x266>
 800c76a:	9c04      	ldr	r4, [sp, #16]
 800c76c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800c76e:	9a02      	ldr	r2, [sp, #8]
 800c770:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c772:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c776:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c778:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c77a:	6054      	str	r4, [r2, #4]
}
 800c77c:	e77e      	b.n	800c67c <register_events+0x174>
 800c77e:	9c04      	ldr	r4, [sp, #16]
 800c780:	9d05      	ldr	r5, [sp, #20]
 800c782:	e7f4      	b.n	800c76e <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
 800c784:	6922      	ldr	r2, [r4, #16]
 800c786:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800c788:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d02c      	beq.n	800c7e8 <register_events+0x2e0>
 800c78e:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800c790:	b353      	cbz	r3, 800c7e8 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800c792:	6898      	ldr	r0, [r3, #8]
 800c794:	f004 fa02 	bl	8010b9c <poller_thread>
 800c798:	9004      	str	r0, [sp, #16]
 800c79a:	4658      	mov	r0, fp
 800c79c:	f004 f9fe 	bl	8010b9c <poller_thread>
 800c7a0:	4601      	mov	r1, r0
 800c7a2:	9003      	str	r0, [sp, #12]
 800c7a4:	9804      	ldr	r0, [sp, #16]
 800c7a6:	f003 ffcb 	bl	8010740 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	dc1c      	bgt.n	800c7e8 <register_events+0x2e0>
	return list->head == list;
 800c7ae:	9b02      	ldr	r3, [sp, #8]
 800c7b0:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d02a      	beq.n	800c80c <register_events+0x304>
 800c7b6:	9404      	str	r4, [sp, #16]
 800c7b8:	9505      	str	r5, [sp, #20]
 800c7ba:	9d02      	ldr	r5, [sp, #8]
 800c7bc:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c7be:	2c00      	cmp	r4, #0
 800c7c0:	d02a      	beq.n	800c818 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
 800c7c2:	68a0      	ldr	r0, [r4, #8]
 800c7c4:	f004 f9ea 	bl	8010b9c <poller_thread>
 800c7c8:	4601      	mov	r1, r0
 800c7ca:	9803      	ldr	r0, [sp, #12]
 800c7cc:	f003 ffb8 	bl	8010740 <z_sched_prio_cmp>
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	dc11      	bgt.n	800c7f8 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c7d4:	b31c      	cbz	r4, 800c81e <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
 800c7d6:	686b      	ldr	r3, [r5, #4]
 800c7d8:	429c      	cmp	r4, r3
 800c7da:	d02a      	beq.n	800c832 <register_events+0x32a>
 800c7dc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c7de:	2c00      	cmp	r4, #0
 800c7e0:	d1ed      	bne.n	800c7be <register_events+0x2b6>
 800c7e2:	9c04      	ldr	r4, [sp, #16]
 800c7e4:	9d05      	ldr	r5, [sp, #20]
 800c7e6:	e01c      	b.n	800c822 <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
 800c7e8:	9a02      	ldr	r2, [sp, #8]
 800c7ea:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c7ec:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c7f0:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c7f2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c7f4:	6054      	str	r4, [r2, #4]
		return;
 800c7f6:	e741      	b.n	800c67c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800c7f8:	9d05      	ldr	r5, [sp, #20]
 800c7fa:	4622      	mov	r2, r4
 800c7fc:	9c04      	ldr	r4, [sp, #16]
 800c7fe:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800c800:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c802:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800c806:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c808:	6054      	str	r4, [r2, #4]
			return;
 800c80a:	e737      	b.n	800c67c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c80c:	2300      	movs	r3, #0
 800c80e:	9404      	str	r4, [sp, #16]
 800c810:	9505      	str	r5, [sp, #20]
 800c812:	9d02      	ldr	r5, [sp, #8]
 800c814:	461c      	mov	r4, r3
 800c816:	e7d2      	b.n	800c7be <register_events+0x2b6>
 800c818:	9c04      	ldr	r4, [sp, #16]
 800c81a:	9d05      	ldr	r5, [sp, #20]
 800c81c:	e001      	b.n	800c822 <register_events+0x31a>
 800c81e:	9c04      	ldr	r4, [sp, #16]
 800c820:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800c822:	9a02      	ldr	r2, [sp, #8]
 800c824:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c826:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c82a:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c82c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c82e:	6054      	str	r4, [r2, #4]
}
 800c830:	e724      	b.n	800c67c <register_events+0x174>
 800c832:	9c04      	ldr	r4, [sp, #16]
 800c834:	9d05      	ldr	r5, [sp, #20]
 800c836:	e7f4      	b.n	800c822 <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
 800c838:	6923      	ldr	r3, [r4, #16]
 800c83a:	9304      	str	r3, [sp, #16]
 800c83c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800c840:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800c842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800c844:	429a      	cmp	r2, r3
 800c846:	d02d      	beq.n	800c8a4 <register_events+0x39c>
 800c848:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800c84a:	b35b      	cbz	r3, 800c8a4 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800c84c:	6898      	ldr	r0, [r3, #8]
 800c84e:	f004 f9a5 	bl	8010b9c <poller_thread>
 800c852:	9005      	str	r0, [sp, #20]
 800c854:	4658      	mov	r0, fp
 800c856:	f004 f9a1 	bl	8010b9c <poller_thread>
 800c85a:	4601      	mov	r1, r0
 800c85c:	9003      	str	r0, [sp, #12]
 800c85e:	9805      	ldr	r0, [sp, #20]
 800c860:	f003 ff6e 	bl	8010740 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800c864:	2800      	cmp	r0, #0
 800c866:	dc1d      	bgt.n	800c8a4 <register_events+0x39c>
	return list->head == list;
 800c868:	9b04      	ldr	r3, [sp, #16]
 800c86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c86c:	9a02      	ldr	r2, [sp, #8]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d02a      	beq.n	800c8c8 <register_events+0x3c0>
 800c872:	9404      	str	r4, [sp, #16]
 800c874:	9505      	str	r5, [sp, #20]
 800c876:	9d02      	ldr	r5, [sp, #8]
 800c878:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c87a:	2c00      	cmp	r4, #0
 800c87c:	d02a      	beq.n	800c8d4 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
 800c87e:	68a0      	ldr	r0, [r4, #8]
 800c880:	f004 f98c 	bl	8010b9c <poller_thread>
 800c884:	4601      	mov	r1, r0
 800c886:	9803      	ldr	r0, [sp, #12]
 800c888:	f003 ff5a 	bl	8010740 <z_sched_prio_cmp>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	dc11      	bgt.n	800c8b4 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c890:	b31c      	cbz	r4, 800c8da <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
 800c892:	686b      	ldr	r3, [r5, #4]
 800c894:	429c      	cmp	r4, r3
 800c896:	d02a      	beq.n	800c8ee <register_events+0x3e6>
 800c898:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c89a:	2c00      	cmp	r4, #0
 800c89c:	d1ed      	bne.n	800c87a <register_events+0x372>
 800c89e:	9c04      	ldr	r4, [sp, #16]
 800c8a0:	9d05      	ldr	r5, [sp, #20]
 800c8a2:	e01c      	b.n	800c8de <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
 800c8a4:	9a02      	ldr	r2, [sp, #8]
 800c8a6:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c8a8:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c8ac:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c8ae:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c8b0:	6054      	str	r4, [r2, #4]
		return;
 800c8b2:	e6e3      	b.n	800c67c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800c8b4:	9d05      	ldr	r5, [sp, #20]
 800c8b6:	4622      	mov	r2, r4
 800c8b8:	9c04      	ldr	r4, [sp, #16]
 800c8ba:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800c8bc:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c8be:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800c8c2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c8c4:	6054      	str	r4, [r2, #4]
			return;
 800c8c6:	e6d9      	b.n	800c67c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	9404      	str	r4, [sp, #16]
 800c8cc:	9505      	str	r5, [sp, #20]
 800c8ce:	9d02      	ldr	r5, [sp, #8]
 800c8d0:	461c      	mov	r4, r3
 800c8d2:	e7d2      	b.n	800c87a <register_events+0x372>
 800c8d4:	9c04      	ldr	r4, [sp, #16]
 800c8d6:	9d05      	ldr	r5, [sp, #20]
 800c8d8:	e001      	b.n	800c8de <register_events+0x3d6>
 800c8da:	9c04      	ldr	r4, [sp, #16]
 800c8dc:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800c8de:	9a02      	ldr	r2, [sp, #8]
 800c8e0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c8e2:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c8e6:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c8e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c8ea:	6054      	str	r4, [r2, #4]
}
 800c8ec:	e6c6      	b.n	800c67c <register_events+0x174>
 800c8ee:	9c04      	ldr	r4, [sp, #16]
 800c8f0:	9d05      	ldr	r5, [sp, #20]
 800c8f2:	e7f4      	b.n	800c8de <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 800c8f4:	9801      	ldr	r0, [sp, #4]
 800c8f6:	b007      	add	sp, #28
 800c8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8fc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 800c8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c900:	b082      	sub	sp, #8
 800c902:	4605      	mov	r5, r0
 800c904:	4690      	mov	r8, r2
 800c906:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 800c908:	4b4f      	ldr	r3, [pc, #316]	; (800ca48 <z_impl_k_poll+0x14c>)
 800c90a:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
 800c90c:	2301      	movs	r3, #1
 800c90e:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
 800c912:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 800c916:	ea57 0302 	orrs.w	r3, r7, r2
 800c91a:	bf0c      	ite	eq
 800c91c:	2301      	moveq	r3, #1
 800c91e:	2300      	movne	r3, #0
 800c920:	f106 0260 	add.w	r2, r6, #96	; 0x60
 800c924:	f7ff fdf0 	bl	800c508 <register_events>
 800c928:	4604      	mov	r4, r0
 800c92a:	f04f 0310 	mov.w	r3, #16
 800c92e:	f3ef 8111 	mrs	r1, BASEPRI
 800c932:	f383 8812 	msr	BASEPRI_MAX, r3
 800c936:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 800c93a:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 800c93e:	b1b3      	cbz	r3, 800c96e <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
 800c940:	2300      	movs	r3, #0
 800c942:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800c946:	ea57 0308 	orrs.w	r3, r7, r8
 800c94a:	d043      	beq.n	800c9d4 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 800c94c:	f8cd 8000 	str.w	r8, [sp]
 800c950:	9701      	str	r7, [sp, #4]
 800c952:	4a3e      	ldr	r2, [pc, #248]	; (800ca4c <z_impl_k_poll+0x150>)
 800c954:	483e      	ldr	r0, [pc, #248]	; (800ca50 <z_impl_k_poll+0x154>)
 800c956:	f7ff f97f 	bl	800bc58 <z_pend_curr>
 800c95a:	f04f 0310 	mov.w	r3, #16
 800c95e:	f3ef 8611 	mrs	r6, BASEPRI
 800c962:	f383 8812 	msr	BASEPRI_MAX, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	46b4      	mov	ip, r6
	while (num_events--) {
 800c96c:	e04c      	b.n	800ca08 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
 800c96e:	460e      	mov	r6, r1
	while (num_events--) {
 800c970:	e00c      	b.n	800c98c <z_impl_k_poll+0x90>
	__asm__ volatile(
 800c972:	f386 8811 	msr	BASEPRI, r6
 800c976:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800c97a:	f04f 0310 	mov.w	r3, #16
 800c97e:	f3ef 8611 	mrs	r6, BASEPRI
 800c982:	f383 8812 	msr	BASEPRI_MAX, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	4604      	mov	r4, r0
 800c98c:	1e60      	subs	r0, r4, #1
 800c98e:	b1dc      	cbz	r4, 800c9c8 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
 800c990:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800c994:	009f      	lsls	r7, r3, #2
 800c996:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800c99a:	2200      	movs	r2, #0
 800c99c:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800c99e:	7b5a      	ldrb	r2, [r3, #13]
 800c9a0:	f002 021f 	and.w	r2, r2, #31
 800c9a4:	2a08      	cmp	r2, #8
 800c9a6:	d8e4      	bhi.n	800c972 <z_impl_k_poll+0x76>
 800c9a8:	2401      	movs	r4, #1
 800c9aa:	fa04 f202 	lsl.w	r2, r4, r2
 800c9ae:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800c9b2:	d0de      	beq.n	800c972 <z_impl_k_poll+0x76>
	return node->next != NULL;
 800c9b4:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800c9b6:	2a00      	cmp	r2, #0
 800c9b8:	d0db      	beq.n	800c972 <z_impl_k_poll+0x76>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800c9ba:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 800c9bc:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 800c9be:	6054      	str	r4, [r2, #4]
	node->next = NULL;
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
 800c9c4:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 800c9c6:	e7d4      	b.n	800c972 <z_impl_k_poll+0x76>
	__asm__ volatile(
 800c9c8:	f381 8811 	msr	BASEPRI, r1
 800c9cc:	f3bf 8f6f 	isb	sy
		return 0;
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	e036      	b.n	800ca42 <z_impl_k_poll+0x146>
 800c9d4:	f381 8811 	msr	BASEPRI, r1
 800c9d8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 800c9dc:	f06f 000a 	mvn.w	r0, #10
 800c9e0:	e02f      	b.n	800ca42 <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
 800c9e2:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
 800c9e4:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800c9e6:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
 800c9ec:	605a      	str	r2, [r3, #4]
 800c9ee:	f38c 8811 	msr	BASEPRI, ip
 800c9f2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800c9f6:	f04f 0310 	mov.w	r3, #16
 800c9fa:	f3ef 8c11 	mrs	ip, BASEPRI
 800c9fe:	f383 8812 	msr	BASEPRI_MAX, r3
 800ca02:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800ca06:	4674      	mov	r4, lr
 800ca08:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 800ca0c:	b1ac      	cbz	r4, 800ca3a <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
 800ca0e:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 800ca12:	009c      	lsls	r4, r3, #2
 800ca14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800ca18:	2200      	movs	r2, #0
 800ca1a:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800ca1c:	7b5a      	ldrb	r2, [r3, #13]
 800ca1e:	f002 021f 	and.w	r2, r2, #31
 800ca22:	2a08      	cmp	r2, #8
 800ca24:	d8e3      	bhi.n	800c9ee <z_impl_k_poll+0xf2>
 800ca26:	2101      	movs	r1, #1
 800ca28:	fa01 f202 	lsl.w	r2, r1, r2
 800ca2c:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800ca30:	d0dd      	beq.n	800c9ee <z_impl_k_poll+0xf2>
	return node->next != NULL;
 800ca32:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800ca34:	2a00      	cmp	r2, #0
 800ca36:	d1d4      	bne.n	800c9e2 <z_impl_k_poll+0xe6>
 800ca38:	e7d9      	b.n	800c9ee <z_impl_k_poll+0xf2>
	__asm__ volatile(
 800ca3a:	f386 8811 	msr	BASEPRI, r6
 800ca3e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 800ca42:	b002      	add	sp, #8
 800ca44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca48:	200013ac 	.word	0x200013ac
 800ca4c:	200003cc 	.word	0x200003cc
 800ca50:	200013f8 	.word	0x200013f8

0800ca54 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 800ca54:	b538      	push	{r3, r4, r5, lr}
 800ca56:	4603      	mov	r3, r0
	__asm__ volatile(
 800ca58:	f04f 0210 	mov.w	r2, #16
 800ca5c:	f3ef 8511 	mrs	r5, BASEPRI
 800ca60:	f382 8812 	msr	BASEPRI_MAX, r2
 800ca64:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 800ca68:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	6082      	str	r2, [r0, #8]
	return list->head == list;
 800ca6e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800ca70:	4283      	cmp	r3, r0
 800ca72:	d011      	beq.n	800ca98 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
 800ca74:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800ca76:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800ca78:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800ca7a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800ca80:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
 800ca82:	b148      	cbz	r0, 800ca98 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800ca84:	2101      	movs	r1, #1
 800ca86:	f004 f8d5 	bl	8010c34 <signal_poll_event>
 800ca8a:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 800ca8c:	4629      	mov	r1, r5
 800ca8e:	4805      	ldr	r0, [pc, #20]	; (800caa4 <z_impl_k_poll_signal_raise+0x50>)
 800ca90:	f7fe ff72 	bl	800b978 <z_reschedule>
	return rc;
}
 800ca94:	4620      	mov	r0, r4
 800ca96:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800ca98:	f385 8811 	msr	BASEPRI, r5
 800ca9c:	f3bf 8f6f 	isb	sy
		return 0;
 800caa0:	2400      	movs	r4, #0
 800caa2:	e7f7      	b.n	800ca94 <z_impl_k_poll_signal_raise+0x40>
 800caa4:	200013f8 	.word	0x200013f8

0800caa8 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 800caa8:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 800caaa:	4a03      	ldr	r2, [pc, #12]	; (800cab8 <boot_banner+0x10>)
 800caac:	4903      	ldr	r1, [pc, #12]	; (800cabc <boot_banner+0x14>)
 800caae:	4804      	ldr	r0, [pc, #16]	; (800cac0 <boot_banner+0x18>)
 800cab0:	f001 fe0a 	bl	800e6c8 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 800cab4:	bd08      	pop	{r3, pc}
 800cab6:	bf00      	nop
 800cab8:	08011be0 	.word	0x08011be0
 800cabc:	080133cc 	.word	0x080133cc
 800cac0:	080133ec 	.word	0x080133ec

0800cac4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800cac4:	b510      	push	{r4, lr}
 800cac6:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800cac8:	4b08      	ldr	r3, [pc, #32]	; (800caec <k_sys_work_q_init+0x28>)
 800caca:	9302      	str	r3, [sp, #8]
 800cacc:	2400      	movs	r4, #0
 800cace:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800cad2:	ab02      	add	r3, sp, #8
 800cad4:	9300      	str	r3, [sp, #0]
 800cad6:	4623      	mov	r3, r4
 800cad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cadc:	4904      	ldr	r1, [pc, #16]	; (800caf0 <k_sys_work_q_init+0x2c>)
 800cade:	4805      	ldr	r0, [pc, #20]	; (800caf4 <k_sys_work_q_init+0x30>)
 800cae0:	f7fe feb0 	bl	800b844 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800cae4:	4620      	mov	r0, r4
 800cae6:	b004      	add	sp, #16
 800cae8:	bd10      	pop	{r4, pc}
 800caea:	bf00      	nop
 800caec:	08013414 	.word	0x08013414
 800caf0:	20003500 	.word	0x20003500
 800caf4:	20000ce0 	.word	0x20000ce0

0800caf8 <malloc>:
 800caf8:	4b02      	ldr	r3, [pc, #8]	; (800cb04 <malloc+0xc>)
 800cafa:	4601      	mov	r1, r0
 800cafc:	6818      	ldr	r0, [r3, #0]
 800cafe:	f000 b84d 	b.w	800cb9c <_malloc_r>
 800cb02:	bf00      	nop
 800cb04:	200003d4 	.word	0x200003d4

0800cb08 <_free_r>:
 800cb08:	b538      	push	{r3, r4, r5, lr}
 800cb0a:	4605      	mov	r5, r0
 800cb0c:	2900      	cmp	r1, #0
 800cb0e:	d041      	beq.n	800cb94 <_free_r+0x8c>
 800cb10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb14:	1f0c      	subs	r4, r1, #4
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	bfb8      	it	lt
 800cb1a:	18e4      	addlt	r4, r4, r3
 800cb1c:	f000 fd06 	bl	800d52c <__malloc_lock>
 800cb20:	4a1d      	ldr	r2, [pc, #116]	; (800cb98 <_free_r+0x90>)
 800cb22:	6813      	ldr	r3, [r2, #0]
 800cb24:	b933      	cbnz	r3, 800cb34 <_free_r+0x2c>
 800cb26:	6063      	str	r3, [r4, #4]
 800cb28:	6014      	str	r4, [r2, #0]
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb30:	f000 bd02 	b.w	800d538 <__malloc_unlock>
 800cb34:	42a3      	cmp	r3, r4
 800cb36:	d908      	bls.n	800cb4a <_free_r+0x42>
 800cb38:	6820      	ldr	r0, [r4, #0]
 800cb3a:	1821      	adds	r1, r4, r0
 800cb3c:	428b      	cmp	r3, r1
 800cb3e:	bf01      	itttt	eq
 800cb40:	6819      	ldreq	r1, [r3, #0]
 800cb42:	685b      	ldreq	r3, [r3, #4]
 800cb44:	1809      	addeq	r1, r1, r0
 800cb46:	6021      	streq	r1, [r4, #0]
 800cb48:	e7ed      	b.n	800cb26 <_free_r+0x1e>
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	b10b      	cbz	r3, 800cb54 <_free_r+0x4c>
 800cb50:	42a3      	cmp	r3, r4
 800cb52:	d9fa      	bls.n	800cb4a <_free_r+0x42>
 800cb54:	6811      	ldr	r1, [r2, #0]
 800cb56:	1850      	adds	r0, r2, r1
 800cb58:	42a0      	cmp	r0, r4
 800cb5a:	d10b      	bne.n	800cb74 <_free_r+0x6c>
 800cb5c:	6820      	ldr	r0, [r4, #0]
 800cb5e:	4401      	add	r1, r0
 800cb60:	1850      	adds	r0, r2, r1
 800cb62:	4283      	cmp	r3, r0
 800cb64:	6011      	str	r1, [r2, #0]
 800cb66:	d1e0      	bne.n	800cb2a <_free_r+0x22>
 800cb68:	6818      	ldr	r0, [r3, #0]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	6053      	str	r3, [r2, #4]
 800cb6e:	4401      	add	r1, r0
 800cb70:	6011      	str	r1, [r2, #0]
 800cb72:	e7da      	b.n	800cb2a <_free_r+0x22>
 800cb74:	d902      	bls.n	800cb7c <_free_r+0x74>
 800cb76:	230c      	movs	r3, #12
 800cb78:	602b      	str	r3, [r5, #0]
 800cb7a:	e7d6      	b.n	800cb2a <_free_r+0x22>
 800cb7c:	6820      	ldr	r0, [r4, #0]
 800cb7e:	1821      	adds	r1, r4, r0
 800cb80:	428b      	cmp	r3, r1
 800cb82:	bf04      	itt	eq
 800cb84:	6819      	ldreq	r1, [r3, #0]
 800cb86:	685b      	ldreq	r3, [r3, #4]
 800cb88:	6063      	str	r3, [r4, #4]
 800cb8a:	bf04      	itt	eq
 800cb8c:	1809      	addeq	r1, r1, r0
 800cb8e:	6021      	streq	r1, [r4, #0]
 800cb90:	6054      	str	r4, [r2, #4]
 800cb92:	e7ca      	b.n	800cb2a <_free_r+0x22>
 800cb94:	bd38      	pop	{r3, r4, r5, pc}
 800cb96:	bf00      	nop
 800cb98:	200013fc 	.word	0x200013fc

0800cb9c <_malloc_r>:
 800cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9e:	1ccd      	adds	r5, r1, #3
 800cba0:	f025 0503 	bic.w	r5, r5, #3
 800cba4:	3508      	adds	r5, #8
 800cba6:	2d0c      	cmp	r5, #12
 800cba8:	bf38      	it	cc
 800cbaa:	250c      	movcc	r5, #12
 800cbac:	2d00      	cmp	r5, #0
 800cbae:	4606      	mov	r6, r0
 800cbb0:	db01      	blt.n	800cbb6 <_malloc_r+0x1a>
 800cbb2:	42a9      	cmp	r1, r5
 800cbb4:	d903      	bls.n	800cbbe <_malloc_r+0x22>
 800cbb6:	230c      	movs	r3, #12
 800cbb8:	6033      	str	r3, [r6, #0]
 800cbba:	2000      	movs	r0, #0
 800cbbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbbe:	f000 fcb5 	bl	800d52c <__malloc_lock>
 800cbc2:	4921      	ldr	r1, [pc, #132]	; (800cc48 <_malloc_r+0xac>)
 800cbc4:	680a      	ldr	r2, [r1, #0]
 800cbc6:	4614      	mov	r4, r2
 800cbc8:	b99c      	cbnz	r4, 800cbf2 <_malloc_r+0x56>
 800cbca:	4f20      	ldr	r7, [pc, #128]	; (800cc4c <_malloc_r+0xb0>)
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	b923      	cbnz	r3, 800cbda <_malloc_r+0x3e>
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	f000 fb8c 	bl	800d2f0 <_sbrk_r>
 800cbd8:	6038      	str	r0, [r7, #0]
 800cbda:	4629      	mov	r1, r5
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f000 fb87 	bl	800d2f0 <_sbrk_r>
 800cbe2:	1c43      	adds	r3, r0, #1
 800cbe4:	d123      	bne.n	800cc2e <_malloc_r+0x92>
 800cbe6:	230c      	movs	r3, #12
 800cbe8:	6033      	str	r3, [r6, #0]
 800cbea:	4630      	mov	r0, r6
 800cbec:	f000 fca4 	bl	800d538 <__malloc_unlock>
 800cbf0:	e7e3      	b.n	800cbba <_malloc_r+0x1e>
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	1b5b      	subs	r3, r3, r5
 800cbf6:	d417      	bmi.n	800cc28 <_malloc_r+0x8c>
 800cbf8:	2b0b      	cmp	r3, #11
 800cbfa:	d903      	bls.n	800cc04 <_malloc_r+0x68>
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	441c      	add	r4, r3
 800cc00:	6025      	str	r5, [r4, #0]
 800cc02:	e004      	b.n	800cc0e <_malloc_r+0x72>
 800cc04:	6863      	ldr	r3, [r4, #4]
 800cc06:	42a2      	cmp	r2, r4
 800cc08:	bf0c      	ite	eq
 800cc0a:	600b      	streq	r3, [r1, #0]
 800cc0c:	6053      	strne	r3, [r2, #4]
 800cc0e:	4630      	mov	r0, r6
 800cc10:	f000 fc92 	bl	800d538 <__malloc_unlock>
 800cc14:	f104 000b 	add.w	r0, r4, #11
 800cc18:	1d23      	adds	r3, r4, #4
 800cc1a:	f020 0007 	bic.w	r0, r0, #7
 800cc1e:	1ac2      	subs	r2, r0, r3
 800cc20:	d0cc      	beq.n	800cbbc <_malloc_r+0x20>
 800cc22:	1a1b      	subs	r3, r3, r0
 800cc24:	50a3      	str	r3, [r4, r2]
 800cc26:	e7c9      	b.n	800cbbc <_malloc_r+0x20>
 800cc28:	4622      	mov	r2, r4
 800cc2a:	6864      	ldr	r4, [r4, #4]
 800cc2c:	e7cc      	b.n	800cbc8 <_malloc_r+0x2c>
 800cc2e:	1cc4      	adds	r4, r0, #3
 800cc30:	f024 0403 	bic.w	r4, r4, #3
 800cc34:	42a0      	cmp	r0, r4
 800cc36:	d0e3      	beq.n	800cc00 <_malloc_r+0x64>
 800cc38:	1a21      	subs	r1, r4, r0
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	f000 fb58 	bl	800d2f0 <_sbrk_r>
 800cc40:	3001      	adds	r0, #1
 800cc42:	d1dd      	bne.n	800cc00 <_malloc_r+0x64>
 800cc44:	e7cf      	b.n	800cbe6 <_malloc_r+0x4a>
 800cc46:	bf00      	nop
 800cc48:	200013fc 	.word	0x200013fc
 800cc4c:	20001400 	.word	0x20001400

0800cc50 <_printf_float>:
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	b091      	sub	sp, #68	; 0x44
 800cc56:	460c      	mov	r4, r1
 800cc58:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800cc5c:	4616      	mov	r6, r2
 800cc5e:	461f      	mov	r7, r3
 800cc60:	4605      	mov	r5, r0
 800cc62:	f000 fc5f 	bl	800d524 <_localeconv_r>
 800cc66:	6803      	ldr	r3, [r0, #0]
 800cc68:	9309      	str	r3, [sp, #36]	; 0x24
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7f4 f8f3 	bl	8000e56 <strlen>
 800cc70:	2300      	movs	r3, #0
 800cc72:	930e      	str	r3, [sp, #56]	; 0x38
 800cc74:	f8d8 3000 	ldr.w	r3, [r8]
 800cc78:	900a      	str	r0, [sp, #40]	; 0x28
 800cc7a:	3307      	adds	r3, #7
 800cc7c:	f023 0307 	bic.w	r3, r3, #7
 800cc80:	f103 0208 	add.w	r2, r3, #8
 800cc84:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cc88:	f8d4 b000 	ldr.w	fp, [r4]
 800cc8c:	f8c8 2000 	str.w	r2, [r8]
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cc98:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800cc9c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800cca0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cca4:	4b9c      	ldr	r3, [pc, #624]	; (800cf18 <_printf_float+0x2c8>)
 800cca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccaa:	4640      	mov	r0, r8
 800ccac:	f7f3 ff38 	bl	8000b20 <__aeabi_dcmpun>
 800ccb0:	bb70      	cbnz	r0, 800cd10 <_printf_float+0xc0>
 800ccb2:	4b99      	ldr	r3, [pc, #612]	; (800cf18 <_printf_float+0x2c8>)
 800ccb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccba:	4640      	mov	r0, r8
 800ccbc:	f7f3 ff12 	bl	8000ae4 <__aeabi_dcmple>
 800ccc0:	bb30      	cbnz	r0, 800cd10 <_printf_float+0xc0>
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	4640      	mov	r0, r8
 800ccc8:	4651      	mov	r1, sl
 800ccca:	f7f3 ff01 	bl	8000ad0 <__aeabi_dcmplt>
 800ccce:	b110      	cbz	r0, 800ccd6 <_printf_float+0x86>
 800ccd0:	232d      	movs	r3, #45	; 0x2d
 800ccd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccd6:	4b91      	ldr	r3, [pc, #580]	; (800cf1c <_printf_float+0x2cc>)
 800ccd8:	4891      	ldr	r0, [pc, #580]	; (800cf20 <_printf_float+0x2d0>)
 800ccda:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ccde:	bf94      	ite	ls
 800cce0:	4698      	movls	r8, r3
 800cce2:	4680      	movhi	r8, r0
 800cce4:	2303      	movs	r3, #3
 800cce6:	6123      	str	r3, [r4, #16]
 800cce8:	f02b 0304 	bic.w	r3, fp, #4
 800ccec:	6023      	str	r3, [r4, #0]
 800ccee:	f04f 0a00 	mov.w	sl, #0
 800ccf2:	9700      	str	r7, [sp, #0]
 800ccf4:	4633      	mov	r3, r6
 800ccf6:	aa0f      	add	r2, sp, #60	; 0x3c
 800ccf8:	4621      	mov	r1, r4
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	f004 f899 	bl	8010e32 <_printf_common>
 800cd00:	3001      	adds	r0, #1
 800cd02:	f040 808f 	bne.w	800ce24 <_printf_float+0x1d4>
 800cd06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd0a:	b011      	add	sp, #68	; 0x44
 800cd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd10:	4642      	mov	r2, r8
 800cd12:	4653      	mov	r3, sl
 800cd14:	4640      	mov	r0, r8
 800cd16:	4651      	mov	r1, sl
 800cd18:	f7f3 ff02 	bl	8000b20 <__aeabi_dcmpun>
 800cd1c:	b140      	cbz	r0, 800cd30 <_printf_float+0xe0>
 800cd1e:	f1ba 0f00 	cmp.w	sl, #0
 800cd22:	bfbc      	itt	lt
 800cd24:	232d      	movlt	r3, #45	; 0x2d
 800cd26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cd2a:	487e      	ldr	r0, [pc, #504]	; (800cf24 <_printf_float+0x2d4>)
 800cd2c:	4b7e      	ldr	r3, [pc, #504]	; (800cf28 <_printf_float+0x2d8>)
 800cd2e:	e7d4      	b.n	800ccda <_printf_float+0x8a>
 800cd30:	6863      	ldr	r3, [r4, #4]
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cd38:	d142      	bne.n	800cdc0 <_printf_float+0x170>
 800cd3a:	2306      	movs	r3, #6
 800cd3c:	6063      	str	r3, [r4, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	9206      	str	r2, [sp, #24]
 800cd42:	aa0e      	add	r2, sp, #56	; 0x38
 800cd44:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800cd48:	aa0d      	add	r2, sp, #52	; 0x34
 800cd4a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800cd4e:	9203      	str	r2, [sp, #12]
 800cd50:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800cd54:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	6863      	ldr	r3, [r4, #4]
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	4642      	mov	r2, r8
 800cd60:	4653      	mov	r3, sl
 800cd62:	4628      	mov	r0, r5
 800cd64:	910b      	str	r1, [sp, #44]	; 0x2c
 800cd66:	f003 ffc6 	bl	8010cf6 <__cvt>
 800cd6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd6c:	2947      	cmp	r1, #71	; 0x47
 800cd6e:	4680      	mov	r8, r0
 800cd70:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cd72:	d108      	bne.n	800cd86 <_printf_float+0x136>
 800cd74:	1cc8      	adds	r0, r1, #3
 800cd76:	db02      	blt.n	800cd7e <_printf_float+0x12e>
 800cd78:	6863      	ldr	r3, [r4, #4]
 800cd7a:	4299      	cmp	r1, r3
 800cd7c:	dd40      	ble.n	800ce00 <_printf_float+0x1b0>
 800cd7e:	f1a9 0902 	sub.w	r9, r9, #2
 800cd82:	fa5f f989 	uxtb.w	r9, r9
 800cd86:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cd8a:	d81f      	bhi.n	800cdcc <_printf_float+0x17c>
 800cd8c:	3901      	subs	r1, #1
 800cd8e:	464a      	mov	r2, r9
 800cd90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd94:	910d      	str	r1, [sp, #52]	; 0x34
 800cd96:	f004 f80e 	bl	8010db6 <__exponent>
 800cd9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd9c:	1813      	adds	r3, r2, r0
 800cd9e:	2a01      	cmp	r2, #1
 800cda0:	4682      	mov	sl, r0
 800cda2:	6123      	str	r3, [r4, #16]
 800cda4:	dc02      	bgt.n	800cdac <_printf_float+0x15c>
 800cda6:	6822      	ldr	r2, [r4, #0]
 800cda8:	07d2      	lsls	r2, r2, #31
 800cdaa:	d501      	bpl.n	800cdb0 <_printf_float+0x160>
 800cdac:	3301      	adds	r3, #1
 800cdae:	6123      	str	r3, [r4, #16]
 800cdb0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d09c      	beq.n	800ccf2 <_printf_float+0xa2>
 800cdb8:	232d      	movs	r3, #45	; 0x2d
 800cdba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdbe:	e798      	b.n	800ccf2 <_printf_float+0xa2>
 800cdc0:	2947      	cmp	r1, #71	; 0x47
 800cdc2:	d1bc      	bne.n	800cd3e <_printf_float+0xee>
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d1ba      	bne.n	800cd3e <_printf_float+0xee>
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e7b7      	b.n	800cd3c <_printf_float+0xec>
 800cdcc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cdd0:	d118      	bne.n	800ce04 <_printf_float+0x1b4>
 800cdd2:	2900      	cmp	r1, #0
 800cdd4:	6863      	ldr	r3, [r4, #4]
 800cdd6:	dd0b      	ble.n	800cdf0 <_printf_float+0x1a0>
 800cdd8:	6121      	str	r1, [r4, #16]
 800cdda:	b913      	cbnz	r3, 800cde2 <_printf_float+0x192>
 800cddc:	6822      	ldr	r2, [r4, #0]
 800cdde:	07d0      	lsls	r0, r2, #31
 800cde0:	d502      	bpl.n	800cde8 <_printf_float+0x198>
 800cde2:	3301      	adds	r3, #1
 800cde4:	440b      	add	r3, r1
 800cde6:	6123      	str	r3, [r4, #16]
 800cde8:	65a1      	str	r1, [r4, #88]	; 0x58
 800cdea:	f04f 0a00 	mov.w	sl, #0
 800cdee:	e7df      	b.n	800cdb0 <_printf_float+0x160>
 800cdf0:	b913      	cbnz	r3, 800cdf8 <_printf_float+0x1a8>
 800cdf2:	6822      	ldr	r2, [r4, #0]
 800cdf4:	07d2      	lsls	r2, r2, #31
 800cdf6:	d501      	bpl.n	800cdfc <_printf_float+0x1ac>
 800cdf8:	3302      	adds	r3, #2
 800cdfa:	e7f4      	b.n	800cde6 <_printf_float+0x196>
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e7f2      	b.n	800cde6 <_printf_float+0x196>
 800ce00:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ce04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce06:	4299      	cmp	r1, r3
 800ce08:	db05      	blt.n	800ce16 <_printf_float+0x1c6>
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	6121      	str	r1, [r4, #16]
 800ce0e:	07d8      	lsls	r0, r3, #31
 800ce10:	d5ea      	bpl.n	800cde8 <_printf_float+0x198>
 800ce12:	1c4b      	adds	r3, r1, #1
 800ce14:	e7e7      	b.n	800cde6 <_printf_float+0x196>
 800ce16:	2900      	cmp	r1, #0
 800ce18:	bfd4      	ite	le
 800ce1a:	f1c1 0202 	rsble	r2, r1, #2
 800ce1e:	2201      	movgt	r2, #1
 800ce20:	4413      	add	r3, r2
 800ce22:	e7e0      	b.n	800cde6 <_printf_float+0x196>
 800ce24:	6823      	ldr	r3, [r4, #0]
 800ce26:	055a      	lsls	r2, r3, #21
 800ce28:	d407      	bmi.n	800ce3a <_printf_float+0x1ea>
 800ce2a:	6923      	ldr	r3, [r4, #16]
 800ce2c:	4642      	mov	r2, r8
 800ce2e:	4631      	mov	r1, r6
 800ce30:	4628      	mov	r0, r5
 800ce32:	47b8      	blx	r7
 800ce34:	3001      	adds	r0, #1
 800ce36:	d12b      	bne.n	800ce90 <_printf_float+0x240>
 800ce38:	e765      	b.n	800cd06 <_printf_float+0xb6>
 800ce3a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ce3e:	f240 80dc 	bls.w	800cffa <_printf_float+0x3aa>
 800ce42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce46:	2200      	movs	r2, #0
 800ce48:	2300      	movs	r3, #0
 800ce4a:	f7f3 fe37 	bl	8000abc <__aeabi_dcmpeq>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	d033      	beq.n	800ceba <_printf_float+0x26a>
 800ce52:	4a36      	ldr	r2, [pc, #216]	; (800cf2c <_printf_float+0x2dc>)
 800ce54:	2301      	movs	r3, #1
 800ce56:	4631      	mov	r1, r6
 800ce58:	4628      	mov	r0, r5
 800ce5a:	47b8      	blx	r7
 800ce5c:	3001      	adds	r0, #1
 800ce5e:	f43f af52 	beq.w	800cd06 <_printf_float+0xb6>
 800ce62:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ce66:	429a      	cmp	r2, r3
 800ce68:	db02      	blt.n	800ce70 <_printf_float+0x220>
 800ce6a:	6823      	ldr	r3, [r4, #0]
 800ce6c:	07d8      	lsls	r0, r3, #31
 800ce6e:	d50f      	bpl.n	800ce90 <_printf_float+0x240>
 800ce70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce74:	4631      	mov	r1, r6
 800ce76:	4628      	mov	r0, r5
 800ce78:	47b8      	blx	r7
 800ce7a:	3001      	adds	r0, #1
 800ce7c:	f43f af43 	beq.w	800cd06 <_printf_float+0xb6>
 800ce80:	f04f 0800 	mov.w	r8, #0
 800ce84:	f104 091a 	add.w	r9, r4, #26
 800ce88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce8a:	3b01      	subs	r3, #1
 800ce8c:	4543      	cmp	r3, r8
 800ce8e:	dc09      	bgt.n	800cea4 <_printf_float+0x254>
 800ce90:	6823      	ldr	r3, [r4, #0]
 800ce92:	079b      	lsls	r3, r3, #30
 800ce94:	f100 8101 	bmi.w	800d09a <_printf_float+0x44a>
 800ce98:	68e0      	ldr	r0, [r4, #12]
 800ce9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce9c:	4298      	cmp	r0, r3
 800ce9e:	bfb8      	it	lt
 800cea0:	4618      	movlt	r0, r3
 800cea2:	e732      	b.n	800cd0a <_printf_float+0xba>
 800cea4:	2301      	movs	r3, #1
 800cea6:	464a      	mov	r2, r9
 800cea8:	4631      	mov	r1, r6
 800ceaa:	4628      	mov	r0, r5
 800ceac:	47b8      	blx	r7
 800ceae:	3001      	adds	r0, #1
 800ceb0:	f43f af29 	beq.w	800cd06 <_printf_float+0xb6>
 800ceb4:	f108 0801 	add.w	r8, r8, #1
 800ceb8:	e7e6      	b.n	800ce88 <_printf_float+0x238>
 800ceba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	dc37      	bgt.n	800cf30 <_printf_float+0x2e0>
 800cec0:	4a1a      	ldr	r2, [pc, #104]	; (800cf2c <_printf_float+0x2dc>)
 800cec2:	2301      	movs	r3, #1
 800cec4:	4631      	mov	r1, r6
 800cec6:	4628      	mov	r0, r5
 800cec8:	47b8      	blx	r7
 800ceca:	3001      	adds	r0, #1
 800cecc:	f43f af1b 	beq.w	800cd06 <_printf_float+0xb6>
 800ced0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ced4:	4313      	orrs	r3, r2
 800ced6:	d102      	bne.n	800cede <_printf_float+0x28e>
 800ced8:	6823      	ldr	r3, [r4, #0]
 800ceda:	07d9      	lsls	r1, r3, #31
 800cedc:	d5d8      	bpl.n	800ce90 <_printf_float+0x240>
 800cede:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cee2:	4631      	mov	r1, r6
 800cee4:	4628      	mov	r0, r5
 800cee6:	47b8      	blx	r7
 800cee8:	3001      	adds	r0, #1
 800ceea:	f43f af0c 	beq.w	800cd06 <_printf_float+0xb6>
 800ceee:	f04f 0900 	mov.w	r9, #0
 800cef2:	f104 0a1a 	add.w	sl, r4, #26
 800cef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cef8:	425b      	negs	r3, r3
 800cefa:	454b      	cmp	r3, r9
 800cefc:	dc01      	bgt.n	800cf02 <_printf_float+0x2b2>
 800cefe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf00:	e794      	b.n	800ce2c <_printf_float+0x1dc>
 800cf02:	2301      	movs	r3, #1
 800cf04:	4652      	mov	r2, sl
 800cf06:	4631      	mov	r1, r6
 800cf08:	4628      	mov	r0, r5
 800cf0a:	47b8      	blx	r7
 800cf0c:	3001      	adds	r0, #1
 800cf0e:	f43f aefa 	beq.w	800cd06 <_printf_float+0xb6>
 800cf12:	f109 0901 	add.w	r9, r9, #1
 800cf16:	e7ee      	b.n	800cef6 <_printf_float+0x2a6>
 800cf18:	7fefffff 	.word	0x7fefffff
 800cf1c:	08013591 	.word	0x08013591
 800cf20:	08013595 	.word	0x08013595
 800cf24:	0801359d 	.word	0x0801359d
 800cf28:	08013599 	.word	0x08013599
 800cf2c:	080135a1 	.word	0x080135a1
 800cf30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf34:	429a      	cmp	r2, r3
 800cf36:	bfa8      	it	ge
 800cf38:	461a      	movge	r2, r3
 800cf3a:	2a00      	cmp	r2, #0
 800cf3c:	4691      	mov	r9, r2
 800cf3e:	dc37      	bgt.n	800cfb0 <_printf_float+0x360>
 800cf40:	f04f 0b00 	mov.w	fp, #0
 800cf44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf48:	f104 021a 	add.w	r2, r4, #26
 800cf4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800cf50:	ebaa 0309 	sub.w	r3, sl, r9
 800cf54:	455b      	cmp	r3, fp
 800cf56:	dc33      	bgt.n	800cfc0 <_printf_float+0x370>
 800cf58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	db3b      	blt.n	800cfd8 <_printf_float+0x388>
 800cf60:	6823      	ldr	r3, [r4, #0]
 800cf62:	07da      	lsls	r2, r3, #31
 800cf64:	d438      	bmi.n	800cfd8 <_printf_float+0x388>
 800cf66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf68:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cf6a:	eba3 020a 	sub.w	r2, r3, sl
 800cf6e:	eba3 0901 	sub.w	r9, r3, r1
 800cf72:	4591      	cmp	r9, r2
 800cf74:	bfa8      	it	ge
 800cf76:	4691      	movge	r9, r2
 800cf78:	f1b9 0f00 	cmp.w	r9, #0
 800cf7c:	dc34      	bgt.n	800cfe8 <_printf_float+0x398>
 800cf7e:	f04f 0800 	mov.w	r8, #0
 800cf82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf86:	f104 0a1a 	add.w	sl, r4, #26
 800cf8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800cf8e:	1a9b      	subs	r3, r3, r2
 800cf90:	eba3 0309 	sub.w	r3, r3, r9
 800cf94:	4543      	cmp	r3, r8
 800cf96:	f77f af7b 	ble.w	800ce90 <_printf_float+0x240>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	4652      	mov	r2, sl
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	47b8      	blx	r7
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	f43f aeae 	beq.w	800cd06 <_printf_float+0xb6>
 800cfaa:	f108 0801 	add.w	r8, r8, #1
 800cfae:	e7ec      	b.n	800cf8a <_printf_float+0x33a>
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	4631      	mov	r1, r6
 800cfb4:	4642      	mov	r2, r8
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	47b8      	blx	r7
 800cfba:	3001      	adds	r0, #1
 800cfbc:	d1c0      	bne.n	800cf40 <_printf_float+0x2f0>
 800cfbe:	e6a2      	b.n	800cd06 <_printf_float+0xb6>
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	920b      	str	r2, [sp, #44]	; 0x2c
 800cfc8:	47b8      	blx	r7
 800cfca:	3001      	adds	r0, #1
 800cfcc:	f43f ae9b 	beq.w	800cd06 <_printf_float+0xb6>
 800cfd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cfd2:	f10b 0b01 	add.w	fp, fp, #1
 800cfd6:	e7b9      	b.n	800cf4c <_printf_float+0x2fc>
 800cfd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfdc:	4631      	mov	r1, r6
 800cfde:	4628      	mov	r0, r5
 800cfe0:	47b8      	blx	r7
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	d1bf      	bne.n	800cf66 <_printf_float+0x316>
 800cfe6:	e68e      	b.n	800cd06 <_printf_float+0xb6>
 800cfe8:	464b      	mov	r3, r9
 800cfea:	eb08 020a 	add.w	r2, r8, sl
 800cfee:	4631      	mov	r1, r6
 800cff0:	4628      	mov	r0, r5
 800cff2:	47b8      	blx	r7
 800cff4:	3001      	adds	r0, #1
 800cff6:	d1c2      	bne.n	800cf7e <_printf_float+0x32e>
 800cff8:	e685      	b.n	800cd06 <_printf_float+0xb6>
 800cffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cffc:	2a01      	cmp	r2, #1
 800cffe:	dc01      	bgt.n	800d004 <_printf_float+0x3b4>
 800d000:	07db      	lsls	r3, r3, #31
 800d002:	d537      	bpl.n	800d074 <_printf_float+0x424>
 800d004:	2301      	movs	r3, #1
 800d006:	4642      	mov	r2, r8
 800d008:	4631      	mov	r1, r6
 800d00a:	4628      	mov	r0, r5
 800d00c:	47b8      	blx	r7
 800d00e:	3001      	adds	r0, #1
 800d010:	f43f ae79 	beq.w	800cd06 <_printf_float+0xb6>
 800d014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d018:	4631      	mov	r1, r6
 800d01a:	4628      	mov	r0, r5
 800d01c:	47b8      	blx	r7
 800d01e:	3001      	adds	r0, #1
 800d020:	f43f ae71 	beq.w	800cd06 <_printf_float+0xb6>
 800d024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d028:	2200      	movs	r2, #0
 800d02a:	2300      	movs	r3, #0
 800d02c:	f7f3 fd46 	bl	8000abc <__aeabi_dcmpeq>
 800d030:	b9d8      	cbnz	r0, 800d06a <_printf_float+0x41a>
 800d032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d034:	f108 0201 	add.w	r2, r8, #1
 800d038:	3b01      	subs	r3, #1
 800d03a:	4631      	mov	r1, r6
 800d03c:	4628      	mov	r0, r5
 800d03e:	47b8      	blx	r7
 800d040:	3001      	adds	r0, #1
 800d042:	d10e      	bne.n	800d062 <_printf_float+0x412>
 800d044:	e65f      	b.n	800cd06 <_printf_float+0xb6>
 800d046:	2301      	movs	r3, #1
 800d048:	464a      	mov	r2, r9
 800d04a:	4631      	mov	r1, r6
 800d04c:	4628      	mov	r0, r5
 800d04e:	47b8      	blx	r7
 800d050:	3001      	adds	r0, #1
 800d052:	f43f ae58 	beq.w	800cd06 <_printf_float+0xb6>
 800d056:	f108 0801 	add.w	r8, r8, #1
 800d05a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d05c:	3b01      	subs	r3, #1
 800d05e:	4543      	cmp	r3, r8
 800d060:	dcf1      	bgt.n	800d046 <_printf_float+0x3f6>
 800d062:	4653      	mov	r3, sl
 800d064:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d068:	e6e1      	b.n	800ce2e <_printf_float+0x1de>
 800d06a:	f04f 0800 	mov.w	r8, #0
 800d06e:	f104 091a 	add.w	r9, r4, #26
 800d072:	e7f2      	b.n	800d05a <_printf_float+0x40a>
 800d074:	2301      	movs	r3, #1
 800d076:	4642      	mov	r2, r8
 800d078:	e7df      	b.n	800d03a <_printf_float+0x3ea>
 800d07a:	2301      	movs	r3, #1
 800d07c:	464a      	mov	r2, r9
 800d07e:	4631      	mov	r1, r6
 800d080:	4628      	mov	r0, r5
 800d082:	47b8      	blx	r7
 800d084:	3001      	adds	r0, #1
 800d086:	f43f ae3e 	beq.w	800cd06 <_printf_float+0xb6>
 800d08a:	f108 0801 	add.w	r8, r8, #1
 800d08e:	68e3      	ldr	r3, [r4, #12]
 800d090:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d092:	1a5b      	subs	r3, r3, r1
 800d094:	4543      	cmp	r3, r8
 800d096:	dcf0      	bgt.n	800d07a <_printf_float+0x42a>
 800d098:	e6fe      	b.n	800ce98 <_printf_float+0x248>
 800d09a:	f04f 0800 	mov.w	r8, #0
 800d09e:	f104 0919 	add.w	r9, r4, #25
 800d0a2:	e7f4      	b.n	800d08e <_printf_float+0x43e>

0800d0a4 <_printf_i>:
 800d0a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a8:	7e0f      	ldrb	r7, [r1, #24]
 800d0aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0ac:	2f78      	cmp	r7, #120	; 0x78
 800d0ae:	4691      	mov	r9, r2
 800d0b0:	4680      	mov	r8, r0
 800d0b2:	460c      	mov	r4, r1
 800d0b4:	469a      	mov	sl, r3
 800d0b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d0ba:	d807      	bhi.n	800d0cc <_printf_i+0x28>
 800d0bc:	2f62      	cmp	r7, #98	; 0x62
 800d0be:	d80a      	bhi.n	800d0d6 <_printf_i+0x32>
 800d0c0:	2f00      	cmp	r7, #0
 800d0c2:	f000 80d8 	beq.w	800d276 <_printf_i+0x1d2>
 800d0c6:	2f58      	cmp	r7, #88	; 0x58
 800d0c8:	f000 80a3 	beq.w	800d212 <_printf_i+0x16e>
 800d0cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0d4:	e03a      	b.n	800d14c <_printf_i+0xa8>
 800d0d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0da:	2b15      	cmp	r3, #21
 800d0dc:	d8f6      	bhi.n	800d0cc <_printf_i+0x28>
 800d0de:	a101      	add	r1, pc, #4	; (adr r1, 800d0e4 <_printf_i+0x40>)
 800d0e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0e4:	0800d13d 	.word	0x0800d13d
 800d0e8:	0800d151 	.word	0x0800d151
 800d0ec:	0800d0cd 	.word	0x0800d0cd
 800d0f0:	0800d0cd 	.word	0x0800d0cd
 800d0f4:	0800d0cd 	.word	0x0800d0cd
 800d0f8:	0800d0cd 	.word	0x0800d0cd
 800d0fc:	0800d151 	.word	0x0800d151
 800d100:	0800d0cd 	.word	0x0800d0cd
 800d104:	0800d0cd 	.word	0x0800d0cd
 800d108:	0800d0cd 	.word	0x0800d0cd
 800d10c:	0800d0cd 	.word	0x0800d0cd
 800d110:	0800d25d 	.word	0x0800d25d
 800d114:	0800d181 	.word	0x0800d181
 800d118:	0800d23f 	.word	0x0800d23f
 800d11c:	0800d0cd 	.word	0x0800d0cd
 800d120:	0800d0cd 	.word	0x0800d0cd
 800d124:	0800d27f 	.word	0x0800d27f
 800d128:	0800d0cd 	.word	0x0800d0cd
 800d12c:	0800d181 	.word	0x0800d181
 800d130:	0800d0cd 	.word	0x0800d0cd
 800d134:	0800d0cd 	.word	0x0800d0cd
 800d138:	0800d247 	.word	0x0800d247
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	1d1a      	adds	r2, r3, #4
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	602a      	str	r2, [r5, #0]
 800d144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d14c:	2301      	movs	r3, #1
 800d14e:	e0a3      	b.n	800d298 <_printf_i+0x1f4>
 800d150:	6820      	ldr	r0, [r4, #0]
 800d152:	6829      	ldr	r1, [r5, #0]
 800d154:	0606      	lsls	r6, r0, #24
 800d156:	f101 0304 	add.w	r3, r1, #4
 800d15a:	d50a      	bpl.n	800d172 <_printf_i+0xce>
 800d15c:	680e      	ldr	r6, [r1, #0]
 800d15e:	602b      	str	r3, [r5, #0]
 800d160:	2e00      	cmp	r6, #0
 800d162:	da03      	bge.n	800d16c <_printf_i+0xc8>
 800d164:	232d      	movs	r3, #45	; 0x2d
 800d166:	4276      	negs	r6, r6
 800d168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d16c:	485e      	ldr	r0, [pc, #376]	; (800d2e8 <_printf_i+0x244>)
 800d16e:	230a      	movs	r3, #10
 800d170:	e019      	b.n	800d1a6 <_printf_i+0x102>
 800d172:	680e      	ldr	r6, [r1, #0]
 800d174:	602b      	str	r3, [r5, #0]
 800d176:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d17a:	bf18      	it	ne
 800d17c:	b236      	sxthne	r6, r6
 800d17e:	e7ef      	b.n	800d160 <_printf_i+0xbc>
 800d180:	682b      	ldr	r3, [r5, #0]
 800d182:	6820      	ldr	r0, [r4, #0]
 800d184:	1d19      	adds	r1, r3, #4
 800d186:	6029      	str	r1, [r5, #0]
 800d188:	0601      	lsls	r1, r0, #24
 800d18a:	d501      	bpl.n	800d190 <_printf_i+0xec>
 800d18c:	681e      	ldr	r6, [r3, #0]
 800d18e:	e002      	b.n	800d196 <_printf_i+0xf2>
 800d190:	0646      	lsls	r6, r0, #25
 800d192:	d5fb      	bpl.n	800d18c <_printf_i+0xe8>
 800d194:	881e      	ldrh	r6, [r3, #0]
 800d196:	4854      	ldr	r0, [pc, #336]	; (800d2e8 <_printf_i+0x244>)
 800d198:	2f6f      	cmp	r7, #111	; 0x6f
 800d19a:	bf0c      	ite	eq
 800d19c:	2308      	moveq	r3, #8
 800d19e:	230a      	movne	r3, #10
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1a6:	6865      	ldr	r5, [r4, #4]
 800d1a8:	60a5      	str	r5, [r4, #8]
 800d1aa:	2d00      	cmp	r5, #0
 800d1ac:	bfa2      	ittt	ge
 800d1ae:	6821      	ldrge	r1, [r4, #0]
 800d1b0:	f021 0104 	bicge.w	r1, r1, #4
 800d1b4:	6021      	strge	r1, [r4, #0]
 800d1b6:	b90e      	cbnz	r6, 800d1bc <_printf_i+0x118>
 800d1b8:	2d00      	cmp	r5, #0
 800d1ba:	d04d      	beq.n	800d258 <_printf_i+0x1b4>
 800d1bc:	4615      	mov	r5, r2
 800d1be:	fbb6 f1f3 	udiv	r1, r6, r3
 800d1c2:	fb03 6711 	mls	r7, r3, r1, r6
 800d1c6:	5dc7      	ldrb	r7, [r0, r7]
 800d1c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d1cc:	4637      	mov	r7, r6
 800d1ce:	42bb      	cmp	r3, r7
 800d1d0:	460e      	mov	r6, r1
 800d1d2:	d9f4      	bls.n	800d1be <_printf_i+0x11a>
 800d1d4:	2b08      	cmp	r3, #8
 800d1d6:	d10b      	bne.n	800d1f0 <_printf_i+0x14c>
 800d1d8:	6823      	ldr	r3, [r4, #0]
 800d1da:	07de      	lsls	r6, r3, #31
 800d1dc:	d508      	bpl.n	800d1f0 <_printf_i+0x14c>
 800d1de:	6923      	ldr	r3, [r4, #16]
 800d1e0:	6861      	ldr	r1, [r4, #4]
 800d1e2:	4299      	cmp	r1, r3
 800d1e4:	bfde      	ittt	le
 800d1e6:	2330      	movle	r3, #48	; 0x30
 800d1e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d1ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d1f0:	1b52      	subs	r2, r2, r5
 800d1f2:	6122      	str	r2, [r4, #16]
 800d1f4:	f8cd a000 	str.w	sl, [sp]
 800d1f8:	464b      	mov	r3, r9
 800d1fa:	aa03      	add	r2, sp, #12
 800d1fc:	4621      	mov	r1, r4
 800d1fe:	4640      	mov	r0, r8
 800d200:	f003 fe17 	bl	8010e32 <_printf_common>
 800d204:	3001      	adds	r0, #1
 800d206:	d14c      	bne.n	800d2a2 <_printf_i+0x1fe>
 800d208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d20c:	b004      	add	sp, #16
 800d20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d212:	4835      	ldr	r0, [pc, #212]	; (800d2e8 <_printf_i+0x244>)
 800d214:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d218:	6829      	ldr	r1, [r5, #0]
 800d21a:	6823      	ldr	r3, [r4, #0]
 800d21c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d220:	6029      	str	r1, [r5, #0]
 800d222:	061d      	lsls	r5, r3, #24
 800d224:	d514      	bpl.n	800d250 <_printf_i+0x1ac>
 800d226:	07df      	lsls	r7, r3, #31
 800d228:	bf44      	itt	mi
 800d22a:	f043 0320 	orrmi.w	r3, r3, #32
 800d22e:	6023      	strmi	r3, [r4, #0]
 800d230:	b91e      	cbnz	r6, 800d23a <_printf_i+0x196>
 800d232:	6823      	ldr	r3, [r4, #0]
 800d234:	f023 0320 	bic.w	r3, r3, #32
 800d238:	6023      	str	r3, [r4, #0]
 800d23a:	2310      	movs	r3, #16
 800d23c:	e7b0      	b.n	800d1a0 <_printf_i+0xfc>
 800d23e:	6823      	ldr	r3, [r4, #0]
 800d240:	f043 0320 	orr.w	r3, r3, #32
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	2378      	movs	r3, #120	; 0x78
 800d248:	4828      	ldr	r0, [pc, #160]	; (800d2ec <_printf_i+0x248>)
 800d24a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d24e:	e7e3      	b.n	800d218 <_printf_i+0x174>
 800d250:	0659      	lsls	r1, r3, #25
 800d252:	bf48      	it	mi
 800d254:	b2b6      	uxthmi	r6, r6
 800d256:	e7e6      	b.n	800d226 <_printf_i+0x182>
 800d258:	4615      	mov	r5, r2
 800d25a:	e7bb      	b.n	800d1d4 <_printf_i+0x130>
 800d25c:	682b      	ldr	r3, [r5, #0]
 800d25e:	6826      	ldr	r6, [r4, #0]
 800d260:	6961      	ldr	r1, [r4, #20]
 800d262:	1d18      	adds	r0, r3, #4
 800d264:	6028      	str	r0, [r5, #0]
 800d266:	0635      	lsls	r5, r6, #24
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	d501      	bpl.n	800d270 <_printf_i+0x1cc>
 800d26c:	6019      	str	r1, [r3, #0]
 800d26e:	e002      	b.n	800d276 <_printf_i+0x1d2>
 800d270:	0670      	lsls	r0, r6, #25
 800d272:	d5fb      	bpl.n	800d26c <_printf_i+0x1c8>
 800d274:	8019      	strh	r1, [r3, #0]
 800d276:	2300      	movs	r3, #0
 800d278:	6123      	str	r3, [r4, #16]
 800d27a:	4615      	mov	r5, r2
 800d27c:	e7ba      	b.n	800d1f4 <_printf_i+0x150>
 800d27e:	682b      	ldr	r3, [r5, #0]
 800d280:	1d1a      	adds	r2, r3, #4
 800d282:	602a      	str	r2, [r5, #0]
 800d284:	681d      	ldr	r5, [r3, #0]
 800d286:	6862      	ldr	r2, [r4, #4]
 800d288:	2100      	movs	r1, #0
 800d28a:	4628      	mov	r0, r5
 800d28c:	f7f2 ff88 	bl	80001a0 <memchr>
 800d290:	b108      	cbz	r0, 800d296 <_printf_i+0x1f2>
 800d292:	1b40      	subs	r0, r0, r5
 800d294:	6060      	str	r0, [r4, #4]
 800d296:	6863      	ldr	r3, [r4, #4]
 800d298:	6123      	str	r3, [r4, #16]
 800d29a:	2300      	movs	r3, #0
 800d29c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2a0:	e7a8      	b.n	800d1f4 <_printf_i+0x150>
 800d2a2:	6923      	ldr	r3, [r4, #16]
 800d2a4:	462a      	mov	r2, r5
 800d2a6:	4649      	mov	r1, r9
 800d2a8:	4640      	mov	r0, r8
 800d2aa:	47d0      	blx	sl
 800d2ac:	3001      	adds	r0, #1
 800d2ae:	d0ab      	beq.n	800d208 <_printf_i+0x164>
 800d2b0:	6823      	ldr	r3, [r4, #0]
 800d2b2:	079b      	lsls	r3, r3, #30
 800d2b4:	d413      	bmi.n	800d2de <_printf_i+0x23a>
 800d2b6:	68e0      	ldr	r0, [r4, #12]
 800d2b8:	9b03      	ldr	r3, [sp, #12]
 800d2ba:	4298      	cmp	r0, r3
 800d2bc:	bfb8      	it	lt
 800d2be:	4618      	movlt	r0, r3
 800d2c0:	e7a4      	b.n	800d20c <_printf_i+0x168>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	4632      	mov	r2, r6
 800d2c6:	4649      	mov	r1, r9
 800d2c8:	4640      	mov	r0, r8
 800d2ca:	47d0      	blx	sl
 800d2cc:	3001      	adds	r0, #1
 800d2ce:	d09b      	beq.n	800d208 <_printf_i+0x164>
 800d2d0:	3501      	adds	r5, #1
 800d2d2:	68e3      	ldr	r3, [r4, #12]
 800d2d4:	9903      	ldr	r1, [sp, #12]
 800d2d6:	1a5b      	subs	r3, r3, r1
 800d2d8:	42ab      	cmp	r3, r5
 800d2da:	dcf2      	bgt.n	800d2c2 <_printf_i+0x21e>
 800d2dc:	e7eb      	b.n	800d2b6 <_printf_i+0x212>
 800d2de:	2500      	movs	r5, #0
 800d2e0:	f104 0619 	add.w	r6, r4, #25
 800d2e4:	e7f5      	b.n	800d2d2 <_printf_i+0x22e>
 800d2e6:	bf00      	nop
 800d2e8:	080135a3 	.word	0x080135a3
 800d2ec:	080135b4 	.word	0x080135b4

0800d2f0 <_sbrk_r>:
 800d2f0:	b538      	push	{r3, r4, r5, lr}
 800d2f2:	4d06      	ldr	r5, [pc, #24]	; (800d30c <_sbrk_r+0x1c>)
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	4608      	mov	r0, r1
 800d2fa:	602b      	str	r3, [r5, #0]
 800d2fc:	f7f7 ff16 	bl	800512c <_sbrk>
 800d300:	1c43      	adds	r3, r0, #1
 800d302:	d102      	bne.n	800d30a <_sbrk_r+0x1a>
 800d304:	682b      	ldr	r3, [r5, #0]
 800d306:	b103      	cbz	r3, 800d30a <_sbrk_r+0x1a>
 800d308:	6023      	str	r3, [r4, #0]
 800d30a:	bd38      	pop	{r3, r4, r5, pc}
 800d30c:	20001404 	.word	0x20001404

0800d310 <siprintf>:
 800d310:	b40e      	push	{r1, r2, r3}
 800d312:	b500      	push	{lr}
 800d314:	b09c      	sub	sp, #112	; 0x70
 800d316:	ab1d      	add	r3, sp, #116	; 0x74
 800d318:	9002      	str	r0, [sp, #8]
 800d31a:	9006      	str	r0, [sp, #24]
 800d31c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d320:	4809      	ldr	r0, [pc, #36]	; (800d348 <siprintf+0x38>)
 800d322:	9107      	str	r1, [sp, #28]
 800d324:	9104      	str	r1, [sp, #16]
 800d326:	4909      	ldr	r1, [pc, #36]	; (800d34c <siprintf+0x3c>)
 800d328:	f853 2b04 	ldr.w	r2, [r3], #4
 800d32c:	9105      	str	r1, [sp, #20]
 800d32e:	6800      	ldr	r0, [r0, #0]
 800d330:	9301      	str	r3, [sp, #4]
 800d332:	a902      	add	r1, sp, #8
 800d334:	f000 fc1a 	bl	800db6c <_svfiprintf_r>
 800d338:	9b02      	ldr	r3, [sp, #8]
 800d33a:	2200      	movs	r2, #0
 800d33c:	701a      	strb	r2, [r3, #0]
 800d33e:	b01c      	add	sp, #112	; 0x70
 800d340:	f85d eb04 	ldr.w	lr, [sp], #4
 800d344:	b003      	add	sp, #12
 800d346:	4770      	bx	lr
 800d348:	200003d4 	.word	0x200003d4
 800d34c:	ffff0208 	.word	0xffff0208

0800d350 <strtok>:
 800d350:	4b16      	ldr	r3, [pc, #88]	; (800d3ac <strtok+0x5c>)
 800d352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d356:	681f      	ldr	r7, [r3, #0]
 800d358:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800d35a:	4605      	mov	r5, r0
 800d35c:	460e      	mov	r6, r1
 800d35e:	b9ec      	cbnz	r4, 800d39c <strtok+0x4c>
 800d360:	2050      	movs	r0, #80	; 0x50
 800d362:	f7ff fbc9 	bl	800caf8 <malloc>
 800d366:	4602      	mov	r2, r0
 800d368:	65b8      	str	r0, [r7, #88]	; 0x58
 800d36a:	b920      	cbnz	r0, 800d376 <strtok+0x26>
 800d36c:	4b10      	ldr	r3, [pc, #64]	; (800d3b0 <strtok+0x60>)
 800d36e:	4811      	ldr	r0, [pc, #68]	; (800d3b4 <strtok+0x64>)
 800d370:	2157      	movs	r1, #87	; 0x57
 800d372:	f000 f8a7 	bl	800d4c4 <__assert_func>
 800d376:	e9c0 4400 	strd	r4, r4, [r0]
 800d37a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d37e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d382:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d386:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d38a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d38e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d392:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d396:	6184      	str	r4, [r0, #24]
 800d398:	7704      	strb	r4, [r0, #28]
 800d39a:	6244      	str	r4, [r0, #36]	; 0x24
 800d39c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d39e:	4631      	mov	r1, r6
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a8:	f003 bdbc 	b.w	8010f24 <__strtok_r>
 800d3ac:	200003d4 	.word	0x200003d4
 800d3b0:	080135c5 	.word	0x080135c5
 800d3b4:	080135dc 	.word	0x080135dc

0800d3b8 <_strtol_l.constprop.0>:
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3be:	4680      	mov	r8, r0
 800d3c0:	d001      	beq.n	800d3c6 <_strtol_l.constprop.0+0xe>
 800d3c2:	2b24      	cmp	r3, #36	; 0x24
 800d3c4:	d906      	bls.n	800d3d4 <_strtol_l.constprop.0+0x1c>
 800d3c6:	f001 fdfe 	bl	800efc6 <__errno>
 800d3ca:	2316      	movs	r3, #22
 800d3cc:	6003      	str	r3, [r0, #0]
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3d4:	4f35      	ldr	r7, [pc, #212]	; (800d4ac <_strtol_l.constprop.0+0xf4>)
 800d3d6:	460d      	mov	r5, r1
 800d3d8:	4628      	mov	r0, r5
 800d3da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3de:	5de6      	ldrb	r6, [r4, r7]
 800d3e0:	f016 0608 	ands.w	r6, r6, #8
 800d3e4:	d1f8      	bne.n	800d3d8 <_strtol_l.constprop.0+0x20>
 800d3e6:	2c2d      	cmp	r4, #45	; 0x2d
 800d3e8:	d12f      	bne.n	800d44a <_strtol_l.constprop.0+0x92>
 800d3ea:	782c      	ldrb	r4, [r5, #0]
 800d3ec:	2601      	movs	r6, #1
 800d3ee:	1c85      	adds	r5, r0, #2
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d057      	beq.n	800d4a4 <_strtol_l.constprop.0+0xec>
 800d3f4:	2b10      	cmp	r3, #16
 800d3f6:	d109      	bne.n	800d40c <_strtol_l.constprop.0+0x54>
 800d3f8:	2c30      	cmp	r4, #48	; 0x30
 800d3fa:	d107      	bne.n	800d40c <_strtol_l.constprop.0+0x54>
 800d3fc:	7828      	ldrb	r0, [r5, #0]
 800d3fe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d402:	2858      	cmp	r0, #88	; 0x58
 800d404:	d149      	bne.n	800d49a <_strtol_l.constprop.0+0xe2>
 800d406:	786c      	ldrb	r4, [r5, #1]
 800d408:	2310      	movs	r3, #16
 800d40a:	3502      	adds	r5, #2
 800d40c:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800d410:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800d414:	2700      	movs	r7, #0
 800d416:	fbbe f9f3 	udiv	r9, lr, r3
 800d41a:	4638      	mov	r0, r7
 800d41c:	fb03 ea19 	mls	sl, r3, r9, lr
 800d420:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d424:	f1bc 0f09 	cmp.w	ip, #9
 800d428:	d814      	bhi.n	800d454 <_strtol_l.constprop.0+0x9c>
 800d42a:	4664      	mov	r4, ip
 800d42c:	42a3      	cmp	r3, r4
 800d42e:	dd22      	ble.n	800d476 <_strtol_l.constprop.0+0xbe>
 800d430:	2f00      	cmp	r7, #0
 800d432:	db1d      	blt.n	800d470 <_strtol_l.constprop.0+0xb8>
 800d434:	4581      	cmp	r9, r0
 800d436:	d31b      	bcc.n	800d470 <_strtol_l.constprop.0+0xb8>
 800d438:	d101      	bne.n	800d43e <_strtol_l.constprop.0+0x86>
 800d43a:	45a2      	cmp	sl, r4
 800d43c:	db18      	blt.n	800d470 <_strtol_l.constprop.0+0xb8>
 800d43e:	fb00 4003 	mla	r0, r0, r3, r4
 800d442:	2701      	movs	r7, #1
 800d444:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d448:	e7ea      	b.n	800d420 <_strtol_l.constprop.0+0x68>
 800d44a:	2c2b      	cmp	r4, #43	; 0x2b
 800d44c:	bf04      	itt	eq
 800d44e:	782c      	ldrbeq	r4, [r5, #0]
 800d450:	1c85      	addeq	r5, r0, #2
 800d452:	e7cd      	b.n	800d3f0 <_strtol_l.constprop.0+0x38>
 800d454:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d458:	f1bc 0f19 	cmp.w	ip, #25
 800d45c:	d801      	bhi.n	800d462 <_strtol_l.constprop.0+0xaa>
 800d45e:	3c37      	subs	r4, #55	; 0x37
 800d460:	e7e4      	b.n	800d42c <_strtol_l.constprop.0+0x74>
 800d462:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d466:	f1bc 0f19 	cmp.w	ip, #25
 800d46a:	d804      	bhi.n	800d476 <_strtol_l.constprop.0+0xbe>
 800d46c:	3c57      	subs	r4, #87	; 0x57
 800d46e:	e7dd      	b.n	800d42c <_strtol_l.constprop.0+0x74>
 800d470:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d474:	e7e6      	b.n	800d444 <_strtol_l.constprop.0+0x8c>
 800d476:	2f00      	cmp	r7, #0
 800d478:	da07      	bge.n	800d48a <_strtol_l.constprop.0+0xd2>
 800d47a:	2322      	movs	r3, #34	; 0x22
 800d47c:	f8c8 3000 	str.w	r3, [r8]
 800d480:	4670      	mov	r0, lr
 800d482:	2a00      	cmp	r2, #0
 800d484:	d0a4      	beq.n	800d3d0 <_strtol_l.constprop.0+0x18>
 800d486:	1e69      	subs	r1, r5, #1
 800d488:	e005      	b.n	800d496 <_strtol_l.constprop.0+0xde>
 800d48a:	b106      	cbz	r6, 800d48e <_strtol_l.constprop.0+0xd6>
 800d48c:	4240      	negs	r0, r0
 800d48e:	2a00      	cmp	r2, #0
 800d490:	d09e      	beq.n	800d3d0 <_strtol_l.constprop.0+0x18>
 800d492:	2f00      	cmp	r7, #0
 800d494:	d1f7      	bne.n	800d486 <_strtol_l.constprop.0+0xce>
 800d496:	6011      	str	r1, [r2, #0]
 800d498:	e79a      	b.n	800d3d0 <_strtol_l.constprop.0+0x18>
 800d49a:	2430      	movs	r4, #48	; 0x30
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1b5      	bne.n	800d40c <_strtol_l.constprop.0+0x54>
 800d4a0:	2308      	movs	r3, #8
 800d4a2:	e7b3      	b.n	800d40c <_strtol_l.constprop.0+0x54>
 800d4a4:	2c30      	cmp	r4, #48	; 0x30
 800d4a6:	d0a9      	beq.n	800d3fc <_strtol_l.constprop.0+0x44>
 800d4a8:	230a      	movs	r3, #10
 800d4aa:	e7af      	b.n	800d40c <_strtol_l.constprop.0+0x54>
 800d4ac:	08013491 	.word	0x08013491

0800d4b0 <strtol>:
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	460a      	mov	r2, r1
 800d4b4:	4601      	mov	r1, r0
 800d4b6:	4802      	ldr	r0, [pc, #8]	; (800d4c0 <strtol+0x10>)
 800d4b8:	6800      	ldr	r0, [r0, #0]
 800d4ba:	f7ff bf7d 	b.w	800d3b8 <_strtol_l.constprop.0>
 800d4be:	bf00      	nop
 800d4c0:	200003d4 	.word	0x200003d4

0800d4c4 <__assert_func>:
 800d4c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4c6:	4614      	mov	r4, r2
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	4b09      	ldr	r3, [pc, #36]	; (800d4f0 <__assert_func+0x2c>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	68d8      	ldr	r0, [r3, #12]
 800d4d2:	b14c      	cbz	r4, 800d4e8 <__assert_func+0x24>
 800d4d4:	4b07      	ldr	r3, [pc, #28]	; (800d4f4 <__assert_func+0x30>)
 800d4d6:	9100      	str	r1, [sp, #0]
 800d4d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4dc:	4906      	ldr	r1, [pc, #24]	; (800d4f8 <__assert_func+0x34>)
 800d4de:	462b      	mov	r3, r5
 800d4e0:	f000 f80e 	bl	800d500 <fiprintf>
 800d4e4:	f003 fec5 	bl	8011272 <abort>
 800d4e8:	4b04      	ldr	r3, [pc, #16]	; (800d4fc <__assert_func+0x38>)
 800d4ea:	461c      	mov	r4, r3
 800d4ec:	e7f3      	b.n	800d4d6 <__assert_func+0x12>
 800d4ee:	bf00      	nop
 800d4f0:	200003d4 	.word	0x200003d4
 800d4f4:	08013638 	.word	0x08013638
 800d4f8:	08013645 	.word	0x08013645
 800d4fc:	08013673 	.word	0x08013673

0800d500 <fiprintf>:
 800d500:	b40e      	push	{r1, r2, r3}
 800d502:	b503      	push	{r0, r1, lr}
 800d504:	4601      	mov	r1, r0
 800d506:	ab03      	add	r3, sp, #12
 800d508:	4805      	ldr	r0, [pc, #20]	; (800d520 <fiprintf+0x20>)
 800d50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d50e:	6800      	ldr	r0, [r0, #0]
 800d510:	9301      	str	r3, [sp, #4]
 800d512:	f000 fc2b 	bl	800dd6c <_vfiprintf_r>
 800d516:	b002      	add	sp, #8
 800d518:	f85d eb04 	ldr.w	lr, [sp], #4
 800d51c:	b003      	add	sp, #12
 800d51e:	4770      	bx	lr
 800d520:	200003d4 	.word	0x200003d4

0800d524 <_localeconv_r>:
 800d524:	4800      	ldr	r0, [pc, #0]	; (800d528 <_localeconv_r+0x4>)
 800d526:	4770      	bx	lr
 800d528:	20000528 	.word	0x20000528

0800d52c <__malloc_lock>:
 800d52c:	4801      	ldr	r0, [pc, #4]	; (800d534 <__malloc_lock+0x8>)
 800d52e:	f001 bd3e 	b.w	800efae <__retarget_lock_acquire_recursive>
 800d532:	bf00      	nop
 800d534:	20000648 	.word	0x20000648

0800d538 <__malloc_unlock>:
 800d538:	4801      	ldr	r0, [pc, #4]	; (800d540 <__malloc_unlock+0x8>)
 800d53a:	f001 bd40 	b.w	800efbe <__retarget_lock_release_recursive>
 800d53e:	bf00      	nop
 800d540:	20000648 	.word	0x20000648

0800d544 <_Balloc>:
 800d544:	b570      	push	{r4, r5, r6, lr}
 800d546:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d548:	4604      	mov	r4, r0
 800d54a:	460d      	mov	r5, r1
 800d54c:	b976      	cbnz	r6, 800d56c <_Balloc+0x28>
 800d54e:	2010      	movs	r0, #16
 800d550:	f7ff fad2 	bl	800caf8 <malloc>
 800d554:	4602      	mov	r2, r0
 800d556:	6260      	str	r0, [r4, #36]	; 0x24
 800d558:	b920      	cbnz	r0, 800d564 <_Balloc+0x20>
 800d55a:	4b18      	ldr	r3, [pc, #96]	; (800d5bc <_Balloc+0x78>)
 800d55c:	4818      	ldr	r0, [pc, #96]	; (800d5c0 <_Balloc+0x7c>)
 800d55e:	2166      	movs	r1, #102	; 0x66
 800d560:	f7ff ffb0 	bl	800d4c4 <__assert_func>
 800d564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d568:	6006      	str	r6, [r0, #0]
 800d56a:	60c6      	str	r6, [r0, #12]
 800d56c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d56e:	68f3      	ldr	r3, [r6, #12]
 800d570:	b183      	cbz	r3, 800d594 <_Balloc+0x50>
 800d572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d574:	68db      	ldr	r3, [r3, #12]
 800d576:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d57a:	b9b8      	cbnz	r0, 800d5ac <_Balloc+0x68>
 800d57c:	2101      	movs	r1, #1
 800d57e:	fa01 f605 	lsl.w	r6, r1, r5
 800d582:	1d72      	adds	r2, r6, #5
 800d584:	0092      	lsls	r2, r2, #2
 800d586:	4620      	mov	r0, r4
 800d588:	f003 fde3 	bl	8011152 <_calloc_r>
 800d58c:	b160      	cbz	r0, 800d5a8 <_Balloc+0x64>
 800d58e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d592:	e00e      	b.n	800d5b2 <_Balloc+0x6e>
 800d594:	2221      	movs	r2, #33	; 0x21
 800d596:	2104      	movs	r1, #4
 800d598:	4620      	mov	r0, r4
 800d59a:	f003 fdda 	bl	8011152 <_calloc_r>
 800d59e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5a0:	60f0      	str	r0, [r6, #12]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d1e4      	bne.n	800d572 <_Balloc+0x2e>
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	bd70      	pop	{r4, r5, r6, pc}
 800d5ac:	6802      	ldr	r2, [r0, #0]
 800d5ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5b8:	e7f7      	b.n	800d5aa <_Balloc+0x66>
 800d5ba:	bf00      	nop
 800d5bc:	080135c5 	.word	0x080135c5
 800d5c0:	080136ec 	.word	0x080136ec

0800d5c4 <_Bfree>:
 800d5c4:	b570      	push	{r4, r5, r6, lr}
 800d5c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d5c8:	4605      	mov	r5, r0
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	b976      	cbnz	r6, 800d5ec <_Bfree+0x28>
 800d5ce:	2010      	movs	r0, #16
 800d5d0:	f7ff fa92 	bl	800caf8 <malloc>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	6268      	str	r0, [r5, #36]	; 0x24
 800d5d8:	b920      	cbnz	r0, 800d5e4 <_Bfree+0x20>
 800d5da:	4b09      	ldr	r3, [pc, #36]	; (800d600 <_Bfree+0x3c>)
 800d5dc:	4809      	ldr	r0, [pc, #36]	; (800d604 <_Bfree+0x40>)
 800d5de:	218a      	movs	r1, #138	; 0x8a
 800d5e0:	f7ff ff70 	bl	800d4c4 <__assert_func>
 800d5e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5e8:	6006      	str	r6, [r0, #0]
 800d5ea:	60c6      	str	r6, [r0, #12]
 800d5ec:	b13c      	cbz	r4, 800d5fe <_Bfree+0x3a>
 800d5ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d5f0:	6862      	ldr	r2, [r4, #4]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d5f8:	6021      	str	r1, [r4, #0]
 800d5fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d5fe:	bd70      	pop	{r4, r5, r6, pc}
 800d600:	080135c5 	.word	0x080135c5
 800d604:	080136ec 	.word	0x080136ec

0800d608 <__multadd>:
 800d608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d60c:	690d      	ldr	r5, [r1, #16]
 800d60e:	4607      	mov	r7, r0
 800d610:	460c      	mov	r4, r1
 800d612:	461e      	mov	r6, r3
 800d614:	f101 0c14 	add.w	ip, r1, #20
 800d618:	2000      	movs	r0, #0
 800d61a:	f8dc 3000 	ldr.w	r3, [ip]
 800d61e:	b299      	uxth	r1, r3
 800d620:	fb02 6101 	mla	r1, r2, r1, r6
 800d624:	0c1e      	lsrs	r6, r3, #16
 800d626:	0c0b      	lsrs	r3, r1, #16
 800d628:	fb02 3306 	mla	r3, r2, r6, r3
 800d62c:	b289      	uxth	r1, r1
 800d62e:	3001      	adds	r0, #1
 800d630:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d634:	4285      	cmp	r5, r0
 800d636:	f84c 1b04 	str.w	r1, [ip], #4
 800d63a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d63e:	dcec      	bgt.n	800d61a <__multadd+0x12>
 800d640:	b30e      	cbz	r6, 800d686 <__multadd+0x7e>
 800d642:	68a3      	ldr	r3, [r4, #8]
 800d644:	42ab      	cmp	r3, r5
 800d646:	dc19      	bgt.n	800d67c <__multadd+0x74>
 800d648:	6861      	ldr	r1, [r4, #4]
 800d64a:	4638      	mov	r0, r7
 800d64c:	3101      	adds	r1, #1
 800d64e:	f7ff ff79 	bl	800d544 <_Balloc>
 800d652:	4680      	mov	r8, r0
 800d654:	b928      	cbnz	r0, 800d662 <__multadd+0x5a>
 800d656:	4602      	mov	r2, r0
 800d658:	4b0c      	ldr	r3, [pc, #48]	; (800d68c <__multadd+0x84>)
 800d65a:	480d      	ldr	r0, [pc, #52]	; (800d690 <__multadd+0x88>)
 800d65c:	21b5      	movs	r1, #181	; 0xb5
 800d65e:	f7ff ff31 	bl	800d4c4 <__assert_func>
 800d662:	6922      	ldr	r2, [r4, #16]
 800d664:	3202      	adds	r2, #2
 800d666:	f104 010c 	add.w	r1, r4, #12
 800d66a:	0092      	lsls	r2, r2, #2
 800d66c:	300c      	adds	r0, #12
 800d66e:	f003 fb19 	bl	8010ca4 <memcpy>
 800d672:	4621      	mov	r1, r4
 800d674:	4638      	mov	r0, r7
 800d676:	f7ff ffa5 	bl	800d5c4 <_Bfree>
 800d67a:	4644      	mov	r4, r8
 800d67c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d680:	3501      	adds	r5, #1
 800d682:	615e      	str	r6, [r3, #20]
 800d684:	6125      	str	r5, [r4, #16]
 800d686:	4620      	mov	r0, r4
 800d688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d68c:	080136db 	.word	0x080136db
 800d690:	080136ec 	.word	0x080136ec

0800d694 <__i2b>:
 800d694:	b510      	push	{r4, lr}
 800d696:	460c      	mov	r4, r1
 800d698:	2101      	movs	r1, #1
 800d69a:	f7ff ff53 	bl	800d544 <_Balloc>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	b928      	cbnz	r0, 800d6ae <__i2b+0x1a>
 800d6a2:	4b05      	ldr	r3, [pc, #20]	; (800d6b8 <__i2b+0x24>)
 800d6a4:	4805      	ldr	r0, [pc, #20]	; (800d6bc <__i2b+0x28>)
 800d6a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d6aa:	f7ff ff0b 	bl	800d4c4 <__assert_func>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	6144      	str	r4, [r0, #20]
 800d6b2:	6103      	str	r3, [r0, #16]
 800d6b4:	bd10      	pop	{r4, pc}
 800d6b6:	bf00      	nop
 800d6b8:	080136db 	.word	0x080136db
 800d6bc:	080136ec 	.word	0x080136ec

0800d6c0 <__multiply>:
 800d6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c4:	4691      	mov	r9, r2
 800d6c6:	690a      	ldr	r2, [r1, #16]
 800d6c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	bfb8      	it	lt
 800d6d0:	460b      	movlt	r3, r1
 800d6d2:	460c      	mov	r4, r1
 800d6d4:	bfbc      	itt	lt
 800d6d6:	464c      	movlt	r4, r9
 800d6d8:	4699      	movlt	r9, r3
 800d6da:	6927      	ldr	r7, [r4, #16]
 800d6dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d6e0:	68a3      	ldr	r3, [r4, #8]
 800d6e2:	6861      	ldr	r1, [r4, #4]
 800d6e4:	eb07 060a 	add.w	r6, r7, sl
 800d6e8:	42b3      	cmp	r3, r6
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	bfb8      	it	lt
 800d6ee:	3101      	addlt	r1, #1
 800d6f0:	f7ff ff28 	bl	800d544 <_Balloc>
 800d6f4:	b930      	cbnz	r0, 800d704 <__multiply+0x44>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	4b43      	ldr	r3, [pc, #268]	; (800d808 <__multiply+0x148>)
 800d6fa:	4844      	ldr	r0, [pc, #272]	; (800d80c <__multiply+0x14c>)
 800d6fc:	f240 115d 	movw	r1, #349	; 0x15d
 800d700:	f7ff fee0 	bl	800d4c4 <__assert_func>
 800d704:	f100 0514 	add.w	r5, r0, #20
 800d708:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d70c:	462b      	mov	r3, r5
 800d70e:	2200      	movs	r2, #0
 800d710:	4543      	cmp	r3, r8
 800d712:	d321      	bcc.n	800d758 <__multiply+0x98>
 800d714:	f104 0314 	add.w	r3, r4, #20
 800d718:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d71c:	f109 0314 	add.w	r3, r9, #20
 800d720:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d724:	9202      	str	r2, [sp, #8]
 800d726:	1b3a      	subs	r2, r7, r4
 800d728:	3a15      	subs	r2, #21
 800d72a:	f022 0203 	bic.w	r2, r2, #3
 800d72e:	3204      	adds	r2, #4
 800d730:	f104 0115 	add.w	r1, r4, #21
 800d734:	428f      	cmp	r7, r1
 800d736:	bf38      	it	cc
 800d738:	2204      	movcc	r2, #4
 800d73a:	9201      	str	r2, [sp, #4]
 800d73c:	9a02      	ldr	r2, [sp, #8]
 800d73e:	9303      	str	r3, [sp, #12]
 800d740:	429a      	cmp	r2, r3
 800d742:	d80c      	bhi.n	800d75e <__multiply+0x9e>
 800d744:	2e00      	cmp	r6, #0
 800d746:	dd03      	ble.n	800d750 <__multiply+0x90>
 800d748:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d059      	beq.n	800d804 <__multiply+0x144>
 800d750:	6106      	str	r6, [r0, #16]
 800d752:	b005      	add	sp, #20
 800d754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d758:	f843 2b04 	str.w	r2, [r3], #4
 800d75c:	e7d8      	b.n	800d710 <__multiply+0x50>
 800d75e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d762:	f1ba 0f00 	cmp.w	sl, #0
 800d766:	d023      	beq.n	800d7b0 <__multiply+0xf0>
 800d768:	f104 0e14 	add.w	lr, r4, #20
 800d76c:	46a9      	mov	r9, r5
 800d76e:	f04f 0c00 	mov.w	ip, #0
 800d772:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d776:	f8d9 1000 	ldr.w	r1, [r9]
 800d77a:	fa1f fb82 	uxth.w	fp, r2
 800d77e:	b289      	uxth	r1, r1
 800d780:	fb0a 110b 	mla	r1, sl, fp, r1
 800d784:	4461      	add	r1, ip
 800d786:	f8d9 c000 	ldr.w	ip, [r9]
 800d78a:	0c12      	lsrs	r2, r2, #16
 800d78c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d790:	fb0a c202 	mla	r2, sl, r2, ip
 800d794:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d798:	b289      	uxth	r1, r1
 800d79a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d79e:	4577      	cmp	r7, lr
 800d7a0:	f849 1b04 	str.w	r1, [r9], #4
 800d7a4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d7a8:	d8e3      	bhi.n	800d772 <__multiply+0xb2>
 800d7aa:	9a01      	ldr	r2, [sp, #4]
 800d7ac:	f845 c002 	str.w	ip, [r5, r2]
 800d7b0:	9a03      	ldr	r2, [sp, #12]
 800d7b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	f1b9 0f00 	cmp.w	r9, #0
 800d7bc:	d020      	beq.n	800d800 <__multiply+0x140>
 800d7be:	6829      	ldr	r1, [r5, #0]
 800d7c0:	f104 0c14 	add.w	ip, r4, #20
 800d7c4:	46ae      	mov	lr, r5
 800d7c6:	f04f 0a00 	mov.w	sl, #0
 800d7ca:	f8bc b000 	ldrh.w	fp, [ip]
 800d7ce:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d7d2:	fb09 220b 	mla	r2, r9, fp, r2
 800d7d6:	4492      	add	sl, r2
 800d7d8:	b289      	uxth	r1, r1
 800d7da:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d7de:	f84e 1b04 	str.w	r1, [lr], #4
 800d7e2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d7e6:	f8be 1000 	ldrh.w	r1, [lr]
 800d7ea:	0c12      	lsrs	r2, r2, #16
 800d7ec:	fb09 1102 	mla	r1, r9, r2, r1
 800d7f0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d7f4:	4567      	cmp	r7, ip
 800d7f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d7fa:	d8e6      	bhi.n	800d7ca <__multiply+0x10a>
 800d7fc:	9a01      	ldr	r2, [sp, #4]
 800d7fe:	50a9      	str	r1, [r5, r2]
 800d800:	3504      	adds	r5, #4
 800d802:	e79b      	b.n	800d73c <__multiply+0x7c>
 800d804:	3e01      	subs	r6, #1
 800d806:	e79d      	b.n	800d744 <__multiply+0x84>
 800d808:	080136db 	.word	0x080136db
 800d80c:	080136ec 	.word	0x080136ec

0800d810 <__pow5mult>:
 800d810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d814:	4615      	mov	r5, r2
 800d816:	f012 0203 	ands.w	r2, r2, #3
 800d81a:	4606      	mov	r6, r0
 800d81c:	460f      	mov	r7, r1
 800d81e:	d007      	beq.n	800d830 <__pow5mult+0x20>
 800d820:	4c25      	ldr	r4, [pc, #148]	; (800d8b8 <__pow5mult+0xa8>)
 800d822:	3a01      	subs	r2, #1
 800d824:	2300      	movs	r3, #0
 800d826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d82a:	f7ff feed 	bl	800d608 <__multadd>
 800d82e:	4607      	mov	r7, r0
 800d830:	10ad      	asrs	r5, r5, #2
 800d832:	d03d      	beq.n	800d8b0 <__pow5mult+0xa0>
 800d834:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d836:	b97c      	cbnz	r4, 800d858 <__pow5mult+0x48>
 800d838:	2010      	movs	r0, #16
 800d83a:	f7ff f95d 	bl	800caf8 <malloc>
 800d83e:	4602      	mov	r2, r0
 800d840:	6270      	str	r0, [r6, #36]	; 0x24
 800d842:	b928      	cbnz	r0, 800d850 <__pow5mult+0x40>
 800d844:	4b1d      	ldr	r3, [pc, #116]	; (800d8bc <__pow5mult+0xac>)
 800d846:	481e      	ldr	r0, [pc, #120]	; (800d8c0 <__pow5mult+0xb0>)
 800d848:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d84c:	f7ff fe3a 	bl	800d4c4 <__assert_func>
 800d850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d854:	6004      	str	r4, [r0, #0]
 800d856:	60c4      	str	r4, [r0, #12]
 800d858:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d85c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d860:	b94c      	cbnz	r4, 800d876 <__pow5mult+0x66>
 800d862:	f240 2171 	movw	r1, #625	; 0x271
 800d866:	4630      	mov	r0, r6
 800d868:	f7ff ff14 	bl	800d694 <__i2b>
 800d86c:	2300      	movs	r3, #0
 800d86e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d872:	4604      	mov	r4, r0
 800d874:	6003      	str	r3, [r0, #0]
 800d876:	f04f 0900 	mov.w	r9, #0
 800d87a:	07eb      	lsls	r3, r5, #31
 800d87c:	d50a      	bpl.n	800d894 <__pow5mult+0x84>
 800d87e:	4639      	mov	r1, r7
 800d880:	4622      	mov	r2, r4
 800d882:	4630      	mov	r0, r6
 800d884:	f7ff ff1c 	bl	800d6c0 <__multiply>
 800d888:	4639      	mov	r1, r7
 800d88a:	4680      	mov	r8, r0
 800d88c:	4630      	mov	r0, r6
 800d88e:	f7ff fe99 	bl	800d5c4 <_Bfree>
 800d892:	4647      	mov	r7, r8
 800d894:	106d      	asrs	r5, r5, #1
 800d896:	d00b      	beq.n	800d8b0 <__pow5mult+0xa0>
 800d898:	6820      	ldr	r0, [r4, #0]
 800d89a:	b938      	cbnz	r0, 800d8ac <__pow5mult+0x9c>
 800d89c:	4622      	mov	r2, r4
 800d89e:	4621      	mov	r1, r4
 800d8a0:	4630      	mov	r0, r6
 800d8a2:	f7ff ff0d 	bl	800d6c0 <__multiply>
 800d8a6:	6020      	str	r0, [r4, #0]
 800d8a8:	f8c0 9000 	str.w	r9, [r0]
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	e7e4      	b.n	800d87a <__pow5mult+0x6a>
 800d8b0:	4638      	mov	r0, r7
 800d8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8b6:	bf00      	nop
 800d8b8:	08013424 	.word	0x08013424
 800d8bc:	080135c5 	.word	0x080135c5
 800d8c0:	080136ec 	.word	0x080136ec

0800d8c4 <__lshift>:
 800d8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c8:	460c      	mov	r4, r1
 800d8ca:	6849      	ldr	r1, [r1, #4]
 800d8cc:	6923      	ldr	r3, [r4, #16]
 800d8ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d8d2:	68a3      	ldr	r3, [r4, #8]
 800d8d4:	4607      	mov	r7, r0
 800d8d6:	4691      	mov	r9, r2
 800d8d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d8dc:	f108 0601 	add.w	r6, r8, #1
 800d8e0:	42b3      	cmp	r3, r6
 800d8e2:	db0b      	blt.n	800d8fc <__lshift+0x38>
 800d8e4:	4638      	mov	r0, r7
 800d8e6:	f7ff fe2d 	bl	800d544 <_Balloc>
 800d8ea:	4605      	mov	r5, r0
 800d8ec:	b948      	cbnz	r0, 800d902 <__lshift+0x3e>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	4b2a      	ldr	r3, [pc, #168]	; (800d99c <__lshift+0xd8>)
 800d8f2:	482b      	ldr	r0, [pc, #172]	; (800d9a0 <__lshift+0xdc>)
 800d8f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d8f8:	f7ff fde4 	bl	800d4c4 <__assert_func>
 800d8fc:	3101      	adds	r1, #1
 800d8fe:	005b      	lsls	r3, r3, #1
 800d900:	e7ee      	b.n	800d8e0 <__lshift+0x1c>
 800d902:	2300      	movs	r3, #0
 800d904:	f100 0114 	add.w	r1, r0, #20
 800d908:	f100 0210 	add.w	r2, r0, #16
 800d90c:	4618      	mov	r0, r3
 800d90e:	4553      	cmp	r3, sl
 800d910:	db37      	blt.n	800d982 <__lshift+0xbe>
 800d912:	6920      	ldr	r0, [r4, #16]
 800d914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d918:	f104 0314 	add.w	r3, r4, #20
 800d91c:	f019 091f 	ands.w	r9, r9, #31
 800d920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d924:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d928:	d02f      	beq.n	800d98a <__lshift+0xc6>
 800d92a:	f1c9 0e20 	rsb	lr, r9, #32
 800d92e:	468a      	mov	sl, r1
 800d930:	f04f 0c00 	mov.w	ip, #0
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	fa02 f209 	lsl.w	r2, r2, r9
 800d93a:	ea42 020c 	orr.w	r2, r2, ip
 800d93e:	f84a 2b04 	str.w	r2, [sl], #4
 800d942:	f853 2b04 	ldr.w	r2, [r3], #4
 800d946:	4298      	cmp	r0, r3
 800d948:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d94c:	d8f2      	bhi.n	800d934 <__lshift+0x70>
 800d94e:	1b03      	subs	r3, r0, r4
 800d950:	3b15      	subs	r3, #21
 800d952:	f023 0303 	bic.w	r3, r3, #3
 800d956:	3304      	adds	r3, #4
 800d958:	f104 0215 	add.w	r2, r4, #21
 800d95c:	4290      	cmp	r0, r2
 800d95e:	bf38      	it	cc
 800d960:	2304      	movcc	r3, #4
 800d962:	f841 c003 	str.w	ip, [r1, r3]
 800d966:	f1bc 0f00 	cmp.w	ip, #0
 800d96a:	d001      	beq.n	800d970 <__lshift+0xac>
 800d96c:	f108 0602 	add.w	r6, r8, #2
 800d970:	3e01      	subs	r6, #1
 800d972:	4638      	mov	r0, r7
 800d974:	612e      	str	r6, [r5, #16]
 800d976:	4621      	mov	r1, r4
 800d978:	f7ff fe24 	bl	800d5c4 <_Bfree>
 800d97c:	4628      	mov	r0, r5
 800d97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d982:	f842 0f04 	str.w	r0, [r2, #4]!
 800d986:	3301      	adds	r3, #1
 800d988:	e7c1      	b.n	800d90e <__lshift+0x4a>
 800d98a:	3904      	subs	r1, #4
 800d98c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d990:	f841 2f04 	str.w	r2, [r1, #4]!
 800d994:	4298      	cmp	r0, r3
 800d996:	d8f9      	bhi.n	800d98c <__lshift+0xc8>
 800d998:	e7ea      	b.n	800d970 <__lshift+0xac>
 800d99a:	bf00      	nop
 800d99c:	080136db 	.word	0x080136db
 800d9a0:	080136ec 	.word	0x080136ec

0800d9a4 <__mdiff>:
 800d9a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a8:	460d      	mov	r5, r1
 800d9aa:	4607      	mov	r7, r0
 800d9ac:	4611      	mov	r1, r2
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	4614      	mov	r4, r2
 800d9b2:	f003 fbb3 	bl	801111c <__mcmp>
 800d9b6:	1e06      	subs	r6, r0, #0
 800d9b8:	d111      	bne.n	800d9de <__mdiff+0x3a>
 800d9ba:	4631      	mov	r1, r6
 800d9bc:	4638      	mov	r0, r7
 800d9be:	f7ff fdc1 	bl	800d544 <_Balloc>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	b928      	cbnz	r0, 800d9d2 <__mdiff+0x2e>
 800d9c6:	4b39      	ldr	r3, [pc, #228]	; (800daac <__mdiff+0x108>)
 800d9c8:	f240 2132 	movw	r1, #562	; 0x232
 800d9cc:	4838      	ldr	r0, [pc, #224]	; (800dab0 <__mdiff+0x10c>)
 800d9ce:	f7ff fd79 	bl	800d4c4 <__assert_func>
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d9d8:	4610      	mov	r0, r2
 800d9da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9de:	bfa4      	itt	ge
 800d9e0:	4623      	movge	r3, r4
 800d9e2:	462c      	movge	r4, r5
 800d9e4:	4638      	mov	r0, r7
 800d9e6:	6861      	ldr	r1, [r4, #4]
 800d9e8:	bfa6      	itte	ge
 800d9ea:	461d      	movge	r5, r3
 800d9ec:	2600      	movge	r6, #0
 800d9ee:	2601      	movlt	r6, #1
 800d9f0:	f7ff fda8 	bl	800d544 <_Balloc>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	b918      	cbnz	r0, 800da00 <__mdiff+0x5c>
 800d9f8:	4b2c      	ldr	r3, [pc, #176]	; (800daac <__mdiff+0x108>)
 800d9fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d9fe:	e7e5      	b.n	800d9cc <__mdiff+0x28>
 800da00:	6927      	ldr	r7, [r4, #16]
 800da02:	60c6      	str	r6, [r0, #12]
 800da04:	692e      	ldr	r6, [r5, #16]
 800da06:	f104 0014 	add.w	r0, r4, #20
 800da0a:	f105 0914 	add.w	r9, r5, #20
 800da0e:	f102 0e14 	add.w	lr, r2, #20
 800da12:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800da16:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800da1a:	3410      	adds	r4, #16
 800da1c:	46f2      	mov	sl, lr
 800da1e:	2100      	movs	r1, #0
 800da20:	f859 3b04 	ldr.w	r3, [r9], #4
 800da24:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800da28:	fa1f f883 	uxth.w	r8, r3
 800da2c:	fa11 f18b 	uxtah	r1, r1, fp
 800da30:	0c1b      	lsrs	r3, r3, #16
 800da32:	eba1 0808 	sub.w	r8, r1, r8
 800da36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800da3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800da3e:	fa1f f888 	uxth.w	r8, r8
 800da42:	1419      	asrs	r1, r3, #16
 800da44:	454e      	cmp	r6, r9
 800da46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800da4a:	f84a 3b04 	str.w	r3, [sl], #4
 800da4e:	d8e7      	bhi.n	800da20 <__mdiff+0x7c>
 800da50:	1b73      	subs	r3, r6, r5
 800da52:	3b15      	subs	r3, #21
 800da54:	f023 0303 	bic.w	r3, r3, #3
 800da58:	3304      	adds	r3, #4
 800da5a:	3515      	adds	r5, #21
 800da5c:	42ae      	cmp	r6, r5
 800da5e:	bf38      	it	cc
 800da60:	2304      	movcc	r3, #4
 800da62:	4418      	add	r0, r3
 800da64:	4473      	add	r3, lr
 800da66:	469e      	mov	lr, r3
 800da68:	4606      	mov	r6, r0
 800da6a:	4566      	cmp	r6, ip
 800da6c:	d30e      	bcc.n	800da8c <__mdiff+0xe8>
 800da6e:	f10c 0103 	add.w	r1, ip, #3
 800da72:	1a09      	subs	r1, r1, r0
 800da74:	f021 0103 	bic.w	r1, r1, #3
 800da78:	3803      	subs	r0, #3
 800da7a:	4584      	cmp	ip, r0
 800da7c:	bf38      	it	cc
 800da7e:	2100      	movcc	r1, #0
 800da80:	4419      	add	r1, r3
 800da82:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800da86:	b17b      	cbz	r3, 800daa8 <__mdiff+0x104>
 800da88:	6117      	str	r7, [r2, #16]
 800da8a:	e7a5      	b.n	800d9d8 <__mdiff+0x34>
 800da8c:	f856 8b04 	ldr.w	r8, [r6], #4
 800da90:	fa11 f488 	uxtah	r4, r1, r8
 800da94:	1425      	asrs	r5, r4, #16
 800da96:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800da9a:	b2a4      	uxth	r4, r4
 800da9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800daa0:	f84e 4b04 	str.w	r4, [lr], #4
 800daa4:	1429      	asrs	r1, r5, #16
 800daa6:	e7e0      	b.n	800da6a <__mdiff+0xc6>
 800daa8:	3f01      	subs	r7, #1
 800daaa:	e7ea      	b.n	800da82 <__mdiff+0xde>
 800daac:	080136db 	.word	0x080136db
 800dab0:	080136ec 	.word	0x080136ec

0800dab4 <__d2b>:
 800dab4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dab8:	2101      	movs	r1, #1
 800daba:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800dabe:	4690      	mov	r8, r2
 800dac0:	461d      	mov	r5, r3
 800dac2:	f7ff fd3f 	bl	800d544 <_Balloc>
 800dac6:	4604      	mov	r4, r0
 800dac8:	b930      	cbnz	r0, 800dad8 <__d2b+0x24>
 800daca:	4602      	mov	r2, r0
 800dacc:	4b25      	ldr	r3, [pc, #148]	; (800db64 <__d2b+0xb0>)
 800dace:	4826      	ldr	r0, [pc, #152]	; (800db68 <__d2b+0xb4>)
 800dad0:	f240 310a 	movw	r1, #778	; 0x30a
 800dad4:	f7ff fcf6 	bl	800d4c4 <__assert_func>
 800dad8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800dadc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800dae0:	bb2d      	cbnz	r5, 800db2e <__d2b+0x7a>
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	f1b8 0300 	subs.w	r3, r8, #0
 800dae8:	d026      	beq.n	800db38 <__d2b+0x84>
 800daea:	4668      	mov	r0, sp
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	f003 fae8 	bl	80110c2 <__lo0bits>
 800daf2:	9900      	ldr	r1, [sp, #0]
 800daf4:	b1f0      	cbz	r0, 800db34 <__d2b+0x80>
 800daf6:	9a01      	ldr	r2, [sp, #4]
 800daf8:	f1c0 0320 	rsb	r3, r0, #32
 800dafc:	fa02 f303 	lsl.w	r3, r2, r3
 800db00:	430b      	orrs	r3, r1
 800db02:	40c2      	lsrs	r2, r0
 800db04:	6163      	str	r3, [r4, #20]
 800db06:	9201      	str	r2, [sp, #4]
 800db08:	9b01      	ldr	r3, [sp, #4]
 800db0a:	61a3      	str	r3, [r4, #24]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	bf14      	ite	ne
 800db10:	2102      	movne	r1, #2
 800db12:	2101      	moveq	r1, #1
 800db14:	6121      	str	r1, [r4, #16]
 800db16:	b1c5      	cbz	r5, 800db4a <__d2b+0x96>
 800db18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db1c:	4405      	add	r5, r0
 800db1e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db22:	603d      	str	r5, [r7, #0]
 800db24:	6030      	str	r0, [r6, #0]
 800db26:	4620      	mov	r0, r4
 800db28:	b002      	add	sp, #8
 800db2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db32:	e7d6      	b.n	800dae2 <__d2b+0x2e>
 800db34:	6161      	str	r1, [r4, #20]
 800db36:	e7e7      	b.n	800db08 <__d2b+0x54>
 800db38:	a801      	add	r0, sp, #4
 800db3a:	f003 fac2 	bl	80110c2 <__lo0bits>
 800db3e:	9b01      	ldr	r3, [sp, #4]
 800db40:	6163      	str	r3, [r4, #20]
 800db42:	2101      	movs	r1, #1
 800db44:	6121      	str	r1, [r4, #16]
 800db46:	3020      	adds	r0, #32
 800db48:	e7e5      	b.n	800db16 <__d2b+0x62>
 800db4a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800db4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db52:	6038      	str	r0, [r7, #0]
 800db54:	6918      	ldr	r0, [r3, #16]
 800db56:	f003 fa94 	bl	8011082 <__hi0bits>
 800db5a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800db5e:	6031      	str	r1, [r6, #0]
 800db60:	e7e1      	b.n	800db26 <__d2b+0x72>
 800db62:	bf00      	nop
 800db64:	080136db 	.word	0x080136db
 800db68:	080136ec 	.word	0x080136ec

0800db6c <_svfiprintf_r>:
 800db6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db70:	4698      	mov	r8, r3
 800db72:	898b      	ldrh	r3, [r1, #12]
 800db74:	061b      	lsls	r3, r3, #24
 800db76:	b09d      	sub	sp, #116	; 0x74
 800db78:	4607      	mov	r7, r0
 800db7a:	460d      	mov	r5, r1
 800db7c:	4614      	mov	r4, r2
 800db7e:	d50e      	bpl.n	800db9e <_svfiprintf_r+0x32>
 800db80:	690b      	ldr	r3, [r1, #16]
 800db82:	b963      	cbnz	r3, 800db9e <_svfiprintf_r+0x32>
 800db84:	2140      	movs	r1, #64	; 0x40
 800db86:	f7ff f809 	bl	800cb9c <_malloc_r>
 800db8a:	6028      	str	r0, [r5, #0]
 800db8c:	6128      	str	r0, [r5, #16]
 800db8e:	b920      	cbnz	r0, 800db9a <_svfiprintf_r+0x2e>
 800db90:	230c      	movs	r3, #12
 800db92:	603b      	str	r3, [r7, #0]
 800db94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db98:	e0d1      	b.n	800dd3e <_svfiprintf_r+0x1d2>
 800db9a:	2340      	movs	r3, #64	; 0x40
 800db9c:	616b      	str	r3, [r5, #20]
 800db9e:	2300      	movs	r3, #0
 800dba0:	9309      	str	r3, [sp, #36]	; 0x24
 800dba2:	2320      	movs	r3, #32
 800dba4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dba8:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbac:	2330      	movs	r3, #48	; 0x30
 800dbae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd58 <_svfiprintf_r+0x1ec>
 800dbb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbb6:	f04f 0901 	mov.w	r9, #1
 800dbba:	4623      	mov	r3, r4
 800dbbc:	469a      	mov	sl, r3
 800dbbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbc2:	b10a      	cbz	r2, 800dbc8 <_svfiprintf_r+0x5c>
 800dbc4:	2a25      	cmp	r2, #37	; 0x25
 800dbc6:	d1f9      	bne.n	800dbbc <_svfiprintf_r+0x50>
 800dbc8:	ebba 0b04 	subs.w	fp, sl, r4
 800dbcc:	d00b      	beq.n	800dbe6 <_svfiprintf_r+0x7a>
 800dbce:	465b      	mov	r3, fp
 800dbd0:	4622      	mov	r2, r4
 800dbd2:	4629      	mov	r1, r5
 800dbd4:	4638      	mov	r0, r7
 800dbd6:	f003 faca 	bl	801116e <__ssputs_r>
 800dbda:	3001      	adds	r0, #1
 800dbdc:	f000 80aa 	beq.w	800dd34 <_svfiprintf_r+0x1c8>
 800dbe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbe2:	445a      	add	r2, fp
 800dbe4:	9209      	str	r2, [sp, #36]	; 0x24
 800dbe6:	f89a 3000 	ldrb.w	r3, [sl]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f000 80a2 	beq.w	800dd34 <_svfiprintf_r+0x1c8>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbfa:	f10a 0a01 	add.w	sl, sl, #1
 800dbfe:	9304      	str	r3, [sp, #16]
 800dc00:	9307      	str	r3, [sp, #28]
 800dc02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc06:	931a      	str	r3, [sp, #104]	; 0x68
 800dc08:	4654      	mov	r4, sl
 800dc0a:	2205      	movs	r2, #5
 800dc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc10:	4851      	ldr	r0, [pc, #324]	; (800dd58 <_svfiprintf_r+0x1ec>)
 800dc12:	f7f2 fac5 	bl	80001a0 <memchr>
 800dc16:	9a04      	ldr	r2, [sp, #16]
 800dc18:	b9d8      	cbnz	r0, 800dc52 <_svfiprintf_r+0xe6>
 800dc1a:	06d0      	lsls	r0, r2, #27
 800dc1c:	bf44      	itt	mi
 800dc1e:	2320      	movmi	r3, #32
 800dc20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc24:	0711      	lsls	r1, r2, #28
 800dc26:	bf44      	itt	mi
 800dc28:	232b      	movmi	r3, #43	; 0x2b
 800dc2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc2e:	f89a 3000 	ldrb.w	r3, [sl]
 800dc32:	2b2a      	cmp	r3, #42	; 0x2a
 800dc34:	d015      	beq.n	800dc62 <_svfiprintf_r+0xf6>
 800dc36:	9a07      	ldr	r2, [sp, #28]
 800dc38:	4654      	mov	r4, sl
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	f04f 0c0a 	mov.w	ip, #10
 800dc40:	4621      	mov	r1, r4
 800dc42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc46:	3b30      	subs	r3, #48	; 0x30
 800dc48:	2b09      	cmp	r3, #9
 800dc4a:	d94e      	bls.n	800dcea <_svfiprintf_r+0x17e>
 800dc4c:	b1b0      	cbz	r0, 800dc7c <_svfiprintf_r+0x110>
 800dc4e:	9207      	str	r2, [sp, #28]
 800dc50:	e014      	b.n	800dc7c <_svfiprintf_r+0x110>
 800dc52:	eba0 0308 	sub.w	r3, r0, r8
 800dc56:	fa09 f303 	lsl.w	r3, r9, r3
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	9304      	str	r3, [sp, #16]
 800dc5e:	46a2      	mov	sl, r4
 800dc60:	e7d2      	b.n	800dc08 <_svfiprintf_r+0x9c>
 800dc62:	9b03      	ldr	r3, [sp, #12]
 800dc64:	1d19      	adds	r1, r3, #4
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	9103      	str	r1, [sp, #12]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	bfbb      	ittet	lt
 800dc6e:	425b      	neglt	r3, r3
 800dc70:	f042 0202 	orrlt.w	r2, r2, #2
 800dc74:	9307      	strge	r3, [sp, #28]
 800dc76:	9307      	strlt	r3, [sp, #28]
 800dc78:	bfb8      	it	lt
 800dc7a:	9204      	strlt	r2, [sp, #16]
 800dc7c:	7823      	ldrb	r3, [r4, #0]
 800dc7e:	2b2e      	cmp	r3, #46	; 0x2e
 800dc80:	d10c      	bne.n	800dc9c <_svfiprintf_r+0x130>
 800dc82:	7863      	ldrb	r3, [r4, #1]
 800dc84:	2b2a      	cmp	r3, #42	; 0x2a
 800dc86:	d135      	bne.n	800dcf4 <_svfiprintf_r+0x188>
 800dc88:	9b03      	ldr	r3, [sp, #12]
 800dc8a:	1d1a      	adds	r2, r3, #4
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	9203      	str	r2, [sp, #12]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	bfb8      	it	lt
 800dc94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dc98:	3402      	adds	r4, #2
 800dc9a:	9305      	str	r3, [sp, #20]
 800dc9c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800dd5c <_svfiprintf_r+0x1f0>
 800dca0:	7821      	ldrb	r1, [r4, #0]
 800dca2:	2203      	movs	r2, #3
 800dca4:	4650      	mov	r0, sl
 800dca6:	f7f2 fa7b 	bl	80001a0 <memchr>
 800dcaa:	b140      	cbz	r0, 800dcbe <_svfiprintf_r+0x152>
 800dcac:	2340      	movs	r3, #64	; 0x40
 800dcae:	eba0 000a 	sub.w	r0, r0, sl
 800dcb2:	fa03 f000 	lsl.w	r0, r3, r0
 800dcb6:	9b04      	ldr	r3, [sp, #16]
 800dcb8:	4303      	orrs	r3, r0
 800dcba:	3401      	adds	r4, #1
 800dcbc:	9304      	str	r3, [sp, #16]
 800dcbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcc2:	4827      	ldr	r0, [pc, #156]	; (800dd60 <_svfiprintf_r+0x1f4>)
 800dcc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcc8:	2206      	movs	r2, #6
 800dcca:	f7f2 fa69 	bl	80001a0 <memchr>
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d038      	beq.n	800dd44 <_svfiprintf_r+0x1d8>
 800dcd2:	4b24      	ldr	r3, [pc, #144]	; (800dd64 <_svfiprintf_r+0x1f8>)
 800dcd4:	bb1b      	cbnz	r3, 800dd1e <_svfiprintf_r+0x1b2>
 800dcd6:	9b03      	ldr	r3, [sp, #12]
 800dcd8:	3307      	adds	r3, #7
 800dcda:	f023 0307 	bic.w	r3, r3, #7
 800dcde:	3308      	adds	r3, #8
 800dce0:	9303      	str	r3, [sp, #12]
 800dce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce4:	4433      	add	r3, r6
 800dce6:	9309      	str	r3, [sp, #36]	; 0x24
 800dce8:	e767      	b.n	800dbba <_svfiprintf_r+0x4e>
 800dcea:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcee:	460c      	mov	r4, r1
 800dcf0:	2001      	movs	r0, #1
 800dcf2:	e7a5      	b.n	800dc40 <_svfiprintf_r+0xd4>
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	3401      	adds	r4, #1
 800dcf8:	9305      	str	r3, [sp, #20]
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	f04f 0c0a 	mov.w	ip, #10
 800dd00:	4620      	mov	r0, r4
 800dd02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd06:	3a30      	subs	r2, #48	; 0x30
 800dd08:	2a09      	cmp	r2, #9
 800dd0a:	d903      	bls.n	800dd14 <_svfiprintf_r+0x1a8>
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d0c5      	beq.n	800dc9c <_svfiprintf_r+0x130>
 800dd10:	9105      	str	r1, [sp, #20]
 800dd12:	e7c3      	b.n	800dc9c <_svfiprintf_r+0x130>
 800dd14:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd18:	4604      	mov	r4, r0
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	e7f0      	b.n	800dd00 <_svfiprintf_r+0x194>
 800dd1e:	ab03      	add	r3, sp, #12
 800dd20:	9300      	str	r3, [sp, #0]
 800dd22:	462a      	mov	r2, r5
 800dd24:	4b10      	ldr	r3, [pc, #64]	; (800dd68 <_svfiprintf_r+0x1fc>)
 800dd26:	a904      	add	r1, sp, #16
 800dd28:	4638      	mov	r0, r7
 800dd2a:	f7fe ff91 	bl	800cc50 <_printf_float>
 800dd2e:	1c42      	adds	r2, r0, #1
 800dd30:	4606      	mov	r6, r0
 800dd32:	d1d6      	bne.n	800dce2 <_svfiprintf_r+0x176>
 800dd34:	89ab      	ldrh	r3, [r5, #12]
 800dd36:	065b      	lsls	r3, r3, #25
 800dd38:	f53f af2c 	bmi.w	800db94 <_svfiprintf_r+0x28>
 800dd3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd3e:	b01d      	add	sp, #116	; 0x74
 800dd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd44:	ab03      	add	r3, sp, #12
 800dd46:	9300      	str	r3, [sp, #0]
 800dd48:	462a      	mov	r2, r5
 800dd4a:	4b07      	ldr	r3, [pc, #28]	; (800dd68 <_svfiprintf_r+0x1fc>)
 800dd4c:	a904      	add	r1, sp, #16
 800dd4e:	4638      	mov	r0, r7
 800dd50:	f7ff f9a8 	bl	800d0a4 <_printf_i>
 800dd54:	e7eb      	b.n	800dd2e <_svfiprintf_r+0x1c2>
 800dd56:	bf00      	nop
 800dd58:	08013747 	.word	0x08013747
 800dd5c:	0801374d 	.word	0x0801374d
 800dd60:	08013751 	.word	0x08013751
 800dd64:	0800cc51 	.word	0x0800cc51
 800dd68:	0801116f 	.word	0x0801116f

0800dd6c <_vfiprintf_r>:
 800dd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd70:	460d      	mov	r5, r1
 800dd72:	b09d      	sub	sp, #116	; 0x74
 800dd74:	4614      	mov	r4, r2
 800dd76:	4698      	mov	r8, r3
 800dd78:	4606      	mov	r6, r0
 800dd7a:	b118      	cbz	r0, 800dd84 <_vfiprintf_r+0x18>
 800dd7c:	6983      	ldr	r3, [r0, #24]
 800dd7e:	b90b      	cbnz	r3, 800dd84 <_vfiprintf_r+0x18>
 800dd80:	f000 fae4 	bl	800e34c <__sinit>
 800dd84:	4b89      	ldr	r3, [pc, #548]	; (800dfac <_vfiprintf_r+0x240>)
 800dd86:	429d      	cmp	r5, r3
 800dd88:	d11b      	bne.n	800ddc2 <_vfiprintf_r+0x56>
 800dd8a:	6875      	ldr	r5, [r6, #4]
 800dd8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd8e:	07d9      	lsls	r1, r3, #31
 800dd90:	d405      	bmi.n	800dd9e <_vfiprintf_r+0x32>
 800dd92:	89ab      	ldrh	r3, [r5, #12]
 800dd94:	059a      	lsls	r2, r3, #22
 800dd96:	d402      	bmi.n	800dd9e <_vfiprintf_r+0x32>
 800dd98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd9a:	f001 f908 	bl	800efae <__retarget_lock_acquire_recursive>
 800dd9e:	89ab      	ldrh	r3, [r5, #12]
 800dda0:	071b      	lsls	r3, r3, #28
 800dda2:	d501      	bpl.n	800dda8 <_vfiprintf_r+0x3c>
 800dda4:	692b      	ldr	r3, [r5, #16]
 800dda6:	b9eb      	cbnz	r3, 800dde4 <_vfiprintf_r+0x78>
 800dda8:	4629      	mov	r1, r5
 800ddaa:	4630      	mov	r0, r6
 800ddac:	f000 f960 	bl	800e070 <__swsetup_r>
 800ddb0:	b1c0      	cbz	r0, 800dde4 <_vfiprintf_r+0x78>
 800ddb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddb4:	07dc      	lsls	r4, r3, #31
 800ddb6:	d50e      	bpl.n	800ddd6 <_vfiprintf_r+0x6a>
 800ddb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddbc:	b01d      	add	sp, #116	; 0x74
 800ddbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc2:	4b7b      	ldr	r3, [pc, #492]	; (800dfb0 <_vfiprintf_r+0x244>)
 800ddc4:	429d      	cmp	r5, r3
 800ddc6:	d101      	bne.n	800ddcc <_vfiprintf_r+0x60>
 800ddc8:	68b5      	ldr	r5, [r6, #8]
 800ddca:	e7df      	b.n	800dd8c <_vfiprintf_r+0x20>
 800ddcc:	4b79      	ldr	r3, [pc, #484]	; (800dfb4 <_vfiprintf_r+0x248>)
 800ddce:	429d      	cmp	r5, r3
 800ddd0:	bf08      	it	eq
 800ddd2:	68f5      	ldreq	r5, [r6, #12]
 800ddd4:	e7da      	b.n	800dd8c <_vfiprintf_r+0x20>
 800ddd6:	89ab      	ldrh	r3, [r5, #12]
 800ddd8:	0598      	lsls	r0, r3, #22
 800ddda:	d4ed      	bmi.n	800ddb8 <_vfiprintf_r+0x4c>
 800dddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddde:	f001 f8ee 	bl	800efbe <__retarget_lock_release_recursive>
 800dde2:	e7e9      	b.n	800ddb8 <_vfiprintf_r+0x4c>
 800dde4:	2300      	movs	r3, #0
 800dde6:	9309      	str	r3, [sp, #36]	; 0x24
 800dde8:	2320      	movs	r3, #32
 800ddea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddee:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddf2:	2330      	movs	r3, #48	; 0x30
 800ddf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dfb8 <_vfiprintf_r+0x24c>
 800ddf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddfc:	f04f 0901 	mov.w	r9, #1
 800de00:	4623      	mov	r3, r4
 800de02:	469a      	mov	sl, r3
 800de04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de08:	b10a      	cbz	r2, 800de0e <_vfiprintf_r+0xa2>
 800de0a:	2a25      	cmp	r2, #37	; 0x25
 800de0c:	d1f9      	bne.n	800de02 <_vfiprintf_r+0x96>
 800de0e:	ebba 0b04 	subs.w	fp, sl, r4
 800de12:	d00b      	beq.n	800de2c <_vfiprintf_r+0xc0>
 800de14:	465b      	mov	r3, fp
 800de16:	4622      	mov	r2, r4
 800de18:	4629      	mov	r1, r5
 800de1a:	4630      	mov	r0, r6
 800de1c:	f003 fa17 	bl	801124e <__sfputs_r>
 800de20:	3001      	adds	r0, #1
 800de22:	f000 80aa 	beq.w	800df7a <_vfiprintf_r+0x20e>
 800de26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de28:	445a      	add	r2, fp
 800de2a:	9209      	str	r2, [sp, #36]	; 0x24
 800de2c:	f89a 3000 	ldrb.w	r3, [sl]
 800de30:	2b00      	cmp	r3, #0
 800de32:	f000 80a2 	beq.w	800df7a <_vfiprintf_r+0x20e>
 800de36:	2300      	movs	r3, #0
 800de38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de40:	f10a 0a01 	add.w	sl, sl, #1
 800de44:	9304      	str	r3, [sp, #16]
 800de46:	9307      	str	r3, [sp, #28]
 800de48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de4c:	931a      	str	r3, [sp, #104]	; 0x68
 800de4e:	4654      	mov	r4, sl
 800de50:	2205      	movs	r2, #5
 800de52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de56:	4858      	ldr	r0, [pc, #352]	; (800dfb8 <_vfiprintf_r+0x24c>)
 800de58:	f7f2 f9a2 	bl	80001a0 <memchr>
 800de5c:	9a04      	ldr	r2, [sp, #16]
 800de5e:	b9d8      	cbnz	r0, 800de98 <_vfiprintf_r+0x12c>
 800de60:	06d1      	lsls	r1, r2, #27
 800de62:	bf44      	itt	mi
 800de64:	2320      	movmi	r3, #32
 800de66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de6a:	0713      	lsls	r3, r2, #28
 800de6c:	bf44      	itt	mi
 800de6e:	232b      	movmi	r3, #43	; 0x2b
 800de70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de74:	f89a 3000 	ldrb.w	r3, [sl]
 800de78:	2b2a      	cmp	r3, #42	; 0x2a
 800de7a:	d015      	beq.n	800dea8 <_vfiprintf_r+0x13c>
 800de7c:	9a07      	ldr	r2, [sp, #28]
 800de7e:	4654      	mov	r4, sl
 800de80:	2000      	movs	r0, #0
 800de82:	f04f 0c0a 	mov.w	ip, #10
 800de86:	4621      	mov	r1, r4
 800de88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de8c:	3b30      	subs	r3, #48	; 0x30
 800de8e:	2b09      	cmp	r3, #9
 800de90:	d94e      	bls.n	800df30 <_vfiprintf_r+0x1c4>
 800de92:	b1b0      	cbz	r0, 800dec2 <_vfiprintf_r+0x156>
 800de94:	9207      	str	r2, [sp, #28]
 800de96:	e014      	b.n	800dec2 <_vfiprintf_r+0x156>
 800de98:	eba0 0308 	sub.w	r3, r0, r8
 800de9c:	fa09 f303 	lsl.w	r3, r9, r3
 800dea0:	4313      	orrs	r3, r2
 800dea2:	9304      	str	r3, [sp, #16]
 800dea4:	46a2      	mov	sl, r4
 800dea6:	e7d2      	b.n	800de4e <_vfiprintf_r+0xe2>
 800dea8:	9b03      	ldr	r3, [sp, #12]
 800deaa:	1d19      	adds	r1, r3, #4
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	9103      	str	r1, [sp, #12]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	bfbb      	ittet	lt
 800deb4:	425b      	neglt	r3, r3
 800deb6:	f042 0202 	orrlt.w	r2, r2, #2
 800deba:	9307      	strge	r3, [sp, #28]
 800debc:	9307      	strlt	r3, [sp, #28]
 800debe:	bfb8      	it	lt
 800dec0:	9204      	strlt	r2, [sp, #16]
 800dec2:	7823      	ldrb	r3, [r4, #0]
 800dec4:	2b2e      	cmp	r3, #46	; 0x2e
 800dec6:	d10c      	bne.n	800dee2 <_vfiprintf_r+0x176>
 800dec8:	7863      	ldrb	r3, [r4, #1]
 800deca:	2b2a      	cmp	r3, #42	; 0x2a
 800decc:	d135      	bne.n	800df3a <_vfiprintf_r+0x1ce>
 800dece:	9b03      	ldr	r3, [sp, #12]
 800ded0:	1d1a      	adds	r2, r3, #4
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	9203      	str	r2, [sp, #12]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	bfb8      	it	lt
 800deda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dede:	3402      	adds	r4, #2
 800dee0:	9305      	str	r3, [sp, #20]
 800dee2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800dfbc <_vfiprintf_r+0x250>
 800dee6:	7821      	ldrb	r1, [r4, #0]
 800dee8:	2203      	movs	r2, #3
 800deea:	4650      	mov	r0, sl
 800deec:	f7f2 f958 	bl	80001a0 <memchr>
 800def0:	b140      	cbz	r0, 800df04 <_vfiprintf_r+0x198>
 800def2:	2340      	movs	r3, #64	; 0x40
 800def4:	eba0 000a 	sub.w	r0, r0, sl
 800def8:	fa03 f000 	lsl.w	r0, r3, r0
 800defc:	9b04      	ldr	r3, [sp, #16]
 800defe:	4303      	orrs	r3, r0
 800df00:	3401      	adds	r4, #1
 800df02:	9304      	str	r3, [sp, #16]
 800df04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df08:	482d      	ldr	r0, [pc, #180]	; (800dfc0 <_vfiprintf_r+0x254>)
 800df0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df0e:	2206      	movs	r2, #6
 800df10:	f7f2 f946 	bl	80001a0 <memchr>
 800df14:	2800      	cmp	r0, #0
 800df16:	d03f      	beq.n	800df98 <_vfiprintf_r+0x22c>
 800df18:	4b2a      	ldr	r3, [pc, #168]	; (800dfc4 <_vfiprintf_r+0x258>)
 800df1a:	bb1b      	cbnz	r3, 800df64 <_vfiprintf_r+0x1f8>
 800df1c:	9b03      	ldr	r3, [sp, #12]
 800df1e:	3307      	adds	r3, #7
 800df20:	f023 0307 	bic.w	r3, r3, #7
 800df24:	3308      	adds	r3, #8
 800df26:	9303      	str	r3, [sp, #12]
 800df28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df2a:	443b      	add	r3, r7
 800df2c:	9309      	str	r3, [sp, #36]	; 0x24
 800df2e:	e767      	b.n	800de00 <_vfiprintf_r+0x94>
 800df30:	fb0c 3202 	mla	r2, ip, r2, r3
 800df34:	460c      	mov	r4, r1
 800df36:	2001      	movs	r0, #1
 800df38:	e7a5      	b.n	800de86 <_vfiprintf_r+0x11a>
 800df3a:	2300      	movs	r3, #0
 800df3c:	3401      	adds	r4, #1
 800df3e:	9305      	str	r3, [sp, #20]
 800df40:	4619      	mov	r1, r3
 800df42:	f04f 0c0a 	mov.w	ip, #10
 800df46:	4620      	mov	r0, r4
 800df48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df4c:	3a30      	subs	r2, #48	; 0x30
 800df4e:	2a09      	cmp	r2, #9
 800df50:	d903      	bls.n	800df5a <_vfiprintf_r+0x1ee>
 800df52:	2b00      	cmp	r3, #0
 800df54:	d0c5      	beq.n	800dee2 <_vfiprintf_r+0x176>
 800df56:	9105      	str	r1, [sp, #20]
 800df58:	e7c3      	b.n	800dee2 <_vfiprintf_r+0x176>
 800df5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800df5e:	4604      	mov	r4, r0
 800df60:	2301      	movs	r3, #1
 800df62:	e7f0      	b.n	800df46 <_vfiprintf_r+0x1da>
 800df64:	ab03      	add	r3, sp, #12
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	462a      	mov	r2, r5
 800df6a:	4b17      	ldr	r3, [pc, #92]	; (800dfc8 <_vfiprintf_r+0x25c>)
 800df6c:	a904      	add	r1, sp, #16
 800df6e:	4630      	mov	r0, r6
 800df70:	f7fe fe6e 	bl	800cc50 <_printf_float>
 800df74:	4607      	mov	r7, r0
 800df76:	1c78      	adds	r0, r7, #1
 800df78:	d1d6      	bne.n	800df28 <_vfiprintf_r+0x1bc>
 800df7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df7c:	07d9      	lsls	r1, r3, #31
 800df7e:	d405      	bmi.n	800df8c <_vfiprintf_r+0x220>
 800df80:	89ab      	ldrh	r3, [r5, #12]
 800df82:	059a      	lsls	r2, r3, #22
 800df84:	d402      	bmi.n	800df8c <_vfiprintf_r+0x220>
 800df86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df88:	f001 f819 	bl	800efbe <__retarget_lock_release_recursive>
 800df8c:	89ab      	ldrh	r3, [r5, #12]
 800df8e:	065b      	lsls	r3, r3, #25
 800df90:	f53f af12 	bmi.w	800ddb8 <_vfiprintf_r+0x4c>
 800df94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df96:	e711      	b.n	800ddbc <_vfiprintf_r+0x50>
 800df98:	ab03      	add	r3, sp, #12
 800df9a:	9300      	str	r3, [sp, #0]
 800df9c:	462a      	mov	r2, r5
 800df9e:	4b0a      	ldr	r3, [pc, #40]	; (800dfc8 <_vfiprintf_r+0x25c>)
 800dfa0:	a904      	add	r1, sp, #16
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	f7ff f87e 	bl	800d0a4 <_printf_i>
 800dfa8:	e7e4      	b.n	800df74 <_vfiprintf_r+0x208>
 800dfaa:	bf00      	nop
 800dfac:	08013450 	.word	0x08013450
 800dfb0:	08013470 	.word	0x08013470
 800dfb4:	08013430 	.word	0x08013430
 800dfb8:	08013747 	.word	0x08013747
 800dfbc:	0801374d 	.word	0x0801374d
 800dfc0:	08013751 	.word	0x08013751
 800dfc4:	0800cc51 	.word	0x0800cc51
 800dfc8:	0801124f 	.word	0x0801124f

0800dfcc <__swbuf_r>:
 800dfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfce:	460e      	mov	r6, r1
 800dfd0:	4614      	mov	r4, r2
 800dfd2:	4605      	mov	r5, r0
 800dfd4:	b118      	cbz	r0, 800dfde <__swbuf_r+0x12>
 800dfd6:	6983      	ldr	r3, [r0, #24]
 800dfd8:	b90b      	cbnz	r3, 800dfde <__swbuf_r+0x12>
 800dfda:	f000 f9b7 	bl	800e34c <__sinit>
 800dfde:	4b21      	ldr	r3, [pc, #132]	; (800e064 <__swbuf_r+0x98>)
 800dfe0:	429c      	cmp	r4, r3
 800dfe2:	d12b      	bne.n	800e03c <__swbuf_r+0x70>
 800dfe4:	686c      	ldr	r4, [r5, #4]
 800dfe6:	69a3      	ldr	r3, [r4, #24]
 800dfe8:	60a3      	str	r3, [r4, #8]
 800dfea:	89a3      	ldrh	r3, [r4, #12]
 800dfec:	071a      	lsls	r2, r3, #28
 800dfee:	d52f      	bpl.n	800e050 <__swbuf_r+0x84>
 800dff0:	6923      	ldr	r3, [r4, #16]
 800dff2:	b36b      	cbz	r3, 800e050 <__swbuf_r+0x84>
 800dff4:	6923      	ldr	r3, [r4, #16]
 800dff6:	6820      	ldr	r0, [r4, #0]
 800dff8:	1ac0      	subs	r0, r0, r3
 800dffa:	6963      	ldr	r3, [r4, #20]
 800dffc:	b2f6      	uxtb	r6, r6
 800dffe:	4283      	cmp	r3, r0
 800e000:	4637      	mov	r7, r6
 800e002:	dc04      	bgt.n	800e00e <__swbuf_r+0x42>
 800e004:	4621      	mov	r1, r4
 800e006:	4628      	mov	r0, r5
 800e008:	f000 f922 	bl	800e250 <_fflush_r>
 800e00c:	bb30      	cbnz	r0, 800e05c <__swbuf_r+0x90>
 800e00e:	68a3      	ldr	r3, [r4, #8]
 800e010:	3b01      	subs	r3, #1
 800e012:	60a3      	str	r3, [r4, #8]
 800e014:	6823      	ldr	r3, [r4, #0]
 800e016:	1c5a      	adds	r2, r3, #1
 800e018:	6022      	str	r2, [r4, #0]
 800e01a:	701e      	strb	r6, [r3, #0]
 800e01c:	6963      	ldr	r3, [r4, #20]
 800e01e:	3001      	adds	r0, #1
 800e020:	4283      	cmp	r3, r0
 800e022:	d004      	beq.n	800e02e <__swbuf_r+0x62>
 800e024:	89a3      	ldrh	r3, [r4, #12]
 800e026:	07db      	lsls	r3, r3, #31
 800e028:	d506      	bpl.n	800e038 <__swbuf_r+0x6c>
 800e02a:	2e0a      	cmp	r6, #10
 800e02c:	d104      	bne.n	800e038 <__swbuf_r+0x6c>
 800e02e:	4621      	mov	r1, r4
 800e030:	4628      	mov	r0, r5
 800e032:	f000 f90d 	bl	800e250 <_fflush_r>
 800e036:	b988      	cbnz	r0, 800e05c <__swbuf_r+0x90>
 800e038:	4638      	mov	r0, r7
 800e03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e03c:	4b0a      	ldr	r3, [pc, #40]	; (800e068 <__swbuf_r+0x9c>)
 800e03e:	429c      	cmp	r4, r3
 800e040:	d101      	bne.n	800e046 <__swbuf_r+0x7a>
 800e042:	68ac      	ldr	r4, [r5, #8]
 800e044:	e7cf      	b.n	800dfe6 <__swbuf_r+0x1a>
 800e046:	4b09      	ldr	r3, [pc, #36]	; (800e06c <__swbuf_r+0xa0>)
 800e048:	429c      	cmp	r4, r3
 800e04a:	bf08      	it	eq
 800e04c:	68ec      	ldreq	r4, [r5, #12]
 800e04e:	e7ca      	b.n	800dfe6 <__swbuf_r+0x1a>
 800e050:	4621      	mov	r1, r4
 800e052:	4628      	mov	r0, r5
 800e054:	f000 f80c 	bl	800e070 <__swsetup_r>
 800e058:	2800      	cmp	r0, #0
 800e05a:	d0cb      	beq.n	800dff4 <__swbuf_r+0x28>
 800e05c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e060:	e7ea      	b.n	800e038 <__swbuf_r+0x6c>
 800e062:	bf00      	nop
 800e064:	08013450 	.word	0x08013450
 800e068:	08013470 	.word	0x08013470
 800e06c:	08013430 	.word	0x08013430

0800e070 <__swsetup_r>:
 800e070:	4b32      	ldr	r3, [pc, #200]	; (800e13c <__swsetup_r+0xcc>)
 800e072:	b570      	push	{r4, r5, r6, lr}
 800e074:	681d      	ldr	r5, [r3, #0]
 800e076:	4606      	mov	r6, r0
 800e078:	460c      	mov	r4, r1
 800e07a:	b125      	cbz	r5, 800e086 <__swsetup_r+0x16>
 800e07c:	69ab      	ldr	r3, [r5, #24]
 800e07e:	b913      	cbnz	r3, 800e086 <__swsetup_r+0x16>
 800e080:	4628      	mov	r0, r5
 800e082:	f000 f963 	bl	800e34c <__sinit>
 800e086:	4b2e      	ldr	r3, [pc, #184]	; (800e140 <__swsetup_r+0xd0>)
 800e088:	429c      	cmp	r4, r3
 800e08a:	d10f      	bne.n	800e0ac <__swsetup_r+0x3c>
 800e08c:	686c      	ldr	r4, [r5, #4]
 800e08e:	89a3      	ldrh	r3, [r4, #12]
 800e090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e094:	0719      	lsls	r1, r3, #28
 800e096:	d42c      	bmi.n	800e0f2 <__swsetup_r+0x82>
 800e098:	06dd      	lsls	r5, r3, #27
 800e09a:	d411      	bmi.n	800e0c0 <__swsetup_r+0x50>
 800e09c:	2309      	movs	r3, #9
 800e09e:	6033      	str	r3, [r6, #0]
 800e0a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e0a4:	81a3      	strh	r3, [r4, #12]
 800e0a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0aa:	e03e      	b.n	800e12a <__swsetup_r+0xba>
 800e0ac:	4b25      	ldr	r3, [pc, #148]	; (800e144 <__swsetup_r+0xd4>)
 800e0ae:	429c      	cmp	r4, r3
 800e0b0:	d101      	bne.n	800e0b6 <__swsetup_r+0x46>
 800e0b2:	68ac      	ldr	r4, [r5, #8]
 800e0b4:	e7eb      	b.n	800e08e <__swsetup_r+0x1e>
 800e0b6:	4b24      	ldr	r3, [pc, #144]	; (800e148 <__swsetup_r+0xd8>)
 800e0b8:	429c      	cmp	r4, r3
 800e0ba:	bf08      	it	eq
 800e0bc:	68ec      	ldreq	r4, [r5, #12]
 800e0be:	e7e6      	b.n	800e08e <__swsetup_r+0x1e>
 800e0c0:	0758      	lsls	r0, r3, #29
 800e0c2:	d512      	bpl.n	800e0ea <__swsetup_r+0x7a>
 800e0c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0c6:	b141      	cbz	r1, 800e0da <__swsetup_r+0x6a>
 800e0c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0cc:	4299      	cmp	r1, r3
 800e0ce:	d002      	beq.n	800e0d6 <__swsetup_r+0x66>
 800e0d0:	4630      	mov	r0, r6
 800e0d2:	f7fe fd19 	bl	800cb08 <_free_r>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	6363      	str	r3, [r4, #52]	; 0x34
 800e0da:	89a3      	ldrh	r3, [r4, #12]
 800e0dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0e0:	81a3      	strh	r3, [r4, #12]
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	6063      	str	r3, [r4, #4]
 800e0e6:	6923      	ldr	r3, [r4, #16]
 800e0e8:	6023      	str	r3, [r4, #0]
 800e0ea:	89a3      	ldrh	r3, [r4, #12]
 800e0ec:	f043 0308 	orr.w	r3, r3, #8
 800e0f0:	81a3      	strh	r3, [r4, #12]
 800e0f2:	6923      	ldr	r3, [r4, #16]
 800e0f4:	b94b      	cbnz	r3, 800e10a <__swsetup_r+0x9a>
 800e0f6:	89a3      	ldrh	r3, [r4, #12]
 800e0f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e0fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e100:	d003      	beq.n	800e10a <__swsetup_r+0x9a>
 800e102:	4621      	mov	r1, r4
 800e104:	4630      	mov	r0, r6
 800e106:	f000 f99f 	bl	800e448 <__smakebuf_r>
 800e10a:	89a0      	ldrh	r0, [r4, #12]
 800e10c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e110:	f010 0301 	ands.w	r3, r0, #1
 800e114:	d00a      	beq.n	800e12c <__swsetup_r+0xbc>
 800e116:	2300      	movs	r3, #0
 800e118:	60a3      	str	r3, [r4, #8]
 800e11a:	6963      	ldr	r3, [r4, #20]
 800e11c:	425b      	negs	r3, r3
 800e11e:	61a3      	str	r3, [r4, #24]
 800e120:	6923      	ldr	r3, [r4, #16]
 800e122:	b943      	cbnz	r3, 800e136 <__swsetup_r+0xc6>
 800e124:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e128:	d1ba      	bne.n	800e0a0 <__swsetup_r+0x30>
 800e12a:	bd70      	pop	{r4, r5, r6, pc}
 800e12c:	0781      	lsls	r1, r0, #30
 800e12e:	bf58      	it	pl
 800e130:	6963      	ldrpl	r3, [r4, #20]
 800e132:	60a3      	str	r3, [r4, #8]
 800e134:	e7f4      	b.n	800e120 <__swsetup_r+0xb0>
 800e136:	2000      	movs	r0, #0
 800e138:	e7f7      	b.n	800e12a <__swsetup_r+0xba>
 800e13a:	bf00      	nop
 800e13c:	200003d4 	.word	0x200003d4
 800e140:	08013450 	.word	0x08013450
 800e144:	08013470 	.word	0x08013470
 800e148:	08013430 	.word	0x08013430

0800e14c <__sflush_r>:
 800e14c:	898a      	ldrh	r2, [r1, #12]
 800e14e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e150:	4605      	mov	r5, r0
 800e152:	0710      	lsls	r0, r2, #28
 800e154:	460c      	mov	r4, r1
 800e156:	d457      	bmi.n	800e208 <__sflush_r+0xbc>
 800e158:	684b      	ldr	r3, [r1, #4]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	dc04      	bgt.n	800e168 <__sflush_r+0x1c>
 800e15e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e160:	2b00      	cmp	r3, #0
 800e162:	dc01      	bgt.n	800e168 <__sflush_r+0x1c>
 800e164:	2000      	movs	r0, #0
 800e166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e16a:	2e00      	cmp	r6, #0
 800e16c:	d0fa      	beq.n	800e164 <__sflush_r+0x18>
 800e16e:	2300      	movs	r3, #0
 800e170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e174:	682f      	ldr	r7, [r5, #0]
 800e176:	602b      	str	r3, [r5, #0]
 800e178:	d032      	beq.n	800e1e0 <__sflush_r+0x94>
 800e17a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e17c:	89a3      	ldrh	r3, [r4, #12]
 800e17e:	075a      	lsls	r2, r3, #29
 800e180:	d505      	bpl.n	800e18e <__sflush_r+0x42>
 800e182:	6863      	ldr	r3, [r4, #4]
 800e184:	1ac0      	subs	r0, r0, r3
 800e186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e188:	b10b      	cbz	r3, 800e18e <__sflush_r+0x42>
 800e18a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e18c:	1ac0      	subs	r0, r0, r3
 800e18e:	2300      	movs	r3, #0
 800e190:	4602      	mov	r2, r0
 800e192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e194:	6a21      	ldr	r1, [r4, #32]
 800e196:	4628      	mov	r0, r5
 800e198:	47b0      	blx	r6
 800e19a:	1c43      	adds	r3, r0, #1
 800e19c:	89a3      	ldrh	r3, [r4, #12]
 800e19e:	d106      	bne.n	800e1ae <__sflush_r+0x62>
 800e1a0:	6829      	ldr	r1, [r5, #0]
 800e1a2:	291d      	cmp	r1, #29
 800e1a4:	d82c      	bhi.n	800e200 <__sflush_r+0xb4>
 800e1a6:	4a29      	ldr	r2, [pc, #164]	; (800e24c <__sflush_r+0x100>)
 800e1a8:	40ca      	lsrs	r2, r1
 800e1aa:	07d6      	lsls	r6, r2, #31
 800e1ac:	d528      	bpl.n	800e200 <__sflush_r+0xb4>
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	6062      	str	r2, [r4, #4]
 800e1b2:	04d9      	lsls	r1, r3, #19
 800e1b4:	6922      	ldr	r2, [r4, #16]
 800e1b6:	6022      	str	r2, [r4, #0]
 800e1b8:	d504      	bpl.n	800e1c4 <__sflush_r+0x78>
 800e1ba:	1c42      	adds	r2, r0, #1
 800e1bc:	d101      	bne.n	800e1c2 <__sflush_r+0x76>
 800e1be:	682b      	ldr	r3, [r5, #0]
 800e1c0:	b903      	cbnz	r3, 800e1c4 <__sflush_r+0x78>
 800e1c2:	6560      	str	r0, [r4, #84]	; 0x54
 800e1c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1c6:	602f      	str	r7, [r5, #0]
 800e1c8:	2900      	cmp	r1, #0
 800e1ca:	d0cb      	beq.n	800e164 <__sflush_r+0x18>
 800e1cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1d0:	4299      	cmp	r1, r3
 800e1d2:	d002      	beq.n	800e1da <__sflush_r+0x8e>
 800e1d4:	4628      	mov	r0, r5
 800e1d6:	f7fe fc97 	bl	800cb08 <_free_r>
 800e1da:	2000      	movs	r0, #0
 800e1dc:	6360      	str	r0, [r4, #52]	; 0x34
 800e1de:	e7c2      	b.n	800e166 <__sflush_r+0x1a>
 800e1e0:	6a21      	ldr	r1, [r4, #32]
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	47b0      	blx	r6
 800e1e8:	1c41      	adds	r1, r0, #1
 800e1ea:	d1c7      	bne.n	800e17c <__sflush_r+0x30>
 800e1ec:	682b      	ldr	r3, [r5, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d0c4      	beq.n	800e17c <__sflush_r+0x30>
 800e1f2:	2b1d      	cmp	r3, #29
 800e1f4:	d001      	beq.n	800e1fa <__sflush_r+0xae>
 800e1f6:	2b16      	cmp	r3, #22
 800e1f8:	d101      	bne.n	800e1fe <__sflush_r+0xb2>
 800e1fa:	602f      	str	r7, [r5, #0]
 800e1fc:	e7b2      	b.n	800e164 <__sflush_r+0x18>
 800e1fe:	89a3      	ldrh	r3, [r4, #12]
 800e200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e204:	81a3      	strh	r3, [r4, #12]
 800e206:	e7ae      	b.n	800e166 <__sflush_r+0x1a>
 800e208:	690f      	ldr	r7, [r1, #16]
 800e20a:	2f00      	cmp	r7, #0
 800e20c:	d0aa      	beq.n	800e164 <__sflush_r+0x18>
 800e20e:	0793      	lsls	r3, r2, #30
 800e210:	680e      	ldr	r6, [r1, #0]
 800e212:	bf08      	it	eq
 800e214:	694b      	ldreq	r3, [r1, #20]
 800e216:	600f      	str	r7, [r1, #0]
 800e218:	bf18      	it	ne
 800e21a:	2300      	movne	r3, #0
 800e21c:	1bf6      	subs	r6, r6, r7
 800e21e:	608b      	str	r3, [r1, #8]
 800e220:	2e00      	cmp	r6, #0
 800e222:	dd9f      	ble.n	800e164 <__sflush_r+0x18>
 800e224:	6a21      	ldr	r1, [r4, #32]
 800e226:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e22a:	4633      	mov	r3, r6
 800e22c:	463a      	mov	r2, r7
 800e22e:	4628      	mov	r0, r5
 800e230:	47e0      	blx	ip
 800e232:	2800      	cmp	r0, #0
 800e234:	dc06      	bgt.n	800e244 <__sflush_r+0xf8>
 800e236:	89a3      	ldrh	r3, [r4, #12]
 800e238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e23c:	81a3      	strh	r3, [r4, #12]
 800e23e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e242:	e790      	b.n	800e166 <__sflush_r+0x1a>
 800e244:	4407      	add	r7, r0
 800e246:	1a36      	subs	r6, r6, r0
 800e248:	e7ea      	b.n	800e220 <__sflush_r+0xd4>
 800e24a:	bf00      	nop
 800e24c:	20400001 	.word	0x20400001

0800e250 <_fflush_r>:
 800e250:	b538      	push	{r3, r4, r5, lr}
 800e252:	690b      	ldr	r3, [r1, #16]
 800e254:	4605      	mov	r5, r0
 800e256:	460c      	mov	r4, r1
 800e258:	b913      	cbnz	r3, 800e260 <_fflush_r+0x10>
 800e25a:	2500      	movs	r5, #0
 800e25c:	4628      	mov	r0, r5
 800e25e:	bd38      	pop	{r3, r4, r5, pc}
 800e260:	b118      	cbz	r0, 800e26a <_fflush_r+0x1a>
 800e262:	6983      	ldr	r3, [r0, #24]
 800e264:	b90b      	cbnz	r3, 800e26a <_fflush_r+0x1a>
 800e266:	f000 f871 	bl	800e34c <__sinit>
 800e26a:	4b14      	ldr	r3, [pc, #80]	; (800e2bc <_fflush_r+0x6c>)
 800e26c:	429c      	cmp	r4, r3
 800e26e:	d11b      	bne.n	800e2a8 <_fflush_r+0x58>
 800e270:	686c      	ldr	r4, [r5, #4]
 800e272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d0ef      	beq.n	800e25a <_fflush_r+0xa>
 800e27a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e27c:	07d0      	lsls	r0, r2, #31
 800e27e:	d404      	bmi.n	800e28a <_fflush_r+0x3a>
 800e280:	0599      	lsls	r1, r3, #22
 800e282:	d402      	bmi.n	800e28a <_fflush_r+0x3a>
 800e284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e286:	f000 fe92 	bl	800efae <__retarget_lock_acquire_recursive>
 800e28a:	4628      	mov	r0, r5
 800e28c:	4621      	mov	r1, r4
 800e28e:	f7ff ff5d 	bl	800e14c <__sflush_r>
 800e292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e294:	07da      	lsls	r2, r3, #31
 800e296:	4605      	mov	r5, r0
 800e298:	d4e0      	bmi.n	800e25c <_fflush_r+0xc>
 800e29a:	89a3      	ldrh	r3, [r4, #12]
 800e29c:	059b      	lsls	r3, r3, #22
 800e29e:	d4dd      	bmi.n	800e25c <_fflush_r+0xc>
 800e2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2a2:	f000 fe8c 	bl	800efbe <__retarget_lock_release_recursive>
 800e2a6:	e7d9      	b.n	800e25c <_fflush_r+0xc>
 800e2a8:	4b05      	ldr	r3, [pc, #20]	; (800e2c0 <_fflush_r+0x70>)
 800e2aa:	429c      	cmp	r4, r3
 800e2ac:	d101      	bne.n	800e2b2 <_fflush_r+0x62>
 800e2ae:	68ac      	ldr	r4, [r5, #8]
 800e2b0:	e7df      	b.n	800e272 <_fflush_r+0x22>
 800e2b2:	4b04      	ldr	r3, [pc, #16]	; (800e2c4 <_fflush_r+0x74>)
 800e2b4:	429c      	cmp	r4, r3
 800e2b6:	bf08      	it	eq
 800e2b8:	68ec      	ldreq	r4, [r5, #12]
 800e2ba:	e7da      	b.n	800e272 <_fflush_r+0x22>
 800e2bc:	08013450 	.word	0x08013450
 800e2c0:	08013470 	.word	0x08013470
 800e2c4:	08013430 	.word	0x08013430

0800e2c8 <std>:
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	b510      	push	{r4, lr}
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	e9c0 3300 	strd	r3, r3, [r0]
 800e2d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2d6:	6083      	str	r3, [r0, #8]
 800e2d8:	8181      	strh	r1, [r0, #12]
 800e2da:	6643      	str	r3, [r0, #100]	; 0x64
 800e2dc:	81c2      	strh	r2, [r0, #14]
 800e2de:	6183      	str	r3, [r0, #24]
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	2208      	movs	r2, #8
 800e2e4:	305c      	adds	r0, #92	; 0x5c
 800e2e6:	f002 fcfe 	bl	8010ce6 <memset>
 800e2ea:	4b05      	ldr	r3, [pc, #20]	; (800e300 <std+0x38>)
 800e2ec:	6263      	str	r3, [r4, #36]	; 0x24
 800e2ee:	4b05      	ldr	r3, [pc, #20]	; (800e304 <std+0x3c>)
 800e2f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2f2:	4b05      	ldr	r3, [pc, #20]	; (800e308 <std+0x40>)
 800e2f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2f6:	4b05      	ldr	r3, [pc, #20]	; (800e30c <std+0x44>)
 800e2f8:	6224      	str	r4, [r4, #32]
 800e2fa:	6323      	str	r3, [r4, #48]	; 0x30
 800e2fc:	bd10      	pop	{r4, pc}
 800e2fe:	bf00      	nop
 800e300:	0801142d 	.word	0x0801142d
 800e304:	0801144f 	.word	0x0801144f
 800e308:	08011487 	.word	0x08011487
 800e30c:	080114ab 	.word	0x080114ab

0800e310 <_cleanup_r>:
 800e310:	4901      	ldr	r1, [pc, #4]	; (800e318 <_cleanup_r+0x8>)
 800e312:	f002 bfcb 	b.w	80112ac <_fwalk_reent>
 800e316:	bf00      	nop
 800e318:	0800e251 	.word	0x0800e251

0800e31c <__sfp_lock_acquire>:
 800e31c:	4801      	ldr	r0, [pc, #4]	; (800e324 <__sfp_lock_acquire+0x8>)
 800e31e:	f000 be46 	b.w	800efae <__retarget_lock_acquire_recursive>
 800e322:	bf00      	nop
 800e324:	2000065c 	.word	0x2000065c

0800e328 <__sfp_lock_release>:
 800e328:	4801      	ldr	r0, [pc, #4]	; (800e330 <__sfp_lock_release+0x8>)
 800e32a:	f000 be48 	b.w	800efbe <__retarget_lock_release_recursive>
 800e32e:	bf00      	nop
 800e330:	2000065c 	.word	0x2000065c

0800e334 <__sinit_lock_acquire>:
 800e334:	4801      	ldr	r0, [pc, #4]	; (800e33c <__sinit_lock_acquire+0x8>)
 800e336:	f000 be3a 	b.w	800efae <__retarget_lock_acquire_recursive>
 800e33a:	bf00      	nop
 800e33c:	20000670 	.word	0x20000670

0800e340 <__sinit_lock_release>:
 800e340:	4801      	ldr	r0, [pc, #4]	; (800e348 <__sinit_lock_release+0x8>)
 800e342:	f000 be3c 	b.w	800efbe <__retarget_lock_release_recursive>
 800e346:	bf00      	nop
 800e348:	20000670 	.word	0x20000670

0800e34c <__sinit>:
 800e34c:	b510      	push	{r4, lr}
 800e34e:	4604      	mov	r4, r0
 800e350:	f7ff fff0 	bl	800e334 <__sinit_lock_acquire>
 800e354:	69a3      	ldr	r3, [r4, #24]
 800e356:	b11b      	cbz	r3, 800e360 <__sinit+0x14>
 800e358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e35c:	f7ff bff0 	b.w	800e340 <__sinit_lock_release>
 800e360:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e364:	6523      	str	r3, [r4, #80]	; 0x50
 800e366:	4b13      	ldr	r3, [pc, #76]	; (800e3b4 <__sinit+0x68>)
 800e368:	4a13      	ldr	r2, [pc, #76]	; (800e3b8 <__sinit+0x6c>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e36e:	42a3      	cmp	r3, r4
 800e370:	bf04      	itt	eq
 800e372:	2301      	moveq	r3, #1
 800e374:	61a3      	streq	r3, [r4, #24]
 800e376:	4620      	mov	r0, r4
 800e378:	f000 f820 	bl	800e3bc <__sfp>
 800e37c:	6060      	str	r0, [r4, #4]
 800e37e:	4620      	mov	r0, r4
 800e380:	f000 f81c 	bl	800e3bc <__sfp>
 800e384:	60a0      	str	r0, [r4, #8]
 800e386:	4620      	mov	r0, r4
 800e388:	f000 f818 	bl	800e3bc <__sfp>
 800e38c:	2200      	movs	r2, #0
 800e38e:	60e0      	str	r0, [r4, #12]
 800e390:	2104      	movs	r1, #4
 800e392:	6860      	ldr	r0, [r4, #4]
 800e394:	f7ff ff98 	bl	800e2c8 <std>
 800e398:	68a0      	ldr	r0, [r4, #8]
 800e39a:	2201      	movs	r2, #1
 800e39c:	2109      	movs	r1, #9
 800e39e:	f7ff ff93 	bl	800e2c8 <std>
 800e3a2:	68e0      	ldr	r0, [r4, #12]
 800e3a4:	2202      	movs	r2, #2
 800e3a6:	2112      	movs	r1, #18
 800e3a8:	f7ff ff8e 	bl	800e2c8 <std>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	61a3      	str	r3, [r4, #24]
 800e3b0:	e7d2      	b.n	800e358 <__sinit+0xc>
 800e3b2:	bf00      	nop
 800e3b4:	08013420 	.word	0x08013420
 800e3b8:	0800e311 	.word	0x0800e311

0800e3bc <__sfp>:
 800e3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3be:	4607      	mov	r7, r0
 800e3c0:	f7ff ffac 	bl	800e31c <__sfp_lock_acquire>
 800e3c4:	4b1e      	ldr	r3, [pc, #120]	; (800e440 <__sfp+0x84>)
 800e3c6:	681e      	ldr	r6, [r3, #0]
 800e3c8:	69b3      	ldr	r3, [r6, #24]
 800e3ca:	b913      	cbnz	r3, 800e3d2 <__sfp+0x16>
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f7ff ffbd 	bl	800e34c <__sinit>
 800e3d2:	3648      	adds	r6, #72	; 0x48
 800e3d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	d503      	bpl.n	800e3e4 <__sfp+0x28>
 800e3dc:	6833      	ldr	r3, [r6, #0]
 800e3de:	b30b      	cbz	r3, 800e424 <__sfp+0x68>
 800e3e0:	6836      	ldr	r6, [r6, #0]
 800e3e2:	e7f7      	b.n	800e3d4 <__sfp+0x18>
 800e3e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e3e8:	b9d5      	cbnz	r5, 800e420 <__sfp+0x64>
 800e3ea:	4b16      	ldr	r3, [pc, #88]	; (800e444 <__sfp+0x88>)
 800e3ec:	60e3      	str	r3, [r4, #12]
 800e3ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e3f2:	6665      	str	r5, [r4, #100]	; 0x64
 800e3f4:	f000 fdd2 	bl	800ef9c <__retarget_lock_init_recursive>
 800e3f8:	f7ff ff96 	bl	800e328 <__sfp_lock_release>
 800e3fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e400:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e404:	6025      	str	r5, [r4, #0]
 800e406:	61a5      	str	r5, [r4, #24]
 800e408:	2208      	movs	r2, #8
 800e40a:	4629      	mov	r1, r5
 800e40c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e410:	f002 fc69 	bl	8010ce6 <memset>
 800e414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e418:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e41c:	4620      	mov	r0, r4
 800e41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e420:	3468      	adds	r4, #104	; 0x68
 800e422:	e7d9      	b.n	800e3d8 <__sfp+0x1c>
 800e424:	2104      	movs	r1, #4
 800e426:	4638      	mov	r0, r7
 800e428:	f002 ff2a 	bl	8011280 <__sfmoreglue>
 800e42c:	4604      	mov	r4, r0
 800e42e:	6030      	str	r0, [r6, #0]
 800e430:	2800      	cmp	r0, #0
 800e432:	d1d5      	bne.n	800e3e0 <__sfp+0x24>
 800e434:	f7ff ff78 	bl	800e328 <__sfp_lock_release>
 800e438:	230c      	movs	r3, #12
 800e43a:	603b      	str	r3, [r7, #0]
 800e43c:	e7ee      	b.n	800e41c <__sfp+0x60>
 800e43e:	bf00      	nop
 800e440:	08013420 	.word	0x08013420
 800e444:	ffff0001 	.word	0xffff0001

0800e448 <__smakebuf_r>:
 800e448:	898b      	ldrh	r3, [r1, #12]
 800e44a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e44c:	079d      	lsls	r5, r3, #30
 800e44e:	4606      	mov	r6, r0
 800e450:	460c      	mov	r4, r1
 800e452:	d507      	bpl.n	800e464 <__smakebuf_r+0x1c>
 800e454:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	6123      	str	r3, [r4, #16]
 800e45c:	2301      	movs	r3, #1
 800e45e:	6163      	str	r3, [r4, #20]
 800e460:	b002      	add	sp, #8
 800e462:	bd70      	pop	{r4, r5, r6, pc}
 800e464:	ab01      	add	r3, sp, #4
 800e466:	466a      	mov	r2, sp
 800e468:	f002 ff3f 	bl	80112ea <__swhatbuf_r>
 800e46c:	9900      	ldr	r1, [sp, #0]
 800e46e:	4605      	mov	r5, r0
 800e470:	4630      	mov	r0, r6
 800e472:	f7fe fb93 	bl	800cb9c <_malloc_r>
 800e476:	b948      	cbnz	r0, 800e48c <__smakebuf_r+0x44>
 800e478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e47c:	059a      	lsls	r2, r3, #22
 800e47e:	d4ef      	bmi.n	800e460 <__smakebuf_r+0x18>
 800e480:	f023 0303 	bic.w	r3, r3, #3
 800e484:	f043 0302 	orr.w	r3, r3, #2
 800e488:	81a3      	strh	r3, [r4, #12]
 800e48a:	e7e3      	b.n	800e454 <__smakebuf_r+0xc>
 800e48c:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <__smakebuf_r+0x7c>)
 800e48e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e490:	89a3      	ldrh	r3, [r4, #12]
 800e492:	6020      	str	r0, [r4, #0]
 800e494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e498:	81a3      	strh	r3, [r4, #12]
 800e49a:	9b00      	ldr	r3, [sp, #0]
 800e49c:	6163      	str	r3, [r4, #20]
 800e49e:	9b01      	ldr	r3, [sp, #4]
 800e4a0:	6120      	str	r0, [r4, #16]
 800e4a2:	b15b      	cbz	r3, 800e4bc <__smakebuf_r+0x74>
 800e4a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	f000 f85b 	bl	800e564 <_isatty_r>
 800e4ae:	b128      	cbz	r0, 800e4bc <__smakebuf_r+0x74>
 800e4b0:	89a3      	ldrh	r3, [r4, #12]
 800e4b2:	f023 0303 	bic.w	r3, r3, #3
 800e4b6:	f043 0301 	orr.w	r3, r3, #1
 800e4ba:	81a3      	strh	r3, [r4, #12]
 800e4bc:	89a0      	ldrh	r0, [r4, #12]
 800e4be:	4305      	orrs	r5, r0
 800e4c0:	81a5      	strh	r5, [r4, #12]
 800e4c2:	e7cd      	b.n	800e460 <__smakebuf_r+0x18>
 800e4c4:	0800e311 	.word	0x0800e311

0800e4c8 <raise>:
 800e4c8:	4b02      	ldr	r3, [pc, #8]	; (800e4d4 <raise+0xc>)
 800e4ca:	4601      	mov	r1, r0
 800e4cc:	6818      	ldr	r0, [r3, #0]
 800e4ce:	f002 bf83 	b.w	80113d8 <_raise_r>
 800e4d2:	bf00      	nop
 800e4d4:	200003d4 	.word	0x200003d4

0800e4d8 <_kill_r>:
 800e4d8:	b538      	push	{r3, r4, r5, lr}
 800e4da:	4d07      	ldr	r5, [pc, #28]	; (800e4f8 <_kill_r+0x20>)
 800e4dc:	2300      	movs	r3, #0
 800e4de:	4604      	mov	r4, r0
 800e4e0:	4608      	mov	r0, r1
 800e4e2:	4611      	mov	r1, r2
 800e4e4:	602b      	str	r3, [r5, #0]
 800e4e6:	f000 fd50 	bl	800ef8a <_kill>
 800e4ea:	1c43      	adds	r3, r0, #1
 800e4ec:	d102      	bne.n	800e4f4 <_kill_r+0x1c>
 800e4ee:	682b      	ldr	r3, [r5, #0]
 800e4f0:	b103      	cbz	r3, 800e4f4 <_kill_r+0x1c>
 800e4f2:	6023      	str	r3, [r4, #0]
 800e4f4:	bd38      	pop	{r3, r4, r5, pc}
 800e4f6:	bf00      	nop
 800e4f8:	20001404 	.word	0x20001404

0800e4fc <_write_r>:
 800e4fc:	b538      	push	{r3, r4, r5, lr}
 800e4fe:	4d07      	ldr	r5, [pc, #28]	; (800e51c <_write_r+0x20>)
 800e500:	4604      	mov	r4, r0
 800e502:	4608      	mov	r0, r1
 800e504:	4611      	mov	r1, r2
 800e506:	2200      	movs	r2, #0
 800e508:	602a      	str	r2, [r5, #0]
 800e50a:	461a      	mov	r2, r3
 800e50c:	f000 fd2d 	bl	800ef6a <_write>
 800e510:	1c43      	adds	r3, r0, #1
 800e512:	d102      	bne.n	800e51a <_write_r+0x1e>
 800e514:	682b      	ldr	r3, [r5, #0]
 800e516:	b103      	cbz	r3, 800e51a <_write_r+0x1e>
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	bd38      	pop	{r3, r4, r5, pc}
 800e51c:	20001404 	.word	0x20001404

0800e520 <_close_r>:
 800e520:	b538      	push	{r3, r4, r5, lr}
 800e522:	4d06      	ldr	r5, [pc, #24]	; (800e53c <_close_r+0x1c>)
 800e524:	2300      	movs	r3, #0
 800e526:	4604      	mov	r4, r0
 800e528:	4608      	mov	r0, r1
 800e52a:	602b      	str	r3, [r5, #0]
 800e52c:	f000 fd23 	bl	800ef76 <_close>
 800e530:	1c43      	adds	r3, r0, #1
 800e532:	d102      	bne.n	800e53a <_close_r+0x1a>
 800e534:	682b      	ldr	r3, [r5, #0]
 800e536:	b103      	cbz	r3, 800e53a <_close_r+0x1a>
 800e538:	6023      	str	r3, [r4, #0]
 800e53a:	bd38      	pop	{r3, r4, r5, pc}
 800e53c:	20001404 	.word	0x20001404

0800e540 <_fstat_r>:
 800e540:	b538      	push	{r3, r4, r5, lr}
 800e542:	4d07      	ldr	r5, [pc, #28]	; (800e560 <_fstat_r+0x20>)
 800e544:	2300      	movs	r3, #0
 800e546:	4604      	mov	r4, r0
 800e548:	4608      	mov	r0, r1
 800e54a:	4611      	mov	r1, r2
 800e54c:	602b      	str	r3, [r5, #0]
 800e54e:	f000 fd20 	bl	800ef92 <_fstat>
 800e552:	1c43      	adds	r3, r0, #1
 800e554:	d102      	bne.n	800e55c <_fstat_r+0x1c>
 800e556:	682b      	ldr	r3, [r5, #0]
 800e558:	b103      	cbz	r3, 800e55c <_fstat_r+0x1c>
 800e55a:	6023      	str	r3, [r4, #0]
 800e55c:	bd38      	pop	{r3, r4, r5, pc}
 800e55e:	bf00      	nop
 800e560:	20001404 	.word	0x20001404

0800e564 <_isatty_r>:
 800e564:	b538      	push	{r3, r4, r5, lr}
 800e566:	4d06      	ldr	r5, [pc, #24]	; (800e580 <_isatty_r+0x1c>)
 800e568:	2300      	movs	r3, #0
 800e56a:	4604      	mov	r4, r0
 800e56c:	4608      	mov	r0, r1
 800e56e:	602b      	str	r3, [r5, #0]
 800e570:	f000 fd06 	bl	800ef80 <_isatty>
 800e574:	1c43      	adds	r3, r0, #1
 800e576:	d102      	bne.n	800e57e <_isatty_r+0x1a>
 800e578:	682b      	ldr	r3, [r5, #0]
 800e57a:	b103      	cbz	r3, 800e57e <_isatty_r+0x1a>
 800e57c:	6023      	str	r3, [r4, #0]
 800e57e:	bd38      	pop	{r3, r4, r5, pc}
 800e580:	20001404 	.word	0x20001404

0800e584 <_lseek_r>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	4d07      	ldr	r5, [pc, #28]	; (800e5a4 <_lseek_r+0x20>)
 800e588:	4604      	mov	r4, r0
 800e58a:	4608      	mov	r0, r1
 800e58c:	4611      	mov	r1, r2
 800e58e:	2200      	movs	r2, #0
 800e590:	602a      	str	r2, [r5, #0]
 800e592:	461a      	mov	r2, r3
 800e594:	f000 fcf2 	bl	800ef7c <_lseek>
 800e598:	1c43      	adds	r3, r0, #1
 800e59a:	d102      	bne.n	800e5a2 <_lseek_r+0x1e>
 800e59c:	682b      	ldr	r3, [r5, #0]
 800e59e:	b103      	cbz	r3, 800e5a2 <_lseek_r+0x1e>
 800e5a0:	6023      	str	r3, [r4, #0]
 800e5a2:	bd38      	pop	{r3, r4, r5, pc}
 800e5a4:	20001404 	.word	0x20001404

0800e5a8 <_read_r>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	4d07      	ldr	r5, [pc, #28]	; (800e5c8 <_read_r+0x20>)
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	4608      	mov	r0, r1
 800e5b0:	4611      	mov	r1, r2
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	602a      	str	r2, [r5, #0]
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	f000 fcd1 	bl	800ef5e <_read>
 800e5bc:	1c43      	adds	r3, r0, #1
 800e5be:	d102      	bne.n	800e5c6 <_read_r+0x1e>
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	b103      	cbz	r3, 800e5c6 <_read_r+0x1e>
 800e5c4:	6023      	str	r3, [r4, #0]
 800e5c6:	bd38      	pop	{r3, r4, r5, pc}
 800e5c8:	20001404 	.word	0x20001404

0800e5cc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800e5cc:	4770      	bx	lr

0800e5ce <lora_rx_error_timeout_cb>:
}
 800e5ce:	4770      	bx	lr

0800e5d0 <change_modem_datarate>:
{
 800e5d0:	b508      	push	{r3, lr}
    cfg->datarate = new_dr;
 800e5d2:	714a      	strb	r2, [r1, #5]
	const struct lora_driver_api *api =
 800e5d4:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4798      	blx	r3
}
 800e5da:	bd08      	pop	{r3, pc}

0800e5dc <change_modem_frequency>:
{
 800e5dc:	b508      	push	{r3, lr}
    cfg->frequency = (new_freq_khz*1000);
 800e5de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e5e2:	fb03 f202 	mul.w	r2, r3, r2
 800e5e6:	600a      	str	r2, [r1, #0]
	const struct lora_driver_api *api =
 800e5e8:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4798      	blx	r3
}
 800e5ee:	bd08      	pop	{r3, pc}

0800e5f0 <incr_decr_modem_frequency>:
{
 800e5f0:	b508      	push	{r3, lr}
    if (incr) {
 800e5f2:	b142      	cbz	r2, 800e606 <incr_decr_modem_frequency+0x16>
        cfg->frequency = cfg->frequency + FREQUENCY_STEP_HZ;
 800e5f4:	680b      	ldr	r3, [r1, #0]
 800e5f6:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800e5fa:	33a0      	adds	r3, #160	; 0xa0
 800e5fc:	600b      	str	r3, [r1, #0]
	const struct lora_driver_api *api =
 800e5fe:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4798      	blx	r3
}
 800e604:	bd08      	pop	{r3, pc}
        cfg->frequency = cfg->frequency - FREQUENCY_STEP_HZ;
 800e606:	680b      	ldr	r3, [r1, #0]
 800e608:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 800e60c:	3ba0      	subs	r3, #160	; 0xa0
 800e60e:	600b      	str	r3, [r1, #0]
 800e610:	e7f5      	b.n	800e5fe <incr_decr_modem_frequency+0xe>

0800e612 <z_log_msg2_runtime_create>:
{
 800e612:	b510      	push	{r4, lr}
 800e614:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800e616:	ac0a      	add	r4, sp, #40	; 0x28
 800e618:	9405      	str	r4, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
 800e61a:	9402      	str	r4, [sp, #8]
 800e61c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e61e:	9401      	str	r4, [sp, #4]
 800e620:	9c08      	ldr	r4, [sp, #32]
 800e622:	9400      	str	r4, [sp, #0]
 800e624:	f000 fbc0 	bl	800eda8 <z_impl_z_log_msg2_runtime_vcreate>
}
 800e628:	b006      	add	sp, #24
 800e62a:	bd10      	pop	{r4, pc}

0800e62c <cbprintf_via_va_list>:
{
 800e62c:	b510      	push	{r4, lr}
 800e62e:	460c      	mov	r4, r1
 800e630:	4611      	mov	r1, r2
 800e632:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
 800e634:	9b02      	ldr	r3, [sp, #8]
 800e636:	47a0      	blx	r4
}
 800e638:	bd10      	pop	{r4, pc}

0800e63a <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
 800e63a:	b343      	cbz	r3, 800e68e <cbpprintf_external+0x54>
{
 800e63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e640:	b082      	sub	sp, #8
 800e642:	4607      	mov	r7, r0
 800e644:	4688      	mov	r8, r1
 800e646:	4691      	mov	r9, r2
 800e648:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
 800e64a:	781b      	ldrb	r3, [r3, #0]
	s_nbr     = buf[1];
 800e64c:	786e      	ldrb	r6, [r5, #1]
	ros_nbr   = buf[2];
 800e64e:	78ac      	ldrb	r4, [r5, #2]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
 800e650:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800e654:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
 800e656:	f04f 0a00 	mov.w	sl, #0
 800e65a:	e00a      	b.n	800e672 <cbpprintf_external+0x38>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
 800e65c:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
 800e660:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
 800e664:	4620      	mov	r0, r4
 800e666:	f7f2 fbf6 	bl	8000e56 <strlen>
 800e66a:	3001      	adds	r0, #1
 800e66c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 800e66e:	f10a 0a01 	add.w	sl, sl, #1
 800e672:	45b2      	cmp	sl, r6
 800e674:	d3f2      	bcc.n	800e65c <cbpprintf_external+0x22>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
 800e676:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	686b      	ldr	r3, [r5, #4]
 800e67e:	464a      	mov	r2, r9
 800e680:	4641      	mov	r1, r8
 800e682:	4638      	mov	r0, r7
 800e684:	f7ff ffd2 	bl	800e62c <cbprintf_via_va_list>
}
 800e688:	b002      	add	sp, #8
 800e68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
 800e68e:	f06f 0015 	mvn.w	r0, #21
}
 800e692:	4770      	bx	lr

0800e694 <arch_printk_char_out>:
}
 800e694:	2000      	movs	r0, #0
 800e696:	4770      	bx	lr

0800e698 <str_out>:
{
 800e698:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800e69a:	680c      	ldr	r4, [r1, #0]
 800e69c:	b154      	cbz	r4, 800e6b4 <str_out+0x1c>
 800e69e:	688a      	ldr	r2, [r1, #8]
 800e6a0:	684b      	ldr	r3, [r1, #4]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	da06      	bge.n	800e6b4 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 800e6a6:	3b01      	subs	r3, #1
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d008      	beq.n	800e6be <str_out+0x26>
		ctx->str[ctx->count++] = c;
 800e6ac:	1c53      	adds	r3, r2, #1
 800e6ae:	608b      	str	r3, [r1, #8]
 800e6b0:	54a0      	strb	r0, [r4, r2]
 800e6b2:	e002      	b.n	800e6ba <str_out+0x22>
		ctx->count++;
 800e6b4:	688b      	ldr	r3, [r1, #8]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	608b      	str	r3, [r1, #8]
}
 800e6ba:	bc10      	pop	{r4}
 800e6bc:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 800e6be:	1c53      	adds	r3, r2, #1
 800e6c0:	608b      	str	r3, [r1, #8]
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	54a3      	strb	r3, [r4, r2]
 800e6c6:	e7f8      	b.n	800e6ba <str_out+0x22>

0800e6c8 <printk>:
{
 800e6c8:	b40f      	push	{r0, r1, r2, r3}
 800e6ca:	b500      	push	{lr}
 800e6cc:	b083      	sub	sp, #12
 800e6ce:	a904      	add	r1, sp, #16
 800e6d0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800e6d4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 800e6d6:	f7f4 f9ab 	bl	8002a30 <vprintk>
}
 800e6da:	b003      	add	sp, #12
 800e6dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6e0:	b004      	add	sp, #16
 800e6e2:	4770      	bx	lr

0800e6e4 <snprintk>:
{
 800e6e4:	b40c      	push	{r2, r3}
 800e6e6:	b500      	push	{lr}
 800e6e8:	b083      	sub	sp, #12
 800e6ea:	ab04      	add	r3, sp, #16
 800e6ec:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 800e6f0:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800e6f2:	f7f4 f9ad 	bl	8002a50 <vsnprintk>
}
 800e6f6:	b003      	add	sp, #12
 800e6f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6fc:	b002      	add	sp, #8
 800e6fe:	4770      	bx	lr

0800e700 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800e700:	b508      	push	{r3, lr}
 800e702:	4604      	mov	r4, r0
 800e704:	4608      	mov	r0, r1
 800e706:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800e708:	461a      	mov	r2, r3
 800e70a:	47a0      	blx	r4
	return z_impl_z_current_get();
 800e70c:	f7fd fc80 	bl	800c010 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800e710:	f7f6 fba0 	bl	8004e54 <z_impl_k_thread_abort>

0800e714 <outs>:
{
 800e714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e718:	4607      	mov	r7, r0
 800e71a:	460e      	mov	r6, r1
 800e71c:	4614      	mov	r4, r2
 800e71e:	4698      	mov	r8, r3
	size_t count = 0;
 800e720:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800e722:	e006      	b.n	800e732 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 800e724:	4631      	mov	r1, r6
 800e726:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e72a:	47b8      	blx	r7
		if (rc < 0) {
 800e72c:	2800      	cmp	r0, #0
 800e72e:	db09      	blt.n	800e744 <outs+0x30>
		++count;
 800e730:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800e732:	4544      	cmp	r4, r8
 800e734:	d3f6      	bcc.n	800e724 <outs+0x10>
 800e736:	f1b8 0f00 	cmp.w	r8, #0
 800e73a:	d102      	bne.n	800e742 <outs+0x2e>
 800e73c:	7823      	ldrb	r3, [r4, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d1f0      	bne.n	800e724 <outs+0x10>
	return (int)count;
 800e742:	4628      	mov	r0, r5
}
 800e744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e748 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 800e748:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
 800e74a:	2300      	movs	r3, #0
 800e74c:	f36f 0300 	bfc	r3, #0, #1
 800e750:	f043 0302 	orr.w	r3, r3, #2
 800e754:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 800e758:	6a02      	ldr	r2, [r0, #32]
 800e75a:	6804      	ldr	r4, [r0, #0]
 800e75c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800e760:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
 800e762:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e764:	6902      	ldr	r2, [r0, #16]
 800e766:	f012 0201 	ands.w	r2, r2, #1
 800e76a:	d104      	bne.n	800e776 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e76c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e76e:	42a3      	cmp	r3, r4
 800e770:	d304      	bcc.n	800e77c <add_skip_item+0x34>
 800e772:	1b1b      	subs	r3, r3, r4
 800e774:	e002      	b.n	800e77c <add_skip_item+0x34>
		return i & (buffer->size - 1);
 800e776:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e778:	3c01      	subs	r4, #1
 800e77a:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800e77c:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800e77e:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
 800e780:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e782:	b922      	cbnz	r2, 800e78e <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e784:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e786:	4299      	cmp	r1, r3
 800e788:	d304      	bcc.n	800e794 <add_skip_item+0x4c>
 800e78a:	1ac9      	subs	r1, r1, r3
 800e78c:	e002      	b.n	800e794 <add_skip_item+0x4c>
		return i & (buffer->size - 1);
 800e78e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e790:	3b01      	subs	r3, #1
 800e792:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800e794:	6041      	str	r1, [r0, #4]
}
 800e796:	bc10      	pop	{r4}
 800e798:	4770      	bx	lr

0800e79a <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
 800e79a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	9101      	str	r1, [sp, #4]
 800e7a4:	4615      	mov	r5, r2
 800e7a6:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 800e7ac:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800e7b0:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800e7b4:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800e7b8:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
 800e7bc:	f003 0303 	and.w	r3, r3, #3
 800e7c0:	2b02      	cmp	r3, #2
 800e7c2:	d012      	beq.n	800e7ea <drop_item_locked+0x50>
	return 0;
 800e7c4:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 800e7c8:	69e3      	ldr	r3, [r4, #28]
 800e7ca:	4650      	mov	r0, sl
 800e7cc:	4798      	blx	r3
 800e7ce:	4607      	mov	r7, r0
	if (skip_wlen) {
 800e7d0:	f1bb 0f00 	cmp.w	fp, #0
 800e7d4:	d151      	bne.n	800e87a <drop_item_locked+0xe0>
		allow_drop = true;
	} else if (allow_drop) {
 800e7d6:	2d00      	cmp	r5, #0
 800e7d8:	d05c      	beq.n	800e894 <drop_item_locked+0xfa>
		if (item->hdr.busy) {
 800e7da:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
 800e7de:	f013 0f02 	tst.w	r3, #2
 800e7e2:	d109      	bne.n	800e7f8 <drop_item_locked+0x5e>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	7033      	strb	r3, [r6, #0]
 800e7e8:	e048      	b.n	800e87c <drop_item_locked+0xe2>
		return item->skip.len;
 800e7ea:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 800e7ee:	ea5f 0b93 	movs.w	fp, r3, lsr #2
 800e7f2:	d0e9      	beq.n	800e7c8 <drop_item_locked+0x2e>
		return item->skip.len;
 800e7f4:	465f      	mov	r7, fp
 800e7f6:	e7eb      	b.n	800e7d0 <drop_item_locked+0x36>
			add_skip_item(buffer, free_wlen + 1);
 800e7f8:	9901      	ldr	r1, [sp, #4]
 800e7fa:	3101      	adds	r1, #1
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f7ff ffa3 	bl	800e748 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800e802:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
 800e804:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e806:	6922      	ldr	r2, [r4, #16]
 800e808:	f012 0201 	ands.w	r2, r2, #1
 800e80c:	d104      	bne.n	800e818 <drop_item_locked+0x7e>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e80e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e810:	428b      	cmp	r3, r1
 800e812:	d304      	bcc.n	800e81e <drop_item_locked+0x84>
 800e814:	1a5b      	subs	r3, r3, r1
 800e816:	e002      	b.n	800e81e <drop_item_locked+0x84>
		return i & (buffer->size - 1);
 800e818:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e81a:	3901      	subs	r1, #1
 800e81c:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800e81e:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800e820:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
 800e822:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e824:	b922      	cbnz	r2, 800e830 <drop_item_locked+0x96>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e826:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e828:	428b      	cmp	r3, r1
 800e82a:	d304      	bcc.n	800e836 <drop_item_locked+0x9c>
 800e82c:	1a5b      	subs	r3, r3, r1
 800e82e:	e002      	b.n	800e836 <drop_item_locked+0x9c>
		return i & (buffer->size - 1);
 800e830:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e832:	3901      	subs	r1, #1
 800e834:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800e836:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800e838:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800e83a:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e83c:	b922      	cbnz	r2, 800e848 <drop_item_locked+0xae>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e83e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e840:	4293      	cmp	r3, r2
 800e842:	d304      	bcc.n	800e84e <drop_item_locked+0xb4>
 800e844:	1a9b      	subs	r3, r3, r2
 800e846:	e002      	b.n	800e84e <drop_item_locked+0xb4>
		return i & (buffer->size - 1);
 800e848:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e84a:	3a01      	subs	r2, #1
 800e84c:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 800e84e:	6a21      	ldr	r1, [r4, #32]
 800e850:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800e854:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
 800e858:	f002 0203 	and.w	r2, r2, #3
 800e85c:	2a02      	cmp	r2, #2
 800e85e:	d006      	beq.n	800e86e <drop_item_locked+0xd4>
				rd_wlen += buffer->get_wlen(item);
 800e860:	69e3      	ldr	r3, [r4, #28]
 800e862:	4650      	mov	r0, sl
 800e864:	4798      	blx	r3
 800e866:	4407      	add	r7, r0
				*user_packet = true;
 800e868:	2301      	movs	r3, #1
 800e86a:	7033      	strb	r3, [r6, #0]
 800e86c:	e006      	b.n	800e87c <drop_item_locked+0xe2>
		return item->skip.len;
 800e86e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
 800e872:	089b      	lsrs	r3, r3, #2
 800e874:	d0f4      	beq.n	800e860 <drop_item_locked+0xc6>
				rd_wlen += skip_wlen;
 800e876:	441f      	add	r7, r3
 800e878:	e000      	b.n	800e87c <drop_item_locked+0xe2>
		allow_drop = true;
 800e87a:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
 800e87c:	b195      	cbz	r5, 800e8a4 <drop_item_locked+0x10a>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800e87e:	68e0      	ldr	r0, [r4, #12]
	uint32_t i = idx + val;
 800e880:	4407      	add	r7, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e882:	6923      	ldr	r3, [r4, #16]
 800e884:	f013 0f01 	tst.w	r3, #1
 800e888:	d107      	bne.n	800e89a <drop_item_locked+0x100>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e88a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e88c:	429f      	cmp	r7, r3
 800e88e:	d307      	bcc.n	800e8a0 <drop_item_locked+0x106>
 800e890:	1aff      	subs	r7, r7, r3
 800e892:	e005      	b.n	800e8a0 <drop_item_locked+0x106>
		item = NULL;
 800e894:	f04f 0a00 	mov.w	sl, #0
 800e898:	e7f0      	b.n	800e87c <drop_item_locked+0xe2>
		return i & (buffer->size - 1);
 800e89a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e89c:	3b01      	subs	r3, #1
 800e89e:	401f      	ands	r7, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800e8a0:	60e7      	str	r7, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
 800e8a2:	60a7      	str	r7, [r4, #8]
	}

	return item;
}
 800e8a4:	4650      	mov	r0, sl
 800e8a6:	b003      	add	sp, #12
 800e8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e8ac <mpsc_pbuf_init>:
{
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
 800e8b2:	2220      	movs	r2, #32
 800e8b4:	2100      	movs	r1, #0
 800e8b6:	f002 fa16 	bl	8010ce6 <memset>
	buffer->get_wlen = cfg->get_wlen;
 800e8ba:	68eb      	ldr	r3, [r5, #12]
 800e8bc:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
 800e8be:	68ab      	ldr	r3, [r5, #8]
 800e8c0:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
 800e8c2:	682b      	ldr	r3, [r5, #0]
 800e8c4:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
 800e8c6:	686b      	ldr	r3, [r5, #4]
 800e8c8:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
 800e8ca:	692a      	ldr	r2, [r5, #16]
 800e8cc:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 800e8ce:	b123      	cbz	r3, 800e8da <mpsc_pbuf_init+0x2e>
 800e8d0:	1e59      	subs	r1, r3, #1
 800e8d2:	420b      	tst	r3, r1
 800e8d4:	d00d      	beq.n	800e8f2 <mpsc_pbuf_init+0x46>
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	e000      	b.n	800e8dc <mpsc_pbuf_init+0x30>
 800e8da:	2300      	movs	r3, #0
	if (is_power_of_two(buffer->size)) {
 800e8dc:	b113      	cbz	r3, 800e8e4 <mpsc_pbuf_init+0x38>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 800e8de:	f042 0201 	orr.w	r2, r2, #1
 800e8e2:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
 800e8e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	f001 fe3b 	bl	8010566 <z_impl_k_sem_init>
}
 800e8f0:	bd38      	pop	{r3, r4, r5, pc}
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e7f2      	b.n	800e8dc <mpsc_pbuf_init+0x30>

0800e8f6 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 800e8f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	9200      	str	r2, [sp, #0]
 800e8fe:	9301      	str	r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 800e900:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e902:	3b01      	subs	r3, #1
 800e904:	428b      	cmp	r3, r1
 800e906:	f0c0 8087 	bcc.w	800ea18 <mpsc_pbuf_alloc+0x122>
 800e90a:	4605      	mov	r5, r0
 800e90c:	4689      	mov	r9, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
 800e90e:	f04f 0a00 	mov.w	sl, #0
	union mpsc_pbuf_generic *item = NULL;
 800e912:	46d3      	mov	fp, sl
 800e914:	e020      	b.n	800e958 <mpsc_pbuf_alloc+0x62>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 800e916:	1b1c      	subs	r4, r3, r4
 800e918:	3c01      	subs	r4, #1
		return false;
 800e91a:	2600      	movs	r6, #0
 800e91c:	e02e      	b.n	800e97c <mpsc_pbuf_alloc+0x86>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 800e91e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e920:	1b1c      	subs	r4, r3, r4
 800e922:	3c01      	subs	r4, #1
		return false;
 800e924:	2600      	movs	r6, #0
 800e926:	e029      	b.n	800e97c <mpsc_pbuf_alloc+0x86>
		return i & (buffer->size - 1);
 800e928:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e92a:	3a01      	subs	r2, #1
 800e92c:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
 800e92e:	602b      	str	r3, [r5, #0]
		cont = false;
 800e930:	2600      	movs	r6, #0
 800e932:	f387 8811 	msr	BASEPRI, r7
 800e936:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
 800e93a:	b15e      	cbz	r6, 800e954 <mpsc_pbuf_alloc+0x5e>
 800e93c:	f1ba 0f00 	cmp.w	sl, #0
 800e940:	d008      	beq.n	800e954 <mpsc_pbuf_alloc+0x5e>
 800e942:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800e946:	b12b      	cbz	r3, 800e954 <mpsc_pbuf_alloc+0x5e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
 800e948:	69ab      	ldr	r3, [r5, #24]
 800e94a:	4651      	mov	r1, sl
 800e94c:	4628      	mov	r0, r5
 800e94e:	4798      	blx	r3
			dropped_item = NULL;
 800e950:	f04f 0a00 	mov.w	sl, #0
		}
	} while (cont);
 800e954:	2e00      	cmp	r6, #0
 800e956:	d061      	beq.n	800ea1c <mpsc_pbuf_alloc+0x126>
	__asm__ volatile(
 800e958:	f04f 0310 	mov.w	r3, #16
 800e95c:	f3ef 8811 	mrs	r8, BASEPRI
 800e960:	f383 8812 	msr	BASEPRI_MAX, r3
 800e964:	f3bf 8f6f 	isb	sy
 800e968:	4647      	mov	r7, r8
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 800e96a:	68eb      	ldr	r3, [r5, #12]
 800e96c:	682c      	ldr	r4, [r5, #0]
 800e96e:	42a3      	cmp	r3, r4
 800e970:	d8d1      	bhi.n	800e916 <mpsc_pbuf_alloc+0x20>
	} else if (!buffer->rd_idx) {
 800e972:	2b00      	cmp	r3, #0
 800e974:	d0d3      	beq.n	800e91e <mpsc_pbuf_alloc+0x28>
	*res = buffer->size - buffer->tmp_wr_idx;
 800e976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e978:	1b1c      	subs	r4, r3, r4
	return true;
 800e97a:	2601      	movs	r6, #1
		if (free_wlen >= wlen) {
 800e97c:	45a1      	cmp	r9, r4
 800e97e:	d819      	bhi.n	800e9b4 <mpsc_pbuf_alloc+0xbe>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 800e980:	6a2b      	ldr	r3, [r5, #32]
 800e982:	682a      	ldr	r2, [r5, #0]
			item =
 800e984:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
 800e988:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800e98c:	f36f 0100 	bfc	r1, #0, #1
 800e990:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
 800e994:	b2c9      	uxtb	r1, r1
 800e996:	f36f 0141 	bfc	r1, #1, #1
 800e99a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
 800e99e:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
 800e9a0:	444b      	add	r3, r9
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e9a2:	692a      	ldr	r2, [r5, #16]
 800e9a4:	f012 0f01 	tst.w	r2, #1
 800e9a8:	d1be      	bne.n	800e928 <mpsc_pbuf_alloc+0x32>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e9aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d3be      	bcc.n	800e92e <mpsc_pbuf_alloc+0x38>
 800e9b0:	1a9b      	subs	r3, r3, r2
 800e9b2:	e7bc      	b.n	800e92e <mpsc_pbuf_alloc+0x38>
		} else if (wrap) {
 800e9b4:	b9ae      	cbnz	r6, 800e9e2 <mpsc_pbuf_alloc+0xec>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800e9b6:	9b01      	ldr	r3, [sp, #4]
 800e9b8:	9a00      	ldr	r2, [sp, #0]
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	d003      	beq.n	800e9c6 <mpsc_pbuf_alloc+0xd0>
			   !k_is_in_isr()) {
 800e9be:	f001 fd6d 	bl	801049c <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	b190      	cbz	r0, 800e9ec <mpsc_pbuf_alloc+0xf6>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 800e9c6:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 800e9c8:	f10d 030f 	add.w	r3, sp, #15
 800e9cc:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800e9d0:	4621      	mov	r1, r4
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	f7ff fee1 	bl	800e79a <drop_item_locked>
			cont = dropped_item != NULL;
 800e9d8:	4682      	mov	sl, r0
 800e9da:	1e06      	subs	r6, r0, #0
 800e9dc:	bf18      	it	ne
 800e9de:	2601      	movne	r6, #1
 800e9e0:	e7a7      	b.n	800e932 <mpsc_pbuf_alloc+0x3c>
			add_skip_item(buffer, free_wlen);
 800e9e2:	4621      	mov	r1, r4
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	f7ff feaf 	bl	800e748 <add_skip_item>
			cont = true;
 800e9ea:	e7a2      	b.n	800e932 <mpsc_pbuf_alloc+0x3c>
	__asm__ volatile(
 800e9ec:	f388 8811 	msr	BASEPRI, r8
 800e9f0:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
 800e9f4:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
 800e9f8:	9a00      	ldr	r2, [sp, #0]
 800e9fa:	9b01      	ldr	r3, [sp, #4]
 800e9fc:	f7fc fdb6 	bl	800b56c <z_impl_k_sem_take>
	__asm__ volatile(
 800ea00:	f04f 0310 	mov.w	r3, #16
 800ea04:	f3ef 8711 	mrs	r7, BASEPRI
 800ea08:	f383 8812 	msr	BASEPRI_MAX, r3
 800ea0c:	f3bf 8f6f 	isb	sy
			if (err == 0) {
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d18e      	bne.n	800e932 <mpsc_pbuf_alloc+0x3c>
				cont = true;
 800ea14:	2601      	movs	r6, #1
 800ea16:	e78c      	b.n	800e932 <mpsc_pbuf_alloc+0x3c>
		return NULL;
 800ea18:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 800ea1c:	4658      	mov	r0, fp
 800ea1e:	b005      	add	sp, #20
 800ea20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea24 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 800ea24:	b538      	push	{r3, r4, r5, lr}
 800ea26:	4604      	mov	r4, r0
 800ea28:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 800ea2a:	69c3      	ldr	r3, [r0, #28]
 800ea2c:	4608      	mov	r0, r1
 800ea2e:	4798      	blx	r3
 800ea30:	f04f 0310 	mov.w	r3, #16
 800ea34:	f3ef 8211 	mrs	r2, BASEPRI
 800ea38:	f383 8812 	msr	BASEPRI_MAX, r3
 800ea3c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 800ea40:	782b      	ldrb	r3, [r5, #0]
 800ea42:	f043 0301 	orr.w	r3, r3, #1
 800ea46:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800ea48:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
 800ea4a:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800ea4c:	6923      	ldr	r3, [r4, #16]
 800ea4e:	f013 0f01 	tst.w	r3, #1
 800ea52:	d104      	bne.n	800ea5e <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
 800ea54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea56:	4298      	cmp	r0, r3
 800ea58:	d304      	bcc.n	800ea64 <mpsc_pbuf_commit+0x40>
 800ea5a:	1ac0      	subs	r0, r0, r3
 800ea5c:	e002      	b.n	800ea64 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
 800ea5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea60:	3b01      	subs	r3, #1
 800ea62:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800ea64:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
 800ea66:	f382 8811 	msr	BASEPRI, r2
 800ea6a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 800ea6e:	bd38      	pop	{r3, r4, r5, pc}

0800ea70 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 800ea70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea72:	4604      	mov	r4, r0
 800ea74:	e039      	b.n	800eaea <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 800ea76:	1a9b      	subs	r3, r3, r2
		return false;
 800ea78:	e045      	b.n	800eb06 <mpsc_pbuf_claim+0x96>
		return item->skip.len;
 800ea7a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
 800ea7e:	0880      	lsrs	r0, r0, #2
 800ea80:	d153      	bne.n	800eb2a <mpsc_pbuf_claim+0xba>
 800ea82:	e04d      	b.n	800eb20 <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
 800ea84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ea86:	3901      	subs	r1, #1
 800ea88:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
 800ea8a:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
 800ea8c:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800ea8e:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800ea90:	b922      	cbnz	r2, 800ea9c <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
 800ea92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea94:	4298      	cmp	r0, r3
 800ea96:	d304      	bcc.n	800eaa2 <mpsc_pbuf_claim+0x32>
 800ea98:	1ac0      	subs	r0, r0, r3
 800ea9a:	e002      	b.n	800eaa2 <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
 800ea9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea9e:	3b01      	subs	r3, #1
 800eaa0:	4018      	ands	r0, r3
				buffer->rd_idx =
 800eaa2:	60e0      	str	r0, [r4, #12]
				cont = true;
 800eaa4:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
 800eaa6:	e01b      	b.n	800eae0 <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
 800eaa8:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 800eaac:	f043 0302 	orr.w	r3, r3, #2
 800eab0:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
 800eab4:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
 800eab6:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
 800eab8:	4630      	mov	r0, r6
 800eaba:	4798      	blx	r3
	uint32_t i = idx + val;
 800eabc:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800eabe:	6923      	ldr	r3, [r4, #16]
 800eac0:	f013 0f01 	tst.w	r3, #1
 800eac4:	d104      	bne.n	800ead0 <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
 800eac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eac8:	4298      	cmp	r0, r3
 800eaca:	d304      	bcc.n	800ead6 <mpsc_pbuf_claim+0x66>
 800eacc:	1ac0      	subs	r0, r0, r3
 800eace:	e002      	b.n	800ead6 <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
 800ead0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ead2:	3b01      	subs	r3, #1
 800ead4:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
 800ead6:	60a0      	str	r0, [r4, #8]
		cont = false;
 800ead8:	2300      	movs	r3, #0
 800eada:	e001      	b.n	800eae0 <mpsc_pbuf_claim+0x70>
 800eadc:	2300      	movs	r3, #0
			item = NULL;
 800eade:	461e      	mov	r6, r3
 800eae0:	f385 8811 	msr	BASEPRI, r5
 800eae4:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
 800eae8:	b38b      	cbz	r3, 800eb4e <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
 800eaea:	f04f 0310 	mov.w	r3, #16
 800eaee:	f3ef 8511 	mrs	r5, BASEPRI
 800eaf2:	f383 8812 	msr	BASEPRI_MAX, r3
 800eaf6:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 800eafa:	68a2      	ldr	r2, [r4, #8]
 800eafc:	6863      	ldr	r3, [r4, #4]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d9b9      	bls.n	800ea76 <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
 800eb02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb04:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
 800eb06:	6a21      	ldr	r1, [r4, #32]
		item = (union mpsc_pbuf_generic *)
 800eb08:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d0e5      	beq.n	800eadc <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
 800eb10:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
 800eb14:	f013 0303 	ands.w	r3, r3, #3
 800eb18:	d016      	beq.n	800eb48 <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
 800eb1a:	2b02      	cmp	r3, #2
 800eb1c:	d0ad      	beq.n	800ea7a <mpsc_pbuf_claim+0xa>
	return 0;
 800eb1e:	2000      	movs	r0, #0
	return item->hdr.valid;
 800eb20:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
 800eb24:	f013 0f01 	tst.w	r3, #1
 800eb28:	d1be      	bne.n	800eaa8 <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
 800eb2a:	b910      	cbnz	r0, 800eb32 <mpsc_pbuf_claim+0xc2>
 800eb2c:	69e3      	ldr	r3, [r4, #28]
 800eb2e:	4630      	mov	r0, r6
 800eb30:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 800eb32:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
 800eb34:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800eb36:	6922      	ldr	r2, [r4, #16]
 800eb38:	f012 0201 	ands.w	r2, r2, #1
 800eb3c:	d1a2      	bne.n	800ea84 <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
 800eb3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eb40:	428b      	cmp	r3, r1
 800eb42:	d3a2      	bcc.n	800ea8a <mpsc_pbuf_claim+0x1a>
 800eb44:	1a5b      	subs	r3, r3, r1
 800eb46:	e7a0      	b.n	800ea8a <mpsc_pbuf_claim+0x1a>
		cont = false;
 800eb48:	2300      	movs	r3, #0
			item = NULL;
 800eb4a:	461e      	mov	r6, r3
 800eb4c:	e7c8      	b.n	800eae0 <mpsc_pbuf_claim+0x70>

	return item;
}
 800eb4e:	4630      	mov	r0, r6
 800eb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eb52 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 800eb52:	b538      	push	{r3, r4, r5, lr}
 800eb54:	4604      	mov	r4, r0
 800eb56:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 800eb58:	69c3      	ldr	r3, [r0, #28]
 800eb5a:	4608      	mov	r0, r1
 800eb5c:	4798      	blx	r3
 800eb5e:	f04f 0310 	mov.w	r3, #16
 800eb62:	f3ef 8211 	mrs	r2, BASEPRI
 800eb66:	f383 8812 	msr	BASEPRI_MAX, r3
 800eb6a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 800eb6e:	782b      	ldrb	r3, [r5, #0]
 800eb70:	f36f 0300 	bfc	r3, #0, #1
 800eb74:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 800eb76:	6923      	ldr	r3, [r4, #16]
 800eb78:	f013 0f02 	tst.w	r3, #2
 800eb7c:	d00a      	beq.n	800eb94 <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 800eb7e:	6a23      	ldr	r3, [r4, #32]
 800eb80:	68e1      	ldr	r1, [r4, #12]
 800eb82:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 800eb86:	42ab      	cmp	r3, r5
 800eb88:	d004      	beq.n	800eb94 <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
 800eb8a:	682b      	ldr	r3, [r5, #0]
 800eb8c:	f360 039f 	bfi	r3, r0, #2, #30
 800eb90:	602b      	str	r3, [r5, #0]
 800eb92:	e012      	b.n	800ebba <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
 800eb94:	782b      	ldrb	r3, [r5, #0]
 800eb96:	f36f 0341 	bfc	r3, #1, #1
 800eb9a:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 800eb9c:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800eb9e:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800eba0:	6923      	ldr	r3, [r4, #16]
 800eba2:	f013 0f01 	tst.w	r3, #1
 800eba6:	d104      	bne.n	800ebb2 <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
 800eba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebaa:	4298      	cmp	r0, r3
 800ebac:	d304      	bcc.n	800ebb8 <mpsc_pbuf_free+0x66>
 800ebae:	1ac0      	subs	r0, r0, r3
 800ebb0:	e002      	b.n	800ebb8 <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
 800ebb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebb4:	3b01      	subs	r3, #1
 800ebb6:	4018      	ands	r0, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 800ebb8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800ebba:	f382 8811 	msr	BASEPRI, r2
 800ebbe:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
 800ebc2:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
 800ebc6:	f7fc fca9 	bl	800b51c <z_impl_k_sem_give>
}
 800ebca:	bd38      	pop	{r3, r4, r5, pc}

0800ebcc <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 800ebcc:	6883      	ldr	r3, [r0, #8]
 800ebce:	6842      	ldr	r2, [r0, #4]
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d905      	bls.n	800ebe0 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
 800ebd4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800ebd6:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 800ebd8:	3800      	subs	r0, #0
 800ebda:	bf18      	it	ne
 800ebdc:	2001      	movne	r0, #1
 800ebde:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 800ebe0:	1ad0      	subs	r0, r2, r3
		return false;
 800ebe2:	e7f9      	b.n	800ebd8 <mpsc_pbuf_is_pending+0xc>

0800ebe4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800ebe4:	4770      	bx	lr

0800ebe6 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	4770      	bx	lr

0800ebea <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 800ebea:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 800ebec:	f013 0f04 	tst.w	r3, #4
 800ebf0:	d001      	beq.n	800ebf6 <log_msg2_generic_get_wlen+0xc>
	return 0;
 800ebf2:	2000      	movs	r0, #0
}
 800ebf4:	4770      	bx	lr
		return log_msg2_get_total_wlen(msg->hdr.desc);
 800ebf6:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 800ebf8:	f3c3 2049 	ubfx	r0, r3, #9, #10
 800ebfc:	f3c3 43cb 	ubfx	r3, r3, #19, #12
 800ec00:	4418      	add	r0, r3
 800ec02:	3013      	adds	r0, #19
 800ec04:	f020 0007 	bic.w	r0, r0, #7
 800ec08:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
 800ec0a:	4770      	bx	lr

0800ec0c <dummy_timestamp>:
}
 800ec0c:	2000      	movs	r0, #0
 800ec0e:	4770      	bx	lr

0800ec10 <msg_filter_check>:
}
 800ec10:	2001      	movs	r0, #1
 800ec12:	4770      	bx	lr

0800ec14 <default_lf_get_timestamp>:
{
 800ec14:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800ec16:	f001 ff96 	bl	8010b46 <z_impl_k_uptime_ticks>
 800ec1a:	220a      	movs	r2, #10
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	f7f1 fedd 	bl	80009dc <__aeabi_uldivmod>
}
 800ec22:	bd08      	pop	{r3, pc}

0800ec24 <notify_drop>:
{
 800ec24:	b508      	push	{r3, lr}
	z_log_dropped(true);
 800ec26:	2001      	movs	r0, #1
 800ec28:	f7f4 fcd6 	bl	80035d8 <z_log_dropped>
}
 800ec2c:	bd08      	pop	{r3, pc}

0800ec2e <get_msg>:
{
 800ec2e:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
 800ec30:	f7f4 fd56 	bl	80036e0 <z_log_msg2_claim>
}
 800ec34:	bd08      	pop	{r3, pc}

0800ec36 <next_pending>:
{
 800ec36:	b508      	push	{r3, lr}
		return z_log_msg2_pending();
 800ec38:	f7f4 fd8c 	bl	8003754 <z_log_msg2_pending>
}
 800ec3c:	bd08      	pop	{r3, pc}

0800ec3e <z_log_get_tag>:
}
 800ec3e:	2000      	movs	r0, #0
 800ec40:	4770      	bx	lr

0800ec42 <buffer_write>:
{
 800ec42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec44:	4607      	mov	r7, r0
 800ec46:	460d      	mov	r5, r1
 800ec48:	4614      	mov	r4, r2
 800ec4a:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 800ec4c:	4632      	mov	r2, r6
 800ec4e:	4621      	mov	r1, r4
 800ec50:	4628      	mov	r0, r5
 800ec52:	47b8      	blx	r7
		buf += processed;
 800ec54:	4405      	add	r5, r0
	} while (len != 0);
 800ec56:	1a24      	subs	r4, r4, r0
 800ec58:	d1f8      	bne.n	800ec4c <buffer_write+0xa>
}
 800ec5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec5c <color_prefix>:
{
 800ec5c:	b508      	push	{r3, lr}
 800ec5e:	4613      	mov	r3, r2
	color_print(output, color, true, level);
 800ec60:	2201      	movs	r2, #1
 800ec62:	f7f4 febf 	bl	80039e4 <color_print>
}
 800ec66:	bd08      	pop	{r3, pc}

0800ec68 <color_postfix>:
{
 800ec68:	b508      	push	{r3, lr}
 800ec6a:	4613      	mov	r3, r2
	color_print(output, color, false, level);
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	f7f4 feb9 	bl	80039e4 <color_print>
}
 800ec72:	bd08      	pop	{r3, pc}

0800ec74 <postfix_print>:
{
 800ec74:	b538      	push	{r3, r4, r5, lr}
 800ec76:	4605      	mov	r5, r0
 800ec78:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
 800ec7a:	f001 0101 	and.w	r1, r1, #1
 800ec7e:	f7ff fff3 	bl	800ec68 <color_postfix>
	newline_print(output, flags);
 800ec82:	4621      	mov	r1, r4
 800ec84:	4628      	mov	r0, r5
 800ec86:	f7f4 fec3 	bl	8003a10 <newline_print>
}
 800ec8a:	bd38      	pop	{r3, r4, r5, pc}

0800ec8c <log_msg2_hexdump>:
{
 800ec8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec90:	b083      	sub	sp, #12
 800ec92:	4680      	mov	r8, r0
 800ec94:	460e      	mov	r6, r1
 800ec96:	4615      	mov	r5, r2
 800ec98:	461f      	mov	r7, r3
 800ec9a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 800ec9e:	462c      	mov	r4, r5
 800eca0:	2d10      	cmp	r5, #16
 800eca2:	bf28      	it	cs
 800eca4:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
 800eca6:	f8cd 9000 	str.w	r9, [sp]
 800ecaa:	463b      	mov	r3, r7
 800ecac:	4622      	mov	r2, r4
 800ecae:	4631      	mov	r1, r6
 800ecb0:	4640      	mov	r0, r8
 800ecb2:	f7f4 fec1 	bl	8003a38 <hexdump_line_print>
		data += length;
 800ecb6:	4426      	add	r6, r4
	} while (len);
 800ecb8:	1b2d      	subs	r5, r5, r4
 800ecba:	d1f0      	bne.n	800ec9e <log_msg2_hexdump+0x12>
}
 800ecbc:	b003      	add	sp, #12
 800ecbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ecc2 <log_output_flush>:
{
 800ecc2:	b510      	push	{r4, lr}
 800ecc4:	4604      	mov	r4, r0
		     output->control_block->offset,
 800ecc6:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 800ecc8:	6853      	ldr	r3, [r2, #4]
 800ecca:	6812      	ldr	r2, [r2, #0]
 800eccc:	6881      	ldr	r1, [r0, #8]
 800ecce:	6800      	ldr	r0, [r0, #0]
 800ecd0:	f7ff ffb7 	bl	800ec42 <buffer_write>
	output->control_block->offset = 0;
 800ecd4:	6863      	ldr	r3, [r4, #4]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	601a      	str	r2, [r3, #0]
}
 800ecda:	bd10      	pop	{r4, pc}

0800ecdc <out_func>:
{
 800ecdc:	b538      	push	{r3, r4, r5, lr}
 800ecde:	4605      	mov	r5, r0
 800ece0:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800ece2:	684b      	ldr	r3, [r1, #4]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	68cb      	ldr	r3, [r1, #12]
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d00f      	beq.n	800ed0c <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
 800ecec:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800ecee:	f3bf 8f5b 	dmb	ish
 800ecf2:	e853 2f00 	ldrex	r2, [r3]
 800ecf6:	1c51      	adds	r1, r2, #1
 800ecf8:	e843 1000 	strex	r0, r1, [r3]
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	d1f8      	bne.n	800ecf2 <out_func+0x16>
 800ed00:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800ed04:	68a3      	ldr	r3, [r4, #8]
 800ed06:	549d      	strb	r5, [r3, r2]
}
 800ed08:	2000      	movs	r0, #0
 800ed0a:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
 800ed0c:	4608      	mov	r0, r1
 800ed0e:	f7ff ffd8 	bl	800ecc2 <log_output_flush>
 800ed12:	e7eb      	b.n	800ecec <out_func+0x10>

0800ed14 <cr_out_func>:
{
 800ed14:	b538      	push	{r3, r4, r5, lr}
 800ed16:	4604      	mov	r4, r0
 800ed18:	460d      	mov	r5, r1
	out_func(c, ctx);
 800ed1a:	f7ff ffdf 	bl	800ecdc <out_func>
	if (c == '\n') {
 800ed1e:	2c0a      	cmp	r4, #10
 800ed20:	d001      	beq.n	800ed26 <cr_out_func+0x12>
}
 800ed22:	2000      	movs	r0, #0
 800ed24:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
 800ed26:	4629      	mov	r1, r5
 800ed28:	200d      	movs	r0, #13
 800ed2a:	f7ff ffd7 	bl	800ecdc <out_func>
 800ed2e:	e7f8      	b.n	800ed22 <cr_out_func+0xe>

0800ed30 <z_log_msg2_finalize>:
#include <logging/log_internal.h>
#include <logging/log_ctrl.h>

void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
			 const struct log_msg2_desc desc, const void *data)
{
 800ed30:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
 800ed32:	b198      	cbz	r0, 800ed5c <z_log_msg2_finalize+0x2c>
 800ed34:	460e      	mov	r6, r1
 800ed36:	4614      	mov	r4, r2
 800ed38:	4619      	mov	r1, r3
 800ed3a:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
 800ed3c:	b143      	cbz	r3, 800ed50 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
 800ed3e:	f100 030c 	add.w	r3, r0, #12
 800ed42:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800ed46:	f3c2 42cb 	ubfx	r2, r2, #19, #12
 800ed4a:	4418      	add	r0, r3
 800ed4c:	f001 ffaa 	bl	8010ca4 <memcpy>

		memcpy(d, data, desc.data_len);
	}

	msg->hdr.desc = desc;
 800ed50:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
 800ed52:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
 800ed54:	4628      	mov	r0, r5
 800ed56:	f7f4 fd77 	bl	8003848 <z_log_msg2_commit>
}
 800ed5a:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
 800ed5c:	f7f4 fc3c 	bl	80035d8 <z_log_dropped>
		return;
 800ed60:	e7fb      	b.n	800ed5a <z_log_msg2_finalize+0x2a>

0800ed62 <z_impl_z_log_msg2_static_create>:

void z_impl_z_log_msg2_static_create(const void *source,
			      const struct log_msg2_desc desc,
			      uint8_t *package, const void *data)
{
 800ed62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed66:	4605      	mov	r5, r0
 800ed68:	460c      	mov	r4, r1
 800ed6a:	4617      	mov	r7, r2
 800ed6c:	461e      	mov	r6, r3
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 800ed6e:	f3c1 2c49 	ubfx	ip, r1, #9, #10
 800ed72:	f3c1 40cb 	ubfx	r0, r1, #19, #12
 800ed76:	4484      	add	ip, r0
 800ed78:	f10c 0c13 	add.w	ip, ip, #19
 800ed7c:	f02c 0c07 	bic.w	ip, ip, #7
	uint32_t msg_wlen = log_msg2_get_total_wlen(desc);
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
 800ed80:	ea4f 009c 	mov.w	r0, ip, lsr #2
 800ed84:	f7f4 fca2 	bl	80036cc <z_log_msg2_alloc>

	if (msg) {
 800ed88:	4680      	mov	r8, r0
 800ed8a:	b128      	cbz	r0, 800ed98 <z_impl_z_log_msg2_static_create+0x36>
 800ed8c:	f3c4 2249 	ubfx	r2, r4, #9, #10
 800ed90:	4639      	mov	r1, r7
 800ed92:	300c      	adds	r0, #12
 800ed94:	f001 ff86 	bl	8010ca4 <memcpy>
		memcpy(msg->data, package, desc.package_len);
	}

	z_log_msg2_finalize(msg, source, desc, data);
 800ed98:	4633      	mov	r3, r6
 800ed9a:	4622      	mov	r2, r4
 800ed9c:	4629      	mov	r1, r5
 800ed9e:	4640      	mov	r0, r8
 800eda0:	f7ff ffc6 	bl	800ed30 <z_log_msg2_finalize>
}
 800eda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eda8 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
 800eda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edac:	b085      	sub	sp, #20
 800edae:	4681      	mov	r9, r0
 800edb0:	460d      	mov	r5, r1
 800edb2:	4690      	mov	r8, r2
 800edb4:	461e      	mov	r6, r3
 800edb6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800edba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	int plen;

	if (fmt) {
 800edbc:	b3b7      	cbz	r7, 800ee2c <z_impl_z_log_msg2_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
 800edbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800edc0:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	463b      	mov	r3, r7
 800edc6:	2200      	movs	r2, #0
 800edc8:	210c      	movs	r1, #12
 800edca:	4610      	mov	r0, r2
 800edcc:	f7f3 fbe8 	bl	80025a0 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 800edd0:	4682      	mov	sl, r0
 800edd2:	eb00 030b 	add.w	r3, r0, fp
 800edd6:	3313      	adds	r3, #19
 800edd8:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
 800eddc:	2400      	movs	r4, #0
 800edde:	f36f 0400 	bfc	r4, #0, #1
 800ede2:	f36f 0441 	bfc	r4, #1, #1
 800ede6:	f36f 0482 	bfc	r4, #2, #1
 800edea:	f369 04c5 	bfi	r4, r9, #3, #3
 800edee:	f368 1488 	bfi	r4, r8, #6, #3
 800edf2:	f360 2452 	bfi	r4, r0, #9, #10
 800edf6:	f36b 44de 	bfi	r4, fp, #19, #12
 800edfa:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
 800edfe:	0898      	lsrs	r0, r3, #2
 800ee00:	f7f4 fc64 	bl	80036cc <z_log_msg2_alloc>
	}

	if (msg && fmt) {
 800ee04:	4680      	mov	r8, r0
 800ee06:	b140      	cbz	r0, 800ee1a <z_impl_z_log_msg2_runtime_vcreate+0x72>
 800ee08:	b13f      	cbz	r7, 800ee1a <z_impl_z_log_msg2_runtime_vcreate+0x72>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
 800ee0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee0c:	9300      	str	r3, [sp, #0]
 800ee0e:	463b      	mov	r3, r7
 800ee10:	2200      	movs	r2, #0
 800ee12:	4651      	mov	r1, sl
 800ee14:	300c      	adds	r0, #12
 800ee16:	f7f3 fbc3 	bl	80025a0 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
 800ee1a:	4633      	mov	r3, r6
 800ee1c:	4622      	mov	r2, r4
 800ee1e:	4629      	mov	r1, r5
 800ee20:	4640      	mov	r0, r8
 800ee22:	f7ff ff85 	bl	800ed30 <z_log_msg2_finalize>
}
 800ee26:	b005      	add	sp, #20
 800ee28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
 800ee2c:	2000      	movs	r0, #0
 800ee2e:	e7cf      	b.n	800edd0 <z_impl_z_log_msg2_runtime_vcreate+0x28>

0800ee30 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 800ee30:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 800ee32:	f7f4 ffb7 	bl	8003da4 <__do_global_ctors_aux>
	__do_init_array_aux();
 800ee36:	f7f4 ffa7 	bl	8003d88 <__do_init_array_aux>
}
 800ee3a:	bd08      	pop	{r3, pc}

0800ee3c <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	4604      	mov	r4, r0

	if (esf != NULL) {
 800ee40:	460d      	mov	r5, r1
 800ee42:	b111      	cbz	r1, 800ee4a <z_arm_fatal_error+0xe>
		esf_dump(esf);
 800ee44:	4608      	mov	r0, r1
 800ee46:	f7f4 ffd1 	bl	8003dec <esf_dump>
	}
	z_fatal_error(reason, esf);
 800ee4a:	4629      	mov	r1, r5
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f7fc f8b1 	bl	800afb4 <z_fatal_error>
}
 800ee52:	bd38      	pop	{r3, r4, r5, pc}

0800ee54 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 800ee54:	b508      	push	{r3, lr}
 800ee56:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800ee58:	6800      	ldr	r0, [r0, #0]
 800ee5a:	f7ff ffef 	bl	800ee3c <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 800ee5e:	bd08      	pop	{r3, pc}

0800ee60 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
 800ee60:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800ee62:	2100      	movs	r1, #0
 800ee64:	2001      	movs	r0, #1
 800ee66:	f7ff ffe9 	bl	800ee3c <z_arm_fatal_error>
}
 800ee6a:	bd08      	pop	{r3, pc}

0800ee6c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 800ee6c:	b508      	push	{r3, lr}
	handler();
 800ee6e:	f7f5 f8f1 	bl	8004054 <z_SysNmiOnReset>
	z_arm_int_exit();
 800ee72:	f7f5 f9db 	bl	800422c <z_arm_exc_exit>
}
 800ee76:	bd08      	pop	{r3, pc}

0800ee78 <memory_fault_recoverable>:
}
 800ee78:	2000      	movs	r0, #0
 800ee7a:	4770      	bx	lr

0800ee7c <z_log_msg2_runtime_create>:
{
 800ee7c:	b510      	push	{r4, lr}
 800ee7e:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800ee80:	ac0a      	add	r4, sp, #40	; 0x28
 800ee82:	9405      	str	r4, [sp, #20]
 800ee84:	9402      	str	r4, [sp, #8]
 800ee86:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ee88:	9401      	str	r4, [sp, #4]
 800ee8a:	9c08      	ldr	r4, [sp, #32]
 800ee8c:	9400      	str	r4, [sp, #0]
 800ee8e:	f7ff ff8b 	bl	800eda8 <z_impl_z_log_msg2_runtime_vcreate>
}
 800ee92:	b006      	add	sp, #24
 800ee94:	bd10      	pop	{r4, pc}

0800ee96 <fault_handle>:
{
 800ee96:	b508      	push	{r3, lr}
	*recoverable = false;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 800ee9c:	1ecb      	subs	r3, r1, #3
 800ee9e:	2b09      	cmp	r3, #9
 800eea0:	d81a      	bhi.n	800eed8 <fault_handle+0x42>
 800eea2:	e8df f003 	tbb	[pc, r3]
 800eea6:	0905      	.short	0x0905
 800eea8:	1919110d 	.word	0x1919110d
 800eeac:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
 800eeb0:	4611      	mov	r1, r2
 800eeb2:	f7f5 fe17 	bl	8004ae4 <hard_fault>
}
 800eeb6:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 800eeb8:	2100      	movs	r1, #0
 800eeba:	f7f5 fcb1 	bl	8004820 <mem_manage_fault>
		break;
 800eebe:	e7fa      	b.n	800eeb6 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 800eec0:	2100      	movs	r1, #0
 800eec2:	f7f5 f9df 	bl	8004284 <bus_fault>
		break;
 800eec6:	e7f6      	b.n	800eeb6 <fault_handle+0x20>
		reason = usage_fault(esf);
 800eec8:	f7f5 fb4a 	bl	8004560 <usage_fault>
		break;
 800eecc:	e7f3      	b.n	800eeb6 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
 800eece:	4611      	mov	r1, r2
 800eed0:	f7f5 fc7a 	bl	80047c8 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800eed4:	2000      	movs	r0, #0
		break;
 800eed6:	e7ee      	b.n	800eeb6 <fault_handle+0x20>
		reserved_exception(esf, fault);
 800eed8:	f7f5 f9b6 	bl	8004248 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800eedc:	2000      	movs	r0, #0
	return reason;
 800eede:	e7ea      	b.n	800eeb6 <fault_handle+0x20>

0800eee0 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 800eee0:	6843      	ldr	r3, [r0, #4]
 800eee2:	1e5a      	subs	r2, r3, #1
		&&
 800eee4:	4213      	tst	r3, r2
 800eee6:	d106      	bne.n	800eef6 <mpu_partition_is_valid+0x16>
		&&
 800eee8:	2b1f      	cmp	r3, #31
 800eeea:	d906      	bls.n	800eefa <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 800eeec:	6803      	ldr	r3, [r0, #0]
		&&
 800eeee:	421a      	tst	r2, r3
 800eef0:	d005      	beq.n	800eefe <mpu_partition_is_valid+0x1e>
 800eef2:	2000      	movs	r0, #0
 800eef4:	4770      	bx	lr
 800eef6:	2000      	movs	r0, #0
 800eef8:	4770      	bx	lr
 800eefa:	2000      	movs	r0, #0
 800eefc:	4770      	bx	lr
 800eefe:	2001      	movs	r0, #1
}
 800ef00:	4770      	bx	lr

0800ef02 <mpu_configure_region>:
{
 800ef02:	b500      	push	{lr}
 800ef04:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 800ef06:	680b      	ldr	r3, [r1, #0]
 800ef08:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 800ef0a:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800ef0c:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 800ef0e:	2b20      	cmp	r3, #32
 800ef10:	d912      	bls.n	800ef38 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 800ef12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef16:	d811      	bhi.n	800ef3c <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800ef18:	3b01      	subs	r3, #1
 800ef1a:	fab3 f383 	clz	r3, r3
 800ef1e:	f1c3 031f 	rsb	r3, r3, #31
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 800ef2c:	a901      	add	r1, sp, #4
 800ef2e:	f7f5 ffdb 	bl	8004ee8 <region_allocate_and_init>
}
 800ef32:	b005      	add	sp, #20
 800ef34:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 800ef38:	2308      	movs	r3, #8
 800ef3a:	e7f5      	b.n	800ef28 <mpu_configure_region+0x26>
		return REGION_4G;
 800ef3c:	233e      	movs	r3, #62	; 0x3e
 800ef3e:	e7f3      	b.n	800ef28 <mpu_configure_region+0x26>

0800ef40 <arm_core_mpu_configure_static_mpu_regions>:
{
 800ef40:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 800ef42:	f7f6 f857 	bl	8004ff4 <mpu_configure_static_mpu_regions>
}
 800ef46:	bd08      	pop	{r3, pc}

0800ef48 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 800ef48:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 800ef4a:	f7f6 f85d 	bl	8005008 <mpu_configure_dynamic_mpu_regions>
}
 800ef4e:	bd08      	pop	{r3, pc}

0800ef50 <malloc_prepare>:
}
 800ef50:	2000      	movs	r0, #0
 800ef52:	4770      	bx	lr

0800ef54 <_stdout_hook_default>:
}
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef58:	4770      	bx	lr

0800ef5a <_stdin_hook_default>:
}
 800ef5a:	2000      	movs	r0, #0
 800ef5c:	4770      	bx	lr

0800ef5e <_read>:
{
 800ef5e:	b508      	push	{r3, lr}
 800ef60:	4608      	mov	r0, r1
 800ef62:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800ef64:	f7f6 f8a8 	bl	80050b8 <z_impl_zephyr_read_stdin>
}
 800ef68:	bd08      	pop	{r3, pc}

0800ef6a <_write>:
{
 800ef6a:	b508      	push	{r3, lr}
 800ef6c:	4608      	mov	r0, r1
 800ef6e:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800ef70:	f7f6 f8b8 	bl	80050e4 <z_impl_zephyr_write_stdout>
}
 800ef74:	bd08      	pop	{r3, pc}

0800ef76 <_close>:
}
 800ef76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef7a:	4770      	bx	lr

0800ef7c <_lseek>:
}
 800ef7c:	2000      	movs	r0, #0
 800ef7e:	4770      	bx	lr

0800ef80 <_isatty>:
}
 800ef80:	2802      	cmp	r0, #2
 800ef82:	bfcc      	ite	gt
 800ef84:	2000      	movgt	r0, #0
 800ef86:	2001      	movle	r0, #1
 800ef88:	4770      	bx	lr

0800ef8a <_kill>:
}
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	4770      	bx	lr

0800ef8e <_getpid>:
}
 800ef8e:	2000      	movs	r0, #0
 800ef90:	4770      	bx	lr

0800ef92 <_fstat>:
	st->st_mode = S_IFCHR;
 800ef92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ef96:	604b      	str	r3, [r1, #4]
}
 800ef98:	2000      	movs	r0, #0
 800ef9a:	4770      	bx	lr

0800ef9c <__retarget_lock_init_recursive>:
{
 800ef9c:	b510      	push	{r4, lr}
 800ef9e:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
 800efa0:	2014      	movs	r0, #20
 800efa2:	f7fd fda9 	bl	800caf8 <malloc>
 800efa6:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 800efa8:	f001 fad6 	bl	8010558 <z_impl_k_mutex_init>
}
 800efac:	bd10      	pop	{r4, pc}

0800efae <__retarget_lock_acquire_recursive>:
{
 800efae:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 800efb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efb8:	f7fc f9e4 	bl	800b384 <z_impl_k_mutex_lock>
}
 800efbc:	bd08      	pop	{r3, pc}

0800efbe <__retarget_lock_release_recursive>:
{
 800efbe:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 800efc0:	f7fc fa6a 	bl	800b498 <z_impl_k_mutex_unlock>
}
 800efc4:	bd08      	pop	{r3, pc}

0800efc6 <__errno>:
{
 800efc6:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 800efc8:	f7fb ff90 	bl	800aeec <z_impl_z_errno>
}
 800efcc:	bd08      	pop	{r3, pc}

0800efce <z_impl_sys_rand_get>:

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
void z_impl_sys_rand_get(void *dst, size_t outlen)
{
 800efce:	b508      	push	{r3, lr}
	rand_get(dst, outlen, false);
 800efd0:	2200      	movs	r2, #0
 800efd2:	f7f6 f8cf 	bl	8005174 <rand_get>
}
 800efd6:	bd08      	pop	{r3, pc}

0800efd8 <__stm32_exti_isr_0>:
{
 800efd8:	b508      	push	{r3, lr}
 800efda:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 800efdc:	2101      	movs	r1, #1
 800efde:	2000      	movs	r0, #0
 800efe0:	f7f6 f8fa 	bl	80051d8 <__stm32_exti_isr>
}
 800efe4:	bd08      	pop	{r3, pc}

0800efe6 <__stm32_exti_isr_1>:
{
 800efe6:	b508      	push	{r3, lr}
 800efe8:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 800efea:	2102      	movs	r1, #2
 800efec:	2001      	movs	r0, #1
 800efee:	f7f6 f8f3 	bl	80051d8 <__stm32_exti_isr>
}
 800eff2:	bd08      	pop	{r3, pc}

0800eff4 <__stm32_exti_isr_2>:
{
 800eff4:	b508      	push	{r3, lr}
 800eff6:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 800eff8:	2103      	movs	r1, #3
 800effa:	2002      	movs	r0, #2
 800effc:	f7f6 f8ec 	bl	80051d8 <__stm32_exti_isr>
}
 800f000:	bd08      	pop	{r3, pc}

0800f002 <__stm32_exti_isr_3>:
{
 800f002:	b508      	push	{r3, lr}
 800f004:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 800f006:	2104      	movs	r1, #4
 800f008:	2003      	movs	r0, #3
 800f00a:	f7f6 f8e5 	bl	80051d8 <__stm32_exti_isr>
}
 800f00e:	bd08      	pop	{r3, pc}

0800f010 <__stm32_exti_isr_4>:
{
 800f010:	b508      	push	{r3, lr}
 800f012:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 800f014:	2105      	movs	r1, #5
 800f016:	2004      	movs	r0, #4
 800f018:	f7f6 f8de 	bl	80051d8 <__stm32_exti_isr>
}
 800f01c:	bd08      	pop	{r3, pc}

0800f01e <__stm32_exti_isr_9_5>:
{
 800f01e:	b508      	push	{r3, lr}
 800f020:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 800f022:	210a      	movs	r1, #10
 800f024:	2005      	movs	r0, #5
 800f026:	f7f6 f8d7 	bl	80051d8 <__stm32_exti_isr>
}
 800f02a:	bd08      	pop	{r3, pc}

0800f02c <__stm32_exti_isr_15_10>:
{
 800f02c:	b508      	push	{r3, lr}
 800f02e:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 800f030:	2110      	movs	r1, #16
 800f032:	200a      	movs	r0, #10
 800f034:	f7f6 f8d0 	bl	80051d8 <__stm32_exti_isr>
}
 800f038:	bd08      	pop	{r3, pc}

0800f03a <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 800f03a:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800f03c:	2200      	movs	r2, #0
 800f03e:	4611      	mov	r1, r2
 800f040:	2006      	movs	r0, #6
 800f042:	f7f4 fff1 	bl	8004028 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800f046:	2200      	movs	r2, #0
 800f048:	4611      	mov	r1, r2
 800f04a:	2007      	movs	r0, #7
 800f04c:	f7f4 ffec 	bl	8004028 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800f050:	2200      	movs	r2, #0
 800f052:	4611      	mov	r1, r2
 800f054:	2008      	movs	r0, #8
 800f056:	f7f4 ffe7 	bl	8004028 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800f05a:	2200      	movs	r2, #0
 800f05c:	4611      	mov	r1, r2
 800f05e:	2009      	movs	r0, #9
 800f060:	f7f4 ffe2 	bl	8004028 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800f064:	2200      	movs	r2, #0
 800f066:	4611      	mov	r1, r2
 800f068:	200a      	movs	r0, #10
 800f06a:	f7f4 ffdd 	bl	8004028 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 800f06e:	2200      	movs	r2, #0
 800f070:	4611      	mov	r1, r2
 800f072:	2017      	movs	r0, #23
 800f074:	f7f4 ffd8 	bl	8004028 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800f078:	2200      	movs	r2, #0
 800f07a:	4611      	mov	r1, r2
 800f07c:	2028      	movs	r0, #40	; 0x28
 800f07e:	f7f4 ffd3 	bl	8004028 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 800f082:	bd08      	pop	{r3, pc}

0800f084 <stm32_exti_init>:
{
 800f084:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 800f086:	f7ff ffd8 	bl	800f03a <__stm32_exti_connect_irqs>
}
 800f08a:	2000      	movs	r0, #0
 800f08c:	bd08      	pop	{r3, pc}

0800f08e <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 800f08e:	2300      	movs	r3, #0
 800f090:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 800f092:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 800f094:	6083      	str	r3, [r0, #8]
}
 800f096:	4770      	bx	lr

0800f098 <get_bus_clock>:
}
 800f098:	fbb0 f0f1 	udiv	r0, r0, r1
 800f09c:	4770      	bx	lr

0800f09e <config_pll_init>:
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
 800f09e:	2300      	movs	r3, #0
 800f0a0:	6003      	str	r3, [r0, #0]
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 800f0a2:	2314      	movs	r3, #20
 800f0a4:	6043      	str	r3, [r0, #4]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 800f0a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f0aa:	6083      	str	r3, [r0, #8]
}
 800f0ac:	4770      	bx	lr

0800f0ae <dma_stm32_config_irq_0>:
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */

static void dma_stm32_config_irq_0(const struct device *dev)
{
 800f0ae:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	DMA_STM32_IRQ_CONNECT(0, 0);
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	4611      	mov	r1, r2
 800f0b4:	200b      	movs	r0, #11
 800f0b6:	f7f4 ffb7 	bl	8004028 <z_arm_irq_priority_set>
 800f0ba:	200b      	movs	r0, #11
 800f0bc:	f7f4 ff84 	bl	8003fc8 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(0, 1);
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	4611      	mov	r1, r2
 800f0c4:	200c      	movs	r0, #12
 800f0c6:	f7f4 ffaf 	bl	8004028 <z_arm_irq_priority_set>
 800f0ca:	200c      	movs	r0, #12
 800f0cc:	f7f4 ff7c 	bl	8003fc8 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 2);
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	4611      	mov	r1, r2
 800f0d4:	200d      	movs	r0, #13
 800f0d6:	f7f4 ffa7 	bl	8004028 <z_arm_irq_priority_set>
 800f0da:	200d      	movs	r0, #13
 800f0dc:	f7f4 ff74 	bl	8003fc8 <arch_irq_enable>
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
	DMA_STM32_IRQ_CONNECT(0, 3);
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	4611      	mov	r1, r2
 800f0e4:	200e      	movs	r0, #14
 800f0e6:	f7f4 ff9f 	bl	8004028 <z_arm_irq_priority_set>
 800f0ea:	200e      	movs	r0, #14
 800f0ec:	f7f4 ff6c 	bl	8003fc8 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 4);
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	4611      	mov	r1, r2
 800f0f4:	200f      	movs	r0, #15
 800f0f6:	f7f4 ff97 	bl	8004028 <z_arm_irq_priority_set>
 800f0fa:	200f      	movs	r0, #15
 800f0fc:	f7f4 ff64 	bl	8003fc8 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 5)
	DMA_STM32_IRQ_CONNECT(0, 5);
 800f100:	2200      	movs	r2, #0
 800f102:	4611      	mov	r1, r2
 800f104:	2010      	movs	r0, #16
 800f106:	f7f4 ff8f 	bl	8004028 <z_arm_irq_priority_set>
 800f10a:	2010      	movs	r0, #16
 800f10c:	f7f4 ff5c 	bl	8003fc8 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 6)
	DMA_STM32_IRQ_CONNECT(0, 6);
 800f110:	2200      	movs	r2, #0
 800f112:	4611      	mov	r1, r2
 800f114:	2011      	movs	r0, #17
 800f116:	f7f4 ff87 	bl	8004028 <z_arm_irq_priority_set>
 800f11a:	2011      	movs	r0, #17
 800f11c:	f7f4 ff54 	bl	8003fc8 <arch_irq_enable>
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
/* Either 5 or 6 or 7 or 8 channels for DMA across all stm32 series. */
}
 800f120:	bd08      	pop	{r3, pc}

0800f122 <dma_stm32_dump_stream_irq>:
{
 800f122:	b508      	push	{r3, lr}
	const struct dma_stm32_config *config = dev->config;
 800f124:	6843      	ldr	r3, [r0, #4]
	stm32_dma_dump_stream_irq(dma, id);
 800f126:	6918      	ldr	r0, [r3, #16]
 800f128:	f7f6 ffee 	bl	8006108 <stm32_dma_dump_stream_irq>
}
 800f12c:	bd08      	pop	{r3, pc}

0800f12e <dma_stm32_clear_stream_irq>:
{
 800f12e:	b538      	push	{r3, r4, r5, lr}
 800f130:	460c      	mov	r4, r1
	const struct dma_stm32_config *config = dev->config;
 800f132:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 800f134:	691d      	ldr	r5, [r3, #16]
	dma_stm32_clear_tc(dma, id);
 800f136:	4628      	mov	r0, r5
 800f138:	f7f6 ffa6 	bl	8006088 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 800f13c:	4621      	mov	r1, r4
 800f13e:	4628      	mov	r0, r5
 800f140:	f7f6 ff9a 	bl	8006078 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 800f144:	4621      	mov	r1, r4
 800f146:	4628      	mov	r0, r5
 800f148:	f000 f946 	bl	800f3d8 <stm32_dma_clear_stream_irq>
}
 800f14c:	bd38      	pop	{r3, r4, r5, pc}

0800f14e <dma_stm32_irq_0_0>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 0);
 800f14e:	b508      	push	{r3, lr}
 800f150:	2100      	movs	r1, #0
 800f152:	f7f6 fb15 	bl	8005780 <dma_stm32_irq_handler>
 800f156:	bd08      	pop	{r3, pc}

0800f158 <dma_stm32_irq_0_1>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 1);
 800f158:	b508      	push	{r3, lr}
 800f15a:	2101      	movs	r1, #1
 800f15c:	f7f6 fb10 	bl	8005780 <dma_stm32_irq_handler>
 800f160:	bd08      	pop	{r3, pc}

0800f162 <dma_stm32_irq_0_2>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 2);
 800f162:	b508      	push	{r3, lr}
 800f164:	2102      	movs	r1, #2
 800f166:	f7f6 fb0b 	bl	8005780 <dma_stm32_irq_handler>
 800f16a:	bd08      	pop	{r3, pc}

0800f16c <dma_stm32_irq_0_3>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 3);
 800f16c:	b508      	push	{r3, lr}
 800f16e:	2103      	movs	r1, #3
 800f170:	f7f6 fb06 	bl	8005780 <dma_stm32_irq_handler>
 800f174:	bd08      	pop	{r3, pc}

0800f176 <dma_stm32_irq_0_4>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 4);
 800f176:	b508      	push	{r3, lr}
 800f178:	2104      	movs	r1, #4
 800f17a:	f7f6 fb01 	bl	8005780 <dma_stm32_irq_handler>
 800f17e:	bd08      	pop	{r3, pc}

0800f180 <dma_stm32_irq_0_5>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 5);
 800f180:	b508      	push	{r3, lr}
 800f182:	2105      	movs	r1, #5
 800f184:	f7f6 fafc 	bl	8005780 <dma_stm32_irq_handler>
 800f188:	bd08      	pop	{r3, pc}

0800f18a <dma_stm32_irq_0_6>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 6);
 800f18a:	b508      	push	{r3, lr}
 800f18c:	2106      	movs	r1, #6
 800f18e:	f7f6 faf7 	bl	8005780 <dma_stm32_irq_handler>
 800f192:	bd08      	pop	{r3, pc}

0800f194 <dma_stm32_disable_stream>:
{
 800f194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f196:	4607      	mov	r7, r0
 800f198:	460e      	mov	r6, r1
	int count = 0;
 800f19a:	2400      	movs	r4, #0
		if (stm32_dma_disable_stream(dma, id) == 0) {
 800f19c:	4631      	mov	r1, r6
 800f19e:	4638      	mov	r0, r7
 800f1a0:	f7f7 f88a 	bl	80062b8 <stm32_dma_disable_stream>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	b160      	cbz	r0, 800f1c2 <dma_stm32_disable_stream+0x2e>
		if (count++ > (5 * 1000)) {
 800f1a8:	1c65      	adds	r5, r4, #1
 800f1aa:	f241 3388 	movw	r3, #5000	; 0x1388
 800f1ae:	429c      	cmp	r4, r3
 800f1b0:	dc05      	bgt.n	800f1be <dma_stm32_disable_stream+0x2a>
	return z_impl_k_sleep(timeout);
 800f1b2:	200a      	movs	r0, #10
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	f7fc ff13 	bl	800bfe0 <z_impl_k_sleep>
 800f1ba:	462c      	mov	r4, r5
	for (;;) {
 800f1bc:	e7ee      	b.n	800f19c <dma_stm32_disable_stream+0x8>
			return -EBUSY;
 800f1be:	f06f 030f 	mvn.w	r3, #15
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1c6 <dma_stm32_start>:
{
 800f1c6:	b538      	push	{r3, r4, r5, lr}
	const struct dma_stm32_config *config = dev->config;
 800f1c8:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 800f1ca:	691d      	ldr	r5, [r3, #16]
	id = id - STREAM_OFFSET;
 800f1cc:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 800f1ce:	695b      	ldr	r3, [r3, #20]
 800f1d0:	42a3      	cmp	r3, r4
 800f1d2:	d908      	bls.n	800f1e6 <dma_stm32_start+0x20>
	dma_stm32_clear_stream_irq(dev, id);
 800f1d4:	4621      	mov	r1, r4
 800f1d6:	f7ff ffaa 	bl	800f12e <dma_stm32_clear_stream_irq>
	stm32_dma_enable_stream(dma, id);
 800f1da:	4621      	mov	r1, r4
 800f1dc:	4628      	mov	r0, r5
 800f1de:	f7f7 f85d 	bl	800629c <stm32_dma_enable_stream>
	return 0;
 800f1e2:	2000      	movs	r0, #0
}
 800f1e4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 800f1e6:	f06f 0015 	mvn.w	r0, #21
 800f1ea:	e7fb      	b.n	800f1e4 <dma_stm32_start+0x1e>

0800f1ec <LL_DMA_IsActiveFlag_GI1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF1) == (DMA_ISR_GIF1)) ? 1UL : 0UL);
 800f1ec:	6800      	ldr	r0, [r0, #0]
 800f1ee:	f010 0001 	ands.w	r0, r0, #1
 800f1f2:	d000      	beq.n	800f1f6 <LL_DMA_IsActiveFlag_GI1+0xa>
 800f1f4:	2001      	movs	r0, #1
}
 800f1f6:	4770      	bx	lr

0800f1f8 <LL_DMA_IsActiveFlag_GI2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF2) == (DMA_ISR_GIF2)) ? 1UL : 0UL);
 800f1f8:	6800      	ldr	r0, [r0, #0]
 800f1fa:	f010 0010 	ands.w	r0, r0, #16
 800f1fe:	d000      	beq.n	800f202 <LL_DMA_IsActiveFlag_GI2+0xa>
 800f200:	2001      	movs	r0, #1
}
 800f202:	4770      	bx	lr

0800f204 <LL_DMA_IsActiveFlag_GI3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF3) == (DMA_ISR_GIF3)) ? 1UL : 0UL);
 800f204:	6800      	ldr	r0, [r0, #0]
 800f206:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800f20a:	d000      	beq.n	800f20e <LL_DMA_IsActiveFlag_GI3+0xa>
 800f20c:	2001      	movs	r0, #1
}
 800f20e:	4770      	bx	lr

0800f210 <LL_DMA_IsActiveFlag_GI4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF4) == (DMA_ISR_GIF4)) ? 1UL : 0UL);
 800f210:	6800      	ldr	r0, [r0, #0]
 800f212:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800f216:	d000      	beq.n	800f21a <LL_DMA_IsActiveFlag_GI4+0xa>
 800f218:	2001      	movs	r0, #1
}
 800f21a:	4770      	bx	lr

0800f21c <LL_DMA_IsActiveFlag_GI5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF5) == (DMA_ISR_GIF5)) ? 1UL : 0UL);
 800f21c:	6800      	ldr	r0, [r0, #0]
 800f21e:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800f222:	d000      	beq.n	800f226 <LL_DMA_IsActiveFlag_GI5+0xa>
 800f224:	2001      	movs	r0, #1
}
 800f226:	4770      	bx	lr

0800f228 <LL_DMA_IsActiveFlag_GI6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF6) == (DMA_ISR_GIF6)) ? 1UL : 0UL);
 800f228:	6800      	ldr	r0, [r0, #0]
 800f22a:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800f22e:	d000      	beq.n	800f232 <LL_DMA_IsActiveFlag_GI6+0xa>
 800f230:	2001      	movs	r0, #1
}
 800f232:	4770      	bx	lr

0800f234 <LL_DMA_IsActiveFlag_GI7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF7) == (DMA_ISR_GIF7)) ? 1UL : 0UL);
 800f234:	6800      	ldr	r0, [r0, #0]
 800f236:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800f23a:	d000      	beq.n	800f23e <LL_DMA_IsActiveFlag_GI7+0xa>
 800f23c:	2001      	movs	r0, #1
}
 800f23e:	4770      	bx	lr

0800f240 <LL_DMA_IsActiveFlag_TC1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 800f240:	6800      	ldr	r0, [r0, #0]
 800f242:	f010 0002 	ands.w	r0, r0, #2
 800f246:	d000      	beq.n	800f24a <LL_DMA_IsActiveFlag_TC1+0xa>
 800f248:	2001      	movs	r0, #1
}
 800f24a:	4770      	bx	lr

0800f24c <LL_DMA_IsActiveFlag_TC2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 800f24c:	6800      	ldr	r0, [r0, #0]
 800f24e:	f010 0020 	ands.w	r0, r0, #32
 800f252:	d000      	beq.n	800f256 <LL_DMA_IsActiveFlag_TC2+0xa>
 800f254:	2001      	movs	r0, #1
}
 800f256:	4770      	bx	lr

0800f258 <LL_DMA_IsActiveFlag_TC3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 800f258:	6800      	ldr	r0, [r0, #0]
 800f25a:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 800f25e:	d000      	beq.n	800f262 <LL_DMA_IsActiveFlag_TC3+0xa>
 800f260:	2001      	movs	r0, #1
}
 800f262:	4770      	bx	lr

0800f264 <LL_DMA_IsActiveFlag_TC4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 800f264:	6800      	ldr	r0, [r0, #0]
 800f266:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 800f26a:	d000      	beq.n	800f26e <LL_DMA_IsActiveFlag_TC4+0xa>
 800f26c:	2001      	movs	r0, #1
}
 800f26e:	4770      	bx	lr

0800f270 <LL_DMA_IsActiveFlag_TC5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 800f270:	6800      	ldr	r0, [r0, #0]
 800f272:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800f276:	d000      	beq.n	800f27a <LL_DMA_IsActiveFlag_TC5+0xa>
 800f278:	2001      	movs	r0, #1
}
 800f27a:	4770      	bx	lr

0800f27c <LL_DMA_IsActiveFlag_TC6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 800f27c:	6800      	ldr	r0, [r0, #0]
 800f27e:	f410 1000 	ands.w	r0, r0, #2097152	; 0x200000
 800f282:	d000      	beq.n	800f286 <LL_DMA_IsActiveFlag_TC6+0xa>
 800f284:	2001      	movs	r0, #1
}
 800f286:	4770      	bx	lr

0800f288 <LL_DMA_IsActiveFlag_TC7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
 800f288:	6800      	ldr	r0, [r0, #0]
 800f28a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800f28e:	d000      	beq.n	800f292 <LL_DMA_IsActiveFlag_TC7+0xa>
 800f290:	2001      	movs	r0, #1
}
 800f292:	4770      	bx	lr

0800f294 <LL_DMA_IsActiveFlag_HT1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 800f294:	6800      	ldr	r0, [r0, #0]
 800f296:	f010 0004 	ands.w	r0, r0, #4
 800f29a:	d000      	beq.n	800f29e <LL_DMA_IsActiveFlag_HT1+0xa>
 800f29c:	2001      	movs	r0, #1
}
 800f29e:	4770      	bx	lr

0800f2a0 <LL_DMA_IsActiveFlag_HT2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2)) ? 1UL : 0UL);
 800f2a0:	6800      	ldr	r0, [r0, #0]
 800f2a2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800f2a6:	d000      	beq.n	800f2aa <LL_DMA_IsActiveFlag_HT2+0xa>
 800f2a8:	2001      	movs	r0, #1
}
 800f2aa:	4770      	bx	lr

0800f2ac <LL_DMA_IsActiveFlag_HT3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3)) ? 1UL : 0UL);
 800f2ac:	6800      	ldr	r0, [r0, #0]
 800f2ae:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800f2b2:	d000      	beq.n	800f2b6 <LL_DMA_IsActiveFlag_HT3+0xa>
 800f2b4:	2001      	movs	r0, #1
}
 800f2b6:	4770      	bx	lr

0800f2b8 <LL_DMA_IsActiveFlag_HT4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4)) ? 1UL : 0UL);
 800f2b8:	6800      	ldr	r0, [r0, #0]
 800f2ba:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800f2be:	d000      	beq.n	800f2c2 <LL_DMA_IsActiveFlag_HT4+0xa>
 800f2c0:	2001      	movs	r0, #1
}
 800f2c2:	4770      	bx	lr

0800f2c4 <LL_DMA_IsActiveFlag_HT5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5)) ? 1UL : 0UL);
 800f2c4:	6800      	ldr	r0, [r0, #0]
 800f2c6:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 800f2ca:	d000      	beq.n	800f2ce <LL_DMA_IsActiveFlag_HT5+0xa>
 800f2cc:	2001      	movs	r0, #1
}
 800f2ce:	4770      	bx	lr

0800f2d0 <LL_DMA_IsActiveFlag_HT6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6)) ? 1UL : 0UL);
 800f2d0:	6800      	ldr	r0, [r0, #0]
 800f2d2:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 800f2d6:	d000      	beq.n	800f2da <LL_DMA_IsActiveFlag_HT6+0xa>
 800f2d8:	2001      	movs	r0, #1
}
 800f2da:	4770      	bx	lr

0800f2dc <LL_DMA_IsActiveFlag_HT7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7)) ? 1UL : 0UL);
 800f2dc:	6800      	ldr	r0, [r0, #0]
 800f2de:	f010 6080 	ands.w	r0, r0, #67108864	; 0x4000000
 800f2e2:	d000      	beq.n	800f2e6 <LL_DMA_IsActiveFlag_HT7+0xa>
 800f2e4:	2001      	movs	r0, #1
}
 800f2e6:	4770      	bx	lr

0800f2e8 <LL_DMA_IsActiveFlag_TE1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 800f2e8:	6800      	ldr	r0, [r0, #0]
 800f2ea:	f010 0008 	ands.w	r0, r0, #8
 800f2ee:	d000      	beq.n	800f2f2 <LL_DMA_IsActiveFlag_TE1+0xa>
 800f2f0:	2001      	movs	r0, #1
}
 800f2f2:	4770      	bx	lr

0800f2f4 <LL_DMA_IsActiveFlag_TE2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 800f2f4:	6800      	ldr	r0, [r0, #0]
 800f2f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f2fa:	d000      	beq.n	800f2fe <LL_DMA_IsActiveFlag_TE2+0xa>
 800f2fc:	2001      	movs	r0, #1
}
 800f2fe:	4770      	bx	lr

0800f300 <LL_DMA_IsActiveFlag_TE3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3)) ? 1UL : 0UL);
 800f300:	6800      	ldr	r0, [r0, #0]
 800f302:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
 800f306:	d000      	beq.n	800f30a <LL_DMA_IsActiveFlag_TE3+0xa>
 800f308:	2001      	movs	r0, #1
}
 800f30a:	4770      	bx	lr

0800f30c <LL_DMA_IsActiveFlag_TE4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4)) ? 1UL : 0UL);
 800f30c:	6800      	ldr	r0, [r0, #0]
 800f30e:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800f312:	d000      	beq.n	800f316 <LL_DMA_IsActiveFlag_TE4+0xa>
 800f314:	2001      	movs	r0, #1
}
 800f316:	4770      	bx	lr

0800f318 <LL_DMA_IsActiveFlag_TE5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF5) == (DMA_ISR_TEIF5)) ? 1UL : 0UL);
 800f318:	6800      	ldr	r0, [r0, #0]
 800f31a:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 800f31e:	d000      	beq.n	800f322 <LL_DMA_IsActiveFlag_TE5+0xa>
 800f320:	2001      	movs	r0, #1
}
 800f322:	4770      	bx	lr

0800f324 <LL_DMA_IsActiveFlag_TE6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6)) ? 1UL : 0UL);
 800f324:	6800      	ldr	r0, [r0, #0]
 800f326:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
 800f32a:	d000      	beq.n	800f32e <LL_DMA_IsActiveFlag_TE6+0xa>
 800f32c:	2001      	movs	r0, #1
}
 800f32e:	4770      	bx	lr

0800f330 <LL_DMA_IsActiveFlag_TE7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF7) == (DMA_ISR_TEIF7)) ? 1UL : 0UL);
 800f330:	6800      	ldr	r0, [r0, #0]
 800f332:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800f336:	d000      	beq.n	800f33a <LL_DMA_IsActiveFlag_TE7+0xa>
 800f338:	2001      	movs	r0, #1
}
 800f33a:	4770      	bx	lr

0800f33c <LL_DMA_ClearFlag_TC1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 800f33c:	2302      	movs	r3, #2
 800f33e:	6043      	str	r3, [r0, #4]
}
 800f340:	4770      	bx	lr

0800f342 <LL_DMA_ClearFlag_TC2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 800f342:	2320      	movs	r3, #32
 800f344:	6043      	str	r3, [r0, #4]
}
 800f346:	4770      	bx	lr

0800f348 <LL_DMA_ClearFlag_TC3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 800f348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f34c:	6043      	str	r3, [r0, #4]
}
 800f34e:	4770      	bx	lr

0800f350 <LL_DMA_ClearFlag_TC4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 800f350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f354:	6043      	str	r3, [r0, #4]
}
 800f356:	4770      	bx	lr

0800f358 <LL_DMA_ClearFlag_TC5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 800f358:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f35c:	6043      	str	r3, [r0, #4]
}
 800f35e:	4770      	bx	lr

0800f360 <LL_DMA_ClearFlag_TC6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 800f360:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f364:	6043      	str	r3, [r0, #4]
}
 800f366:	4770      	bx	lr

0800f368 <LL_DMA_ClearFlag_TC7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 800f368:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f36c:	6043      	str	r3, [r0, #4]
}
 800f36e:	4770      	bx	lr

0800f370 <LL_DMA_ClearFlag_HT1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 800f370:	2304      	movs	r3, #4
 800f372:	6043      	str	r3, [r0, #4]
}
 800f374:	4770      	bx	lr

0800f376 <LL_DMA_ClearFlag_HT2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF2);
 800f376:	2340      	movs	r3, #64	; 0x40
 800f378:	6043      	str	r3, [r0, #4]
}
 800f37a:	4770      	bx	lr

0800f37c <LL_DMA_ClearFlag_HT3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 800f37c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f380:	6043      	str	r3, [r0, #4]
}
 800f382:	4770      	bx	lr

0800f384 <LL_DMA_ClearFlag_HT4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF4);
 800f384:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f388:	6043      	str	r3, [r0, #4]
}
 800f38a:	4770      	bx	lr

0800f38c <LL_DMA_ClearFlag_HT5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 800f38c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f390:	6043      	str	r3, [r0, #4]
}
 800f392:	4770      	bx	lr

0800f394 <LL_DMA_ClearFlag_HT6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 800f394:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f398:	6043      	str	r3, [r0, #4]
}
 800f39a:	4770      	bx	lr

0800f39c <LL_DMA_ClearFlag_HT7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
 800f39c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f3a0:	6043      	str	r3, [r0, #4]
}
 800f3a2:	4770      	bx	lr

0800f3a4 <LL_DMA_ClearFlag_TE1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 800f3a4:	2308      	movs	r3, #8
 800f3a6:	6043      	str	r3, [r0, #4]
}
 800f3a8:	4770      	bx	lr

0800f3aa <LL_DMA_ClearFlag_TE2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 800f3aa:	2380      	movs	r3, #128	; 0x80
 800f3ac:	6043      	str	r3, [r0, #4]
}
 800f3ae:	4770      	bx	lr

0800f3b0 <LL_DMA_ClearFlag_TE3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 800f3b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f3b4:	6043      	str	r3, [r0, #4]
}
 800f3b6:	4770      	bx	lr

0800f3b8 <LL_DMA_ClearFlag_TE4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
 800f3b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3bc:	6043      	str	r3, [r0, #4]
}
 800f3be:	4770      	bx	lr

0800f3c0 <LL_DMA_ClearFlag_TE5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
 800f3c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f3c4:	6043      	str	r3, [r0, #4]
}
 800f3c6:	4770      	bx	lr

0800f3c8 <LL_DMA_ClearFlag_TE6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF6);
 800f3c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f3cc:	6043      	str	r3, [r0, #4]
}
 800f3ce:	4770      	bx	lr

0800f3d0 <LL_DMA_ClearFlag_TE7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF7);
 800f3d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f3d4:	6043      	str	r3, [r0, #4]
}
 800f3d6:	4770      	bx	lr

0800f3d8 <stm32_dma_clear_stream_irq>:
{
 800f3d8:	b508      	push	{r3, lr}
	dma_stm32_clear_te(dma, id);
 800f3da:	f7f6 fe75 	bl	80060c8 <dma_stm32_clear_te>
}
 800f3de:	bd08      	pop	{r3, pc}

0800f3e0 <stm32_dma_is_unexpected_irq_happened>:
}
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	4770      	bx	lr

0800f3e4 <gpio_stm32_isr>:
{
 800f3e4:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800f3e6:	684e      	ldr	r6, [r1, #4]
 800f3e8:	2501      	movs	r5, #1
 800f3ea:	4085      	lsls	r5, r0
	return list->head;
 800f3ec:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800f3ee:	b119      	cbz	r1, 800f3f8 <gpio_stm32_isr+0x14>
 800f3f0:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 800f3f2:	b149      	cbz	r1, 800f408 <gpio_stm32_isr+0x24>
	return node->next;
 800f3f4:	680c      	ldr	r4, [r1, #0]
 800f3f6:	e007      	b.n	800f408 <gpio_stm32_isr+0x24>
 800f3f8:	460c      	mov	r4, r1
 800f3fa:	e005      	b.n	800f408 <gpio_stm32_isr+0x24>
 800f3fc:	b164      	cbz	r4, 800f418 <gpio_stm32_isr+0x34>
 800f3fe:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800f400:	b104      	cbz	r4, 800f404 <gpio_stm32_isr+0x20>
	return node->next;
 800f402:	6823      	ldr	r3, [r4, #0]
 800f404:	4621      	mov	r1, r4
 800f406:	461c      	mov	r4, r3
 800f408:	b141      	cbz	r1, 800f41c <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 800f40a:	688a      	ldr	r2, [r1, #8]
 800f40c:	402a      	ands	r2, r5
 800f40e:	d0f5      	beq.n	800f3fc <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800f410:	684b      	ldr	r3, [r1, #4]
 800f412:	4630      	mov	r0, r6
 800f414:	4798      	blx	r3
 800f416:	e7f1      	b.n	800f3fc <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800f418:	4623      	mov	r3, r4
 800f41a:	e7f3      	b.n	800f404 <gpio_stm32_isr+0x20>
}
 800f41c:	bd70      	pop	{r4, r5, r6, pc}

0800f41e <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 800f41e:	f410 7f00 	tst.w	r0, #512	; 0x200
 800f422:	d01b      	beq.n	800f45c <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800f424:	2310      	movs	r3, #16
 800f426:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 800f428:	f010 0f02 	tst.w	r0, #2
 800f42c:	d004      	beq.n	800f438 <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800f42e:	f010 0f04 	tst.w	r0, #4
 800f432:	d02c      	beq.n	800f48e <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800f434:	2350      	movs	r3, #80	; 0x50
 800f436:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800f438:	f010 0310 	ands.w	r3, r0, #16
 800f43c:	d005      	beq.n	800f44a <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800f43e:	680b      	ldr	r3, [r1, #0]
 800f440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f444:	600b      	str	r3, [r1, #0]
	return 0;
 800f446:	2000      	movs	r0, #0
 800f448:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800f44a:	f010 0020 	ands.w	r0, r0, #32
 800f44e:	d020      	beq.n	800f492 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800f450:	680a      	ldr	r2, [r1, #0]
 800f452:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f456:	600a      	str	r2, [r1, #0]
	return 0;
 800f458:	4618      	mov	r0, r3
 800f45a:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 800f45c:	f410 7f80 	tst.w	r0, #256	; 0x100
 800f460:	d011      	beq.n	800f486 <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 800f462:	2300      	movs	r3, #0
 800f464:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800f466:	f010 0310 	ands.w	r3, r0, #16
 800f46a:	d004      	beq.n	800f476 <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800f46c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f470:	600b      	str	r3, [r1, #0]
	return 0;
 800f472:	2000      	movs	r0, #0
 800f474:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800f476:	f010 0020 	ands.w	r0, r0, #32
 800f47a:	d00a      	beq.n	800f492 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800f47c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f480:	600a      	str	r2, [r1, #0]
	return 0;
 800f482:	4618      	mov	r0, r3
 800f484:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800f486:	2330      	movs	r3, #48	; 0x30
 800f488:	600b      	str	r3, [r1, #0]
	return 0;
 800f48a:	2000      	movs	r0, #0
 800f48c:	4770      	bx	lr
				return -ENOTSUP;
 800f48e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800f492:	4770      	bx	lr

0800f494 <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800f494:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800f496:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800f498:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800f49a:	600b      	str	r3, [r1, #0]
}
 800f49c:	2000      	movs	r0, #0
 800f49e:	4770      	bx	lr

0800f4a0 <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800f4a0:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800f4a2:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800f4a4:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800f4a6:	4042      	eors	r2, r0
 800f4a8:	400a      	ands	r2, r1
 800f4aa:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800f4ac:	615a      	str	r2, [r3, #20]
}
 800f4ae:	2000      	movs	r0, #0
 800f4b0:	4770      	bx	lr

0800f4b2 <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800f4b2:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800f4b4:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 800f4b6:	6199      	str	r1, [r3, #24]
}
 800f4b8:	2000      	movs	r0, #0
 800f4ba:	4770      	bx	lr

0800f4bc <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800f4bc:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800f4be:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800f4c0:	6299      	str	r1, [r3, #40]	; 0x28
}
 800f4c2:	2000      	movs	r0, #0
 800f4c4:	4770      	bx	lr

0800f4c6 <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 800f4c6:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800f4c8:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800f4ca:	6953      	ldr	r3, [r2, #20]
 800f4cc:	404b      	eors	r3, r1
 800f4ce:	6153      	str	r3, [r2, #20]
}
 800f4d0:	2000      	movs	r0, #0
 800f4d2:	4770      	bx	lr

0800f4d4 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 800f4d4:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 800f4d6:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 800f4d8:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 800f4dc:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 800f4de:	b1fb      	cbz	r3, 800f520 <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	e00d      	b.n	800f500 <gpio_stm32_manage_callback+0x2c>
	return node->next;
 800f4e4:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 800f4e6:	60a3      	str	r3, [r4, #8]
	return list->tail;
 800f4e8:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800f4ec:	4281      	cmp	r1, r0
 800f4ee:	d112      	bne.n	800f516 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800f4f0:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800f4f4:	e00f      	b.n	800f516 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800f4f6:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800f4fa:	e00c      	b.n	800f516 <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	b163      	cbz	r3, 800f51c <gpio_stm32_manage_callback+0x48>
 800f502:	4299      	cmp	r1, r3
 800f504:	d1fa      	bne.n	800f4fc <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 800f506:	2800      	cmp	r0, #0
 800f508:	d0ec      	beq.n	800f4e4 <gpio_stm32_manage_callback+0x10>
	return node->next;
 800f50a:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 800f50c:	6003      	str	r3, [r0, #0]
	return list->tail;
 800f50e:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800f512:	4299      	cmp	r1, r3
 800f514:	d0ef      	beq.n	800f4f6 <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 800f516:	2300      	movs	r3, #0
 800f518:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800f51a:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 800f51c:	b903      	cbnz	r3, 800f520 <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 800f51e:	b162      	cbz	r2, 800f53a <gpio_stm32_manage_callback+0x66>
	if (set) {
 800f520:	b172      	cbz	r2, 800f540 <gpio_stm32_manage_callback+0x6c>
	return list->head;
 800f522:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 800f524:	600b      	str	r3, [r1, #0]
	list->head = node;
 800f526:	60a1      	str	r1, [r4, #8]
	return list->tail;
 800f528:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 800f52c:	b10b      	cbz	r3, 800f532 <gpio_stm32_manage_callback+0x5e>
	return 0;
 800f52e:	2000      	movs	r0, #0
 800f530:	e007      	b.n	800f542 <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 800f532:	f8cc 1004 	str.w	r1, [ip, #4]
 800f536:	2000      	movs	r0, #0
}
 800f538:	e003      	b.n	800f542 <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 800f53a:	f06f 0015 	mvn.w	r0, #21
 800f53e:	e000      	b.n	800f542 <gpio_stm32_manage_callback+0x6e>
	return 0;
 800f540:	2000      	movs	r0, #0
}
 800f542:	bc10      	pop	{r4}
 800f544:	4770      	bx	lr

0800f546 <gpio_stm32_configure_raw>:
{
 800f546:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 800f548:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800f54a:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 800f54c:	2001      	movs	r0, #1
 800f54e:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800f550:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800f554:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f558:	6865      	ldr	r5, [r4, #4]
 800f55a:	ea25 0500 	bic.w	r5, r5, r0
 800f55e:	408e      	lsls	r6, r1
 800f560:	4335      	orrs	r5, r6
 800f562:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800f564:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800f568:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f56a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800f56e:	2d00      	cmp	r5, #0
 800f570:	d04a      	beq.n	800f608 <gpio_stm32_configure_raw+0xc2>
  return __builtin_clz(value);
 800f572:	fab5 f585 	clz	r5, r5
 800f576:	006d      	lsls	r5, r5, #1
 800f578:	2703      	movs	r7, #3
 800f57a:	fa07 f505 	lsl.w	r5, r7, r5
 800f57e:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f582:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800f586:	2d00      	cmp	r5, #0
 800f588:	d040      	beq.n	800f60c <gpio_stm32_configure_raw+0xc6>
  return __builtin_clz(value);
 800f58a:	fab5 f585 	clz	r5, r5
 800f58e:	006d      	lsls	r5, r5, #1
 800f590:	fa0e f505 	lsl.w	r5, lr, r5
 800f594:	4335      	orrs	r5, r6
 800f596:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800f598:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f59c:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f59e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800f5a2:	b3ad      	cbz	r5, 800f610 <gpio_stm32_configure_raw+0xca>
  return __builtin_clz(value);
 800f5a4:	fab5 f585 	clz	r5, r5
 800f5a8:	006d      	lsls	r5, r5, #1
 800f5aa:	f04f 0e03 	mov.w	lr, #3
 800f5ae:	fa0e f505 	lsl.w	r5, lr, r5
 800f5b2:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f5b6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800f5ba:	b35d      	cbz	r5, 800f614 <gpio_stm32_configure_raw+0xce>
  return __builtin_clz(value);
 800f5bc:	fab5 f585 	clz	r5, r5
 800f5c0:	006d      	lsls	r5, r5, #1
 800f5c2:	fa02 f505 	lsl.w	r5, r2, r5
 800f5c6:	ea4e 0505 	orr.w	r5, lr, r5
 800f5ca:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 800f5cc:	f1bc 0f20 	cmp.w	ip, #32
 800f5d0:	d022      	beq.n	800f618 <gpio_stm32_configure_raw+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800f5d2:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f5d6:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f5d8:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d052      	beq.n	800f686 <gpio_stm32_configure_raw+0x140>
  return __builtin_clz(value);
 800f5e0:	fab3 f383 	clz	r3, r3
 800f5e4:	005b      	lsls	r3, r3, #1
 800f5e6:	2103      	movs	r1, #3
 800f5e8:	fa01 f303 	lsl.w	r3, r1, r3
 800f5ec:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f5f0:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	d048      	beq.n	800f68a <gpio_stm32_configure_raw+0x144>
  return __builtin_clz(value);
 800f5f8:	fab0 f080 	clz	r0, r0
 800f5fc:	0040      	lsls	r0, r0, #1
 800f5fe:	fa0c f000 	lsl.w	r0, ip, r0
 800f602:	4318      	orrs	r0, r3
 800f604:	6020      	str	r0, [r4, #0]
}
 800f606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800f608:	2520      	movs	r5, #32
 800f60a:	e7b4      	b.n	800f576 <gpio_stm32_configure_raw+0x30>
 800f60c:	2520      	movs	r5, #32
 800f60e:	e7be      	b.n	800f58e <gpio_stm32_configure_raw+0x48>
 800f610:	2520      	movs	r5, #32
 800f612:	e7c9      	b.n	800f5a8 <gpio_stm32_configure_raw+0x62>
 800f614:	2520      	movs	r5, #32
 800f616:	e7d3      	b.n	800f5c0 <gpio_stm32_configure_raw+0x7a>
		if (pin < 8) {
 800f618:	2907      	cmp	r1, #7
 800f61a:	dc19      	bgt.n	800f650 <gpio_stm32_configure_raw+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f61c:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f61e:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800f622:	b18a      	cbz	r2, 800f648 <gpio_stm32_configure_raw+0x102>
  return __builtin_clz(value);
 800f624:	fab2 f282 	clz	r2, r2
 800f628:	0092      	lsls	r2, r2, #2
 800f62a:	250f      	movs	r5, #15
 800f62c:	fa05 f202 	lsl.w	r2, r5, r2
 800f630:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f634:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800f638:	b142      	cbz	r2, 800f64c <gpio_stm32_configure_raw+0x106>
  return __builtin_clz(value);
 800f63a:	fab2 f282 	clz	r2, r2
 800f63e:	0092      	lsls	r2, r2, #2
 800f640:	4093      	lsls	r3, r2
 800f642:	430b      	orrs	r3, r1
 800f644:	6223      	str	r3, [r4, #32]
}
 800f646:	e7c4      	b.n	800f5d2 <gpio_stm32_configure_raw+0x8c>
    return 32U;
 800f648:	2220      	movs	r2, #32
 800f64a:	e7ed      	b.n	800f628 <gpio_stm32_configure_raw+0xe2>
 800f64c:	2220      	movs	r2, #32
 800f64e:	e7f6      	b.n	800f63e <gpio_stm32_configure_raw+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f650:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f652:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f654:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 800f658:	b189      	cbz	r1, 800f67e <gpio_stm32_configure_raw+0x138>
  return __builtin_clz(value);
 800f65a:	fab1 f181 	clz	r1, r1
 800f65e:	0089      	lsls	r1, r1, #2
 800f660:	260f      	movs	r6, #15
 800f662:	fa06 f101 	lsl.w	r1, r6, r1
 800f666:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f66a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800f66e:	b142      	cbz	r2, 800f682 <gpio_stm32_configure_raw+0x13c>
  return __builtin_clz(value);
 800f670:	fab2 f282 	clz	r2, r2
 800f674:	0092      	lsls	r2, r2, #2
 800f676:	4093      	lsls	r3, r2
 800f678:	430b      	orrs	r3, r1
 800f67a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800f67c:	e7a9      	b.n	800f5d2 <gpio_stm32_configure_raw+0x8c>
    return 32U;
 800f67e:	2120      	movs	r1, #32
 800f680:	e7ed      	b.n	800f65e <gpio_stm32_configure_raw+0x118>
 800f682:	2220      	movs	r2, #32
 800f684:	e7f6      	b.n	800f674 <gpio_stm32_configure_raw+0x12e>
 800f686:	2320      	movs	r3, #32
 800f688:	e7ac      	b.n	800f5e4 <gpio_stm32_configure_raw+0x9e>
 800f68a:	2020      	movs	r0, #32
 800f68c:	e7b6      	b.n	800f5fc <gpio_stm32_configure_raw+0xb6>

0800f68e <gpio_stm32_config>:
{
 800f68e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f690:	b083      	sub	sp, #12
 800f692:	4607      	mov	r7, r0
 800f694:	460d      	mov	r5, r1
 800f696:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 800f698:	a901      	add	r1, sp, #4
 800f69a:	4610      	mov	r0, r2
 800f69c:	f7ff febf 	bl	800f41e <gpio_stm32_flags_to_conf>
	if (err != 0) {
 800f6a0:	4606      	mov	r6, r0
 800f6a2:	b970      	cbnz	r0, 800f6c2 <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 800f6a4:	f414 7f00 	tst.w	r4, #512	; 0x200
 800f6a8:	d005      	beq.n	800f6b6 <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800f6aa:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800f6ae:	d10b      	bne.n	800f6c8 <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800f6b0:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800f6b4:	d10e      	bne.n	800f6d4 <gpio_stm32_config+0x46>
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	9a01      	ldr	r2, [sp, #4]
 800f6ba:	4629      	mov	r1, r5
 800f6bc:	4638      	mov	r0, r7
 800f6be:	f7ff ff42 	bl	800f546 <gpio_stm32_configure_raw>
}
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	b003      	add	sp, #12
 800f6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800f6c8:	2101      	movs	r1, #1
 800f6ca:	40a9      	lsls	r1, r5
 800f6cc:	4638      	mov	r0, r7
 800f6ce:	f7ff fef0 	bl	800f4b2 <gpio_stm32_port_set_bits_raw>
 800f6d2:	e7f0      	b.n	800f6b6 <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800f6d4:	2101      	movs	r1, #1
 800f6d6:	40a9      	lsls	r1, r5
 800f6d8:	4638      	mov	r0, r7
 800f6da:	f7ff feef 	bl	800f4bc <gpio_stm32_port_clear_bits_raw>
 800f6de:	e7ea      	b.n	800f6b6 <gpio_stm32_config+0x28>

0800f6e0 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800f6e0:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 800f6e2:	6902      	ldr	r2, [r0, #16]
	int ret;

	data->dev = dev;
 800f6e4:	6050      	str	r0, [r2, #4]
	/* Cf: L4/L5 RM, Chapter "Independent I/O supply rail" */
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
 800f6e6:	2101      	movs	r1, #1
 800f6e8:	f7f6 fe50 	bl	800638c <gpio_stm32_clock_request>
	if (ret < 0) {
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	db00      	blt.n	800f6f2 <gpio_stm32_init+0x12>
	}

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
 800f6f0:	2000      	movs	r0, #0
}
 800f6f2:	bd08      	pop	{r3, pc}

0800f6f4 <gpio_stm32_configure>:
{
 800f6f4:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 800f6f6:	f7ff ff26 	bl	800f546 <gpio_stm32_configure_raw>
}
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	bd08      	pop	{r3, pc}

0800f6fe <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 800f6fe:	6d83      	ldr	r3, [r0, #88]	; 0x58
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800f700:	b91b      	cbnz	r3, 800f70a <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 800f702:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800f704:	b91b      	cbnz	r3, 800f70e <spi_stm32_transfer_ongoing+0x10>
 800f706:	2000      	movs	r0, #0
 800f708:	4770      	bx	lr
 800f70a:	2001      	movs	r0, #1
 800f70c:	4770      	bx	lr
 800f70e:	2001      	movs	r0, #1
}
 800f710:	4770      	bx	lr

0800f712 <z_log_msg2_runtime_create>:
{
 800f712:	b510      	push	{r4, lr}
 800f714:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800f716:	ac0a      	add	r4, sp, #40	; 0x28
 800f718:	9405      	str	r4, [sp, #20]
 800f71a:	9402      	str	r4, [sp, #8]
 800f71c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f71e:	9401      	str	r4, [sp, #4]
 800f720:	9c08      	ldr	r4, [sp, #32]
 800f722:	9400      	str	r4, [sp, #0]
 800f724:	f7ff fb40 	bl	800eda8 <z_impl_z_log_msg2_runtime_vcreate>
}
 800f728:	b006      	add	sp, #24
 800f72a:	bd10      	pop	{r4, pc}

0800f72c <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 800f72c:	b508      	push	{r3, lr}
 800f72e:	2200      	movs	r2, #0
 800f730:	2105      	movs	r1, #5
 800f732:	2023      	movs	r0, #35	; 0x23
 800f734:	f7f4 fc78 	bl	8004028 <z_arm_irq_priority_set>
 800f738:	2023      	movs	r0, #35	; 0x23
 800f73a:	f7f4 fc45 	bl	8003fc8 <arch_irq_enable>
 800f73e:	bd08      	pop	{r3, pc}

0800f740 <spi_stm32_release>:
{
 800f740:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 800f742:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 800f744:	6823      	ldr	r3, [r4, #0]
 800f746:	b1c3      	cbz	r3, 800f77a <spi_stm32_release+0x3a>
 800f748:	689b      	ldr	r3, [r3, #8]
 800f74a:	b1b3      	cbz	r3, 800f77a <spi_stm32_release+0x3a>
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	b1a2      	cbz	r2, 800f77a <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 800f750:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 800f752:	f7fc fe1f 	bl	800c394 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 800f756:	6823      	ldr	r3, [r4, #0]
 800f758:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 800f75a:	6818      	ldr	r0, [r3, #0]
 800f75c:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 800f75e:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800f760:	681a      	ldr	r2, [r3, #0]
 800f762:	2301      	movs	r3, #1
 800f764:	408b      	lsls	r3, r1
 800f766:	421a      	tst	r2, r3
 800f768:	d10b      	bne.n	800f782 <spi_stm32_release+0x42>
 800f76a:	2300      	movs	r3, #0
	if (value != 0)	{
 800f76c:	b15b      	cbz	r3, 800f786 <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800f76e:	2301      	movs	r3, #1
 800f770:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800f774:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	4798      	blx	r3
 800f77a:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
 800f77c:	b153      	cbz	r3, 800f794 <spi_stm32_release+0x54>
}
 800f77e:	2000      	movs	r0, #0
 800f780:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800f782:	2301      	movs	r3, #1
 800f784:	e7f2      	b.n	800f76c <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800f786:	2301      	movs	r3, #1
 800f788:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800f78c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800f78e:	691b      	ldr	r3, [r3, #16]
 800f790:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 800f792:	e7f2      	b.n	800f77a <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 800f794:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800f796:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 800f79a:	f7fb febf 	bl	800b51c <z_impl_k_sem_give>
}
 800f79e:	e7ee      	b.n	800f77e <spi_stm32_release+0x3e>

0800f7a0 <spi_stm32_cs_control>:
{
 800f7a0:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 800f7a2:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 800f7a4:	6823      	ldr	r3, [r4, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d034      	beq.n	800f814 <spi_stm32_cs_control+0x74>
 800f7aa:	689a      	ldr	r2, [r3, #8]
 800f7ac:	2a00      	cmp	r2, #0
 800f7ae:	d031      	beq.n	800f814 <spi_stm32_cs_control+0x74>
 800f7b0:	6810      	ldr	r0, [r2, #0]
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	d02e      	beq.n	800f814 <spi_stm32_cs_control+0x74>
		if (on) {
 800f7b6:	b9c9      	cbnz	r1, 800f7ec <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 800f7b8:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 800f7ba:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800f7be:	d129      	bne.n	800f814 <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 800f7c0:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
 800f7c2:	f7fc fde7 	bl	800c394 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 800f7c6:	6823      	ldr	r3, [r4, #0]
 800f7c8:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 800f7ca:	6818      	ldr	r0, [r3, #0]
 800f7cc:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 800f7ce:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	408b      	lsls	r3, r1
 800f7d6:	421a      	tst	r2, r3
 800f7d8:	d126      	bne.n	800f828 <spi_stm32_cs_control+0x88>
 800f7da:	2300      	movs	r3, #0
	if (value != 0)	{
 800f7dc:	b333      	cbz	r3, 800f82c <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800f7de:	2301      	movs	r3, #1
 800f7e0:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800f7e4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	4798      	blx	r3
 800f7ea:	e013      	b.n	800f814 <spi_stm32_cs_control+0x74>
	return gpio_pin_set(spec->port, spec->pin, value);
 800f7ec:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_data *const data =
 800f7ee:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	408b      	lsls	r3, r1
 800f7f6:	421a      	tst	r2, r3
 800f7f8:	d10d      	bne.n	800f816 <spi_stm32_cs_control+0x76>
 800f7fa:	2301      	movs	r3, #1
	if (value != 0)	{
 800f7fc:	b16b      	cbz	r3, 800f81a <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800f7fe:	2301      	movs	r3, #1
 800f800:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800f804:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 800f80a:	6823      	ldr	r3, [r4, #0]
 800f80c:	689b      	ldr	r3, [r3, #8]
 800f80e:	6898      	ldr	r0, [r3, #8]
 800f810:	f7fc fdc0 	bl	800c394 <z_impl_k_busy_wait>
}
 800f814:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800f816:	2300      	movs	r3, #0
 800f818:	e7f0      	b.n	800f7fc <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800f81a:	2301      	movs	r3, #1
 800f81c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800f820:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800f822:	691b      	ldr	r3, [r3, #16]
 800f824:	4798      	blx	r3
 800f826:	e7f0      	b.n	800f80a <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 800f828:	2301      	movs	r3, #1
 800f82a:	e7d7      	b.n	800f7dc <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800f82c:	2301      	movs	r3, #1
 800f82e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800f832:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800f834:	691b      	ldr	r3, [r3, #16]
 800f836:	4798      	blx	r3
 800f838:	e7ec      	b.n	800f814 <spi_stm32_cs_control+0x74>

0800f83a <spi_stm32_complete>:
{
 800f83a:	b570      	push	{r4, r5, r6, lr}
 800f83c:	b082      	sub	sp, #8
 800f83e:	460e      	mov	r6, r1
	const struct spi_stm32_config *cfg = dev->config;
 800f840:	6842      	ldr	r2, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 800f842:	6894      	ldr	r4, [r2, #8]
	struct spi_stm32_data *data = dev->data;
 800f844:	6905      	ldr	r5, [r0, #16]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800f846:	6863      	ldr	r3, [r4, #4]
 800f848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f84c:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800f84e:	6863      	ldr	r3, [r4, #4]
 800f850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f854:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 800f856:	6863      	ldr	r3, [r4, #4]
 800f858:	f023 0320 	bic.w	r3, r3, #32
 800f85c:	6063      	str	r3, [r4, #4]
	spi_stm32_cs_control(dev, false);
 800f85e:	2100      	movs	r1, #0
 800f860:	f7ff ff9e 	bl	800f7a0 <spi_stm32_cs_control>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800f864:	68a3      	ldr	r3, [r4, #8]
 800f866:	f013 0f01 	tst.w	r3, #1
 800f86a:	d001      	beq.n	800f870 <spi_stm32_complete+0x36>
  return (uint8_t)(READ_REG(SPIx->DR));
 800f86c:	68e3      	ldr	r3, [r4, #12]
 800f86e:	e7f9      	b.n	800f864 <spi_stm32_complete+0x2a>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800f870:	6823      	ldr	r3, [r4, #0]
 800f872:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800f876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f87a:	d015      	beq.n	800f8a8 <spi_stm32_complete+0x6e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800f87c:	68a3      	ldr	r3, [r4, #8]
 800f87e:	f013 0f20 	tst.w	r3, #32
 800f882:	d006      	beq.n	800f892 <spi_stm32_complete+0x58>
  tmpreg_sr = SPIx->SR;
 800f884:	68a3      	ldr	r3, [r4, #8]
 800f886:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 800f888:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800f88a:	6823      	ldr	r3, [r4, #0]
 800f88c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f890:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800f892:	6823      	ldr	r3, [r4, #0]
 800f894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f898:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 800f89a:	642e      	str	r6, [r5, #64]	; 0x40
	k_sem_give(&ctx->sync);
 800f89c:	f105 0028 	add.w	r0, r5, #40	; 0x28
	z_impl_k_sem_give(sem);
 800f8a0:	f7fb fe3c 	bl	800b51c <z_impl_k_sem_give>
}
 800f8a4:	b002      	add	sp, #8
 800f8a6:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800f8a8:	68a3      	ldr	r3, [r4, #8]
 800f8aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f8ae:	d1fb      	bne.n	800f8a8 <spi_stm32_complete+0x6e>
 800f8b0:	e7e4      	b.n	800f87c <spi_stm32_complete+0x42>

0800f8b2 <spi_stm32_transceive>:
{
 800f8b2:	b510      	push	{r4, lr}
 800f8b4:	b082      	sub	sp, #8
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 800f8b6:	2400      	movs	r4, #0
 800f8b8:	9401      	str	r4, [sp, #4]
 800f8ba:	9400      	str	r4, [sp, #0]
 800f8bc:	f7f7 f87a 	bl	80069b4 <transceive>
}
 800f8c0:	b002      	add	sp, #8
 800f8c2:	bd10      	pop	{r4, pc}

0800f8c4 <spi_stm32_shift_m>:
{
 800f8c4:	b430      	push	{r4, r5}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800f8c6:	6883      	ldr	r3, [r0, #8]
 800f8c8:	f013 0f02 	tst.w	r3, #2
 800f8cc:	d0fb      	beq.n	800f8c6 <spi_stm32_shift_m+0x2>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800f8ce:	680b      	ldr	r3, [r1, #0]
 800f8d0:	889b      	ldrh	r3, [r3, #4]
 800f8d2:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800f8d6:	2b08      	cmp	r3, #8
 800f8d8:	d009      	beq.n	800f8ee <spi_stm32_shift_m+0x2a>
	return !!(ctx->tx_buf && ctx->tx_len);
 800f8da:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d03d      	beq.n	800f95c <spi_stm32_shift_m+0x98>
 800f8e0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800f8e2:	2a00      	cmp	r2, #0
 800f8e4:	d13c      	bne.n	800f960 <spi_stm32_shift_m+0x9c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800f8e6:	2a00      	cmp	r2, #0
 800f8e8:	d03c      	beq.n	800f964 <spi_stm32_shift_m+0xa0>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800f8ea:	881b      	ldrh	r3, [r3, #0]
 800f8ec:	e03b      	b.n	800f966 <spi_stm32_shift_m+0xa2>
 800f8ee:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800f8f0:	b18b      	cbz	r3, 800f916 <spi_stm32_shift_m+0x52>
 800f8f2:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800f8f4:	b98a      	cbnz	r2, 800f91a <spi_stm32_shift_m+0x56>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800f8f6:	b192      	cbz	r2, 800f91e <spi_stm32_shift_m+0x5a>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800f8f8:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 800f8fa:	b2db      	uxtb	r3, r3
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 800f8fc:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800f8fe:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800f900:	2b00      	cmp	r3, #0
 800f902:	d03a      	beq.n	800f97a <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 800f904:	3b01      	subs	r3, #1
 800f906:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800f908:	b15b      	cbz	r3, 800f922 <spi_stm32_shift_m+0x5e>
	} else if (ctx->tx_buf) {
 800f90a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d034      	beq.n	800f97a <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 800f910:	3301      	adds	r3, #1
 800f912:	654b      	str	r3, [r1, #84]	; 0x54
 800f914:	e031      	b.n	800f97a <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 800f916:	2200      	movs	r2, #0
 800f918:	e7ed      	b.n	800f8f6 <spi_stm32_shift_m+0x32>
 800f91a:	2201      	movs	r2, #1
 800f91c:	e7eb      	b.n	800f8f6 <spi_stm32_shift_m+0x32>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 800f91e:	2300      	movs	r3, #0
 800f920:	e7eb      	b.n	800f8fa <spi_stm32_shift_m+0x36>
		++ctx->current_tx;
 800f922:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800f924:	3308      	adds	r3, #8
 800f926:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800f928:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800f92a:	3b01      	subs	r3, #1
 800f92c:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800f92e:	f101 0444 	add.w	r4, r1, #68	; 0x44
 800f932:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800f936:	e004      	b.n	800f942 <spi_stm32_shift_m+0x7e>
		++(*current);
 800f938:	3308      	adds	r3, #8
 800f93a:	6023      	str	r3, [r4, #0]
		--(*count);
 800f93c:	6813      	ldr	r3, [r2, #0]
 800f93e:	3b01      	subs	r3, #1
 800f940:	6013      	str	r3, [r2, #0]
	while (*count) {
 800f942:	6813      	ldr	r3, [r2, #0]
 800f944:	b13b      	cbz	r3, 800f956 <spi_stm32_shift_m+0x92>
		if (((*current)->len / dfs) != 0) {
 800f946:	6823      	ldr	r3, [r4, #0]
 800f948:	685d      	ldr	r5, [r3, #4]
 800f94a:	2d00      	cmp	r5, #0
 800f94c:	d0f4      	beq.n	800f938 <spi_stm32_shift_m+0x74>
			*buf_len = (*current)->len / dfs;
 800f94e:	658d      	str	r5, [r1, #88]	; 0x58
			return (*current)->buf;
 800f950:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	e000      	b.n	800f958 <spi_stm32_shift_m+0x94>
	*buf_len = 0;
 800f956:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800f958:	654b      	str	r3, [r1, #84]	; 0x54
 800f95a:	e00e      	b.n	800f97a <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 800f95c:	2200      	movs	r2, #0
 800f95e:	e7c2      	b.n	800f8e6 <spi_stm32_shift_m+0x22>
 800f960:	2201      	movs	r2, #1
 800f962:	e7c0      	b.n	800f8e6 <spi_stm32_shift_m+0x22>
 800f964:	2300      	movs	r3, #0
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800f966:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800f968:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800f96a:	b133      	cbz	r3, 800f97a <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 800f96c:	3b01      	subs	r3, #1
 800f96e:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800f970:	b31b      	cbz	r3, 800f9ba <spi_stm32_shift_m+0xf6>
	} else if (ctx->tx_buf) {
 800f972:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800f974:	b10b      	cbz	r3, 800f97a <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 800f976:	3302      	adds	r3, #2
 800f978:	654b      	str	r3, [r1, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800f97a:	6883      	ldr	r3, [r0, #8]
 800f97c:	f013 0f01 	tst.w	r3, #1
 800f980:	d0fb      	beq.n	800f97a <spi_stm32_shift_m+0xb6>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800f982:	680b      	ldr	r3, [r1, #0]
 800f984:	889b      	ldrh	r3, [r3, #4]
 800f986:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800f98a:	2b08      	cmp	r3, #8
 800f98c:	d035      	beq.n	800f9fa <spi_stm32_shift_m+0x136>
  return (uint16_t)(READ_REG(SPIx->DR));
 800f98e:	68c3      	ldr	r3, [r0, #12]
 800f990:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800f992:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800f994:	2a00      	cmp	r2, #0
 800f996:	d065      	beq.n	800fa64 <spi_stm32_shift_m+0x1a0>
 800f998:	6e08      	ldr	r0, [r1, #96]	; 0x60
 800f99a:	2800      	cmp	r0, #0
 800f99c:	d164      	bne.n	800fa68 <spi_stm32_shift_m+0x1a4>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800f99e:	b100      	cbz	r0, 800f9a2 <spi_stm32_shift_m+0xde>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800f9a0:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 800f9a2:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800f9a4:	b13b      	cbz	r3, 800f9b6 <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d05e      	beq.n	800fa6c <spi_stm32_shift_m+0x1a8>
	} else if (ctx->rx_buf) {
 800f9ae:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800f9b0:	b10b      	cbz	r3, 800f9b6 <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 800f9b2:	3302      	adds	r3, #2
 800f9b4:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 800f9b6:	bc30      	pop	{r4, r5}
 800f9b8:	4770      	bx	lr
		++ctx->current_tx;
 800f9ba:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800f9bc:	3308      	adds	r3, #8
 800f9be:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800f9c0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800f9c2:	3b01      	subs	r3, #1
 800f9c4:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800f9c6:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 800f9ca:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800f9ce:	e005      	b.n	800f9dc <spi_stm32_shift_m+0x118>
		++(*current);
 800f9d0:	3308      	adds	r3, #8
 800f9d2:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 800f9d6:	6813      	ldr	r3, [r2, #0]
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	6013      	str	r3, [r2, #0]
	while (*count) {
 800f9dc:	6813      	ldr	r3, [r2, #0]
 800f9de:	b14b      	cbz	r3, 800f9f4 <spi_stm32_shift_m+0x130>
		if (((*current)->len / dfs) != 0) {
 800f9e0:	f8dc 3000 	ldr.w	r3, [ip]
 800f9e4:	685c      	ldr	r4, [r3, #4]
 800f9e6:	2c01      	cmp	r4, #1
 800f9e8:	d9f2      	bls.n	800f9d0 <spi_stm32_shift_m+0x10c>
			*buf_len = (*current)->len / dfs;
 800f9ea:	0864      	lsrs	r4, r4, #1
 800f9ec:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 800f9ee:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	e000      	b.n	800f9f6 <spi_stm32_shift_m+0x132>
	*buf_len = 0;
 800f9f4:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800f9f6:	654b      	str	r3, [r1, #84]	; 0x54
 800f9f8:	e7bf      	b.n	800f97a <spi_stm32_shift_m+0xb6>
  return (uint8_t)(READ_REG(SPIx->DR));
 800f9fa:	68c3      	ldr	r3, [r0, #12]
 800f9fc:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 800f9fe:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800fa00:	b17a      	cbz	r2, 800fa22 <spi_stm32_shift_m+0x15e>
 800fa02:	6e08      	ldr	r0, [r1, #96]	; 0x60
 800fa04:	b978      	cbnz	r0, 800fa26 <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800fa06:	b100      	cbz	r0, 800fa0a <spi_stm32_shift_m+0x146>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800fa08:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 800fa0a:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d0d2      	beq.n	800f9b6 <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 800fa10:	3b01      	subs	r3, #1
 800fa12:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800fa14:	b14b      	cbz	r3, 800fa2a <spi_stm32_shift_m+0x166>
	} else if (ctx->rx_buf) {
 800fa16:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d0cc      	beq.n	800f9b6 <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	65cb      	str	r3, [r1, #92]	; 0x5c
 800fa20:	e7c9      	b.n	800f9b6 <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 800fa22:	2000      	movs	r0, #0
 800fa24:	e7ef      	b.n	800fa06 <spi_stm32_shift_m+0x142>
 800fa26:	2001      	movs	r0, #1
 800fa28:	e7ed      	b.n	800fa06 <spi_stm32_shift_m+0x142>
		++ctx->current_rx;
 800fa2a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800fa2c:	3308      	adds	r3, #8
 800fa2e:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 800fa30:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800fa32:	3b01      	subs	r3, #1
 800fa34:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800fa36:	f101 004c 	add.w	r0, r1, #76	; 0x4c
 800fa3a:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 800fa3e:	e004      	b.n	800fa4a <spi_stm32_shift_m+0x186>
		++(*current);
 800fa40:	3308      	adds	r3, #8
 800fa42:	6003      	str	r3, [r0, #0]
		--(*count);
 800fa44:	6813      	ldr	r3, [r2, #0]
 800fa46:	3b01      	subs	r3, #1
 800fa48:	6013      	str	r3, [r2, #0]
	while (*count) {
 800fa4a:	6813      	ldr	r3, [r2, #0]
 800fa4c:	b13b      	cbz	r3, 800fa5e <spi_stm32_shift_m+0x19a>
		if (((*current)->len / dfs) != 0) {
 800fa4e:	6803      	ldr	r3, [r0, #0]
 800fa50:	685c      	ldr	r4, [r3, #4]
 800fa52:	2c00      	cmp	r4, #0
 800fa54:	d0f4      	beq.n	800fa40 <spi_stm32_shift_m+0x17c>
			*buf_len = (*current)->len / dfs;
 800fa56:	660c      	str	r4, [r1, #96]	; 0x60
			return (*current)->buf;
 800fa58:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	e000      	b.n	800fa60 <spi_stm32_shift_m+0x19c>
	*buf_len = 0;
 800fa5e:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800fa60:	65cb      	str	r3, [r1, #92]	; 0x5c
 800fa62:	e7a8      	b.n	800f9b6 <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 800fa64:	2000      	movs	r0, #0
 800fa66:	e79a      	b.n	800f99e <spi_stm32_shift_m+0xda>
 800fa68:	2001      	movs	r0, #1
 800fa6a:	e798      	b.n	800f99e <spi_stm32_shift_m+0xda>
		++ctx->current_rx;
 800fa6c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800fa6e:	3308      	adds	r3, #8
 800fa70:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 800fa72:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800fa74:	3b01      	subs	r3, #1
 800fa76:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800fa78:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 800fa7c:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 800fa80:	e004      	b.n	800fa8c <spi_stm32_shift_m+0x1c8>
		++(*current);
 800fa82:	3308      	adds	r3, #8
 800fa84:	6023      	str	r3, [r4, #0]
		--(*count);
 800fa86:	6813      	ldr	r3, [r2, #0]
 800fa88:	3b01      	subs	r3, #1
 800fa8a:	6013      	str	r3, [r2, #0]
	while (*count) {
 800fa8c:	6813      	ldr	r3, [r2, #0]
 800fa8e:	b143      	cbz	r3, 800faa2 <spi_stm32_shift_m+0x1de>
		if (((*current)->len / dfs) != 0) {
 800fa90:	6823      	ldr	r3, [r4, #0]
 800fa92:	6858      	ldr	r0, [r3, #4]
 800fa94:	2801      	cmp	r0, #1
 800fa96:	d9f4      	bls.n	800fa82 <spi_stm32_shift_m+0x1be>
			*buf_len = (*current)->len / dfs;
 800fa98:	0840      	lsrs	r0, r0, #1
 800fa9a:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 800fa9c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	e000      	b.n	800faa4 <spi_stm32_shift_m+0x1e0>
	*buf_len = 0;
 800faa2:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800faa4:	65cb      	str	r3, [r1, #92]	; 0x5c
 800faa6:	e786      	b.n	800f9b6 <spi_stm32_shift_m+0xf2>

0800faa8 <spi_stm32_shift_s>:
{
 800faa8:	b410      	push	{r4}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800faaa:	6883      	ldr	r3, [r0, #8]
 800faac:	f013 0f02 	tst.w	r3, #2
 800fab0:	d065      	beq.n	800fb7e <spi_stm32_shift_s+0xd6>
	return !!(ctx->tx_len);
 800fab2:	6d8b      	ldr	r3, [r1, #88]	; 0x58
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d062      	beq.n	800fb7e <spi_stm32_shift_s+0xd6>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800fab8:	680b      	ldr	r3, [r1, #0]
 800faba:	889b      	ldrh	r3, [r3, #4]
 800fabc:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800fac0:	2b08      	cmp	r3, #8
 800fac2:	d00f      	beq.n	800fae4 <spi_stm32_shift_s+0x3c>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800fac4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800fac6:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 800fac8:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800faca:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800facc:	2b00      	cmp	r3, #0
 800face:	d05a      	beq.n	800fb86 <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 800fad0:	3b01      	subs	r3, #1
 800fad2:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d032      	beq.n	800fb3e <spi_stm32_shift_s+0x96>
	} else if (ctx->tx_buf) {
 800fad8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d053      	beq.n	800fb86 <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 800fade:	3302      	adds	r3, #2
 800fae0:	654b      	str	r3, [r1, #84]	; 0x54
 800fae2:	e050      	b.n	800fb86 <spi_stm32_shift_s+0xde>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800fae4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800fae6:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 800fae8:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800faea:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800faec:	2b00      	cmp	r3, #0
 800faee:	d04a      	beq.n	800fb86 <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 800faf0:	3b01      	subs	r3, #1
 800faf2:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800faf4:	b12b      	cbz	r3, 800fb02 <spi_stm32_shift_s+0x5a>
	} else if (ctx->tx_buf) {
 800faf6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d044      	beq.n	800fb86 <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 800fafc:	3301      	adds	r3, #1
 800fafe:	654b      	str	r3, [r1, #84]	; 0x54
 800fb00:	e041      	b.n	800fb86 <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 800fb02:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800fb04:	3308      	adds	r3, #8
 800fb06:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800fb08:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800fb0a:	3b01      	subs	r3, #1
 800fb0c:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800fb0e:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 800fb12:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800fb16:	6813      	ldr	r3, [r2, #0]
 800fb18:	b173      	cbz	r3, 800fb38 <spi_stm32_shift_s+0x90>
		if (((*current)->len / dfs) != 0) {
 800fb1a:	f8dc 3000 	ldr.w	r3, [ip]
 800fb1e:	685c      	ldr	r4, [r3, #4]
 800fb20:	b934      	cbnz	r4, 800fb30 <spi_stm32_shift_s+0x88>
		++(*current);
 800fb22:	3308      	adds	r3, #8
 800fb24:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 800fb28:	6813      	ldr	r3, [r2, #0]
 800fb2a:	3b01      	subs	r3, #1
 800fb2c:	6013      	str	r3, [r2, #0]
 800fb2e:	e7f2      	b.n	800fb16 <spi_stm32_shift_s+0x6e>
			*buf_len = (*current)->len / dfs;
 800fb30:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 800fb32:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	e000      	b.n	800fb3a <spi_stm32_shift_s+0x92>
	*buf_len = 0;
 800fb38:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800fb3a:	654b      	str	r3, [r1, #84]	; 0x54
 800fb3c:	e023      	b.n	800fb86 <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 800fb3e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800fb40:	3308      	adds	r3, #8
 800fb42:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800fb44:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800fb46:	3b01      	subs	r3, #1
 800fb48:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800fb4a:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 800fb4e:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800fb52:	6813      	ldr	r3, [r2, #0]
 800fb54:	b183      	cbz	r3, 800fb78 <spi_stm32_shift_s+0xd0>
		if (((*current)->len / dfs) != 0) {
 800fb56:	f8dc 3000 	ldr.w	r3, [ip]
 800fb5a:	685c      	ldr	r4, [r3, #4]
 800fb5c:	2c01      	cmp	r4, #1
 800fb5e:	d806      	bhi.n	800fb6e <spi_stm32_shift_s+0xc6>
		++(*current);
 800fb60:	3308      	adds	r3, #8
 800fb62:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 800fb66:	6813      	ldr	r3, [r2, #0]
 800fb68:	3b01      	subs	r3, #1
 800fb6a:	6013      	str	r3, [r2, #0]
 800fb6c:	e7f1      	b.n	800fb52 <spi_stm32_shift_s+0xaa>
			*buf_len = (*current)->len / dfs;
 800fb6e:	0864      	lsrs	r4, r4, #1
 800fb70:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 800fb72:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	e000      	b.n	800fb7a <spi_stm32_shift_s+0xd2>
	*buf_len = 0;
 800fb78:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800fb7a:	654b      	str	r3, [r1, #84]	; 0x54
 800fb7c:	e003      	b.n	800fb86 <spi_stm32_shift_s+0xde>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800fb7e:	6843      	ldr	r3, [r0, #4]
 800fb80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb84:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800fb86:	6883      	ldr	r3, [r0, #8]
 800fb88:	f013 0f01 	tst.w	r3, #1
 800fb8c:	d016      	beq.n	800fbbc <spi_stm32_shift_s+0x114>
	return !!(ctx->rx_buf && ctx->rx_len);
 800fb8e:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800fb90:	b1b3      	cbz	r3, 800fbc0 <spi_stm32_shift_s+0x118>
 800fb92:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 800fb94:	b9b2      	cbnz	r2, 800fbc4 <spi_stm32_shift_s+0x11c>
	if (ll_func_rx_is_not_empty(spi) &&
 800fb96:	b18a      	cbz	r2, 800fbbc <spi_stm32_shift_s+0x114>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800fb98:	680a      	ldr	r2, [r1, #0]
 800fb9a:	8892      	ldrh	r2, [r2, #4]
 800fb9c:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800fba0:	2a08      	cmp	r2, #8
 800fba2:	d011      	beq.n	800fbc8 <spi_stm32_shift_s+0x120>
  return (uint16_t)(READ_REG(SPIx->DR));
 800fba4:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800fba6:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800fba8:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800fbaa:	b13b      	cbz	r3, 800fbbc <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 800fbac:	3b01      	subs	r3, #1
 800fbae:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d033      	beq.n	800fc1c <spi_stm32_shift_s+0x174>
	} else if (ctx->rx_buf) {
 800fbb4:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800fbb6:	b10b      	cbz	r3, 800fbbc <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 800fbb8:	3302      	adds	r3, #2
 800fbba:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 800fbbc:	bc10      	pop	{r4}
 800fbbe:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	e7e8      	b.n	800fb96 <spi_stm32_shift_s+0xee>
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	e7e6      	b.n	800fb96 <spi_stm32_shift_s+0xee>
  return (uint8_t)(READ_REG(SPIx->DR));
 800fbc8:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800fbca:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 800fbcc:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d0f4      	beq.n	800fbbc <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 800fbd2:	3b01      	subs	r3, #1
 800fbd4:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800fbd6:	b12b      	cbz	r3, 800fbe4 <spi_stm32_shift_s+0x13c>
	} else if (ctx->rx_buf) {
 800fbd8:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d0ee      	beq.n	800fbbc <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 800fbde:	3301      	adds	r3, #1
 800fbe0:	65cb      	str	r3, [r1, #92]	; 0x5c
 800fbe2:	e7eb      	b.n	800fbbc <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 800fbe4:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800fbe6:	3308      	adds	r3, #8
 800fbe8:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 800fbea:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800fbec:	3b01      	subs	r3, #1
 800fbee:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800fbf0:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 800fbf4:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 800fbf8:	6813      	ldr	r3, [r2, #0]
 800fbfa:	b163      	cbz	r3, 800fc16 <spi_stm32_shift_s+0x16e>
		if (((*current)->len / dfs) != 0) {
 800fbfc:	6823      	ldr	r3, [r4, #0]
 800fbfe:	6858      	ldr	r0, [r3, #4]
 800fc00:	b928      	cbnz	r0, 800fc0e <spi_stm32_shift_s+0x166>
		++(*current);
 800fc02:	3308      	adds	r3, #8
 800fc04:	6023      	str	r3, [r4, #0]
		--(*count);
 800fc06:	6813      	ldr	r3, [r2, #0]
 800fc08:	3b01      	subs	r3, #1
 800fc0a:	6013      	str	r3, [r2, #0]
 800fc0c:	e7f4      	b.n	800fbf8 <spi_stm32_shift_s+0x150>
			*buf_len = (*current)->len / dfs;
 800fc0e:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 800fc10:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	e000      	b.n	800fc18 <spi_stm32_shift_s+0x170>
	*buf_len = 0;
 800fc16:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800fc18:	65cb      	str	r3, [r1, #92]	; 0x5c
 800fc1a:	e7cf      	b.n	800fbbc <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 800fc1c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800fc1e:	3308      	adds	r3, #8
 800fc20:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 800fc22:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800fc24:	3b01      	subs	r3, #1
 800fc26:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800fc28:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 800fc2c:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 800fc30:	6813      	ldr	r3, [r2, #0]
 800fc32:	b173      	cbz	r3, 800fc52 <spi_stm32_shift_s+0x1aa>
		if (((*current)->len / dfs) != 0) {
 800fc34:	6823      	ldr	r3, [r4, #0]
 800fc36:	6858      	ldr	r0, [r3, #4]
 800fc38:	2801      	cmp	r0, #1
 800fc3a:	d805      	bhi.n	800fc48 <spi_stm32_shift_s+0x1a0>
		++(*current);
 800fc3c:	3308      	adds	r3, #8
 800fc3e:	6023      	str	r3, [r4, #0]
		--(*count);
 800fc40:	6813      	ldr	r3, [r2, #0]
 800fc42:	3b01      	subs	r3, #1
 800fc44:	6013      	str	r3, [r2, #0]
 800fc46:	e7f3      	b.n	800fc30 <spi_stm32_shift_s+0x188>
			*buf_len = (*current)->len / dfs;
 800fc48:	0840      	lsrs	r0, r0, #1
 800fc4a:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 800fc4c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	e000      	b.n	800fc54 <spi_stm32_shift_s+0x1ac>
	*buf_len = 0;
 800fc52:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800fc54:	65cb      	str	r3, [r1, #92]	; 0x5c
 800fc56:	e7b1      	b.n	800fbbc <spi_stm32_shift_s+0x114>

0800fc58 <spi_stm32_shift_frames>:
{
 800fc58:	b510      	push	{r4, lr}
 800fc5a:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 800fc5c:	680b      	ldr	r3, [r1, #0]
 800fc5e:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 800fc60:	f013 0f01 	tst.w	r3, #1
 800fc64:	d105      	bne.n	800fc72 <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 800fc66:	f7ff fe2d 	bl	800f8c4 <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f7f6 fc1e 	bl	80064ac <spi_stm32_get_err>
}
 800fc70:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 800fc72:	f7ff ff19 	bl	800faa8 <spi_stm32_shift_s>
 800fc76:	e7f8      	b.n	800fc6a <spi_stm32_shift_frames+0x12>

0800fc78 <spi_stm32_isr>:
{
 800fc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc7a:	4604      	mov	r4, r0
	const struct spi_stm32_config *cfg = dev->config;
 800fc7c:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800fc7e:	6906      	ldr	r6, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800fc80:	689f      	ldr	r7, [r3, #8]
	err = spi_stm32_get_err(spi);
 800fc82:	4638      	mov	r0, r7
 800fc84:	f7f6 fc12 	bl	80064ac <spi_stm32_get_err>
	if (err) {
 800fc88:	4605      	mov	r5, r0
 800fc8a:	b968      	cbnz	r0, 800fca8 <spi_stm32_isr+0x30>
	if (spi_stm32_transfer_ongoing(data)) {
 800fc8c:	4630      	mov	r0, r6
 800fc8e:	f7ff fd36 	bl	800f6fe <spi_stm32_transfer_ongoing>
 800fc92:	b970      	cbnz	r0, 800fcb2 <spi_stm32_isr+0x3a>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 800fc94:	b91d      	cbnz	r5, 800fc9e <spi_stm32_isr+0x26>
 800fc96:	4630      	mov	r0, r6
 800fc98:	f7ff fd31 	bl	800f6fe <spi_stm32_transfer_ongoing>
 800fc9c:	b918      	cbnz	r0, 800fca6 <spi_stm32_isr+0x2e>
		spi_stm32_complete(dev, err);
 800fc9e:	4629      	mov	r1, r5
 800fca0:	4620      	mov	r0, r4
 800fca2:	f7ff fdca 	bl	800f83a <spi_stm32_complete>
}
 800fca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_stm32_complete(dev, err);
 800fca8:	4601      	mov	r1, r0
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f7ff fdc5 	bl	800f83a <spi_stm32_complete>
		return;
 800fcb0:	e7f9      	b.n	800fca6 <spi_stm32_isr+0x2e>
		err = spi_stm32_shift_frames(spi, data);
 800fcb2:	4631      	mov	r1, r6
 800fcb4:	4638      	mov	r0, r7
 800fcb6:	f7ff ffcf 	bl	800fc58 <spi_stm32_shift_frames>
 800fcba:	4605      	mov	r5, r0
 800fcbc:	e7ea      	b.n	800fc94 <spi_stm32_isr+0x1c>

0800fcbe <timer_work_handler>:
{
 800fcbe:	b508      	push	{r3, lr}
	TimerIrqHandler();
 800fcc0:	f7f8 f836 	bl	8007d30 <TimerIrqHandler>
}
 800fcc4:	bd08      	pop	{r3, pc}

0800fcc6 <RtcGetTimerValue>:
{
 800fcc6:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800fcc8:	f000 ff3d 	bl	8010b46 <z_impl_k_uptime_ticks>
 800fccc:	220a      	movs	r2, #10
 800fcce:	2300      	movs	r3, #0
 800fcd0:	f7f0 fe84 	bl	80009dc <__aeabi_uldivmod>
}
 800fcd4:	bd08      	pop	{r3, pc}

0800fcd6 <RtcGetMinimumTimeout>:
}
 800fcd6:	2001      	movs	r0, #1
 800fcd8:	4770      	bx	lr

0800fcda <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
 800fcda:	b508      	push	{r3, lr}
			return t * ((uint64_t)to_hz / from_hz);
 800fcdc:	0f81      	lsrs	r1, r0, #30
 800fcde:	0083      	lsls	r3, r0, #2
 800fce0:	1818      	adds	r0, r3, r0
 800fce2:	f141 0100 	adc.w	r1, r1, #0
 800fce6:	1800      	adds	r0, r0, r0
 800fce8:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 800fcea:	f7fc f979 	bl	800bfe0 <z_impl_k_sleep>
	k_sleep(K_MSEC(ms));
}
 800fcee:	bd08      	pop	{r3, pc}

0800fcf0 <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 800fcf0:	4770      	bx	lr

0800fcf2 <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
{
	return tick;
}
 800fcf2:	4770      	bx	lr

0800fcf4 <BoardCriticalSectionBegin>:
	__asm__ volatile(
 800fcf4:	f04f 0210 	mov.w	r2, #16
 800fcf8:	f3ef 8311 	mrs	r3, BASEPRI
 800fcfc:	f382 8812 	msr	BASEPRI_MAX, r2
 800fd00:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 800fd04:	6003      	str	r3, [r0, #0]
}
 800fd06:	4770      	bx	lr

0800fd08 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
 800fd08:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
 800fd0a:	f383 8811 	msr	BASEPRI, r3
 800fd0e:	f3bf 8f6f 	isb	sy
}
 800fd12:	4770      	bx	lr

0800fd14 <z_log_msg2_runtime_create>:
{
 800fd14:	b510      	push	{r4, lr}
 800fd16:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800fd18:	ac0a      	add	r4, sp, #40	; 0x28
 800fd1a:	9405      	str	r4, [sp, #20]
 800fd1c:	9402      	str	r4, [sp, #8]
 800fd1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fd20:	9401      	str	r4, [sp, #4]
 800fd22:	9c08      	ldr	r4, [sp, #32]
 800fd24:	9400      	str	r4, [sp, #0]
 800fd26:	f7ff f83f 	bl	800eda8 <z_impl_z_log_msg2_runtime_vcreate>
}
 800fd2a:	b006      	add	sp, #24
 800fd2c:	bd10      	pop	{r4, pc}

0800fd2e <clamp_int8>:
	if (x < min) {
 800fd2e:	4288      	cmp	r0, r1
 800fd30:	db03      	blt.n	800fd3a <clamp_int8+0xc>
	} else if (x > max) {
 800fd32:	4290      	cmp	r0, r2
 800fd34:	dd02      	ble.n	800fd3c <clamp_int8+0xe>
		return max;
 800fd36:	4610      	mov	r0, r2
 800fd38:	4770      	bx	lr
		return min;
 800fd3a:	4608      	mov	r0, r1
}
 800fd3c:	4770      	bx	lr

0800fd3e <SX1276CheckRfFrequency>:
}
 800fd3e:	2001      	movs	r0, #1
 800fd40:	4770      	bx	lr

0800fd42 <sx127x_antenna_configure>:
}
 800fd42:	2000      	movs	r0, #0
 800fd44:	4770      	bx	lr

0800fd46 <z_log_msg2_runtime_create>:
{
 800fd46:	b510      	push	{r4, lr}
 800fd48:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800fd4a:	ac0a      	add	r4, sp, #40	; 0x28
 800fd4c:	9405      	str	r4, [sp, #20]
 800fd4e:	9402      	str	r4, [sp, #8]
 800fd50:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fd52:	9401      	str	r4, [sp, #4]
 800fd54:	9c08      	ldr	r4, [sp, #32]
 800fd56:	9400      	str	r4, [sp, #0]
 800fd58:	f7ff f826 	bl	800eda8 <z_impl_z_log_msg2_runtime_vcreate>
}
 800fd5c:	b006      	add	sp, #24
 800fd5e:	bd10      	pop	{r4, pc}

0800fd60 <SX1276GetBoardTcxoWakeupTime>:
}
 800fd60:	2000      	movs	r0, #0
 800fd62:	4770      	bx	lr

0800fd64 <SX1276SetAntSwLowPower>:
}
 800fd64:	4770      	bx	lr

0800fd66 <SX1276SetBoardTcxo>:
}
 800fd66:	4770      	bx	lr

0800fd68 <SX1276SetAntSw>:
}
 800fd68:	4770      	bx	lr

0800fd6a <sx127x_read>:
{
 800fd6a:	b508      	push	{r3, lr}
 800fd6c:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr, false, data, len);
 800fd6e:	460a      	mov	r2, r1
 800fd70:	2100      	movs	r1, #0
 800fd72:	f7f7 fbcb 	bl	800750c <sx127x_transceive>
}
 800fd76:	bd08      	pop	{r3, pc}

0800fd78 <sx127x_write>:
{
 800fd78:	b508      	push	{r3, lr}
 800fd7a:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 800fd7c:	460a      	mov	r2, r1
 800fd7e:	2101      	movs	r1, #1
 800fd80:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800fd84:	f7f7 fbc2 	bl	800750c <sx127x_transceive>
}
 800fd88:	bd08      	pop	{r3, pc}

0800fd8a <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800fd8a:	e004      	b.n	800fd96 <memcpy1+0xc>
    {
        *dst++ = *src++;
 800fd8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd90:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800fd94:	461a      	mov	r2, r3
 800fd96:	1e53      	subs	r3, r2, #1
 800fd98:	b29b      	uxth	r3, r3
 800fd9a:	2a00      	cmp	r2, #0
 800fd9c:	d1f6      	bne.n	800fd8c <memcpy1+0x2>
    }
}
 800fd9e:	4770      	bx	lr

0800fda0 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800fda0:	b570      	push	{r4, r5, r6, lr}
 800fda2:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 800fda4:	f7ff ff97 	bl	800fcd6 <RtcGetMinimumTimeout>
 800fda8:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800fdae:	6826      	ldr	r6, [r4, #0]
 800fdb0:	f7f6 feea 	bl	8006b88 <RtcGetTimerElapsedTime>
 800fdb4:	4428      	add	r0, r5
 800fdb6:	4286      	cmp	r6, r0
 800fdb8:	d303      	bcc.n	800fdc2 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 800fdba:	6820      	ldr	r0, [r4, #0]
 800fdbc:	f7f6 fefa 	bl	8006bb4 <RtcSetAlarm>
}
 800fdc0:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 800fdc2:	f7f6 fee1 	bl	8006b88 <RtcGetTimerElapsedTime>
 800fdc6:	4405      	add	r5, r0
 800fdc8:	6025      	str	r5, [r4, #0]
 800fdca:	e7f6      	b.n	800fdba <TimerSetTimeout+0x1a>

0800fdcc <TimerInit>:
    obj->Timestamp = 0;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 800fdd0:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 800fdd2:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 800fdd4:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 800fdd6:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 800fdd8:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 800fdda:	6143      	str	r3, [r0, #20]
}
 800fddc:	4770      	bx	lr

0800fdde <TimerSetValue>:
{
 800fdde:	b538      	push	{r3, r4, r5, lr}
 800fde0:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 800fde2:	4608      	mov	r0, r1
 800fde4:	f7ff ff84 	bl	800fcf0 <RtcMs2Tick>
 800fde8:	4605      	mov	r5, r0
    TimerStop( obj );
 800fdea:	4620      	mov	r0, r4
 800fdec:	f7f7 ffe4 	bl	8007db8 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800fdf0:	f7ff ff71 	bl	800fcd6 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800fdf4:	4285      	cmp	r5, r0
 800fdf6:	d300      	bcc.n	800fdfa <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 800fdf8:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 800fdfa:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 800fdfc:	6060      	str	r0, [r4, #4]
}
 800fdfe:	bd38      	pop	{r3, r4, r5, pc}

0800fe00 <TimerGetCurrentTime>:
{
 800fe00:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 800fe02:	f7ff ff60 	bl	800fcc6 <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 800fe06:	f7ff ff74 	bl	800fcf2 <RtcTick2Ms>
}
 800fe0a:	bd08      	pop	{r3, pc}

0800fe0c <TimerGetElapsedTime>:
{
 800fe0c:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 800fe0e:	4604      	mov	r4, r0
 800fe10:	b908      	cbnz	r0, 800fe16 <TimerGetElapsedTime+0xa>
}
 800fe12:	4620      	mov	r0, r4
 800fe14:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 800fe16:	f7ff ff56 	bl	800fcc6 <RtcGetTimerValue>
 800fe1a:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	f7ff ff67 	bl	800fcf0 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 800fe22:	1a28      	subs	r0, r5, r0
 800fe24:	f7ff ff65 	bl	800fcf2 <RtcTick2Ms>
 800fe28:	4604      	mov	r4, r0
 800fe2a:	e7f2      	b.n	800fe12 <TimerGetElapsedTime+0x6>

0800fe2c <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800fe2c:	b508      	push	{r3, lr}
    DelayMsMcu( ms );
 800fe2e:	f7ff ff54 	bl	800fcda <DelayMsMcu>
}
 800fe32:	bd08      	pop	{r3, pc}

0800fe34 <SX1276ConvertPllStepToFreqInHz>:
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800fe34:	0a01      	lsrs	r1, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800fe36:	f643 5209 	movw	r2, #15625	; 0x3d09
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800fe3a:	b2c3      	uxtb	r3, r0
 800fe3c:	fb02 f303 	mul.w	r3, r2, r3
 800fe40:	3380      	adds	r3, #128	; 0x80
 800fe42:	0a1b      	lsrs	r3, r3, #8
}
 800fe44:	fb02 3001 	mla	r0, r2, r1, r3
 800fe48:	4770      	bx	lr

0800fe4a <SX1276GetGfskTimeOnAirNumerator>:
    return ( preambleLen << 3 ) +
 800fe4a:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800fe4c:	b941      	cbnz	r1, 800fe60 <SX1276GetGfskTimeOnAirNumerator+0x16>
 800fe4e:	2108      	movs	r1, #8
    return ( preambleLen << 3 ) +
 800fe50:	4408      	add	r0, r1
           ( ( fixLen == false ) ? 8 : 0 ) +
 800fe52:	3018      	adds	r0, #24
               ( ( crcOn == true ) ? 2 : 0 ) 
 800fe54:	b133      	cbz	r3, 800fe64 <SX1276GetGfskTimeOnAirNumerator+0x1a>
 800fe56:	2302      	movs	r3, #2
               ( 0 ) + // Address filter size
 800fe58:	441a      	add	r2, r3
}
 800fe5a:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800fe5e:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 800fe60:	2100      	movs	r1, #0
 800fe62:	e7f5      	b.n	800fe50 <SX1276GetGfskTimeOnAirNumerator+0x6>
               ( ( crcOn == true ) ? 2 : 0 ) 
 800fe64:	2300      	movs	r3, #0
 800fe66:	e7f7      	b.n	800fe58 <SX1276GetGfskTimeOnAirNumerator+0xe>

0800fe68 <SX1276GetLoRaTimeOnAirNumerator>:
{
 800fe68:	b570      	push	{r4, r5, r6, lr}
 800fe6a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800fe6e:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800fe72:	3204      	adds	r2, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800fe74:	f1a1 0c05 	sub.w	ip, r1, #5
 800fe78:	f1bc 0f01 	cmp.w	ip, #1
 800fe7c:	d932      	bls.n	800fee4 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800fe7e:	b918      	cbnz	r0, 800fe88 <SX1276GetLoRaTimeOnAirNumerator+0x20>
 800fe80:	f1a1 060b 	sub.w	r6, r1, #11
 800fe84:	2e01      	cmp	r6, #1
 800fe86:	d935      	bls.n	800fef4 <SX1276GetLoRaTimeOnAirNumerator+0x8c>
 800fe88:	2801      	cmp	r0, #1
 800fe8a:	d02f      	beq.n	800feec <SX1276GetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800fe8c:	2600      	movs	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800fe8e:	f89d e014 	ldrb.w	lr, [sp, #20]
 800fe92:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800fe96:	b38d      	cbz	r5, 800fefc <SX1276GetLoRaTimeOnAirNumerator+0x94>
 800fe98:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800fe9c:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800fe9e:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800fea0:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800fea4:	b36c      	cbz	r4, 800ff02 <SX1276GetLoRaTimeOnAirNumerator+0x9a>
 800fea6:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800feaa:	44f4      	add	ip, lr
    if( datarate <= 6 )
 800feac:	2906      	cmp	r1, #6
 800feae:	d904      	bls.n	800feba <SX1276GetLoRaTimeOnAirNumerator+0x52>
        ceilNumerator += 8;
 800feb0:	f10c 0c08 	add.w	ip, ip, #8
        if( lowDatareOptimize == true )
 800feb4:	b10e      	cbz	r6, 800feba <SX1276GetLoRaTimeOnAirNumerator+0x52>
            ceilDenominator = 4 * ( datarate - 2 );
 800feb6:	1e88      	subs	r0, r1, #2
 800feb8:	0080      	lsls	r0, r0, #2
    if( ceilNumerator < 0 )
 800feba:	f1bc 0f00 	cmp.w	ip, #0
 800febe:	db23      	blt.n	800ff08 <SX1276GetLoRaTimeOnAirNumerator+0xa0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800fec0:	4484      	add	ip, r0
 800fec2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800fec6:	fb9c fcf0 	sdiv	ip, ip, r0
 800feca:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800fece:	f103 000c 	add.w	r0, r3, #12
    if( datarate <= 6 )
 800fed2:	2906      	cmp	r1, #6
 800fed4:	d801      	bhi.n	800feda <SX1276GetLoRaTimeOnAirNumerator+0x72>
        intermediate += 2;
 800fed6:	f103 000e 	add.w	r0, r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800feda:	0080      	lsls	r0, r0, #2
 800fedc:	3001      	adds	r0, #1
 800fede:	3902      	subs	r1, #2
}
 800fee0:	4088      	lsls	r0, r1
 800fee2:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800fee4:	2b0b      	cmp	r3, #11
 800fee6:	d8ca      	bhi.n	800fe7e <SX1276GetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800fee8:	230c      	movs	r3, #12
 800feea:	e7c8      	b.n	800fe7e <SX1276GetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800feec:	290c      	cmp	r1, #12
 800feee:	d003      	beq.n	800fef8 <SX1276GetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800fef0:	2600      	movs	r6, #0
 800fef2:	e7cc      	b.n	800fe8e <SX1276GetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800fef4:	2601      	movs	r6, #1
 800fef6:	e7ca      	b.n	800fe8e <SX1276GetLoRaTimeOnAirNumerator+0x26>
 800fef8:	2601      	movs	r6, #1
 800fefa:	e7c8      	b.n	800fe8e <SX1276GetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800fefc:	f04f 0c00 	mov.w	ip, #0
 800ff00:	e7cc      	b.n	800fe9c <SX1276GetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800ff02:	f04f 0c14 	mov.w	ip, #20
 800ff06:	e7d0      	b.n	800feaa <SX1276GetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800ff08:	f04f 0c00 	mov.w	ip, #0
 800ff0c:	e7d8      	b.n	800fec0 <SX1276GetLoRaTimeOnAirNumerator+0x58>

0800ff0e <SX1276ReadFifo>:
{
 800ff0e:	b508      	push	{r3, lr}
 800ff10:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800ff12:	4601      	mov	r1, r0
 800ff14:	2000      	movs	r0, #0
 800ff16:	f7f7 fc49 	bl	80077ac <SX1276ReadBuffer>
}
 800ff1a:	bd08      	pop	{r3, pc}

0800ff1c <SX1276WriteFifo>:
{
 800ff1c:	b508      	push	{r3, lr}
 800ff1e:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 800ff20:	4601      	mov	r1, r0
 800ff22:	2000      	movs	r0, #0
 800ff24:	f7f7 fd92 	bl	8007a4c <SX1276WriteBuffer>
}
 800ff28:	bd08      	pop	{r3, pc}

0800ff2a <SX1276GetTimeOnAir>:
{
 800ff2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff2c:	b085      	sub	sp, #20
 800ff2e:	460e      	mov	r6, r1
 800ff30:	4615      	mov	r5, r2
 800ff32:	461a      	mov	r2, r3
 800ff34:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 800ff38:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800ff3c:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800ff40:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    switch( modem )
 800ff44:	b148      	cbz	r0, 800ff5a <SX1276GetTimeOnAir+0x30>
 800ff46:	2801      	cmp	r0, #1
 800ff48:	d010      	beq.n	800ff6c <SX1276GetTimeOnAir+0x42>
 800ff4a:	2501      	movs	r5, #1
 800ff4c:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 800ff4e:	1960      	adds	r0, r4, r5
 800ff50:	3801      	subs	r0, #1
}
 800ff52:	fbb0 f0f5 	udiv	r0, r0, r5
 800ff56:	b005      	add	sp, #20
 800ff58:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800ff5a:	463a      	mov	r2, r7
 800ff5c:	4660      	mov	r0, ip
 800ff5e:	f7ff ff74 	bl	800fe4a <SX1276GetGfskTimeOnAirNumerator>
 800ff62:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800ff66:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800ff6a:	e7f0      	b.n	800ff4e <SX1276GetTimeOnAir+0x24>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800ff6c:	9302      	str	r3, [sp, #8]
 800ff6e:	9701      	str	r7, [sp, #4]
 800ff70:	9100      	str	r1, [sp, #0]
 800ff72:	4663      	mov	r3, ip
 800ff74:	4629      	mov	r1, r5
 800ff76:	4630      	mov	r0, r6
 800ff78:	f7ff ff76 	bl	800fe68 <SX1276GetLoRaTimeOnAirNumerator>
 800ff7c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800ff80:	fb00 f404 	mul.w	r4, r0, r4
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 800ff84:	4630      	mov	r0, r6
 800ff86:	f7f7 ff93 	bl	8007eb0 <SX1276GetLoRaBandwidthInHz>
 800ff8a:	4605      	mov	r5, r0
        break;
 800ff8c:	e7df      	b.n	800ff4e <SX1276GetTimeOnAir+0x24>

0800ff8e <SX1276Write>:
{
 800ff8e:	b500      	push	{lr}
 800ff90:	b083      	sub	sp, #12
 800ff92:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800ff96:	2201      	movs	r2, #1
 800ff98:	f10d 0107 	add.w	r1, sp, #7
 800ff9c:	f7f7 fd56 	bl	8007a4c <SX1276WriteBuffer>
}
 800ffa0:	b003      	add	sp, #12
 800ffa2:	f85d fb04 	ldr.w	pc, [sp], #4

0800ffa6 <SX1276Read>:
{
 800ffa6:	b500      	push	{lr}
 800ffa8:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f10d 0107 	add.w	r1, sp, #7
 800ffb0:	f7f7 fbfc 	bl	80077ac <SX1276ReadBuffer>
}
 800ffb4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ffb8:	b003      	add	sp, #12
 800ffba:	f85d fb04 	ldr.w	pc, [sp], #4

0800ffbe <SX1276SetOpMode>:
{
 800ffbe:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 800ffc0:	4604      	mov	r4, r0
 800ffc2:	b970      	cbnz	r0, 800ffe2 <SX1276SetOpMode+0x24>
        SX1276SetAntSwLowPower( true );
 800ffc4:	2001      	movs	r0, #1
 800ffc6:	f7ff fecd 	bl	800fd64 <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800ffca:	2001      	movs	r0, #1
 800ffcc:	f7ff ffeb 	bl	800ffa6 <SX1276Read>
 800ffd0:	b241      	sxtb	r1, r0
 800ffd2:	f021 0107 	bic.w	r1, r1, #7
 800ffd6:	4321      	orrs	r1, r4
 800ffd8:	b2c9      	uxtb	r1, r1
 800ffda:	2001      	movs	r0, #1
 800ffdc:	f7ff ffd7 	bl	800ff8e <SX1276Write>
}
 800ffe0:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 800ffe2:	2001      	movs	r0, #1
 800ffe4:	f7ff febf 	bl	800fd66 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 800ffe8:	2000      	movs	r0, #0
 800ffea:	f7ff febb 	bl	800fd64 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800ffee:	4620      	mov	r0, r4
 800fff0:	f7ff feba 	bl	800fd68 <SX1276SetAntSw>
 800fff4:	e7e9      	b.n	800ffca <SX1276SetOpMode+0xc>

0800fff6 <SX1276IsChannelFree>:
{
 800fff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff8:	4607      	mov	r7, r0
 800fffa:	460c      	mov	r4, r1
 800fffc:	4616      	mov	r6, r2
 800fffe:	461d      	mov	r5, r3
    SX1276SetSleep( );
 8010000:	f7f8 fab0 	bl	8008564 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 8010004:	2000      	movs	r0, #0
 8010006:	f7f8 fd43 	bl	8008a90 <SX1276SetModem>
    SX1276SetChannel( freq );
 801000a:	4638      	mov	r0, r7
 801000c:	f7f7 ff7a 	bl	8007f04 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8010010:	4620      	mov	r0, r4
 8010012:	f7f7 ff25 	bl	8007e60 <GetFskBandwidthRegValue>
 8010016:	4604      	mov	r4, r0
 8010018:	4601      	mov	r1, r0
 801001a:	2012      	movs	r0, #18
 801001c:	f7ff ffb7 	bl	800ff8e <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8010020:	4621      	mov	r1, r4
 8010022:	2013      	movs	r0, #19
 8010024:	f7ff ffb3 	bl	800ff8e <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8010028:	2005      	movs	r0, #5
 801002a:	f7ff ffc8 	bl	800ffbe <SX1276SetOpMode>
    DelayMs( 1 );
 801002e:	2001      	movs	r0, #1
 8010030:	f7ff fefc 	bl	800fe2c <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 8010034:	f7ff fee4 	bl	800fe00 <TimerGetCurrentTime>
 8010038:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801003a:	4620      	mov	r0, r4
 801003c:	f7ff fee6 	bl	800fe0c <TimerGetElapsedTime>
 8010040:	42a8      	cmp	r0, r5
 8010042:	d206      	bcs.n	8010052 <SX1276IsChannelFree+0x5c>
        rssi = SX1276ReadRssi( MODEM_FSK );
 8010044:	2000      	movs	r0, #0
 8010046:	f7f8 fcfb 	bl	8008a40 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 801004a:	42b0      	cmp	r0, r6
 801004c:	ddf5      	ble.n	801003a <SX1276IsChannelFree+0x44>
            status = false;
 801004e:	2400      	movs	r4, #0
 8010050:	e000      	b.n	8010054 <SX1276IsChannelFree+0x5e>
    bool status = true;
 8010052:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8010054:	f7f8 fa86 	bl	8008564 <SX1276SetSleep>
}
 8010058:	4620      	mov	r0, r4
 801005a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801005c <SX1276Random>:
{
 801005c:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 801005e:	2001      	movs	r0, #1
 8010060:	f7f8 fd16 	bl	8008a90 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8010064:	21ff      	movs	r1, #255	; 0xff
 8010066:	2011      	movs	r0, #17
 8010068:	f7ff ff91 	bl	800ff8e <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801006c:	2005      	movs	r0, #5
 801006e:	f7ff ffa6 	bl	800ffbe <SX1276SetOpMode>
    uint32_t rnd = 0;
 8010072:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 8010074:	462c      	mov	r4, r5
 8010076:	e00b      	b.n	8010090 <SX1276Random+0x34>
        DelayMs( 1 );
 8010078:	2001      	movs	r0, #1
 801007a:	f7ff fed7 	bl	800fe2c <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 801007e:	202c      	movs	r0, #44	; 0x2c
 8010080:	f7ff ff91 	bl	800ffa6 <SX1276Read>
 8010084:	f000 0001 	and.w	r0, r0, #1
 8010088:	40a0      	lsls	r0, r4
 801008a:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 801008c:	3401      	adds	r4, #1
 801008e:	b2e4      	uxtb	r4, r4
 8010090:	2c1f      	cmp	r4, #31
 8010092:	d9f1      	bls.n	8010078 <SX1276Random+0x1c>
    SX1276SetSleep( );
 8010094:	f7f8 fa66 	bl	8008564 <SX1276SetSleep>
}
 8010098:	4628      	mov	r0, r5
 801009a:	bd38      	pop	{r3, r4, r5, pc}

0801009c <SX1276GetWakeupTime>:
{
 801009c:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 801009e:	f7ff fe5f 	bl	800fd60 <SX1276GetBoardTcxoWakeupTime>
}
 80100a2:	3001      	adds	r0, #1
 80100a4:	bd08      	pop	{r3, pc}

080100a6 <uart_stm32_config_get>:
	struct uart_stm32_data *data = dev->data;
 80100a6:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80100ac:	6843      	ldr	r3, [r0, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 80100b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100ba:	d02f      	beq.n	801011c <uart_stm32_config_get+0x76>
 80100bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80100c0:	d12e      	bne.n	8010120 <uart_stm32_config_get+0x7a>
 80100c2:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 80100c4:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80100c6:	6843      	ldr	r3, [r0, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 80100d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100d4:	d028      	beq.n	8010128 <uart_stm32_config_get+0x82>
 80100d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80100da:	d027      	beq.n	801012c <uart_stm32_config_get+0x86>
 80100dc:	b313      	cbz	r3, 8010124 <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 80100de:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 80100e0:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80100e2:	6843      	ldr	r3, [r0, #4]
 80100e4:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80100e6:	6813      	ldr	r3, [r2, #0]
 80100e8:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80100ec:	6812      	ldr	r2, [r2, #0]
 80100ee:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	switch (db) {
 80100f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100f6:	d01d      	beq.n	8010134 <uart_stm32_config_get+0x8e>
 80100f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80100fc:	d11d      	bne.n	801013a <uart_stm32_config_get+0x94>
		if (p == LL_USART_PARITY_NONE) {
 80100fe:	b1ba      	cbz	r2, 8010130 <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_6;
 8010100:	2301      	movs	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8010102:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8010104:	6843      	ldr	r3, [r0, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8010108:	689b      	ldr	r3, [r3, #8]
 801010a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 801010e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010112:	d019      	beq.n	8010148 <uart_stm32_config_get+0xa2>
	return UART_CFG_FLOW_CTRL_NONE;
 8010114:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 8010116:	71cb      	strb	r3, [r1, #7]
}
 8010118:	2000      	movs	r0, #0
 801011a:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 801011c:	2302      	movs	r3, #2
 801011e:	e7d1      	b.n	80100c4 <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 8010120:	2300      	movs	r3, #0
 8010122:	e7cf      	b.n	80100c4 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 8010124:	2301      	movs	r3, #1
 8010126:	e7db      	b.n	80100e0 <uart_stm32_config_get+0x3a>
	switch (sb) {
 8010128:	2300      	movs	r3, #0
 801012a:	e7d9      	b.n	80100e0 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 801012c:	2302      	movs	r3, #2
 801012e:	e7d7      	b.n	80100e0 <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_7;
 8010130:	2302      	movs	r3, #2
 8010132:	e7e6      	b.n	8010102 <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 8010134:	b922      	cbnz	r2, 8010140 <uart_stm32_config_get+0x9a>
			return UART_CFG_DATA_BITS_9;
 8010136:	2304      	movs	r3, #4
 8010138:	e7e3      	b.n	8010102 <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 801013a:	b91a      	cbnz	r2, 8010144 <uart_stm32_config_get+0x9e>
			return UART_CFG_DATA_BITS_8;
 801013c:	2303      	movs	r3, #3
 801013e:	e7e0      	b.n	8010102 <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 8010140:	2303      	movs	r3, #3
 8010142:	e7de      	b.n	8010102 <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_7;
 8010144:	2302      	movs	r3, #2
 8010146:	e7dc      	b.n	8010102 <uart_stm32_config_get+0x5c>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 8010148:	2301      	movs	r3, #1
 801014a:	e7e4      	b.n	8010116 <uart_stm32_config_get+0x70>

0801014c <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 801014c:	6843      	ldr	r3, [r0, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8010150:	69da      	ldr	r2, [r3, #28]
 8010152:	f012 0f08 	tst.w	r2, #8
 8010156:	d001      	beq.n	801015c <uart_stm32_poll_in+0x10>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8010158:	2208      	movs	r2, #8
 801015a:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 801015c:	69da      	ldr	r2, [r3, #28]
 801015e:	f012 0f20 	tst.w	r2, #32
 8010162:	d003      	beq.n	801016c <uart_stm32_poll_in+0x20>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8010164:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 8010166:	700b      	strb	r3, [r1, #0]
	return 0;
 8010168:	2000      	movs	r0, #0
 801016a:	4770      	bx	lr
		return -1;
 801016c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8010170:	4770      	bx	lr

08010172 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8010172:	6843      	ldr	r3, [r0, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8010176:	69da      	ldr	r2, [r3, #28]
 8010178:	f012 0f80 	tst.w	r2, #128	; 0x80
 801017c:	d0fb      	beq.n	8010176 <uart_stm32_poll_out+0x4>
	__asm__ volatile(
 801017e:	f04f 0010 	mov.w	r0, #16
 8010182:	f3ef 8211 	mrs	r2, BASEPRI
 8010186:	f380 8812 	msr	BASEPRI_MAX, r0
 801018a:	f3bf 8f6f 	isb	sy
 801018e:	69d8      	ldr	r0, [r3, #28]
 8010190:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010194:	d104      	bne.n	80101a0 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 8010196:	f382 8811 	msr	BASEPRI, r2
 801019a:	f3bf 8f6f 	isb	sy
}
 801019e:	e7ea      	b.n	8010176 <uart_stm32_poll_out+0x4>
  USARTx->TDR = Value;
 80101a0:	b289      	uxth	r1, r1
 80101a2:	8519      	strh	r1, [r3, #40]	; 0x28
	__asm__ volatile(
 80101a4:	f382 8811 	msr	BASEPRI, r2
 80101a8:	f3bf 8f6f 	isb	sy
}
 80101ac:	4770      	bx	lr

080101ae <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80101ae:	6843      	ldr	r3, [r0, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80101b2:	69d8      	ldr	r0, [r3, #28]
 80101b4:	f010 0008 	ands.w	r0, r0, #8
 80101b8:	d000      	beq.n	80101bc <uart_stm32_err_check+0xe>
		err |= UART_ERROR_OVERRUN;
 80101ba:	2001      	movs	r0, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 80101bc:	69da      	ldr	r2, [r3, #28]
 80101be:	f012 0f01 	tst.w	r2, #1
 80101c2:	d001      	beq.n	80101c8 <uart_stm32_err_check+0x1a>
		err |= UART_ERROR_PARITY;
 80101c4:	f040 0002 	orr.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80101c8:	69da      	ldr	r2, [r3, #28]
 80101ca:	f012 0f02 	tst.w	r2, #2
 80101ce:	d001      	beq.n	80101d4 <uart_stm32_err_check+0x26>
		err |= UART_ERROR_FRAMING;
 80101d0:	f040 0004 	orr.w	r0, r0, #4
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 80101d4:	69da      	ldr	r2, [r3, #28]
 80101d6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80101da:	d001      	beq.n	80101e0 <uart_stm32_err_check+0x32>
		err |= UART_BREAK;
 80101dc:	f040 0008 	orr.w	r0, r0, #8
	if (err & UART_BREAK) {
 80101e0:	f010 0f08 	tst.w	r0, #8
 80101e4:	d002      	beq.n	80101ec <uart_stm32_err_check+0x3e>
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 80101e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80101ea:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 80101ec:	f010 0f01 	tst.w	r0, #1
 80101f0:	d001      	beq.n	80101f6 <uart_stm32_err_check+0x48>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80101f2:	2208      	movs	r2, #8
 80101f4:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 80101f6:	f010 0f02 	tst.w	r0, #2
 80101fa:	d001      	beq.n	8010200 <uart_stm32_err_check+0x52>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 80101fc:	2201      	movs	r2, #1
 80101fe:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8010200:	f010 0f04 	tst.w	r0, #4
 8010204:	d001      	beq.n	801020a <uart_stm32_err_check+0x5c>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8010206:	2202      	movs	r2, #2
 8010208:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 801020a:	2204      	movs	r2, #4
 801020c:	621a      	str	r2, [r3, #32]
}
 801020e:	4770      	bx	lr

08010210 <uart_stm32_async_callback_set>:
	struct uart_stm32_data *data = dev->data;
 8010210:	6903      	ldr	r3, [r0, #16]
	data->async_cb = callback;
 8010212:	60d9      	str	r1, [r3, #12]
	data->async_user_data = user_data;
 8010214:	611a      	str	r2, [r3, #16]
}
 8010216:	2000      	movs	r0, #0
 8010218:	4770      	bx	lr

0801021a <uart_stm32_dma_tx_cb>:
{
 801021a:	b530      	push	{r4, r5, lr}
 801021c:	b083      	sub	sp, #12
	struct uart_stm32_data *data = uart_dev->data;
 801021e:	690c      	ldr	r4, [r1, #16]
	__asm__ volatile(
 8010220:	f04f 0310 	mov.w	r3, #16
 8010224:	f3ef 8511 	mrs	r5, BASEPRI
 8010228:	f383 8812 	msr	BASEPRI_MAX, r3
 801022c:	f3bf 8f6f 	isb	sy
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8010230:	684b      	ldr	r3, [r1, #4]
 8010232:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 8010234:	6893      	ldr	r3, [r2, #8]
 8010236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801023a:	6093      	str	r3, [r2, #8]
	(void)k_work_cancel_delayable(&data->dma_tx.timeout_work);
 801023c:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8010240:	f000 fa6a 	bl	8010718 <k_work_cancel_delayable>
	if (!dma_get_status(data->dma_tx.dma_dev,
 8010244:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8010248:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	const struct dma_driver_api *api =
 801024c:	6883      	ldr	r3, [r0, #8]
	if (api->get_status) {
 801024e:	699b      	ldr	r3, [r3, #24]
 8010250:	b143      	cbz	r3, 8010264 <uart_stm32_dma_tx_cb+0x4a>
		return api->get_status(dev, channel, stat);
 8010252:	466a      	mov	r2, sp
 8010254:	4798      	blx	r3
 8010256:	b928      	cbnz	r0, 8010264 <uart_stm32_dma_tx_cb+0x4a>
		data->dma_tx.counter = data->dma_tx.buffer_length -
 8010258:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
					stat.pending_length;
 801025c:	9a01      	ldr	r2, [sp, #4]
		data->dma_tx.counter = data->dma_tx.buffer_length -
 801025e:	1a9b      	subs	r3, r3, r2
 8010260:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	data->dma_tx.buffer_length = 0;
 8010264:	2300      	movs	r3, #0
 8010266:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	__asm__ volatile(
 801026a:	f385 8811 	msr	BASEPRI, r5
 801026e:	f3bf 8f6f 	isb	sy
}
 8010272:	b003      	add	sp, #12
 8010274:	bd30      	pop	{r4, r5, pc}

08010276 <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 8010276:	b508      	push	{r3, lr}
 8010278:	2200      	movs	r2, #0
 801027a:	4611      	mov	r1, r2
 801027c:	2025      	movs	r0, #37	; 0x25
 801027e:	f7f3 fed3 	bl	8004028 <z_arm_irq_priority_set>
 8010282:	2025      	movs	r0, #37	; 0x25
 8010284:	f7f3 fea0 	bl	8003fc8 <arch_irq_enable>
 8010288:	bd08      	pop	{r3, pc}

0801028a <uart_stm32_irq_config_func_1>:
 801028a:	b508      	push	{r3, lr}
 801028c:	2200      	movs	r2, #0
 801028e:	4611      	mov	r1, r2
 8010290:	2026      	movs	r0, #38	; 0x26
 8010292:	f7f3 fec9 	bl	8004028 <z_arm_irq_priority_set>
 8010296:	2026      	movs	r0, #38	; 0x26
 8010298:	f7f3 fe96 	bl	8003fc8 <arch_irq_enable>
 801029c:	bd08      	pop	{r3, pc}

0801029e <uart_stm32_dma_rx_flush>:
{
 801029e:	b510      	push	{r4, lr}
 80102a0:	b082      	sub	sp, #8
	struct uart_stm32_data *data = dev->data;
 80102a2:	6904      	ldr	r4, [r0, #16]
	if (dma_get_status(data->dma_rx.dma_dev,
 80102a4:	69a0      	ldr	r0, [r4, #24]
 80102a6:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 80102a8:	6883      	ldr	r3, [r0, #8]
	if (api->get_status) {
 80102aa:	699b      	ldr	r3, [r3, #24]
 80102ac:	b143      	cbz	r3, 80102c0 <uart_stm32_dma_rx_flush+0x22>
		return api->get_status(dev, channel, stat);
 80102ae:	466a      	mov	r2, sp
 80102b0:	4798      	blx	r3
 80102b2:	b928      	cbnz	r0, 80102c0 <uart_stm32_dma_rx_flush+0x22>
		size_t rx_rcv_len = data->dma_rx.buffer_length -
 80102b4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
					stat.pending_length;
 80102b6:	9a01      	ldr	r2, [sp, #4]
		size_t rx_rcv_len = data->dma_rx.buffer_length -
 80102b8:	1a9b      	subs	r3, r3, r2
		if (rx_rcv_len > data->dma_rx.offset) {
 80102ba:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80102bc:	429a      	cmp	r2, r3
 80102be:	d301      	bcc.n	80102c4 <uart_stm32_dma_rx_flush+0x26>
}
 80102c0:	b002      	add	sp, #8
 80102c2:	bd10      	pop	{r4, pc}
			data->dma_rx.counter = rx_rcv_len;
 80102c4:	6723      	str	r3, [r4, #112]	; 0x70
			async_evt_rx_rdy(data);
 80102c6:	4620      	mov	r0, r4
 80102c8:	f7f9 fc66 	bl	8009b98 <async_evt_rx_rdy>
}
 80102cc:	e7f8      	b.n	80102c0 <uart_stm32_dma_rx_flush+0x22>

080102ce <entropy_stm32_got_error>:
  return ((READ_BIT(RNGx->SR, RNG_SR_CECS) == (RNG_SR_CECS)) ? 1UL : 0UL);
 80102ce:	6843      	ldr	r3, [r0, #4]
 80102d0:	f013 0f02 	tst.w	r3, #2
 80102d4:	d105      	bne.n	80102e2 <entropy_stm32_got_error+0x14>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 80102d6:	6843      	ldr	r3, [r0, #4]
 80102d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80102dc:	d103      	bne.n	80102e6 <entropy_stm32_got_error+0x18>
	return 0;
 80102de:	2000      	movs	r0, #0
 80102e0:	4770      	bx	lr
		return 1;
 80102e2:	2001      	movs	r0, #1
 80102e4:	4770      	bx	lr
		return 1;
 80102e6:	2001      	movs	r0, #1
}
 80102e8:	4770      	bx	lr

080102ea <recover_seed_error>:
  WRITE_REG(RNGx->SR, ~RNG_SR_SEIS);
 80102ea:	f06f 0340 	mvn.w	r3, #64	; 0x40
 80102ee:	6043      	str	r3, [r0, #4]
	for (int i = 0; i < 12; ++i) {
 80102f0:	2300      	movs	r3, #0
 80102f2:	e001      	b.n	80102f8 <recover_seed_error+0xe>
  return (uint32_t)(READ_REG(RNGx->DR));
 80102f4:	6882      	ldr	r2, [r0, #8]
 80102f6:	3301      	adds	r3, #1
 80102f8:	2b0b      	cmp	r3, #11
 80102fa:	ddfb      	ble.n	80102f4 <recover_seed_error+0xa>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 80102fc:	6843      	ldr	r3, [r0, #4]
 80102fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010302:	d101      	bne.n	8010308 <recover_seed_error+0x1e>
	return 0;
 8010304:	2000      	movs	r0, #0
 8010306:	4770      	bx	lr
		return -EIO;
 8010308:	f06f 0004 	mvn.w	r0, #4
}
 801030c:	4770      	bx	lr

0801030e <rng_pool_put>:
	uint8_t first = rngp->first_read;
 801030e:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
 8010310:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
 8010312:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
 8010316:	1a9a      	subs	r2, r3, r2
 8010318:	ea3c 0202 	bics.w	r2, ip, r2
 801031c:	d008      	beq.n	8010330 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
 801031e:	18c2      	adds	r2, r0, r3
 8010320:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
 8010322:	3301      	adds	r3, #1
 8010324:	b25b      	sxtb	r3, r3
 8010326:	ea03 030c 	and.w	r3, r3, ip
 801032a:	7083      	strb	r3, [r0, #2]
	return 0;
 801032c:	2000      	movs	r0, #0
 801032e:	4770      	bx	lr
		return -ENOBUFS;
 8010330:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 8010334:	4770      	bx	lr

08010336 <rng_pool_init>:
	rngp->first_alloc = 0U;
 8010336:	2300      	movs	r3, #0
 8010338:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
 801033a:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
 801033c:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
 801033e:	3901      	subs	r1, #1
 8010340:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
 8010342:	7102      	strb	r2, [r0, #4]
}
 8010344:	4770      	bx	lr

08010346 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8010346:	b410      	push	{r4}
	*state = &config->states[0];
 8010348:	6803      	ldr	r3, [r0, #0]
 801034a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 801034c:	e001      	b.n	8010352 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
 801034e:	3408      	adds	r4, #8
 8010350:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8010352:	6814      	ldr	r4, [r2, #0]
 8010354:	7903      	ldrb	r3, [r0, #4]
 8010356:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801035a:	3b01      	subs	r3, #1
 801035c:	f8d0 c000 	ldr.w	ip, [r0]
 8010360:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8010364:	429c      	cmp	r4, r3
 8010366:	d804      	bhi.n	8010372 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
 8010368:	7963      	ldrb	r3, [r4, #5]
 801036a:	428b      	cmp	r3, r1
 801036c:	d1ef      	bne.n	801034e <pinctrl_lookup_state+0x8>
			return 0;
 801036e:	2000      	movs	r0, #0
 8010370:	e001      	b.n	8010376 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
 8010372:	f06f 0001 	mvn.w	r0, #1
}
 8010376:	bc10      	pop	{r4}
 8010378:	4770      	bx	lr

0801037a <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 801037a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801037c:	4606      	mov	r6, r0
 801037e:	460f      	mov	r7, r1
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8010380:	2400      	movs	r4, #0
	uint32_t func = 0;
 8010382:	4625      	mov	r5, r4
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8010384:	e012      	b.n	80103ac <pinctrl_configure_pins+0x32>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8010386:	f002 031f 	and.w	r3, r2, #31
 801038a:	2b10      	cmp	r3, #16
 801038c:	d01b      	beq.n	80103c6 <pinctrl_configure_pins+0x4c>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 801038e:	0a53      	lsrs	r3, r2, #9
 8010390:	011b      	lsls	r3, r3, #4
 8010392:	b2db      	uxtb	r3, r3
 8010394:	f3c2 1043 	ubfx	r0, r2, #5, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 8010398:	f002 021f 	and.w	r2, r2, #31
 801039c:	4629      	mov	r1, r5
 801039e:	4318      	orrs	r0, r3
 80103a0:	f7fa fbd2 	bl	800ab48 <stm32_pin_configure>
		if (ret < 0) {
 80103a4:	2800      	cmp	r0, #0
 80103a6:	db11      	blt.n	80103cc <pinctrl_configure_pins+0x52>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 80103a8:	3401      	adds	r4, #1
 80103aa:	b2e4      	uxtb	r4, r4
 80103ac:	42bc      	cmp	r4, r7
 80103ae:	d20c      	bcs.n	80103ca <pinctrl_configure_pins+0x50>
		mux = pins[i].pinmux;
 80103b0:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 80103b4:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 80103b8:	f012 0f10 	tst.w	r2, #16
 80103bc:	d1e3      	bne.n	8010386 <pinctrl_configure_pins+0xc>
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 80103be:	685d      	ldr	r5, [r3, #4]
 80103c0:	f045 0520 	orr.w	r5, r5, #32
 80103c4:	e7e3      	b.n	801038e <pinctrl_configure_pins+0x14>
			func = STM32_MODER_ANALOG_MODE;
 80103c6:	2530      	movs	r5, #48	; 0x30
 80103c8:	e7e1      	b.n	801038e <pinctrl_configure_pins+0x14>
			return ret;
		}
	}

	return 0;
 80103ca:	2000      	movs	r0, #0
}
 80103cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080103ce <LL_DMA_StructInit>:
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 80103ce:	2300      	movs	r3, #0
 80103d0:	6003      	str	r3, [r0, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 80103d2:	6043      	str	r3, [r0, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80103d4:	6083      	str	r3, [r0, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 80103d6:	60c3      	str	r3, [r0, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 80103d8:	6103      	str	r3, [r0, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 80103da:	6143      	str	r3, [r0, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80103dc:	6183      	str	r3, [r0, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80103de:	61c3      	str	r3, [r0, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 80103e0:	6203      	str	r3, [r0, #32]
#if defined(DMAMUX1)
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
#else
  DMA_InitStruct->PeriphRequest          = LL_DMA_REQUEST_0;
 80103e2:	6243      	str	r3, [r0, #36]	; 0x24
#endif /* DMAMUX1 */
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 80103e4:	6283      	str	r3, [r0, #40]	; 0x28
}
 80103e6:	4770      	bx	lr

080103e8 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80103e8:	680a      	ldr	r2, [r1, #0]
 80103ea:	0912      	lsrs	r2, r2, #4
 80103ec:	3201      	adds	r2, #1
 80103ee:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80103f2:	684b      	ldr	r3, [r1, #4]
 80103f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103f8:	fb03 f000 	mul.w	r0, r3, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 80103fc:	688b      	ldr	r3, [r1, #8]
 80103fe:	0e5b      	lsrs	r3, r3, #25
 8010400:	3301      	adds	r3, #1
 8010402:	005b      	lsls	r3, r3, #1
}
 8010404:	fbb0 f0f3 	udiv	r0, r0, r3
 8010408:	4770      	bx	lr

0801040a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 801040a:	b148      	cbz	r0, 8010420 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 801040c:	68c3      	ldr	r3, [r0, #12]
 801040e:	8818      	ldrh	r0, [r3, #0]
 8010410:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8010414:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8010418:	bf14      	ite	ne
 801041a:	2000      	movne	r0, #0
 801041c:	2001      	moveq	r0, #1
 801041e:	4770      	bx	lr
		return false;
 8010420:	2000      	movs	r0, #0
}
 8010422:	4770      	bx	lr

08010424 <z_log_msg2_runtime_create>:
{
 8010424:	b510      	push	{r4, lr}
 8010426:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8010428:	ac0a      	add	r4, sp, #40	; 0x28
 801042a:	9405      	str	r4, [sp, #20]
 801042c:	9402      	str	r4, [sp, #8]
 801042e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010430:	9401      	str	r4, [sp, #4]
 8010432:	9c08      	ldr	r4, [sp, #32]
 8010434:	9400      	str	r4, [sp, #0]
 8010436:	f7fe fcb7 	bl	800eda8 <z_impl_z_log_msg2_runtime_vcreate>
}
 801043a:	b006      	add	sp, #24
 801043c:	bd10      	pop	{r4, pc}

0801043e <arch_system_halt>:
	__asm__ volatile(
 801043e:	f04f 0210 	mov.w	r2, #16
 8010442:	f3ef 8311 	mrs	r3, BASEPRI
 8010446:	f382 8812 	msr	BASEPRI_MAX, r2
 801044a:	f3bf 8f6f 	isb	sy
	for (;;) {
 801044e:	e7fe      	b.n	801044e <arch_system_halt+0x10>

08010450 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8010450:	6902      	ldr	r2, [r0, #16]
 8010452:	6943      	ldr	r3, [r0, #20]
 8010454:	431a      	orrs	r2, r3
 8010456:	f012 0203 	ands.w	r2, r2, #3
 801045a:	d10d      	bne.n	8010478 <create_free_list+0x28>
	slab->free_list = NULL;
 801045c:	2100      	movs	r1, #0
 801045e:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 8010460:	e005      	b.n	801046e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 8010462:	6981      	ldr	r1, [r0, #24]
 8010464:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 8010466:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
 8010468:	6901      	ldr	r1, [r0, #16]
 801046a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 801046c:	3201      	adds	r2, #1
 801046e:	68c1      	ldr	r1, [r0, #12]
 8010470:	4291      	cmp	r1, r2
 8010472:	d8f6      	bhi.n	8010462 <create_free_list+0x12>
	return 0;
 8010474:	2000      	movs	r0, #0
 8010476:	4770      	bx	lr
		return -EINVAL;
 8010478:	f06f 0015 	mvn.w	r0, #21
}
 801047c:	4770      	bx	lr

0801047e <setup_thread_stack>:
{
 801047e:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8010480:	3207      	adds	r2, #7
 8010482:	f022 0207 	bic.w	r2, r2, #7
 8010486:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 801048a:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 801048e:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
 8010490:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
 8010492:	2200      	movs	r2, #0
 8010494:	6702      	str	r2, [r0, #112]	; 0x70
}
 8010496:	18c8      	adds	r0, r1, r3
 8010498:	bc10      	pop	{r4}
 801049a:	4770      	bx	lr

0801049c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801049c:	f3ef 8005 	mrs	r0, IPSR
}
 80104a0:	3800      	subs	r0, #0
 80104a2:	bf18      	it	ne
 80104a4:	2001      	movne	r0, #1
 80104a6:	4770      	bx	lr

080104a8 <z_impl_k_thread_name_set>:
}
 80104a8:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80104ac:	4770      	bx	lr

080104ae <k_thread_name_get>:
}
 80104ae:	2000      	movs	r0, #0
 80104b0:	4770      	bx	lr

080104b2 <z_impl_k_thread_start>:
{
 80104b2:	b508      	push	{r3, lr}
	z_sched_start(thread);
 80104b4:	f7fb fb96 	bl	800bbe4 <z_sched_start>
}
 80104b8:	bd08      	pop	{r3, pc}

080104ba <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 80104ba:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 80104bc:	2400      	movs	r4, #0
 80104be:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 80104c0:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 80104c2:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 80104c4:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 80104c6:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 80104c8:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 80104ca:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 80104cc:	bc10      	pop	{r4}
 80104ce:	4770      	bx	lr

080104d0 <z_impl_k_thread_create>:
{
 80104d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104d2:	b087      	sub	sp, #28
 80104d4:	4604      	mov	r4, r0
 80104d6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80104d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80104da:	2700      	movs	r7, #0
 80104dc:	9705      	str	r7, [sp, #20]
 80104de:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80104e0:	9704      	str	r7, [sp, #16]
 80104e2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80104e4:	9703      	str	r7, [sp, #12]
 80104e6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80104e8:	9702      	str	r7, [sp, #8]
 80104ea:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80104ec:	9701      	str	r7, [sp, #4]
 80104ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80104f0:	9700      	str	r7, [sp, #0]
 80104f2:	f7fa fed5 	bl	800b2a0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 80104f6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80104fa:	bf08      	it	eq
 80104fc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 8010500:	d102      	bne.n	8010508 <z_impl_k_thread_create+0x38>
}
 8010502:	4620      	mov	r0, r4
 8010504:	b007      	add	sp, #28
 8010506:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 8010508:	4632      	mov	r2, r6
 801050a:	462b      	mov	r3, r5
 801050c:	4620      	mov	r0, r4
 801050e:	f7fa feb9 	bl	800b284 <schedule_new_thread>
 8010512:	e7f6      	b.n	8010502 <z_impl_k_thread_create+0x32>

08010514 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8010514:	b508      	push	{r3, lr}
 8010516:	f04f 0210 	mov.w	r2, #16
 801051a:	f3ef 8311 	mrs	r3, BASEPRI
 801051e:	f382 8812 	msr	BASEPRI_MAX, r2
 8010522:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8010526:	f7f3 fc53 	bl	8003dd0 <arch_cpu_idle>
 801052a:	e7f4      	b.n	8010516 <idle+0x2>

0801052c <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 801052c:	4288      	cmp	r0, r1
 801052e:	da00      	bge.n	8010532 <new_prio_for_inheritance+0x6>
 8010530:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 8010532:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 8010536:	db01      	blt.n	801053c <new_prio_for_inheritance+0x10>
 8010538:	4608      	mov	r0, r1
 801053a:	4770      	bx	lr
 801053c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 8010540:	4770      	bx	lr

08010542 <adjust_owner_prio>:
{
 8010542:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 8010544:	6880      	ldr	r0, [r0, #8]
 8010546:	f990 300e 	ldrsb.w	r3, [r0, #14]
 801054a:	428b      	cmp	r3, r1
 801054c:	d101      	bne.n	8010552 <adjust_owner_prio+0x10>
	return false;
 801054e:	2000      	movs	r0, #0
}
 8010550:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 8010552:	f7fb fb95 	bl	800bc80 <z_set_prio>
 8010556:	e7fb      	b.n	8010550 <adjust_owner_prio+0xe>

08010558 <z_impl_k_mutex_init>:
{
 8010558:	4603      	mov	r3, r0
	mutex->owner = NULL;
 801055a:	2000      	movs	r0, #0
 801055c:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 801055e:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 8010560:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 8010562:	605b      	str	r3, [r3, #4]
}
 8010564:	4770      	bx	lr

08010566 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8010566:	b15a      	cbz	r2, 8010580 <z_impl_k_sem_init+0x1a>
 8010568:	428a      	cmp	r2, r1
 801056a:	d30c      	bcc.n	8010586 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 801056c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 801056e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 8010570:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 8010572:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 8010574:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 8010578:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 801057a:	6143      	str	r3, [r0, #20]
	return 0;
 801057c:	2000      	movs	r0, #0
 801057e:	4770      	bx	lr
		return -EINVAL;
 8010580:	f06f 0015 	mvn.w	r0, #21
 8010584:	4770      	bx	lr
 8010586:	f06f 0015 	mvn.w	r0, #21
}
 801058a:	4770      	bx	lr

0801058c <cancel_async_locked>:
{
 801058c:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
 801058e:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8010590:	f012 0f02 	tst.w	r2, #2
 8010594:	d009      	beq.n	80105aa <cancel_async_locked+0x1e>
	return *flagp;
 8010596:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
 8010598:	f012 000f 	ands.w	r0, r2, #15
 801059c:	d004      	beq.n	80105a8 <cancel_async_locked+0x1c>
	*flagp |= BIT(bit);
 801059e:	f042 0202 	orr.w	r2, r2, #2
 80105a2:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
 80105a4:	f002 000f 	and.w	r0, r2, #15
}
 80105a8:	4770      	bx	lr
		queue_remove_locked(work->queue, work);
 80105aa:	6880      	ldr	r0, [r0, #8]
	*flagp &= ~BIT(bit);
 80105ac:	f022 0104 	bic.w	r1, r2, #4
 80105b0:	60d9      	str	r1, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
 80105b2:	f012 0f04 	tst.w	r2, #4
 80105b6:	d0ee      	beq.n	8010596 <cancel_async_locked+0xa>
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
 80105b8:	f100 0c80 	add.w	ip, r0, #128	; 0x80
	return list->head;
 80105bc:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80105c0:	2100      	movs	r1, #0
 80105c2:	2a00      	cmp	r2, #0
 80105c4:	d0e7      	beq.n	8010596 <cancel_async_locked+0xa>
 80105c6:	4293      	cmp	r3, r2
 80105c8:	d002      	beq.n	80105d0 <cancel_async_locked+0x44>
 80105ca:	4611      	mov	r1, r2
 80105cc:	6812      	ldr	r2, [r2, #0]
 80105ce:	e7f8      	b.n	80105c2 <cancel_async_locked+0x36>
Z_GENLIST_REMOVE(slist, snode)
 80105d0:	b141      	cbz	r1, 80105e4 <cancel_async_locked+0x58>
	return node->next;
 80105d2:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 80105d4:	600a      	str	r2, [r1, #0]
	return list->tail;
 80105d6:	f8dc 2004 	ldr.w	r2, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 80105da:	4293      	cmp	r3, r2
 80105dc:	d00c      	beq.n	80105f8 <cancel_async_locked+0x6c>
	parent->next = child;
 80105de:	2200      	movs	r2, #0
 80105e0:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 80105e2:	e7d8      	b.n	8010596 <cancel_async_locked+0xa>
	return node->next;
 80105e4:	681a      	ldr	r2, [r3, #0]
	list->head = node;
 80105e6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	return list->tail;
 80105ea:	f8dc 1004 	ldr.w	r1, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 80105ee:	428b      	cmp	r3, r1
 80105f0:	d1f5      	bne.n	80105de <cancel_async_locked+0x52>
	list->tail = node;
 80105f2:	f8cc 2004 	str.w	r2, [ip, #4]
}
 80105f6:	e7f2      	b.n	80105de <cancel_async_locked+0x52>
	list->tail = node;
 80105f8:	f8cc 1004 	str.w	r1, [ip, #4]
}
 80105fc:	e7ef      	b.n	80105de <cancel_async_locked+0x52>

080105fe <work_timeout>:
{
 80105fe:	b510      	push	{r4, lr}
 8010600:	b082      	sub	sp, #8
 8010602:	4603      	mov	r3, r0
 8010604:	f04f 0210 	mov.w	r2, #16
 8010608:	f3ef 8411 	mrs	r4, BASEPRI
 801060c:	f382 8812 	msr	BASEPRI_MAX, r2
 8010610:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
 8010614:	2200      	movs	r2, #0
 8010616:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
 8010618:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
 801061c:	f022 0108 	bic.w	r1, r2, #8
 8010620:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 8010624:	f012 0f08 	tst.w	r2, #8
 8010628:	d105      	bne.n	8010636 <work_timeout+0x38>
	__asm__ volatile(
 801062a:	f384 8811 	msr	BASEPRI, r4
 801062e:	f3bf 8f6f 	isb	sy
}
 8010632:	b002      	add	sp, #8
 8010634:	bd10      	pop	{r4, pc}
 8010636:	3810      	subs	r0, #16
		queue = dw->queue;
 8010638:	699b      	ldr	r3, [r3, #24]
 801063a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 801063c:	a901      	add	r1, sp, #4
 801063e:	f7fa ffbd 	bl	800b5bc <submit_to_queue_locked>
 8010642:	e7f2      	b.n	801062a <work_timeout+0x2c>

08010644 <cancel_delayable_async_locked>:
{
 8010644:	b510      	push	{r4, lr}
 8010646:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
 8010648:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
 801064a:	f023 0208 	bic.w	r2, r3, #8
 801064e:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 8010650:	f013 0f08 	tst.w	r3, #8
 8010654:	d103      	bne.n	801065e <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
 8010656:	4620      	mov	r0, r4
 8010658:	f7ff ff98 	bl	801058c <cancel_async_locked>
}
 801065c:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
 801065e:	3010      	adds	r0, #16
 8010660:	f000 fa24 	bl	8010aac <z_abort_timeout>
		ret = true;
 8010664:	e7f7      	b.n	8010656 <cancel_delayable_async_locked+0x12>

08010666 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8010666:	2300      	movs	r3, #0
 8010668:	6003      	str	r3, [r0, #0]
 801066a:	6043      	str	r3, [r0, #4]
 801066c:	6083      	str	r3, [r0, #8]
 801066e:	60c3      	str	r3, [r0, #12]
 8010670:	6041      	str	r1, [r0, #4]
}
 8010672:	4770      	bx	lr

08010674 <k_work_submit_to_queue>:
{
 8010674:	b530      	push	{r4, r5, lr}
 8010676:	b083      	sub	sp, #12
 8010678:	9001      	str	r0, [sp, #4]
 801067a:	4608      	mov	r0, r1
	__asm__ volatile(
 801067c:	f04f 0310 	mov.w	r3, #16
 8010680:	f3ef 8511 	mrs	r5, BASEPRI
 8010684:	f383 8812 	msr	BASEPRI_MAX, r3
 8010688:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 801068c:	a901      	add	r1, sp, #4
 801068e:	f7fa ff95 	bl	800b5bc <submit_to_queue_locked>
 8010692:	4604      	mov	r4, r0
	__asm__ volatile(
 8010694:	f385 8811 	msr	BASEPRI, r5
 8010698:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 801069c:	2800      	cmp	r0, #0
 801069e:	dc02      	bgt.n	80106a6 <k_work_submit_to_queue+0x32>
}
 80106a0:	4620      	mov	r0, r4
 80106a2:	b003      	add	sp, #12
 80106a4:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 80106a6:	f7fb fcb9 	bl	800c01c <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 80106aa:	2800      	cmp	r0, #0
 80106ac:	d0f8      	beq.n	80106a0 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 80106ae:	f7fb fc07 	bl	800bec0 <z_impl_k_yield>
	return ret;
 80106b2:	e7f5      	b.n	80106a0 <k_work_submit_to_queue+0x2c>

080106b4 <k_work_init_delayable>:
{
 80106b4:	b538      	push	{r3, r4, r5, lr}
 80106b6:	4604      	mov	r4, r0
 80106b8:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 80106ba:	2230      	movs	r2, #48	; 0x30
 80106bc:	2100      	movs	r1, #0
 80106be:	f000 fb12 	bl	8010ce6 <memset>
 80106c2:	6065      	str	r5, [r4, #4]
 80106c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80106c8:	60e3      	str	r3, [r4, #12]
}
 80106ca:	bd38      	pop	{r3, r4, r5, pc}

080106cc <k_work_reschedule_for_queue>:
{
 80106cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106ce:	b083      	sub	sp, #12
 80106d0:	9001      	str	r0, [sp, #4]
 80106d2:	460c      	mov	r4, r1
 80106d4:	4616      	mov	r6, r2
 80106d6:	461d      	mov	r5, r3
	__asm__ volatile(
 80106d8:	f04f 0310 	mov.w	r3, #16
 80106dc:	f3ef 8711 	mrs	r7, BASEPRI
 80106e0:	f383 8812 	msr	BASEPRI_MAX, r3
 80106e4:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
 80106e8:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
 80106ea:	f023 0208 	bic.w	r2, r3, #8
 80106ee:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 80106f0:	f013 0f08 	tst.w	r3, #8
 80106f4:	d10b      	bne.n	801070e <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
 80106f6:	4632      	mov	r2, r6
 80106f8:	462b      	mov	r3, r5
 80106fa:	4621      	mov	r1, r4
 80106fc:	a801      	add	r0, sp, #4
 80106fe:	f7fa ffc9 	bl	800b694 <schedule_for_queue_locked>
	__asm__ volatile(
 8010702:	f387 8811 	msr	BASEPRI, r7
 8010706:	f3bf 8f6f 	isb	sy
}
 801070a:	b003      	add	sp, #12
 801070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
 801070e:	f101 0010 	add.w	r0, r1, #16
 8010712:	f000 f9cb 	bl	8010aac <z_abort_timeout>
		ret = true;
 8010716:	e7ee      	b.n	80106f6 <k_work_reschedule_for_queue+0x2a>

08010718 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
 8010718:	b510      	push	{r4, lr}
	__asm__ volatile(
 801071a:	f04f 0310 	mov.w	r3, #16
 801071e:	f3ef 8411 	mrs	r4, BASEPRI
 8010722:	f383 8812 	msr	BASEPRI_MAX, r3
 8010726:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
 801072a:	f7ff ff8b 	bl	8010644 <cancel_delayable_async_locked>
	__asm__ volatile(
 801072e:	f384 8811 	msr	BASEPRI, r4
 8010732:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
 8010736:	bd10      	pop	{r4, pc}

08010738 <thread_active_elsewhere>:
}
 8010738:	2000      	movs	r0, #0
 801073a:	4770      	bx	lr

0801073c <pended_on_thread>:
}
 801073c:	6880      	ldr	r0, [r0, #8]
 801073e:	4770      	bx	lr

08010740 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 8010740:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8010744:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 8010748:	4283      	cmp	r3, r0
 801074a:	d001      	beq.n	8010750 <z_sched_prio_cmp+0x10>
		return b2 - b1;
 801074c:	1ac0      	subs	r0, r0, r3
 801074e:	4770      	bx	lr
	return 0;
 8010750:	2000      	movs	r0, #0
}
 8010752:	4770      	bx	lr

08010754 <z_unpend_thread_no_timeout>:
{
 8010754:	b538      	push	{r3, r4, r5, lr}
 8010756:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8010758:	2300      	movs	r3, #0
	__asm__ volatile(
 801075a:	f04f 0210 	mov.w	r2, #16
 801075e:	f3ef 8511 	mrs	r5, BASEPRI
 8010762:	f382 8812 	msr	BASEPRI_MAX, r2
 8010766:	f3bf 8f6f 	isb	sy
 801076a:	e010      	b.n	801078e <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 801076c:	4620      	mov	r0, r4
 801076e:	f7ff ffe5 	bl	801073c <pended_on_thread>
 8010772:	4621      	mov	r1, r4
 8010774:	f000 f823 	bl	80107be <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8010778:	7b63      	ldrb	r3, [r4, #13]
 801077a:	f023 0302 	bic.w	r3, r3, #2
 801077e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8010780:	2300      	movs	r3, #0
 8010782:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8010784:	f385 8811 	msr	BASEPRI, r5
 8010788:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801078c:	2301      	movs	r3, #1
 801078e:	2b00      	cmp	r3, #0
 8010790:	d0ec      	beq.n	801076c <z_unpend_thread_no_timeout+0x18>
}
 8010792:	bd38      	pop	{r3, r4, r5, pc}

08010794 <z_reschedule_irqlock>:
{
 8010794:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8010796:	4603      	mov	r3, r0
 8010798:	b920      	cbnz	r0, 80107a4 <z_reschedule_irqlock+0x10>
 801079a:	f3ef 8205 	mrs	r2, IPSR
 801079e:	b942      	cbnz	r2, 80107b2 <z_reschedule_irqlock+0x1e>
 80107a0:	2201      	movs	r2, #1
 80107a2:	e000      	b.n	80107a6 <z_reschedule_irqlock+0x12>
 80107a4:	2200      	movs	r2, #0
	if (resched(key)) {
 80107a6:	b932      	cbnz	r2, 80107b6 <z_reschedule_irqlock+0x22>
 80107a8:	f383 8811 	msr	BASEPRI, r3
 80107ac:	f3bf 8f6f 	isb	sy
}
 80107b0:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80107b2:	2200      	movs	r2, #0
 80107b4:	e7f7      	b.n	80107a6 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7f3 fc74 	bl	80040a4 <arch_swap>
	return ret;
 80107bc:	e7f8      	b.n	80107b0 <z_reschedule_irqlock+0x1c>

080107be <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
 80107be:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 80107c0:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
 80107c2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80107c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80107c6:	2300      	movs	r3, #0
 80107c8:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 80107ca:	604b      	str	r3, [r1, #4]
}
 80107cc:	4770      	bx	lr

080107ce <z_unpend_thread>:
{
 80107ce:	b538      	push	{r3, r4, r5, lr}
 80107d0:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 80107d2:	2300      	movs	r3, #0
	__asm__ volatile(
 80107d4:	f04f 0210 	mov.w	r2, #16
 80107d8:	f3ef 8511 	mrs	r5, BASEPRI
 80107dc:	f382 8812 	msr	BASEPRI_MAX, r2
 80107e0:	f3bf 8f6f 	isb	sy
 80107e4:	e010      	b.n	8010808 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80107e6:	4620      	mov	r0, r4
 80107e8:	f7ff ffa8 	bl	801073c <pended_on_thread>
 80107ec:	4621      	mov	r1, r4
 80107ee:	f7ff ffe6 	bl	80107be <z_priq_dumb_remove>
 80107f2:	7b63      	ldrb	r3, [r4, #13]
 80107f4:	f023 0302 	bic.w	r3, r3, #2
 80107f8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80107fa:	2300      	movs	r3, #0
 80107fc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 80107fe:	f385 8811 	msr	BASEPRI, r5
 8010802:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8010806:	2301      	movs	r3, #1
 8010808:	2b00      	cmp	r3, #0
 801080a:	d0ec      	beq.n	80107e6 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
 801080c:	f104 0018 	add.w	r0, r4, #24
 8010810:	f000 f94c 	bl	8010aac <z_abort_timeout>
}
 8010814:	bd38      	pop	{r3, r4, r5, pc}

08010816 <z_priq_dumb_best>:
{
 8010816:	4603      	mov	r3, r0
	return list->head == list;
 8010818:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801081a:	4283      	cmp	r3, r0
 801081c:	d000      	beq.n	8010820 <z_priq_dumb_best+0xa>
}
 801081e:	4770      	bx	lr
	struct k_thread *thread = NULL;
 8010820:	2000      	movs	r0, #0
	return thread;
 8010822:	e7fc      	b.n	801081e <z_priq_dumb_best+0x8>

08010824 <z_ready_thread>:
{
 8010824:	b538      	push	{r3, r4, r5, lr}
 8010826:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8010828:	2300      	movs	r3, #0
	__asm__ volatile(
 801082a:	f04f 0210 	mov.w	r2, #16
 801082e:	f3ef 8511 	mrs	r5, BASEPRI
 8010832:	f382 8812 	msr	BASEPRI_MAX, r2
 8010836:	f3bf 8f6f 	isb	sy
 801083a:	e004      	b.n	8010846 <z_ready_thread+0x22>
	__asm__ volatile(
 801083c:	f385 8811 	msr	BASEPRI, r5
 8010840:	f3bf 8f6f 	isb	sy
 8010844:	2301      	movs	r3, #1
 8010846:	b943      	cbnz	r3, 801085a <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 8010848:	4620      	mov	r0, r4
 801084a:	f7ff ff75 	bl	8010738 <thread_active_elsewhere>
 801084e:	2800      	cmp	r0, #0
 8010850:	d1f4      	bne.n	801083c <z_ready_thread+0x18>
			ready_thread(thread);
 8010852:	4620      	mov	r0, r4
 8010854:	f7fb f986 	bl	800bb64 <ready_thread>
 8010858:	e7f0      	b.n	801083c <z_ready_thread+0x18>
}
 801085a:	bd38      	pop	{r3, r4, r5, pc}

0801085c <z_thread_timeout>:
{
 801085c:	b570      	push	{r4, r5, r6, lr}
 801085e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 8010860:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 8010864:	2300      	movs	r3, #0
	__asm__ volatile(
 8010866:	f04f 0210 	mov.w	r2, #16
 801086a:	f3ef 8611 	mrs	r6, BASEPRI
 801086e:	f382 8812 	msr	BASEPRI_MAX, r2
 8010872:	f3bf 8f6f 	isb	sy
 8010876:	e011      	b.n	801089c <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8010878:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 801087c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8010880:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8010884:	f023 0310 	bic.w	r3, r3, #16
 8010888:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 801088c:	4628      	mov	r0, r5
 801088e:	f7fb f969 	bl	800bb64 <ready_thread>
	__asm__ volatile(
 8010892:	f386 8811 	msr	BASEPRI, r6
 8010896:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801089a:	2301      	movs	r3, #1
 801089c:	b9ab      	cbnz	r3, 80108ca <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 801089e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 80108a2:	f013 0f28 	tst.w	r3, #40	; 0x28
 80108a6:	d1f4      	bne.n	8010892 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 80108a8:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d0e3      	beq.n	8010878 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80108b0:	4628      	mov	r0, r5
 80108b2:	f7ff ff43 	bl	801073c <pended_on_thread>
 80108b6:	4629      	mov	r1, r5
 80108b8:	f7ff ff81 	bl	80107be <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80108bc:	7b6b      	ldrb	r3, [r5, #13]
 80108be:	f023 0302 	bic.w	r3, r3, #2
 80108c2:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 80108c4:	2300      	movs	r3, #0
 80108c6:	60ab      	str	r3, [r5, #8]
}
 80108c8:	e7d6      	b.n	8010878 <z_thread_timeout+0x1c>
}
 80108ca:	bd70      	pop	{r4, r5, r6, pc}

080108cc <add_to_waitq_locked>:
{
 80108cc:	b570      	push	{r4, r5, r6, lr}
 80108ce:	4605      	mov	r5, r0
 80108d0:	460e      	mov	r6, r1
	unready_thread(thread);
 80108d2:	f7fb f9a5 	bl	800bc20 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 80108d6:	7b6b      	ldrb	r3, [r5, #13]
 80108d8:	f043 0302 	orr.w	r3, r3, #2
 80108dc:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 80108de:	b1b6      	cbz	r6, 801090e <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 80108e0:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 80108e2:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80108e4:	42a6      	cmp	r6, r4
 80108e6:	d019      	beq.n	801091c <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80108e8:	b164      	cbz	r4, 8010904 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80108ea:	4621      	mov	r1, r4
 80108ec:	4628      	mov	r0, r5
 80108ee:	f7ff ff27 	bl	8010740 <z_sched_prio_cmp>
 80108f2:	2800      	cmp	r0, #0
 80108f4:	dc0c      	bgt.n	8010910 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80108f6:	b12c      	cbz	r4, 8010904 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 80108f8:	6873      	ldr	r3, [r6, #4]
 80108fa:	429c      	cmp	r4, r3
 80108fc:	d002      	beq.n	8010904 <add_to_waitq_locked+0x38>
 80108fe:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8010900:	2c00      	cmp	r4, #0
 8010902:	d1f1      	bne.n	80108e8 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 8010904:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 8010906:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 8010908:	606b      	str	r3, [r5, #4]
	tail->next = node;
 801090a:	601d      	str	r5, [r3, #0]
	list->tail = node;
 801090c:	6075      	str	r5, [r6, #4]
}
 801090e:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 8010910:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 8010912:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8010914:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8010916:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8010918:	6065      	str	r5, [r4, #4]
}
 801091a:	e7f8      	b.n	801090e <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801091c:	2400      	movs	r4, #0
 801091e:	e7e3      	b.n	80108e8 <add_to_waitq_locked+0x1c>

08010920 <pend>:
{
 8010920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010924:	4605      	mov	r5, r0
 8010926:	460e      	mov	r6, r1
 8010928:	4691      	mov	r9, r2
 801092a:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 801092c:	2400      	movs	r4, #0
	__asm__ volatile(
 801092e:	f04f 0310 	mov.w	r3, #16
 8010932:	f3ef 8711 	mrs	r7, BASEPRI
 8010936:	f383 8812 	msr	BASEPRI_MAX, r3
 801093a:	f3bf 8f6f 	isb	sy
 801093e:	e008      	b.n	8010952 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 8010940:	4631      	mov	r1, r6
 8010942:	4628      	mov	r0, r5
 8010944:	f7ff ffc2 	bl	80108cc <add_to_waitq_locked>
	__asm__ volatile(
 8010948:	f387 8811 	msr	BASEPRI, r7
 801094c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8010950:	2401      	movs	r4, #1
 8010952:	2c00      	cmp	r4, #0
 8010954:	d0f4      	beq.n	8010940 <pend+0x20>
	add_thread_timeout(thread, timeout);
 8010956:	464a      	mov	r2, r9
 8010958:	4643      	mov	r3, r8
 801095a:	4628      	mov	r0, r5
 801095c:	f7fa ffb8 	bl	800b8d0 <add_thread_timeout>
}
 8010960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010964 <z_unpend1_no_timeout>:
{
 8010964:	b570      	push	{r4, r5, r6, lr}
 8010966:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 8010968:	2300      	movs	r3, #0
	__asm__ volatile(
 801096a:	f04f 0210 	mov.w	r2, #16
 801096e:	f3ef 8611 	mrs	r6, BASEPRI
 8010972:	f382 8812 	msr	BASEPRI_MAX, r2
 8010976:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 801097a:	461c      	mov	r4, r3
 801097c:	e004      	b.n	8010988 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 801097e:	f386 8811 	msr	BASEPRI, r6
 8010982:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8010986:	2301      	movs	r3, #1
 8010988:	b98b      	cbnz	r3, 80109ae <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 801098a:	4628      	mov	r0, r5
 801098c:	f7ff ff43 	bl	8010816 <z_priq_dumb_best>
		if (thread != NULL) {
 8010990:	4604      	mov	r4, r0
 8010992:	2800      	cmp	r0, #0
 8010994:	d0f3      	beq.n	801097e <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8010996:	f7ff fed1 	bl	801073c <pended_on_thread>
 801099a:	4621      	mov	r1, r4
 801099c:	f7ff ff0f 	bl	80107be <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80109a0:	7b63      	ldrb	r3, [r4, #13]
 80109a2:	f023 0302 	bic.w	r3, r3, #2
 80109a6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80109a8:	2300      	movs	r3, #0
 80109aa:	60a3      	str	r3, [r4, #8]
}
 80109ac:	e7e7      	b.n	801097e <z_unpend1_no_timeout+0x1a>
}
 80109ae:	4620      	mov	r0, r4
 80109b0:	bd70      	pop	{r4, r5, r6, pc}

080109b2 <z_unpend_first_thread>:
{
 80109b2:	b570      	push	{r4, r5, r6, lr}
 80109b4:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 80109b6:	2300      	movs	r3, #0
	__asm__ volatile(
 80109b8:	f04f 0210 	mov.w	r2, #16
 80109bc:	f3ef 8611 	mrs	r6, BASEPRI
 80109c0:	f382 8812 	msr	BASEPRI_MAX, r2
 80109c4:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 80109c8:	461c      	mov	r4, r3
 80109ca:	e004      	b.n	80109d6 <z_unpend_first_thread+0x24>
	__asm__ volatile(
 80109cc:	f386 8811 	msr	BASEPRI, r6
 80109d0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80109d4:	2301      	movs	r3, #1
 80109d6:	b9ab      	cbnz	r3, 8010a04 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 80109d8:	4628      	mov	r0, r5
 80109da:	f7ff ff1c 	bl	8010816 <z_priq_dumb_best>
		if (thread != NULL) {
 80109de:	4604      	mov	r4, r0
 80109e0:	2800      	cmp	r0, #0
 80109e2:	d0f3      	beq.n	80109cc <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80109e4:	f7ff feaa 	bl	801073c <pended_on_thread>
 80109e8:	4621      	mov	r1, r4
 80109ea:	f7ff fee8 	bl	80107be <z_priq_dumb_remove>
 80109ee:	7b63      	ldrb	r3, [r4, #13]
 80109f0:	f023 0302 	bic.w	r3, r3, #2
 80109f4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80109f6:	2300      	movs	r3, #0
 80109f8:	60a3      	str	r3, [r4, #8]
 80109fa:	f104 0018 	add.w	r0, r4, #24
 80109fe:	f000 f855 	bl	8010aac <z_abort_timeout>
 8010a02:	e7e3      	b.n	80109cc <z_unpend_first_thread+0x1a>
}
 8010a04:	4620      	mov	r0, r4
 8010a06:	bd70      	pop	{r4, r5, r6, pc}

08010a08 <init_ready_q>:
	sys_dlist_init(&rq->runq);
 8010a08:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
 8010a0a:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
 8010a0c:	6083      	str	r3, [r0, #8]
}
 8010a0e:	4770      	bx	lr

08010a10 <z_sched_wake>:
{
 8010a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a14:	4605      	mov	r5, r0
 8010a16:	4688      	mov	r8, r1
 8010a18:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 8010a1a:	2300      	movs	r3, #0
	__asm__ volatile(
 8010a1c:	f04f 0210 	mov.w	r2, #16
 8010a20:	f3ef 8611 	mrs	r6, BASEPRI
 8010a24:	f382 8812 	msr	BASEPRI_MAX, r2
 8010a28:	f3bf 8f6f 	isb	sy
	bool ret = false;
 8010a2c:	4699      	mov	r9, r3
 8010a2e:	e004      	b.n	8010a3a <z_sched_wake+0x2a>
	__asm__ volatile(
 8010a30:	f386 8811 	msr	BASEPRI, r6
 8010a34:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8010a38:	2301      	movs	r3, #1
 8010a3a:	b9eb      	cbnz	r3, 8010a78 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 8010a3c:	4628      	mov	r0, r5
 8010a3e:	f7ff feea 	bl	8010816 <z_priq_dumb_best>
		if (thread != NULL) {
 8010a42:	4604      	mov	r4, r0
 8010a44:	2800      	cmp	r0, #0
 8010a46:	d0f3      	beq.n	8010a30 <z_sched_wake+0x20>
 8010a48:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8010a4c:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8010a4e:	f7ff fe75 	bl	801073c <pended_on_thread>
 8010a52:	4621      	mov	r1, r4
 8010a54:	f7ff feb3 	bl	80107be <z_priq_dumb_remove>
 8010a58:	7b63      	ldrb	r3, [r4, #13]
 8010a5a:	f023 0302 	bic.w	r3, r3, #2
 8010a5e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8010a60:	2300      	movs	r3, #0
 8010a62:	60a3      	str	r3, [r4, #8]
 8010a64:	f104 0018 	add.w	r0, r4, #24
 8010a68:	f000 f820 	bl	8010aac <z_abort_timeout>
			ready_thread(thread);
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	f7fb f879 	bl	800bb64 <ready_thread>
			ret = true;
 8010a72:	f04f 0901 	mov.w	r9, #1
 8010a76:	e7db      	b.n	8010a30 <z_sched_wake+0x20>
}
 8010a78:	4648      	mov	r0, r9
 8010a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010a7e <remove_timeout>:
{
 8010a7e:	b510      	push	{r4, lr}
 8010a80:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 8010a82:	f7fb fb3b 	bl	800c0fc <next>
 8010a86:	b148      	cbz	r0, 8010a9c <remove_timeout+0x1e>
 8010a88:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 8010a8a:	6920      	ldr	r0, [r4, #16]
 8010a8c:	6961      	ldr	r1, [r4, #20]
 8010a8e:	6913      	ldr	r3, [r2, #16]
 8010a90:	181b      	adds	r3, r3, r0
 8010a92:	6950      	ldr	r0, [r2, #20]
 8010a94:	eb41 0100 	adc.w	r1, r1, r0
 8010a98:	6113      	str	r3, [r2, #16]
 8010a9a:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 8010a9c:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 8010a9e:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 8010aa0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8010aa2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 8010aa8:	6063      	str	r3, [r4, #4]
}
 8010aaa:	bd10      	pop	{r4, pc}

08010aac <z_abort_timeout>:
{
 8010aac:	b570      	push	{r4, r5, r6, lr}
 8010aae:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 8010ab0:	2300      	movs	r3, #0
	__asm__ volatile(
 8010ab2:	f04f 0210 	mov.w	r2, #16
 8010ab6:	f3ef 8611 	mrs	r6, BASEPRI
 8010aba:	f382 8812 	msr	BASEPRI_MAX, r2
 8010abe:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 8010ac2:	f06f 0015 	mvn.w	r0, #21
 8010ac6:	e004      	b.n	8010ad2 <z_abort_timeout+0x26>
	__asm__ volatile(
 8010ac8:	f386 8811 	msr	BASEPRI, r6
 8010acc:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	461d      	mov	r5, r3
 8010ad4:	b93b      	cbnz	r3, 8010ae6 <z_abort_timeout+0x3a>
	return node->next != NULL;
 8010ad6:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d0f5      	beq.n	8010ac8 <z_abort_timeout+0x1c>
			remove_timeout(to);
 8010adc:	4620      	mov	r0, r4
 8010ade:	f7ff ffce 	bl	8010a7e <remove_timeout>
			ret = 0;
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	e7f0      	b.n	8010ac8 <z_abort_timeout+0x1c>
}
 8010ae6:	bd70      	pop	{r4, r5, r6, pc}

08010ae8 <z_set_timeout_expiry>:
{
 8010ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aea:	4605      	mov	r5, r0
 8010aec:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 8010aee:	2300      	movs	r3, #0
	__asm__ volatile(
 8010af0:	f04f 0210 	mov.w	r2, #16
 8010af4:	f3ef 8611 	mrs	r6, BASEPRI
 8010af8:	f382 8812 	msr	BASEPRI_MAX, r2
 8010afc:	f3bf 8f6f 	isb	sy
 8010b00:	e00a      	b.n	8010b18 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 8010b02:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 8010b04:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8010b08:	2801      	cmp	r0, #1
 8010b0a:	dd00      	ble.n	8010b0e <z_set_timeout_expiry+0x26>
 8010b0c:	b97c      	cbnz	r4, 8010b2e <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 8010b0e:	f386 8811 	msr	BASEPRI, r6
 8010b12:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8010b16:	2301      	movs	r3, #1
 8010b18:	461c      	mov	r4, r3
 8010b1a:	b97b      	cbnz	r3, 8010b3c <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 8010b1c:	f7fb fb06 	bl	800c12c <next_timeout>
			      || (ticks <= next_to);
 8010b20:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010b24:	d0ed      	beq.n	8010b02 <z_set_timeout_expiry+0x1a>
 8010b26:	42a8      	cmp	r0, r5
 8010b28:	dbec      	blt.n	8010b04 <z_set_timeout_expiry+0x1c>
 8010b2a:	2401      	movs	r4, #1
 8010b2c:	e7ea      	b.n	8010b04 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8010b2e:	4639      	mov	r1, r7
 8010b30:	42a8      	cmp	r0, r5
 8010b32:	bfa8      	it	ge
 8010b34:	4628      	movge	r0, r5
 8010b36:	f7f9 ff4f 	bl	800a9d8 <sys_clock_set_timeout>
 8010b3a:	e7e8      	b.n	8010b0e <z_set_timeout_expiry+0x26>
}
 8010b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010b3e <sys_clock_tick_get_32>:
{
 8010b3e:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 8010b40:	f7fb fc08 	bl	800c354 <sys_clock_tick_get>
}
 8010b44:	bd08      	pop	{r3, pc}

08010b46 <z_impl_k_uptime_ticks>:
{
 8010b46:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 8010b48:	f7fb fc04 	bl	800c354 <sys_clock_tick_get>
}
 8010b4c:	bd08      	pop	{r3, pc}

08010b4e <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 8010b4e:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 8010b50:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 8010b52:	2300      	movs	r3, #0
 8010b54:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
 8010b56:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 8010b5a:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 8010b5c:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 8010b5e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8010b60:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 8010b62:	6343      	str	r3, [r0, #52]	; 0x34
}
 8010b64:	4770      	bx	lr

08010b66 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8010b66:	b510      	push	{r4, lr}
 8010b68:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 8010b6a:	f7ff ff9f 	bl	8010aac <z_abort_timeout>

	if (inactive) {
 8010b6e:	b9a0      	cbnz	r0, 8010b9a <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 8010b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b72:	b10b      	cbz	r3, 8010b78 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8010b74:	4620      	mov	r0, r4
 8010b76:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 8010b78:	f104 0018 	add.w	r0, r4, #24
 8010b7c:	f7ff fef2 	bl	8010964 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 8010b80:	b158      	cbz	r0, 8010b9a <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 8010b82:	f7ff fe4f 	bl	8010824 <z_ready_thread>
	__asm__ volatile(
 8010b86:	f04f 0310 	mov.w	r3, #16
 8010b8a:	f3ef 8011 	mrs	r0, BASEPRI
 8010b8e:	f383 8812 	msr	BASEPRI_MAX, r3
 8010b92:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8010b96:	f7ff fdfd 	bl	8010794 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 8010b9a:	bd10      	pop	{r4, pc}

08010b9c <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8010b9c:	b108      	cbz	r0, 8010ba2 <poller_thread+0x6>
 8010b9e:	3860      	subs	r0, #96	; 0x60
 8010ba0:	4770      	bx	lr
}
 8010ba2:	4770      	bx	lr

08010ba4 <signal_poller>:
{
 8010ba4:	b538      	push	{r3, r4, r5, lr}
 8010ba6:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 8010ba8:	6880      	ldr	r0, [r0, #8]
 8010baa:	f7ff fff7 	bl	8010b9c <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 8010bae:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
 8010bb0:	f013 0f02 	tst.w	r3, #2
 8010bb4:	d024      	beq.n	8010c00 <signal_poller+0x5c>
 8010bb6:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 8010bb8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8010bba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
 8010bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010bc0:	bf08      	it	eq
 8010bc2:	f112 0f02 	cmneq.w	r2, #2
 8010bc6:	d01d      	beq.n	8010c04 <signal_poller+0x60>
	z_unpend_thread(thread);
 8010bc8:	f7ff fe01 	bl	80107ce <z_unpend_thread>
	arch_thread_return_value_set(thread,
 8010bcc:	2d08      	cmp	r5, #8
 8010bce:	d009      	beq.n	8010be4 <signal_poller+0x40>
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
 8010bd4:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8010bd6:	f013 0f1f 	tst.w	r3, #31
 8010bda:	d108      	bne.n	8010bee <signal_poller+0x4a>
	return node->next != NULL;
 8010bdc:	69a3      	ldr	r3, [r4, #24]
 8010bde:	b123      	cbz	r3, 8010bea <signal_poller+0x46>
 8010be0:	2300      	movs	r3, #0
 8010be2:	e005      	b.n	8010bf0 <signal_poller+0x4c>
 8010be4:	f06f 0303 	mvn.w	r3, #3
 8010be8:	e7f3      	b.n	8010bd2 <signal_poller+0x2e>
 8010bea:	2301      	movs	r3, #1
 8010bec:	e000      	b.n	8010bf0 <signal_poller+0x4c>
 8010bee:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 8010bf0:	b90b      	cbnz	r3, 8010bf6 <signal_poller+0x52>
		return 0;
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	e005      	b.n	8010c02 <signal_poller+0x5e>
	z_ready_thread(thread);
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f7ff fe14 	bl	8010824 <z_ready_thread>
	return 0;
 8010bfc:	2000      	movs	r0, #0
 8010bfe:	e000      	b.n	8010c02 <signal_poller+0x5e>
		return 0;
 8010c00:	2000      	movs	r0, #0
}
 8010c02:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 8010c04:	f06f 000a 	mvn.w	r0, #10
 8010c08:	e7fb      	b.n	8010c02 <signal_poller+0x5e>

08010c0a <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 8010c0a:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 8010c0c:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 8010c0e:	7823      	ldrb	r3, [r4, #0]
 8010c10:	b173      	cbz	r3, 8010c30 <signal_triggered_work+0x26>
 8010c12:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8010c16:	b15d      	cbz	r5, 8010c30 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 8010c18:	f1a4 0614 	sub.w	r6, r4, #20
 8010c1c:	f104 0014 	add.w	r0, r4, #20
 8010c20:	f7ff ff44 	bl	8010aac <z_abort_timeout>
		twork->poll_result = 0;
 8010c24:	2300      	movs	r3, #0
 8010c26:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 8010c28:	4631      	mov	r1, r6
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	f7ff fd22 	bl	8010674 <k_work_submit_to_queue>
	}

	return 0;
}
 8010c30:	2000      	movs	r0, #0
 8010c32:	bd70      	pop	{r4, r5, r6, pc}

08010c34 <signal_poll_event>:
{
 8010c34:	b570      	push	{r4, r5, r6, lr}
 8010c36:	4604      	mov	r4, r0
 8010c38:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 8010c3a:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 8010c3c:	b1d6      	cbz	r6, 8010c74 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 8010c3e:	7873      	ldrb	r3, [r6, #1]
 8010c40:	2b01      	cmp	r3, #1
 8010c42:	d00d      	beq.n	8010c60 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 8010c44:	2b02      	cmp	r3, #2
 8010c46:	d012      	beq.n	8010c6e <signal_poll_event+0x3a>
		poller->is_polling = false;
 8010c48:	2000      	movs	r0, #0
 8010c4a:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 8010c50:	68e3      	ldr	r3, [r4, #12]
 8010c52:	f3c3 3145 	ubfx	r1, r3, #13, #6
 8010c56:	430d      	orrs	r5, r1
 8010c58:	f365 3352 	bfi	r3, r5, #13, #6
 8010c5c:	60e3      	str	r3, [r4, #12]
}
 8010c5e:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 8010c60:	f7ff ffa0 	bl	8010ba4 <signal_poller>
		poller->is_polling = false;
 8010c64:	2300      	movs	r3, #0
 8010c66:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 8010c68:	4298      	cmp	r0, r3
 8010c6a:	daef      	bge.n	8010c4c <signal_poll_event+0x18>
 8010c6c:	e7f7      	b.n	8010c5e <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 8010c6e:	f7ff ffcc 	bl	8010c0a <signal_triggered_work>
 8010c72:	e7f7      	b.n	8010c64 <signal_poll_event+0x30>
	int retcode = 0;
 8010c74:	2000      	movs	r0, #0
 8010c76:	e7e9      	b.n	8010c4c <signal_poll_event+0x18>

08010c78 <z_handle_obj_poll_events>:
{
 8010c78:	b508      	push	{r3, lr}
 8010c7a:	4603      	mov	r3, r0
	return list->head == list;
 8010c7c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 8010c7e:	4283      	cmp	r3, r0
 8010c80:	d009      	beq.n	8010c96 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 8010c82:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 8010c84:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 8010c86:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8010c88:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8010c8e:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 8010c90:	b108      	cbz	r0, 8010c96 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 8010c92:	f7ff ffcf 	bl	8010c34 <signal_poll_event>
}
 8010c96:	bd08      	pop	{r3, pc}

08010c98 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 8010c98:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 8010c9a:	4770      	bx	lr

08010c9c <atoi>:
 8010c9c:	220a      	movs	r2, #10
 8010c9e:	2100      	movs	r1, #0
 8010ca0:	f7fc bc06 	b.w	800d4b0 <strtol>

08010ca4 <memcpy>:
 8010ca4:	440a      	add	r2, r1
 8010ca6:	4291      	cmp	r1, r2
 8010ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010cac:	d100      	bne.n	8010cb0 <memcpy+0xc>
 8010cae:	4770      	bx	lr
 8010cb0:	b510      	push	{r4, lr}
 8010cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010cba:	4291      	cmp	r1, r2
 8010cbc:	d1f9      	bne.n	8010cb2 <memcpy+0xe>
 8010cbe:	bd10      	pop	{r4, pc}

08010cc0 <__memcpy_chk>:
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	b508      	push	{r3, lr}
 8010cc4:	d901      	bls.n	8010cca <__memcpy_chk+0xa>
 8010cc6:	f7f4 fa47 	bl	8005158 <__chk_fail>
 8010cca:	4281      	cmp	r1, r0
 8010ccc:	d804      	bhi.n	8010cd8 <__memcpy_chk+0x18>
 8010cce:	188b      	adds	r3, r1, r2
 8010cd0:	4298      	cmp	r0, r3
 8010cd2:	d3f8      	bcc.n	8010cc6 <__memcpy_chk+0x6>
 8010cd4:	4281      	cmp	r1, r0
 8010cd6:	d102      	bne.n	8010cde <__memcpy_chk+0x1e>
 8010cd8:	1883      	adds	r3, r0, r2
 8010cda:	4299      	cmp	r1, r3
 8010cdc:	d3f3      	bcc.n	8010cc6 <__memcpy_chk+0x6>
 8010cde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010ce2:	f7ff bfdf 	b.w	8010ca4 <memcpy>

08010ce6 <memset>:
 8010ce6:	4402      	add	r2, r0
 8010ce8:	4603      	mov	r3, r0
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d100      	bne.n	8010cf0 <memset+0xa>
 8010cee:	4770      	bx	lr
 8010cf0:	f803 1b01 	strb.w	r1, [r3], #1
 8010cf4:	e7f9      	b.n	8010cea <memset+0x4>

08010cf6 <__cvt>:
 8010cf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cfa:	b088      	sub	sp, #32
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	461f      	mov	r7, r3
 8010d00:	4614      	mov	r4, r2
 8010d02:	bfb8      	it	lt
 8010d04:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8010d08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010d0a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010d0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8010d10:	bfb6      	itet	lt
 8010d12:	461f      	movlt	r7, r3
 8010d14:	2300      	movge	r3, #0
 8010d16:	232d      	movlt	r3, #45	; 0x2d
 8010d18:	7013      	strb	r3, [r2, #0]
 8010d1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010d1c:	f023 0820 	bic.w	r8, r3, #32
 8010d20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d24:	d005      	beq.n	8010d32 <__cvt+0x3c>
 8010d26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010d2a:	d100      	bne.n	8010d2e <__cvt+0x38>
 8010d2c:	3501      	adds	r5, #1
 8010d2e:	2302      	movs	r3, #2
 8010d30:	e000      	b.n	8010d34 <__cvt+0x3e>
 8010d32:	2303      	movs	r3, #3
 8010d34:	aa07      	add	r2, sp, #28
 8010d36:	9204      	str	r2, [sp, #16]
 8010d38:	aa06      	add	r2, sp, #24
 8010d3a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8010d3e:	e9cd 3500 	strd	r3, r5, [sp]
 8010d42:	4622      	mov	r2, r4
 8010d44:	463b      	mov	r3, r7
 8010d46:	f7f0 f88f 	bl	8000e68 <_dtoa_r>
 8010d4a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010d4e:	4606      	mov	r6, r0
 8010d50:	d102      	bne.n	8010d58 <__cvt+0x62>
 8010d52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010d54:	07db      	lsls	r3, r3, #31
 8010d56:	d522      	bpl.n	8010d9e <__cvt+0xa8>
 8010d58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d5c:	eb06 0905 	add.w	r9, r6, r5
 8010d60:	d110      	bne.n	8010d84 <__cvt+0x8e>
 8010d62:	7833      	ldrb	r3, [r6, #0]
 8010d64:	2b30      	cmp	r3, #48	; 0x30
 8010d66:	d10a      	bne.n	8010d7e <__cvt+0x88>
 8010d68:	2200      	movs	r2, #0
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	4639      	mov	r1, r7
 8010d70:	f7ef fea4 	bl	8000abc <__aeabi_dcmpeq>
 8010d74:	b918      	cbnz	r0, 8010d7e <__cvt+0x88>
 8010d76:	f1c5 0501 	rsb	r5, r5, #1
 8010d7a:	f8ca 5000 	str.w	r5, [sl]
 8010d7e:	f8da 3000 	ldr.w	r3, [sl]
 8010d82:	4499      	add	r9, r3
 8010d84:	2200      	movs	r2, #0
 8010d86:	2300      	movs	r3, #0
 8010d88:	4620      	mov	r0, r4
 8010d8a:	4639      	mov	r1, r7
 8010d8c:	f7ef fe96 	bl	8000abc <__aeabi_dcmpeq>
 8010d90:	b108      	cbz	r0, 8010d96 <__cvt+0xa0>
 8010d92:	f8cd 901c 	str.w	r9, [sp, #28]
 8010d96:	2230      	movs	r2, #48	; 0x30
 8010d98:	9b07      	ldr	r3, [sp, #28]
 8010d9a:	454b      	cmp	r3, r9
 8010d9c:	d307      	bcc.n	8010dae <__cvt+0xb8>
 8010d9e:	9b07      	ldr	r3, [sp, #28]
 8010da0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010da2:	1b9b      	subs	r3, r3, r6
 8010da4:	4630      	mov	r0, r6
 8010da6:	6013      	str	r3, [r2, #0]
 8010da8:	b008      	add	sp, #32
 8010daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dae:	1c59      	adds	r1, r3, #1
 8010db0:	9107      	str	r1, [sp, #28]
 8010db2:	701a      	strb	r2, [r3, #0]
 8010db4:	e7f0      	b.n	8010d98 <__cvt+0xa2>

08010db6 <__exponent>:
 8010db6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010db8:	4603      	mov	r3, r0
 8010dba:	2900      	cmp	r1, #0
 8010dbc:	bfb8      	it	lt
 8010dbe:	4249      	neglt	r1, r1
 8010dc0:	f803 2b02 	strb.w	r2, [r3], #2
 8010dc4:	bfb4      	ite	lt
 8010dc6:	222d      	movlt	r2, #45	; 0x2d
 8010dc8:	222b      	movge	r2, #43	; 0x2b
 8010dca:	2909      	cmp	r1, #9
 8010dcc:	7042      	strb	r2, [r0, #1]
 8010dce:	dd2a      	ble.n	8010e26 <__exponent+0x70>
 8010dd0:	f10d 0407 	add.w	r4, sp, #7
 8010dd4:	46a4      	mov	ip, r4
 8010dd6:	270a      	movs	r7, #10
 8010dd8:	46a6      	mov	lr, r4
 8010dda:	460a      	mov	r2, r1
 8010ddc:	fb91 f6f7 	sdiv	r6, r1, r7
 8010de0:	fb07 1516 	mls	r5, r7, r6, r1
 8010de4:	3530      	adds	r5, #48	; 0x30
 8010de6:	2a63      	cmp	r2, #99	; 0x63
 8010de8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010dec:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010df0:	4631      	mov	r1, r6
 8010df2:	dcf1      	bgt.n	8010dd8 <__exponent+0x22>
 8010df4:	3130      	adds	r1, #48	; 0x30
 8010df6:	f1ae 0502 	sub.w	r5, lr, #2
 8010dfa:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010dfe:	1c44      	adds	r4, r0, #1
 8010e00:	4629      	mov	r1, r5
 8010e02:	4561      	cmp	r1, ip
 8010e04:	d30a      	bcc.n	8010e1c <__exponent+0x66>
 8010e06:	f10d 0209 	add.w	r2, sp, #9
 8010e0a:	eba2 020e 	sub.w	r2, r2, lr
 8010e0e:	4565      	cmp	r5, ip
 8010e10:	bf88      	it	hi
 8010e12:	2200      	movhi	r2, #0
 8010e14:	4413      	add	r3, r2
 8010e16:	1a18      	subs	r0, r3, r0
 8010e18:	b003      	add	sp, #12
 8010e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e20:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010e24:	e7ed      	b.n	8010e02 <__exponent+0x4c>
 8010e26:	2330      	movs	r3, #48	; 0x30
 8010e28:	3130      	adds	r1, #48	; 0x30
 8010e2a:	7083      	strb	r3, [r0, #2]
 8010e2c:	70c1      	strb	r1, [r0, #3]
 8010e2e:	1d03      	adds	r3, r0, #4
 8010e30:	e7f1      	b.n	8010e16 <__exponent+0x60>

08010e32 <_printf_common>:
 8010e32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e36:	4616      	mov	r6, r2
 8010e38:	4699      	mov	r9, r3
 8010e3a:	688a      	ldr	r2, [r1, #8]
 8010e3c:	690b      	ldr	r3, [r1, #16]
 8010e3e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e42:	4293      	cmp	r3, r2
 8010e44:	bfb8      	it	lt
 8010e46:	4613      	movlt	r3, r2
 8010e48:	6033      	str	r3, [r6, #0]
 8010e4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e4e:	4607      	mov	r7, r0
 8010e50:	460c      	mov	r4, r1
 8010e52:	b10a      	cbz	r2, 8010e58 <_printf_common+0x26>
 8010e54:	3301      	adds	r3, #1
 8010e56:	6033      	str	r3, [r6, #0]
 8010e58:	6823      	ldr	r3, [r4, #0]
 8010e5a:	0699      	lsls	r1, r3, #26
 8010e5c:	bf42      	ittt	mi
 8010e5e:	6833      	ldrmi	r3, [r6, #0]
 8010e60:	3302      	addmi	r3, #2
 8010e62:	6033      	strmi	r3, [r6, #0]
 8010e64:	6825      	ldr	r5, [r4, #0]
 8010e66:	f015 0506 	ands.w	r5, r5, #6
 8010e6a:	d106      	bne.n	8010e7a <_printf_common+0x48>
 8010e6c:	f104 0a19 	add.w	sl, r4, #25
 8010e70:	68e3      	ldr	r3, [r4, #12]
 8010e72:	6832      	ldr	r2, [r6, #0]
 8010e74:	1a9b      	subs	r3, r3, r2
 8010e76:	42ab      	cmp	r3, r5
 8010e78:	dc26      	bgt.n	8010ec8 <_printf_common+0x96>
 8010e7a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e7e:	1e13      	subs	r3, r2, #0
 8010e80:	6822      	ldr	r2, [r4, #0]
 8010e82:	bf18      	it	ne
 8010e84:	2301      	movne	r3, #1
 8010e86:	0692      	lsls	r2, r2, #26
 8010e88:	d42b      	bmi.n	8010ee2 <_printf_common+0xb0>
 8010e8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e8e:	4649      	mov	r1, r9
 8010e90:	4638      	mov	r0, r7
 8010e92:	47c0      	blx	r8
 8010e94:	3001      	adds	r0, #1
 8010e96:	d01e      	beq.n	8010ed6 <_printf_common+0xa4>
 8010e98:	6823      	ldr	r3, [r4, #0]
 8010e9a:	68e5      	ldr	r5, [r4, #12]
 8010e9c:	6832      	ldr	r2, [r6, #0]
 8010e9e:	f003 0306 	and.w	r3, r3, #6
 8010ea2:	2b04      	cmp	r3, #4
 8010ea4:	bf08      	it	eq
 8010ea6:	1aad      	subeq	r5, r5, r2
 8010ea8:	68a3      	ldr	r3, [r4, #8]
 8010eaa:	6922      	ldr	r2, [r4, #16]
 8010eac:	bf0c      	ite	eq
 8010eae:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010eb2:	2500      	movne	r5, #0
 8010eb4:	4293      	cmp	r3, r2
 8010eb6:	bfc4      	itt	gt
 8010eb8:	1a9b      	subgt	r3, r3, r2
 8010eba:	18ed      	addgt	r5, r5, r3
 8010ebc:	2600      	movs	r6, #0
 8010ebe:	341a      	adds	r4, #26
 8010ec0:	42b5      	cmp	r5, r6
 8010ec2:	d11a      	bne.n	8010efa <_printf_common+0xc8>
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	e008      	b.n	8010eda <_printf_common+0xa8>
 8010ec8:	2301      	movs	r3, #1
 8010eca:	4652      	mov	r2, sl
 8010ecc:	4649      	mov	r1, r9
 8010ece:	4638      	mov	r0, r7
 8010ed0:	47c0      	blx	r8
 8010ed2:	3001      	adds	r0, #1
 8010ed4:	d103      	bne.n	8010ede <_printf_common+0xac>
 8010ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ede:	3501      	adds	r5, #1
 8010ee0:	e7c6      	b.n	8010e70 <_printf_common+0x3e>
 8010ee2:	18e1      	adds	r1, r4, r3
 8010ee4:	1c5a      	adds	r2, r3, #1
 8010ee6:	2030      	movs	r0, #48	; 0x30
 8010ee8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010eec:	4422      	add	r2, r4
 8010eee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ef2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ef6:	3302      	adds	r3, #2
 8010ef8:	e7c7      	b.n	8010e8a <_printf_common+0x58>
 8010efa:	2301      	movs	r3, #1
 8010efc:	4622      	mov	r2, r4
 8010efe:	4649      	mov	r1, r9
 8010f00:	4638      	mov	r0, r7
 8010f02:	47c0      	blx	r8
 8010f04:	3001      	adds	r0, #1
 8010f06:	d0e6      	beq.n	8010ed6 <_printf_common+0xa4>
 8010f08:	3601      	adds	r6, #1
 8010f0a:	e7d9      	b.n	8010ec0 <_printf_common+0x8e>

08010f0c <strnlen>:
 8010f0c:	b510      	push	{r4, lr}
 8010f0e:	4602      	mov	r2, r0
 8010f10:	4401      	add	r1, r0
 8010f12:	428a      	cmp	r2, r1
 8010f14:	4613      	mov	r3, r2
 8010f16:	d003      	beq.n	8010f20 <strnlen+0x14>
 8010f18:	781c      	ldrb	r4, [r3, #0]
 8010f1a:	3201      	adds	r2, #1
 8010f1c:	2c00      	cmp	r4, #0
 8010f1e:	d1f8      	bne.n	8010f12 <strnlen+0x6>
 8010f20:	1a18      	subs	r0, r3, r0
 8010f22:	bd10      	pop	{r4, pc}

08010f24 <__strtok_r>:
 8010f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f26:	b908      	cbnz	r0, 8010f2c <__strtok_r+0x8>
 8010f28:	6810      	ldr	r0, [r2, #0]
 8010f2a:	b188      	cbz	r0, 8010f50 <__strtok_r+0x2c>
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	4620      	mov	r0, r4
 8010f30:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010f34:	460f      	mov	r7, r1
 8010f36:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010f3a:	b91e      	cbnz	r6, 8010f44 <__strtok_r+0x20>
 8010f3c:	b965      	cbnz	r5, 8010f58 <__strtok_r+0x34>
 8010f3e:	6015      	str	r5, [r2, #0]
 8010f40:	4628      	mov	r0, r5
 8010f42:	e005      	b.n	8010f50 <__strtok_r+0x2c>
 8010f44:	42b5      	cmp	r5, r6
 8010f46:	d1f6      	bne.n	8010f36 <__strtok_r+0x12>
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d1f0      	bne.n	8010f2e <__strtok_r+0xa>
 8010f4c:	6014      	str	r4, [r2, #0]
 8010f4e:	7003      	strb	r3, [r0, #0]
 8010f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f52:	461c      	mov	r4, r3
 8010f54:	e00c      	b.n	8010f70 <__strtok_r+0x4c>
 8010f56:	b915      	cbnz	r5, 8010f5e <__strtok_r+0x3a>
 8010f58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010f5c:	460e      	mov	r6, r1
 8010f5e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010f62:	42ab      	cmp	r3, r5
 8010f64:	d1f7      	bne.n	8010f56 <__strtok_r+0x32>
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d0f3      	beq.n	8010f52 <__strtok_r+0x2e>
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010f70:	6014      	str	r4, [r2, #0]
 8010f72:	e7ed      	b.n	8010f50 <__strtok_r+0x2c>

08010f74 <quorem>:
 8010f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f78:	6903      	ldr	r3, [r0, #16]
 8010f7a:	690c      	ldr	r4, [r1, #16]
 8010f7c:	42a3      	cmp	r3, r4
 8010f7e:	4607      	mov	r7, r0
 8010f80:	db7d      	blt.n	801107e <quorem+0x10a>
 8010f82:	3c01      	subs	r4, #1
 8010f84:	f101 0814 	add.w	r8, r1, #20
 8010f88:	f100 0514 	add.w	r5, r0, #20
 8010f8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f90:	9301      	str	r3, [sp, #4]
 8010f92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010f96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010fa2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010fa6:	fbb2 f6f3 	udiv	r6, r2, r3
 8010faa:	d32e      	bcc.n	801100a <quorem+0x96>
 8010fac:	f04f 0e00 	mov.w	lr, #0
 8010fb0:	4640      	mov	r0, r8
 8010fb2:	46ac      	mov	ip, r5
 8010fb4:	46f2      	mov	sl, lr
 8010fb6:	f850 2b04 	ldr.w	r2, [r0], #4
 8010fba:	b293      	uxth	r3, r2
 8010fbc:	fb06 e303 	mla	r3, r6, r3, lr
 8010fc0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010fc4:	0c12      	lsrs	r2, r2, #16
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	fb06 e202 	mla	r2, r6, r2, lr
 8010fcc:	ebaa 0303 	sub.w	r3, sl, r3
 8010fd0:	f8dc a000 	ldr.w	sl, [ip]
 8010fd4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010fd8:	b292      	uxth	r2, r2
 8010fda:	fa13 f38a 	uxtah	r3, r3, sl
 8010fde:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010fe2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010fe6:	b29b      	uxth	r3, r3
 8010fe8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010fec:	4581      	cmp	r9, r0
 8010fee:	f84c 3b04 	str.w	r3, [ip], #4
 8010ff2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010ff6:	d2de      	bcs.n	8010fb6 <quorem+0x42>
 8010ff8:	f855 300b 	ldr.w	r3, [r5, fp]
 8010ffc:	b92b      	cbnz	r3, 801100a <quorem+0x96>
 8010ffe:	9b01      	ldr	r3, [sp, #4]
 8011000:	3b04      	subs	r3, #4
 8011002:	429d      	cmp	r5, r3
 8011004:	461a      	mov	r2, r3
 8011006:	d32e      	bcc.n	8011066 <quorem+0xf2>
 8011008:	613c      	str	r4, [r7, #16]
 801100a:	4638      	mov	r0, r7
 801100c:	f000 f886 	bl	801111c <__mcmp>
 8011010:	2800      	cmp	r0, #0
 8011012:	db24      	blt.n	801105e <quorem+0xea>
 8011014:	3601      	adds	r6, #1
 8011016:	4628      	mov	r0, r5
 8011018:	f04f 0c00 	mov.w	ip, #0
 801101c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011020:	f8d0 e000 	ldr.w	lr, [r0]
 8011024:	b293      	uxth	r3, r2
 8011026:	ebac 0303 	sub.w	r3, ip, r3
 801102a:	0c12      	lsrs	r2, r2, #16
 801102c:	fa13 f38e 	uxtah	r3, r3, lr
 8011030:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011034:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011038:	b29b      	uxth	r3, r3
 801103a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801103e:	45c1      	cmp	r9, r8
 8011040:	f840 3b04 	str.w	r3, [r0], #4
 8011044:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011048:	d2e8      	bcs.n	801101c <quorem+0xa8>
 801104a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801104e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011052:	b922      	cbnz	r2, 801105e <quorem+0xea>
 8011054:	3b04      	subs	r3, #4
 8011056:	429d      	cmp	r5, r3
 8011058:	461a      	mov	r2, r3
 801105a:	d30a      	bcc.n	8011072 <quorem+0xfe>
 801105c:	613c      	str	r4, [r7, #16]
 801105e:	4630      	mov	r0, r6
 8011060:	b003      	add	sp, #12
 8011062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011066:	6812      	ldr	r2, [r2, #0]
 8011068:	3b04      	subs	r3, #4
 801106a:	2a00      	cmp	r2, #0
 801106c:	d1cc      	bne.n	8011008 <quorem+0x94>
 801106e:	3c01      	subs	r4, #1
 8011070:	e7c7      	b.n	8011002 <quorem+0x8e>
 8011072:	6812      	ldr	r2, [r2, #0]
 8011074:	3b04      	subs	r3, #4
 8011076:	2a00      	cmp	r2, #0
 8011078:	d1f0      	bne.n	801105c <quorem+0xe8>
 801107a:	3c01      	subs	r4, #1
 801107c:	e7eb      	b.n	8011056 <quorem+0xe2>
 801107e:	2000      	movs	r0, #0
 8011080:	e7ee      	b.n	8011060 <quorem+0xec>

08011082 <__hi0bits>:
 8011082:	0c02      	lsrs	r2, r0, #16
 8011084:	0412      	lsls	r2, r2, #16
 8011086:	4603      	mov	r3, r0
 8011088:	b9ca      	cbnz	r2, 80110be <__hi0bits+0x3c>
 801108a:	0403      	lsls	r3, r0, #16
 801108c:	2010      	movs	r0, #16
 801108e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011092:	bf04      	itt	eq
 8011094:	021b      	lsleq	r3, r3, #8
 8011096:	3008      	addeq	r0, #8
 8011098:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801109c:	bf04      	itt	eq
 801109e:	011b      	lsleq	r3, r3, #4
 80110a0:	3004      	addeq	r0, #4
 80110a2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80110a6:	bf04      	itt	eq
 80110a8:	009b      	lsleq	r3, r3, #2
 80110aa:	3002      	addeq	r0, #2
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	db05      	blt.n	80110bc <__hi0bits+0x3a>
 80110b0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80110b4:	f100 0001 	add.w	r0, r0, #1
 80110b8:	bf08      	it	eq
 80110ba:	2020      	moveq	r0, #32
 80110bc:	4770      	bx	lr
 80110be:	2000      	movs	r0, #0
 80110c0:	e7e5      	b.n	801108e <__hi0bits+0xc>

080110c2 <__lo0bits>:
 80110c2:	6803      	ldr	r3, [r0, #0]
 80110c4:	4602      	mov	r2, r0
 80110c6:	f013 0007 	ands.w	r0, r3, #7
 80110ca:	d00b      	beq.n	80110e4 <__lo0bits+0x22>
 80110cc:	07d9      	lsls	r1, r3, #31
 80110ce:	d421      	bmi.n	8011114 <__lo0bits+0x52>
 80110d0:	0798      	lsls	r0, r3, #30
 80110d2:	bf49      	itett	mi
 80110d4:	085b      	lsrmi	r3, r3, #1
 80110d6:	089b      	lsrpl	r3, r3, #2
 80110d8:	2001      	movmi	r0, #1
 80110da:	6013      	strmi	r3, [r2, #0]
 80110dc:	bf5c      	itt	pl
 80110de:	6013      	strpl	r3, [r2, #0]
 80110e0:	2002      	movpl	r0, #2
 80110e2:	4770      	bx	lr
 80110e4:	b299      	uxth	r1, r3
 80110e6:	b909      	cbnz	r1, 80110ec <__lo0bits+0x2a>
 80110e8:	0c1b      	lsrs	r3, r3, #16
 80110ea:	2010      	movs	r0, #16
 80110ec:	b2d9      	uxtb	r1, r3
 80110ee:	b909      	cbnz	r1, 80110f4 <__lo0bits+0x32>
 80110f0:	3008      	adds	r0, #8
 80110f2:	0a1b      	lsrs	r3, r3, #8
 80110f4:	0719      	lsls	r1, r3, #28
 80110f6:	bf04      	itt	eq
 80110f8:	091b      	lsreq	r3, r3, #4
 80110fa:	3004      	addeq	r0, #4
 80110fc:	0799      	lsls	r1, r3, #30
 80110fe:	bf04      	itt	eq
 8011100:	089b      	lsreq	r3, r3, #2
 8011102:	3002      	addeq	r0, #2
 8011104:	07d9      	lsls	r1, r3, #31
 8011106:	d403      	bmi.n	8011110 <__lo0bits+0x4e>
 8011108:	085b      	lsrs	r3, r3, #1
 801110a:	f100 0001 	add.w	r0, r0, #1
 801110e:	d003      	beq.n	8011118 <__lo0bits+0x56>
 8011110:	6013      	str	r3, [r2, #0]
 8011112:	4770      	bx	lr
 8011114:	2000      	movs	r0, #0
 8011116:	4770      	bx	lr
 8011118:	2020      	movs	r0, #32
 801111a:	4770      	bx	lr

0801111c <__mcmp>:
 801111c:	690a      	ldr	r2, [r1, #16]
 801111e:	4603      	mov	r3, r0
 8011120:	6900      	ldr	r0, [r0, #16]
 8011122:	1a80      	subs	r0, r0, r2
 8011124:	b530      	push	{r4, r5, lr}
 8011126:	d10d      	bne.n	8011144 <__mcmp+0x28>
 8011128:	3314      	adds	r3, #20
 801112a:	3114      	adds	r1, #20
 801112c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011130:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011134:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011138:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801113c:	4295      	cmp	r5, r2
 801113e:	d002      	beq.n	8011146 <__mcmp+0x2a>
 8011140:	d304      	bcc.n	801114c <__mcmp+0x30>
 8011142:	2001      	movs	r0, #1
 8011144:	bd30      	pop	{r4, r5, pc}
 8011146:	42a3      	cmp	r3, r4
 8011148:	d3f4      	bcc.n	8011134 <__mcmp+0x18>
 801114a:	e7fb      	b.n	8011144 <__mcmp+0x28>
 801114c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011150:	e7f8      	b.n	8011144 <__mcmp+0x28>

08011152 <_calloc_r>:
 8011152:	b538      	push	{r3, r4, r5, lr}
 8011154:	fb02 f501 	mul.w	r5, r2, r1
 8011158:	4629      	mov	r1, r5
 801115a:	f7fb fd1f 	bl	800cb9c <_malloc_r>
 801115e:	4604      	mov	r4, r0
 8011160:	b118      	cbz	r0, 801116a <_calloc_r+0x18>
 8011162:	462a      	mov	r2, r5
 8011164:	2100      	movs	r1, #0
 8011166:	f7ff fdbe 	bl	8010ce6 <memset>
 801116a:	4620      	mov	r0, r4
 801116c:	bd38      	pop	{r3, r4, r5, pc}

0801116e <__ssputs_r>:
 801116e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011172:	688e      	ldr	r6, [r1, #8]
 8011174:	429e      	cmp	r6, r3
 8011176:	4682      	mov	sl, r0
 8011178:	460c      	mov	r4, r1
 801117a:	4690      	mov	r8, r2
 801117c:	461f      	mov	r7, r3
 801117e:	d838      	bhi.n	80111f2 <__ssputs_r+0x84>
 8011180:	898a      	ldrh	r2, [r1, #12]
 8011182:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011186:	d032      	beq.n	80111ee <__ssputs_r+0x80>
 8011188:	6825      	ldr	r5, [r4, #0]
 801118a:	6909      	ldr	r1, [r1, #16]
 801118c:	eba5 0901 	sub.w	r9, r5, r1
 8011190:	6965      	ldr	r5, [r4, #20]
 8011192:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011196:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801119a:	3301      	adds	r3, #1
 801119c:	444b      	add	r3, r9
 801119e:	106d      	asrs	r5, r5, #1
 80111a0:	429d      	cmp	r5, r3
 80111a2:	bf38      	it	cc
 80111a4:	461d      	movcc	r5, r3
 80111a6:	0553      	lsls	r3, r2, #21
 80111a8:	d531      	bpl.n	801120e <__ssputs_r+0xa0>
 80111aa:	4629      	mov	r1, r5
 80111ac:	f7fb fcf6 	bl	800cb9c <_malloc_r>
 80111b0:	4606      	mov	r6, r0
 80111b2:	b950      	cbnz	r0, 80111ca <__ssputs_r+0x5c>
 80111b4:	230c      	movs	r3, #12
 80111b6:	f8ca 3000 	str.w	r3, [sl]
 80111ba:	89a3      	ldrh	r3, [r4, #12]
 80111bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111c0:	81a3      	strh	r3, [r4, #12]
 80111c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111ca:	6921      	ldr	r1, [r4, #16]
 80111cc:	464a      	mov	r2, r9
 80111ce:	f7ff fd69 	bl	8010ca4 <memcpy>
 80111d2:	89a3      	ldrh	r3, [r4, #12]
 80111d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80111d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111dc:	81a3      	strh	r3, [r4, #12]
 80111de:	6126      	str	r6, [r4, #16]
 80111e0:	6165      	str	r5, [r4, #20]
 80111e2:	444e      	add	r6, r9
 80111e4:	eba5 0509 	sub.w	r5, r5, r9
 80111e8:	6026      	str	r6, [r4, #0]
 80111ea:	60a5      	str	r5, [r4, #8]
 80111ec:	463e      	mov	r6, r7
 80111ee:	42be      	cmp	r6, r7
 80111f0:	d900      	bls.n	80111f4 <__ssputs_r+0x86>
 80111f2:	463e      	mov	r6, r7
 80111f4:	6820      	ldr	r0, [r4, #0]
 80111f6:	4632      	mov	r2, r6
 80111f8:	4641      	mov	r1, r8
 80111fa:	f000 f8ad 	bl	8011358 <memmove>
 80111fe:	68a3      	ldr	r3, [r4, #8]
 8011200:	1b9b      	subs	r3, r3, r6
 8011202:	60a3      	str	r3, [r4, #8]
 8011204:	6823      	ldr	r3, [r4, #0]
 8011206:	4433      	add	r3, r6
 8011208:	6023      	str	r3, [r4, #0]
 801120a:	2000      	movs	r0, #0
 801120c:	e7db      	b.n	80111c6 <__ssputs_r+0x58>
 801120e:	462a      	mov	r2, r5
 8011210:	f000 f8bc 	bl	801138c <_realloc_r>
 8011214:	4606      	mov	r6, r0
 8011216:	2800      	cmp	r0, #0
 8011218:	d1e1      	bne.n	80111de <__ssputs_r+0x70>
 801121a:	6921      	ldr	r1, [r4, #16]
 801121c:	4650      	mov	r0, sl
 801121e:	f7fb fc73 	bl	800cb08 <_free_r>
 8011222:	e7c7      	b.n	80111b4 <__ssputs_r+0x46>

08011224 <__sfputc_r>:
 8011224:	6893      	ldr	r3, [r2, #8]
 8011226:	3b01      	subs	r3, #1
 8011228:	2b00      	cmp	r3, #0
 801122a:	b410      	push	{r4}
 801122c:	6093      	str	r3, [r2, #8]
 801122e:	da07      	bge.n	8011240 <__sfputc_r+0x1c>
 8011230:	6994      	ldr	r4, [r2, #24]
 8011232:	42a3      	cmp	r3, r4
 8011234:	db01      	blt.n	801123a <__sfputc_r+0x16>
 8011236:	290a      	cmp	r1, #10
 8011238:	d102      	bne.n	8011240 <__sfputc_r+0x1c>
 801123a:	bc10      	pop	{r4}
 801123c:	f7fc bec6 	b.w	800dfcc <__swbuf_r>
 8011240:	6813      	ldr	r3, [r2, #0]
 8011242:	1c58      	adds	r0, r3, #1
 8011244:	6010      	str	r0, [r2, #0]
 8011246:	7019      	strb	r1, [r3, #0]
 8011248:	4608      	mov	r0, r1
 801124a:	bc10      	pop	{r4}
 801124c:	4770      	bx	lr

0801124e <__sfputs_r>:
 801124e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011250:	4606      	mov	r6, r0
 8011252:	460f      	mov	r7, r1
 8011254:	4614      	mov	r4, r2
 8011256:	18d5      	adds	r5, r2, r3
 8011258:	42ac      	cmp	r4, r5
 801125a:	d101      	bne.n	8011260 <__sfputs_r+0x12>
 801125c:	2000      	movs	r0, #0
 801125e:	e007      	b.n	8011270 <__sfputs_r+0x22>
 8011260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011264:	463a      	mov	r2, r7
 8011266:	4630      	mov	r0, r6
 8011268:	f7ff ffdc 	bl	8011224 <__sfputc_r>
 801126c:	1c43      	adds	r3, r0, #1
 801126e:	d1f3      	bne.n	8011258 <__sfputs_r+0xa>
 8011270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011272 <abort>:
 8011272:	b508      	push	{r3, lr}
 8011274:	2006      	movs	r0, #6
 8011276:	f7fd f927 	bl	800e4c8 <raise>
 801127a:	2001      	movs	r0, #1
 801127c:	f7f3 ff4c 	bl	8005118 <_exit>

08011280 <__sfmoreglue>:
 8011280:	b570      	push	{r4, r5, r6, lr}
 8011282:	2268      	movs	r2, #104	; 0x68
 8011284:	1e4d      	subs	r5, r1, #1
 8011286:	4355      	muls	r5, r2
 8011288:	460e      	mov	r6, r1
 801128a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801128e:	f7fb fc85 	bl	800cb9c <_malloc_r>
 8011292:	4604      	mov	r4, r0
 8011294:	b140      	cbz	r0, 80112a8 <__sfmoreglue+0x28>
 8011296:	2100      	movs	r1, #0
 8011298:	e9c0 1600 	strd	r1, r6, [r0]
 801129c:	300c      	adds	r0, #12
 801129e:	60a0      	str	r0, [r4, #8]
 80112a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80112a4:	f7ff fd1f 	bl	8010ce6 <memset>
 80112a8:	4620      	mov	r0, r4
 80112aa:	bd70      	pop	{r4, r5, r6, pc}

080112ac <_fwalk_reent>:
 80112ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112b0:	4606      	mov	r6, r0
 80112b2:	4688      	mov	r8, r1
 80112b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80112b8:	2700      	movs	r7, #0
 80112ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80112be:	f1b9 0901 	subs.w	r9, r9, #1
 80112c2:	d505      	bpl.n	80112d0 <_fwalk_reent+0x24>
 80112c4:	6824      	ldr	r4, [r4, #0]
 80112c6:	2c00      	cmp	r4, #0
 80112c8:	d1f7      	bne.n	80112ba <_fwalk_reent+0xe>
 80112ca:	4638      	mov	r0, r7
 80112cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112d0:	89ab      	ldrh	r3, [r5, #12]
 80112d2:	2b01      	cmp	r3, #1
 80112d4:	d907      	bls.n	80112e6 <_fwalk_reent+0x3a>
 80112d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80112da:	3301      	adds	r3, #1
 80112dc:	d003      	beq.n	80112e6 <_fwalk_reent+0x3a>
 80112de:	4629      	mov	r1, r5
 80112e0:	4630      	mov	r0, r6
 80112e2:	47c0      	blx	r8
 80112e4:	4307      	orrs	r7, r0
 80112e6:	3568      	adds	r5, #104	; 0x68
 80112e8:	e7e9      	b.n	80112be <_fwalk_reent+0x12>

080112ea <__swhatbuf_r>:
 80112ea:	b570      	push	{r4, r5, r6, lr}
 80112ec:	460e      	mov	r6, r1
 80112ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112f2:	2900      	cmp	r1, #0
 80112f4:	b096      	sub	sp, #88	; 0x58
 80112f6:	4614      	mov	r4, r2
 80112f8:	461d      	mov	r5, r3
 80112fa:	da08      	bge.n	801130e <__swhatbuf_r+0x24>
 80112fc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011300:	2200      	movs	r2, #0
 8011302:	602a      	str	r2, [r5, #0]
 8011304:	061a      	lsls	r2, r3, #24
 8011306:	d410      	bmi.n	801132a <__swhatbuf_r+0x40>
 8011308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801130c:	e00e      	b.n	801132c <__swhatbuf_r+0x42>
 801130e:	466a      	mov	r2, sp
 8011310:	f7fd f916 	bl	800e540 <_fstat_r>
 8011314:	2800      	cmp	r0, #0
 8011316:	dbf1      	blt.n	80112fc <__swhatbuf_r+0x12>
 8011318:	9a01      	ldr	r2, [sp, #4]
 801131a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801131e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011322:	425a      	negs	r2, r3
 8011324:	415a      	adcs	r2, r3
 8011326:	602a      	str	r2, [r5, #0]
 8011328:	e7ee      	b.n	8011308 <__swhatbuf_r+0x1e>
 801132a:	2340      	movs	r3, #64	; 0x40
 801132c:	2000      	movs	r0, #0
 801132e:	6023      	str	r3, [r4, #0]
 8011330:	b016      	add	sp, #88	; 0x58
 8011332:	bd70      	pop	{r4, r5, r6, pc}

08011334 <__ascii_mbtowc>:
 8011334:	b082      	sub	sp, #8
 8011336:	b901      	cbnz	r1, 801133a <__ascii_mbtowc+0x6>
 8011338:	a901      	add	r1, sp, #4
 801133a:	b142      	cbz	r2, 801134e <__ascii_mbtowc+0x1a>
 801133c:	b14b      	cbz	r3, 8011352 <__ascii_mbtowc+0x1e>
 801133e:	7813      	ldrb	r3, [r2, #0]
 8011340:	600b      	str	r3, [r1, #0]
 8011342:	7812      	ldrb	r2, [r2, #0]
 8011344:	1e10      	subs	r0, r2, #0
 8011346:	bf18      	it	ne
 8011348:	2001      	movne	r0, #1
 801134a:	b002      	add	sp, #8
 801134c:	4770      	bx	lr
 801134e:	4610      	mov	r0, r2
 8011350:	e7fb      	b.n	801134a <__ascii_mbtowc+0x16>
 8011352:	f06f 0001 	mvn.w	r0, #1
 8011356:	e7f8      	b.n	801134a <__ascii_mbtowc+0x16>

08011358 <memmove>:
 8011358:	4288      	cmp	r0, r1
 801135a:	b510      	push	{r4, lr}
 801135c:	eb01 0402 	add.w	r4, r1, r2
 8011360:	d902      	bls.n	8011368 <memmove+0x10>
 8011362:	4284      	cmp	r4, r0
 8011364:	4623      	mov	r3, r4
 8011366:	d807      	bhi.n	8011378 <memmove+0x20>
 8011368:	1e43      	subs	r3, r0, #1
 801136a:	42a1      	cmp	r1, r4
 801136c:	d008      	beq.n	8011380 <memmove+0x28>
 801136e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011376:	e7f8      	b.n	801136a <memmove+0x12>
 8011378:	4402      	add	r2, r0
 801137a:	4601      	mov	r1, r0
 801137c:	428a      	cmp	r2, r1
 801137e:	d100      	bne.n	8011382 <memmove+0x2a>
 8011380:	bd10      	pop	{r4, pc}
 8011382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801138a:	e7f7      	b.n	801137c <memmove+0x24>

0801138c <_realloc_r>:
 801138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801138e:	4607      	mov	r7, r0
 8011390:	4614      	mov	r4, r2
 8011392:	460e      	mov	r6, r1
 8011394:	b921      	cbnz	r1, 80113a0 <_realloc_r+0x14>
 8011396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801139a:	4611      	mov	r1, r2
 801139c:	f7fb bbfe 	b.w	800cb9c <_malloc_r>
 80113a0:	b922      	cbnz	r2, 80113ac <_realloc_r+0x20>
 80113a2:	f7fb fbb1 	bl	800cb08 <_free_r>
 80113a6:	4625      	mov	r5, r4
 80113a8:	4628      	mov	r0, r5
 80113aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113ac:	f000 f88e 	bl	80114cc <_malloc_usable_size_r>
 80113b0:	42a0      	cmp	r0, r4
 80113b2:	d20f      	bcs.n	80113d4 <_realloc_r+0x48>
 80113b4:	4621      	mov	r1, r4
 80113b6:	4638      	mov	r0, r7
 80113b8:	f7fb fbf0 	bl	800cb9c <_malloc_r>
 80113bc:	4605      	mov	r5, r0
 80113be:	2800      	cmp	r0, #0
 80113c0:	d0f2      	beq.n	80113a8 <_realloc_r+0x1c>
 80113c2:	4631      	mov	r1, r6
 80113c4:	4622      	mov	r2, r4
 80113c6:	f7ff fc6d 	bl	8010ca4 <memcpy>
 80113ca:	4631      	mov	r1, r6
 80113cc:	4638      	mov	r0, r7
 80113ce:	f7fb fb9b 	bl	800cb08 <_free_r>
 80113d2:	e7e9      	b.n	80113a8 <_realloc_r+0x1c>
 80113d4:	4635      	mov	r5, r6
 80113d6:	e7e7      	b.n	80113a8 <_realloc_r+0x1c>

080113d8 <_raise_r>:
 80113d8:	291f      	cmp	r1, #31
 80113da:	b538      	push	{r3, r4, r5, lr}
 80113dc:	4604      	mov	r4, r0
 80113de:	460d      	mov	r5, r1
 80113e0:	d904      	bls.n	80113ec <_raise_r+0x14>
 80113e2:	2316      	movs	r3, #22
 80113e4:	6003      	str	r3, [r0, #0]
 80113e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113ea:	bd38      	pop	{r3, r4, r5, pc}
 80113ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80113ee:	b112      	cbz	r2, 80113f6 <_raise_r+0x1e>
 80113f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80113f4:	b94b      	cbnz	r3, 801140a <_raise_r+0x32>
 80113f6:	4620      	mov	r0, r4
 80113f8:	f000 f816 	bl	8011428 <_getpid_r>
 80113fc:	462a      	mov	r2, r5
 80113fe:	4601      	mov	r1, r0
 8011400:	4620      	mov	r0, r4
 8011402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011406:	f7fd b867 	b.w	800e4d8 <_kill_r>
 801140a:	2b01      	cmp	r3, #1
 801140c:	d00a      	beq.n	8011424 <_raise_r+0x4c>
 801140e:	1c59      	adds	r1, r3, #1
 8011410:	d103      	bne.n	801141a <_raise_r+0x42>
 8011412:	2316      	movs	r3, #22
 8011414:	6003      	str	r3, [r0, #0]
 8011416:	2001      	movs	r0, #1
 8011418:	e7e7      	b.n	80113ea <_raise_r+0x12>
 801141a:	2400      	movs	r4, #0
 801141c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011420:	4628      	mov	r0, r5
 8011422:	4798      	blx	r3
 8011424:	2000      	movs	r0, #0
 8011426:	e7e0      	b.n	80113ea <_raise_r+0x12>

08011428 <_getpid_r>:
 8011428:	f7fd bdb1 	b.w	800ef8e <_getpid>

0801142c <__sread>:
 801142c:	b510      	push	{r4, lr}
 801142e:	460c      	mov	r4, r1
 8011430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011434:	f7fd f8b8 	bl	800e5a8 <_read_r>
 8011438:	2800      	cmp	r0, #0
 801143a:	bfab      	itete	ge
 801143c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801143e:	89a3      	ldrhlt	r3, [r4, #12]
 8011440:	181b      	addge	r3, r3, r0
 8011442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011446:	bfac      	ite	ge
 8011448:	6563      	strge	r3, [r4, #84]	; 0x54
 801144a:	81a3      	strhlt	r3, [r4, #12]
 801144c:	bd10      	pop	{r4, pc}

0801144e <__swrite>:
 801144e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011452:	461f      	mov	r7, r3
 8011454:	898b      	ldrh	r3, [r1, #12]
 8011456:	05db      	lsls	r3, r3, #23
 8011458:	4605      	mov	r5, r0
 801145a:	460c      	mov	r4, r1
 801145c:	4616      	mov	r6, r2
 801145e:	d505      	bpl.n	801146c <__swrite+0x1e>
 8011460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011464:	2302      	movs	r3, #2
 8011466:	2200      	movs	r2, #0
 8011468:	f7fd f88c 	bl	800e584 <_lseek_r>
 801146c:	89a3      	ldrh	r3, [r4, #12]
 801146e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011476:	81a3      	strh	r3, [r4, #12]
 8011478:	4632      	mov	r2, r6
 801147a:	463b      	mov	r3, r7
 801147c:	4628      	mov	r0, r5
 801147e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011482:	f7fd b83b 	b.w	800e4fc <_write_r>

08011486 <__sseek>:
 8011486:	b510      	push	{r4, lr}
 8011488:	460c      	mov	r4, r1
 801148a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801148e:	f7fd f879 	bl	800e584 <_lseek_r>
 8011492:	1c43      	adds	r3, r0, #1
 8011494:	89a3      	ldrh	r3, [r4, #12]
 8011496:	bf15      	itete	ne
 8011498:	6560      	strne	r0, [r4, #84]	; 0x54
 801149a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801149e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80114a2:	81a3      	strheq	r3, [r4, #12]
 80114a4:	bf18      	it	ne
 80114a6:	81a3      	strhne	r3, [r4, #12]
 80114a8:	bd10      	pop	{r4, pc}

080114aa <__sclose>:
 80114aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114ae:	f7fd b837 	b.w	800e520 <_close_r>

080114b2 <__ascii_wctomb>:
 80114b2:	4603      	mov	r3, r0
 80114b4:	4608      	mov	r0, r1
 80114b6:	b141      	cbz	r1, 80114ca <__ascii_wctomb+0x18>
 80114b8:	2aff      	cmp	r2, #255	; 0xff
 80114ba:	d904      	bls.n	80114c6 <__ascii_wctomb+0x14>
 80114bc:	228a      	movs	r2, #138	; 0x8a
 80114be:	601a      	str	r2, [r3, #0]
 80114c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80114c4:	4770      	bx	lr
 80114c6:	700a      	strb	r2, [r1, #0]
 80114c8:	2001      	movs	r0, #1
 80114ca:	4770      	bx	lr

080114cc <_malloc_usable_size_r>:
 80114cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114d0:	1f18      	subs	r0, r3, #4
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	bfbc      	itt	lt
 80114d6:	580b      	ldrlt	r3, [r1, r0]
 80114d8:	18c0      	addlt	r0, r0, r3
 80114da:	4770      	bx	lr
