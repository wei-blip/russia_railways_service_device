
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 23 00 20 29 1d 00 08 7f 87 00 08 e1 1c 00 08     .#. )...........
 8000010:	e1 1c 00 08 e1 1c 00 08 e1 1c 00 08 00 00 00 00     ................
	...
 800002c:	d1 18 00 08 e1 1c 00 08 00 00 00 00 41 18 00 08     ............A...
 800003c:	55 57 00 08                                         UW..

08000040 <_irq_vector_table>:
 8000040:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000050:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000060:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000070:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000080:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000090:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 80000a0:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 80000b0:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 80000c0:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 80000d0:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 80000e0:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 80000f0:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000100:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000110:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000120:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000130:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000140:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000150:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000160:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000170:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000180:	79 1a 00 08 79 1a 00 08 79 1a 00 08 79 1a 00 08     y...y...y...y...
 8000190:	79 1a 00 08                                         y...

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b80c 	b.w	8000270 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f808 	bl	8000274 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__aeabi_idiv0>:
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop

08000274 <__udivmoddi4>:
 8000274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800027a:	4688      	mov	r8, r1
 800027c:	468e      	mov	lr, r1
 800027e:	4615      	mov	r5, r2
 8000280:	4604      	mov	r4, r0
 8000282:	4619      	mov	r1, r3
 8000284:	2b00      	cmp	r3, #0
 8000286:	f040 80c7 	bne.w	8000418 <__udivmoddi4+0x1a4>
 800028a:	4542      	cmp	r2, r8
 800028c:	fab2 f782 	clz	r7, r2
 8000290:	d946      	bls.n	8000320 <__udivmoddi4+0xac>
 8000292:	b14f      	cbz	r7, 80002a8 <__udivmoddi4+0x34>
 8000294:	f1c7 0c20 	rsb	ip, r7, #32
 8000298:	fa08 f307 	lsl.w	r3, r8, r7
 800029c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002a0:	40bd      	lsls	r5, r7
 80002a2:	ea4c 0e03 	orr.w	lr, ip, r3
 80002a6:	40bc      	lsls	r4, r7
 80002a8:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002ac:	fa1f fc85 	uxth.w	ip, r5
 80002b0:	fbbe f9f8 	udiv	r9, lr, r8
 80002b4:	0c22      	lsrs	r2, r4, #16
 80002b6:	fb08 e319 	mls	r3, r8, r9, lr
 80002ba:	fb09 fa0c 	mul.w	sl, r9, ip
 80002be:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80002c2:	459a      	cmp	sl, r3
 80002c4:	d928      	bls.n	8000318 <__udivmoddi4+0xa4>
 80002c6:	18eb      	adds	r3, r5, r3
 80002c8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80002cc:	d204      	bcs.n	80002d8 <__udivmoddi4+0x64>
 80002ce:	459a      	cmp	sl, r3
 80002d0:	d902      	bls.n	80002d8 <__udivmoddi4+0x64>
 80002d2:	f1a9 0002 	sub.w	r0, r9, #2
 80002d6:	442b      	add	r3, r5
 80002d8:	eba3 030a 	sub.w	r3, r3, sl
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb3 f2f8 	udiv	r2, r3, r8
 80002e2:	fb08 3312 	mls	r3, r8, r2, r3
 80002e6:	fb02 fc0c 	mul.w	ip, r2, ip
 80002ea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ee:	45a4      	cmp	ip, r4
 80002f0:	d914      	bls.n	800031c <__udivmoddi4+0xa8>
 80002f2:	192c      	adds	r4, r5, r4
 80002f4:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80002f8:	d203      	bcs.n	8000302 <__udivmoddi4+0x8e>
 80002fa:	45a4      	cmp	ip, r4
 80002fc:	d901      	bls.n	8000302 <__udivmoddi4+0x8e>
 80002fe:	1e93      	subs	r3, r2, #2
 8000300:	442c      	add	r4, r5
 8000302:	eba4 040c 	sub.w	r4, r4, ip
 8000306:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800030a:	b11e      	cbz	r6, 8000314 <__udivmoddi4+0xa0>
 800030c:	40fc      	lsrs	r4, r7
 800030e:	2300      	movs	r3, #0
 8000310:	6034      	str	r4, [r6, #0]
 8000312:	6073      	str	r3, [r6, #4]
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	4648      	mov	r0, r9
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0x64>
 800031c:	4613      	mov	r3, r2
 800031e:	e7f0      	b.n	8000302 <__udivmoddi4+0x8e>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xb0>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	bb8f      	cbnz	r7, 800038a <__udivmoddi4+0x116>
 8000326:	eba8 0302 	sub.w	r3, r8, r2
 800032a:	2101      	movs	r1, #1
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	b2aa      	uxth	r2, r5
 8000332:	fbb3 fcfe 	udiv	ip, r3, lr
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fb0e 331c 	mls	r3, lr, ip, r3
 800033c:	fb0c f802 	mul.w	r8, ip, r2
 8000340:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000344:	4598      	cmp	r8, r3
 8000346:	d963      	bls.n	8000410 <__udivmoddi4+0x19c>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d204      	bcs.n	800035a <__udivmoddi4+0xe6>
 8000350:	4598      	cmp	r8, r3
 8000352:	d902      	bls.n	800035a <__udivmoddi4+0xe6>
 8000354:	f1ac 0002 	sub.w	r0, ip, #2
 8000358:	442b      	add	r3, r5
 800035a:	eba3 0308 	sub.w	r3, r3, r8
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb3 fcfe 	udiv	ip, r3, lr
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	fb0c f202 	mul.w	r2, ip, r2
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	42a2      	cmp	r2, r4
 8000372:	d94f      	bls.n	8000414 <__udivmoddi4+0x1a0>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 800037a:	d204      	bcs.n	8000386 <__udivmoddi4+0x112>
 800037c:	42a2      	cmp	r2, r4
 800037e:	d902      	bls.n	8000386 <__udivmoddi4+0x112>
 8000380:	f1ac 0302 	sub.w	r3, ip, #2
 8000384:	442c      	add	r4, r5
 8000386:	1aa4      	subs	r4, r4, r2
 8000388:	e7bd      	b.n	8000306 <__udivmoddi4+0x92>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	fa28 f90c 	lsr.w	r9, r8, ip
 8000392:	fa08 f307 	lsl.w	r3, r8, r7
 8000396:	fa20 fc0c 	lsr.w	ip, r0, ip
 800039a:	40bd      	lsls	r5, r7
 800039c:	ea4c 0203 	orr.w	r2, ip, r3
 80003a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a4:	b2ab      	uxth	r3, r5
 80003a6:	fbb9 fcfe 	udiv	ip, r9, lr
 80003aa:	0c11      	lsrs	r1, r2, #16
 80003ac:	fb0e 901c 	mls	r0, lr, ip, r9
 80003b0:	fb0c f803 	mul.w	r8, ip, r3
 80003b4:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 80003b8:	4580      	cmp	r8, r0
 80003ba:	fa04 f407 	lsl.w	r4, r4, r7
 80003be:	d923      	bls.n	8000408 <__udivmoddi4+0x194>
 80003c0:	1828      	adds	r0, r5, r0
 80003c2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80003c6:	d204      	bcs.n	80003d2 <__udivmoddi4+0x15e>
 80003c8:	4580      	cmp	r8, r0
 80003ca:	d902      	bls.n	80003d2 <__udivmoddi4+0x15e>
 80003cc:	f1ac 0102 	sub.w	r1, ip, #2
 80003d0:	4428      	add	r0, r5
 80003d2:	eba0 0008 	sub.w	r0, r0, r8
 80003d6:	b292      	uxth	r2, r2
 80003d8:	fbb0 fcfe 	udiv	ip, r0, lr
 80003dc:	fb0e 001c 	mls	r0, lr, ip, r0
 80003e0:	fb0c f803 	mul.w	r8, ip, r3
 80003e4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 80003e8:	4598      	cmp	r8, r3
 80003ea:	d90f      	bls.n	800040c <__udivmoddi4+0x198>
 80003ec:	18eb      	adds	r3, r5, r3
 80003ee:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80003f2:	d204      	bcs.n	80003fe <__udivmoddi4+0x18a>
 80003f4:	4598      	cmp	r8, r3
 80003f6:	d902      	bls.n	80003fe <__udivmoddi4+0x18a>
 80003f8:	f1ac 0202 	sub.w	r2, ip, #2
 80003fc:	442b      	add	r3, r5
 80003fe:	eba3 0308 	sub.w	r3, r3, r8
 8000402:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000406:	e791      	b.n	800032c <__udivmoddi4+0xb8>
 8000408:	4661      	mov	r1, ip
 800040a:	e7e2      	b.n	80003d2 <__udivmoddi4+0x15e>
 800040c:	4662      	mov	r2, ip
 800040e:	e7f6      	b.n	80003fe <__udivmoddi4+0x18a>
 8000410:	4660      	mov	r0, ip
 8000412:	e7a2      	b.n	800035a <__udivmoddi4+0xe6>
 8000414:	4663      	mov	r3, ip
 8000416:	e7b6      	b.n	8000386 <__udivmoddi4+0x112>
 8000418:	4543      	cmp	r3, r8
 800041a:	d905      	bls.n	8000428 <__udivmoddi4+0x1b4>
 800041c:	b10e      	cbz	r6, 8000422 <__udivmoddi4+0x1ae>
 800041e:	e9c6 0800 	strd	r0, r8, [r6]
 8000422:	2100      	movs	r1, #0
 8000424:	4608      	mov	r0, r1
 8000426:	e775      	b.n	8000314 <__udivmoddi4+0xa0>
 8000428:	fab3 fc83 	clz	ip, r3
 800042c:	f1bc 0f00 	cmp.w	ip, #0
 8000430:	d110      	bne.n	8000454 <__udivmoddi4+0x1e0>
 8000432:	4543      	cmp	r3, r8
 8000434:	d301      	bcc.n	800043a <__udivmoddi4+0x1c6>
 8000436:	4282      	cmp	r2, r0
 8000438:	d80a      	bhi.n	8000450 <__udivmoddi4+0x1dc>
 800043a:	1a84      	subs	r4, r0, r2
 800043c:	eb68 0303 	sbc.w	r3, r8, r3
 8000440:	2001      	movs	r0, #1
 8000442:	469e      	mov	lr, r3
 8000444:	2e00      	cmp	r6, #0
 8000446:	d068      	beq.n	800051a <__udivmoddi4+0x2a6>
 8000448:	e9c6 4e00 	strd	r4, lr, [r6]
 800044c:	2100      	movs	r1, #0
 800044e:	e761      	b.n	8000314 <__udivmoddi4+0xa0>
 8000450:	4660      	mov	r0, ip
 8000452:	e7f7      	b.n	8000444 <__udivmoddi4+0x1d0>
 8000454:	f1cc 0e20 	rsb	lr, ip, #32
 8000458:	fa03 f30c 	lsl.w	r3, r3, ip
 800045c:	fa22 f40e 	lsr.w	r4, r2, lr
 8000460:	431c      	orrs	r4, r3
 8000462:	fa20 f10e 	lsr.w	r1, r0, lr
 8000466:	fa08 f30c 	lsl.w	r3, r8, ip
 800046a:	fa28 fb0e 	lsr.w	fp, r8, lr
 800046e:	4319      	orrs	r1, r3
 8000470:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000474:	fa02 f50c 	lsl.w	r5, r2, ip
 8000478:	fbbb f8f9 	udiv	r8, fp, r9
 800047c:	b2a3      	uxth	r3, r4
 800047e:	fb09 bb18 	mls	fp, r9, r8, fp
 8000482:	0c0a      	lsrs	r2, r1, #16
 8000484:	fb08 fa03 	mul.w	sl, r8, r3
 8000488:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 800048c:	4592      	cmp	sl, r2
 800048e:	fa00 f70c 	lsl.w	r7, r0, ip
 8000492:	d93e      	bls.n	8000512 <__udivmoddi4+0x29e>
 8000494:	18a2      	adds	r2, r4, r2
 8000496:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x232>
 800049c:	4592      	cmp	sl, r2
 800049e:	d902      	bls.n	80004a6 <__udivmoddi4+0x232>
 80004a0:	f1a8 0002 	sub.w	r0, r8, #2
 80004a4:	4422      	add	r2, r4
 80004a6:	eba2 020a 	sub.w	r2, r2, sl
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb2 f8f9 	udiv	r8, r2, r9
 80004b0:	fb09 2218 	mls	r2, r9, r8, r2
 80004b4:	fb08 f303 	mul.w	r3, r8, r3
 80004b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80004bc:	4293      	cmp	r3, r2
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x2a2>
 80004c0:	18a2      	adds	r2, r4, r2
 80004c2:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80004c6:	d204      	bcs.n	80004d2 <__udivmoddi4+0x25e>
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x25e>
 80004cc:	f1a8 0102 	sub.w	r1, r8, #2
 80004d0:	4422      	add	r2, r4
 80004d2:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 80004d6:	fba0 9805 	umull	r9, r8, r0, r5
 80004da:	1ad2      	subs	r2, r2, r3
 80004dc:	4542      	cmp	r2, r8
 80004de:	464b      	mov	r3, r9
 80004e0:	4641      	mov	r1, r8
 80004e2:	d302      	bcc.n	80004ea <__udivmoddi4+0x276>
 80004e4:	d106      	bne.n	80004f4 <__udivmoddi4+0x280>
 80004e6:	454f      	cmp	r7, r9
 80004e8:	d204      	bcs.n	80004f4 <__udivmoddi4+0x280>
 80004ea:	ebb9 0305 	subs.w	r3, r9, r5
 80004ee:	eb68 0104 	sbc.w	r1, r8, r4
 80004f2:	3801      	subs	r0, #1
 80004f4:	b18e      	cbz	r6, 800051a <__udivmoddi4+0x2a6>
 80004f6:	1afc      	subs	r4, r7, r3
 80004f8:	eb62 0701 	sbc.w	r7, r2, r1
 80004fc:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000500:	fa24 f30c 	lsr.w	r3, r4, ip
 8000504:	ea4e 0303 	orr.w	r3, lr, r3
 8000508:	fa27 f70c 	lsr.w	r7, r7, ip
 800050c:	e9c6 3700 	strd	r3, r7, [r6]
 8000510:	e79c      	b.n	800044c <__udivmoddi4+0x1d8>
 8000512:	4640      	mov	r0, r8
 8000514:	e7c7      	b.n	80004a6 <__udivmoddi4+0x232>
 8000516:	4641      	mov	r1, r8
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x25e>
 800051a:	4631      	mov	r1, r6
 800051c:	e6fa      	b.n	8000314 <__udivmoddi4+0xa0>

0800051e <strcmp>:
 800051e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000526:	2a01      	cmp	r2, #1
 8000528:	bf28      	it	cs
 800052a:	429a      	cmpcs	r2, r3
 800052c:	d0f7      	beq.n	800051e <strcmp>
 800052e:	1ad0      	subs	r0, r2, r3
 8000530:	4770      	bx	lr

08000532 <strlen>:
 8000532:	4603      	mov	r3, r0
 8000534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000538:	2a00      	cmp	r2, #0
 800053a:	d1fb      	bne.n	8000534 <strlen+0x2>
 800053c:	1a18      	subs	r0, r3, r0
 800053e:	3801      	subs	r0, #1
 8000540:	4770      	bx	lr
 8000542:	0000      	movs	r0, r0
 8000544:	0000      	movs	r0, r0
	...

08000548 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	b089      	sub	sp, #36	; 0x24
 800054c:	4604      	mov	r4, r0
 800054e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
 8000550:	2000      	movs	r0, #0
 8000552:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = NULL;
 8000556:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800055a:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 800055e:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	list->tail = (sys_dnode_t *)list;
 8000562:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
 8000566:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
	list->head = (sys_dnode_t *)list;
 800056a:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	list->tail = (sys_dnode_t *)list;
 800056e:	f8c4 00dc 	str.w	r0, [r4, #220]	; 0xdc

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 8000572:	b1ed      	cbz	r5, 80005b0 <k_work_queue_start+0x68>
 8000574:	7928      	ldrb	r0, [r5, #4]
 8000576:	b9e8      	cbnz	r0, 80005b4 <k_work_queue_start+0x6c>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8000578:	2001      	movs	r0, #1
	*flagp = flags;
 800057a:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
		/* coverity[OVERRUN] */
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800057e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80005c0 <k_work_queue_start+0x78>
 8000582:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000586:	2000      	movs	r0, #0
 8000588:	9004      	str	r0, [sp, #16]
 800058a:	9303      	str	r3, [sp, #12]
 800058c:	9002      	str	r0, [sp, #8]
 800058e:	9001      	str	r0, [sp, #4]
 8000590:	9400      	str	r4, [sp, #0]
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <k_work_queue_start+0x80>)
 8000594:	4620      	mov	r0, r4
 8000596:	f00a f9d9 	bl	800a94c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 800059a:	b125      	cbz	r5, 80005a6 <k_work_queue_start+0x5e>
 800059c:	6829      	ldr	r1, [r5, #0]
 800059e:	b111      	cbz	r1, 80005a6 <k_work_queue_start+0x5e>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
 80005a0:	4620      	mov	r0, r4
 80005a2:	f00a f9c0 	bl	800a926 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 80005a6:	4620      	mov	r0, r4
 80005a8:	f00a f9c0 	bl	800a92c <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 80005ac:	b009      	add	sp, #36	; 0x24
 80005ae:	bd30      	pop	{r4, r5, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 80005b0:	2001      	movs	r0, #1
 80005b2:	e7e2      	b.n	800057a <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 80005b4:	f240 1001 	movw	r0, #257	; 0x101
 80005b8:	e7df      	b.n	800057a <k_work_queue_start+0x32>
 80005ba:	bf00      	nop
 80005bc:	f3af 8000 	nop.w
 80005c0:	ffffffff 	.word	0xffffffff
 80005c4:	ffffffff 	.word	0xffffffff
 80005c8:	08006399 	.word	0x08006399

080005cc <lora_receive_cb>:
        }
    }
}

void lora_receive_cb(const struct device *dev, uint8_t *data, uint16_t size, int16_t rssi, int8_t snr)
{
 80005cc:	b510      	push	{r4, lr}
 80005ce:	4604      	mov	r4, r0
 80005d0:	4608      	mov	r0, r1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80005d2:	490b      	ldr	r1, [pc, #44]	; (8000600 <lora_receive_cb+0x34>)
 80005d4:	f00a fd99 	bl	800b10a <memcpy>
 * @return 0 when reception successfully setup, negative on error
 */
static inline int lora_recv_async(const struct device *dev, lora_recv_cb cb,
  lora_recv_error_timeout_cb error_timeout_cb)
{
	const struct lora_driver_api *api =
 80005d8:	68a3      	ldr	r3, [r4, #8]
		(const struct lora_driver_api *)dev->api;

	return api->recv_async(dev, cb, error_timeout_cb);
 80005da:	691b      	ldr	r3, [r3, #16]
 80005dc:	2200      	movs	r2, #0
 80005de:	4611      	mov	r1, r2
 80005e0:	4620      	mov	r0, r4
 80005e2:	4798      	blx	r3
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <lora_receive_cb+0x38>)
 80005e6:	2203      	movs	r2, #3
 80005e8:	f3bf 8f5b 	dmb	ish
 80005ec:	e853 1f00 	ldrex	r1, [r3]
 80005f0:	e843 2000 	strex	r0, r2, [r3]
 80005f4:	2800      	cmp	r0, #0
 80005f6:	d1f9      	bne.n	80005ec <lora_receive_cb+0x20>
 80005f8:	f3bf 8f5b 	dmb	ish
    memcpy(data, radio_buf_tx, size);
    lora_recv_async(dev, NULL, NULL);
    atomic_set(&atomic_cur_state, STATE_TRANSMIT);
}
 80005fc:	bd10      	pop	{r4, pc}
 80005fe:	bf00      	nop
 8000600:	20000840 	.word	0x20000840
 8000604:	20000150 	.word	0x20000150

08000608 <print_modem_cfg>:
    }
}


void print_modem_cfg(const struct device *dev, struct lora_modem_config *cfg)
{
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	b083      	sub	sp, #12
 800060c:	4604      	mov	r4, r0
 800060e:	460d      	mov	r5, r1
    static uint8_t cfg_buf[UART_TX_BUF_LEN] = {0};

    sprintf(cfg_buf, "Current modem configuration:\n");
 8000610:	4e9d      	ldr	r6, [pc, #628]	; (8000888 <print_modem_cfg+0x280>)
 8000612:	4f9e      	ldr	r7, [pc, #632]	; (800088c <print_modem_cfg+0x284>)
 8000614:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000616:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000618:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800061c:	c607      	stmia	r6!, {r0, r1, r2}
 800061e:	8033      	strh	r3, [r6, #0]
void lora_rx_error_timeout_cb(const struct device *dev);

static inline void send_to_terminal(const struct device *dev, uint8_t *buf_tx)
{
    /* Set atomic_uart_tx_done in false */
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000620:	e006      	b.n	8000630 <print_modem_cfg+0x28>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000622:	f3bf 8f5b 	dmb	ish
 8000626:	d111      	bne.n	800064c <print_modem_cfg+0x44>
	return z_impl_k_sleep(timeout);
 8000628:	200a      	movs	r0, #10
 800062a:	2100      	movs	r1, #0
 800062c:	f006 fac4 	bl	8006bb8 <z_impl_k_sleep>
 8000630:	4b97      	ldr	r3, [pc, #604]	; (8000890 <print_modem_cfg+0x288>)
 8000632:	2200      	movs	r2, #0
 8000634:	f3bf 8f5b 	dmb	ish
 8000638:	e853 cf00 	ldrex	ip, [r3]
 800063c:	f1bc 0f01 	cmp.w	ip, #1
 8000640:	d1ef      	bne.n	8000622 <print_modem_cfg+0x1a>
 8000642:	e843 2100 	strex	r1, r2, [r3]
 8000646:	2900      	cmp	r1, #0
 8000648:	d0eb      	beq.n	8000622 <print_modem_cfg+0x1a>
 800064a:	e7f5      	b.n	8000638 <print_modem_cfg+0x30>
        k_sleep(K_MSEC(1));
    }
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 800064c:	4e8e      	ldr	r6, [pc, #568]	; (8000888 <print_modem_cfg+0x280>)
 800064e:	4630      	mov	r0, r6
 8000650:	f7ff ff6f 	bl	8000532 <strlen>
 8000654:	4602      	mov	r2, r0
static inline int z_impl_uart_tx(const struct device *dev, const uint8_t *buf,
				 size_t len, int32_t timeout)

{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
 8000656:	68a3      	ldr	r3, [r4, #8]
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
 8000658:	685f      	ldr	r7, [r3, #4]
 800065a:	2300      	movs	r3, #0
 800065c:	4631      	mov	r1, r6
 800065e:	4620      	mov	r0, r4
 8000660:	47b8      	blx	r7
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000662:	f3bf 8f5b 	dmb	ish
 8000666:	4b8a      	ldr	r3, [pc, #552]	; (8000890 <print_modem_cfg+0x288>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 800066e:	b923      	cbnz	r3, 800067a <print_modem_cfg+0x72>
 8000670:	2064      	movs	r0, #100	; 0x64
 8000672:	2100      	movs	r1, #0
 8000674:	f006 faa0 	bl	8006bb8 <z_impl_k_sleep>
 8000678:	e7f3      	b.n	8000662 <print_modem_cfg+0x5a>
    send_to_terminal(dev, cfg_buf);

    sprintf(cfg_buf, "Frequency: %lu kHz\n", (cfg->frequency)/1000);
 800067a:	682b      	ldr	r3, [r5, #0]
 800067c:	4a85      	ldr	r2, [pc, #532]	; (8000894 <print_modem_cfg+0x28c>)
 800067e:	fba2 2303 	umull	r2, r3, r2, r3
 8000682:	099b      	lsrs	r3, r3, #6
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	4b84      	ldr	r3, [pc, #528]	; (8000898 <print_modem_cfg+0x290>)
 8000688:	2240      	movs	r2, #64	; 0x40
 800068a:	2100      	movs	r1, #0
 800068c:	487e      	ldr	r0, [pc, #504]	; (8000888 <print_modem_cfg+0x280>)
 800068e:	f00a fd52 	bl	800b136 <__sprintf_chk>
static inline void send_to_terminal(const struct device *dev, uint8_t *buf_tx)
 8000692:	e006      	b.n	80006a2 <print_modem_cfg+0x9a>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000694:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000698:	d110      	bne.n	80006bc <print_modem_cfg+0xb4>
 800069a:	200a      	movs	r0, #10
 800069c:	2100      	movs	r1, #0
 800069e:	f006 fa8b 	bl	8006bb8 <z_impl_k_sleep>
 80006a2:	4b7b      	ldr	r3, [pc, #492]	; (8000890 <print_modem_cfg+0x288>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f3bf 8f5b 	dmb	ish
 80006aa:	e853 1f00 	ldrex	r1, [r3]
 80006ae:	2901      	cmp	r1, #1
 80006b0:	d1f0      	bne.n	8000694 <print_modem_cfg+0x8c>
 80006b2:	e843 2000 	strex	r0, r2, [r3]
 80006b6:	2800      	cmp	r0, #0
 80006b8:	d0ec      	beq.n	8000694 <print_modem_cfg+0x8c>
 80006ba:	e7f6      	b.n	80006aa <print_modem_cfg+0xa2>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 80006bc:	4e72      	ldr	r6, [pc, #456]	; (8000888 <print_modem_cfg+0x280>)
 80006be:	4630      	mov	r0, r6
 80006c0:	f7ff ff37 	bl	8000532 <strlen>
 80006c4:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 80006c6:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 80006c8:	685f      	ldr	r7, [r3, #4]
 80006ca:	2300      	movs	r3, #0
 80006cc:	4631      	mov	r1, r6
 80006ce:	4620      	mov	r0, r4
 80006d0:	47b8      	blx	r7
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80006d2:	f3bf 8f5b 	dmb	ish
 80006d6:	4b6e      	ldr	r3, [pc, #440]	; (8000890 <print_modem_cfg+0x288>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 80006de:	b923      	cbnz	r3, 80006ea <print_modem_cfg+0xe2>
 80006e0:	2064      	movs	r0, #100	; 0x64
 80006e2:	2100      	movs	r1, #0
 80006e4:	f006 fa68 	bl	8006bb8 <z_impl_k_sleep>
 80006e8:	e7f3      	b.n	80006d2 <print_modem_cfg+0xca>
    send_to_terminal(dev, cfg_buf);

    switch (cfg->bandwidth) {
 80006ea:	792b      	ldrb	r3, [r5, #4]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d00b      	beq.n	8000708 <print_modem_cfg+0x100>
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d012      	beq.n	800071a <print_modem_cfg+0x112>
 80006f4:	bb13      	cbnz	r3, 800073c <print_modem_cfg+0x134>
        case BW_125_KHZ:
            sprintf(cfg_buf, "Bandwidth: %u kHz\n", 125);
 80006f6:	237d      	movs	r3, #125	; 0x7d
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	4b68      	ldr	r3, [pc, #416]	; (800089c <print_modem_cfg+0x294>)
 80006fc:	2240      	movs	r2, #64	; 0x40
 80006fe:	2100      	movs	r1, #0
 8000700:	4861      	ldr	r0, [pc, #388]	; (8000888 <print_modem_cfg+0x280>)
 8000702:	f00a fd18 	bl	800b136 <__sprintf_chk>
            break;
 8000706:	e019      	b.n	800073c <print_modem_cfg+0x134>
        case BW_250_KHZ:
            sprintf(cfg_buf, "Bandwidth: %u kHz\n", 250);
 8000708:	23fa      	movs	r3, #250	; 0xfa
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	4b63      	ldr	r3, [pc, #396]	; (800089c <print_modem_cfg+0x294>)
 800070e:	2240      	movs	r2, #64	; 0x40
 8000710:	2100      	movs	r1, #0
 8000712:	485d      	ldr	r0, [pc, #372]	; (8000888 <print_modem_cfg+0x280>)
 8000714:	f00a fd0f 	bl	800b136 <__sprintf_chk>
            break;
 8000718:	e010      	b.n	800073c <print_modem_cfg+0x134>
        case BW_500_KHZ:
            sprintf(cfg_buf, "Bandwidth: %u kHz\n", 500);
 800071a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	4b5e      	ldr	r3, [pc, #376]	; (800089c <print_modem_cfg+0x294>)
 8000722:	2240      	movs	r2, #64	; 0x40
 8000724:	2100      	movs	r1, #0
 8000726:	4858      	ldr	r0, [pc, #352]	; (8000888 <print_modem_cfg+0x280>)
 8000728:	f00a fd05 	bl	800b136 <__sprintf_chk>
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 800072c:	e006      	b.n	800073c <print_modem_cfg+0x134>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800072e:	f3bf 8f5b 	dmb	ish
 8000732:	d110      	bne.n	8000756 <print_modem_cfg+0x14e>
 8000734:	200a      	movs	r0, #10
 8000736:	2100      	movs	r1, #0
 8000738:	f006 fa3e 	bl	8006bb8 <z_impl_k_sleep>
 800073c:	4b54      	ldr	r3, [pc, #336]	; (8000890 <print_modem_cfg+0x288>)
 800073e:	2200      	movs	r2, #0
 8000740:	f3bf 8f5b 	dmb	ish
 8000744:	e853 1f00 	ldrex	r1, [r3]
 8000748:	2901      	cmp	r1, #1
 800074a:	d1f0      	bne.n	800072e <print_modem_cfg+0x126>
 800074c:	e843 2000 	strex	r0, r2, [r3]
 8000750:	2800      	cmp	r0, #0
 8000752:	d0ec      	beq.n	800072e <print_modem_cfg+0x126>
 8000754:	e7f6      	b.n	8000744 <print_modem_cfg+0x13c>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000756:	4e4c      	ldr	r6, [pc, #304]	; (8000888 <print_modem_cfg+0x280>)
 8000758:	4630      	mov	r0, r6
 800075a:	f7ff feea 	bl	8000532 <strlen>
 800075e:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8000760:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8000762:	685f      	ldr	r7, [r3, #4]
 8000764:	2300      	movs	r3, #0
 8000766:	4631      	mov	r1, r6
 8000768:	4620      	mov	r0, r4
 800076a:	47b8      	blx	r7
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&timeout, K_SYSCALL_UART_TX);
	}
#endif
	compiler_barrier();
	return z_impl_uart_tx(dev, buf, len, timeout);
 800076c:	e003      	b.n	8000776 <print_modem_cfg+0x16e>
 800076e:	2064      	movs	r0, #100	; 0x64
 8000770:	2100      	movs	r1, #0
 8000772:	f006 fa21 	bl	8006bb8 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000776:	f3bf 8f5b 	dmb	ish
 800077a:	4b45      	ldr	r3, [pc, #276]	; (8000890 <print_modem_cfg+0x288>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f3      	beq.n	800076e <print_modem_cfg+0x166>
            break;
    }
    send_to_terminal(dev, cfg_buf);

    switch (cfg->datarate) {
 8000786:	796b      	ldrb	r3, [r5, #5]
 8000788:	3b06      	subs	r3, #6
 800078a:	2b06      	cmp	r3, #6
 800078c:	d839      	bhi.n	8000802 <print_modem_cfg+0x1fa>
 800078e:	e8df f003 	tbb	[pc, r3]
 8000792:	0a04      	.short	0x0a04
 8000794:	231c1610 	.word	0x231c1610
 8000798:	2a          	.byte	0x2a
 8000799:	00          	.byte	0x00
        case SF_6:
            sprintf(cfg_buf, "Datarate: SF_6\n");
 800079a:	4e3b      	ldr	r6, [pc, #236]	; (8000888 <print_modem_cfg+0x280>)
 800079c:	4b40      	ldr	r3, [pc, #256]	; (80008a0 <print_modem_cfg+0x298>)
 800079e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            break;
 80007a4:	e02d      	b.n	8000802 <print_modem_cfg+0x1fa>
        case SF_7:
            sprintf(cfg_buf, "Datarate: SF_7\n");
 80007a6:	4e38      	ldr	r6, [pc, #224]	; (8000888 <print_modem_cfg+0x280>)
 80007a8:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <print_modem_cfg+0x29c>)
 80007aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ac:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            break;
 80007b0:	e027      	b.n	8000802 <print_modem_cfg+0x1fa>
        case SF_8:
            sprintf(cfg_buf, "Datarate: SF_8\n");
 80007b2:	4e35      	ldr	r6, [pc, #212]	; (8000888 <print_modem_cfg+0x280>)
 80007b4:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <print_modem_cfg+0x2a0>)
 80007b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            break;
 80007bc:	e021      	b.n	8000802 <print_modem_cfg+0x1fa>
        case SF_9:
            sprintf(cfg_buf, "Datarate: SF_9\n");
 80007be:	4e32      	ldr	r6, [pc, #200]	; (8000888 <print_modem_cfg+0x280>)
 80007c0:	4b3a      	ldr	r3, [pc, #232]	; (80008ac <print_modem_cfg+0x2a4>)
 80007c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            break;
 80007c8:	e01b      	b.n	8000802 <print_modem_cfg+0x1fa>
        case SF_10:
            sprintf(cfg_buf, "Datarate: SF_10\n");
 80007ca:	4e2f      	ldr	r6, [pc, #188]	; (8000888 <print_modem_cfg+0x280>)
 80007cc:	4f38      	ldr	r7, [pc, #224]	; (80008b0 <print_modem_cfg+0x2a8>)
 80007ce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80007d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	7033      	strb	r3, [r6, #0]
            break;
 80007d6:	e014      	b.n	8000802 <print_modem_cfg+0x1fa>
        case SF_11:
            sprintf(cfg_buf, "Datarate: SF_11\n");
 80007d8:	4e2b      	ldr	r6, [pc, #172]	; (8000888 <print_modem_cfg+0x280>)
 80007da:	4f36      	ldr	r7, [pc, #216]	; (80008b4 <print_modem_cfg+0x2ac>)
 80007dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80007de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	7033      	strb	r3, [r6, #0]
            break;
 80007e4:	e00d      	b.n	8000802 <print_modem_cfg+0x1fa>
        case SF_12:
            sprintf(cfg_buf, "Datarate: SF_12\n");
 80007e6:	4e28      	ldr	r6, [pc, #160]	; (8000888 <print_modem_cfg+0x280>)
 80007e8:	4f33      	ldr	r7, [pc, #204]	; (80008b8 <print_modem_cfg+0x2b0>)
 80007ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80007ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	7033      	strb	r3, [r6, #0]
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 80007f2:	e006      	b.n	8000802 <print_modem_cfg+0x1fa>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80007f4:	f3bf 8f5b 	dmb	ish
 80007f8:	d110      	bne.n	800081c <print_modem_cfg+0x214>
 80007fa:	200a      	movs	r0, #10
 80007fc:	2100      	movs	r1, #0
 80007fe:	f006 f9db 	bl	8006bb8 <z_impl_k_sleep>
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <print_modem_cfg+0x288>)
 8000804:	2200      	movs	r2, #0
 8000806:	f3bf 8f5b 	dmb	ish
 800080a:	e853 1f00 	ldrex	r1, [r3]
 800080e:	2901      	cmp	r1, #1
 8000810:	d1f0      	bne.n	80007f4 <print_modem_cfg+0x1ec>
 8000812:	e843 2000 	strex	r0, r2, [r3]
 8000816:	2800      	cmp	r0, #0
 8000818:	d0ec      	beq.n	80007f4 <print_modem_cfg+0x1ec>
 800081a:	e7f6      	b.n	800080a <print_modem_cfg+0x202>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 800081c:	4e1a      	ldr	r6, [pc, #104]	; (8000888 <print_modem_cfg+0x280>)
 800081e:	4630      	mov	r0, r6
 8000820:	f7ff fe87 	bl	8000532 <strlen>
 8000824:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8000826:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8000828:	685f      	ldr	r7, [r3, #4]
 800082a:	2300      	movs	r3, #0
 800082c:	4631      	mov	r1, r6
 800082e:	4620      	mov	r0, r4
 8000830:	47b8      	blx	r7
 8000832:	e003      	b.n	800083c <print_modem_cfg+0x234>
 8000834:	2064      	movs	r0, #100	; 0x64
 8000836:	2100      	movs	r1, #0
 8000838:	f006 f9be 	bl	8006bb8 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800083c:	f3bf 8f5b 	dmb	ish
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <print_modem_cfg+0x288>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0f3      	beq.n	8000834 <print_modem_cfg+0x22c>
            break;
    }
    send_to_terminal(dev, cfg_buf);

    switch (cfg->coding_rate) {
 800084c:	79ab      	ldrb	r3, [r5, #6]
 800084e:	3b01      	subs	r3, #1
 8000850:	2b03      	cmp	r3, #3
 8000852:	d847      	bhi.n	80008e4 <print_modem_cfg+0x2dc>
 8000854:	e8df f003 	tbb	[pc, r3]
 8000858:	38100902 	.word	0x38100902
        case CR_4_5:
            sprintf(cfg_buf, "Coding rate: 4/5\n");
 800085c:	4e0a      	ldr	r6, [pc, #40]	; (8000888 <print_modem_cfg+0x280>)
 800085e:	4f17      	ldr	r7, [pc, #92]	; (80008bc <print_modem_cfg+0x2b4>)
 8000860:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000862:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	8033      	strh	r3, [r6, #0]
            break;
 8000868:	e03c      	b.n	80008e4 <print_modem_cfg+0x2dc>
        case CR_4_6:
            sprintf(cfg_buf, "Coding rate: 4/6\n");
 800086a:	4e07      	ldr	r6, [pc, #28]	; (8000888 <print_modem_cfg+0x280>)
 800086c:	4f14      	ldr	r7, [pc, #80]	; (80008c0 <print_modem_cfg+0x2b8>)
 800086e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000870:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	8033      	strh	r3, [r6, #0]
            break;
 8000876:	e035      	b.n	80008e4 <print_modem_cfg+0x2dc>
        case CR_4_7:
            sprintf(cfg_buf, "Coding rate: 4/7\n");
 8000878:	4e03      	ldr	r6, [pc, #12]	; (8000888 <print_modem_cfg+0x280>)
 800087a:	4f12      	ldr	r7, [pc, #72]	; (80008c4 <print_modem_cfg+0x2bc>)
 800087c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800087e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	8033      	strh	r3, [r6, #0]
            break;
 8000884:	e02e      	b.n	80008e4 <print_modem_cfg+0x2dc>
 8000886:	bf00      	nop
 8000888:	200007bc 	.word	0x200007bc
 800088c:	0800bb5c 	.word	0x0800bb5c
 8000890:	20000154 	.word	0x20000154
 8000894:	10624dd3 	.word	0x10624dd3
 8000898:	0800bb7c 	.word	0x0800bb7c
 800089c:	0800bb90 	.word	0x0800bb90
 80008a0:	0800bba4 	.word	0x0800bba4
 80008a4:	0800bbb4 	.word	0x0800bbb4
 80008a8:	0800bbc4 	.word	0x0800bbc4
 80008ac:	0800bbd4 	.word	0x0800bbd4
 80008b0:	0800bbe4 	.word	0x0800bbe4
 80008b4:	0800bbf8 	.word	0x0800bbf8
 80008b8:	0800bc0c 	.word	0x0800bc0c
 80008bc:	0800bc20 	.word	0x0800bc20
 80008c0:	0800bc34 	.word	0x0800bc34
 80008c4:	0800bc48 	.word	0x0800bc48
        case CR_4_8:
            sprintf(cfg_buf, "Coding rate: 4/8\n");
 80008c8:	4e9e      	ldr	r6, [pc, #632]	; (8000b44 <print_modem_cfg+0x53c>)
 80008ca:	4f9f      	ldr	r7, [pc, #636]	; (8000b48 <print_modem_cfg+0x540>)
 80008cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80008ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	8033      	strh	r3, [r6, #0]
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 80008d4:	e006      	b.n	80008e4 <print_modem_cfg+0x2dc>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80008d6:	f3bf 8f5b 	dmb	ish
 80008da:	d110      	bne.n	80008fe <print_modem_cfg+0x2f6>
 80008dc:	200a      	movs	r0, #10
 80008de:	2100      	movs	r1, #0
 80008e0:	f006 f96a 	bl	8006bb8 <z_impl_k_sleep>
 80008e4:	4b99      	ldr	r3, [pc, #612]	; (8000b4c <print_modem_cfg+0x544>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f3bf 8f5b 	dmb	ish
 80008ec:	e853 1f00 	ldrex	r1, [r3]
 80008f0:	2901      	cmp	r1, #1
 80008f2:	d1f0      	bne.n	80008d6 <print_modem_cfg+0x2ce>
 80008f4:	e843 2000 	strex	r0, r2, [r3]
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d0ec      	beq.n	80008d6 <print_modem_cfg+0x2ce>
 80008fc:	e7f6      	b.n	80008ec <print_modem_cfg+0x2e4>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 80008fe:	4e91      	ldr	r6, [pc, #580]	; (8000b44 <print_modem_cfg+0x53c>)
 8000900:	4630      	mov	r0, r6
 8000902:	f7ff fe16 	bl	8000532 <strlen>
 8000906:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8000908:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 800090a:	685f      	ldr	r7, [r3, #4]
 800090c:	2300      	movs	r3, #0
 800090e:	4631      	mov	r1, r6
 8000910:	4620      	mov	r0, r4
 8000912:	47b8      	blx	r7
 8000914:	e003      	b.n	800091e <print_modem_cfg+0x316>
 8000916:	2064      	movs	r0, #100	; 0x64
 8000918:	2100      	movs	r1, #0
 800091a:	f006 f94d 	bl	8006bb8 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800091e:	f3bf 8f5b 	dmb	ish
 8000922:	4b8a      	ldr	r3, [pc, #552]	; (8000b4c <print_modem_cfg+0x544>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 800092a:	2b00      	cmp	r3, #0
 800092c:	d0f3      	beq.n	8000916 <print_modem_cfg+0x30e>
            break;
    }
    send_to_terminal(dev, cfg_buf);

    sprintf(cfg_buf, "Preamble length: %u symb\n", cfg->preamble_len);
 800092e:	892b      	ldrh	r3, [r5, #8]
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	4b87      	ldr	r3, [pc, #540]	; (8000b50 <print_modem_cfg+0x548>)
 8000934:	2240      	movs	r2, #64	; 0x40
 8000936:	2100      	movs	r1, #0
 8000938:	4882      	ldr	r0, [pc, #520]	; (8000b44 <print_modem_cfg+0x53c>)
 800093a:	f00a fbfc 	bl	800b136 <__sprintf_chk>
static inline void send_to_terminal(const struct device *dev, uint8_t *buf_tx)
 800093e:	e006      	b.n	800094e <print_modem_cfg+0x346>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000940:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000944:	d110      	bne.n	8000968 <print_modem_cfg+0x360>
 8000946:	200a      	movs	r0, #10
 8000948:	2100      	movs	r1, #0
 800094a:	f006 f935 	bl	8006bb8 <z_impl_k_sleep>
 800094e:	4b7f      	ldr	r3, [pc, #508]	; (8000b4c <print_modem_cfg+0x544>)
 8000950:	2200      	movs	r2, #0
 8000952:	f3bf 8f5b 	dmb	ish
 8000956:	e853 1f00 	ldrex	r1, [r3]
 800095a:	2901      	cmp	r1, #1
 800095c:	d1f0      	bne.n	8000940 <print_modem_cfg+0x338>
 800095e:	e843 2000 	strex	r0, r2, [r3]
 8000962:	2800      	cmp	r0, #0
 8000964:	d0ec      	beq.n	8000940 <print_modem_cfg+0x338>
 8000966:	e7f6      	b.n	8000956 <print_modem_cfg+0x34e>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000968:	4e76      	ldr	r6, [pc, #472]	; (8000b44 <print_modem_cfg+0x53c>)
 800096a:	4630      	mov	r0, r6
 800096c:	f7ff fde1 	bl	8000532 <strlen>
 8000970:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8000972:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8000974:	685f      	ldr	r7, [r3, #4]
 8000976:	2300      	movs	r3, #0
 8000978:	4631      	mov	r1, r6
 800097a:	4620      	mov	r0, r4
 800097c:	47b8      	blx	r7
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800097e:	f3bf 8f5b 	dmb	ish
 8000982:	4b72      	ldr	r3, [pc, #456]	; (8000b4c <print_modem_cfg+0x544>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 800098a:	b153      	cbz	r3, 80009a2 <print_modem_cfg+0x39a>
    send_to_terminal(dev, cfg_buf);

    if (cfg->fixed_len) {
 800098c:	7aeb      	ldrb	r3, [r5, #11]
 800098e:	2b00      	cmp	r3, #0
 8000990:	f000 8098 	beq.w	8000ac4 <print_modem_cfg+0x4bc>
        sprintf(cfg_buf, "Fixed length: true\n");
 8000994:	4e6b      	ldr	r6, [pc, #428]	; (8000b44 <print_modem_cfg+0x53c>)
 8000996:	4f6f      	ldr	r7, [pc, #444]	; (8000b54 <print_modem_cfg+0x54c>)
 8000998:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800099a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	6033      	str	r3, [r6, #0]
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 80009a0:	e008      	b.n	80009b4 <print_modem_cfg+0x3ac>
 80009a2:	2064      	movs	r0, #100	; 0x64
 80009a4:	2100      	movs	r1, #0
 80009a6:	f006 f907 	bl	8006bb8 <z_impl_k_sleep>
 80009aa:	e7e8      	b.n	800097e <print_modem_cfg+0x376>
 80009ac:	200a      	movs	r0, #10
 80009ae:	2100      	movs	r1, #0
 80009b0:	f006 f902 	bl	8006bb8 <z_impl_k_sleep>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80009b4:	4b65      	ldr	r3, [pc, #404]	; (8000b4c <print_modem_cfg+0x544>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	f3bf 8f5b 	dmb	ish
 80009bc:	e853 1f00 	ldrex	r1, [r3]
 80009c0:	2901      	cmp	r1, #1
 80009c2:	d103      	bne.n	80009cc <print_modem_cfg+0x3c4>
 80009c4:	e843 2000 	strex	r0, r2, [r3]
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d1f7      	bne.n	80009bc <print_modem_cfg+0x3b4>
 80009cc:	f3bf 8f5b 	dmb	ish
 80009d0:	d0ec      	beq.n	80009ac <print_modem_cfg+0x3a4>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 80009d2:	4e5c      	ldr	r6, [pc, #368]	; (8000b44 <print_modem_cfg+0x53c>)
 80009d4:	4630      	mov	r0, r6
 80009d6:	f7ff fdac 	bl	8000532 <strlen>
 80009da:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 80009dc:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 80009de:	685f      	ldr	r7, [r3, #4]
 80009e0:	2300      	movs	r3, #0
 80009e2:	4631      	mov	r1, r6
 80009e4:	4620      	mov	r0, r4
 80009e6:	47b8      	blx	r7
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80009e8:	f3bf 8f5b 	dmb	ish
 80009ec:	4b57      	ldr	r3, [pc, #348]	; (8000b4c <print_modem_cfg+0x544>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d056      	beq.n	8000aa6 <print_modem_cfg+0x49e>
        send_to_terminal(dev, cfg_buf);

        sprintf(cfg_buf, "Payload length: %u\n", cfg->payload_len);
 80009f8:	7aab      	ldrb	r3, [r5, #10]
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	4b56      	ldr	r3, [pc, #344]	; (8000b58 <print_modem_cfg+0x550>)
 80009fe:	2240      	movs	r2, #64	; 0x40
 8000a00:	2100      	movs	r1, #0
 8000a02:	4850      	ldr	r0, [pc, #320]	; (8000b44 <print_modem_cfg+0x53c>)
 8000a04:	f00a fb97 	bl	800b136 <__sprintf_chk>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000a08:	4b50      	ldr	r3, [pc, #320]	; (8000b4c <print_modem_cfg+0x544>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f3bf 8f5b 	dmb	ish
 8000a10:	e853 1f00 	ldrex	r1, [r3]
 8000a14:	2901      	cmp	r1, #1
 8000a16:	d103      	bne.n	8000a20 <print_modem_cfg+0x418>
 8000a18:	e843 2000 	strex	r0, r2, [r3]
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d1f7      	bne.n	8000a10 <print_modem_cfg+0x408>
 8000a20:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000a24:	d044      	beq.n	8000ab0 <print_modem_cfg+0x4a8>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000a26:	4e47      	ldr	r6, [pc, #284]	; (8000b44 <print_modem_cfg+0x53c>)
 8000a28:	4630      	mov	r0, r6
 8000a2a:	f7ff fd82 	bl	8000532 <strlen>
 8000a2e:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8000a30:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8000a32:	685f      	ldr	r7, [r3, #4]
 8000a34:	2300      	movs	r3, #0
 8000a36:	4631      	mov	r1, r6
 8000a38:	4620      	mov	r0, r4
 8000a3a:	47b8      	blx	r7
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000a3c:	f3bf 8f5b 	dmb	ish
 8000a40:	4b42      	ldr	r3, [pc, #264]	; (8000b4c <print_modem_cfg+0x544>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d036      	beq.n	8000aba <print_modem_cfg+0x4b2>
    } else {
        sprintf(cfg_buf, "Fixed length: false\n");
        send_to_terminal(dev, cfg_buf);
    }

    sprintf(cfg_buf, "TX power: %d dBm\n", cfg->tx_power);
 8000a4c:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	4b42      	ldr	r3, [pc, #264]	; (8000b5c <print_modem_cfg+0x554>)
 8000a54:	2240      	movs	r2, #64	; 0x40
 8000a56:	2100      	movs	r1, #0
 8000a58:	483a      	ldr	r0, [pc, #232]	; (8000b44 <print_modem_cfg+0x53c>)
 8000a5a:	f00a fb6c 	bl	800b136 <__sprintf_chk>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000a5e:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <print_modem_cfg+0x544>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	f3bf 8f5b 	dmb	ish
 8000a66:	e853 1f00 	ldrex	r1, [r3]
 8000a6a:	2901      	cmp	r1, #1
 8000a6c:	d103      	bne.n	8000a76 <print_modem_cfg+0x46e>
 8000a6e:	e843 2000 	strex	r0, r2, [r3]
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d1f7      	bne.n	8000a66 <print_modem_cfg+0x45e>
 8000a76:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000a7a:	d058      	beq.n	8000b2e <print_modem_cfg+0x526>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000a7c:	4d31      	ldr	r5, [pc, #196]	; (8000b44 <print_modem_cfg+0x53c>)
 8000a7e:	4628      	mov	r0, r5
 8000a80:	f7ff fd57 	bl	8000532 <strlen>
 8000a84:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8000a86:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8000a88:	685e      	ldr	r6, [r3, #4]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	4629      	mov	r1, r5
 8000a8e:	4620      	mov	r0, r4
 8000a90:	47b0      	blx	r6
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000a92:	f3bf 8f5b 	dmb	ish
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <print_modem_cfg+0x544>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d04a      	beq.n	8000b38 <print_modem_cfg+0x530>
    send_to_terminal(dev, cfg_buf);
}
 8000aa2:	b003      	add	sp, #12
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	2064      	movs	r0, #100	; 0x64
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	f006 f885 	bl	8006bb8 <z_impl_k_sleep>
 8000aae:	e79b      	b.n	80009e8 <print_modem_cfg+0x3e0>
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f006 f880 	bl	8006bb8 <z_impl_k_sleep>
 8000ab8:	e7a6      	b.n	8000a08 <print_modem_cfg+0x400>
 8000aba:	2064      	movs	r0, #100	; 0x64
 8000abc:	2100      	movs	r1, #0
 8000abe:	f006 f87b 	bl	8006bb8 <z_impl_k_sleep>
 8000ac2:	e7bb      	b.n	8000a3c <print_modem_cfg+0x434>
        sprintf(cfg_buf, "Fixed length: false\n");
 8000ac4:	4e1f      	ldr	r6, [pc, #124]	; (8000b44 <print_modem_cfg+0x53c>)
 8000ac6:	4f26      	ldr	r7, [pc, #152]	; (8000b60 <print_modem_cfg+0x558>)
 8000ac8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000aca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000acc:	e897 0003 	ldmia.w	r7, {r0, r1}
 8000ad0:	f846 0b04 	str.w	r0, [r6], #4
 8000ad4:	7031      	strb	r1, [r6, #0]
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000ad6:	e003      	b.n	8000ae0 <print_modem_cfg+0x4d8>
 8000ad8:	200a      	movs	r0, #10
 8000ada:	2100      	movs	r1, #0
 8000adc:	f006 f86c 	bl	8006bb8 <z_impl_k_sleep>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <print_modem_cfg+0x544>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f3bf 8f5b 	dmb	ish
 8000ae8:	e853 1f00 	ldrex	r1, [r3]
 8000aec:	2901      	cmp	r1, #1
 8000aee:	d103      	bne.n	8000af8 <print_modem_cfg+0x4f0>
 8000af0:	e843 2000 	strex	r0, r2, [r3]
 8000af4:	2800      	cmp	r0, #0
 8000af6:	d1f7      	bne.n	8000ae8 <print_modem_cfg+0x4e0>
 8000af8:	f3bf 8f5b 	dmb	ish
 8000afc:	d0ec      	beq.n	8000ad8 <print_modem_cfg+0x4d0>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000afe:	4e11      	ldr	r6, [pc, #68]	; (8000b44 <print_modem_cfg+0x53c>)
 8000b00:	4630      	mov	r0, r6
 8000b02:	f7ff fd16 	bl	8000532 <strlen>
 8000b06:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8000b08:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8000b0a:	685f      	ldr	r7, [r3, #4]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	4631      	mov	r1, r6
 8000b10:	4620      	mov	r0, r4
 8000b12:	47b8      	blx	r7
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000b14:	f3bf 8f5b 	dmb	ish
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <print_modem_cfg+0x544>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d193      	bne.n	8000a4c <print_modem_cfg+0x444>
 8000b24:	2064      	movs	r0, #100	; 0x64
 8000b26:	2100      	movs	r1, #0
 8000b28:	f006 f846 	bl	8006bb8 <z_impl_k_sleep>
 8000b2c:	e7f2      	b.n	8000b14 <print_modem_cfg+0x50c>
 8000b2e:	200a      	movs	r0, #10
 8000b30:	2100      	movs	r1, #0
 8000b32:	f006 f841 	bl	8006bb8 <z_impl_k_sleep>
 8000b36:	e792      	b.n	8000a5e <print_modem_cfg+0x456>
 8000b38:	2064      	movs	r0, #100	; 0x64
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f006 f83c 	bl	8006bb8 <z_impl_k_sleep>
 8000b40:	e7a7      	b.n	8000a92 <print_modem_cfg+0x48a>
 8000b42:	bf00      	nop
 8000b44:	200007bc 	.word	0x200007bc
 8000b48:	0800bc5c 	.word	0x0800bc5c
 8000b4c:	20000154 	.word	0x20000154
 8000b50:	0800bc70 	.word	0x0800bc70
 8000b54:	0800bc8c 	.word	0x0800bc8c
 8000b58:	0800bca0 	.word	0x0800bca0
 8000b5c:	0800bccc 	.word	0x0800bccc
 8000b60:	0800bcb4 	.word	0x0800bcb4

08000b64 <change_modem_datarate>:
{
 8000b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b66:	4604      	mov	r4, r0
 8000b68:	460d      	mov	r5, r1
 8000b6a:	4616      	mov	r6, r2
 8000b6c:	461f      	mov	r7, r3
	const struct lora_driver_api *api =
 8000b6e:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	2200      	movs	r2, #0
 8000b74:	4611      	mov	r1, r2
 8000b76:	4798      	blx	r3
    lora_cfg->datarate = new_dr;
 8000b78:	716e      	strb	r6, [r5, #5]
	const struct lora_driver_api *api =
 8000b7a:	68a3      	ldr	r3, [r4, #8]
	return api->config(dev, config);
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4629      	mov	r1, r5
 8000b80:	4620      	mov	r0, r4
 8000b82:	4798      	blx	r3
    if (!lora_config(lora_dev, lora_cfg)) {
 8000b84:	b958      	cbnz	r0, 8000b9e <change_modem_datarate+0x3a>
        print_modem_cfg(uart_dev, lora_cfg);
 8000b86:	4629      	mov	r1, r5
 8000b88:	4638      	mov	r0, r7
 8000b8a:	f7ff fd3d 	bl	8000608 <print_modem_cfg>
}
 8000b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000b90:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000b94:	d111      	bne.n	8000bba <change_modem_datarate+0x56>
 8000b96:	200a      	movs	r0, #10
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f006 f80d 	bl	8006bb8 <z_impl_k_sleep>
 8000b9e:	4a13      	ldr	r2, [pc, #76]	; (8000bec <change_modem_datarate+0x88>)
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f3bf 8f5b 	dmb	ish
 8000ba6:	e852 cf00 	ldrex	ip, [r2]
 8000baa:	f1bc 0f01 	cmp.w	ip, #1
 8000bae:	d1ef      	bne.n	8000b90 <change_modem_datarate+0x2c>
 8000bb0:	e842 1300 	strex	r3, r1, [r2]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d0eb      	beq.n	8000b90 <change_modem_datarate+0x2c>
 8000bb8:	e7f5      	b.n	8000ba6 <change_modem_datarate+0x42>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000bba:	4c0d      	ldr	r4, [pc, #52]	; (8000bf0 <change_modem_datarate+0x8c>)
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f7ff fcb8 	bl	8000532 <strlen>
 8000bc2:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8000bc4:	68bb      	ldr	r3, [r7, #8]
	return api->tx(dev, buf, len, timeout);
 8000bc6:	685d      	ldr	r5, [r3, #4]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	4621      	mov	r1, r4
 8000bcc:	4638      	mov	r0, r7
 8000bce:	47a8      	blx	r5
 8000bd0:	e003      	b.n	8000bda <change_modem_datarate+0x76>
 8000bd2:	2064      	movs	r0, #100	; 0x64
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	f005 ffef 	bl	8006bb8 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000bda:	f3bf 8f5b 	dmb	ish
 8000bde:	4b03      	ldr	r3, [pc, #12]	; (8000bec <change_modem_datarate+0x88>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f3      	beq.n	8000bd2 <change_modem_datarate+0x6e>
 8000bea:	e7d0      	b.n	8000b8e <change_modem_datarate+0x2a>
 8000bec:	20000154 	.word	0x20000154
 8000bf0:	0800bce0 	.word	0x0800bce0

08000bf4 <change_modem_frequency>:
{
 8000bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	460e      	mov	r6, r1
 8000bfa:	4615      	mov	r5, r2
 8000bfc:	461f      	mov	r7, r3
	const struct lora_driver_api *api =
 8000bfe:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	2200      	movs	r2, #0
 8000c04:	4611      	mov	r1, r2
 8000c06:	4798      	blx	r3
    lora_cfg->frequency = (new_freq_khz*1000);
 8000c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0c:	fb03 f505 	mul.w	r5, r3, r5
 8000c10:	6035      	str	r5, [r6, #0]
	const struct lora_driver_api *api =
 8000c12:	68a3      	ldr	r3, [r4, #8]
	return api->config(dev, config);
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4631      	mov	r1, r6
 8000c18:	4620      	mov	r0, r4
 8000c1a:	4798      	blx	r3
    if (!lora_config(lora_dev, lora_cfg)) {
 8000c1c:	b958      	cbnz	r0, 8000c36 <change_modem_frequency+0x42>
        print_modem_cfg(uart_dev, lora_cfg);
 8000c1e:	4631      	mov	r1, r6
 8000c20:	4638      	mov	r0, r7
 8000c22:	f7ff fcf1 	bl	8000608 <print_modem_cfg>
}
 8000c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000c28:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000c2c:	d111      	bne.n	8000c52 <change_modem_frequency+0x5e>
 8000c2e:	200a      	movs	r0, #10
 8000c30:	2100      	movs	r1, #0
 8000c32:	f005 ffc1 	bl	8006bb8 <z_impl_k_sleep>
 8000c36:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <change_modem_frequency+0x90>)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f3bf 8f5b 	dmb	ish
 8000c3e:	e852 cf00 	ldrex	ip, [r2]
 8000c42:	f1bc 0f01 	cmp.w	ip, #1
 8000c46:	d1ef      	bne.n	8000c28 <change_modem_frequency+0x34>
 8000c48:	e842 1300 	strex	r3, r1, [r2]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0eb      	beq.n	8000c28 <change_modem_frequency+0x34>
 8000c50:	e7f5      	b.n	8000c3e <change_modem_frequency+0x4a>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000c52:	4c0d      	ldr	r4, [pc, #52]	; (8000c88 <change_modem_frequency+0x94>)
 8000c54:	4620      	mov	r0, r4
 8000c56:	f7ff fc6c 	bl	8000532 <strlen>
 8000c5a:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8000c5c:	68bb      	ldr	r3, [r7, #8]
	return api->tx(dev, buf, len, timeout);
 8000c5e:	685d      	ldr	r5, [r3, #4]
 8000c60:	2300      	movs	r3, #0
 8000c62:	4621      	mov	r1, r4
 8000c64:	4638      	mov	r0, r7
 8000c66:	47a8      	blx	r5
 8000c68:	e003      	b.n	8000c72 <change_modem_frequency+0x7e>
 8000c6a:	2064      	movs	r0, #100	; 0x64
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f005 ffa3 	bl	8006bb8 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000c72:	f3bf 8f5b 	dmb	ish
 8000c76:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <change_modem_frequency+0x90>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f3      	beq.n	8000c6a <change_modem_frequency+0x76>
 8000c82:	e7d0      	b.n	8000c26 <change_modem_frequency+0x32>
 8000c84:	20000154 	.word	0x20000154
 8000c88:	0800bd04 	.word	0x0800bd04

08000c8c <incr_decr_modem_frequency>:
{
 8000c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8e:	4605      	mov	r5, r0
 8000c90:	460c      	mov	r4, r1
 8000c92:	4616      	mov	r6, r2
 8000c94:	461f      	mov	r7, r3
	const struct lora_driver_api *api =
 8000c96:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4798      	blx	r3
    if (incr) {
 8000ca0:	b17e      	cbz	r6, 8000cc2 <incr_decr_modem_frequency+0x36>
        lora_cfg->frequency += FREQUENCY_STEP_HZ;
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8000ca8:	33a0      	adds	r3, #160	; 0xa0
 8000caa:	6023      	str	r3, [r4, #0]
	const struct lora_driver_api *api =
 8000cac:	68ab      	ldr	r3, [r5, #8]
	return api->config(dev, config);
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	4798      	blx	r3
    if (!lora_config(lora_dev, lora_cfg)) {
 8000cb6:	b988      	cbnz	r0, 8000cdc <incr_decr_modem_frequency+0x50>
        print_modem_cfg(uart_dev, lora_cfg);
 8000cb8:	4621      	mov	r1, r4
 8000cba:	4638      	mov	r0, r7
 8000cbc:	f7ff fca4 	bl	8000608 <print_modem_cfg>
}
 8000cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lora_cfg->frequency -= FREQUENCY_STEP_HZ;
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000cc8:	3ba0      	subs	r3, #160	; 0xa0
 8000cca:	6023      	str	r3, [r4, #0]
 8000ccc:	e7ee      	b.n	8000cac <incr_decr_modem_frequency+0x20>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000cce:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000cd2:	d111      	bne.n	8000cf8 <incr_decr_modem_frequency+0x6c>
 8000cd4:	200a      	movs	r0, #10
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	f005 ff6e 	bl	8006bb8 <z_impl_k_sleep>
 8000cdc:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <incr_decr_modem_frequency+0xa0>)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	f3bf 8f5b 	dmb	ish
 8000ce4:	e852 cf00 	ldrex	ip, [r2]
 8000ce8:	f1bc 0f01 	cmp.w	ip, #1
 8000cec:	d1ef      	bne.n	8000cce <incr_decr_modem_frequency+0x42>
 8000cee:	e842 1300 	strex	r3, r1, [r2]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0eb      	beq.n	8000cce <incr_decr_modem_frequency+0x42>
 8000cf6:	e7f5      	b.n	8000ce4 <incr_decr_modem_frequency+0x58>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000cf8:	4c0d      	ldr	r4, [pc, #52]	; (8000d30 <incr_decr_modem_frequency+0xa4>)
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f7ff fc19 	bl	8000532 <strlen>
 8000d00:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8000d02:	68bb      	ldr	r3, [r7, #8]
	return api->tx(dev, buf, len, timeout);
 8000d04:	685d      	ldr	r5, [r3, #4]
 8000d06:	2300      	movs	r3, #0
 8000d08:	4621      	mov	r1, r4
 8000d0a:	4638      	mov	r0, r7
 8000d0c:	47a8      	blx	r5
 8000d0e:	e003      	b.n	8000d18 <incr_decr_modem_frequency+0x8c>
 8000d10:	2064      	movs	r0, #100	; 0x64
 8000d12:	2100      	movs	r1, #0
 8000d14:	f005 ff50 	bl	8006bb8 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000d18:	f3bf 8f5b 	dmb	ish
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <incr_decr_modem_frequency+0xa0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0f3      	beq.n	8000d10 <incr_decr_modem_frequency+0x84>
 8000d28:	e7ca      	b.n	8000cc0 <incr_decr_modem_frequency+0x34>
 8000d2a:	bf00      	nop
 8000d2c:	20000154 	.word	0x20000154
 8000d30:	0800bd04 	.word	0x0800bd04

08000d34 <print_per_status>:


void print_per_status(const struct device *uart_dev, uint8_t *buf_tx, int ret, struct print_data_elem_s *print_data)
{
 8000d34:	b570      	push	{r4, r5, r6, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	4604      	mov	r4, r0
    static uint8_t per_buf[UART_TX_BUF_LEN] = {0};
    if ((ret < 0) || ret != RADIO_BUF_LEN) {
 8000d3a:	2a04      	cmp	r2, #4
 8000d3c:	d037      	beq.n	8000dae <print_per_status+0x7a>
        sprintf(per_buf, "Packet %lu/%ld is missing!!!\n", print_data->packet_num, atomic_per_num);
 8000d3e:	4a3b      	ldr	r2, [pc, #236]	; (8000e2c <print_per_status+0xf8>)
 8000d40:	6812      	ldr	r2, [r2, #0]
 8000d42:	9201      	str	r2, [sp, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	4b39      	ldr	r3, [pc, #228]	; (8000e30 <print_per_status+0xfc>)
 8000d4a:	2240      	movs	r2, #64	; 0x40
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4839      	ldr	r0, [pc, #228]	; (8000e34 <print_per_status+0x100>)
 8000d50:	f00a f9f1 	bl	800b136 <__sprintf_chk>
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000d54:	e006      	b.n	8000d64 <print_per_status+0x30>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000d56:	f3bf 8f5b 	dmb	ish
 8000d5a:	d110      	bne.n	8000d7e <print_per_status+0x4a>
 8000d5c:	200a      	movs	r0, #10
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f005 ff2a 	bl	8006bb8 <z_impl_k_sleep>
 8000d64:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <print_per_status+0x104>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f3bf 8f5b 	dmb	ish
 8000d6c:	e853 1f00 	ldrex	r1, [r3]
 8000d70:	2901      	cmp	r1, #1
 8000d72:	d1f0      	bne.n	8000d56 <print_per_status+0x22>
 8000d74:	e843 2000 	strex	r0, r2, [r3]
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	d0ec      	beq.n	8000d56 <print_per_status+0x22>
 8000d7c:	e7f6      	b.n	8000d6c <print_per_status+0x38>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000d7e:	4d2d      	ldr	r5, [pc, #180]	; (8000e34 <print_per_status+0x100>)
 8000d80:	4628      	mov	r0, r5
 8000d82:	f7ff fbd6 	bl	8000532 <strlen>
 8000d86:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8000d88:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8000d8a:	685e      	ldr	r6, [r3, #4]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4629      	mov	r1, r5
 8000d90:	4620      	mov	r0, r4
 8000d92:	47b0      	blx	r6
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000d94:	f3bf 8f5b 	dmb	ish
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <print_per_status+0x104>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d141      	bne.n	8000e28 <print_per_status+0xf4>
 8000da4:	2064      	movs	r0, #100	; 0x64
 8000da6:	2100      	movs	r1, #0
 8000da8:	f005 ff06 	bl	8006bb8 <z_impl_k_sleep>
 8000dac:	e7f2      	b.n	8000d94 <print_per_status+0x60>
        send_to_terminal(uart_dev, per_buf);
    } else {
        sprintf(per_buf, "Packet %lu/%ld is received\n rssi: %d\n snr: %d\n", print_data->packet_num,
 8000dae:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000db2:	f993 1000 	ldrsb.w	r1, [r3]
 8000db6:	9103      	str	r1, [sp, #12]
 8000db8:	9202      	str	r2, [sp, #8]
 8000dba:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <print_per_status+0xf8>)
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	9201      	str	r2, [sp, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <print_per_status+0x108>)
 8000dc6:	2240      	movs	r2, #64	; 0x40
 8000dc8:	2100      	movs	r1, #0
 8000dca:	481a      	ldr	r0, [pc, #104]	; (8000e34 <print_per_status+0x100>)
 8000dcc:	f00a f9b3 	bl	800b136 <__sprintf_chk>
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000dd0:	e006      	b.n	8000de0 <print_per_status+0xac>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000dd2:	f3bf 8f5b 	dmb	ish
 8000dd6:	d110      	bne.n	8000dfa <print_per_status+0xc6>
 8000dd8:	200a      	movs	r0, #10
 8000dda:	2100      	movs	r1, #0
 8000ddc:	f005 feec 	bl	8006bb8 <z_impl_k_sleep>
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <print_per_status+0x104>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f3bf 8f5b 	dmb	ish
 8000de8:	e853 1f00 	ldrex	r1, [r3]
 8000dec:	2901      	cmp	r1, #1
 8000dee:	d1f0      	bne.n	8000dd2 <print_per_status+0x9e>
 8000df0:	e843 2000 	strex	r0, r2, [r3]
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d0ec      	beq.n	8000dd2 <print_per_status+0x9e>
 8000df8:	e7f6      	b.n	8000de8 <print_per_status+0xb4>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000dfa:	4d0e      	ldr	r5, [pc, #56]	; (8000e34 <print_per_status+0x100>)
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	f7ff fb98 	bl	8000532 <strlen>
 8000e02:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8000e04:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8000e06:	685e      	ldr	r6, [r3, #4]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	4629      	mov	r1, r5
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	47b0      	blx	r6
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000e10:	f3bf 8f5b 	dmb	ish
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <print_per_status+0x104>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000e1c:	b923      	cbnz	r3, 8000e28 <print_per_status+0xf4>
 8000e1e:	2064      	movs	r0, #100	; 0x64
 8000e20:	2100      	movs	r1, #0
 8000e22:	f005 fec9 	bl	8006bb8 <z_impl_k_sleep>
 8000e26:	e7f3      	b.n	8000e10 <print_per_status+0xdc>
                atomic_per_num, print_data->rssi, print_data->snr);
        send_to_terminal(uart_dev, per_buf);
    }
}
 8000e28:	b004      	add	sp, #16
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}
 8000e2c:	200007b8 	.word	0x200007b8
 8000e30:	0800bd2c 	.word	0x0800bd2c
 8000e34:	200007fc 	.word	0x200007fc
 8000e38:	20000154 	.word	0x20000154
 8000e3c:	0800bd4c 	.word	0x0800bd4c

08000e40 <per_meas>:
{
 8000e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e44:	b08b      	sub	sp, #44	; 0x2c
 8000e46:	4604      	mov	r4, r0
 8000e48:	460d      	mov	r5, r1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	461e      	mov	r6, r3
    int8_t snr = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    int16_t rssi = 0;
 8000e54:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    volatile int32_t ret = 0;
 8000e58:	9308      	str	r3, [sp, #32]
 8000e5a:	f3bf 8f5b 	dmb	ish
 8000e5e:	4a5e      	ldr	r2, [pc, #376]	; (8000fd8 <per_meas+0x198>)
 8000e60:	f8d2 8000 	ldr.w	r8, [r2]
 8000e64:	f3bf 8f5b 	dmb	ish
    atomic_t atomic_packet_count = ATOMIC_INIT(0);
 8000e68:	9307      	str	r3, [sp, #28]
    struct print_data_elem_s print_data = {0};
 8000e6a:	9305      	str	r3, [sp, #20]
 8000e6c:	9306      	str	r3, [sp, #24]
    sprintf(buf_tx, "Start PER measurement...\n");
 8000e6e:	f8df c180 	ldr.w	ip, [pc, #384]	; 8000ff0 <per_meas+0x1b0>
 8000e72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000e76:	6030      	str	r0, [r6, #0]
 8000e78:	6071      	str	r1, [r6, #4]
 8000e7a:	60b2      	str	r2, [r6, #8]
 8000e7c:	60f3      	str	r3, [r6, #12]
 8000e7e:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000e82:	6130      	str	r0, [r6, #16]
 8000e84:	6171      	str	r1, [r6, #20]
 8000e86:	f8bc 3000 	ldrh.w	r3, [ip]
 8000e8a:	8333      	strh	r3, [r6, #24]
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000e8c:	e006      	b.n	8000e9c <per_meas+0x5c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000e8e:	f3bf 8f5b 	dmb	ish
 8000e92:	d112      	bne.n	8000eba <per_meas+0x7a>
 8000e94:	200a      	movs	r0, #10
 8000e96:	2100      	movs	r1, #0
 8000e98:	f005 fe8e 	bl	8006bb8 <z_impl_k_sleep>
 8000e9c:	4b4f      	ldr	r3, [pc, #316]	; (8000fdc <per_meas+0x19c>)
 8000e9e:	f04f 0c00 	mov.w	ip, #0
 8000ea2:	f3bf 8f5b 	dmb	ish
 8000ea6:	e853 ef00 	ldrex	lr, [r3]
 8000eaa:	f1be 0f01 	cmp.w	lr, #1
 8000eae:	d1ee      	bne.n	8000e8e <per_meas+0x4e>
 8000eb0:	e843 c200 	strex	r2, ip, [r3]
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	d0ea      	beq.n	8000e8e <per_meas+0x4e>
 8000eb8:	e7f5      	b.n	8000ea6 <per_meas+0x66>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000eba:	4630      	mov	r0, r6
 8000ebc:	f7ff fb39 	bl	8000532 <strlen>
 8000ec0:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8000ec2:	68bb      	ldr	r3, [r7, #8]
	return api->tx(dev, buf, len, timeout);
 8000ec4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4631      	mov	r1, r6
 8000ecc:	4638      	mov	r0, r7
 8000ece:	47c8      	blx	r9
 8000ed0:	e003      	b.n	8000eda <per_meas+0x9a>
 8000ed2:	2064      	movs	r0, #100	; 0x64
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	f005 fe6f 	bl	8006bb8 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000eda:	f3bf 8f5b 	dmb	ish
 8000ede:	4b3f      	ldr	r3, [pc, #252]	; (8000fdc <per_meas+0x19c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f3      	beq.n	8000ed2 <per_meas+0x92>
	const struct lora_driver_api *api =
 8000eea:	68a3      	ldr	r3, [r4, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	4798      	blx	r3
    uint32_t i = 0;
 8000ef6:	f04f 0900 	mov.w	r9, #0
 8000efa:	e05a      	b.n	8000fb2 <per_meas+0x172>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000efc:	f3bf 8f5b 	dmb	ish
        if (atomic_cas(&atomic_cur_state, STATE_PER_MEAS, STATE_PER_MEAS)) {
 8000f00:	d166      	bne.n	8000fd0 <per_meas+0x190>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8000f02:	ab07      	add	r3, sp, #28
 8000f04:	f3bf 8f5b 	dmb	ish
 8000f08:	e853 2f00 	ldrex	r2, [r3]
 8000f0c:	3201      	adds	r2, #1
 8000f0e:	e843 2100 	strex	r1, r2, [r3]
 8000f12:	2900      	cmp	r1, #0
 8000f14:	d1f8      	bne.n	8000f08 <per_meas+0xc8>
 8000f16:	f3bf 8f5b 	dmb	ish
		arch_syscall_invoke2(*(uintptr_t *)&dst, *(uintptr_t *)&len, K_SYSCALL_SYS_RAND_GET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_sys_rand_get(dst, len);
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	4830      	ldr	r0, [pc, #192]	; (8000fe0 <per_meas+0x1a0>)
 8000f1e:	f007 fd14 	bl	800894a <z_impl_sys_rand_get>
            lora_cfg->tx = true;
 8000f22:	2301      	movs	r3, #1
 8000f24:	736b      	strb	r3, [r5, #13]
	const struct lora_driver_api *api =
 8000f26:	68a3      	ldr	r3, [r4, #8]
	return api->config(dev, config);
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	4798      	blx	r3
                ret = lora_config(lora_dev, lora_cfg);
 8000f30:	9008      	str	r0, [sp, #32]
            } while (ret);
 8000f32:	9b08      	ldr	r3, [sp, #32]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f6      	bne.n	8000f26 <per_meas+0xe6>
	const struct lora_driver_api *api =
 8000f38:	68a3      	ldr	r3, [r4, #8]
	return api->send(dev, data, data_len);
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	4928      	ldr	r1, [pc, #160]	; (8000fe0 <per_meas+0x1a0>)
 8000f40:	4620      	mov	r0, r4
 8000f42:	4798      	blx	r3
            ret = lora_send(lora_dev, radio_buf_tx, RADIO_BUF_LEN);
 8000f44:	9008      	str	r0, [sp, #32]
            lora_cfg->tx = false;
 8000f46:	2300      	movs	r3, #0
 8000f48:	736b      	strb	r3, [r5, #13]
	const struct lora_driver_api *api =
 8000f4a:	68a3      	ldr	r3, [r4, #8]
	return api->config(dev, config);
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4629      	mov	r1, r5
 8000f50:	4620      	mov	r0, r4
 8000f52:	4798      	blx	r3
                ret = lora_config(lora_dev, lora_cfg);
 8000f54:	9008      	str	r0, [sp, #32]
            } while (ret);
 8000f56:	9b08      	ldr	r3, [sp, #32]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f6      	bne.n	8000f4a <per_meas+0x10a>
	const struct lora_driver_api *api =
 8000f5c:	68a3      	ldr	r3, [r4, #8]
	return api->recv(dev, data, size, timeout, rssi, snr);
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8000f64:	9203      	str	r2, [sp, #12]
 8000f66:	aa09      	add	r2, sp, #36	; 0x24
 8000f68:	9202      	str	r2, [sp, #8]
 8000f6a:	481e      	ldr	r0, [pc, #120]	; (8000fe4 <per_meas+0x1a4>)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	e9cd 0100 	strd	r0, r1, [sp]
 8000f72:	2204      	movs	r2, #4
 8000f74:	491c      	ldr	r1, [pc, #112]	; (8000fe8 <per_meas+0x1a8>)
 8000f76:	4620      	mov	r0, r4
 8000f78:	4798      	blx	r3
            ret = lora_recv(lora_dev, radio_buf_rx, RADIO_BUF_LEN,
 8000f7a:	9008      	str	r0, [sp, #32]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000f7c:	f3bf 8f5b 	dmb	ish
 8000f80:	9b07      	ldr	r3, [sp, #28]
 8000f82:	f3bf 8f5b 	dmb	ish
            print_data.packet_num = atomic_get(&atomic_packet_count);
 8000f86:	9306      	str	r3, [sp, #24]
            print_data.rssi = rssi;
 8000f88:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8000f8c:	f8ad 3016 	strh.w	r3, [sp, #22]
            print_data.snr = snr;
 8000f90:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8000f94:	f88d 3014 	strb.w	r3, [sp, #20]
            print_per_status(uart_dev, buf_tx, ret, &print_data);
 8000f98:	9a08      	ldr	r2, [sp, #32]
 8000f9a:	ab05      	add	r3, sp, #20
 8000f9c:	4631      	mov	r1, r6
 8000f9e:	4638      	mov	r0, r7
 8000fa0:	f7ff fec8 	bl	8000d34 <print_per_status>
            i++;
 8000fa4:	f109 0901 	add.w	r9, r9, #1
 8000fa8:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000fac:	2100      	movs	r1, #0
 8000fae:	f005 fe03 	bl	8006bb8 <z_impl_k_sleep>
    while (i < per_num) {
 8000fb2:	45c1      	cmp	r9, r8
 8000fb4:	d20c      	bcs.n	8000fd0 <per_meas+0x190>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <per_meas+0x1ac>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f3bf 8f5b 	dmb	ish
 8000fbe:	e853 1f00 	ldrex	r1, [r3]
 8000fc2:	4291      	cmp	r1, r2
 8000fc4:	d19a      	bne.n	8000efc <per_meas+0xbc>
 8000fc6:	e843 2000 	strex	r0, r2, [r3]
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d096      	beq.n	8000efc <per_meas+0xbc>
 8000fce:	e7f6      	b.n	8000fbe <per_meas+0x17e>
}
 8000fd0:	b00b      	add	sp, #44	; 0x2c
 8000fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200007b8 	.word	0x200007b8
 8000fdc:	20000154 	.word	0x20000154
 8000fe0:	20000840 	.word	0x20000840
 8000fe4:	00011170 	.word	0x00011170
 8000fe8:	2000083c 	.word	0x2000083c
 8000fec:	20000150 	.word	0x20000150
 8000ff0:	0800bd7c 	.word	0x0800bd7c

08000ff4 <stop_session>:


void stop_session(const struct device *lora_dev, const struct device *uart_dev, uint8_t *buf_tx) {
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	460c      	mov	r4, r1
	const struct lora_driver_api *api =
 8000ff8:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4611      	mov	r1, r2
 8001000:	4798      	blx	r3
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001002:	e006      	b.n	8001012 <stop_session+0x1e>
 8001004:	f3bf 8f5b 	dmb	ish
 8001008:	d110      	bne.n	800102c <stop_session+0x38>
 800100a:	200a      	movs	r0, #10
 800100c:	2100      	movs	r1, #0
 800100e:	f005 fdd3 	bl	8006bb8 <z_impl_k_sleep>
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <stop_session+0x68>)
 8001014:	2200      	movs	r2, #0
 8001016:	f3bf 8f5b 	dmb	ish
 800101a:	e853 0f00 	ldrex	r0, [r3]
 800101e:	2801      	cmp	r0, #1
 8001020:	d1f0      	bne.n	8001004 <stop_session+0x10>
 8001022:	e843 2100 	strex	r1, r2, [r3]
 8001026:	2900      	cmp	r1, #0
 8001028:	d0ec      	beq.n	8001004 <stop_session+0x10>
 800102a:	e7f6      	b.n	800101a <stop_session+0x26>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 800102c:	4d0c      	ldr	r5, [pc, #48]	; (8001060 <stop_session+0x6c>)
 800102e:	4628      	mov	r0, r5
 8001030:	f7ff fa7f 	bl	8000532 <strlen>
 8001034:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8001036:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8001038:	685e      	ldr	r6, [r3, #4]
 800103a:	2300      	movs	r3, #0
 800103c:	4629      	mov	r1, r5
 800103e:	4620      	mov	r0, r4
 8001040:	47b0      	blx	r6
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001042:	f3bf 8f5b 	dmb	ish
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <stop_session+0x68>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 800104e:	b923      	cbnz	r3, 800105a <stop_session+0x66>
 8001050:	2064      	movs	r0, #100	; 0x64
 8001052:	2100      	movs	r1, #0
 8001054:	f005 fdb0 	bl	8006bb8 <z_impl_k_sleep>
 8001058:	e7f3      	b.n	8001042 <stop_session+0x4e>
    lora_recv_async(lora_dev, NULL, NULL);
    send_to_terminal(uart_dev, "Session stopped, modem released.\n");
}
 800105a:	bd70      	pop	{r4, r5, r6, pc}
 800105c:	20000154 	.word	0x20000154
 8001060:	0800bd98 	.word	0x0800bd98

08001064 <event_cb>:

/**
 * Structs and enums area end
 * */

void event_cb(const struct device* dev, struct uart_event* evt, void* user_data) {
 8001064:	b508      	push	{r3, lr}
    switch (evt->type) {
 8001066:	780b      	ldrb	r3, [r1, #0]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d013      	beq.n	8001094 <event_cb+0x30>
 800106c:	2b05      	cmp	r3, #5
 800106e:	d00d      	beq.n	800108c <event_cb+0x28>
 8001070:	b95b      	cbnz	r3, 800108a <event_cb+0x26>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <event_cb+0x38>)
 8001074:	2201      	movs	r2, #1
 8001076:	f3bf 8f5b 	dmb	ish
 800107a:	e853 1f00 	ldrex	r1, [r3]
 800107e:	e843 2000 	strex	r0, r2, [r3]
 8001082:	2800      	cmp	r0, #0
 8001084:	d1f9      	bne.n	800107a <event_cb+0x16>
 8001086:	f3bf 8f5b 	dmb	ish
            uart_rx_disable(dev);
            break;
        case UART_RX_STOPPED:
            break;
    }
}
 800108a:	bd08      	pop	{r3, pc}
            k_work_submit(&work_uart_data_proc);
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <event_cb+0x3c>)
 800108e:	f005 f9fb 	bl	8006488 <k_work_submit>
            break;
 8001092:	e7fa      	b.n	800108a <event_cb+0x26>
__syscall int uart_rx_disable(const struct device *dev);

static inline int z_impl_uart_rx_disable(const struct device *dev)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
 8001094:	6883      	ldr	r3, [r0, #8]
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	4798      	blx	r3
}
 800109a:	e7f6      	b.n	800108a <event_cb+0x26>
 800109c:	20000154 	.word	0x20000154
 80010a0:	200008c4 	.word	0x200008c4

080010a4 <work_uart_data_proc_handler>:


void work_uart_data_proc_handler(struct k_work *item)
{
 80010a4:	b570      	push	{r4, r5, r6, lr}
 80010a6:	b082      	sub	sp, #8
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 80010a8:	48a9      	ldr	r0, [pc, #676]	; (8001350 <work_uart_data_proc_handler+0x2ac>)
 80010aa:	f004 fdcf 	bl	8005c4c <z_impl_device_get_binding>
 80010ae:	4606      	mov	r6, r0
    const struct device* uart_dev = device_get_binding(CURRENT_UART_DEVICE);
    struct parsed_frame_s parsed_frame = {0};
 80010b0:	2300      	movs	r3, #0
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	9301      	str	r3, [sp, #4]
    /* Select current command */
    parsed_frame.cmd_ptr = strtok((char*)(&uart_buf_rx), "=");
 80010b6:	4da7      	ldr	r5, [pc, #668]	; (8001354 <work_uart_data_proc_handler+0x2b0>)
 80010b8:	49a7      	ldr	r1, [pc, #668]	; (8001358 <work_uart_data_proc_handler+0x2b4>)
 80010ba:	4628      	mov	r0, r5
 80010bc:	f006 fbb6 	bl	800782c <strtok>
 80010c0:	4604      	mov	r4, r0
 80010c2:	9000      	str	r0, [sp, #0]
    /* Select command argument */
    parsed_frame.arg = atoi(strtok((char*)(&uart_buf_rx[strlen(parsed_frame.cmd_ptr) + 1]), "\n"));
 80010c4:	f7ff fa35 	bl	8000532 <strlen>
 80010c8:	3001      	adds	r0, #1
 80010ca:	49a4      	ldr	r1, [pc, #656]	; (800135c <work_uart_data_proc_handler+0x2b8>)
 80010cc:	4428      	add	r0, r5
 80010ce:	f006 fbad 	bl	800782c <strtok>
 80010d2:	f00a f816 	bl	800b102 <atoi>
 80010d6:	4605      	mov	r5, r0
 80010d8:	9001      	str	r0, [sp, #4]

    if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_PER)) { /* Set PER measurement */
 80010da:	49a1      	ldr	r1, [pc, #644]	; (8001360 <work_uart_data_proc_handler+0x2bc>)
 80010dc:	4620      	mov	r0, r4
 80010de:	f7ff fa1e 	bl	800051e <strcmp>
 80010e2:	b9f8      	cbnz	r0, 8001124 <work_uart_data_proc_handler+0x80>
 80010e4:	4b9f      	ldr	r3, [pc, #636]	; (8001364 <work_uart_data_proc_handler+0x2c0>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	f3bf 8f5b 	dmb	ish
 80010ec:	e853 1f00 	ldrex	r1, [r3]
 80010f0:	e843 2000 	strex	r0, r2, [r3]
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d1f9      	bne.n	80010ec <work_uart_data_proc_handler+0x48>
 80010f8:	f3bf 8f5b 	dmb	ish
 80010fc:	4b9a      	ldr	r3, [pc, #616]	; (8001368 <work_uart_data_proc_handler+0x2c4>)
 80010fe:	f3bf 8f5b 	dmb	ish
 8001102:	e853 2f00 	ldrex	r2, [r3]
 8001106:	e843 5100 	strex	r1, r5, [r3]
 800110a:	2900      	cmp	r1, #0
 800110c:	d1f9      	bne.n	8001102 <work_uart_data_proc_handler+0x5e>
 800110e:	f3bf 8f5b 	dmb	ish
	const struct uart_driver_api *api =
 8001112:	68b3      	ldr	r3, [r6, #8]
	return api->rx_enable(dev, buf, len, timeout);
 8001114:	68dc      	ldr	r4, [r3, #12]
 8001116:	2300      	movs	r3, #0
 8001118:	2240      	movs	r2, #64	; 0x40
 800111a:	498e      	ldr	r1, [pc, #568]	; (8001354 <work_uart_data_proc_handler+0x2b0>)
 800111c:	4630      	mov	r0, r6
 800111e:	47a0      	blx	r4

    } else {
        atomic_set(&atomic_cur_state, STATE_IDLE);
    }
    uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
}
 8001120:	b002      	add	sp, #8
 8001122:	bd70      	pop	{r4, r5, r6, pc}
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_STOP_RECEIVE_SESSION)) { /* Stop receive */
 8001124:	4991      	ldr	r1, [pc, #580]	; (800136c <work_uart_data_proc_handler+0x2c8>)
 8001126:	4620      	mov	r0, r4
 8001128:	f7ff f9f9 	bl	800051e <strcmp>
 800112c:	2800      	cmp	r0, #0
 800112e:	d138      	bne.n	80011a2 <work_uart_data_proc_handler+0xfe>
 8001130:	4b8c      	ldr	r3, [pc, #560]	; (8001364 <work_uart_data_proc_handler+0x2c0>)
 8001132:	2209      	movs	r2, #9
 8001134:	f3bf 8f5b 	dmb	ish
 8001138:	e853 1f00 	ldrex	r1, [r3]
 800113c:	e843 2000 	strex	r0, r2, [r3]
 8001140:	2800      	cmp	r0, #0
 8001142:	d1f9      	bne.n	8001138 <work_uart_data_proc_handler+0x94>
 8001144:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001148:	e006      	b.n	8001158 <work_uart_data_proc_handler+0xb4>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800114a:	f3bf 8f5b 	dmb	ish
 800114e:	d110      	bne.n	8001172 <work_uart_data_proc_handler+0xce>
 8001150:	200a      	movs	r0, #10
 8001152:	2100      	movs	r1, #0
 8001154:	f005 fd30 	bl	8006bb8 <z_impl_k_sleep>
 8001158:	4b85      	ldr	r3, [pc, #532]	; (8001370 <work_uart_data_proc_handler+0x2cc>)
 800115a:	2200      	movs	r2, #0
 800115c:	f3bf 8f5b 	dmb	ish
 8001160:	e853 1f00 	ldrex	r1, [r3]
 8001164:	2901      	cmp	r1, #1
 8001166:	d1f0      	bne.n	800114a <work_uart_data_proc_handler+0xa6>
 8001168:	e843 2000 	strex	r0, r2, [r3]
 800116c:	2800      	cmp	r0, #0
 800116e:	d0ec      	beq.n	800114a <work_uart_data_proc_handler+0xa6>
 8001170:	e7f6      	b.n	8001160 <work_uart_data_proc_handler+0xbc>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001172:	4c80      	ldr	r4, [pc, #512]	; (8001374 <work_uart_data_proc_handler+0x2d0>)
 8001174:	4620      	mov	r0, r4
 8001176:	f7ff f9dc 	bl	8000532 <strlen>
 800117a:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 800117c:	68b3      	ldr	r3, [r6, #8]
	return api->tx(dev, buf, len, timeout);
 800117e:	685d      	ldr	r5, [r3, #4]
 8001180:	2300      	movs	r3, #0
 8001182:	4621      	mov	r1, r4
 8001184:	4630      	mov	r0, r6
 8001186:	47a8      	blx	r5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001188:	f3bf 8f5b 	dmb	ish
 800118c:	4b78      	ldr	r3, [pc, #480]	; (8001370 <work_uart_data_proc_handler+0x2cc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1bc      	bne.n	8001112 <work_uart_data_proc_handler+0x6e>
 8001198:	2064      	movs	r0, #100	; 0x64
 800119a:	2100      	movs	r1, #0
 800119c:	f005 fd0c 	bl	8006bb8 <z_impl_k_sleep>
 80011a0:	e7f2      	b.n	8001188 <work_uart_data_proc_handler+0xe4>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_GET_CFG)) { /* Get lora modem configuration parameters */
 80011a2:	4975      	ldr	r1, [pc, #468]	; (8001378 <work_uart_data_proc_handler+0x2d4>)
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff f9ba 	bl	800051e <strcmp>
 80011aa:	b960      	cbnz	r0, 80011c6 <work_uart_data_proc_handler+0x122>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80011ac:	4b6d      	ldr	r3, [pc, #436]	; (8001364 <work_uart_data_proc_handler+0x2c0>)
 80011ae:	2204      	movs	r2, #4
 80011b0:	f3bf 8f5b 	dmb	ish
 80011b4:	e853 1f00 	ldrex	r1, [r3]
 80011b8:	e843 2000 	strex	r0, r2, [r3]
 80011bc:	2800      	cmp	r0, #0
 80011be:	d1f9      	bne.n	80011b4 <work_uart_data_proc_handler+0x110>
 80011c0:	f3bf 8f5b 	dmb	ish
 80011c4:	e7a5      	b.n	8001112 <work_uart_data_proc_handler+0x6e>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_INCR_FREQ)) { /* Increment current frequency on 100 kHz */
 80011c6:	496d      	ldr	r1, [pc, #436]	; (800137c <work_uart_data_proc_handler+0x2d8>)
 80011c8:	4620      	mov	r0, r4
 80011ca:	f7ff f9a8 	bl	800051e <strcmp>
 80011ce:	b960      	cbnz	r0, 80011ea <work_uart_data_proc_handler+0x146>
 80011d0:	4b64      	ldr	r3, [pc, #400]	; (8001364 <work_uart_data_proc_handler+0x2c0>)
 80011d2:	2206      	movs	r2, #6
 80011d4:	f3bf 8f5b 	dmb	ish
 80011d8:	e853 1f00 	ldrex	r1, [r3]
 80011dc:	e843 2000 	strex	r0, r2, [r3]
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d1f9      	bne.n	80011d8 <work_uart_data_proc_handler+0x134>
 80011e4:	f3bf 8f5b 	dmb	ish
 80011e8:	e793      	b.n	8001112 <work_uart_data_proc_handler+0x6e>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_DECR_FREQ)) { /* Decrement current frequency on 100 kHz */
 80011ea:	4965      	ldr	r1, [pc, #404]	; (8001380 <work_uart_data_proc_handler+0x2dc>)
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7ff f996 	bl	800051e <strcmp>
 80011f2:	b960      	cbnz	r0, 800120e <work_uart_data_proc_handler+0x16a>
 80011f4:	4b5b      	ldr	r3, [pc, #364]	; (8001364 <work_uart_data_proc_handler+0x2c0>)
 80011f6:	2207      	movs	r2, #7
 80011f8:	f3bf 8f5b 	dmb	ish
 80011fc:	e853 1f00 	ldrex	r1, [r3]
 8001200:	e843 2000 	strex	r0, r2, [r3]
 8001204:	2800      	cmp	r0, #0
 8001206:	d1f9      	bne.n	80011fc <work_uart_data_proc_handler+0x158>
 8001208:	f3bf 8f5b 	dmb	ish
 800120c:	e781      	b.n	8001112 <work_uart_data_proc_handler+0x6e>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_SET_FREQ)) { /* Change frequency value in lora configuration param */
 800120e:	495d      	ldr	r1, [pc, #372]	; (8001384 <work_uart_data_proc_handler+0x2e0>)
 8001210:	4620      	mov	r0, r4
 8001212:	f7ff f984 	bl	800051e <strcmp>
 8001216:	b9b8      	cbnz	r0, 8001248 <work_uart_data_proc_handler+0x1a4>
 8001218:	4b5b      	ldr	r3, [pc, #364]	; (8001388 <work_uart_data_proc_handler+0x2e4>)
 800121a:	f3bf 8f5b 	dmb	ish
 800121e:	e853 2f00 	ldrex	r2, [r3]
 8001222:	e843 5100 	strex	r1, r5, [r3]
 8001226:	2900      	cmp	r1, #0
 8001228:	d1f9      	bne.n	800121e <work_uart_data_proc_handler+0x17a>
 800122a:	f3bf 8f5b 	dmb	ish
 800122e:	4b4d      	ldr	r3, [pc, #308]	; (8001364 <work_uart_data_proc_handler+0x2c0>)
 8001230:	2205      	movs	r2, #5
 8001232:	f3bf 8f5b 	dmb	ish
 8001236:	e853 1f00 	ldrex	r1, [r3]
 800123a:	e843 2000 	strex	r0, r2, [r3]
 800123e:	2800      	cmp	r0, #0
 8001240:	d1f9      	bne.n	8001236 <work_uart_data_proc_handler+0x192>
 8001242:	f3bf 8f5b 	dmb	ish
 8001246:	e764      	b.n	8001112 <work_uart_data_proc_handler+0x6e>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_SET_SF)) { /* Change SF value in lora configuration param */
 8001248:	4950      	ldr	r1, [pc, #320]	; (800138c <work_uart_data_proc_handler+0x2e8>)
 800124a:	4620      	mov	r0, r4
 800124c:	f7ff f967 	bl	800051e <strcmp>
 8001250:	2800      	cmp	r0, #0
 8001252:	d16f      	bne.n	8001334 <work_uart_data_proc_handler+0x290>
        switch (parsed_frame.arg) {
 8001254:	3d06      	subs	r5, #6
 8001256:	2d06      	cmp	r5, #6
 8001258:	d811      	bhi.n	800127e <work_uart_data_proc_handler+0x1da>
 800125a:	e8df f005 	tbb	[pc, r5]
 800125e:	515e      	.short	0x515e
 8001260:	1d2a3744 	.word	0x1d2a3744
 8001264:	04          	.byte	0x04
 8001265:	00          	.byte	0x00
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <work_uart_data_proc_handler+0x2ec>)
 8001268:	220c      	movs	r2, #12
 800126a:	f3bf 8f5b 	dmb	ish
 800126e:	e853 1f00 	ldrex	r1, [r3]
 8001272:	e843 2000 	strex	r0, r2, [r3]
 8001276:	2800      	cmp	r0, #0
 8001278:	d1f9      	bne.n	800126e <work_uart_data_proc_handler+0x1ca>
 800127a:	f3bf 8f5b 	dmb	ish
 800127e:	4b39      	ldr	r3, [pc, #228]	; (8001364 <work_uart_data_proc_handler+0x2c0>)
 8001280:	2208      	movs	r2, #8
 8001282:	f3bf 8f5b 	dmb	ish
 8001286:	e853 1f00 	ldrex	r1, [r3]
 800128a:	e843 2000 	strex	r0, r2, [r3]
 800128e:	2800      	cmp	r0, #0
 8001290:	d1f9      	bne.n	8001286 <work_uart_data_proc_handler+0x1e2>
 8001292:	f3bf 8f5b 	dmb	ish
 8001296:	e73c      	b.n	8001112 <work_uart_data_proc_handler+0x6e>
 8001298:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <work_uart_data_proc_handler+0x2ec>)
 800129a:	220b      	movs	r2, #11
 800129c:	f3bf 8f5b 	dmb	ish
 80012a0:	e853 1f00 	ldrex	r1, [r3]
 80012a4:	e843 2000 	strex	r0, r2, [r3]
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d1f9      	bne.n	80012a0 <work_uart_data_proc_handler+0x1fc>
 80012ac:	f3bf 8f5b 	dmb	ish
 80012b0:	e7e5      	b.n	800127e <work_uart_data_proc_handler+0x1da>
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <work_uart_data_proc_handler+0x2ec>)
 80012b4:	220a      	movs	r2, #10
 80012b6:	f3bf 8f5b 	dmb	ish
 80012ba:	e853 1f00 	ldrex	r1, [r3]
 80012be:	e843 2000 	strex	r0, r2, [r3]
 80012c2:	2800      	cmp	r0, #0
 80012c4:	d1f9      	bne.n	80012ba <work_uart_data_proc_handler+0x216>
 80012c6:	f3bf 8f5b 	dmb	ish
 80012ca:	e7d8      	b.n	800127e <work_uart_data_proc_handler+0x1da>
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <work_uart_data_proc_handler+0x2ec>)
 80012ce:	2209      	movs	r2, #9
 80012d0:	f3bf 8f5b 	dmb	ish
 80012d4:	e853 1f00 	ldrex	r1, [r3]
 80012d8:	e843 2000 	strex	r0, r2, [r3]
 80012dc:	2800      	cmp	r0, #0
 80012de:	d1f9      	bne.n	80012d4 <work_uart_data_proc_handler+0x230>
 80012e0:	f3bf 8f5b 	dmb	ish
 80012e4:	e7cb      	b.n	800127e <work_uart_data_proc_handler+0x1da>
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <work_uart_data_proc_handler+0x2ec>)
 80012e8:	2208      	movs	r2, #8
 80012ea:	f3bf 8f5b 	dmb	ish
 80012ee:	e853 1f00 	ldrex	r1, [r3]
 80012f2:	e843 2000 	strex	r0, r2, [r3]
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d1f9      	bne.n	80012ee <work_uart_data_proc_handler+0x24a>
 80012fa:	f3bf 8f5b 	dmb	ish
 80012fe:	e7be      	b.n	800127e <work_uart_data_proc_handler+0x1da>
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <work_uart_data_proc_handler+0x2ec>)
 8001302:	2207      	movs	r2, #7
 8001304:	f3bf 8f5b 	dmb	ish
 8001308:	e853 1f00 	ldrex	r1, [r3]
 800130c:	e843 2000 	strex	r0, r2, [r3]
 8001310:	2800      	cmp	r0, #0
 8001312:	d1f9      	bne.n	8001308 <work_uart_data_proc_handler+0x264>
 8001314:	f3bf 8f5b 	dmb	ish
 8001318:	e7b1      	b.n	800127e <work_uart_data_proc_handler+0x1da>
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <work_uart_data_proc_handler+0x2ec>)
 800131c:	2206      	movs	r2, #6
 800131e:	f3bf 8f5b 	dmb	ish
 8001322:	e853 1f00 	ldrex	r1, [r3]
 8001326:	e843 2000 	strex	r0, r2, [r3]
 800132a:	2800      	cmp	r0, #0
 800132c:	d1f9      	bne.n	8001322 <work_uart_data_proc_handler+0x27e>
 800132e:	f3bf 8f5b 	dmb	ish
 8001332:	e7a4      	b.n	800127e <work_uart_data_proc_handler+0x1da>
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <work_uart_data_proc_handler+0x2c0>)
 8001336:	2200      	movs	r2, #0
 8001338:	f3bf 8f5b 	dmb	ish
 800133c:	e853 1f00 	ldrex	r1, [r3]
 8001340:	e843 2000 	strex	r0, r2, [r3]
 8001344:	2800      	cmp	r0, #0
 8001346:	d1f9      	bne.n	800133c <work_uart_data_proc_handler+0x298>
 8001348:	f3bf 8f5b 	dmb	ish
 800134c:	e6e1      	b.n	8001112 <work_uart_data_proc_handler+0x6e>
 800134e:	bf00      	nop
 8001350:	0800bdbc 	.word	0x0800bdbc
 8001354:	20000844 	.word	0x20000844
 8001358:	0800bdc4 	.word	0x0800bdc4
 800135c:	0800bd48 	.word	0x0800bd48
 8001360:	0800bdc8 	.word	0x0800bdc8
 8001364:	20000150 	.word	0x20000150
 8001368:	200007b8 	.word	0x200007b8
 800136c:	0800bdcc 	.word	0x0800bdcc
 8001370:	20000154 	.word	0x20000154
 8001374:	0800bdd4 	.word	0x0800bdd4
 8001378:	0800be04 	.word	0x0800be04
 800137c:	0800be0c 	.word	0x0800be0c
 8001380:	0800be14 	.word	0x0800be14
 8001384:	0800be1c 	.word	0x0800be1c
 8001388:	20000158 	.word	0x20000158
 800138c:	0800be2c 	.word	0x0800be2c
 8001390:	2000015c 	.word	0x2000015c

08001394 <common_task>:


_Noreturn void common_task(void)
{
 8001394:	b500      	push	{lr}
 8001396:	b08b      	sub	sp, #44	; 0x2c
    volatile int32_t ret = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	9309      	str	r3, [sp, #36]	; 0x24
    struct print_data_elem_s print_data = {0};
 800139c:	9307      	str	r3, [sp, #28]
 800139e:	9308      	str	r3, [sp, #32]

    struct lora_modem_config lora_cfg = {
 80013a0:	9303      	str	r3, [sp, #12]
 80013a2:	9304      	str	r3, [sp, #16]
 80013a4:	9305      	str	r3, [sp, #20]
 80013a6:	9306      	str	r3, [sp, #24]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80013a8:	f3bf 8f5b 	dmb	ish
 80013ac:	4baa      	ldr	r3, [pc, #680]	; (8001658 <common_task+0x2c4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f3bf 8f5b 	dmb	ish
 80013b4:	9303      	str	r3, [sp, #12]
 80013b6:	f3bf 8f5b 	dmb	ish
 80013ba:	4ba8      	ldr	r3, [pc, #672]	; (800165c <common_task+0x2c8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f3bf 8f5b 	dmb	ish
 80013c2:	f88d 3011 	strb.w	r3, [sp, #17]
 80013c6:	2301      	movs	r3, #1
 80013c8:	f88d 3012 	strb.w	r3, [sp, #18]
 80013cc:	2308      	movs	r3, #8
 80013ce:	f8ad 3014 	strh.w	r3, [sp, #20]
 80013d2:	2314      	movs	r3, #20
 80013d4:	f88d 3018 	strb.w	r3, [sp, #24]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 80013d8:	48a1      	ldr	r0, [pc, #644]	; (8001660 <common_task+0x2cc>)
 80013da:	f009 fa5b 	bl	800a894 <z_device_is_ready>
    /**
     * Radio initialization area begin
     * */
    /* Init radio */
    lora_dev = DEVICE_DT_GET(DEFAULT_RADIO_NODE);
    if (!device_is_ready(lora_dev)) {
 80013de:	b1e0      	cbz	r0, 800141a <common_task+0x86>
	const struct lora_driver_api *api =
 80013e0:	489f      	ldr	r0, [pc, #636]	; (8001660 <common_task+0x2cc>)
 80013e2:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	a903      	add	r1, sp, #12
 80013e8:	4798      	blx	r3
        LOG_DBG("Device not ready: %s", lora_dev->name);
        k_sleep(K_FOREVER);
    }

    ret = lora_config(lora_dev, &lora_cfg);
 80013ea:	9009      	str	r0, [sp, #36]	; 0x24
    if (ret < 0) {
 80013ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db1a      	blt.n	8001428 <common_task+0x94>
    * */

    /**
     * UART initialization area begin
     * */
    k_work_init(&work_uart_data_proc, work_uart_data_proc_handler);
 80013f2:	499c      	ldr	r1, [pc, #624]	; (8001664 <common_task+0x2d0>)
 80013f4:	489c      	ldr	r0, [pc, #624]	; (8001668 <common_task+0x2d4>)
 80013f6:	f009 fb74 	bl	800aae2 <k_work_init>
 80013fa:	489c      	ldr	r0, [pc, #624]	; (800166c <common_task+0x2d8>)
 80013fc:	f004 fc26 	bl	8005c4c <z_impl_device_get_binding>
 8001400:	4604      	mov	r4, r0
 8001402:	f009 fa47 	bl	800a894 <z_device_is_ready>

    /* Init UART*/
    uart_dev = device_get_binding(CURRENT_UART_DEVICE);
    if (!device_is_ready(uart_dev)) {
 8001406:	b1b0      	cbz	r0, 8001436 <common_task+0xa2>
	const struct uart_driver_api *api =
 8001408:	68a3      	ldr	r3, [r4, #8]
	if (api->callback_set == NULL) {
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d034      	beq.n	800147a <common_task+0xe6>
	return api->callback_set(dev, callback, user_data);
 8001410:	2200      	movs	r2, #0
 8001412:	4997      	ldr	r1, [pc, #604]	; (8001670 <common_task+0x2dc>)
 8001414:	4620      	mov	r0, r4
 8001416:	4798      	blx	r3
 8001418:	e02f      	b.n	800147a <common_task+0xe6>
 800141a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800141e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001422:	f005 fbc9 	bl	8006bb8 <z_impl_k_sleep>
 8001426:	e7db      	b.n	80013e0 <common_task+0x4c>
 8001428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800142c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001430:	f005 fbc2 	bl	8006bb8 <z_impl_k_sleep>
 8001434:	e7dd      	b.n	80013f2 <common_task+0x5e>
 8001436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800143a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800143e:	f005 fbbb 	bl	8006bb8 <z_impl_k_sleep>
 8001442:	e7e1      	b.n	8001408 <common_task+0x74>
	const struct uart_driver_api *api =
 8001444:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 8001446:	68dd      	ldr	r5, [r3, #12]
 8001448:	2300      	movs	r3, #0
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	4989      	ldr	r1, [pc, #548]	; (8001674 <common_task+0x2e0>)
 800144e:	4620      	mov	r0, r4
 8001450:	47a8      	blx	r5
	const struct lora_driver_api *api =
 8001452:	4883      	ldr	r0, [pc, #524]	; (8001660 <common_task+0x2cc>)
 8001454:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	4a87      	ldr	r2, [pc, #540]	; (8001678 <common_task+0x2e4>)
 800145a:	4988      	ldr	r1, [pc, #544]	; (800167c <common_task+0x2e8>)
 800145c:	4798      	blx	r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800145e:	4b88      	ldr	r3, [pc, #544]	; (8001680 <common_task+0x2ec>)
 8001460:	2200      	movs	r2, #0
 8001462:	f3bf 8f5b 	dmb	ish
 8001466:	e853 1f00 	ldrex	r1, [r3]
 800146a:	2902      	cmp	r1, #2
 800146c:	d103      	bne.n	8001476 <common_task+0xe2>
 800146e:	e843 2000 	strex	r0, r2, [r3]
 8001472:	2800      	cmp	r0, #0
 8001474:	d1f7      	bne.n	8001466 <common_task+0xd2>
 8001476:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800147a:	f3bf 8f5b 	dmb	ish
 800147e:	4b80      	ldr	r3, [pc, #512]	; (8001680 <common_task+0x2ec>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f3bf 8f5b 	dmb	ish
    * UART initialization area end
    * */


    while(1) {
        switch (atomic_get(&atomic_cur_state)) {
 8001486:	3b01      	subs	r3, #1
 8001488:	2b08      	cmp	r3, #8
 800148a:	f200 80df 	bhi.w	800164c <common_task+0x2b8>
 800148e:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <common_task+0x100>)
 8001490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001494:	08001507 	.word	0x08001507
 8001498:	08001445 	.word	0x08001445
 800149c:	080014b9 	.word	0x080014b9
 80014a0:	08001531 	.word	0x08001531
 80014a4:	080015b3 	.word	0x080015b3
 80014a8:	08001557 	.word	0x08001557
 80014ac:	08001585 	.word	0x08001585
 80014b0:	080015eb 	.word	0x080015eb
 80014b4:	08001625 	.word	0x08001625
                atomic_cas(&atomic_cur_state, STATE_RECV, STATE_IDLE);
                break;

            case STATE_TRANSMIT:
                /* Receive was stopped into callback function */
                lora_cfg.tx = true;
 80014b8:	2301      	movs	r3, #1
 80014ba:	f88d 3019 	strb.w	r3, [sp, #25]
	const struct lora_driver_api *api =
 80014be:	4d68      	ldr	r5, [pc, #416]	; (8001660 <common_task+0x2cc>)
 80014c0:	68ae      	ldr	r6, [r5, #8]
	return api->config(dev, config);
 80014c2:	6833      	ldr	r3, [r6, #0]
 80014c4:	a903      	add	r1, sp, #12
 80014c6:	4628      	mov	r0, r5
 80014c8:	4798      	blx	r3
 80014ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014ce:	2100      	movs	r1, #0
 80014d0:	f005 fb72 	bl	8006bb8 <z_impl_k_sleep>
	return api->send(dev, data, data_len);
 80014d4:	6873      	ldr	r3, [r6, #4]
 80014d6:	2204      	movs	r2, #4
 80014d8:	496a      	ldr	r1, [pc, #424]	; (8001684 <common_task+0x2f0>)
 80014da:	4628      	mov	r0, r5
 80014dc:	4798      	blx	r3
	return api->recv_async(dev, cb, error_timeout_cb);
 80014de:	6933      	ldr	r3, [r6, #16]
 80014e0:	4a65      	ldr	r2, [pc, #404]	; (8001678 <common_task+0x2e4>)
 80014e2:	4966      	ldr	r1, [pc, #408]	; (800167c <common_task+0x2e8>)
 80014e4:	4628      	mov	r0, r5
 80014e6:	4798      	blx	r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80014e8:	4b65      	ldr	r3, [pc, #404]	; (8001680 <common_task+0x2ec>)
 80014ea:	2202      	movs	r2, #2
 80014ec:	f3bf 8f5b 	dmb	ish
 80014f0:	e853 1f00 	ldrex	r1, [r3]
 80014f4:	2903      	cmp	r1, #3
 80014f6:	d103      	bne.n	8001500 <common_task+0x16c>
 80014f8:	e843 2000 	strex	r0, r2, [r3]
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d1f7      	bne.n	80014f0 <common_task+0x15c>
 8001500:	f3bf 8f5b 	dmb	ish
 8001504:	e7b9      	b.n	800147a <common_task+0xe6>
                atomic_cas(&atomic_cur_state, STATE_TRANSMIT, STATE_RECV);
                break;

            case STATE_PER_MEAS:
                /* Start UART receive */
                per_meas(lora_dev, &lora_cfg, uart_dev, uart_buf_tx);
 8001506:	4b60      	ldr	r3, [pc, #384]	; (8001688 <common_task+0x2f4>)
 8001508:	4622      	mov	r2, r4
 800150a:	a903      	add	r1, sp, #12
 800150c:	4854      	ldr	r0, [pc, #336]	; (8001660 <common_task+0x2cc>)
 800150e:	f7ff fc97 	bl	8000e40 <per_meas>
 8001512:	4b5b      	ldr	r3, [pc, #364]	; (8001680 <common_task+0x2ec>)
 8001514:	2202      	movs	r2, #2
 8001516:	f3bf 8f5b 	dmb	ish
 800151a:	e853 1f00 	ldrex	r1, [r3]
 800151e:	2901      	cmp	r1, #1
 8001520:	d103      	bne.n	800152a <common_task+0x196>
 8001522:	e843 2000 	strex	r0, r2, [r3]
 8001526:	2800      	cmp	r0, #0
 8001528:	d1f7      	bne.n	800151a <common_task+0x186>
 800152a:	f3bf 8f5b 	dmb	ish
 800152e:	e7a4      	b.n	800147a <common_task+0xe6>
                break;

            /* Get modem configuration
             * After execution this case will be started receive */
            case STATE_GET_CFG:
                print_modem_cfg(uart_dev, &lora_cfg);
 8001530:	a903      	add	r1, sp, #12
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff f868 	bl	8000608 <print_modem_cfg>
 8001538:	4b51      	ldr	r3, [pc, #324]	; (8001680 <common_task+0x2ec>)
 800153a:	2202      	movs	r2, #2
 800153c:	f3bf 8f5b 	dmb	ish
 8001540:	e853 1f00 	ldrex	r1, [r3]
 8001544:	2904      	cmp	r1, #4
 8001546:	d103      	bne.n	8001550 <common_task+0x1bc>
 8001548:	e843 2000 	strex	r0, r2, [r3]
 800154c:	2800      	cmp	r0, #0
 800154e:	d1f7      	bne.n	8001540 <common_task+0x1ac>
 8001550:	f3bf 8f5b 	dmb	ish
 8001554:	e791      	b.n	800147a <common_task+0xe6>
                break;

            /* Increment on 100 kHz modem frequency
             * After execution this case will be started receive */
            case STATE_INCR_FREQ:
                incr_decr_modem_frequency(lora_dev, &lora_cfg, true, uart_dev, uart_buf_tx);
 8001556:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <common_task+0x2f4>)
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	4623      	mov	r3, r4
 800155c:	2201      	movs	r2, #1
 800155e:	a903      	add	r1, sp, #12
 8001560:	483f      	ldr	r0, [pc, #252]	; (8001660 <common_task+0x2cc>)
 8001562:	f7ff fb93 	bl	8000c8c <incr_decr_modem_frequency>
 8001566:	4b46      	ldr	r3, [pc, #280]	; (8001680 <common_task+0x2ec>)
 8001568:	2202      	movs	r2, #2
 800156a:	f3bf 8f5b 	dmb	ish
 800156e:	e853 1f00 	ldrex	r1, [r3]
 8001572:	2906      	cmp	r1, #6
 8001574:	d103      	bne.n	800157e <common_task+0x1ea>
 8001576:	e843 2000 	strex	r0, r2, [r3]
 800157a:	2800      	cmp	r0, #0
 800157c:	d1f7      	bne.n	800156e <common_task+0x1da>
 800157e:	f3bf 8f5b 	dmb	ish
 8001582:	e77a      	b.n	800147a <common_task+0xe6>
                break;

            /* Decrement on 100 kHz modem frequency
             * After execution this case will be started receive */
            case STATE_DECR_FREQ:
                incr_decr_modem_frequency(lora_dev, &lora_cfg, false, uart_dev, uart_buf_tx);
 8001584:	4b40      	ldr	r3, [pc, #256]	; (8001688 <common_task+0x2f4>)
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	4623      	mov	r3, r4
 800158a:	2200      	movs	r2, #0
 800158c:	a903      	add	r1, sp, #12
 800158e:	4834      	ldr	r0, [pc, #208]	; (8001660 <common_task+0x2cc>)
 8001590:	f7ff fb7c 	bl	8000c8c <incr_decr_modem_frequency>
 8001594:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <common_task+0x2ec>)
 8001596:	2202      	movs	r2, #2
 8001598:	f3bf 8f5b 	dmb	ish
 800159c:	e853 1f00 	ldrex	r1, [r3]
 80015a0:	2907      	cmp	r1, #7
 80015a2:	d103      	bne.n	80015ac <common_task+0x218>
 80015a4:	e843 2000 	strex	r0, r2, [r3]
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d1f7      	bne.n	800159c <common_task+0x208>
 80015ac:	f3bf 8f5b 	dmb	ish
 80015b0:	e763      	b.n	800147a <common_task+0xe6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80015b2:	f3bf 8f5b 	dmb	ish
 80015b6:	4b28      	ldr	r3, [pc, #160]	; (8001658 <common_task+0x2c4>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	f3bf 8f5b 	dmb	ish
                break;

            /* Set modem frequency
             * After execution this case will be started receive */
            case STATE_SET_FREQ:
                change_modem_frequency(lora_dev, &lora_cfg, atomic_get(&atomic_freq), uart_dev, uart_buf_tx);
 80015be:	4b32      	ldr	r3, [pc, #200]	; (8001688 <common_task+0x2f4>)
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	4623      	mov	r3, r4
 80015c4:	a903      	add	r1, sp, #12
 80015c6:	4826      	ldr	r0, [pc, #152]	; (8001660 <common_task+0x2cc>)
 80015c8:	f7ff fb14 	bl	8000bf4 <change_modem_frequency>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80015cc:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <common_task+0x2ec>)
 80015ce:	2202      	movs	r2, #2
 80015d0:	f3bf 8f5b 	dmb	ish
 80015d4:	e853 1f00 	ldrex	r1, [r3]
 80015d8:	2905      	cmp	r1, #5
 80015da:	d103      	bne.n	80015e4 <common_task+0x250>
 80015dc:	e843 2000 	strex	r0, r2, [r3]
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d1f7      	bne.n	80015d4 <common_task+0x240>
 80015e4:	f3bf 8f5b 	dmb	ish
 80015e8:	e747      	b.n	800147a <common_task+0xe6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80015ea:	f3bf 8f5b 	dmb	ish
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <common_task+0x2c8>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	f3bf 8f5b 	dmb	ish
                break;

            /* Set modem datarate value
             * After execution this case will be started receive */
            case STATE_SET_SF:
                change_modem_datarate(lora_dev, &lora_cfg, atomic_get(&atomic_sf), uart_dev, uart_buf_tx);
 80015f6:	4b24      	ldr	r3, [pc, #144]	; (8001688 <common_task+0x2f4>)
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	4623      	mov	r3, r4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	a903      	add	r1, sp, #12
 8001600:	4817      	ldr	r0, [pc, #92]	; (8001660 <common_task+0x2cc>)
 8001602:	f7ff faaf 	bl	8000b64 <change_modem_datarate>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <common_task+0x2ec>)
 8001608:	2202      	movs	r2, #2
 800160a:	f3bf 8f5b 	dmb	ish
 800160e:	e853 1f00 	ldrex	r1, [r3]
 8001612:	2908      	cmp	r1, #8
 8001614:	d103      	bne.n	800161e <common_task+0x28a>
 8001616:	e843 2000 	strex	r0, r2, [r3]
 800161a:	2800      	cmp	r0, #0
 800161c:	d1f7      	bne.n	800160e <common_task+0x27a>
 800161e:	f3bf 8f5b 	dmb	ish
 8001622:	e72a      	b.n	800147a <common_task+0xe6>
                break;

            /* For abort PER measurement
             * After execution this case will be started receive */
            case STATE_STOP:
                stop_session(lora_dev, uart_dev, uart_buf_tx);
 8001624:	4a18      	ldr	r2, [pc, #96]	; (8001688 <common_task+0x2f4>)
 8001626:	4621      	mov	r1, r4
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <common_task+0x2cc>)
 800162a:	f7ff fce3 	bl	8000ff4 <stop_session>
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <common_task+0x2ec>)
 8001630:	2202      	movs	r2, #2
 8001632:	f3bf 8f5b 	dmb	ish
 8001636:	e853 1f00 	ldrex	r1, [r3]
 800163a:	2909      	cmp	r1, #9
 800163c:	d103      	bne.n	8001646 <common_task+0x2b2>
 800163e:	e843 2000 	strex	r0, r2, [r3]
 8001642:	2800      	cmp	r0, #0
 8001644:	d1f7      	bne.n	8001636 <common_task+0x2a2>
 8001646:	f3bf 8f5b 	dmb	ish
 800164a:	e716      	b.n	800147a <common_task+0xe6>
 800164c:	2064      	movs	r0, #100	; 0x64
 800164e:	2100      	movs	r1, #0
 8001650:	f005 fab2 	bl	8006bb8 <z_impl_k_sleep>
        switch (atomic_get(&atomic_cur_state)) {
 8001654:	e711      	b.n	800147a <common_task+0xe6>
 8001656:	bf00      	nop
 8001658:	20000158 	.word	0x20000158
 800165c:	2000015c 	.word	0x2000015c
 8001660:	0800b7d8 	.word	0x0800b7d8
 8001664:	080010a5 	.word	0x080010a5
 8001668:	200008c4 	.word	0x200008c4
 800166c:	0800bdbc 	.word	0x0800bdbc
 8001670:	08001065 	.word	0x08001065
 8001674:	20000844 	.word	0x20000844
 8001678:	08008737 	.word	0x08008737
 800167c:	080005cd 	.word	0x080005cd
 8001680:	20000150 	.word	0x20000150
 8001684:	20000840 	.word	0x20000840
 8001688:	20000884 	.word	0x20000884

0800168c <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 800168c:	f04f 0210 	mov.w	r2, #16
 8001690:	f3ef 8311 	mrs	r3, BASEPRI
 8001694:	f382 8812 	msr	BASEPRI_MAX, r2
 8001698:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 800169c:	f383 8811 	msr	BASEPRI, r3
 80016a0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 80016a4:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <stm32l4_init+0x24>)
 80016a6:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <stm32l4_init+0x28>)
 80016a8:	601a      	str	r2, [r3, #0]

	return 0;
}
 80016aa:	2000      	movs	r0, #0
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	2000031c 	.word	0x2000031c
 80016b4:	003d0900 	.word	0x003d0900

080016b8 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
 80016b8:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 80016ba:	4c04      	ldr	r4, [pc, #16]	; (80016cc <__do_init_array_aux+0x14>)
 80016bc:	e002      	b.n	80016c4 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 80016be:	f854 3b04 	ldr.w	r3, [r4], #4
 80016c2:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <__do_init_array_aux+0x18>)
 80016c6:	429c      	cmp	r4, r3
 80016c8:	d3f9      	bcc.n	80016be <__do_init_array_aux+0x6>
	}
}
 80016ca:	bd10      	pop	{r4, pc}
 80016cc:	0800baa0 	.word	0x0800baa0
 80016d0:	0800baa0 	.word	0x0800baa0

080016d4 <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <__do_global_ctors_aux+0x1c>)
 80016d6:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 80016d8:	b14b      	cbz	r3, 80016ee <__do_global_ctors_aux+0x1a>
{
 80016da:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 80016dc:	1e5c      	subs	r4, r3, #1
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <__do_global_ctors_aux+0x1c>)
 80016e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e4:	4798      	blx	r3
 80016e6:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d1f7      	bne.n	80016dc <__do_global_ctors_aux+0x8>
	}
}
 80016ec:	bd10      	pop	{r4, pc}
 80016ee:	4770      	bx	lr
 80016f0:	0800ba98 	.word	0x0800ba98

080016f4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 80016f4:	4901      	ldr	r1, [pc, #4]	; (80016fc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 80016f6:	2210      	movs	r2, #16
	str	r2, [r1]
 80016f8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 80016fa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 80016fc:	e000ed10 	.word	0xe000ed10

08001700 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8001700:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8001702:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8001704:	f380 8811 	msr	BASEPRI, r0
	isb
 8001708:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 800170c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8001710:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8001712:	b662      	cpsie	i
	isb
 8001714:	f3bf 8f6f 	isb	sy

	bx	lr
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop

0800171c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 800171c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800171e:	2800      	cmp	r0, #0
 8001720:	db07      	blt.n	8001732 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001722:	f000 021f 	and.w	r2, r0, #31
 8001726:	0940      	lsrs	r0, r0, #5
 8001728:	2301      	movs	r3, #1
 800172a:	4093      	lsls	r3, r2
 800172c:	4a01      	ldr	r2, [pc, #4]	; (8001734 <arch_irq_enable+0x18>)
 800172e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8001732:	4770      	bx	lr
 8001734:	e000e100 	.word	0xe000e100

08001738 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 8001738:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800173a:	2800      	cmp	r0, #0
 800173c:	db0c      	blt.n	8001758 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	f000 021f 	and.w	r2, r0, #31
 8001742:	0940      	lsrs	r0, r0, #5
 8001744:	2301      	movs	r3, #1
 8001746:	4093      	lsls	r3, r2
 8001748:	3020      	adds	r0, #32
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <arch_irq_disable+0x24>)
 800174c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001750:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001754:	f3bf 8f6f 	isb	sy
}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100

08001760 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 8001760:	0942      	lsrs	r2, r0, #5
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <arch_irq_is_enabled+0x18>)
 8001764:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001768:	f000 001f 	and.w	r0, r0, #31
 800176c:	2301      	movs	r3, #1
 800176e:	fa03 f000 	lsl.w	r0, r3, r0
}
 8001772:	4010      	ands	r0, r2
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 800177c:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 800177e:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001780:	2800      	cmp	r0, #0
 8001782:	db08      	blt.n	8001796 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	0109      	lsls	r1, r1, #4
 8001786:	b2c9      	uxtb	r1, r1
 8001788:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800178c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001790:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8001794:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	f000 000f 	and.w	r0, r0, #15
 800179a:	0109      	lsls	r1, r1, #4
 800179c:	b2c9      	uxtb	r1, r1
 800179e:	4b01      	ldr	r3, [pc, #4]	; (80017a4 <z_arm_irq_priority_set+0x28>)
 80017a0:	5419      	strb	r1, [r3, r0]
}
 80017a2:	4770      	bx	lr
 80017a4:	e000ed14 	.word	0xe000ed14

080017a8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 80017a8:	bf30      	wfi
    b z_SysNmiOnReset
 80017aa:	f7ff bffd 	b.w	80017a8 <z_SysNmiOnReset>
 80017ae:	bf00      	nop

080017b0 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 80017b0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <z_arm_prep_c+0x54>)
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <z_arm_prep_c+0x58>)
 80017b6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80017ba:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80017bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017c0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 80017c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017c8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 80017d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80017d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 80017dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017e0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("dsb 0xF":::"memory");
 80017e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017ea:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 80017ee:	2300      	movs	r3, #0
 80017f0:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 80017f4:	f004 fafe 	bl	8005df4 <z_bss_zero>
	z_data_copy();
 80017f8:	f005 fa46 	bl	8006c88 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 80017fc:	f000 fa7a 	bl	8001cf4 <z_arm_interrupt_init>
	z_cstart();
 8001800:	f004 fb04 	bl	8005e0c <z_cstart>
 8001804:	e000ed00 	.word	0xe000ed00
 8001808:	08000000 	.word	0x08000000

0800180c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 800180c:	4a09      	ldr	r2, [pc, #36]	; (8001834 <arch_swap+0x28>)
 800180e:	6893      	ldr	r3, [r2, #8]
 8001810:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 8001812:	4909      	ldr	r1, [pc, #36]	; (8001838 <arch_swap+0x2c>)
 8001814:	6809      	ldr	r1, [r1, #0]
 8001816:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001818:	4908      	ldr	r1, [pc, #32]	; (800183c <arch_swap+0x30>)
 800181a:	684b      	ldr	r3, [r1, #4]
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	604b      	str	r3, [r1, #4]
 8001822:	2300      	movs	r3, #0
 8001824:	f383 8811 	msr	BASEPRI, r3
 8001828:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 800182c:	6893      	ldr	r3, [r2, #8]
}
 800182e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000e20 	.word	0x20000e20
 8001838:	0800c398 	.word	0x0800c398
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8001840:	4921      	ldr	r1, [pc, #132]	; (80018c8 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8001842:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
 8001844:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8001848:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 800184c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800184e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8001852:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 8001856:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
 800185a:	d103      	bne.n	8001864 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
 800185c:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
 8001860:	ec80 8a10 	vstmia	r0, {s16-s31}

08001864 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001864:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8001866:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 800186a:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 800186e:	4f17      	ldr	r7, [pc, #92]	; (80018cc <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8001870:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8001874:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8001876:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8001878:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
 800187a:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800187e:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8001880:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8001882:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8001884:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 8001888:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
 800188c:	d003      	beq.n	8001896 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 800188e:	2300      	movs	r3, #0
    vmsr fpscr, r3
 8001890:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
 8001894:	e003      	b.n	800189e <in_fp_endif>

08001896 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8001896:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
 800189a:	ec90 8a10 	vldmia	r0, {s16-s31}

0800189e <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 800189e:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
 80018a2:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 80018a6:	f383 8814 	msr	CONTROL, r3
    isb
 80018aa:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80018ae:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80018b0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80018b2:	f000 fa73 	bl	8001d9c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80018b6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80018ba:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80018be:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80018c2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 80018c6:	4770      	bx	lr
    ldr r1, =_kernel
 80018c8:	20000e20 	.word	0x20000e20
    ldr v4, =_SCS_ICSR
 80018cc:	e000ed04 	.word	0xe000ed04

080018d0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 80018d0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80018d4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80018d6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80018da:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80018de:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80018e0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80018e4:	2902      	cmp	r1, #2
    beq _oops
 80018e6:	d0ff      	beq.n	80018e8 <_oops>

080018e8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80018e8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80018ea:	f006 ff3c 	bl	8008766 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80018ee:	bd01      	pop	{r0, pc}

080018f0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 80018f0:	b410      	push	{r4}
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 80018f2:	7b01      	ldrb	r1, [r0, #12]
 80018f4:	f011 0f02 	tst.w	r1, #2
 80018f8:	d005      	beq.n	8001906 <arch_new_thread+0x16>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
 80018fa:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80018fc:	3160      	adds	r1, #96	; 0x60
 80018fe:	6681      	str	r1, [r0, #104]	; 0x68
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
 8001900:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8001902:	3960      	subs	r1, #96	; 0x60
 8001904:	66c1      	str	r1, [r0, #108]	; 0x6c
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8001906:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 800190a:	4914      	ldr	r1, [pc, #80]	; (800195c <arch_new_thread+0x6c>)
 800190c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8001910:	f021 0101 	bic.w	r1, r1, #1
 8001914:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 8001918:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 800191c:	9b01      	ldr	r3, [sp, #4]
 800191e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8001922:	9b02      	ldr	r3, [sp, #8]
 8001924:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8001928:	9b03      	ldr	r3, [sp, #12]
 800192a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 800192e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001932:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 8001936:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
 800193c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
 8001940:	23fd      	movs	r3, #253	; 0xfd
 8001942:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8001946:	7b03      	ldrb	r3, [r0, #12]
 8001948:	f013 0f02 	tst.w	r3, #2
 800194c:	d003      	beq.n	8001956 <arch_new_thread+0x66>
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 800194e:	f64f 5308 	movw	r3, #64776	; 0xfd08
 8001952:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8001956:	f85d 4b04 	ldr.w	r4, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	08008739 	.word	0x08008739

08001960 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8001960:	7b03      	ldrb	r3, [r0, #12]
 8001962:	f013 0f02 	tst.w	r3, #2
 8001966:	d11a      	bne.n	800199e <z_arm_mpu_stack_guard_and_fpu_adjust+0x3e>
		((thread->arch.mode_exc_return & EXC_RETURN_FTYPE) == 0)) {
 8001968:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 800196c:	f013 0f10 	tst.w	r3, #16
 8001970:	d015      	beq.n	800199e <z_arm_mpu_stack_guard_and_fpu_adjust+0x3e>
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
 8001972:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <z_arm_mpu_stack_guard_and_fpu_adjust+0x78>)
 8001974:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001976:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800197a:	6353      	str	r3, [r2, #52]	; 0x34
		if ((thread->arch.mode &
 800197c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8001980:	f013 0f08 	tst.w	r3, #8
 8001984:	d025      	beq.n	80019d2 <z_arm_mpu_stack_guard_and_fpu_adjust+0x72>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8001986:	f023 0308 	bic.w	r3, r3, #8
 800198a:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start -=
 800198e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001990:	3b60      	subs	r3, #96	; 0x60
 8001992:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size +=
 8001994:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001996:	3360      	adds	r3, #96	; 0x60
 8001998:	66c3      	str	r3, [r0, #108]	; 0x6c

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
 800199a:	2020      	movs	r0, #32
 800199c:	4770      	bx	lr
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
 800199e:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <z_arm_mpu_stack_guard_and_fpu_adjust+0x78>)
 80019a0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80019a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019a6:	6353      	str	r3, [r2, #52]	; 0x34
		if ((thread->arch.mode &
 80019a8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 80019ac:	f013 0f08 	tst.w	r3, #8
 80019b0:	d109      	bne.n	80019c6 <z_arm_mpu_stack_guard_and_fpu_adjust+0x66>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 80019b2:	f043 0308 	orr.w	r3, r3, #8
 80019b6:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start +=
 80019ba:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80019bc:	3360      	adds	r3, #96	; 0x60
 80019be:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size -=
 80019c0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80019c2:	3b60      	subs	r3, #96	; 0x60
 80019c4:	66c3      	str	r3, [r0, #108]	; 0x6c
		thread->base.user_options |= K_FP_REGS;
 80019c6:	7b03      	ldrb	r3, [r0, #12]
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	7303      	strb	r3, [r0, #12]
		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
 80019ce:	2080      	movs	r0, #128	; 0x80
 80019d0:	4770      	bx	lr
	return MPU_GUARD_ALIGN_AND_SIZE;
 80019d2:	2020      	movs	r0, #32
}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ef00 	.word	0xe000ef00

080019dc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <z_check_thread_stack_fail+0x64>)
 80019de:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
 80019e0:	b30b      	cbz	r3, 8001a26 <z_check_thread_stack_fail+0x4a>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
 80019e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 80019e6:	f012 0f08 	tst.w	r2, #8
 80019ea:	d00e      	beq.n	8001a0a <z_check_thread_stack_fail+0x2e>
 80019ec:	2280      	movs	r2, #128	; 0x80
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80019ee:	f110 0f16 	cmn.w	r0, #22
 80019f2:	d01a      	beq.n	8001a2a <z_check_thread_stack_fail+0x4e>
{
 80019f4:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80019f6:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80019f8:	1aa2      	subs	r2, r4, r2
 80019fa:	4282      	cmp	r2, r0
 80019fc:	d807      	bhi.n	8001a0e <z_check_thread_stack_fail+0x32>
 80019fe:	4284      	cmp	r4, r0
 8001a00:	d90b      	bls.n	8001a1a <z_check_thread_stack_fail+0x3e>
 8001a02:	428c      	cmp	r4, r1
 8001a04:	d80b      	bhi.n	8001a1e <z_check_thread_stack_fail+0x42>
 8001a06:	2100      	movs	r1, #0
 8001a08:	e002      	b.n	8001a10 <z_check_thread_stack_fail+0x34>
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	e7ef      	b.n	80019ee <z_check_thread_stack_fail+0x12>
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8001a0e:	2100      	movs	r1, #0
 8001a10:	b939      	cbnz	r1, 8001a22 <z_check_thread_stack_fail+0x46>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8001a12:	2000      	movs	r0, #0
}
 8001a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a18:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	e7f8      	b.n	8001a10 <z_check_thread_stack_fail+0x34>
 8001a1e:	2101      	movs	r1, #1
 8001a20:	e7f6      	b.n	8001a10 <z_check_thread_stack_fail+0x34>
		return thread->stack_info.start;
 8001a22:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8001a24:	e7f6      	b.n	8001a14 <z_check_thread_stack_fail+0x38>
		return 0;
 8001a26:	2000      	movs	r0, #0
 8001a28:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8001a2a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a2c:	428a      	cmp	r2, r1
 8001a2e:	bf94      	ite	ls
 8001a30:	2100      	movls	r1, #0
 8001a32:	2101      	movhi	r1, #1
 8001a34:	b909      	cbnz	r1, 8001a3a <z_check_thread_stack_fail+0x5e>
	return 0;
 8001a36:	2000      	movs	r0, #0
}
 8001a38:	4770      	bx	lr
		return thread->stack_info.start;
 8001a3a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000e20 	.word	0x20000e20

08001a44 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8001a44:	b508      	push	{r3, lr}
 8001a46:	4604      	mov	r4, r0
 8001a48:	460e      	mov	r6, r1
 8001a4a:	4615      	mov	r5, r2
	z_arm_prepare_switch_to_main();
 8001a4c:	f006 fe9d 	bl	800878a <z_arm_prepare_switch_to_main>

	_current = main_thread;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <arch_switch_to_main_thread+0x30>)
 8001a52:	609c      	str	r4, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8001a54:	4620      	mov	r0, r4
 8001a56:	f000 f9a1 	bl	8001d9c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f386 8809 	msr	PSP, r6
 8001a60:	2100      	movs	r1, #0
 8001a62:	b663      	cpsie	if
 8001a64:	f381 8811 	msr	BASEPRI, r1
 8001a68:	f3bf 8f6f 	isb	sy
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f006 fe62 	bl	8008738 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8001a74:	20000e20 	.word	0x20000e20

08001a78 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8001a78:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8001a7a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001a7e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8001a82:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8001a86:	4904      	ldr	r1, [pc, #16]	; (8001a98 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001a88:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8001a8a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001a8c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001a8e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8001a92:	4902      	ldr	r1, [pc, #8]	; (8001a9c <_isr_wrapper+0x24>)
	bx r1
 8001a94:	4708      	bx	r1
 8001a96:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001a98:	0800b7f0 	.word	0x0800b7f0
	ldr r1, =z_arm_int_exit
 8001a9c:	08001aa1 	.word	0x08001aa1

08001aa0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8001aa2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8001aa4:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8001aa6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001aa8:	d003      	beq.n	8001ab2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8001aaa:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001ab0:	600a      	str	r2, [r1, #0]

08001ab2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8001ab2:	4770      	bx	lr
	ldr r3, =_kernel
 8001ab4:	20000e20 	.word	0x20000e20
	ldr r1, =_SCS_ICSR
 8001ab8:	e000ed04 	.word	0xe000ed04

08001abc <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
 8001abc:	b510      	push	{r4, lr}
 8001abe:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <bus_fault+0x50>)
 8001ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8001ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001acc:	d00b      	beq.n	8001ae6 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <bus_fault+0x50>)
 8001ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001ad8:	d005      	beq.n	8001ae6 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8001ada:	b121      	cbz	r1, 8001ae6 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8001adc:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <bus_fault+0x50>)
 8001ade:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001ae0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ae4:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <bus_fault+0x50>)
 8001ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001af0:	d101      	bne.n	8001af6 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <bus_fault+0x50>)
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <bus_fault+0x50>)
 8001af8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001afa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8001afe:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8001b00:	2101      	movs	r1, #1
 8001b02:	f006 fe50 	bl	80087a6 <memory_fault_recoverable>
 8001b06:	7020      	strb	r0, [r4, #0]

	return reason;
}
 8001b08:	2000      	movs	r0, #0
 8001b0a:	bd10      	pop	{r4, pc}
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <usage_fault+0x20>)
 8001b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8001b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8001b16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8001b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b20:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8001b24:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <mem_manage_fault>:
{
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	4605      	mov	r5, r0
 8001b38:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <mem_manage_fault+0x88>)
 8001b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	f013 0f02 	tst.w	r3, #2
 8001b46:	d00c      	beq.n	8001b62 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
 8001b48:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <mem_manage_fault+0x88>)
 8001b4a:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b52:	d025      	beq.n	8001ba0 <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
 8001b54:	b139      	cbz	r1, 8001b66 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8001b56:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <mem_manage_fault+0x88>)
 8001b58:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b5e:	6293      	str	r3, [r2, #40]	; 0x28
 8001b60:	e001      	b.n	8001b66 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
 8001b62:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <mem_manage_fault+0x88>)
 8001b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8001b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	f013 0f10 	tst.w	r3, #16
 8001b72:	d104      	bne.n	8001b7e <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <mem_manage_fault+0x88>)
 8001b76:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001b78:	f014 0402 	ands.w	r4, r4, #2
 8001b7c:	d004      	beq.n	8001b88 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <mem_manage_fault+0x88>)
 8001b80:	685c      	ldr	r4, [r3, #4]
 8001b82:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8001b86:	d10e      	bne.n	8001ba6 <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8001b88:	4a0c      	ldr	r2, [pc, #48]	; (8001bbc <mem_manage_fault+0x88>)
 8001b8a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001b8c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001b90:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8001b92:	2101      	movs	r1, #1
 8001b94:	4628      	mov	r0, r5
 8001b96:	f006 fe06 	bl	80087a6 <memory_fault_recoverable>
 8001b9a:	7030      	strb	r0, [r6, #0]
}
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
 8001ba0:	f06f 0015 	mvn.w	r0, #21
 8001ba4:	e7df      	b.n	8001b66 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	f7ff ff18 	bl	80019dc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8001bac:	4604      	mov	r4, r0
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d0ea      	beq.n	8001b88 <mem_manage_fault+0x54>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001bb2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8001bb6:	2402      	movs	r4, #2
 8001bb8:	e7e6      	b.n	8001b88 <mem_manage_fault+0x54>
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
 8001bc0:	b508      	push	{r3, lr}
 8001bc2:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <hard_fault+0x78>)
 8001bca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001bcc:	f010 0002 	ands.w	r0, r0, #2
 8001bd0:	d12e      	bne.n	8001c30 <hard_fault+0x70>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db2c      	blt.n	8001c32 <hard_fault+0x72>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <hard_fault+0x78>)
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8001be0:	d028      	beq.n	8001c34 <hard_fault+0x74>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8001be2:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 8001be6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001bea:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d00f      	beq.n	8001c12 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <hard_fault+0x78>)
 8001bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bf8:	b973      	cbnz	r3, 8001c18 <hard_fault+0x58>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <hard_fault+0x78>)
 8001bfc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c00:	b983      	cbnz	r3, 8001c24 <hard_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <hard_fault+0x78>)
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	b19b      	cbz	r3, 8001c32 <hard_fault+0x72>
			reason = usage_fault(esf);
 8001c0a:	4660      	mov	r0, ip
 8001c0c:	f7ff ff80 	bl	8001b10 <usage_fault>
 8001c10:	e00f      	b.n	8001c32 <hard_fault+0x72>
			reason = esf->basic.r0;
 8001c12:	f8dc 0000 	ldr.w	r0, [ip]
 8001c16:	e00c      	b.n	8001c32 <hard_fault+0x72>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001c18:	460a      	mov	r2, r1
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4660      	mov	r0, ip
 8001c1e:	f7ff ff89 	bl	8001b34 <mem_manage_fault>
 8001c22:	e006      	b.n	8001c32 <hard_fault+0x72>
			reason = bus_fault(esf, 1, recoverable);
 8001c24:	460a      	mov	r2, r1
 8001c26:	2101      	movs	r1, #1
 8001c28:	4660      	mov	r0, ip
 8001c2a:	f7ff ff47 	bl	8001abc <bus_fault>
 8001c2e:	e000      	b.n	8001c32 <hard_fault+0x72>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8001c30:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
 8001c32:	bd08      	pop	{r3, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8001c34:	4618      	mov	r0, r3
	return reason;
 8001c36:	e7fc      	b.n	8001c32 <hard_fault+0x72>
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	b09c      	sub	sp, #112	; 0x70
 8001c40:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001c42:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <z_arm_fault+0x90>)
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f383 8811 	msr	BASEPRI, r3
 8001c50:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001c54:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8001c58:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8001c5c:	d115      	bne.n	8001c8a <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8001c5e:	f002 030c 	and.w	r3, r2, #12
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d014      	beq.n	8001c90 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8001c66:	f012 0f08 	tst.w	r2, #8
 8001c6a:	d00b      	beq.n	8001c84 <z_arm_fault+0x48>
	*nested_exc = false;
 8001c6c:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 8001c6e:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
 8001c72:	4620      	mov	r0, r4
 8001c74:	f006 fd9c 	bl	80087b0 <fault_handle>
 8001c78:	4605      	mov	r5, r0
	if (recoverable) {
 8001c7a:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
 8001c7e:	b153      	cbz	r3, 8001c96 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 8001c80:	b01c      	add	sp, #112	; 0x70
 8001c82:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
 8001c84:	4604      	mov	r4, r0
			*nested_exc = true;
 8001c86:	2601      	movs	r6, #1
 8001c88:	e7f1      	b.n	8001c6e <z_arm_fault+0x32>
	*nested_exc = false;
 8001c8a:	2600      	movs	r6, #0
		return NULL;
 8001c8c:	4634      	mov	r4, r6
 8001c8e:	e7ee      	b.n	8001c6e <z_arm_fault+0x32>
	*nested_exc = false;
 8001c90:	2600      	movs	r6, #0
		return NULL;
 8001c92:	4634      	mov	r4, r6
 8001c94:	e7eb      	b.n	8001c6e <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8001c96:	2268      	movs	r2, #104	; 0x68
 8001c98:	4621      	mov	r1, r4
 8001c9a:	a801      	add	r0, sp, #4
 8001c9c:	f009 fa35 	bl	800b10a <memcpy>
	if (nested_exc) {
 8001ca0:	b14e      	cbz	r6, 8001cb6 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8001ca2:	9b08      	ldr	r3, [sp, #32]
 8001ca4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ca8:	b95a      	cbnz	r2, 8001cc2 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8001caa:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8001cae:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8001cb2:	9308      	str	r3, [sp, #32]
 8001cb4:	e005      	b.n	8001cc2 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001cb6:	9b08      	ldr	r3, [sp, #32]
 8001cb8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
 8001cc2:	a901      	add	r1, sp, #4
 8001cc4:	4628      	mov	r0, r5
 8001cc6:	f006 fd4a 	bl	800875e <z_arm_fatal_error>
 8001cca:	e7d9      	b.n	8001c80 <z_arm_fault+0x44>
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001cd0:	4a02      	ldr	r2, [pc, #8]	; (8001cdc <z_arm_fault_init+0xc>)
 8001cd2:	6953      	ldr	r3, [r2, #20]
 8001cd4:	f043 0310 	orr.w	r3, r3, #16
 8001cd8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001ce0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001ce4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8001ce8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8001cea:	4672      	mov	r2, lr
	bl z_arm_fault
 8001cec:	f7ff ffa6 	bl	8001c3c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8001cf0:	bd01      	pop	{r0, pc}
 8001cf2:	bf00      	nop

08001cf4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8001cf4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8001cf6:	e006      	b.n	8001d06 <z_arm_interrupt_init+0x12>
 8001cf8:	f002 010f 	and.w	r1, r2, #15
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <z_arm_interrupt_init+0x30>)
 8001cfe:	440b      	add	r3, r1
 8001d00:	2110      	movs	r1, #16
 8001d02:	7619      	strb	r1, [r3, #24]
 8001d04:	3201      	adds	r2, #1
 8001d06:	2a54      	cmp	r2, #84	; 0x54
 8001d08:	dc0a      	bgt.n	8001d20 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 8001d0a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	dbf3      	blt.n	8001cf8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001d14:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001d18:	2110      	movs	r1, #16
 8001d1a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8001d1e:	e7f1      	b.n	8001d04 <z_arm_interrupt_init+0x10>
	}
}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ecfc 	.word	0xe000ecfc

08001d28 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001d28:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001d2a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8001d2e:	4808      	ldr	r0, [pc, #32]	; (8001d50 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8001d30:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8001d34:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8001d36:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8001d3a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8001d3e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8001d40:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8001d42:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8001d46:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8001d4a:	f7ff fd31 	bl	80017b0 <z_arm_prep_c>
 8001d4e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001d50:	20002580 	.word	0x20002580

08001d54 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8001d54:	b508      	push	{r3, lr}
	if (_current == thread) {
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <z_impl_k_thread_abort+0x24>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4283      	cmp	r3, r0
 8001d5c:	d002      	beq.n	8001d64 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8001d5e:	f004 ff59 	bl	8006c14 <z_thread_abort>
}
 8001d62:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d64:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f8      	beq.n	8001d5e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001d6c:	4a03      	ldr	r2, [pc, #12]	; (8001d7c <z_impl_k_thread_abort+0x28>)
 8001d6e:	6853      	ldr	r3, [r2, #4]
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6053      	str	r3, [r2, #4]
 8001d76:	e7f2      	b.n	8001d5e <z_impl_k_thread_abort+0xa>
 8001d78:	20000e20 	.word	0x20000e20
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8001d80:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8001d82:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <z_arm_configure_static_mpu_regions+0x10>)
 8001d84:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <z_arm_configure_static_mpu_regions+0x14>)
 8001d86:	2101      	movs	r1, #1
 8001d88:	4803      	ldr	r0, [pc, #12]	; (8001d98 <z_arm_configure_static_mpu_regions+0x18>)
 8001d8a:	f006 fd97 	bl	80088bc <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8001d8e:	bd08      	pop	{r3, pc}
 8001d90:	20028000 	.word	0x20028000
 8001d94:	20000000 	.word	0x20000000
 8001d98:	0800be44 	.word	0x0800be44

08001d9c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
 8001da0:	f7ff fdde 	bl	8001960 <z_arm_mpu_stack_guard_and_fpu_adjust>
 8001da4:	4603      	mov	r3, r0
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8001da6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001da8:	1a12      	subs	r2, r2, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8001daa:	4804      	ldr	r0, [pc, #16]	; (8001dbc <z_arm_configure_dynamic_mpu_regions+0x20>)
 8001dac:	6002      	str	r2, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 8001dae:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <z_arm_configure_dynamic_mpu_regions+0x24>)
 8001db2:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8001db4:	2101      	movs	r1, #1
 8001db6:	f006 fd85 	bl	80088c4 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 8001dba:	bd10      	pop	{r4, pc}
 8001dbc:	200008d4 	.word	0x200008d4
 8001dc0:	150b0000 	.word	0x150b0000

08001dc4 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8001dc4:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <region_init+0x24>)
 8001dc6:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001dca:	680b      	ldr	r3, [r1, #0]
 8001dcc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8001dd0:	4303      	orrs	r3, r0
 8001dd2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001dd6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001dda:	688b      	ldr	r3, [r1, #8]
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 8001dec:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 8001dee:	4c03      	ldr	r4, [pc, #12]	; (8001dfc <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8001df0:	2301      	movs	r3, #1
 8001df2:	7822      	ldrb	r2, [r4, #0]
 8001df4:	f006 fd3a 	bl	800886c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8001df8:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 8001dfa:	bd10      	pop	{r4, pc}
 8001dfc:	20000e80 	.word	0x20000e80

08001e00 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8001e00:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8001e02:	2300      	movs	r3, #0
 8001e04:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <mpu_configure_dynamic_mpu_regions+0x2c>)
 8001e06:	7812      	ldrb	r2, [r2, #0]
 8001e08:	f006 fd30 	bl	800886c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8001e0c:	f110 0f16 	cmn.w	r0, #22
 8001e10:	d00a      	beq.n	8001e28 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8001e12:	4603      	mov	r3, r0
 8001e14:	e006      	b.n	8001e24 <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8001e16:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <mpu_configure_dynamic_mpu_regions+0x30>)
 8001e18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8001e22:	3301      	adds	r3, #1
 8001e24:	2b07      	cmp	r3, #7
 8001e26:	ddf6      	ble.n	8001e16 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 8001e28:	bd08      	pop	{r3, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000e80 	.word	0x20000e80
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <arm_core_mpu_enable+0x14>)
 8001e36:	2205      	movs	r2, #5
 8001e38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e40:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001e4c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <arm_core_mpu_disable+0x10>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 8001e60:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <z_arm_mpu_init+0x3c>)
 8001e64:	681d      	ldr	r5, [r3, #0]
 8001e66:	2d08      	cmp	r5, #8
 8001e68:	d815      	bhi.n	8001e96 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8001e6a:	f7ff ffef 	bl	8001e4c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8001e6e:	2400      	movs	r4, #0
 8001e70:	e009      	b.n	8001e86 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <z_arm_mpu_init+0x3c>)
 8001e74:	6859      	ldr	r1, [r3, #4]
 8001e76:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001e7a:	0093      	lsls	r3, r2, #2
 8001e7c:	4419      	add	r1, r3
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f7ff ffa0 	bl	8001dc4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8001e84:	3401      	adds	r4, #1
 8001e86:	42a5      	cmp	r5, r4
 8001e88:	d8f3      	bhi.n	8001e72 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <z_arm_mpu_init+0x40>)
 8001e8c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 8001e8e:	f7ff ffd1 	bl	8001e34 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8001e92:	2000      	movs	r0, #0
}
 8001e94:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 8001e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e9a:	e7fb      	b.n	8001e94 <z_arm_mpu_init+0x34>
 8001e9c:	0800be88 	.word	0x0800be88
 8001ea0:	20000e80 	.word	0x20000e80

08001ea4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	4606      	mov	r6, r0
 8001ea8:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 8001eaa:	2400      	movs	r4, #0
 8001eac:	e000      	b.n	8001eb0 <z_impl_zephyr_read_stdin+0xc>
 8001eae:	3401      	adds	r4, #1
 8001eb0:	42ac      	cmp	r4, r5
 8001eb2:	da08      	bge.n	8001ec6 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <z_impl_zephyr_read_stdin+0x28>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4798      	blx	r3
 8001eba:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8001ebc:	280a      	cmp	r0, #10
 8001ebe:	d001      	beq.n	8001ec4 <z_impl_zephyr_read_stdin+0x20>
 8001ec0:	280d      	cmp	r0, #13
 8001ec2:	d1f4      	bne.n	8001eae <z_impl_zephyr_read_stdin+0xa>
			i++;
 8001ec4:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	bd70      	pop	{r4, r5, r6, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000160 	.word	0x20000160

08001ed0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	4605      	mov	r5, r0
 8001ed4:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	e004      	b.n	8001ee4 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <z_impl_zephyr_write_stdout+0x30>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	7830      	ldrb	r0, [r6, #0]
 8001ee0:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8001ee2:	3401      	adds	r4, #1
 8001ee4:	42bc      	cmp	r4, r7
 8001ee6:	da08      	bge.n	8001efa <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 8001ee8:	192e      	adds	r6, r5, r4
 8001eea:	5d2b      	ldrb	r3, [r5, r4]
 8001eec:	2b0a      	cmp	r3, #10
 8001eee:	d1f4      	bne.n	8001eda <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <z_impl_zephyr_write_stdout+0x30>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	200d      	movs	r0, #13
 8001ef6:	4798      	blx	r3
 8001ef8:	e7ef      	b.n	8001eda <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 8001efa:	4638      	mov	r0, r7
 8001efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000164 	.word	0x20000164

08001f04 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8001f04:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 8001f06:	2205      	movs	r2, #5
 8001f08:	4902      	ldr	r1, [pc, #8]	; (8001f14 <_exit+0x10>)
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f006 fceb 	bl	80088e6 <_write>
	while (1) {
 8001f10:	e7fe      	b.n	8001f10 <_exit+0xc>
 8001f12:	bf00      	nop
 8001f14:	0800be50 	.word	0x0800be50

08001f18 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8001f18:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <_sbrk+0x24>)
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <_sbrk+0x28>)
 8001f20:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8001f22:	440a      	add	r2, r1
 8001f24:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8001f28:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d202      	bcs.n	8001f36 <_sbrk+0x1e>
		heap_sz += count;
 8001f30:	4b02      	ldr	r3, [pc, #8]	; (8001f3c <_sbrk+0x24>)
 8001f32:	601a      	str	r2, [r3, #0]
		ret = ptr;
 8001f34:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 8001f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8001f3a:	4770      	bx	lr
 8001f3c:	200008e0 	.word	0x200008e0
 8001f40:	20003220 	.word	0x20003220

08001f44 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
 8001f44:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
 8001f46:	221d      	movs	r2, #29
 8001f48:	4904      	ldr	r1, [pc, #16]	; (8001f5c <__chk_fail+0x18>)
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f006 fccb 	bl	80088e6 <_write>
	k_oops();
 8001f50:	4040      	eors	r0, r0
 8001f52:	f380 8811 	msr	BASEPRI, r0
 8001f56:	f04f 0003 	mov.w	r0, #3
 8001f5a:	df02      	svc	2
	CODE_UNREACHABLE;
 8001f5c:	0800be58 	.word	0x0800be58

08001f60 <rand_get>:
	return random_num;
}
#endif /* CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR */

static int rand_get(uint8_t *dst, size_t outlen, bool csrand)
{
 8001f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f62:	b083      	sub	sp, #12
 8001f64:	4605      	mov	r5, r0
 8001f66:	460c      	mov	r4, r1
 8001f68:	4616      	mov	r6, r2
	const struct device *dev = entropy_driver;
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <rand_get+0x5c>)
 8001f6c:	6818      	ldr	r0, [r3, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
 8001f6e:	b148      	cbz	r0, 8001f84 <rand_get+0x24>
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
	}

	ret = entropy_get_entropy(dev, dst, outlen);
 8001f70:	b2a2      	uxth	r2, r4

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
 8001f72:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4629      	mov	r1, r5
 8001f78:	4798      	blx	r3
 8001f7a:	4603      	mov	r3, r0

	if (unlikely(ret < 0)) {
 8001f7c:	0fc0      	lsrs	r0, r0, #31
 8001f7e:	d107      	bne.n	8001f90 <rand_get+0x30>
			len += copylen;
		}
	}

	return 0;
}
 8001f80:	b003      	add	sp, #12
 8001f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f84:	480e      	ldr	r0, [pc, #56]	; (8001fc0 <rand_get+0x60>)
 8001f86:	f003 fe61 	bl	8005c4c <z_impl_device_get_binding>
		entropy_driver = dev;
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <rand_get+0x5c>)
 8001f8c:	6018      	str	r0, [r3, #0]
 8001f8e:	e7ef      	b.n	8001f70 <rand_get+0x10>
		if (csrand) {
 8001f90:	b156      	cbz	r6, 8001fa8 <rand_get+0x48>
			return ret;
 8001f92:	4618      	mov	r0, r3
 8001f94:	e7f4      	b.n	8001f80 <rand_get+0x20>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8001f96:	f003 fca3 	bl	80058e0 <sys_clock_cycle_get_32>
			random_num = k_cycle_get_32();
 8001f9a:	9001      	str	r0, [sp, #4]
 8001f9c:	463a      	mov	r2, r7
 8001f9e:	a901      	add	r1, sp, #4
 8001fa0:	19a8      	adds	r0, r5, r6
 8001fa2:	f009 f8b2 	bl	800b10a <memcpy>
			len += copylen;
 8001fa6:	443e      	add	r6, r7
		while (len < outlen) {
 8001fa8:	42a6      	cmp	r6, r4
 8001faa:	d204      	bcs.n	8001fb6 <rand_get+0x56>
			size_t copylen = outlen - len;
 8001fac:	1ba7      	subs	r7, r4, r6
			if (copylen > blocksize) {
 8001fae:	2f04      	cmp	r7, #4
 8001fb0:	d9f1      	bls.n	8001f96 <rand_get+0x36>
				copylen = blocksize;
 8001fb2:	2704      	movs	r7, #4
 8001fb4:	e7ef      	b.n	8001f96 <rand_get+0x36>
	return 0;
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	e7e2      	b.n	8001f80 <rand_get+0x20>
 8001fba:	bf00      	nop
 8001fbc:	200008e4 	.word	0x200008e4
 8001fc0:	0800bea8 	.word	0x0800bea8

08001fc4 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 8001fc4:	b570      	push	{r4, r5, r6, lr}
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 8001fca:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8001fcc:	e002      	b.n	8001fd4 <__stm32_exti_isr+0x10>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	e00c      	b.n	8001fec <__stm32_exti_isr+0x28>
 8001fd2:	3401      	adds	r4, #1
 8001fd4:	42ac      	cmp	r4, r5
 8001fd6:	da17      	bge.n	8002008 <__stm32_exti_isr+0x44>
	if (line < 32) {
 8001fd8:	2c1f      	cmp	r4, #31
 8001fda:	dcfa      	bgt.n	8001fd2 <__stm32_exti_isr+0xe>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001fdc:	2301      	movs	r3, #1
 8001fde:	40a3      	lsls	r3, r4
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <__stm32_exti_isr+0x48>)
 8001fe2:	6952      	ldr	r2, [r2, #20]
 8001fe4:	ea33 0202 	bics.w	r2, r3, r2
 8001fe8:	d0f1      	beq.n	8001fce <__stm32_exti_isr+0xa>
 8001fea:	2200      	movs	r2, #0
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8001fec:	2a00      	cmp	r2, #0
 8001fee:	d0f0      	beq.n	8001fd2 <__stm32_exti_isr+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001ff0:	4a06      	ldr	r2, [pc, #24]	; (800200c <__stm32_exti_isr+0x48>)
 8001ff2:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8001ff4:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0ea      	beq.n	8001fd2 <__stm32_exti_isr+0xe>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8001ffc:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8002000:	6851      	ldr	r1, [r2, #4]
 8002002:	4620      	mov	r0, r4
 8002004:	4798      	blx	r3
 8002006:	e7e4      	b.n	8001fd2 <__stm32_exti_isr+0xe>
		}
	}
}
 8002008:	bd70      	pop	{r4, r5, r6, pc}
 800200a:	bf00      	nop
 800200c:	40010400 	.word	0x40010400

08002010 <stm32_exti_enable>:
{
 8002010:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8002012:	2301      	movs	r3, #1
 8002014:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <stm32_exti_enable+0x18>)
 8002018:	6811      	ldr	r1, [r2, #0]
 800201a:	430b      	orrs	r3, r1
 800201c:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 800201e:	4b03      	ldr	r3, [pc, #12]	; (800202c <stm32_exti_enable+0x1c>)
 8002020:	5618      	ldrsb	r0, [r3, r0]
 8002022:	f7ff fb7b 	bl	800171c <arch_irq_enable>
}
 8002026:	bd08      	pop	{r3, pc}
 8002028:	40010400 	.word	0x40010400
 800202c:	0800becc 	.word	0x0800becc

08002030 <stm32_exti_disable>:
	if (line < 32) {
 8002030:	281f      	cmp	r0, #31
 8002032:	dc06      	bgt.n	8002042 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8002034:	2301      	movs	r3, #1
 8002036:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002038:	4a02      	ldr	r2, [pc, #8]	; (8002044 <stm32_exti_disable+0x14>)
 800203a:	6810      	ldr	r0, [r2, #0]
 800203c:	ea20 0003 	bic.w	r0, r0, r3
 8002040:	6010      	str	r0, [r2, #0]
}
 8002042:	4770      	bx	lr
 8002044:	40010400 	.word	0x40010400

08002048 <stm32_exti_trigger>:
	switch (trigger) {
 8002048:	2903      	cmp	r1, #3
 800204a:	d832      	bhi.n	80020b2 <stm32_exti_trigger+0x6a>
 800204c:	e8df f001 	tbb	[pc, r1]
 8002050:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8002054:	2301      	movs	r3, #1
 8002056:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <stm32_exti_trigger+0x6c>)
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	ea22 0200 	bic.w	r2, r2, r0
 8002062:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	ea22 0000 	bic.w	r0, r2, r0
 800206a:	60d8      	str	r0, [r3, #12]
}
 800206c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800206e:	2301      	movs	r3, #1
 8002070:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <stm32_exti_trigger+0x6c>)
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	4302      	orrs	r2, r0
 800207a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	ea22 0000 	bic.w	r0, r2, r0
 8002082:	60d8      	str	r0, [r3, #12]
}
 8002084:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8002086:	2301      	movs	r3, #1
 8002088:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <stm32_exti_trigger+0x6c>)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	4302      	orrs	r2, r0
 8002092:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	ea22 0000 	bic.w	r0, r2, r0
 800209a:	6098      	str	r0, [r3, #8]
}
 800209c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800209e:	2301      	movs	r3, #1
 80020a0:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <stm32_exti_trigger+0x6c>)
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	4302      	orrs	r2, r0
 80020aa:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	4310      	orrs	r0, r2
 80020b0:	60d8      	str	r0, [r3, #12]
}
 80020b2:	4770      	bx	lr
 80020b4:	40010400 	.word	0x40010400

080020b8 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <stm32_exti_set_callback+0x20>)
 80020ba:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80020be:	b93b      	cbnz	r3, 80020d0 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <stm32_exti_set_callback+0x20>)
 80020c2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 80020c6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80020ca:	6042      	str	r2, [r0, #4]

	return 0;
 80020cc:	2000      	movs	r0, #0
 80020ce:	4770      	bx	lr
		return -EBUSY;
 80020d0:	f06f 000f 	mvn.w	r0, #15
}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	200008e8 	.word	0x200008e8

080020dc <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <stm32_exti_unset_callback+0x10>)
 80020de:	2200      	movs	r2, #0
 80020e0:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 80020e4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80020e8:	605a      	str	r2, [r3, #4]
}
 80020ea:	4770      	bx	lr
 80020ec:	200008e8 	.word	0x200008e8

080020f0 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 80020f0:	b086      	sub	sp, #24
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80020f2:	680b      	ldr	r3, [r1, #0]
 80020f4:	2b06      	cmp	r3, #6
 80020f6:	d848      	bhi.n	800218a <stm32_clock_control_on+0x9a>
 80020f8:	e8df f003 	tbb	[pc, r3]
 80020fc:	3c261004 	.word	0x3c261004
 8002100:	4731      	.short	0x4731
 8002102:	1b          	.byte	0x1b
 8002103:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8002104:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002106:	4a22      	ldr	r2, [pc, #136]	; (8002190 <stm32_clock_control_on+0xa0>)
 8002108:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800210a:	4319      	orrs	r1, r3
 800210c:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800210e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002110:	4013      	ands	r3, r2
 8002112:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002114:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8002116:	2000      	movs	r0, #0
}
 8002118:	b006      	add	sp, #24
 800211a:	4770      	bx	lr
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 800211c:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800211e:	4a1c      	ldr	r2, [pc, #112]	; (8002190 <stm32_clock_control_on+0xa0>)
 8002120:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002122:	4319      	orrs	r1, r3
 8002124:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002126:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002128:	4013      	ands	r3, r2
 800212a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800212c:	9b01      	ldr	r3, [sp, #4]
	return 0;
 800212e:	2000      	movs	r0, #0
}
 8002130:	e7f2      	b.n	8002118 <stm32_clock_control_on+0x28>
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8002132:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002134:	4a16      	ldr	r2, [pc, #88]	; (8002190 <stm32_clock_control_on+0xa0>)
 8002136:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002138:	4319      	orrs	r1, r3
 800213a:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800213c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800213e:	4013      	ands	r3, r2
 8002140:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8002142:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8002144:	2000      	movs	r0, #0
}
 8002146:	e7e7      	b.n	8002118 <stm32_clock_control_on+0x28>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8002148:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800214a:	4a11      	ldr	r2, [pc, #68]	; (8002190 <stm32_clock_control_on+0xa0>)
 800214c:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800214e:	4319      	orrs	r1, r3
 8002150:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002152:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002154:	4013      	ands	r3, r2
 8002156:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8002158:	9b03      	ldr	r3, [sp, #12]
	return 0;
 800215a:	2000      	movs	r0, #0
}
 800215c:	e7dc      	b.n	8002118 <stm32_clock_control_on+0x28>
		LL_APB1_GRP2_EnableClock(pclken->enr);
 800215e:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002160:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <stm32_clock_control_on+0xa0>)
 8002162:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8002164:	4319      	orrs	r1, r3
 8002166:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002168:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800216a:	4013      	ands	r3, r2
 800216c:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 800216e:	9b04      	ldr	r3, [sp, #16]
	return 0;
 8002170:	2000      	movs	r0, #0
}
 8002172:	e7d1      	b.n	8002118 <stm32_clock_control_on+0x28>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8002174:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002176:	4a06      	ldr	r2, [pc, #24]	; (8002190 <stm32_clock_control_on+0xa0>)
 8002178:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800217a:	4319      	orrs	r1, r3
 800217c:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800217e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002180:	4013      	ands	r3, r2
 8002182:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8002184:	9b05      	ldr	r3, [sp, #20]
	return 0;
 8002186:	2000      	movs	r0, #0
}
 8002188:	e7c6      	b.n	8002118 <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 800218a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800218e:	e7c3      	b.n	8002118 <stm32_clock_control_on+0x28>
 8002190:	40021000 	.word	0x40021000

08002194 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8002194:	680b      	ldr	r3, [r1, #0]
 8002196:	2b06      	cmp	r3, #6
 8002198:	d835      	bhi.n	8002206 <stm32_clock_control_off+0x72>
 800219a:	e8df f003 	tbb	[pc, r3]
 800219e:	0c04      	.short	0x0c04
 80021a0:	34242c1c 	.word	0x34242c1c
 80021a4:	14          	.byte	0x14
 80021a5:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 80021a6:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80021a8:	4a18      	ldr	r2, [pc, #96]	; (800220c <stm32_clock_control_off+0x78>)
 80021aa:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80021ac:	ea23 0301 	bic.w	r3, r3, r1
 80021b0:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80021b2:	2000      	movs	r0, #0
}
 80021b4:	4770      	bx	lr
		LL_AHB2_GRP1_DisableClock(pclken->enr);
 80021b6:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <stm32_clock_control_off+0x78>)
 80021ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80021bc:	ea23 0301 	bic.w	r3, r3, r1
 80021c0:	64d3      	str	r3, [r2, #76]	; 0x4c
	return 0;
 80021c2:	2000      	movs	r0, #0
}
 80021c4:	4770      	bx	lr
		LL_AHB3_GRP1_DisableClock(pclken->enr);
 80021c6:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 80021c8:	4a10      	ldr	r2, [pc, #64]	; (800220c <stm32_clock_control_off+0x78>)
 80021ca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80021cc:	ea23 0301 	bic.w	r3, r3, r1
 80021d0:	6513      	str	r3, [r2, #80]	; 0x50
	return 0;
 80021d2:	2000      	movs	r0, #0
}
 80021d4:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 80021d6:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80021d8:	4a0c      	ldr	r2, [pc, #48]	; (800220c <stm32_clock_control_off+0x78>)
 80021da:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80021dc:	ea23 0301 	bic.w	r3, r3, r1
 80021e0:	6593      	str	r3, [r2, #88]	; 0x58
	return 0;
 80021e2:	2000      	movs	r0, #0
}
 80021e4:	4770      	bx	lr
		LL_APB1_GRP2_DisableClock(pclken->enr);
 80021e6:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 80021e8:	4a08      	ldr	r2, [pc, #32]	; (800220c <stm32_clock_control_off+0x78>)
 80021ea:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80021ec:	ea23 0301 	bic.w	r3, r3, r1
 80021f0:	65d3      	str	r3, [r2, #92]	; 0x5c
	return 0;
 80021f2:	2000      	movs	r0, #0
}
 80021f4:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 80021f6:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <stm32_clock_control_off+0x78>)
 80021fa:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80021fc:	ea23 0301 	bic.w	r3, r3, r1
 8002200:	6613      	str	r3, [r2, #96]	; 0x60
	return 0;
 8002202:	2000      	movs	r0, #0
}
 8002204:	4770      	bx	lr
	switch (pclken->bus) {
 8002206:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800220a:	4770      	bx	lr
 800220c:	40021000 	.word	0x40021000

08002210 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8002210:	b570      	push	{r4, r5, r6, lr}
 8002212:	460c      	mov	r4, r1
 8002214:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <stm32_clock_control_get_subsys_rate+0x3c>)
 8002218:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 800221a:	2101      	movs	r1, #1
 800221c:	4630      	mov	r0, r6
 800221e:	f006 fbf9 	bl	8008a14 <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	2b06      	cmp	r3, #6
 8002226:	d80e      	bhi.n	8002246 <stm32_clock_control_get_subsys_rate+0x36>
 8002228:	e8df f003 	tbb	[pc, r3]
 800222c:	0a070404 	.word	0x0a070404
 8002230:	0d07      	.short	0x0d07
 8002232:	04          	.byte	0x04
 8002233:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 8002234:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8002236:	2000      	movs	r0, #0
}
 8002238:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 800223a:	6028      	str	r0, [r5, #0]
	return 0;
 800223c:	2000      	movs	r0, #0
		break;
 800223e:	e7fb      	b.n	8002238 <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 8002240:	6028      	str	r0, [r5, #0]
	return 0;
 8002242:	2000      	movs	r0, #0
		break;
 8002244:	e7f8      	b.n	8002238 <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 8002246:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800224a:	e7f5      	b.n	8002238 <stm32_clock_control_get_subsys_rate+0x28>
 800224c:	2000031c 	.word	0x2000031c

08002250 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <stm32_clock_switch_to_hsi+0x44>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002258:	d109      	bne.n	800226e <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800225a:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <stm32_clock_switch_to_hsi+0x44>)
 800225c:	6813      	ldr	r3, [r2, #0]
 800225e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002262:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <stm32_clock_switch_to_hsi+0x44>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800226c:	d0fa      	beq.n	8002264 <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800226e:	4a09      	ldr	r2, [pc, #36]	; (8002294 <stm32_clock_switch_to_hsi+0x44>)
 8002270:	6893      	ldr	r3, [r2, #8]
 8002272:	f023 0303 	bic.w	r3, r3, #3
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800227c:	6893      	ldr	r3, [r2, #8]
 800227e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002282:	4318      	orrs	r0, r3
 8002284:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002286:	4b03      	ldr	r3, [pc, #12]	; (8002294 <stm32_clock_switch_to_hsi+0x44>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 800228e:	2b04      	cmp	r3, #4
 8002290:	d1f9      	bne.n	8002286 <stm32_clock_switch_to_hsi+0x36>
	}
}
 8002292:	4770      	bx	lr
 8002294:	40021000 	.word	0x40021000

08002298 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8002298:	b510      	push	{r4, lr}
 800229a:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 800229c:	a803      	add	r0, sp, #12
 800229e:	f006 fbb4 	bl	8008a0a <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80022a2:	f000 f81d 	bl	80022e0 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 80022a6:	4668      	mov	r0, sp
 80022a8:	f006 fbb7 	bl	8008a1a <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7ff ffcf 	bl	8002250 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80022b2:	4c0a      	ldr	r4, [pc, #40]	; (80022dc <stm32_clock_control_init+0x44>)
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ba:	6023      	str	r3, [r4, #0]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 80022bc:	a903      	add	r1, sp, #12
 80022be:	4668      	mov	r0, sp
 80022c0:	f003 fc5c 	bl	8005b7c <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80022d4:	2000      	movs	r0, #0
 80022d6:	b006      	add	sp, #24
 80022d8:	bd10      	pop	{r4, pc}
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000

080022e0 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80022e0:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <config_enable_default_clocks+0x1c>)
 80022e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022ea:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80022f4:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 80022f6:	b002      	add	sp, #8
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000

08002300 <dma_stm32_get_status>:
	return 0;
}

DMA_STM32_EXPORT_API int dma_stm32_get_status(const struct device *dev,
				uint32_t id, struct dma_status *stat)
{
 8002300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002304:	4614      	mov	r4, r2
	const struct dma_stm32_config *config = dev->config;
 8002306:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8002308:	691e      	ldr	r6, [r3, #16]
	struct dma_stm32_stream *stream;

	/* give channel from index 0 */
	id = id - STREAM_OFFSET;
 800230a:	1e48      	subs	r0, r1, #1
	if (id >= config->max_streams) {
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	4282      	cmp	r2, r0
 8002310:	d916      	bls.n	8002340 <dma_stm32_get_status+0x40>
		return -EINVAL;
	}

	stream = &config->streams[id];
 8002312:	699f      	ldr	r7, [r3, #24]
 8002314:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8002318:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800231c:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
	stat->pending_length = LL_DMA_GetDataLength(dma, dma_stm32_id_to_stream(id));
 8002320:	f000 fa10 	bl	8002744 <dma_stm32_id_to_stream>
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <dma_stm32_get_status+0x48>)
 8002326:	5c1b      	ldrb	r3, [r3, r0]
 8002328:	441e      	add	r6, r3
 800232a:	6873      	ldr	r3, [r6, #4]
 800232c:	b29b      	uxth	r3, r3
 800232e:	6063      	str	r3, [r4, #4]
	stat->dir = stream->direction;
 8002330:	f817 3008 	ldrb.w	r3, [r7, r8]
 8002334:	7063      	strb	r3, [r4, #1]
	stat->busy = stream->busy;
 8002336:	79ab      	ldrb	r3, [r5, #6]
 8002338:	7023      	strb	r3, [r4, #0]

	return 0;
 800233a:	2000      	movs	r0, #0
}
 800233c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
 8002340:	f06f 0015 	mvn.w	r0, #21
 8002344:	e7fa      	b.n	800233c <dma_stm32_get_status+0x3c>
 8002346:	bf00      	nop
 8002348:	0800bef4 	.word	0x0800bef4

0800234c <dma_stm32_stop>:
{
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct dma_stm32_config *config = dev->config;
 800234e:	6842      	ldr	r2, [r0, #4]
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 8002350:	6996      	ldr	r6, [r2, #24]
 8002352:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	3b18      	subs	r3, #24
 800235a:	441e      	add	r6, r3
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 800235c:	6917      	ldr	r7, [r2, #16]
	id = id - STREAM_OFFSET;
 800235e:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 8002360:	6953      	ldr	r3, [r2, #20]
 8002362:	42a3      	cmp	r3, r4
 8002364:	d914      	bls.n	8002390 <dma_stm32_stop+0x44>
 8002366:	4605      	mov	r5, r0
	LL_DMA_DisableIT_TC(dma, dma_stm32_id_to_stream(id));
 8002368:	4620      	mov	r0, r4
 800236a:	f000 f9eb 	bl	8002744 <dma_stm32_id_to_stream>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <dma_stm32_stop+0x4c>)
 8002370:	5c1a      	ldrb	r2, [r3, r0]
 8002372:	58bb      	ldr	r3, [r7, r2]
 8002374:	f023 0302 	bic.w	r3, r3, #2
 8002378:	50bb      	str	r3, [r7, r2]
	dma_stm32_disable_stream(dma, id);
 800237a:	4621      	mov	r1, r4
 800237c:	4638      	mov	r0, r7
 800237e:	f006 fc69 	bl	8008c54 <dma_stm32_disable_stream>
	dma_stm32_clear_stream_irq(dev, id);
 8002382:	4621      	mov	r1, r4
 8002384:	4628      	mov	r0, r5
 8002386:	f006 fbe0 	bl	8008b4a <dma_stm32_clear_stream_irq>
	stream->busy = false;
 800238a:	2000      	movs	r0, #0
 800238c:	71b0      	strb	r0, [r6, #6]
}
 800238e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
 8002390:	f06f 0015 	mvn.w	r0, #21
 8002394:	e7fb      	b.n	800238e <dma_stm32_stop+0x42>
 8002396:	bf00      	nop
 8002398:	0800bef4 	.word	0x0800bef4

0800239c <dma_stm32_reload>:
{
 800239c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023a0:	461f      	mov	r7, r3
	const struct dma_stm32_config *config = dev->config;
 80023a2:	6840      	ldr	r0, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80023a4:	6906      	ldr	r6, [r0, #16]
	id = id - STREAM_OFFSET;
 80023a6:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 80023a8:	6943      	ldr	r3, [r0, #20]
 80023aa:	42a3      	cmp	r3, r4
 80023ac:	d964      	bls.n	8002478 <dma_stm32_reload+0xdc>
 80023ae:	4690      	mov	r8, r2
	stream = &config->streams[id];
 80023b0:	f8d0 a018 	ldr.w	sl, [r0, #24]
 80023b4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80023b8:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 80023bc:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
	if (dma_stm32_disable_stream(dma, id) != 0) {
 80023c0:	4621      	mov	r1, r4
 80023c2:	4630      	mov	r0, r6
 80023c4:	f006 fc46 	bl	8008c54 <dma_stm32_disable_stream>
 80023c8:	4681      	mov	r9, r0
 80023ca:	2800      	cmp	r0, #0
 80023cc:	d157      	bne.n	800247e <dma_stm32_reload+0xe2>
	switch (stream->direction) {
 80023ce:	f85a 100b 	ldr.w	r1, [sl, fp]
 80023d2:	2901      	cmp	r1, #1
 80023d4:	d007      	beq.n	80023e6 <dma_stm32_reload+0x4a>
 80023d6:	2902      	cmp	r1, #2
 80023d8:	d02c      	beq.n	8002434 <dma_stm32_reload+0x98>
 80023da:	b359      	cbz	r1, 8002434 <dma_stm32_reload+0x98>
 80023dc:	f06f 0915 	mvn.w	r9, #21
}
 80023e0:	4648      	mov	r0, r9
 80023e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), src);
 80023e6:	4620      	mov	r0, r4
 80023e8:	f000 f9ac 	bl	8002744 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80023ec:	f8df a094 	ldr.w	sl, [pc, #148]	; 8002484 <dma_stm32_reload+0xe8>
 80023f0:	f81a 3000 	ldrb.w	r3, [sl, r0]
 80023f4:	4433      	add	r3, r6
 80023f6:	f8c3 800c 	str.w	r8, [r3, #12]
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), dst);
 80023fa:	4620      	mov	r0, r4
 80023fc:	f000 f9a2 	bl	8002744 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8002400:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8002404:	4433      	add	r3, r6
 8002406:	609f      	str	r7, [r3, #8]
	if (stream->source_periph) {
 8002408:	792b      	ldrb	r3, [r5, #4]
 800240a:	b32b      	cbz	r3, 8002458 <dma_stm32_reload+0xbc>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 800240c:	4620      	mov	r0, r4
 800240e:	f000 f999 	bl	8002744 <dma_stm32_id_to_stream>
				     size / stream->src_size);
 8002412:	68ab      	ldr	r3, [r5, #8]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8002414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002416:	fbb2 f3f3 	udiv	r3, r2, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800241a:	4a1a      	ldr	r2, [pc, #104]	; (8002484 <dma_stm32_reload+0xe8>)
 800241c:	5c11      	ldrb	r1, [r2, r0]
 800241e:	4431      	add	r1, r6
 8002420:	684a      	ldr	r2, [r1, #4]
 8002422:	0c12      	lsrs	r2, r2, #16
 8002424:	0412      	lsls	r2, r2, #16
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
	stm32_dma_enable_stream(dma, id);
 800242a:	4621      	mov	r1, r4
 800242c:	4630      	mov	r0, r6
 800242e:	f000 f9f3 	bl	8002818 <stm32_dma_enable_stream>
	return 0;
 8002432:	e7d5      	b.n	80023e0 <dma_stm32_reload+0x44>
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), src);
 8002434:	4620      	mov	r0, r4
 8002436:	f000 f985 	bl	8002744 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800243a:	f8df a048 	ldr.w	sl, [pc, #72]	; 8002484 <dma_stm32_reload+0xe8>
 800243e:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8002442:	4433      	add	r3, r6
 8002444:	f8c3 8008 	str.w	r8, [r3, #8]
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), dst);
 8002448:	4620      	mov	r0, r4
 800244a:	f000 f97b 	bl	8002744 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800244e:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8002452:	4433      	add	r3, r6
 8002454:	60df      	str	r7, [r3, #12]
}
 8002456:	e7d7      	b.n	8002408 <dma_stm32_reload+0x6c>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8002458:	4620      	mov	r0, r4
 800245a:	f000 f973 	bl	8002744 <dma_stm32_id_to_stream>
				     size / stream->dst_size);
 800245e:	68eb      	ldr	r3, [r5, #12]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8002460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8002466:	4a07      	ldr	r2, [pc, #28]	; (8002484 <dma_stm32_reload+0xe8>)
 8002468:	5c11      	ldrb	r1, [r2, r0]
 800246a:	4431      	add	r1, r6
 800246c:	684a      	ldr	r2, [r1, #4]
 800246e:	0c12      	lsrs	r2, r2, #16
 8002470:	0412      	lsls	r2, r2, #16
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
}
 8002476:	e7d8      	b.n	800242a <dma_stm32_reload+0x8e>
		return -EINVAL;
 8002478:	f06f 0915 	mvn.w	r9, #21
 800247c:	e7b0      	b.n	80023e0 <dma_stm32_reload+0x44>
		return -EBUSY;
 800247e:	f06f 090f 	mvn.w	r9, #15
 8002482:	e7ad      	b.n	80023e0 <dma_stm32_reload+0x44>
 8002484:	0800bef4 	.word	0x0800bef4

08002488 <dma_stm32_configure>:
{
 8002488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800248c:	b08d      	sub	sp, #52	; 0x34
 800248e:	4606      	mov	r6, r0
 8002490:	460d      	mov	r5, r1
 8002492:	4614      	mov	r4, r2
	const struct dma_stm32_config *dev_config = dev->config;
 8002494:	f8d0 b004 	ldr.w	fp, [r0, #4]
				&dev_config->streams[id - STREAM_OFFSET];
 8002498:	f8db 9018 	ldr.w	r9, [fp, #24]
 800249c:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 80024a0:	00ff      	lsls	r7, r7, #3
 80024a2:	3f18      	subs	r7, #24
	struct dma_stm32_stream *stream =
 80024a4:	eb09 0807 	add.w	r8, r9, r7
	DMA_TypeDef *dma = (DMA_TypeDef *)dev_config->base;
 80024a8:	f8db a010 	ldr.w	sl, [fp, #16]
	LL_DMA_StructInit(&DMA_InitStruct);
 80024ac:	a801      	add	r0, sp, #4
 80024ae:	f008 f9d3 	bl	800a858 <LL_DMA_StructInit>
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 80024b2:	8863      	ldrh	r3, [r4, #2]
 80024b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80024b8:	f5b3 6ffe 	cmp.w	r3, #2032	; 0x7f0
 80024bc:	d068      	beq.n	8002590 <dma_stm32_configure+0x108>
 80024be:	3d01      	subs	r5, #1
	if (id >= dev_config->max_streams) {
 80024c0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80024c4:	42ab      	cmp	r3, r5
 80024c6:	f240 80f1 	bls.w	80026ac <dma_stm32_configure+0x224>
	if (stream->busy) {
 80024ca:	f898 3006 	ldrb.w	r3, [r8, #6]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 80ef 	bne.w	80026b2 <dma_stm32_configure+0x22a>
	if (dma_stm32_disable_stream(dma, id) != 0) {
 80024d4:	4629      	mov	r1, r5
 80024d6:	4650      	mov	r0, sl
 80024d8:	f006 fbbc 	bl	8008c54 <dma_stm32_disable_stream>
 80024dc:	2800      	cmp	r0, #0
 80024de:	f040 80eb 	bne.w	80026b8 <dma_stm32_configure+0x230>
	dma_stm32_clear_stream_irq(dev, id);
 80024e2:	4629      	mov	r1, r5
 80024e4:	4630      	mov	r0, r6
 80024e6:	f006 fb30 	bl	8008b4a <dma_stm32_clear_stream_irq>
	if (config->head_block->block_size > DMA_STM32_MAX_DATA_ITEMS) {
 80024ea:	6922      	ldr	r2, [r4, #16]
 80024ec:	6953      	ldr	r3, [r2, #20]
 80024ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f2:	f080 80e4 	bcs.w	80026be <dma_stm32_configure+0x236>
	if ((config->dest_data_size != config->source_data_size)) {
 80024f6:	88e1      	ldrh	r1, [r4, #6]
 80024f8:	88a3      	ldrh	r3, [r4, #4]
 80024fa:	4299      	cmp	r1, r3
 80024fc:	f040 80e2 	bne.w	80026c4 <dma_stm32_configure+0x23c>
	if (config->source_data_size != 4U &&
 8002500:	2b04      	cmp	r3, #4
 8002502:	d004      	beq.n	800250e <dma_stm32_configure+0x86>
 8002504:	2b02      	cmp	r3, #2
 8002506:	d002      	beq.n	800250e <dma_stm32_configure+0x86>
	    config->source_data_size != 2U &&
 8002508:	2b01      	cmp	r3, #1
 800250a:	f040 80de 	bne.w	80026ca <dma_stm32_configure+0x242>
	if (config->head_block->source_reload_en !=
 800250e:	7f13      	ldrb	r3, [r2, #28]
 8002510:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8002514:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
 8002518:	f040 80da 	bne.w	80026d0 <dma_stm32_configure+0x248>
	stream->busy		= true;
 800251c:	2301      	movs	r3, #1
 800251e:	f888 3006 	strb.w	r3, [r8, #6]
	stream->dma_callback	= config->dma_callback;
 8002522:	69a3      	ldr	r3, [r4, #24]
 8002524:	f8c8 3014 	str.w	r3, [r8, #20]
	stream->direction	= config->channel_direction;
 8002528:	8823      	ldrh	r3, [r4, #0]
 800252a:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 800252e:	f849 3007 	str.w	r3, [r9, r7]
	stream->user_data       = config->user_data;
 8002532:	6962      	ldr	r2, [r4, #20]
 8002534:	f8c8 2010 	str.w	r2, [r8, #16]
	stream->src_size	= config->source_data_size;
 8002538:	88a2      	ldrh	r2, [r4, #4]
 800253a:	f8c8 2008 	str.w	r2, [r8, #8]
	stream->dst_size	= config->dest_data_size;
 800253e:	88e2      	ldrh	r2, [r4, #6]
 8002540:	f8c8 200c 	str.w	r2, [r8, #12]
	if ((config->head_block->source_address == 0)) {
 8002544:	6922      	ldr	r2, [r4, #16]
 8002546:	6811      	ldr	r1, [r2, #0]
	if ((config->head_block->dest_address == 0)) {
 8002548:	6850      	ldr	r0, [r2, #4]
	if (stream->direction == MEMORY_TO_PERIPHERAL) {
 800254a:	2b01      	cmp	r3, #1
 800254c:	d02d      	beq.n	80025aa <dma_stm32_configure+0x122>
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 800254e:	9101      	str	r1, [sp, #4]
		DMA_InitStruct.MemoryOrM2MDstAddress =
 8002550:	9002      	str	r0, [sp, #8]
	ret = dma_stm32_get_priority(config->channel_priority,
 8002552:	6820      	ldr	r0, [r4, #0]
 8002554:	a90b      	add	r1, sp, #44	; 0x2c
 8002556:	f3c0 3083 	ubfx	r0, r0, #14, #4
 800255a:	f006 fa66 	bl	8008a2a <dma_stm32_get_priority>
	if (ret < 0) {
 800255e:	1e06      	subs	r6, r0, #0
 8002560:	db12      	blt.n	8002588 <dma_stm32_configure+0x100>
	ret = dma_stm32_get_direction(config->channel_direction,
 8002562:	8820      	ldrh	r0, [r4, #0]
 8002564:	a903      	add	r1, sp, #12
 8002566:	f3c0 10c2 	ubfx	r0, r0, #7, #3
 800256a:	f006 fa79 	bl	8008a60 <dma_stm32_get_direction>
	if (ret < 0) {
 800256e:	1e06      	subs	r6, r0, #0
 8002570:	db0a      	blt.n	8002588 <dma_stm32_configure+0x100>
	switch (config->channel_direction) {
 8002572:	8823      	ldrh	r3, [r4, #0]
 8002574:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8002578:	2b01      	cmp	r3, #1
 800257a:	f000 8085 	beq.w	8002688 <dma_stm32_configure+0x200>
 800257e:	2b02      	cmp	r3, #2
 8002580:	d017      	beq.n	80025b2 <dma_stm32_configure+0x12a>
 8002582:	b1b3      	cbz	r3, 80025b2 <dma_stm32_configure+0x12a>
 8002584:	f06f 0615 	mvn.w	r6, #21
}
 8002588:	4630      	mov	r0, r6
 800258a:	b00d      	add	sp, #52	; 0x34
 800258c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		stream->busy = true;
 8002590:	2301      	movs	r3, #1
 8002592:	f888 3006 	strb.w	r3, [r8, #6]
		stream->hal_override = true;
 8002596:	f888 3005 	strb.w	r3, [r8, #5]
		stream->dma_callback = config->dma_callback;
 800259a:	69a3      	ldr	r3, [r4, #24]
 800259c:	f8c8 3014 	str.w	r3, [r8, #20]
		stream->user_data = config->user_data;
 80025a0:	6963      	ldr	r3, [r4, #20]
 80025a2:	f8c8 3010 	str.w	r3, [r8, #16]
		return 0;
 80025a6:	2600      	movs	r6, #0
 80025a8:	e7ee      	b.n	8002588 <dma_stm32_configure+0x100>
		DMA_InitStruct.MemoryOrM2MDstAddress =
 80025aa:	9102      	str	r1, [sp, #8]
					config->head_block->dest_address;
 80025ac:	6853      	ldr	r3, [r2, #4]
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	e7cf      	b.n	8002552 <dma_stm32_configure+0xca>
		memory_addr_adj = config->head_block->dest_addr_adj;
 80025b2:	6923      	ldr	r3, [r4, #16]
 80025b4:	f893 b01c 	ldrb.w	fp, [r3, #28]
 80025b8:	f3cb 1001 	ubfx	r0, fp, #4, #2
		periph_addr_adj = config->head_block->source_addr_adj;
 80025bc:	f3cb 0b81 	ubfx	fp, fp, #2, #2
	ret = dma_stm32_get_memory_increment(memory_addr_adj,
 80025c0:	a906      	add	r1, sp, #24
 80025c2:	f006 fa60 	bl	8008a86 <dma_stm32_get_memory_increment>
	if (ret < 0) {
 80025c6:	1e06      	subs	r6, r0, #0
 80025c8:	dbde      	blt.n	8002588 <dma_stm32_configure+0x100>
	ret = dma_stm32_get_periph_increment(periph_addr_adj,
 80025ca:	a905      	add	r1, sp, #20
 80025cc:	4658      	mov	r0, fp
 80025ce:	f006 fa6b 	bl	8008aa8 <dma_stm32_get_periph_increment>
	if (ret < 0) {
 80025d2:	1e06      	subs	r6, r0, #0
 80025d4:	dbd8      	blt.n	8002588 <dma_stm32_configure+0x100>
	if (config->head_block->source_reload_en) {
 80025d6:	6923      	ldr	r3, [r4, #16]
 80025d8:	7f1b      	ldrb	r3, [r3, #28]
 80025da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80025de:	d05b      	beq.n	8002698 <dma_stm32_configure+0x210>
		DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 80025e0:	2320      	movs	r3, #32
 80025e2:	9304      	str	r3, [sp, #16]
	stream->source_periph = (stream->direction == PERIPHERAL_TO_MEMORY);
 80025e4:	f859 3007 	ldr.w	r3, [r9, r7]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	bf14      	ite	ne
 80025ec:	2300      	movne	r3, #0
 80025ee:	2301      	moveq	r3, #1
 80025f0:	f888 3004 	strb.w	r3, [r8, #4]
	int index = find_lsb_set(config->source_data_size) - 1;
 80025f4:	88a3      	ldrh	r3, [r4, #4]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 80025f6:	fa93 f2a3 	rbit	r2, r3
 80025fa:	fab2 f282 	clz	r2, r2
 80025fe:	b90b      	cbnz	r3, 8002604 <dma_stm32_configure+0x17c>
 8002600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	DMA_InitStruct.PeriphOrM2MSrcDataSize = table_p_size[index];
 8002604:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <dma_stm32_configure+0x250>)
 8002606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260a:	9307      	str	r3, [sp, #28]
	index = find_lsb_set(config->dest_data_size) - 1;
 800260c:	88e3      	ldrh	r3, [r4, #6]
 800260e:	fa93 f2a3 	rbit	r2, r3
 8002612:	fab2 f282 	clz	r2, r2
 8002616:	b90b      	cbnz	r3, 800261c <dma_stm32_configure+0x194>
 8002618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	DMA_InitStruct.MemoryOrM2MDstDataSize = table_m_size[index];
 800261c:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <dma_stm32_configure+0x254>)
 800261e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002622:	9308      	str	r3, [sp, #32]
	if (stream->source_periph) {
 8002624:	f898 3004 	ldrb.w	r3, [r8, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d038      	beq.n	800269e <dma_stm32_configure+0x216>
		DMA_InitStruct.NbData = config->head_block->block_size /
 800262c:	6923      	ldr	r3, [r4, #16]
 800262e:	695b      	ldr	r3, [r3, #20]
					config->source_data_size;
 8002630:	88a2      	ldrh	r2, [r4, #4]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8002632:	fbb3 f3f2 	udiv	r3, r3, r2
 8002636:	9309      	str	r3, [sp, #36]	; 0x24
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 8002638:	7823      	ldrb	r3, [r4, #0]
 800263a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800263e:	930a      	str	r3, [sp, #40]	; 0x28
	LL_DMA_Init(dma, dma_stm32_id_to_stream(id), &DMA_InitStruct);
 8002640:	4628      	mov	r0, r5
 8002642:	f000 f87f 	bl	8002744 <dma_stm32_id_to_stream>
 8002646:	4601      	mov	r1, r0
 8002648:	aa01      	add	r2, sp, #4
 800264a:	4650      	mov	r0, sl
 800264c:	f003 f97e 	bl	800594c <LL_DMA_Init>
	LL_DMA_EnableIT_TC(dma, dma_stm32_id_to_stream(id));
 8002650:	4628      	mov	r0, r5
 8002652:	f000 f877 	bl	8002744 <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8002656:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <dma_stm32_configure+0x258>)
 8002658:	5c1a      	ldrb	r2, [r3, r0]
 800265a:	f85a 3002 	ldr.w	r3, [sl, r2]
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	f84a 3002 	str.w	r3, [sl, r2]
	if (config->head_block->source_reload_en) {
 8002666:	6923      	ldr	r3, [r4, #16]
 8002668:	7f1b      	ldrb	r3, [r3, #28]
 800266a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800266e:	d08b      	beq.n	8002588 <dma_stm32_configure+0x100>
		LL_DMA_EnableIT_HT(dma, dma_stm32_id_to_stream(id));
 8002670:	4628      	mov	r0, r5
 8002672:	f000 f867 	bl	8002744 <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8002676:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <dma_stm32_configure+0x258>)
 8002678:	5c1a      	ldrb	r2, [r3, r0]
 800267a:	f85a 3002 	ldr.w	r3, [sl, r2]
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	f84a 3002 	str.w	r3, [sl, r2]
}
 8002686:	e77f      	b.n	8002588 <dma_stm32_configure+0x100>
		memory_addr_adj = config->head_block->source_addr_adj;
 8002688:	6923      	ldr	r3, [r4, #16]
 800268a:	f893 b01c 	ldrb.w	fp, [r3, #28]
 800268e:	f3cb 0081 	ubfx	r0, fp, #2, #2
		periph_addr_adj = config->head_block->dest_addr_adj;
 8002692:	f3cb 1b01 	ubfx	fp, fp, #4, #2
		break;
 8002696:	e793      	b.n	80025c0 <dma_stm32_configure+0x138>
		DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8002698:	2300      	movs	r3, #0
 800269a:	9304      	str	r3, [sp, #16]
 800269c:	e7a2      	b.n	80025e4 <dma_stm32_configure+0x15c>
		DMA_InitStruct.NbData = config->head_block->block_size /
 800269e:	6923      	ldr	r3, [r4, #16]
 80026a0:	695b      	ldr	r3, [r3, #20]
					config->dest_data_size;
 80026a2:	88e2      	ldrh	r2, [r4, #6]
		DMA_InitStruct.NbData = config->head_block->block_size /
 80026a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80026a8:	9309      	str	r3, [sp, #36]	; 0x24
 80026aa:	e7c5      	b.n	8002638 <dma_stm32_configure+0x1b0>
		return -EINVAL;
 80026ac:	f06f 0615 	mvn.w	r6, #21
 80026b0:	e76a      	b.n	8002588 <dma_stm32_configure+0x100>
		return -EBUSY;
 80026b2:	f06f 060f 	mvn.w	r6, #15
 80026b6:	e767      	b.n	8002588 <dma_stm32_configure+0x100>
		return -EBUSY;
 80026b8:	f06f 060f 	mvn.w	r6, #15
 80026bc:	e764      	b.n	8002588 <dma_stm32_configure+0x100>
		return -EINVAL;
 80026be:	f06f 0615 	mvn.w	r6, #21
 80026c2:	e761      	b.n	8002588 <dma_stm32_configure+0x100>
		return -EINVAL;
 80026c4:	f06f 0615 	mvn.w	r6, #21
 80026c8:	e75e      	b.n	8002588 <dma_stm32_configure+0x100>
		return -EINVAL;
 80026ca:	f06f 0615 	mvn.w	r6, #21
 80026ce:	e75b      	b.n	8002588 <dma_stm32_configure+0x100>
		return -EINVAL;
 80026d0:	f06f 0615 	mvn.w	r6, #21
 80026d4:	e758      	b.n	8002588 <dma_stm32_configure+0x100>
 80026d6:	bf00      	nop
 80026d8:	0800bf44 	.word	0x0800bf44
 80026dc:	0800bf38 	.word	0x0800bf38
 80026e0:	0800bef4 	.word	0x0800bef4

080026e4 <dma_stm32_init>:
{
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	4605      	mov	r5, r0
	const struct dma_stm32_config *config = dev->config;
 80026e8:	6844      	ldr	r4, [r0, #4]
 80026ea:	4815      	ldr	r0, [pc, #84]	; (8002740 <dma_stm32_init+0x5c>)
 80026ec:	f008 f8d2 	bl	800a894 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 80026f0:	b158      	cbz	r0, 800270a <dma_stm32_init+0x26>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 80026f2:	4813      	ldr	r0, [pc, #76]	; (8002740 <dma_stm32_init+0x5c>)
 80026f4:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4621      	mov	r1, r4
 80026fa:	4798      	blx	r3
 80026fc:	4606      	mov	r6, r0
	if (clock_control_on(clk,
 80026fe:	b9de      	cbnz	r6, 8002738 <dma_stm32_init+0x54>
	config->config_irq(dev);
 8002700:	68a3      	ldr	r3, [r4, #8]
 8002702:	4628      	mov	r0, r5
 8002704:	4798      	blx	r3
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8002706:	2300      	movs	r3, #0
 8002708:	e00a      	b.n	8002720 <dma_stm32_init+0x3c>
		return -ENODEV;
 800270a:	f06f 0612 	mvn.w	r6, #18
 800270e:	e7f6      	b.n	80026fe <dma_stm32_init+0x1a>
		config->streams[i].busy = false;
 8002710:	69a2      	ldr	r2, [r4, #24]
 8002712:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002716:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800271a:	2100      	movs	r1, #0
 800271c:	7191      	strb	r1, [r2, #6]
	for (uint32_t i = 0; i < config->max_streams; i++) {
 800271e:	3301      	adds	r3, #1
 8002720:	6962      	ldr	r2, [r4, #20]
 8002722:	4293      	cmp	r3, r2
 8002724:	d3f4      	bcc.n	8002710 <dma_stm32_init+0x2c>
	((struct dma_stm32_data *)dev->data)->dma_ctx.magic = 0;
 8002726:	692a      	ldr	r2, [r5, #16]
 8002728:	2300      	movs	r3, #0
 800272a:	6013      	str	r3, [r2, #0]
	((struct dma_stm32_data *)dev->data)->dma_ctx.dma_channels = 0;
 800272c:	692a      	ldr	r2, [r5, #16]
 800272e:	6053      	str	r3, [r2, #4]
	((struct dma_stm32_data *)dev->data)->dma_ctx.atomic = 0;
 8002730:	692a      	ldr	r2, [r5, #16]
 8002732:	6093      	str	r3, [r2, #8]
}
 8002734:	4630      	mov	r0, r6
 8002736:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8002738:	f06f 0604 	mvn.w	r6, #4
 800273c:	e7fa      	b.n	8002734 <dma_stm32_init+0x50>
 800273e:	bf00      	nop
 8002740:	0800b6b8 	.word	0x0800b6b8

08002744 <dma_stm32_id_to_stream>:
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(stream_nr));

	return stream_nr[id];
}
 8002744:	4b01      	ldr	r3, [pc, #4]	; (800274c <dma_stm32_id_to_stream+0x8>)
 8002746:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800274a:	4770      	bx	lr
 800274c:	0800bfe4 	.word	0x0800bfe4

08002750 <dma_stm32_clear_ht>:

void dma_stm32_clear_ht(DMA_TypeDef *DMAx, uint32_t id)
{
 8002750:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8002752:	4b02      	ldr	r3, [pc, #8]	; (800275c <dma_stm32_clear_ht+0xc>)
 8002754:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002758:	4798      	blx	r3
}
 800275a:	bd08      	pop	{r3, pc}
 800275c:	0800bfc8 	.word	0x0800bfc8

08002760 <dma_stm32_clear_tc>:

void dma_stm32_clear_tc(DMA_TypeDef *DMAx, uint32_t id)
{
 8002760:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8002762:	4b02      	ldr	r3, [pc, #8]	; (800276c <dma_stm32_clear_tc+0xc>)
 8002764:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002768:	4798      	blx	r3
}
 800276a:	bd08      	pop	{r3, pc}
 800276c:	0800bfac 	.word	0x0800bfac

08002770 <dma_stm32_is_ht_active>:

bool dma_stm32_is_ht_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8002770:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 8002772:	4b04      	ldr	r3, [pc, #16]	; (8002784 <dma_stm32_is_ht_active+0x14>)
 8002774:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002778:	4798      	blx	r3
}
 800277a:	3800      	subs	r0, #0
 800277c:	bf18      	it	ne
 800277e:	2001      	movne	r0, #1
 8002780:	bd08      	pop	{r3, pc}
 8002782:	bf00      	nop
 8002784:	0800bf90 	.word	0x0800bf90

08002788 <dma_stm32_is_tc_active>:

bool dma_stm32_is_tc_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8002788:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <dma_stm32_is_tc_active+0x14>)
 800278c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002790:	4798      	blx	r3
}
 8002792:	3800      	subs	r0, #0
 8002794:	bf18      	it	ne
 8002796:	2001      	movne	r0, #1
 8002798:	bd08      	pop	{r3, pc}
 800279a:	bf00      	nop
 800279c:	0800bf74 	.word	0x0800bf74

080027a0 <dma_stm32_clear_te>:


void dma_stm32_clear_te(DMA_TypeDef *DMAx, uint32_t id)
{
 80027a0:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTEIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 80027a2:	4b02      	ldr	r3, [pc, #8]	; (80027ac <dma_stm32_clear_te+0xc>)
 80027a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027a8:	4798      	blx	r3
}
 80027aa:	bd08      	pop	{r3, pc}
 80027ac:	0800bf58 	.word	0x0800bf58

080027b0 <stm32_dma_is_tc_irq_active>:
		dma_stm32_is_te_active(dma, id),
		dma_stm32_is_gi_active(dma, id));
}

bool stm32_dma_is_tc_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 80027b0:	b538      	push	{r3, r4, r5, lr}
 80027b2:	4604      	mov	r4, r0
 80027b4:	460d      	mov	r5, r1
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 80027b6:	4608      	mov	r0, r1
 80027b8:	f7ff ffc4 	bl	8002744 <dma_stm32_id_to_stream>
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <stm32_dma_is_tc_irq_active+0x30>)
 80027be:	5c1b      	ldrb	r3, [r3, r0]
 80027c0:	58e3      	ldr	r3, [r4, r3]
                   DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 80027c2:	f013 0f02 	tst.w	r3, #2
 80027c6:	d006      	beq.n	80027d6 <stm32_dma_is_tc_irq_active+0x26>
	       dma_stm32_is_tc_active(dma, id);
 80027c8:	4629      	mov	r1, r5
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff ffdc 	bl	8002788 <dma_stm32_is_tc_active>
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 80027d0:	b118      	cbz	r0, 80027da <stm32_dma_is_tc_irq_active+0x2a>
 80027d2:	2001      	movs	r0, #1
 80027d4:	e000      	b.n	80027d8 <stm32_dma_is_tc_irq_active+0x28>
 80027d6:	2000      	movs	r0, #0
}
 80027d8:	bd38      	pop	{r3, r4, r5, pc}
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 80027da:	2000      	movs	r0, #0
 80027dc:	e7fc      	b.n	80027d8 <stm32_dma_is_tc_irq_active+0x28>
 80027de:	bf00      	nop
 80027e0:	0800bf50 	.word	0x0800bf50

080027e4 <stm32_dma_is_ht_irq_active>:

bool stm32_dma_is_ht_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 80027e4:	b538      	push	{r3, r4, r5, lr}
 80027e6:	4604      	mov	r4, r0
 80027e8:	460d      	mov	r5, r1
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 80027ea:	4608      	mov	r0, r1
 80027ec:	f7ff ffaa 	bl	8002744 <dma_stm32_id_to_stream>
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <stm32_dma_is_ht_irq_active+0x30>)
 80027f2:	5c1b      	ldrb	r3, [r3, r0]
 80027f4:	58e3      	ldr	r3, [r4, r3]
                   DMA_CCR_HTIE) == (DMA_CCR_HTIE)) ? 1UL : 0UL);
 80027f6:	f013 0f04 	tst.w	r3, #4
 80027fa:	d006      	beq.n	800280a <stm32_dma_is_ht_irq_active+0x26>
	       dma_stm32_is_ht_active(dma, id);
 80027fc:	4629      	mov	r1, r5
 80027fe:	4620      	mov	r0, r4
 8002800:	f7ff ffb6 	bl	8002770 <dma_stm32_is_ht_active>
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8002804:	b118      	cbz	r0, 800280e <stm32_dma_is_ht_irq_active+0x2a>
 8002806:	2001      	movs	r0, #1
 8002808:	e000      	b.n	800280c <stm32_dma_is_ht_irq_active+0x28>
 800280a:	2000      	movs	r0, #0
}
 800280c:	bd38      	pop	{r3, r4, r5, pc}
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 800280e:	2000      	movs	r0, #0
 8002810:	e7fc      	b.n	800280c <stm32_dma_is_ht_irq_active+0x28>
 8002812:	bf00      	nop
 8002814:	0800bf50 	.word	0x0800bf50

08002818 <stm32_dma_enable_stream>:
	/* Preserve for future amending. */
	return false;
}

void stm32_dma_enable_stream(DMA_TypeDef *dma, uint32_t id)
{
 8002818:	b510      	push	{r4, lr}
 800281a:	4604      	mov	r4, r0
	LL_DMA_EnableChannel(dma, dma_stm32_id_to_stream(id));
 800281c:	4608      	mov	r0, r1
 800281e:	f7ff ff91 	bl	8002744 <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8002822:	4b03      	ldr	r3, [pc, #12]	; (8002830 <stm32_dma_enable_stream+0x18>)
 8002824:	5c1a      	ldrb	r2, [r3, r0]
 8002826:	58a3      	ldr	r3, [r4, r2]
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	50a3      	str	r3, [r4, r2]
}
 800282e:	bd10      	pop	{r4, pc}
 8002830:	0800bf50 	.word	0x0800bf50

08002834 <stm32_dma_disable_stream>:

int stm32_dma_disable_stream(DMA_TypeDef *dma, uint32_t id)
{
 8002834:	b510      	push	{r4, lr}
 8002836:	4604      	mov	r4, r0
	LL_DMA_DisableChannel(dma, dma_stm32_id_to_stream(id));
 8002838:	4608      	mov	r0, r1
 800283a:	f7ff ff83 	bl	8002744 <dma_stm32_id_to_stream>
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <stm32_dma_disable_stream+0x28>)
 8002840:	5c1b      	ldrb	r3, [r3, r0]
 8002842:	58e2      	ldr	r2, [r4, r3]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	50e2      	str	r2, [r4, r3]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800284a:	58e3      	ldr	r3, [r4, r3]
                  DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 800284c:	f013 0f01 	tst.w	r3, #1
 8002850:	d002      	beq.n	8002858 <stm32_dma_disable_stream+0x24>

	if (!LL_DMA_IsEnabledChannel(dma, dma_stm32_id_to_stream(id))) {
		return 0;
	}

	return -EAGAIN;
 8002852:	f06f 000a 	mvn.w	r0, #10
}
 8002856:	bd10      	pop	{r4, pc}
		return 0;
 8002858:	2000      	movs	r0, #0
 800285a:	e7fc      	b.n	8002856 <stm32_dma_disable_stream+0x22>
 800285c:	0800bf50 	.word	0x0800bf50

08002860 <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8002860:	424a      	negs	r2, r1
 8002862:	f001 0303 	and.w	r3, r1, #3
 8002866:	f002 0203 	and.w	r2, r2, #3
 800286a:	bf58      	it	pl
 800286c:	4253      	negpl	r3, r2
 800286e:	3304      	adds	r3, #4
 8002870:	009a      	lsls	r2, r3, #2
 8002872:	230f      	movs	r3, #15
 8002874:	4093      	lsls	r3, r2
 8002876:	460a      	mov	r2, r1
 8002878:	2900      	cmp	r1, #0
 800287a:	db19      	blt.n	80028b0 <gpio_stm32_set_exti_source+0x50>
 800287c:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8002880:	fa5f fc83 	uxtb.w	ip, r3
 8002884:	f10c 0102 	add.w	r1, ip, #2
 8002888:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <gpio_stm32_set_exti_source+0x58>)
 800288a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800288e:	0c1a      	lsrs	r2, r3, #16
 8002890:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002898:	b162      	cbz	r2, 80028b4 <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 800289a:	fab2 f282 	clz	r2, r2
 800289e:	fa00 f202 	lsl.w	r2, r0, r2
 80028a2:	431a      	orrs	r2, r3
 80028a4:	f10c 0c02 	add.w	ip, ip, #2
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <gpio_stm32_set_exti_source+0x58>)
 80028aa:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 80028ae:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80028b0:	1cca      	adds	r2, r1, #3
 80028b2:	e7e3      	b.n	800287c <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 80028b4:	2220      	movs	r2, #32
 80028b6:	e7f2      	b.n	800289e <gpio_stm32_set_exti_source+0x3e>
 80028b8:	40010000 	.word	0x40010000

080028bc <gpio_stm32_get_exti_source>:
 80028bc:	4242      	negs	r2, r0
 80028be:	f000 0303 	and.w	r3, r0, #3
 80028c2:	f002 0203 	and.w	r2, r2, #3
 80028c6:	bf58      	it	pl
 80028c8:	4253      	negpl	r3, r2
 80028ca:	3304      	adds	r3, #4
 80028cc:	009a      	lsls	r2, r3, #2
 80028ce:	230f      	movs	r3, #15
 80028d0:	4093      	lsls	r3, r2
 80028d2:	4602      	mov	r2, r0
 80028d4:	2800      	cmp	r0, #0
 80028d6:	db10      	blt.n	80028fa <gpio_stm32_get_exti_source+0x3e>
 80028d8:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 80028dc:	b2c3      	uxtb	r3, r0
 80028de:	3302      	adds	r3, #2
 80028e0:	4a08      	ldr	r2, [pc, #32]	; (8002904 <gpio_stm32_get_exti_source+0x48>)
 80028e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028e6:	0c03      	lsrs	r3, r0, #16
 80028e8:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80028f0:	b12b      	cbz	r3, 80028fe <gpio_stm32_get_exti_source+0x42>
  return __builtin_clz(value);
 80028f2:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 80028f6:	40d8      	lsrs	r0, r3
 80028f8:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80028fa:	1cc2      	adds	r2, r0, #3
 80028fc:	e7ec      	b.n	80028d8 <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 80028fe:	2320      	movs	r3, #32
 8002900:	e7f9      	b.n	80028f6 <gpio_stm32_get_exti_source+0x3a>
 8002902:	bf00      	nop
 8002904:	40010000 	.word	0x40010000

08002908 <gpio_stm32_clock_request>:
{
 8002908:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 800290a:	6844      	ldr	r4, [r0, #4]
	if (on) {
 800290c:	b169      	cbz	r1, 800292a <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 800290e:	340c      	adds	r4, #12
 8002910:	480d      	ldr	r0, [pc, #52]	; (8002948 <gpio_stm32_clock_request+0x40>)
 8002912:	f007 ffbf 	bl	800a894 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8002916:	b128      	cbz	r0, 8002924 <gpio_stm32_clock_request+0x1c>
	const struct clock_control_driver_api *api =
 8002918:	480b      	ldr	r0, [pc, #44]	; (8002948 <gpio_stm32_clock_request+0x40>)
 800291a:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4621      	mov	r1, r4
 8002920:	4798      	blx	r3
}
 8002922:	bd10      	pop	{r4, pc}
		return -ENODEV;
 8002924:	f06f 0012 	mvn.w	r0, #18
 8002928:	e7fb      	b.n	8002922 <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 800292a:	340c      	adds	r4, #12
 800292c:	4806      	ldr	r0, [pc, #24]	; (8002948 <gpio_stm32_clock_request+0x40>)
 800292e:	f007 ffb1 	bl	800a894 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_off(const struct device *dev,
				    clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 8002932:	b128      	cbz	r0, 8002940 <gpio_stm32_clock_request+0x38>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8002934:	4804      	ldr	r0, [pc, #16]	; (8002948 <gpio_stm32_clock_request+0x40>)
 8002936:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4621      	mov	r1, r4
 800293c:	4798      	blx	r3
 800293e:	e7f0      	b.n	8002922 <gpio_stm32_clock_request+0x1a>
		return -ENODEV;
 8002940:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 8002944:	e7ed      	b.n	8002922 <gpio_stm32_clock_request+0x1a>
 8002946:	bf00      	nop
 8002948:	0800b6b8 	.word	0x0800b6b8

0800294c <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 800294c:	b570      	push	{r4, r5, r6, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	4606      	mov	r6, r0
 8002952:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 8002954:	4b0d      	ldr	r3, [pc, #52]	; (800298c <gpio_stm32_enable_int+0x40>)
 8002956:	e893 0003 	ldmia.w	r3, {r0, r1}
 800295a:	ab02      	add	r3, sp, #8
 800295c:	e903 0003 	stmdb	r3, {r0, r1}
 8002960:	480b      	ldr	r0, [pc, #44]	; (8002990 <gpio_stm32_enable_int+0x44>)
 8002962:	f007 ff97 	bl	800a894 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8002966:	b148      	cbz	r0, 800297c <gpio_stm32_enable_int+0x30>
	const struct clock_control_driver_api *api =
 8002968:	4809      	ldr	r0, [pc, #36]	; (8002990 <gpio_stm32_enable_int+0x44>)
 800296a:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4669      	mov	r1, sp
 8002970:	4798      	blx	r3
 8002972:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 8002974:	b12c      	cbz	r4, 8002982 <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 8002976:	4620      	mov	r0, r4
 8002978:	b002      	add	sp, #8
 800297a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
 800297c:	f06f 0412 	mvn.w	r4, #18
 8002980:	e7f8      	b.n	8002974 <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 8002982:	4629      	mov	r1, r5
 8002984:	4630      	mov	r0, r6
 8002986:	f7ff ff6b 	bl	8002860 <gpio_stm32_set_exti_source>
	return 0;
 800298a:	e7f4      	b.n	8002976 <gpio_stm32_enable_int+0x2a>
 800298c:	0800bb34 	.word	0x0800bb34
 8002990:	0800b6b8 	.word	0x0800b6b8

08002994 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8002994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002996:	460c      	mov	r4, r1
 8002998:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 800299a:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800299c:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 800299e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80029a2:	d01f      	beq.n	80029e4 <gpio_stm32_pin_interrupt_configure+0x50>
 80029a4:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 80029a6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80029aa:	d034      	beq.n	8002a16 <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 80029ac:	491d      	ldr	r1, [pc, #116]	; (8002a24 <gpio_stm32_pin_interrupt_configure+0x90>)
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7ff fb82 	bl	80020b8 <stm32_exti_set_callback>
 80029b4:	4606      	mov	r6, r0
 80029b6:	bb88      	cbnz	r0, 8002a1c <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 80029b8:	4621      	mov	r1, r4
 80029ba:	68b8      	ldr	r0, [r7, #8]
 80029bc:	f7ff ffc6 	bl	800294c <gpio_stm32_enable_int>

	switch (trig) {
 80029c0:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 80029c4:	d023      	beq.n	8002a0e <gpio_stm32_pin_interrupt_configure+0x7a>
 80029c6:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 80029ca:	d022      	beq.n	8002a12 <gpio_stm32_pin_interrupt_configure+0x7e>
 80029cc:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 80029d0:	d01b      	beq.n	8002a0a <gpio_stm32_pin_interrupt_configure+0x76>
 80029d2:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff fb37 	bl	8002048 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 80029da:	4620      	mov	r0, r4
 80029dc:	f7ff fb18 	bl	8002010 <stm32_exti_enable>

exit:
	return err;
}
 80029e0:	4630      	mov	r0, r6
 80029e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80029e4:	4620      	mov	r0, r4
 80029e6:	f7ff ff69 	bl	80028bc <gpio_stm32_get_exti_source>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	4298      	cmp	r0, r3
 80029ee:	d001      	beq.n	80029f4 <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 80029f0:	2600      	movs	r6, #0
		goto exit;
 80029f2:	e7f5      	b.n	80029e0 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7ff fb1b 	bl	8002030 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80029fa:	4620      	mov	r0, r4
 80029fc:	f7ff fb6e 	bl	80020dc <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8002a00:	2100      	movs	r1, #0
 8002a02:	4620      	mov	r0, r4
 8002a04:	f7ff fb20 	bl	8002048 <stm32_exti_trigger>
 8002a08:	e7f2      	b.n	80029f0 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	e7e2      	b.n	80029d4 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 8002a0e:	2101      	movs	r1, #1
 8002a10:	e7e0      	b.n	80029d4 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 8002a12:	2103      	movs	r1, #3
 8002a14:	e7de      	b.n	80029d4 <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 8002a16:	f06f 0685 	mvn.w	r6, #133	; 0x85
 8002a1a:	e7e1      	b.n	80029e0 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 8002a1c:	f06f 060f 	mvn.w	r6, #15
	return err;
 8002a20:	e7de      	b.n	80029e0 <gpio_stm32_pin_interrupt_configure+0x4c>
 8002a22:	bf00      	nop
 8002a24:	08008dff 	.word	0x08008dff

08002a28 <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 8002a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a2c:	b08a      	sub	sp, #40	; 0x28
 8002a2e:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = dev->config;
 8002a30:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8002a34:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 8002a36:	ac02      	add	r4, sp, #8
 8002a38:	4f6a      	ldr	r7, [pc, #424]	; (8002be4 <spi_stm32_configure+0x1bc>)
 8002a3a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a3e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8002a42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 8002a46:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 8002a4a:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 8002a4c:	429d      	cmp	r5, r3
 8002a4e:	f000 80bd 	beq.w	8002bcc <spi_stm32_configure+0x1a4>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8002a52:	88ab      	ldrh	r3, [r5, #4]
 8002a54:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8002a58:	2a08      	cmp	r2, #8
 8002a5a:	d002      	beq.n	8002a62 <spi_stm32_configure+0x3a>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8002a5c:	2a10      	cmp	r2, #16
 8002a5e:	f040 80b7 	bne.w	8002bd0 <spi_stm32_configure+0x1a8>
		return -ENOTSUP;
	}

	/* configure the frame format Motorola (default) or TI */
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 8002a62:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002a66:	d114      	bne.n	8002a92 <spi_stm32_configure+0x6a>
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002a68:	6863      	ldr	r3, [r4, #4]
 8002a6a:	f023 0310 	bic.w	r3, r3, #16
 8002a6e:	6063      	str	r3, [r4, #4]
 8002a70:	485d      	ldr	r0, [pc, #372]	; (8002be8 <spi_stm32_configure+0x1c0>)
 8002a72:	f007 ff0f 	bl	800a894 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 8002a76:	b188      	cbz	r0, 8002a9c <spi_stm32_configure+0x74>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8002a78:	4b5b      	ldr	r3, [pc, #364]	; (8002be8 <spi_stm32_configure+0x1c0>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	b183      	cbz	r3, 8002aa2 <spi_stm32_configure+0x7a>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8002a80:	aa01      	add	r2, sp, #4
 8002a82:	4641      	mov	r1, r8
 8002a84:	4858      	ldr	r0, [pc, #352]	; (8002be8 <spi_stm32_configure+0x1c0>)
 8002a86:	4798      	blx	r3
	} else {
		LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif
}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	f2c0 80a4 	blt.w	8002bd6 <spi_stm32_configure+0x1ae>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00b      	b.n	8002aaa <spi_stm32_configure+0x82>
 8002a92:	6863      	ldr	r3, [r4, #4]
 8002a94:	f043 0310 	orr.w	r3, r3, #16
 8002a98:	6063      	str	r3, [r4, #4]
}
 8002a9a:	e7e9      	b.n	8002a70 <spi_stm32_configure+0x48>
		return -ENODEV;
 8002a9c:	f06f 0012 	mvn.w	r0, #18
 8002aa0:	e7f2      	b.n	8002a88 <spi_stm32_configure+0x60>
		return -ENOSYS;
 8002aa2:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8002aa6:	e7ef      	b.n	8002a88 <spi_stm32_configure+0x60>
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	dc04      	bgt.n	8002ab8 <spi_stm32_configure+0x90>
		uint32_t clk = clock >> br;
 8002aae:	9a01      	ldr	r2, [sp, #4]
 8002ab0:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 8002ab2:	6829      	ldr	r1, [r5, #0]
 8002ab4:	4291      	cmp	r1, r2
 8002ab6:	d3f7      	bcc.n	8002aa8 <spi_stm32_configure+0x80>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	f300 808f 	bgt.w	8002bdc <spi_stm32_configure+0x1b4>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac4:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	aa0a      	add	r2, sp, #40	; 0x28
 8002aca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002ace:	f853 3c20 	ldr.w	r3, [r3, #-32]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8002ad2:	6822      	ldr	r2, [r4, #0]
 8002ad4:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8002adc:	88ab      	ldrh	r3, [r5, #4]
 8002ade:	f013 0f02 	tst.w	r3, #2
 8002ae2:	d040      	beq.n	8002b66 <spi_stm32_configure+0x13e>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	f043 0302 	orr.w	r3, r3, #2
 8002aea:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8002aec:	88ab      	ldrh	r3, [r5, #4]
 8002aee:	f013 0f04 	tst.w	r3, #4
 8002af2:	d03d      	beq.n	8002b70 <spi_stm32_configure+0x148>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 8002b02:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 8002b04:	88ab      	ldrh	r3, [r5, #4]
 8002b06:	f013 0f10 	tst.w	r3, #16
 8002b0a:	d036      	beq.n	8002b7a <spi_stm32_configure+0x152>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b12:	6023      	str	r3, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b1a:	6023      	str	r3, [r4, #0]
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
	}

	LL_SPI_DisableCRC(spi);

	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8002b1c:	68ab      	ldr	r3, [r5, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d030      	beq.n	8002b84 <spi_stm32_configure+0x15c>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b28:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8002b2a:	6863      	ldr	r3, [r4, #4]
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 8002b32:	88ab      	ldrh	r3, [r5, #4]
 8002b34:	f013 0f01 	tst.w	r3, #1
 8002b38:	d03c      	beq.n	8002bb4 <spi_stm32_configure+0x18c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 8002b40:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8002b42:	88ab      	ldrh	r3, [r5, #4]
 8002b44:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d038      	beq.n	8002bbe <spi_stm32_configure+0x196>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8002b4c:	6863      	ldr	r3, [r4, #4]
 8002b4e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8002b52:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8002b54:	6863      	ldr	r3, [r4, #4]
 8002b56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b5a:	6063      	str	r3, [r4, #4]
#if DT_HAS_COMPAT_STATUS_OKAY(st_stm32_spi_fifo)
	ll_func_set_fifo_threshold_8bit(spi);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 8002b5c:	6035      	str	r5, [r6, #0]
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 8002b5e:	2000      	movs	r0, #0
}
 8002b60:	b00a      	add	sp, #40	; 0x28
 8002b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	f023 0302 	bic.w	r3, r3, #2
 8002b6c:	6023      	str	r3, [r4, #0]
}
 8002b6e:	e7bd      	b.n	8002aec <spi_stm32_configure+0xc4>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	6023      	str	r3, [r4, #0]
}
 8002b78:	e7c0      	b.n	8002afc <spi_stm32_configure+0xd4>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b80:	6023      	str	r3, [r4, #0]
}
 8002b82:	e7c7      	b.n	8002b14 <spi_stm32_configure+0xec>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8002b84:	88ab      	ldrh	r3, [r5, #4]
 8002b86:	f013 0f01 	tst.w	r3, #1
 8002b8a:	d008      	beq.n	8002b9e <spi_stm32_configure+0x176>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b92:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8002b94:	6863      	ldr	r3, [r4, #4]
 8002b96:	f023 0304 	bic.w	r3, r3, #4
 8002b9a:	6063      	str	r3, [r4, #4]
}
 8002b9c:	e7c9      	b.n	8002b32 <spi_stm32_configure+0x10a>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba8:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8002baa:	6863      	ldr	r3, [r4, #4]
 8002bac:	f043 0304 	orr.w	r3, r3, #4
 8002bb0:	6063      	str	r3, [r4, #4]
}
 8002bb2:	e7be      	b.n	8002b32 <spi_stm32_configure+0x10a>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8002bba:	6023      	str	r3, [r4, #0]
}
 8002bbc:	e7c1      	b.n	8002b42 <spi_stm32_configure+0x11a>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8002bbe:	6863      	ldr	r3, [r4, #4]
 8002bc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bc4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bc8:	6063      	str	r3, [r4, #4]
}
 8002bca:	e7c3      	b.n	8002b54 <spi_stm32_configure+0x12c>
		return 0;
 8002bcc:	2000      	movs	r0, #0
 8002bce:	e7c7      	b.n	8002b60 <spi_stm32_configure+0x138>
		return -ENOTSUP;
 8002bd0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002bd4:	e7c4      	b.n	8002b60 <spi_stm32_configure+0x138>
		return -EIO;
 8002bd6:	f06f 0004 	mvn.w	r0, #4
 8002bda:	e7c1      	b.n	8002b60 <spi_stm32_configure+0x138>
		return -EINVAL;
 8002bdc:	f06f 0015 	mvn.w	r0, #21
 8002be0:	e7be      	b.n	8002b60 <spi_stm32_configure+0x138>
 8002be2:	bf00      	nop
 8002be4:	0800bb3c 	.word	0x0800bb3c
 8002be8:	0800b6b8 	.word	0x0800b6b8

08002bec <spi_stm32_dma_rx_load>:
{
 8002bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bf0:	460d      	mov	r5, r1
 8002bf2:	4616      	mov	r6, r2
	const struct spi_stm32_config *cfg = dev->config;
 8002bf4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8002bf8:	6904      	ldr	r4, [r0, #16]
	blk_cfg = &stream->dma_blk_cfg;
 8002bfa:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 8002bfe:	2220      	movs	r2, #32
 8002c00:	2100      	movs	r1, #0
 8002c02:	4638      	mov	r0, r7
 8002c04:	f008 fa8f 	bl	800b126 <memset>
	blk_cfg->block_size = len;
 8002c08:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
	if (buf == NULL) {
 8002c0c:	2d00      	cmp	r5, #0
 8002c0e:	d038      	beq.n	8002c82 <spi_stm32_dma_rx_load+0x96>
		blk_cfg->dest_address = (uint32_t)buf;
 8002c10:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
		if (data->dma_rx.dst_addr_increment) {
 8002c14:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d03d      	beq.n	8002c98 <spi_stm32_dma_rx_load+0xac>
			blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8002c1c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8002c20:	f36f 1305 	bfc	r3, #4, #2
 8002c24:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	blk_cfg->source_address = ll_func_dma_get_reg_addr(cfg->spi, SPI_STM32_DMA_RX);
 8002c28:	f8d8 3008 	ldr.w	r3, [r8, #8]
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
  return (uint32_t) &(SPIx->DR);
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	if (data->dma_rx.src_addr_increment) {
 8002c32:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8002c36:	b3bb      	cbz	r3, 8002ca8 <spi_stm32_dma_rx_load+0xbc>
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8002c38:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8002c3c:	f36f 0383 	bfc	r3, #2, #2
 8002c40:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	blk_cfg->fifo_mode_control = data->dma_rx.fifo_threshold;
 8002c44:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 8002c48:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 8002c4c:	f362 0303 	bfi	r3, r2, #0, #4
 8002c50:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	stream->dma_cfg.head_block = blk_cfg;
 8002c54:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
	stream->dma_cfg.user_data = data;
 8002c58:	f8c4 409c 	str.w	r4, [r4, #156]	; 0x9c
	ret = dma_config(data->dma_rx.dma_dev, data->dma_rx.channel,
 8002c5c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 * @retval Negative errno code if failure.
 */
static inline int dma_config(const struct device *dev, uint32_t channel,
			     struct dma_config *config)
{
	const struct dma_driver_api *api =
 8002c60:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	return api->config(dev, channel, config);
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8002c68:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002c6c:	4798      	blx	r3
	if (ret != 0) {
 8002c6e:	b930      	cbnz	r0, 8002c7e <spi_stm32_dma_rx_load+0x92>
	return dma_start(data->dma_rx.dma_dev, data->dma_rx.channel);
 8002c70:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002c74:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 */
__syscall int dma_start(const struct device *dev, uint32_t channel);

static inline int z_impl_dma_start(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
 8002c78:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	return api->start(dev, channel);
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4798      	blx	r3
}
 8002c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		blk_cfg->dest_address = (uint32_t)&dummy_rx_tx_buffer;
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <spi_stm32_dma_rx_load+0xcc>)
 8002c84:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8002c88:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	f362 1305 	bfi	r3, r2, #4, #2
 8002c92:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 8002c96:	e7c7      	b.n	8002c28 <spi_stm32_dma_rx_load+0x3c>
			blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8002c98:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	f362 1305 	bfi	r3, r2, #4, #2
 8002ca2:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 8002ca6:	e7bf      	b.n	8002c28 <spi_stm32_dma_rx_load+0x3c>
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8002ca8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8002cac:	2202      	movs	r2, #2
 8002cae:	f362 0383 	bfi	r3, r2, #2, #2
 8002cb2:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 8002cb6:	e7c5      	b.n	8002c44 <spi_stm32_dma_rx_load+0x58>
 8002cb8:	20000a7c 	.word	0x20000a7c

08002cbc <spi_stm32_dma_tx_load>:
{
 8002cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cc0:	460d      	mov	r5, r1
 8002cc2:	4616      	mov	r6, r2
	const struct spi_stm32_config *cfg = dev->config;
 8002cc4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8002cc8:	6904      	ldr	r4, [r0, #16]
	blk_cfg = &stream->dma_blk_cfg;
 8002cca:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
 8002cce:	2220      	movs	r2, #32
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4638      	mov	r0, r7
 8002cd4:	f008 fa27 	bl	800b126 <memset>
	blk_cfg->block_size = len;
 8002cd8:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
	if (buf == NULL) {
 8002cdc:	2d00      	cmp	r5, #0
 8002cde:	d039      	beq.n	8002d54 <spi_stm32_dma_tx_load+0x98>
		blk_cfg->source_address = (uint32_t)buf;
 8002ce0:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
		if (data->dma_tx.src_addr_increment) {
 8002ce4:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d040      	beq.n	8002d6e <spi_stm32_dma_tx_load+0xb2>
			blk_cfg->source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8002cec:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8002cf0:	f36f 0383 	bfc	r3, #2, #2
 8002cf4:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
	blk_cfg->dest_address = ll_func_dma_get_reg_addr(cfg->spi, SPI_STM32_DMA_TX);
 8002cf8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002cfc:	330c      	adds	r3, #12
 8002cfe:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	if (data->dma_tx.dst_addr_increment) {
 8002d02:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d039      	beq.n	8002d7e <spi_stm32_dma_tx_load+0xc2>
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8002d0a:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8002d0e:	f36f 1305 	bfc	r3, #4, #2
 8002d12:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
	blk_cfg->fifo_mode_control = data->dma_tx.fifo_threshold;
 8002d16:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 8002d1a:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8002d1e:	f362 0303 	bfi	r3, r2, #0, #4
 8002d22:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	stream->dma_cfg.head_block = blk_cfg;
 8002d26:	f8c4 70e4 	str.w	r7, [r4, #228]	; 0xe4
	stream->dma_cfg.user_data = data;
 8002d2a:	f8c4 40e8 	str.w	r4, [r4, #232]	; 0xe8
	ret = dma_config(data->dma_tx.dma_dev, data->dma_tx.channel,
 8002d2e:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
	const struct dma_driver_api *api =
 8002d32:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, channel, config);
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
 8002d3a:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8002d3e:	4798      	blx	r3
	if (ret != 0) {
 8002d40:	b930      	cbnz	r0, 8002d50 <spi_stm32_dma_tx_load+0x94>
	return dma_start(data->dma_tx.dma_dev, data->dma_tx.channel);
 8002d42:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8002d46:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
	const struct dma_driver_api *api =
 8002d4a:	6883      	ldr	r3, [r0, #8]
	return api->start(dev, channel);
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	4798      	blx	r3
}
 8002d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dummy_rx_tx_buffer = 0;
 8002d54:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <spi_stm32_dma_tx_load+0xd4>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
		blk_cfg->source_address = (uint32_t)&dummy_rx_tx_buffer;
 8002d5a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8002d5e:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8002d62:	2202      	movs	r2, #2
 8002d64:	f362 0383 	bfi	r3, r2, #2, #2
 8002d68:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 8002d6c:	e7c4      	b.n	8002cf8 <spi_stm32_dma_tx_load+0x3c>
			blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8002d6e:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8002d72:	2202      	movs	r2, #2
 8002d74:	f362 0383 	bfi	r3, r2, #2, #2
 8002d78:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 8002d7c:	e7bc      	b.n	8002cf8 <spi_stm32_dma_tx_load+0x3c>
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8002d7e:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8002d82:	2202      	movs	r2, #2
 8002d84:	f362 1305 	bfi	r3, r2, #4, #2
 8002d88:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 8002d8c:	e7c3      	b.n	8002d16 <spi_stm32_dma_tx_load+0x5a>
 8002d8e:	bf00      	nop
 8002d90:	20000a7c 	.word	0x20000a7c

08002d94 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8002d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	4604      	mov	r4, r0
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8002d9c:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8002d9e:	6847      	ldr	r7, [r0, #4]
 8002da0:	4851      	ldr	r0, [pc, #324]	; (8002ee8 <spi_stm32_init+0x154>)
 8002da2:	f007 fd77 	bl	800a894 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8002da6:	b358      	cbz	r0, 8002e00 <spi_stm32_init+0x6c>
	const struct clock_control_driver_api *api =
 8002da8:	484f      	ldr	r0, [pc, #316]	; (8002ee8 <spi_stm32_init+0x154>)
 8002daa:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4639      	mov	r1, r7
 8002db0:	4798      	blx	r3
 8002db2:	4680      	mov	r8, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8002db4:	f1b8 0f00 	cmp.w	r8, #0
 8002db8:	f040 808d 	bne.w	8002ed6 <spi_stm32_init+0x142>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8002dbc:	aa01      	add	r2, sp, #4
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f007 fd06 	bl	800a7d2 <pinctrl_lookup_state>
	if (ret < 0) {
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	db05      	blt.n	8002dd6 <spi_stm32_init+0x42>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8002dca:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	7919      	ldrb	r1, [r3, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	f007 fd17 	bl	800a804 <pinctrl_configure_pins>
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 8002dd6:	2800      	cmp	r0, #0
 8002dd8:	db69      	blt.n	8002eae <spi_stm32_init+0x11a>
			return err;
		}
	}

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4620      	mov	r0, r4
 8002dde:	4798      	blx	r3
#endif

#ifdef CONFIG_SPI_STM32_DMA
	if ((data->dma_rx.dma_dev != NULL) &&
 8002de0:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8002de4:	b118      	cbz	r0, 8002dee <spi_stm32_init+0x5a>
 8002de6:	f007 fd55 	bl	800a894 <z_device_is_ready>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d076      	beq.n	8002edc <spi_stm32_init+0x148>
				!device_is_ready(data->dma_rx.dma_dev)) {
		LOG_ERR("%s device not ready", data->dma_rx.dma_dev->name);
		return -ENODEV;
	}

	if ((data->dma_tx.dma_dev != NULL) &&
 8002dee:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
 8002df2:	b118      	cbz	r0, 8002dfc <spi_stm32_init+0x68>
 8002df4:	f007 fd4e 	bl	800a894 <z_device_is_ready>
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d072      	beq.n	8002ee2 <spi_stm32_init+0x14e>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8002dfc:	68ac      	ldr	r4, [r5, #8]
 8002dfe:	e013      	b.n	8002e28 <spi_stm32_init+0x94>
		return -ENODEV;
 8002e00:	f06f 0812 	mvn.w	r8, #18
 8002e04:	e7d6      	b.n	8002db4 <spi_stm32_init+0x20>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8002e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8002e0a:	f013 0f01 	tst.w	r3, #1
 8002e0e:	d026      	beq.n	8002e5e <spi_stm32_init+0xca>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8002e10:	2301      	movs	r3, #1
 8002e12:	fa03 fe01 	lsl.w	lr, r3, r1
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	ea43 030e 	orr.w	r3, r3, lr
 8002e1c:	603b      	str	r3, [r7, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
 8002e1e:	6833      	ldr	r3, [r6, #0]
 8002e20:	4798      	blx	r3
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
 8002e22:	2800      	cmp	r0, #0
 8002e24:	db24      	blt.n	8002e70 <spi_stm32_init+0xdc>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8002e26:	3408      	adds	r4, #8
 8002e28:	68ab      	ldr	r3, [r5, #8]
 8002e2a:	68ea      	ldr	r2, [r5, #12]
 8002e2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e30:	429c      	cmp	r4, r3
 8002e32:	d21c      	bcs.n	8002e6e <spi_stm32_init+0xda>
		if (!device_is_ready(cs_gpio->port)) {
 8002e34:	6820      	ldr	r0, [r4, #0]
 8002e36:	f007 fd2d 	bl	800a894 <z_device_is_ready>
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	d03a      	beq.n	8002eb4 <spi_stm32_init+0x120>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
 8002e3e:	6820      	ldr	r0, [r4, #0]
 8002e40:	7921      	ldrb	r1, [r4, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
 8002e42:	7963      	ldrb	r3, [r4, #5]
	return gpio_pin_configure(spec->port,
 8002e44:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600
	const struct gpio_driver_api *api =
 8002e48:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
 8002e4a:	6907      	ldr	r7, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8002e4c:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8002e50:	d0d9      	beq.n	8002e06 <spi_stm32_init+0x72>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8002e52:	f013 0f01 	tst.w	r3, #1
 8002e56:	d0d6      	beq.n	8002e06 <spi_stm32_init+0x72>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8002e58:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8002e5c:	e7d3      	b.n	8002e06 <spi_stm32_init+0x72>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8002e5e:	2301      	movs	r3, #1
 8002e60:	fa03 fe01 	lsl.w	lr, r3, r1
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	ea23 030e 	bic.w	r3, r3, lr
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	e7d7      	b.n	8002e1e <spi_stm32_init+0x8a>
			return ret;
		}
	}

	return 0;
 8002e6e:	4640      	mov	r0, r8
		return -ENODEV;
	}
#endif /* CONFIG_SPI_STM32_DMA */

	err = spi_context_cs_configure_all(&data->ctx);
	if (err < 0) {
 8002e70:	2800      	cmp	r0, #0
 8002e72:	db1c      	blt.n	8002eae <spi_stm32_init+0x11a>
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8002e74:	682b      	ldr	r3, [r5, #0]
 8002e76:	b1bb      	cbz	r3, 8002ea8 <spi_stm32_init+0x114>
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	b1ab      	cbz	r3, 8002ea8 <spi_stm32_init+0x114>
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	b19a      	cbz	r2, 8002ea8 <spi_stm32_init+0x114>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 8002e80:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8002e82:	f004 f871 	bl	8006f68 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8002e86:	682b      	ldr	r3, [r5, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	791a      	ldrb	r2, [r3, #4]
	const struct gpio_driver_data *const data =
 8002e8e:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	2301      	movs	r3, #1
 8002e94:	4093      	lsls	r3, r2
 8002e96:	4219      	tst	r1, r3
 8002e98:	d10f      	bne.n	8002eba <spi_stm32_init+0x126>
 8002e9a:	4643      	mov	r3, r8
	if (value != 0)	{
 8002e9c:	b17b      	cbz	r3, 8002ebe <spi_stm32_init+0x12a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 8002ea2:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	4798      	blx	r3
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
 8002ea8:	69ab      	ldr	r3, [r5, #24]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 8002eaa:	b173      	cbz	r3, 8002eca <spi_stm32_init+0x136>
		return err;
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
 8002eac:	4640      	mov	r0, r8
}
 8002eae:	b002      	add	sp, #8
 8002eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
 8002eb4:	f06f 0012 	mvn.w	r0, #18
 8002eb8:	e7da      	b.n	8002e70 <spi_stm32_init+0xdc>
		value = (value != 0) ? 0 : 1;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e7ee      	b.n	8002e9c <spi_stm32_init+0x108>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 8002ec2:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 8002ec8:	e7ee      	b.n	8002ea8 <spi_stm32_init+0x114>
		ctx->owner = NULL;
 8002eca:	606b      	str	r3, [r5, #4]
		k_sem_give(&ctx->lock);
 8002ecc:	f105 0010 	add.w	r0, r5, #16
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8002ed0:	f003 f92a 	bl	8006128 <z_impl_k_sem_give>
}
 8002ed4:	e7ea      	b.n	8002eac <spi_stm32_init+0x118>
		return -EIO;
 8002ed6:	f06f 0004 	mvn.w	r0, #4
 8002eda:	e7e8      	b.n	8002eae <spi_stm32_init+0x11a>
		return -ENODEV;
 8002edc:	f06f 0012 	mvn.w	r0, #18
 8002ee0:	e7e5      	b.n	8002eae <spi_stm32_init+0x11a>
		return -ENODEV;
 8002ee2:	f06f 0012 	mvn.w	r0, #18
 8002ee6:	e7e2      	b.n	8002eae <spi_stm32_init+0x11a>
 8002ee8:	0800b6b8 	.word	0x0800b6b8

08002eec <timer_callback>:
{
	TimerIrqHandler();
}

static void timer_callback(struct k_timer *_timer)
{
 8002eec:	b508      	push	{r3, lr}
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 8002eee:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <timer_callback+0xc>)
 8002ef0:	f003 faca 	bl	8006488 <k_work_submit>
}
 8002ef4:	bd08      	pop	{r3, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000298 	.word	0x20000298

08002efc <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 8002efc:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8002efe:	f008 f860 	bl	800afc2 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 8002f02:	220a      	movs	r2, #10
 8002f04:	2300      	movs	r3, #0
 8002f06:	f7fd f99b 	bl	8000240 <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 8002f0a:	4b02      	ldr	r3, [pc, #8]	; (8002f14 <RtcGetTimerElapsedTime+0x18>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
}
 8002f0e:	1ac0      	subs	r0, r0, r3
 8002f10:	bd08      	pop	{r3, pc}
 8002f12:	bf00      	nop
 8002f14:	20000a80 	.word	0x20000a80

08002f18 <RtcStopAlarm>:
{
	return 1;
}

void RtcStopAlarm(void)
{
 8002f18:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
 8002f1a:	4802      	ldr	r0, [pc, #8]	; (8002f24 <RtcStopAlarm+0xc>)
 8002f1c:	f008 f855 	bl	800afca <z_impl_k_timer_stop>
	k_timer_stop(&lora_timer);
}
 8002f20:	bd08      	pop	{r3, pc}
 8002f22:	bf00      	nop
 8002f24:	200003f8 	.word	0x200003f8

08002f28 <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout)
{
 8002f28:	b500      	push	{lr}
 8002f2a:	b083      	sub	sp, #12
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8002f2c:	0f83      	lsrs	r3, r0, #30
 8002f2e:	0082      	lsls	r2, r0, #2
 8002f30:	1812      	adds	r2, r2, r0
 8002f32:	f143 0300 	adc.w	r3, r3, #0
 8002f36:	1892      	adds	r2, r2, r2
 8002f38:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	e9cd 0100 	strd	r0, r1, [sp]
 8002f42:	4803      	ldr	r0, [pc, #12]	; (8002f50 <RtcSetAlarm+0x28>)
 8002f44:	f004 f874 	bl	8007030 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8002f48:	b003      	add	sp, #12
 8002f4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f4e:	bf00      	nop
 8002f50:	200003f8 	.word	0x200003f8

08002f54 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 8002f54:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8002f56:	f008 f834 	bl	800afc2 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8002f5a:	220a      	movs	r2, #10
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f7fd f96f 	bl	8000240 <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 8002f62:	4b01      	ldr	r3, [pc, #4]	; (8002f68 <RtcSetTimerContext+0x14>)
 8002f64:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 8002f66:	bd08      	pop	{r3, pc}
 8002f68:	20000a80 	.word	0x20000a80

08002f6c <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 8002f6c:	4b01      	ldr	r3, [pc, #4]	; (8002f74 <RtcGetTimerContext+0x8>)
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000a80 	.word	0x20000a80

08002f78 <modem_release>:
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
{
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	4604      	mov	r4, r0
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8002f7c:	f100 0544 	add.w	r5, r0, #68	; 0x44
 8002f80:	2302      	movs	r3, #2
 8002f82:	f3bf 8f5b 	dmb	ish
 8002f86:	e855 2f00 	ldrex	r2, [r5]
 8002f8a:	2a01      	cmp	r2, #1
 8002f8c:	d103      	bne.n	8002f96 <modem_release+0x1e>
 8002f8e:	e845 3100 	strex	r1, r3, [r5]
 8002f92:	2900      	cmp	r1, #0
 8002f94:	d1f7      	bne.n	8002f86 <modem_release+0xe>
 8002f96:	f3bf 8f5b 	dmb	ish
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2601      	moveq	r6, #1
 8002f9e:	2600      	movne	r6, #0
 8002fa0:	d10e      	bne.n	8002fc0 <modem_release+0x48>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <modem_release+0x4c>)
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	6063      	str	r3, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8002fac:	f3bf 8f5b 	dmb	ish
 8002fb0:	e855 2f00 	ldrex	r2, [r5]
 8002fb4:	e845 3100 	strex	r1, r3, [r5]
 8002fb8:	2900      	cmp	r1, #0
 8002fba:	d1f9      	bne.n	8002fb0 <modem_release+0x38>
 8002fbc:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
}
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	0800c134 	.word	0x0800c134

08002fc8 <sx12xx_ev_tx_timed_out>:
		}
	}
}

static void sx12xx_ev_tx_timed_out(void)
{
 8002fc8:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8002fca:	4806      	ldr	r0, [pc, #24]	; (8002fe4 <sx12xx_ev_tx_timed_out+0x1c>)
 8002fcc:	6844      	ldr	r4, [r0, #4]

    /* Clean up TX timeout event callback */
    dev_data.events.TxTimeout = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	6143      	str	r3, [r0, #20]

    if (modem_release(&dev_data)) {
 8002fd2:	f7ff ffd1 	bl	8002f78 <modem_release>
 8002fd6:	b120      	cbz	r0, 8002fe2 <sx12xx_ev_tx_timed_out+0x1a>
		/* Raise signal if provided */
		if (sig) {
 8002fd8:	b11c      	cbz	r4, 8002fe2 <sx12xx_ev_tx_timed_out+0x1a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f004 fb23 	bl	8007628 <z_impl_k_poll_signal_raise>
			k_poll_signal_raise(sig, 0);
		}
	}
}
 8002fe2:	bd10      	pop	{r4, pc}
 8002fe4:	20000a84 	.word	0x20000a84

08002fe8 <sx12xx_ev_rx_error_timeout>:

static void sx12xx_ev_rx_error_timeout(void)
{
 8002fe8:	b510      	push	{r4, lr}
    LOG_DBG("Receive timeout/error");
    struct k_poll_signal *sig = dev_data.operation_done;
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <sx12xx_ev_rx_error_timeout+0x1c>)
 8002fec:	685c      	ldr	r4, [r3, #4]

    /* Receiving in asynchronous mode */
    if (dev_data.async_rx_error_timeout_cb) {
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	b113      	cbz	r3, 8002ff8 <sx12xx_ev_rx_error_timeout+0x10>
        /* Run the callback */
        dev_data.async_rx_error_timeout_cb(dev_data.dev);
 8002ff2:	4a04      	ldr	r2, [pc, #16]	; (8003004 <sx12xx_ev_rx_error_timeout+0x1c>)
 8002ff4:	6810      	ldr	r0, [r2, #0]
 8002ff6:	4798      	blx	r3
    }

    /* Raise signal if provided */
    if (sig) {
 8002ff8:	b11c      	cbz	r4, 8003002 <sx12xx_ev_rx_error_timeout+0x1a>
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f004 fb13 	bl	8007628 <z_impl_k_poll_signal_raise>
        k_poll_signal_raise(sig, 0);
    }
}
 8003002:	bd10      	pop	{r4, pc}
 8003004:	20000a84 	.word	0x20000a84

08003008 <sx12xx_ev_tx_done>:
{
 8003008:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 800300a:	4805      	ldr	r0, [pc, #20]	; (8003020 <sx12xx_ev_tx_done+0x18>)
 800300c:	6844      	ldr	r4, [r0, #4]
	if (modem_release(&dev_data)) {
 800300e:	f7ff ffb3 	bl	8002f78 <modem_release>
 8003012:	b120      	cbz	r0, 800301e <sx12xx_ev_tx_done+0x16>
		if (sig) {
 8003014:	b11c      	cbz	r4, 800301e <sx12xx_ev_tx_done+0x16>
 8003016:	2100      	movs	r1, #0
 8003018:	4620      	mov	r0, r4
 800301a:	f004 fb05 	bl	8007628 <z_impl_k_poll_signal_raise>
}
 800301e:	bd10      	pop	{r4, pc}
 8003020:	20000a84 	.word	0x20000a84

08003024 <sx12xx_ev_rx_done>:
{
 8003024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003026:	b083      	sub	sp, #12
 8003028:	4617      	mov	r7, r2
 800302a:	461d      	mov	r5, r3
	struct k_poll_signal *sig = dev_data.operation_done;
 800302c:	4c24      	ldr	r4, [pc, #144]	; (80030c0 <sx12xx_ev_rx_done+0x9c>)
 800302e:	6866      	ldr	r6, [r4, #4]
	if (dev_data.async_rx_cb) {
 8003030:	68a4      	ldr	r4, [r4, #8]
 8003032:	b15c      	cbz	r4, 800304c <sx12xx_ev_rx_done+0x28>
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	460a      	mov	r2, r1
 800303a:	4601      	mov	r1, r0
 800303c:	4820      	ldr	r0, [pc, #128]	; (80030c0 <sx12xx_ev_rx_done+0x9c>)
 800303e:	6800      	ldr	r0, [r0, #0]
 8003040:	47a0      	blx	r4
		Radio.Rx(0);
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <sx12xx_ev_rx_done+0xa0>)
 8003044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003046:	2000      	movs	r0, #0
 8003048:	4798      	blx	r3
		return;
 800304a:	e037      	b.n	80030bc <sx12xx_ev_rx_done+0x98>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800304c:	4b1e      	ldr	r3, [pc, #120]	; (80030c8 <sx12xx_ev_rx_done+0xa4>)
 800304e:	2202      	movs	r2, #2
 8003050:	f3bf 8f5b 	dmb	ish
 8003054:	e853 4f00 	ldrex	r4, [r3]
 8003058:	2c01      	cmp	r4, #1
 800305a:	d104      	bne.n	8003066 <sx12xx_ev_rx_done+0x42>
 800305c:	e843 2c00 	strex	ip, r2, [r3]
 8003060:	f1bc 0f00 	cmp.w	ip, #0
 8003064:	d1f6      	bne.n	8003054 <sx12xx_ev_rx_done+0x30>
 8003066:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 800306a:	d127      	bne.n	80030bc <sx12xx_ev_rx_done+0x98>
	if (size < *dev_data.rx_params.size) {
 800306c:	3b44      	subs	r3, #68	; 0x44
 800306e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003070:	781a      	ldrb	r2, [r3, #0]
 8003072:	428a      	cmp	r2, r1
 8003074:	d900      	bls.n	8003078 <sx12xx_ev_rx_done+0x54>
		*dev_data.rx_params.size = size;
 8003076:	7019      	strb	r1, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
 8003078:	4c11      	ldr	r4, [pc, #68]	; (80030c0 <sx12xx_ev_rx_done+0x9c>)
 800307a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800307c:	781a      	ldrb	r2, [r3, #0]
 800307e:	4601      	mov	r1, r0
 8003080:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003082:	f008 f842 	bl	800b10a <memcpy>
	if (dev_data.rx_params.rssi) {
 8003086:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003088:	b103      	cbz	r3, 800308c <sx12xx_ev_rx_done+0x68>
		*dev_data.rx_params.rssi = rssi;
 800308a:	801f      	strh	r7, [r3, #0]
	if (dev_data.rx_params.snr) {
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <sx12xx_ev_rx_done+0x9c>)
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	b103      	cbz	r3, 8003094 <sx12xx_ev_rx_done+0x70>
		*dev_data.rx_params.snr = snr;
 8003092:	701d      	strb	r5, [r3, #0]
	Radio.Sleep();
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <sx12xx_ev_rx_done+0xa0>)
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	4798      	blx	r3
	dev_data.operation_done = NULL;
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <sx12xx_ev_rx_done+0x9c>)
 800309c:	2100      	movs	r1, #0
 800309e:	6059      	str	r1, [r3, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80030a0:	3344      	adds	r3, #68	; 0x44
 80030a2:	f3bf 8f5b 	dmb	ish
 80030a6:	e853 2f00 	ldrex	r2, [r3]
 80030aa:	e843 1000 	strex	r0, r1, [r3]
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d1f9      	bne.n	80030a6 <sx12xx_ev_rx_done+0x82>
 80030b2:	f3bf 8f5b 	dmb	ish
 80030b6:	4630      	mov	r0, r6
 80030b8:	f004 fab6 	bl	8007628 <z_impl_k_poll_signal_raise>
}
 80030bc:	b003      	add	sp, #12
 80030be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c0:	20000a84 	.word	0x20000a84
 80030c4:	0800c134 	.word	0x0800c134
 80030c8:	20000ac8 	.word	0x20000ac8

080030cc <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80030d0:	490f      	ldr	r1, [pc, #60]	; (8003110 <sx12xx_lora_send_async+0x44>)
 80030d2:	2001      	movs	r0, #1
 80030d4:	f3bf 8f5b 	dmb	ish
 80030d8:	e851 4f00 	ldrex	r4, [r1]
 80030dc:	2c00      	cmp	r4, #0
 80030de:	d103      	bne.n	80030e8 <sx12xx_lora_send_async+0x1c>
 80030e0:	e841 0600 	strex	r6, r0, [r1]
 80030e4:	2e00      	cmp	r6, #0
 80030e6:	d1f7      	bne.n	80030d8 <sx12xx_lora_send_async+0xc>
 80030e8:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 80030ec:	d10c      	bne.n	8003108 <sx12xx_lora_send_async+0x3c>
		return -EBUSY;
	}

	/* Store signal */
	dev_data.operation_done = async;
 80030ee:	3944      	subs	r1, #68	; 0x44
 80030f0:	604b      	str	r3, [r1, #4]

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 80030f2:	4e08      	ldr	r6, [pc, #32]	; (8003114 <sx12xx_lora_send_async+0x48>)
 80030f4:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80030f6:	b2d4      	uxtb	r4, r2
 80030f8:	4621      	mov	r1, r4
 80030fa:	4798      	blx	r3

	Radio.Send(data, data_len);
 80030fc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80030fe:	4621      	mov	r1, r4
 8003100:	4628      	mov	r0, r5
 8003102:	4798      	blx	r3

	return 0;
 8003104:	2000      	movs	r0, #0
}
 8003106:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8003108:	f06f 000f 	mvn.w	r0, #15
 800310c:	e7fb      	b.n	8003106 <sx12xx_lora_send_async+0x3a>
 800310e:	bf00      	nop
 8003110:	20000ac8 	.word	0x20000ac8
 8003114:	0800c134 	.word	0x0800c134

08003118 <sx12xx_lora_send>:
{
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	b08e      	sub	sp, #56	; 0x38
 800311c:	4614      	mov	r4, r2
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 800311e:	aa0a      	add	r2, sp, #40	; 0x28
 8003120:	920a      	str	r2, [sp, #40]	; 0x28
 8003122:	920b      	str	r2, [sp, #44]	; 0x2c
 8003124:	2300      	movs	r3, #0
 8003126:	930c      	str	r3, [sp, #48]	; 0x30
 8003128:	930d      	str	r3, [sp, #52]	; 0x34
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800312a:	9305      	str	r3, [sp, #20]
 800312c:	9306      	str	r3, [sp, #24]
 800312e:	9307      	str	r3, [sp, #28]
 8003130:	9308      	str	r3, [sp, #32]
 8003132:	9309      	str	r3, [sp, #36]	; 0x24
 8003134:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8003138:	2501      	movs	r5, #1
 800313a:	f365 0304 	bfi	r3, r5, #0, #5
 800313e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8003142:	9209      	str	r2, [sp, #36]	; 0x24
	if (!dev_data.tx_cfg.frequency) {
 8003144:	4b21      	ldr	r3, [pc, #132]	; (80031cc <sx12xx_lora_send+0xb4>)
 8003146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003148:	2b00      	cmp	r3, #0
 800314a:	d03b      	beq.n	80031c4 <sx12xx_lora_send+0xac>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 800314c:	4613      	mov	r3, r2
 800314e:	4622      	mov	r2, r4
 8003150:	f7ff ffbc 	bl	80030cc <sx12xx_lora_send_async>
	if (ret < 0) {
 8003154:	2800      	cmp	r0, #0
 8003156:	db23      	blt.n	80031a0 <sx12xx_lora_send+0x88>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8003158:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <sx12xx_lora_send+0xb8>)
 800315a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
				   dev_data.tx_cfg.bandwidth,
 800315c:	491b      	ldr	r1, [pc, #108]	; (80031cc <sx12xx_lora_send+0xb4>)
	air_time = Radio.TimeOnAir(MODEM_LORA,
 800315e:	9503      	str	r5, [sp, #12]
 8003160:	b2e4      	uxtb	r4, r4
 8003162:	9402      	str	r4, [sp, #8]
 8003164:	f891 303f 	ldrb.w	r3, [r1, #63]	; 0x3f
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	f891 303a 	ldrb.w	r3, [r1, #58]	; 0x3a
 8003172:	f891 2039 	ldrb.w	r2, [r1, #57]	; 0x39
 8003176:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 800317a:	4628      	mov	r0, r5
 800317c:	47b0      	blx	r6
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 800317e:	fa00 f105 	lsl.w	r1, r0, r5
			return t * ((uint64_t)to_hz / from_hz);
 8003182:	f3c0 7341 	ubfx	r3, r0, #29, #2
 8003186:	00c2      	lsls	r2, r0, #3
 8003188:	1852      	adds	r2, r2, r1
 800318a:	f143 0300 	adc.w	r3, r3, #0
 800318e:	1892      	adds	r2, r2, r2
 8003190:	415b      	adcs	r3, r3
	return z_impl_k_poll(events, num_events, timeout);
 8003192:	4629      	mov	r1, r5
 8003194:	a805      	add	r0, sp, #20
 8003196:	f004 f99b 	bl	80074d0 <z_impl_k_poll>
	if (ret < 0) {
 800319a:	2800      	cmp	r0, #0
 800319c:	db02      	blt.n	80031a4 <sx12xx_lora_send+0x8c>
	return 0;
 800319e:	2000      	movs	r0, #0
}
 80031a0:	b00e      	add	sp, #56	; 0x38
 80031a2:	bd70      	pop	{r4, r5, r6, pc}
		if (!modem_release(&dev_data)) {
 80031a4:	4809      	ldr	r0, [pc, #36]	; (80031cc <sx12xx_lora_send+0xb4>)
 80031a6:	f7ff fee7 	bl	8002f78 <modem_release>
 80031aa:	b108      	cbz	r0, 80031b0 <sx12xx_lora_send+0x98>
	return 0;
 80031ac:	2000      	movs	r0, #0
 80031ae:	e7f7      	b.n	80031a0 <sx12xx_lora_send+0x88>
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031b8:	4629      	mov	r1, r5
 80031ba:	a805      	add	r0, sp, #20
 80031bc:	f004 f988 	bl	80074d0 <z_impl_k_poll>
 80031c0:	2000      	movs	r0, #0
 80031c2:	e7ed      	b.n	80031a0 <sx12xx_lora_send+0x88>
		return -EINVAL;
 80031c4:	f06f 0015 	mvn.w	r0, #21
 80031c8:	e7ea      	b.n	80031a0 <sx12xx_lora_send+0x88>
 80031ca:	bf00      	nop
 80031cc:	20000a84 	.word	0x20000a84
 80031d0:	0800c134 	.word	0x0800c134

080031d4 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 80031d4:	b530      	push	{r4, r5, lr}
 80031d6:	b08d      	sub	sp, #52	; 0x34
 80031d8:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 80031dc:	aa08      	add	r2, sp, #32
 80031de:	9208      	str	r2, [sp, #32]
 80031e0:	9209      	str	r2, [sp, #36]	; 0x24
 80031e2:	2300      	movs	r3, #0
 80031e4:	930a      	str	r3, [sp, #40]	; 0x28
 80031e6:	930b      	str	r3, [sp, #44]	; 0x2c
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 80031e8:	9303      	str	r3, [sp, #12]
 80031ea:	9304      	str	r3, [sp, #16]
 80031ec:	9305      	str	r3, [sp, #20]
 80031ee:	9306      	str	r3, [sp, #24]
 80031f0:	9307      	str	r3, [sp, #28]
 80031f2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80031f6:	2001      	movs	r0, #1
 80031f8:	f360 0304 	bfi	r3, r0, #0, #5
 80031fc:	f88d 3019 	strb.w	r3, [sp, #25]
 8003200:	9207      	str	r2, [sp, #28]
 8003202:	4b21      	ldr	r3, [pc, #132]	; (8003288 <sx12xx_lora_recv+0xb4>)
 8003204:	f3bf 8f5b 	dmb	ish
 8003208:	e853 2f00 	ldrex	r2, [r3]
 800320c:	2a00      	cmp	r2, #0
 800320e:	d103      	bne.n	8003218 <sx12xx_lora_recv+0x44>
 8003210:	e843 0400 	strex	r4, r0, [r3]
 8003214:	2c00      	cmp	r4, #0
 8003216:	d1f7      	bne.n	8003208 <sx12xx_lora_recv+0x34>
 8003218:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 800321c:	d130      	bne.n	8003280 <sx12xx_lora_recv+0xac>
		return -EBUSY;
	}

	dev_data.async_rx_cb = NULL;
 800321e:	3b44      	subs	r3, #68	; 0x44
 8003220:	2400      	movs	r4, #0
 8003222:	609c      	str	r4, [r3, #8]
	/* Store operation signal */
	dev_data.operation_done = &done;
 8003224:	aa08      	add	r2, sp, #32
 8003226:	605a      	str	r2, [r3, #4]
	/* Set data output location */
	dev_data.rx_params.buf = data;
 8003228:	6499      	str	r1, [r3, #72]	; 0x48
	dev_data.rx_params.size = &size;
 800322a:	f10d 0207 	add.w	r2, sp, #7
 800322e:	64da      	str	r2, [r3, #76]	; 0x4c
	dev_data.rx_params.rssi = rssi;
 8003230:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003232:	651a      	str	r2, [r3, #80]	; 0x50
	dev_data.rx_params.snr = snr;
 8003234:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003236:	655a      	str	r2, [r3, #84]	; 0x54

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8003238:	4d14      	ldr	r5, [pc, #80]	; (800328c <sx12xx_lora_recv+0xb8>)
 800323a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800323c:	21ff      	movs	r1, #255	; 0xff
 800323e:	4798      	blx	r3
	Radio.Rx(0);
 8003240:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003242:	4620      	mov	r0, r4
 8003244:	4798      	blx	r3
 8003246:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800324a:	2101      	movs	r1, #1
 800324c:	a803      	add	r0, sp, #12
 800324e:	f004 f93f 	bl	80074d0 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 8003252:	1e04      	subs	r4, r0, #0
 8003254:	db04      	blt.n	8003260 <sx12xx_lora_recv+0x8c>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 8003256:	f89d 4007 	ldrb.w	r4, [sp, #7]
}
 800325a:	4620      	mov	r0, r4
 800325c:	b00d      	add	sp, #52	; 0x34
 800325e:	bd30      	pop	{r4, r5, pc}
		if (!modem_release(&dev_data)) {
 8003260:	480b      	ldr	r0, [pc, #44]	; (8003290 <sx12xx_lora_recv+0xbc>)
 8003262:	f7ff fe89 	bl	8002f78 <modem_release>
 8003266:	2800      	cmp	r0, #0
 8003268:	d1f7      	bne.n	800325a <sx12xx_lora_recv+0x86>
 800326a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800326e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003272:	2101      	movs	r1, #1
 8003274:	a803      	add	r0, sp, #12
 8003276:	f004 f92b 	bl	80074d0 <z_impl_k_poll>
			return size;
 800327a:	f89d 4007 	ldrb.w	r4, [sp, #7]
 800327e:	e7ec      	b.n	800325a <sx12xx_lora_recv+0x86>
		return -EBUSY;
 8003280:	f06f 040f 	mvn.w	r4, #15
 8003284:	e7e9      	b.n	800325a <sx12xx_lora_recv+0x86>
 8003286:	bf00      	nop
 8003288:	20000ac8 	.word	0x20000ac8
 800328c:	0800c134 	.word	0x0800c134
 8003290:	20000a84 	.word	0x20000a84

08003294 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb,
  lora_recv_error_timeout_cb error_timeout_cb)
{
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 8003294:	4613      	mov	r3, r2
 8003296:	b1fa      	cbz	r2, 80032d8 <sx12xx_lora_recv_async+0x44>
 8003298:	b103      	cbz	r3, 800329c <sx12xx_lora_recv_async+0x8>
 800329a:	b359      	cbz	r1, 80032f4 <sx12xx_lora_recv_async+0x60>
{
 800329c:	b510      	push	{r4, lr}
      LOG_ERR("One of callback functions cannot be equal NULL");
      return -EINVAL;
  }

	/* Cancel ongoing reception */
	if (cb == NULL) {
 800329e:	b301      	cbz	r1, 80032e2 <sx12xx_lora_recv_async+0x4e>
 80032a0:	4a17      	ldr	r2, [pc, #92]	; (8003300 <sx12xx_lora_recv_async+0x6c>)
 80032a2:	2001      	movs	r0, #1
 80032a4:	f3bf 8f5b 	dmb	ish
 80032a8:	e852 4f00 	ldrex	r4, [r2]
 80032ac:	2c00      	cmp	r4, #0
 80032ae:	d104      	bne.n	80032ba <sx12xx_lora_recv_async+0x26>
 80032b0:	e842 0c00 	strex	ip, r0, [r2]
 80032b4:	f1bc 0f00 	cmp.w	ip, #0
 80032b8:	d1f6      	bne.n	80032a8 <sx12xx_lora_recv_async+0x14>
 80032ba:	f3bf 8f5b 	dmb	ish
		}
		return 0;
	}

	/* Ensure available */
	if (!modem_acquire(&dev_data)) {
 80032be:	d11c      	bne.n	80032fa <sx12xx_lora_recv_async+0x66>
		return -EBUSY;
	}

	/* Store parameters */
	dev_data.async_rx_cb = cb;
 80032c0:	3a44      	subs	r2, #68	; 0x44
 80032c2:	6091      	str	r1, [r2, #8]
   dev_data.async_rx_error_timeout_cb = error_timeout_cb;
 80032c4:	60d3      	str	r3, [r2, #12]

	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 80032c6:	4c0f      	ldr	r4, [pc, #60]	; (8003304 <sx12xx_lora_recv_async+0x70>)
 80032c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032ca:	21ff      	movs	r1, #255	; 0xff
 80032cc:	4798      	blx	r3
	Radio.Rx(0);
 80032ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032d0:	2000      	movs	r0, #0
 80032d2:	4798      	blx	r3

	return 0;
 80032d4:	2000      	movs	r0, #0
}
 80032d6:	bd10      	pop	{r4, pc}
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 80032d8:	2900      	cmp	r1, #0
 80032da:	d0dd      	beq.n	8003298 <sx12xx_lora_recv_async+0x4>
      return -EINVAL;
 80032dc:	f06f 0015 	mvn.w	r0, #21
 80032e0:	4770      	bx	lr
		if (!modem_release(&dev_data)) {
 80032e2:	4809      	ldr	r0, [pc, #36]	; (8003308 <sx12xx_lora_recv_async+0x74>)
 80032e4:	f7ff fe48 	bl	8002f78 <modem_release>
 80032e8:	b108      	cbz	r0, 80032ee <sx12xx_lora_recv_async+0x5a>
		return 0;
 80032ea:	2000      	movs	r0, #0
 80032ec:	e7f3      	b.n	80032d6 <sx12xx_lora_recv_async+0x42>
			return -EINVAL;
 80032ee:	f06f 0015 	mvn.w	r0, #21
 80032f2:	e7f0      	b.n	80032d6 <sx12xx_lora_recv_async+0x42>
      return -EINVAL;
 80032f4:	f06f 0015 	mvn.w	r0, #21
}
 80032f8:	4770      	bx	lr
		return -EBUSY;
 80032fa:	f06f 000f 	mvn.w	r0, #15
 80032fe:	e7ea      	b.n	80032d6 <sx12xx_lora_recv_async+0x42>
 8003300:	20000ac8 	.word	0x20000ac8
 8003304:	0800c134 	.word	0x0800c134
 8003308:	20000a84 	.word	0x20000a84

0800330c <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	460c      	mov	r4, r1
 8003312:	4b2b      	ldr	r3, [pc, #172]	; (80033c0 <sx12xx_lora_config+0xb4>)
 8003314:	2201      	movs	r2, #1
 8003316:	f3bf 8f5b 	dmb	ish
 800331a:	e853 1f00 	ldrex	r1, [r3]
 800331e:	2900      	cmp	r1, #0
 8003320:	d103      	bne.n	800332a <sx12xx_lora_config+0x1e>
 8003322:	e843 2000 	strex	r0, r2, [r3]
 8003326:	2800      	cmp	r0, #0
 8003328:	d1f7      	bne.n	800331a <sx12xx_lora_config+0xe>
 800332a:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 800332e:	d143      	bne.n	80033b8 <sx12xx_lora_config+0xac>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8003330:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <sx12xx_lora_config+0xb8>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	4798      	blx	r3

	if (config->tx) {
 8003338:	7b63      	ldrb	r3, [r4, #13]
 800333a:	b9eb      	cbnz	r3, 8003378 <sx12xx_lora_config+0x6c>
				  config->coding_rate, config->preamble_len,
				  config->fixed_len, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */

        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 800333c:	7ae2      	ldrb	r2, [r4, #11]
 800333e:	2a00      	cmp	r2, #0
 8003340:	d038      	beq.n	80033b4 <sx12xx_lora_config+0xa8>
 8003342:	7aa1      	ldrb	r1, [r4, #10]

		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 8003344:	4b1f      	ldr	r3, [pc, #124]	; (80033c4 <sx12xx_lora_config+0xb8>)
 8003346:	699d      	ldr	r5, [r3, #24]
 8003348:	2001      	movs	r0, #1
 800334a:	9009      	str	r0, [sp, #36]	; 0x24
 800334c:	2300      	movs	r3, #0
 800334e:	9308      	str	r3, [sp, #32]
 8003350:	9307      	str	r3, [sp, #28]
 8003352:	9306      	str	r3, [sp, #24]
 8003354:	9305      	str	r3, [sp, #20]
 8003356:	9104      	str	r1, [sp, #16]
 8003358:	9203      	str	r2, [sp, #12]
 800335a:	220a      	movs	r2, #10
 800335c:	9202      	str	r2, [sp, #8]
 800335e:	8922      	ldrh	r2, [r4, #8]
 8003360:	9201      	str	r2, [sp, #4]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	79a3      	ldrb	r3, [r4, #6]
 8003366:	7962      	ldrb	r2, [r4, #5]
 8003368:	7921      	ldrb	r1, [r4, #4]
 800336a:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, config->fixed_len, payload_len,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 800336c:	4816      	ldr	r0, [pc, #88]	; (80033c8 <sx12xx_lora_config+0xbc>)
 800336e:	f7ff fe03 	bl	8002f78 <modem_release>
	return 0;
 8003372:	2000      	movs	r0, #0
}
 8003374:	b00a      	add	sp, #40	; 0x28
 8003376:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 8003378:	4d14      	ldr	r5, [pc, #80]	; (80033cc <sx12xx_lora_config+0xc0>)
 800337a:	6820      	ldr	r0, [r4, #0]
 800337c:	6861      	ldr	r1, [r4, #4]
 800337e:	68a2      	ldr	r2, [r4, #8]
 8003380:	68e3      	ldr	r3, [r4, #12]
 8003382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <sx12xx_lora_config+0xb8>)
 8003386:	69dd      	ldr	r5, [r3, #28]
				  config->bandwidth, config->datarate,
 8003388:	7963      	ldrb	r3, [r4, #5]
				  config->coding_rate, config->preamble_len,
 800338a:	79a1      	ldrb	r1, [r4, #6]
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 800338c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003390:	9208      	str	r2, [sp, #32]
 8003392:	2200      	movs	r2, #0
 8003394:	9207      	str	r2, [sp, #28]
 8003396:	9206      	str	r2, [sp, #24]
 8003398:	9205      	str	r2, [sp, #20]
 800339a:	2001      	movs	r0, #1
 800339c:	9004      	str	r0, [sp, #16]
 800339e:	7ae6      	ldrb	r6, [r4, #11]
 80033a0:	9603      	str	r6, [sp, #12]
 80033a2:	8926      	ldrh	r6, [r4, #8]
 80033a4:	9602      	str	r6, [sp, #8]
 80033a6:	9101      	str	r1, [sp, #4]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	7923      	ldrb	r3, [r4, #4]
 80033ac:	f994 100c 	ldrsb.w	r1, [r4, #12]
 80033b0:	47a8      	blx	r5
 80033b2:	e7db      	b.n	800336c <sx12xx_lora_config+0x60>
        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 80033b4:	2100      	movs	r1, #0
 80033b6:	e7c5      	b.n	8003344 <sx12xx_lora_config+0x38>
		return -EBUSY;
 80033b8:	f06f 000f 	mvn.w	r0, #15
 80033bc:	e7da      	b.n	8003374 <sx12xx_lora_config+0x68>
 80033be:	bf00      	nop
 80033c0:	20000ac8 	.word	0x20000ac8
 80033c4:	0800c134 	.word	0x0800c134
 80033c8:	20000a84 	.word	0x20000a84
 80033cc:	20000ab8 	.word	0x20000ab8

080033d0 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 80033d0:	b530      	push	{r4, r5, lr}
 80033d2:	b08b      	sub	sp, #44	; 0x2c
 80033d4:	4608      	mov	r0, r1
 80033d6:	4611      	mov	r1, r2
 80033d8:	461d      	mov	r5, r3
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 80033da:	ab06      	add	r3, sp, #24
 80033dc:	9306      	str	r3, [sp, #24]
 80033de:	9307      	str	r3, [sp, #28]
 80033e0:	2400      	movs	r4, #0
 80033e2:	9408      	str	r4, [sp, #32]
 80033e4:	9409      	str	r4, [sp, #36]	; 0x24
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 80033e6:	9401      	str	r4, [sp, #4]
 80033e8:	9402      	str	r4, [sp, #8]
 80033ea:	9403      	str	r4, [sp, #12]
 80033ec:	9404      	str	r4, [sp, #16]
 80033ee:	9405      	str	r4, [sp, #20]
 80033f0:	f89d c011 	ldrb.w	ip, [sp, #17]
 80033f4:	2401      	movs	r4, #1
 80033f6:	f364 0c04 	bfi	ip, r4, #0, #5
 80033fa:	f88d c011 	strb.w	ip, [sp, #17]
 80033fe:	9305      	str	r3, [sp, #20]
 8003400:	4b21      	ldr	r3, [pc, #132]	; (8003488 <sx12xx_lora_test_cw+0xb8>)
 8003402:	f3bf 8f5b 	dmb	ish
 8003406:	e853 2f00 	ldrex	r2, [r3]
 800340a:	2a00      	cmp	r2, #0
 800340c:	d104      	bne.n	8003418 <sx12xx_lora_test_cw+0x48>
 800340e:	e843 4c00 	strex	ip, r4, [r3]
 8003412:	f1bc 0f00 	cmp.w	ip, #0
 8003416:	d1f6      	bne.n	8003406 <sx12xx_lora_test_cw+0x36>
 8003418:	f3bf 8f5b 	dmb	ish
        K_POLL_TYPE_SIGNAL,
        K_POLL_MODE_NOTIFY_ONLY,
        &done);
    int ret;
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 800341c:	d131      	bne.n	8003482 <sx12xx_lora_test_cw+0xb2>
		return -EBUSY;
	}

    /* Store signal */
    dev_data.operation_done = &done;
 800341e:	3b44      	subs	r3, #68	; 0x44
 8003420:	aa06      	add	r2, sp, #24
 8003422:	605a      	str	r2, [r3, #4]

    /* Act TX timeout event as successfully end of CW transmission */
    dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <sx12xx_lora_test_cw+0xbc>)
 8003426:	615a      	str	r2, [r3, #20]

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <sx12xx_lora_test_cw+0xc0>)
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	462a      	mov	r2, r5
 800342e:	4798      	blx	r3

    ret = k_poll(&evt, 1, K_MSEC(2000 * duration));
 8003430:	b12d      	cbz	r5, 800343e <sx12xx_lora_test_cw+0x6e>
 8003432:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003436:	fb02 f105 	mul.w	r1, r2, r5
 800343a:	2300      	movs	r3, #0
 800343c:	e001      	b.n	8003442 <sx12xx_lora_test_cw+0x72>
 800343e:	2100      	movs	r1, #0
 8003440:	460b      	mov	r3, r1
 8003442:	008a      	lsls	r2, r1, #2
 8003444:	1852      	adds	r2, r2, r1
 8003446:	eb43 0383 	adc.w	r3, r3, r3, lsl #2
 800344a:	1892      	adds	r2, r2, r2
 800344c:	415b      	adcs	r3, r3
 800344e:	2101      	movs	r1, #1
 8003450:	a801      	add	r0, sp, #4
 8003452:	f004 f83d 	bl	80074d0 <z_impl_k_poll>
    if (ret < 0) {
 8003456:	2800      	cmp	r0, #0
 8003458:	db02      	blt.n	8003460 <sx12xx_lora_test_cw+0x90>
            k_poll(&evt, 1, K_FOREVER);
        }
        /* Clean up TX timeout event callback */
        dev_data.events.TxTimeout = NULL;
    }
	return 0;
 800345a:	2000      	movs	r0, #0
}
 800345c:	b00b      	add	sp, #44	; 0x2c
 800345e:	bd30      	pop	{r4, r5, pc}
        if (!modem_release(&dev_data)) {
 8003460:	480c      	ldr	r0, [pc, #48]	; (8003494 <sx12xx_lora_test_cw+0xc4>)
 8003462:	f7ff fd89 	bl	8002f78 <modem_release>
 8003466:	b118      	cbz	r0, 8003470 <sx12xx_lora_test_cw+0xa0>
        dev_data.events.TxTimeout = NULL;
 8003468:	2000      	movs	r0, #0
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <sx12xx_lora_test_cw+0xc4>)
 800346c:	6158      	str	r0, [r3, #20]
 800346e:	e7f5      	b.n	800345c <sx12xx_lora_test_cw+0x8c>
 8003470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003478:	2101      	movs	r1, #1
 800347a:	a801      	add	r0, sp, #4
 800347c:	f004 f828 	bl	80074d0 <z_impl_k_poll>
 8003480:	e7f2      	b.n	8003468 <sx12xx_lora_test_cw+0x98>
		return -EBUSY;
 8003482:	f06f 000f 	mvn.w	r0, #15
 8003486:	e7e9      	b.n	800345c <sx12xx_lora_test_cw+0x8c>
 8003488:	20000ac8 	.word	0x20000ac8
 800348c:	08002fc9 	.word	0x08002fc9
 8003490:	0800c134 	.word	0x0800c134
 8003494:	20000a84 	.word	0x20000a84

08003498 <sx12xx_lora_time_on_air>:

int sx12xx_lora_time_on_air(const struct device *dev,
            const struct lora_modem_config *config,
            uint32_t data_len)
{
    if(config == NULL) {
 8003498:	b189      	cbz	r1, 80034be <sx12xx_lora_time_on_air+0x26>
{
 800349a:	b510      	push	{r4, lr}
 800349c:	b084      	sub	sp, #16
        return -EINVAL;
    }
    return (int) Radio.TimeOnAir(MODEM_LORA, config->bandwidth,
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <sx12xx_lora_time_on_air+0x2c>)
 80034a0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80034a2:	2001      	movs	r0, #1
 80034a4:	9003      	str	r0, [sp, #12]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	9202      	str	r2, [sp, #8]
 80034aa:	7acb      	ldrb	r3, [r1, #11]
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	890b      	ldrh	r3, [r1, #8]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	798b      	ldrb	r3, [r1, #6]
 80034b4:	794a      	ldrb	r2, [r1, #5]
 80034b6:	7909      	ldrb	r1, [r1, #4]
 80034b8:	47a0      	blx	r4
                                 config->datarate, config->coding_rate,
                                 config->preamble_len,
                                 config->fixed_len, (uint8_t) data_len, true);
}
 80034ba:	b004      	add	sp, #16
 80034bc:	bd10      	pop	{r4, pc}
        return -EINVAL;
 80034be:	f06f 0015 	mvn.w	r0, #21
}
 80034c2:	4770      	bx	lr
 80034c4:	0800c134 	.word	0x0800c134

080034c8 <sx12xx_lora_is_channel_free>:
int sx12xx_lora_is_channel_free(const struct device *dev,
            const struct lora_modem_config *config,
            int16_t rssi_theshold, uint32_t timeout)
{
    bool is_free;
    if(config == NULL) {
 80034c8:	b311      	cbz	r1, 8003510 <sx12xx_lora_is_channel_free+0x48>
{
 80034ca:	b510      	push	{r4, lr}
 80034cc:	4608      	mov	r0, r1
 80034ce:	4915      	ldr	r1, [pc, #84]	; (8003524 <sx12xx_lora_is_channel_free+0x5c>)
 80034d0:	2401      	movs	r4, #1
 80034d2:	f3bf 8f5b 	dmb	ish
 80034d6:	e851 cf00 	ldrex	ip, [r1]
 80034da:	f1bc 0f00 	cmp.w	ip, #0
 80034de:	d104      	bne.n	80034ea <sx12xx_lora_is_channel_free+0x22>
 80034e0:	e841 4e00 	strex	lr, r4, [r1]
 80034e4:	f1be 0f00 	cmp.w	lr, #0
 80034e8:	d1f5      	bne.n	80034d6 <sx12xx_lora_is_channel_free+0xe>
 80034ea:	f3bf 8f5b 	dmb	ish
        return -EINVAL;
    }
    if (!modem_acquire(&dev_data)) {
 80034ee:	d112      	bne.n	8003516 <sx12xx_lora_is_channel_free+0x4e>
        125000, /* BW_125_KHZ = 0 */
        250000, /* BW_250_KHZ */
        500000, /* BW_500_KHZ */
    };

    is_free = Radio.IsChannelFree(config->frequency, rx_bw[config->bandwidth],
 80034f0:	490d      	ldr	r1, [pc, #52]	; (8003528 <sx12xx_lora_is_channel_free+0x60>)
 80034f2:	690c      	ldr	r4, [r1, #16]
 80034f4:	f890 c004 	ldrb.w	ip, [r0, #4]
 80034f8:	490c      	ldr	r1, [pc, #48]	; (800352c <sx12xx_lora_is_channel_free+0x64>)
 80034fa:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80034fe:	6800      	ldr	r0, [r0, #0]
 8003500:	47a0      	blx	r4
 8003502:	4604      	mov	r4, r0
                            rssi_theshold, timeout);
    if (!modem_release(&dev_data)) {
 8003504:	480a      	ldr	r0, [pc, #40]	; (8003530 <sx12xx_lora_is_channel_free+0x68>)
 8003506:	f7ff fd37 	bl	8002f78 <modem_release>
 800350a:	b138      	cbz	r0, 800351c <sx12xx_lora_is_channel_free+0x54>
        /* Not receiving or already being stopped */
        return -EINVAL;
    }
    return is_free ? 1 : 0;
 800350c:	4620      	mov	r0, r4
}
 800350e:	bd10      	pop	{r4, pc}
        return -EINVAL;
 8003510:	f06f 0015 	mvn.w	r0, #21
}
 8003514:	4770      	bx	lr
        return -EBUSY;
 8003516:	f06f 000f 	mvn.w	r0, #15
 800351a:	e7f8      	b.n	800350e <sx12xx_lora_is_channel_free+0x46>
        return -EINVAL;
 800351c:	f06f 0015 	mvn.w	r0, #21
 8003520:	e7f5      	b.n	800350e <sx12xx_lora_is_channel_free+0x46>
 8003522:	bf00      	nop
 8003524:	20000ac8 	.word	0x20000ac8
 8003528:	0800c134 	.word	0x0800c134
 800352c:	0800c120 	.word	0x0800c120
 8003530:	20000a84 	.word	0x20000a84

08003534 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 8003534:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <sx12xx_init+0x40>)
 8003538:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800353c:	2400      	movs	r4, #0
 800353e:	f3bf 8f5b 	dmb	ish
 8003542:	e852 1f00 	ldrex	r1, [r2]
 8003546:	e842 4500 	strex	r5, r4, [r2]
 800354a:	2d00      	cmp	r5, #0
 800354c:	d1f9      	bne.n	8003542 <sx12xx_init+0xe>
 800354e:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
 8003552:	6018      	str	r0, [r3, #0]
	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8003554:	4a08      	ldr	r2, [pc, #32]	; (8003578 <sx12xx_init+0x44>)
 8003556:	611a      	str	r2, [r3, #16]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8003558:	4a08      	ldr	r2, [pc, #32]	; (800357c <sx12xx_init+0x48>)
 800355a:	619a      	str	r2, [r3, #24]
  dev_data.events.RxError = sx12xx_ev_rx_error_timeout;
 800355c:	4a08      	ldr	r2, [pc, #32]	; (8003580 <sx12xx_init+0x4c>)
 800355e:	621a      	str	r2, [r3, #32]
  dev_data.events.RxTimeout = sx12xx_ev_rx_error_timeout;
 8003560:	61da      	str	r2, [r3, #28]
	Radio.Init(&dev_data.events);
 8003562:	4d08      	ldr	r5, [pc, #32]	; (8003584 <sx12xx_init+0x50>)
 8003564:	682a      	ldr	r2, [r5, #0]
 8003566:	f103 0010 	add.w	r0, r3, #16
 800356a:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 800356c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800356e:	4798      	blx	r3

	return 0;
}
 8003570:	4620      	mov	r0, r4
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	20000a84 	.word	0x20000a84
 8003578:	08003009 	.word	0x08003009
 800357c:	08003025 	.word	0x08003025
 8003580:	08002fe9 	.word	0x08002fe9
 8003584:	0800c134 	.word	0x0800c134

08003588 <sx127x_dio_work_handle>:

	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
 8003588:	b508      	push	{r3, lr}
	int dio = work - dev_data.dio_work;
 800358a:	4b04      	ldr	r3, [pc, #16]	; (800359c <sx127x_dio_work_handle+0x14>)
 800358c:	1ac0      	subs	r0, r0, r3
 800358e:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <sx127x_dio_work_handle+0x18>)
 8003592:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003596:	2000      	movs	r0, #0
 8003598:	4798      	blx	r3
}
 800359a:	bd08      	pop	{r3, pc}
 800359c:	20000b30 	.word	0x20000b30
 80035a0:	200002a8 	.word	0x200002a8

080035a4 <sx127x_transceive>:
	}

}

static int sx127x_transceive(uint8_t reg, bool write, void *data, size_t length)
{
 80035a4:	b510      	push	{r4, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 80035ac:	f10d 0007 	add.w	r0, sp, #7
 80035b0:	9006      	str	r0, [sp, #24]
 80035b2:	2001      	movs	r0, #1
 80035b4:	9007      	str	r0, [sp, #28]
 80035b6:	9208      	str	r2, [sp, #32]
 80035b8:	9309      	str	r3, [sp, #36]	; 0x24
			.buf = data,
			.len = length
		}
	};

	struct spi_buf_set tx = {
 80035ba:	ab06      	add	r3, sp, #24
 80035bc:	9304      	str	r3, [sp, #16]
 80035be:	2302      	movs	r3, #2
 80035c0:	9305      	str	r3, [sp, #20]
		.buffers = buf,
		.count = ARRAY_SIZE(buf),
	};

	if (!write) {
 80035c2:	b149      	cbz	r1, 80035d8 <sx127x_transceive+0x34>
		};

		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
	}

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 80035c4:	490b      	ldr	r1, [pc, #44]	; (80035f4 <sx127x_transceive+0x50>)
 80035c6:	6848      	ldr	r0, [r1, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
 80035c8:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80035ca:	681c      	ldr	r4, [r3, #0]
 80035cc:	2300      	movs	r3, #0
 80035ce:	aa04      	add	r2, sp, #16
 80035d0:	3108      	adds	r1, #8
 80035d2:	47a0      	blx	r4
}
 80035d4:	b00a      	add	sp, #40	; 0x28
 80035d6:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
 80035d8:	ab06      	add	r3, sp, #24
 80035da:	9302      	str	r3, [sp, #8]
 80035dc:	2302      	movs	r3, #2
 80035de:	9303      	str	r3, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 80035e0:	4904      	ldr	r1, [pc, #16]	; (80035f4 <sx127x_transceive+0x50>)
 80035e2:	6848      	ldr	r0, [r1, #4]
	const struct spi_driver_api *api =
 80035e4:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80035e6:	681c      	ldr	r4, [r3, #0]
 80035e8:	ab02      	add	r3, sp, #8
 80035ea:	aa04      	add	r2, sp, #16
 80035ec:	3108      	adds	r1, #8
 80035ee:	47a0      	blx	r4
 80035f0:	e7f0      	b.n	80035d4 <sx127x_transceive+0x30>
 80035f2:	bf00      	nop
 80035f4:	20000b0c 	.word	0x20000b0c

080035f8 <sx127x_irq_callback>:
{
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	4605      	mov	r5, r0
 80035fc:	fa92 f6a2 	rbit	r6, r2
 8003600:	fab6 f686 	clz	r6, r6
 8003604:	b90a      	cbnz	r2, 800360a <sx127x_irq_callback+0x12>
 8003606:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 800360a:	2400      	movs	r4, #0
 800360c:	e000      	b.n	8003610 <sx127x_irq_callback+0x18>
 800360e:	3401      	adds	r4, #1
 8003610:	2c03      	cmp	r4, #3
 8003612:	d813      	bhi.n	800363c <sx127x_irq_callback+0x44>
		if (dev == dev_data.dio_dev[i] &&
 8003614:	1d23      	adds	r3, r4, #4
 8003616:	4a0a      	ldr	r2, [pc, #40]	; (8003640 <sx127x_irq_callback+0x48>)
 8003618:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	42ab      	cmp	r3, r5
 8003620:	d1f5      	bne.n	800360e <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <sx127x_irq_callback+0x4c>)
 8003624:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003628:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
 800362a:	42b3      	cmp	r3, r6
 800362c:	d1ef      	bne.n	800360e <sx127x_irq_callback+0x16>
			k_work_submit(&dev_data.dio_work[i]);
 800362e:	1ca0      	adds	r0, r4, #2
 8003630:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8003634:	3004      	adds	r0, #4
 8003636:	f002 ff27 	bl	8006488 <k_work_submit>
 800363a:	e7e8      	b.n	800360e <sx127x_irq_callback+0x16>
}
 800363c:	bd70      	pop	{r4, r5, r6, pc}
 800363e:	bf00      	nop
 8003640:	20000b0c 	.word	0x20000b0c
 8003644:	0800c1a0 	.word	0x0800c1a0

08003648 <SX1276Reset>:
{
 8003648:	b508      	push	{r3, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 800364a:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <SX1276Reset+0x6c>)
 800364c:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 800364e:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003656:	d11d      	bne.n	8003694 <SX1276Reset+0x4c>
 8003658:	2301      	movs	r3, #1
	if (value != 0)	{
 800365a:	b1eb      	cbz	r3, 8003698 <SX1276Reset+0x50>
	const struct gpio_driver_api *api =
 800365c:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003664:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 8003666:	200a      	movs	r0, #10
 8003668:	2100      	movs	r1, #0
 800366a:	f003 faa5 	bl	8006bb8 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <SX1276Reset+0x6c>)
 8003670:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8003672:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f413 7f80 	tst.w	r3, #256	; 0x100
 800367a:	d113      	bne.n	80036a4 <SX1276Reset+0x5c>
 800367c:	2300      	movs	r3, #0
	if (value != 0)	{
 800367e:	b19b      	cbz	r3, 80036a8 <SX1276Reset+0x60>
	const struct gpio_driver_api *api =
 8003680:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003688:	4798      	blx	r3
 800368a:	203c      	movs	r0, #60	; 0x3c
 800368c:	2100      	movs	r1, #0
 800368e:	f003 fa93 	bl	8006bb8 <z_impl_k_sleep>
}
 8003692:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 8003694:	2300      	movs	r3, #0
 8003696:	e7e0      	b.n	800365a <SX1276Reset+0x12>
	const struct gpio_driver_api *api =
 8003698:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036a0:	4798      	blx	r3
 80036a2:	e7e0      	b.n	8003666 <SX1276Reset+0x1e>
		value = (value != 0) ? 0 : 1;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e7ea      	b.n	800367e <SX1276Reset+0x36>
	const struct gpio_driver_api *api =
 80036a8:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036b0:	4798      	blx	r3
 80036b2:	e7ea      	b.n	800368a <SX1276Reset+0x42>
 80036b4:	20000b0c 	.word	0x20000b0c

080036b8 <SX1276IoIrqInit>:
{
 80036b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ba:	4605      	mov	r5, r0
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 80036bc:	2400      	movs	r4, #0
 80036be:	e03e      	b.n	800373e <SX1276IoIrqInit+0x86>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80036c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80036c4:	f013 0f01 	tst.w	r3, #1
 80036c8:	d06e      	beq.n	80037a8 <SX1276IoIrqInit+0xf0>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80036ca:	2301      	movs	r3, #1
 80036cc:	fa03 fc01 	lsl.w	ip, r3, r1
 80036d0:	6833      	ldr	r3, [r6, #0]
 80036d2:	ea43 030c 	orr.w	r3, r3, ip
 80036d6:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4798      	blx	r3
		gpio_init_callback(&callbacks[i],
 80036dc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80036e0:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <SX1276IoIrqInit+0x110>)
 80036e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				   BIT(sx127x_dios[i].pin));
 80036e6:	4b39      	ldr	r3, [pc, #228]	; (80037cc <SX1276IoIrqInit+0x114>)
 80036e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80036ec:	791e      	ldrb	r6, [r3, #4]
 80036ee:	2301      	movs	r3, #1
 80036f0:	40b3      	lsls	r3, r6
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 80036f2:	4a37      	ldr	r2, [pc, #220]	; (80037d0 <SX1276IoIrqInit+0x118>)
 80036f4:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 80036f6:	608b      	str	r3, [r1, #8]
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 80036f8:	1d23      	adds	r3, r4, #4
 80036fa:	4a36      	ldr	r2, [pc, #216]	; (80037d4 <SX1276IoIrqInit+0x11c>)
 80036fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003700:	6858      	ldr	r0, [r3, #4]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 8003702:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d056      	beq.n	80037b8 <SX1276IoIrqInit+0x100>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 800370a:	2201      	movs	r2, #1
 800370c:	4798      	blx	r3
 800370e:	2800      	cmp	r0, #0
 8003710:	db58      	blt.n	80037c4 <SX1276IoIrqInit+0x10c>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8003712:	1d23      	adds	r3, r4, #4
 8003714:	4a2f      	ldr	r2, [pc, #188]	; (80037d4 <SX1276IoIrqInit+0x11c>)
 8003716:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800371a:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 800371c:	6881      	ldr	r1, [r0, #8]
	const struct gpio_driver_data *const data =
 800371e:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	2301      	movs	r3, #1
 8003724:	40b3      	lsls	r3, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8003726:	421a      	tst	r2, r3
 8003728:	d149      	bne.n	80037be <SX1276IoIrqInit+0x106>
 800372a:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 800372e:	698f      	ldr	r7, [r1, #24]
 8003730:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8003734:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8003738:	4631      	mov	r1, r6
 800373a:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 800373c:	3401      	adds	r4, #1
 800373e:	2c03      	cmp	r4, #3
 8003740:	d840      	bhi.n	80037c4 <SX1276IoIrqInit+0x10c>
		if (!irqHandlers[i]) {
 8003742:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f8      	beq.n	800373c <SX1276IoIrqInit+0x84>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 800374a:	4b20      	ldr	r3, [pc, #128]	; (80037cc <SX1276IoIrqInit+0x114>)
 800374c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8003750:	f002 fa7c 	bl	8005c4c <z_impl_device_get_binding>
 8003754:	1d23      	adds	r3, r4, #4
 8003756:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <SX1276IoIrqInit+0x11c>)
 8003758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800375c:	6058      	str	r0, [r3, #4]
		if (dev_data.dio_dev[i] == NULL) {
 800375e:	b388      	cbz	r0, 80037c4 <SX1276IoIrqInit+0x10c>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8003760:	4616      	mov	r6, r2
 8003762:	1ca0      	adds	r0, r4, #2
 8003764:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8003768:	491b      	ldr	r1, [pc, #108]	; (80037d8 <SX1276IoIrqInit+0x120>)
 800376a:	3004      	adds	r0, #4
 800376c:	f007 f9b9 	bl	800aae2 <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8003770:	1d23      	adds	r3, r4, #4
 8003772:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8003776:	6870      	ldr	r0, [r6, #4]
 8003778:	4b14      	ldr	r3, [pc, #80]	; (80037cc <SX1276IoIrqInit+0x114>)
 800377a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800377e:	7919      	ldrb	r1, [r3, #4]
				   | sx127x_dios[i].flags);
 8003780:	795b      	ldrb	r3, [r3, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8003782:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 800378a:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 800378c:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800378e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003792:	2a00      	cmp	r2, #0
 8003794:	d094      	beq.n	80036c0 <SX1276IoIrqInit+0x8>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8003796:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800379a:	d091      	beq.n	80036c0 <SX1276IoIrqInit+0x8>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800379c:	f013 0f01 	tst.w	r3, #1
 80037a0:	d08e      	beq.n	80036c0 <SX1276IoIrqInit+0x8>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80037a2:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 80037a6:	e78b      	b.n	80036c0 <SX1276IoIrqInit+0x8>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80037a8:	2301      	movs	r3, #1
 80037aa:	fa03 fc01 	lsl.w	ip, r3, r1
 80037ae:	6833      	ldr	r3, [r6, #0]
 80037b0:	ea23 030c 	bic.w	r3, r3, ip
 80037b4:	6033      	str	r3, [r6, #0]
 80037b6:	e78f      	b.n	80036d8 <SX1276IoIrqInit+0x20>
		return -ENOTSUP;
 80037b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80037bc:	e7a7      	b.n	800370e <SX1276IoIrqInit+0x56>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 80037be:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 80037c2:	e7b4      	b.n	800372e <SX1276IoIrqInit+0x76>
}
 80037c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000adc 	.word	0x20000adc
 80037cc:	0800c1a0 	.word	0x0800c1a0
 80037d0:	080035f9 	.word	0x080035f9
 80037d4:	20000b0c 	.word	0x20000b0c
 80037d8:	08003589 	.word	0x08003589

080037dc <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 80037dc:	b530      	push	{r4, r5, lr}
 80037de:	b083      	sub	sp, #12
 80037e0:	4604      	mov	r4, r0
 80037e2:	4833      	ldr	r0, [pc, #204]	; (80038b0 <sx127x_lora_init+0xd4>)
 80037e4:	f002 fa32 	bl	8005c4c <z_impl_device_get_binding>
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 80037e8:	4b32      	ldr	r3, [pc, #200]	; (80038b4 <sx127x_lora_init+0xd8>)
 80037ea:	6058      	str	r0, [r3, #4]
	if (!dev_data.spi) {
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d053      	beq.n	8003898 <sx127x_lora_init+0xbc>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 80037f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037f4:	819a      	strh	r2, [r3, #12]
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
 80037f6:	4a30      	ldr	r2, [pc, #192]	; (80038b8 <sx127x_lora_init+0xdc>)
 80037f8:	609a      	str	r2, [r3, #8]
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	81da      	strh	r2, [r3, #14]
 80037fe:	482f      	ldr	r0, [pc, #188]	; (80038bc <sx127x_lora_init+0xe0>)
 8003800:	f002 fa24 	bl	8005c4c <z_impl_device_get_binding>

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8003804:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <sx127x_lora_init+0xe4>)
 8003806:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
 8003808:	2800      	cmp	r0, #0
 800380a:	d048      	beq.n	800389e <sx127x_lora_init+0xc2>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 800380c:	220c      	movs	r2, #12
 800380e:	711a      	strb	r2, [r3, #4]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
 8003810:	2201      	movs	r2, #1
 8003812:	715a      	strb	r2, [r3, #5]
	spi_cs.delay = 0U;
 8003814:	2200      	movs	r2, #0
 8003816:	609a      	str	r2, [r3, #8]

	dev_data.spi_cfg.cs = &spi_cs;
 8003818:	4826      	ldr	r0, [pc, #152]	; (80038b4 <sx127x_lora_init+0xd8>)
 800381a:	6103      	str	r3, [r0, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 800381c:	f641 2307 	movw	r3, #6663	; 0x1a07
 8003820:	2208      	movs	r2, #8
 8003822:	4928      	ldr	r1, [pc, #160]	; (80038c4 <sx127x_lora_init+0xe8>)
 8003824:	f006 f9e3 	bl	8009bee <__sx12xx_configure_pin>
	if (ret) {
 8003828:	4605      	mov	r5, r0
 800382a:	b110      	cbz	r0, 8003832 <sx127x_lora_init+0x56>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 800382c:	4628      	mov	r0, r5
 800382e:	b003      	add	sp, #12
 8003830:	bd30      	pop	{r4, r5, pc}
 8003832:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003836:	2100      	movs	r1, #0
 8003838:	f003 f9be 	bl	8006bb8 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <sx127x_lora_init+0xd8>)
 800383e:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8003840:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003848:	d11e      	bne.n	8003888 <sx127x_lora_init+0xac>
 800384a:	462b      	mov	r3, r5
	if (value != 0)	{
 800384c:	b1f3      	cbz	r3, 800388c <sx127x_lora_init+0xb0>
	const struct gpio_driver_api *api =
 800384e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003856:	4798      	blx	r3
 8003858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800385c:	2100      	movs	r1, #0
 800385e:	f003 f9ab 	bl	8006bb8 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
 8003862:	2201      	movs	r2, #1
 8003864:	f10d 0107 	add.w	r1, sp, #7
 8003868:	2042      	movs	r0, #66	; 0x42
 800386a:	f006 fa01 	bl	8009c70 <sx127x_read>
	if (ret < 0) {
 800386e:	2800      	cmp	r0, #0
 8003870:	db18      	blt.n	80038a4 <sx127x_lora_init+0xc8>
	ret = sx127x_antenna_configure();
 8003872:	f006 f9f6 	bl	8009c62 <sx127x_antenna_configure>
	if (ret < 0) {
 8003876:	2800      	cmp	r0, #0
 8003878:	db17      	blt.n	80038aa <sx127x_lora_init+0xce>
	ret = sx12xx_init(dev);
 800387a:	4620      	mov	r0, r4
 800387c:	f7ff fe5a 	bl	8003534 <sx12xx_init>
	if (ret < 0) {
 8003880:	2800      	cmp	r0, #0
 8003882:	dad3      	bge.n	800382c <sx127x_lora_init+0x50>
		return ret;
 8003884:	4605      	mov	r5, r0
 8003886:	e7d1      	b.n	800382c <sx127x_lora_init+0x50>
		value = (value != 0) ? 0 : 1;
 8003888:	2301      	movs	r3, #1
 800388a:	e7df      	b.n	800384c <sx127x_lora_init+0x70>
	const struct gpio_driver_api *api =
 800388c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003894:	4798      	blx	r3
 8003896:	e7df      	b.n	8003858 <sx127x_lora_init+0x7c>
		return -EINVAL;
 8003898:	f06f 0515 	mvn.w	r5, #21
 800389c:	e7c6      	b.n	800382c <sx127x_lora_init+0x50>
		return -EIO;
 800389e:	f06f 0504 	mvn.w	r5, #4
 80038a2:	e7c3      	b.n	800382c <sx127x_lora_init+0x50>
		return -EIO;
 80038a4:	f06f 0504 	mvn.w	r5, #4
 80038a8:	e7c0      	b.n	800382c <sx127x_lora_init+0x50>
		return -EIO;
 80038aa:	f06f 0504 	mvn.w	r5, #4
 80038ae:	e7bd      	b.n	800382c <sx127x_lora_init+0x50>
 80038b0:	0800c0cc 	.word	0x0800c0cc
 80038b4:	20000b0c 	.word	0x20000b0c
 80038b8:	0007a120 	.word	0x0007a120
 80038bc:	0800c028 	.word	0x0800c028
 80038c0:	20000b70 	.word	0x20000b70
 80038c4:	0800c020 	.word	0x0800c020

080038c8 <SX1276GetDio1PinState>:
{
 80038c8:	b510      	push	{r4, lr}
 80038ca:	b082      	sub	sp, #8
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <SX1276GetDio1PinState+0x34>)
 80038ce:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
 80038d0:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
 80038d2:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	a901      	add	r1, sp, #4
 80038d8:	4798      	blx	r3
	if (ret == 0) {
 80038da:	4603      	mov	r3, r0
 80038dc:	b918      	cbnz	r0, 80038e6 <SX1276GetDio1PinState+0x1e>
		*value ^= data->invert;
 80038de:	6821      	ldr	r1, [r4, #0]
 80038e0:	9a01      	ldr	r2, [sp, #4]
 80038e2:	404a      	eors	r2, r1
 80038e4:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 80038e6:	b913      	cbnz	r3, 80038ee <SX1276GetDio1PinState+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 80038e8:	9b01      	ldr	r3, [sp, #4]
 80038ea:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	dc02      	bgt.n	80038f8 <SX1276GetDio1PinState+0x30>
	return 0U;
 80038f2:	2000      	movs	r0, #0
}
 80038f4:	b002      	add	sp, #8
 80038f6:	bd10      	pop	{r4, pc}
		return 1U;
 80038f8:	2001      	movs	r0, #1
 80038fa:	e7fb      	b.n	80038f4 <SX1276GetDio1PinState+0x2c>
 80038fc:	20000b0c 	.word	0x20000b0c

08003900 <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8003900:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <TimerInsertTimer+0x38>)
 8003902:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 8003904:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 8003906:	6951      	ldr	r1, [r2, #20]
 8003908:	b191      	cbz	r1, 8003930 <TimerInsertTimer+0x30>
{
 800390a:	b410      	push	{r4}
    {
        if( obj->Timestamp > next->Timestamp )
 800390c:	6819      	ldr	r1, [r3, #0]
 800390e:	6804      	ldr	r4, [r0, #0]
 8003910:	428c      	cmp	r4, r1
 8003912:	d908      	bls.n	8003926 <TimerInsertTimer+0x26>
        {
            cur = next;
 8003914:	461a      	mov	r2, r3
            next = next->Next;
 8003916:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 8003918:	6951      	ldr	r1, [r2, #20]
 800391a:	2900      	cmp	r1, #0
 800391c:	d1f6      	bne.n	800390c <TimerInsertTimer+0xc>
            cur->Next = obj;
            obj->Next = next;
            return;
        }
    }
    cur->Next = obj;
 800391e:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 8003920:	2300      	movs	r3, #0
 8003922:	6143      	str	r3, [r0, #20]
 8003924:	e001      	b.n	800392a <TimerInsertTimer+0x2a>
            cur->Next = obj;
 8003926:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 8003928:	6143      	str	r3, [r0, #20]
}
 800392a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800392e:	4770      	bx	lr
    cur->Next = obj;
 8003930:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 8003932:	2300      	movs	r3, #0
 8003934:	6143      	str	r3, [r0, #20]
 8003936:	4770      	bx	lr
 8003938:	20000b7c 	.word	0x20000b7c

0800393c <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <TimerExists+0x18>)
 800393e:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 8003940:	e000      	b.n	8003944 <TimerExists+0x8>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 8003942:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 8003944:	b11b      	cbz	r3, 800394e <TimerExists+0x12>
        if( cur == obj )
 8003946:	4283      	cmp	r3, r0
 8003948:	d1fb      	bne.n	8003942 <TimerExists+0x6>
            return true;
 800394a:	2001      	movs	r0, #1
    }
    return false;
}
 800394c:	4770      	bx	lr
    return false;
 800394e:	2000      	movs	r0, #0
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000b7c 	.word	0x20000b7c

08003958 <TimerInsertNewHeadTimer>:
{
 8003958:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <TimerInsertNewHeadTimer+0x18>)
 800395c:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 800395e:	b10b      	cbz	r3, 8003964 <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 8003960:	2200      	movs	r2, #0
 8003962:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 8003964:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 8003966:	4b02      	ldr	r3, [pc, #8]	; (8003970 <TimerInsertNewHeadTimer+0x18>)
 8003968:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 800396a:	f006 f9ee 	bl	8009d4a <TimerSetTimeout>
}
 800396e:	bd08      	pop	{r3, pc}
 8003970:	20000b7c 	.word	0x20000b7c

08003974 <TimerStart>:
{
 8003974:	b510      	push	{r4, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 800397a:	a801      	add	r0, sp, #4
 800397c:	f006 f927 	bl	8009bce <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8003980:	b1f4      	cbz	r4, 80039c0 <TimerStart+0x4c>
 8003982:	4620      	mov	r0, r4
 8003984:	f7ff ffda 	bl	800393c <TimerExists>
 8003988:	b9d0      	cbnz	r0, 80039c0 <TimerStart+0x4c>
    obj->Timestamp = obj->ReloadValue;
 800398a:	6863      	ldr	r3, [r4, #4]
 800398c:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 800398e:	2301      	movs	r3, #1
 8003990:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 8003992:	2300      	movs	r3, #0
 8003994:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <TimerStart+0x68>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	b1ab      	cbz	r3, 80039c8 <TimerStart+0x54>
        elapsedTime = RtcGetTimerElapsedTime( );
 800399c:	f7ff faae 	bl	8002efc <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	4418      	add	r0, r3
 80039a4:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 80039a6:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <TimerStart+0x68>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4298      	cmp	r0, r3
 80039ae:	d211      	bcs.n	80039d4 <TimerStart+0x60>
            TimerInsertNewHeadTimer( obj );
 80039b0:	4620      	mov	r0, r4
 80039b2:	f7ff ffd1 	bl	8003958 <TimerInsertNewHeadTimer>
    CRITICAL_SECTION_END( );
 80039b6:	a801      	add	r0, sp, #4
 80039b8:	f006 f913 	bl	8009be2 <BoardCriticalSectionEnd>
}
 80039bc:	b002      	add	sp, #8
 80039be:	bd10      	pop	{r4, pc}
        CRITICAL_SECTION_END( );
 80039c0:	a801      	add	r0, sp, #4
 80039c2:	f006 f90e 	bl	8009be2 <BoardCriticalSectionEnd>
        return;
 80039c6:	e7f9      	b.n	80039bc <TimerStart+0x48>
        RtcSetTimerContext( );
 80039c8:	f7ff fac4 	bl	8002f54 <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 80039cc:	4620      	mov	r0, r4
 80039ce:	f7ff ffc3 	bl	8003958 <TimerInsertNewHeadTimer>
 80039d2:	e7f0      	b.n	80039b6 <TimerStart+0x42>
            TimerInsertTimer( obj );
 80039d4:	4620      	mov	r0, r4
 80039d6:	f7ff ff93 	bl	8003900 <TimerInsertTimer>
 80039da:	e7ec      	b.n	80039b6 <TimerStart+0x42>
 80039dc:	20000b7c 	.word	0x20000b7c

080039e0 <TimerIrqHandler>:
{
 80039e0:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 80039e2:	f7ff fac3 	bl	8002f6c <RtcGetTimerContext>
 80039e6:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 80039e8:	f7ff fab4 	bl	8002f54 <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 80039ec:	eba0 0c05 	sub.w	ip, r0, r5
    if( TimerListHead != NULL )
 80039f0:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <TimerIrqHandler+0x84>)
 80039f2:	681e      	ldr	r6, [r3, #0]
 80039f4:	b16e      	cbz	r6, 8003a12 <TimerIrqHandler+0x32>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 80039f6:	4632      	mov	r2, r6
 80039f8:	e002      	b.n	8003a00 <TimerIrqHandler+0x20>
                next->Timestamp = 0;
 80039fa:	2100      	movs	r1, #0
 80039fc:	6019      	str	r1, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 80039fe:	6952      	ldr	r2, [r2, #20]
 8003a00:	6953      	ldr	r3, [r2, #20]
 8003a02:	b133      	cbz	r3, 8003a12 <TimerIrqHandler+0x32>
            if( next->Timestamp > deltaContext )
 8003a04:	6819      	ldr	r1, [r3, #0]
 8003a06:	4561      	cmp	r1, ip
 8003a08:	d9f7      	bls.n	80039fa <TimerIrqHandler+0x1a>
                next->Timestamp -= deltaContext;
 8003a0a:	1a2c      	subs	r4, r5, r0
 8003a0c:	4421      	add	r1, r4
 8003a0e:	6019      	str	r1, [r3, #0]
 8003a10:	e7f5      	b.n	80039fe <TimerIrqHandler+0x1e>
    if ( TimerListHead != NULL )
 8003a12:	b146      	cbz	r6, 8003a26 <TimerIrqHandler+0x46>
        TimerListHead = TimerListHead->Next;
 8003a14:	6972      	ldr	r2, [r6, #20]
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <TimerIrqHandler+0x84>)
 8003a18:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	7233      	strb	r3, [r6, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8003a1e:	68f3      	ldr	r3, [r6, #12]
 8003a20:	b1a3      	cbz	r3, 8003a4c <TimerIrqHandler+0x6c>
 8003a22:	6930      	ldr	r0, [r6, #16]
 8003a24:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8003a26:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <TimerIrqHandler+0x84>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	b18b      	cbz	r3, 8003a50 <TimerIrqHandler+0x70>
 8003a2c:	681c      	ldr	r4, [r3, #0]
 8003a2e:	f7ff fa65 	bl	8002efc <RtcGetTimerElapsedTime>
 8003a32:	4284      	cmp	r4, r0
 8003a34:	d20c      	bcs.n	8003a50 <TimerIrqHandler+0x70>
        cur = TimerListHead;
 8003a36:	4a0b      	ldr	r2, [pc, #44]	; (8003a64 <TimerIrqHandler+0x84>)
 8003a38:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 8003a3a:	6959      	ldr	r1, [r3, #20]
 8003a3c:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 8003a3e:	2200      	movs	r2, #0
 8003a40:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	b11a      	cbz	r2, 8003a4e <TimerIrqHandler+0x6e>
 8003a46:	6918      	ldr	r0, [r3, #16]
 8003a48:	4790      	blx	r2
 8003a4a:	e7ec      	b.n	8003a26 <TimerIrqHandler+0x46>
        ExecuteCallBack( cur->Callback, cur->Context );
 8003a4c:	e7fe      	b.n	8003a4c <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 8003a4e:	e7fe      	b.n	8003a4e <TimerIrqHandler+0x6e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8003a50:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <TimerIrqHandler+0x84>)
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	b108      	cbz	r0, 8003a5a <TimerIrqHandler+0x7a>
 8003a56:	7a43      	ldrb	r3, [r0, #9]
 8003a58:	b103      	cbz	r3, 8003a5c <TimerIrqHandler+0x7c>
}
 8003a5a:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 8003a5c:	f006 f975 	bl	8009d4a <TimerSetTimeout>
}
 8003a60:	e7fb      	b.n	8003a5a <TimerIrqHandler+0x7a>
 8003a62:	bf00      	nop
 8003a64:	20000b7c 	.word	0x20000b7c

08003a68 <TimerStop>:
{
 8003a68:	b510      	push	{r4, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8003a6e:	a801      	add	r0, sp, #4
 8003a70:	f006 f8ad 	bl	8009bce <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <TimerStop+0x7c>)
 8003a76:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8003a78:	b15a      	cbz	r2, 8003a92 <TimerStop+0x2a>
 8003a7a:	b154      	cbz	r4, 8003a92 <TimerStop+0x2a>
    obj->IsStarted = false;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	7223      	strb	r3, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8003a80:	42a2      	cmp	r2, r4
 8003a82:	d00a      	beq.n	8003a9a <TimerStop+0x32>
    TimerEvent_t* cur = TimerListHead;
 8003a84:	4613      	mov	r3, r2
        while( cur != NULL )
 8003a86:	b32b      	cbz	r3, 8003ad4 <TimerStop+0x6c>
            if( cur == obj )
 8003a88:	42a3      	cmp	r3, r4
 8003a8a:	d020      	beq.n	8003ace <TimerStop+0x66>
                prev = cur;
 8003a8c:	461a      	mov	r2, r3
                cur = cur->Next;
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	e7f9      	b.n	8003a86 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 8003a92:	a801      	add	r0, sp, #4
 8003a94:	f006 f8a5 	bl	8009be2 <BoardCriticalSectionEnd>
        return;
 8003a98:	e01f      	b.n	8003ada <TimerStop+0x72>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8003a9a:	7a53      	ldrb	r3, [r2, #9]
 8003a9c:	b173      	cbz	r3, 8003abc <TimerStop+0x54>
            TimerListHead->IsNext2Expire = false;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 8003aa2:	6950      	ldr	r0, [r2, #20]
 8003aa4:	b120      	cbz	r0, 8003ab0 <TimerStop+0x48>
                TimerListHead = TimerListHead->Next;
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <TimerStop+0x7c>)
 8003aa8:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 8003aaa:	f006 f94e 	bl	8009d4a <TimerSetTimeout>
 8003aae:	e011      	b.n	8003ad4 <TimerStop+0x6c>
                RtcStopAlarm( );
 8003ab0:	f7ff fa32 	bl	8002f18 <RtcStopAlarm>
                TimerListHead = NULL;
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <TimerStop+0x7c>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e00b      	b.n	8003ad4 <TimerStop+0x6c>
            if( TimerListHead->Next != NULL )
 8003abc:	6953      	ldr	r3, [r2, #20]
 8003abe:	b113      	cbz	r3, 8003ac6 <TimerStop+0x5e>
                TimerListHead = TimerListHead->Next;
 8003ac0:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <TimerStop+0x7c>)
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e006      	b.n	8003ad4 <TimerStop+0x6c>
                TimerListHead = NULL;
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <TimerStop+0x7c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e002      	b.n	8003ad4 <TimerStop+0x6c>
                if( cur->Next != NULL )
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	b12b      	cbz	r3, 8003ade <TimerStop+0x76>
                    prev->Next = cur;
 8003ad2:	6153      	str	r3, [r2, #20]
    CRITICAL_SECTION_END( );
 8003ad4:	a801      	add	r0, sp, #4
 8003ad6:	f006 f884 	bl	8009be2 <BoardCriticalSectionEnd>
}
 8003ada:	b002      	add	sp, #8
 8003adc:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	6153      	str	r3, [r2, #20]
 8003ae2:	e7f7      	b.n	8003ad4 <TimerStop+0x6c>
 8003ae4:	20000b7c 	.word	0x20000b7c

08003ae8 <SX1276ConvertFreqInHzToPllStep>:
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8003ae8:	4908      	ldr	r1, [pc, #32]	; (8003b0c <SX1276ConvertFreqInHzToPllStep+0x24>)
 8003aea:	fba1 3200 	umull	r3, r2, r1, r0
 8003aee:	0b12      	lsrs	r2, r2, #12
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8003af0:	f643 5309 	movw	r3, #15625	; 0x3d09
 8003af4:	fb03 0012 	mls	r0, r3, r2, r0
 8003af8:	f641 6384 	movw	r3, #7812	; 0x1e84
 8003afc:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8003b00:	fba1 1303 	umull	r1, r3, r1, r3
 8003b04:	0b1b      	lsrs	r3, r3, #12
             SX1276_PLL_STEP_SCALED );
}
 8003b06:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 8003b0a:	4770      	bx	lr
 8003b0c:	431bde83 	.word	0x431bde83

08003b10 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8003b10:	2300      	movs	r3, #0
 8003b12:	e009      	b.n	8003b28 <GetFskBandwidthRegValue+0x18>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 8003b14:	e7fe      	b.n	8003b14 <GetFskBandwidthRegValue+0x4>
            return FskBandwidths[i].RegValue;
 8003b16:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <GetFskBandwidthRegValue+0x50>)
 8003b18:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003b1c:	7908      	ldrb	r0, [r1, #4]
}
 8003b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b22:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8003b24:	3301      	adds	r3, #1
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b14      	cmp	r3, #20
 8003b2a:	d817      	bhi.n	8003b5c <GetFskBandwidthRegValue+0x4c>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4a0c      	ldr	r2, [pc, #48]	; (8003b60 <GetFskBandwidthRegValue+0x50>)
 8003b30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003b34:	4282      	cmp	r2, r0
 8003b36:	d8f5      	bhi.n	8003b24 <GetFskBandwidthRegValue+0x14>
{
 8003b38:	b410      	push	{r4}
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	4c08      	ldr	r4, [pc, #32]	; (8003b60 <GetFskBandwidthRegValue+0x50>)
 8003b3e:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8003b42:	4282      	cmp	r2, r0
 8003b44:	d8e7      	bhi.n	8003b16 <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8003b46:	3301      	adds	r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b14      	cmp	r3, #20
 8003b4c:	d8e2      	bhi.n	8003b14 <GetFskBandwidthRegValue+0x4>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4a03      	ldr	r2, [pc, #12]	; (8003b60 <GetFskBandwidthRegValue+0x50>)
 8003b52:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003b56:	4282      	cmp	r2, r0
 8003b58:	d8f5      	bhi.n	8003b46 <GetFskBandwidthRegValue+0x36>
 8003b5a:	e7ee      	b.n	8003b3a <GetFskBandwidthRegValue+0x2a>
    while( 1 );
 8003b5c:	e7fe      	b.n	8003b5c <GetFskBandwidthRegValue+0x4c>
 8003b5e:	bf00      	nop
 8003b60:	0800c1e0 	.word	0x0800c1e0

08003b64 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8003b64:	2801      	cmp	r0, #1
 8003b66:	d006      	beq.n	8003b76 <SX1276GetLoRaBandwidthInHz+0x12>
 8003b68:	2802      	cmp	r0, #2
 8003b6a:	d006      	beq.n	8003b7a <SX1276GetLoRaBandwidthInHz+0x16>
 8003b6c:	b108      	cbz	r0, 8003b72 <SX1276GetLoRaBandwidthInHz+0xe>
 8003b6e:	2000      	movs	r0, #0
        bandwidthInHz = 500000UL;
        break;
    }

    return bandwidthInHz;
}
 8003b70:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8003b72:	4803      	ldr	r0, [pc, #12]	; (8003b80 <SX1276GetLoRaBandwidthInHz+0x1c>)
 8003b74:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 8003b76:	4803      	ldr	r0, [pc, #12]	; (8003b84 <SX1276GetLoRaBandwidthInHz+0x20>)
 8003b78:	4770      	bx	lr
        bandwidthInHz = 500000UL;
 8003b7a:	4803      	ldr	r0, [pc, #12]	; (8003b88 <SX1276GetLoRaBandwidthInHz+0x24>)
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	0001e848 	.word	0x0001e848
 8003b84:	0003d090 	.word	0x0003d090
 8003b88:	0007a120 	.word	0x0007a120

08003b8c <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <SX1276OnDio4Irq+0x1c>)
 8003b8e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8003b92:	b93b      	cbnz	r3, 8003ba4 <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <SX1276OnDio4Irq+0x1c>)
 8003b96:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003b9a:	b91b      	cbnz	r3, 8003ba4 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8003b9c:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <SX1276OnDio4Irq+0x1c>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000cb4 	.word	0x20000cb4

08003bac <SX1276GetStatus>:
}
 8003bac:	4b01      	ldr	r3, [pc, #4]	; (8003bb4 <SX1276GetStatus+0x8>)
 8003bae:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 8003bb2:	4770      	bx	lr
 8003bb4:	20000cb4 	.word	0x20000cb4

08003bb8 <SX1276SetChannel>:
{
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	4605      	mov	r5, r0
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8003bbc:	f7ff ff94 	bl	8003ae8 <SX1276ConvertFreqInHzToPllStep>
 8003bc0:	4604      	mov	r4, r0
    SX1276.Settings.Channel = freq;
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <SX1276SetChannel+0x30>)
 8003bc4:	f8c3 50e4 	str.w	r5, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8003bc8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8003bcc:	2006      	movs	r0, #6
 8003bce:	f006 f9b3 	bl	8009f38 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8003bd2:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8003bd6:	2007      	movs	r0, #7
 8003bd8:	f006 f9ae 	bl	8009f38 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8003bdc:	b2e1      	uxtb	r1, r4
 8003bde:	2008      	movs	r0, #8
 8003be0:	f006 f9aa 	bl	8009f38 <SX1276Write>
}
 8003be4:	bd38      	pop	{r3, r4, r5, pc}
 8003be6:	bf00      	nop
 8003be8:	20000cb4 	.word	0x20000cb4

08003bec <SX1276OnDio3Irq>:
{
 8003bec:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 8003bee:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <SX1276OnDio3Irq+0x54>)
 8003bf0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d000      	beq.n	8003bfa <SX1276OnDio3Irq+0xe>
}
 8003bf8:	bd08      	pop	{r3, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8003bfa:	2012      	movs	r0, #18
 8003bfc:	f006 f9a8 	bl	8009f50 <SX1276Read>
 8003c00:	f010 0f01 	tst.w	r0, #1
 8003c04:	d00d      	beq.n	8003c22 <SX1276OnDio3Irq+0x36>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8003c06:	2105      	movs	r1, #5
 8003c08:	2012      	movs	r0, #18
 8003c0a:	f006 f995 	bl	8009f38 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <SX1276OnDio3Irq+0x58>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <SX1276OnDio3Irq+0xc>
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0ed      	beq.n	8003bf8 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( true );
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	4798      	blx	r3
 8003c20:	e7ea      	b.n	8003bf8 <SX1276OnDio3Irq+0xc>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8003c22:	2104      	movs	r1, #4
 8003c24:	2012      	movs	r0, #18
 8003c26:	f006 f987 	bl	8009f38 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <SX1276OnDio3Irq+0x58>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0e2      	beq.n	8003bf8 <SX1276OnDio3Irq+0xc>
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0df      	beq.n	8003bf8 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( false );
 8003c38:	2000      	movs	r0, #0
 8003c3a:	4798      	blx	r3
}
 8003c3c:	e7dc      	b.n	8003bf8 <SX1276OnDio3Irq+0xc>
 8003c3e:	bf00      	nop
 8003c40:	20000cb4 	.word	0x20000cb4
 8003c44:	20000b80 	.word	0x20000b80

08003c48 <SX1276OnDio2Irq>:
{
 8003c48:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 8003c4a:	4b3a      	ldr	r3, [pc, #232]	; (8003d34 <SX1276OnDio2Irq+0xec>)
 8003c4c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d002      	beq.n	8003c5a <SX1276OnDio2Irq+0x12>
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d051      	beq.n	8003cfc <SX1276OnDio2Irq+0xb4>
}
 8003c58:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 8003c5a:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <SX1276OnDio2Irq+0xec>)
 8003c5c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8003c60:	b1c3      	cbz	r3, 8003c94 <SX1276OnDio2Irq+0x4c>
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d1f8      	bne.n	8003c58 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003c66:	4b33      	ldr	r3, [pc, #204]	; (8003d34 <SX1276OnDio2Irq+0xec>)
 8003c68:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f3      	beq.n	8003c58 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003c70:	2102      	movs	r1, #2
 8003c72:	2012      	movs	r0, #18
 8003c74:	f006 f960 	bl	8009f38 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8003c78:	4b2f      	ldr	r3, [pc, #188]	; (8003d38 <SX1276OnDio2Irq+0xf0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0eb      	beq.n	8003c58 <SX1276OnDio2Irq+0x10>
 8003c80:	695c      	ldr	r4, [r3, #20]
 8003c82:	2c00      	cmp	r4, #0
 8003c84:	d0e8      	beq.n	8003c58 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8003c86:	201c      	movs	r0, #28
 8003c88:	f006 f962 	bl	8009f50 <SX1276Read>
 8003c8c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8003c90:	47a0      	blx	r4
 8003c92:	e7e1      	b.n	8003c58 <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
 8003c94:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <SX1276OnDio2Irq+0xec>)
 8003c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c98:	b35b      	cbz	r3, 8003cf2 <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8003c9a:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <SX1276OnDio2Irq+0xec>)
 8003c9c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0d9      	beq.n	8003c58 <SX1276OnDio2Irq+0x10>
 8003ca4:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <SX1276OnDio2Irq+0xec>)
 8003ca6:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1d4      	bne.n	8003c58 <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
 8003cae:	4823      	ldr	r0, [pc, #140]	; (8003d3c <SX1276OnDio2Irq+0xf4>)
 8003cb0:	f7ff feda 	bl	8003a68 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8003cb4:	4c1f      	ldr	r4, [pc, #124]	; (8003d34 <SX1276OnDio2Irq+0xec>)
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003cbc:	2011      	movs	r0, #17
 8003cbe:	f006 f947 	bl	8009f50 <SX1276Read>
 8003cc2:	0843      	lsrs	r3, r0, #1
 8003cc4:	425b      	negs	r3, r3
 8003cc6:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003cca:	201b      	movs	r0, #27
 8003ccc:	f006 f940 	bl	8009f50 <SX1276Read>
 8003cd0:	0205      	lsls	r5, r0, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8003cd2:	201c      	movs	r0, #28
 8003cd4:	f006 f93c 	bl	8009f50 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003cd8:	4328      	orrs	r0, r5
 8003cda:	f006 f880 	bl	8009dde <SX1276ConvertPllStepToFreqInHz>
 8003cde:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8003ce2:	200c      	movs	r0, #12
 8003ce4:	f006 f934 	bl	8009f50 <SX1276Read>
 8003ce8:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8003cec:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
 8003cf0:	e7b2      	b.n	8003c58 <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <SX1276OnDio2Irq+0xec>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8003cfa:	e7ce      	b.n	8003c9a <SX1276OnDio2Irq+0x52>
            switch( SX1276.Settings.Modem )
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <SX1276OnDio2Irq+0xec>)
 8003cfe:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d1a8      	bne.n	8003c58 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <SX1276OnDio2Irq+0xec>)
 8003d08:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0a3      	beq.n	8003c58 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003d10:	2102      	movs	r1, #2
 8003d12:	2012      	movs	r0, #18
 8003d14:	f006 f910 	bl	8009f38 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8003d18:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <SX1276OnDio2Irq+0xf0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d09b      	beq.n	8003c58 <SX1276OnDio2Irq+0x10>
 8003d20:	695c      	ldr	r4, [r3, #20]
 8003d22:	2c00      	cmp	r4, #0
 8003d24:	d098      	beq.n	8003c58 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8003d26:	201c      	movs	r0, #28
 8003d28:	f006 f912 	bl	8009f50 <SX1276Read>
 8003d2c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8003d30:	47a0      	blx	r4
}
 8003d32:	e791      	b.n	8003c58 <SX1276OnDio2Irq+0x10>
 8003d34:	20000cb4 	.word	0x20000cb4
 8003d38:	20000b80 	.word	0x20000b80
 8003d3c:	20000b84 	.word	0x20000b84

08003d40 <SX1276OnDio1Irq>:
{
 8003d40:	b508      	push	{r3, lr}
    SX1276Read(REG_IRQFLAGS1);
 8003d42:	203e      	movs	r0, #62	; 0x3e
 8003d44:	f006 f904 	bl	8009f50 <SX1276Read>
    SX1276Read(REG_IRQFLAGS2);
 8003d48:	203f      	movs	r0, #63	; 0x3f
 8003d4a:	f006 f901 	bl	8009f50 <SX1276Read>
    switch( SX1276.Settings.State )
 8003d4e:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003d50:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d002      	beq.n	8003d5e <SX1276OnDio1Irq+0x1e>
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d062      	beq.n	8003e22 <SX1276OnDio1Irq+0xe2>
}
 8003d5c:	bd08      	pop	{r3, pc}
            switch( SX1276.Settings.Modem )
 8003d5e:	4b47      	ldr	r3, [pc, #284]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003d60:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8003d64:	b1cb      	cbz	r3, 8003d9a <SX1276OnDio1Irq+0x5a>
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d1f8      	bne.n	8003d5c <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 0 )
 8003d6a:	f7ff fdad 	bl	80038c8 <SX1276GetDio1PinState>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d0f4      	beq.n	8003d5c <SX1276OnDio1Irq+0x1c>
                TimerStop( &RxTimeoutTimer );
 8003d72:	4843      	ldr	r0, [pc, #268]	; (8003e80 <SX1276OnDio1Irq+0x140>)
 8003d74:	f7ff fe78 	bl	8003a68 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8003d78:	2180      	movs	r1, #128	; 0x80
 8003d7a:	2012      	movs	r0, #18
 8003d7c:	f006 f8dc 	bl	8009f38 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8003d80:	4b3e      	ldr	r3, [pc, #248]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8003d88:	4b3e      	ldr	r3, [pc, #248]	; (8003e84 <SX1276OnDio1Irq+0x144>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0e5      	beq.n	8003d5c <SX1276OnDio1Irq+0x1c>
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0e2      	beq.n	8003d5c <SX1276OnDio1Irq+0x1c>
                    RadioEvents->RxTimeout( );
 8003d96:	4798      	blx	r3
 8003d98:	e7e0      	b.n	8003d5c <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 0 )
 8003d9a:	f7ff fd95 	bl	80038c8 <SX1276GetDio1PinState>
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d0dc      	beq.n	8003d5c <SX1276OnDio1Irq+0x1c>
                TimerStop( &RxTimeoutSyncWord );
 8003da2:	4839      	ldr	r0, [pc, #228]	; (8003e88 <SX1276OnDio1Irq+0x148>)
 8003da4:	f7ff fe60 	bl	8003a68 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8003da8:	4b34      	ldr	r3, [pc, #208]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003daa:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8003dae:	b95b      	cbnz	r3, 8003dc8 <SX1276OnDio1Irq+0x88>
 8003db0:	4b32      	ldr	r3, [pc, #200]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003db2:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8003db6:	b93b      	cbnz	r3, 8003dc8 <SX1276OnDio1Irq+0x88>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8003db8:	4b30      	ldr	r3, [pc, #192]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003dba:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8003dbe:	b9eb      	cbnz	r3, 8003dfc <SX1276OnDio1Irq+0xbc>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	4832      	ldr	r0, [pc, #200]	; (8003e8c <SX1276OnDio1Irq+0x14c>)
 8003dc4:	f006 f878 	bl	8009eb8 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8003dc8:	4b2c      	ldr	r3, [pc, #176]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003dca:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 8003dce:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 8003dd2:	1a88      	subs	r0, r1, r2
 8003dd4:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8003dd8:	4298      	cmp	r0, r3
 8003dda:	db16      	blt.n	8003e0a <SX1276OnDio1Irq+0xca>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8003ddc:	1e59      	subs	r1, r3, #1
 8003dde:	b2c9      	uxtb	r1, r1
 8003de0:	482b      	ldr	r0, [pc, #172]	; (8003e90 <SX1276OnDio1Irq+0x150>)
 8003de2:	4410      	add	r0, r2
 8003de4:	f006 f868 	bl	8009eb8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8003de8:	4a24      	ldr	r2, [pc, #144]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003dea:	f892 311a 	ldrb.w	r3, [r2, #282]	; 0x11a
 8003dee:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 8003df2:	440b      	add	r3, r1
 8003df4:	3b01      	subs	r3, #1
 8003df6:	f8a2 3118 	strh.w	r3, [r2, #280]	; 0x118
 8003dfa:	e7af      	b.n	8003d5c <SX1276OnDio1Irq+0x1c>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8003dfc:	2032      	movs	r0, #50	; 0x32
 8003dfe:	f006 f8a7 	bl	8009f50 <SX1276Read>
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003e04:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8003e08:	e7de      	b.n	8003dc8 <SX1276OnDio1Irq+0x88>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003e0a:	1a89      	subs	r1, r1, r2
 8003e0c:	b2c9      	uxtb	r1, r1
 8003e0e:	4820      	ldr	r0, [pc, #128]	; (8003e90 <SX1276OnDio1Irq+0x150>)
 8003e10:	4410      	add	r0, r2
 8003e12:	f006 f851 	bl	8009eb8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003e16:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003e18:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8003e1c:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 8003e20:	e79c      	b.n	8003d5c <SX1276OnDio1Irq+0x1c>
            switch( SX1276.Settings.Modem )
 8003e22:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003e24:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d197      	bne.n	8003d5c <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 1 )
 8003e2c:	f7ff fd4c 	bl	80038c8 <SX1276GetDio1PinState>
 8003e30:	2801      	cmp	r0, #1
 8003e32:	d093      	beq.n	8003d5c <SX1276OnDio1Irq+0x1c>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003e36:	f8b3 0116 	ldrh.w	r0, [r3, #278]	; 0x116
 8003e3a:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 8003e3e:	eba0 0c02 	sub.w	ip, r0, r2
 8003e42:	f893 111b 	ldrb.w	r1, [r3, #283]	; 0x11b
 8003e46:	458c      	cmp	ip, r1
 8003e48:	dd0c      	ble.n	8003e64 <SX1276OnDio1Irq+0x124>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8003e4a:	4811      	ldr	r0, [pc, #68]	; (8003e90 <SX1276OnDio1Irq+0x150>)
 8003e4c:	4410      	add	r0, r2
 8003e4e:	f006 f83a 	bl	8009ec6 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003e52:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003e54:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 8003e58:	f8b3 1118 	ldrh.w	r1, [r3, #280]	; 0x118
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 8003e62:	e77b      	b.n	8003d5c <SX1276OnDio1Irq+0x1c>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003e64:	1a81      	subs	r1, r0, r2
 8003e66:	b2c9      	uxtb	r1, r1
 8003e68:	4809      	ldr	r0, [pc, #36]	; (8003e90 <SX1276OnDio1Irq+0x150>)
 8003e6a:	4410      	add	r0, r2
 8003e6c:	f006 f82b 	bl	8009ec6 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8003e70:	4b02      	ldr	r3, [pc, #8]	; (8003e7c <SX1276OnDio1Irq+0x13c>)
 8003e72:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8003e76:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
}
 8003e7a:	e76f      	b.n	8003d5c <SX1276OnDio1Irq+0x1c>
 8003e7c:	20000cb4 	.word	0x20000cb4
 8003e80:	20000b9c 	.word	0x20000b9c
 8003e84:	20000b80 	.word	0x20000b80
 8003e88:	20000b84 	.word	0x20000b84
 8003e8c:	20000dca 	.word	0x20000dca
 8003e90:	20000bb4 	.word	0x20000bb4

08003e94 <SX1276OnDio0Irq>:
{
 8003e94:	b510      	push	{r4, lr}
 8003e96:	b082      	sub	sp, #8
    SX1276Read(REG_IRQFLAGS1);
 8003e98:	203e      	movs	r0, #62	; 0x3e
 8003e9a:	f006 f859 	bl	8009f50 <SX1276Read>
    SX1276Read(REG_IRQFLAGS2);
 8003e9e:	203f      	movs	r0, #63	; 0x3f
 8003ea0:	f006 f856 	bl	8009f50 <SX1276Read>
    volatile uint8_t irqFlags = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 8003eaa:	4bb1      	ldr	r3, [pc, #708]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8003eac:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d004      	beq.n	8003ebe <SX1276OnDio0Irq+0x2a>
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	f000 813f 	beq.w	8004138 <SX1276OnDio0Irq+0x2a4>
}
 8003eba:	b002      	add	sp, #8
 8003ebc:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 8003ebe:	4bac      	ldr	r3, [pc, #688]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8003ec0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8003ec4:	b343      	cbz	r3, 8003f18 <SX1276OnDio0Irq+0x84>
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d1f7      	bne.n	8003eba <SX1276OnDio0Irq+0x26>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8003eca:	2140      	movs	r1, #64	; 0x40
 8003ecc:	2012      	movs	r0, #18
 8003ece:	f006 f833 	bl	8009f38 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8003ed2:	2012      	movs	r0, #18
 8003ed4:	f006 f83c 	bl	8009f50 <SX1276Read>
 8003ed8:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8003edc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ee0:	f013 0f20 	tst.w	r3, #32
 8003ee4:	f000 80bd 	beq.w	8004062 <SX1276OnDio0Irq+0x1ce>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8003ee8:	2120      	movs	r1, #32
 8003eea:	2012      	movs	r0, #18
 8003eec:	f006 f824 	bl	8009f38 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8003ef0:	4b9f      	ldr	r3, [pc, #636]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8003ef2:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003ef6:	b91b      	cbnz	r3, 8003f00 <SX1276OnDio0Irq+0x6c>
                            SX1276.Settings.State = RF_IDLE;
 8003ef8:	4b9d      	ldr	r3, [pc, #628]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 8003f00:	489c      	ldr	r0, [pc, #624]	; (8004174 <SX1276OnDio0Irq+0x2e0>)
 8003f02:	f7ff fdb1 	bl	8003a68 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003f06:	4b9c      	ldr	r3, [pc, #624]	; (8004178 <SX1276OnDio0Irq+0x2e4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0d5      	beq.n	8003eba <SX1276OnDio0Irq+0x26>
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0d2      	beq.n	8003eba <SX1276OnDio0Irq+0x26>
                            RadioEvents->RxError( );
 8003f14:	4798      	blx	r3
 8003f16:	e7d0      	b.n	8003eba <SX1276OnDio0Irq+0x26>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8003f18:	4b95      	ldr	r3, [pc, #596]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8003f1a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003f1e:	bb0b      	cbnz	r3, 8003f64 <SX1276OnDio0Irq+0xd0>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8003f20:	4b93      	ldr	r3, [pc, #588]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8003f22:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 8003f26:	2900      	cmp	r1, #0
 8003f28:	d15e      	bne.n	8003fe8 <SX1276OnDio0Irq+0x154>
 8003f2a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d15a      	bne.n	8003fe8 <SX1276OnDio0Irq+0x154>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8003f32:	4b8f      	ldr	r3, [pc, #572]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8003f34:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d14e      	bne.n	8003fda <SX1276OnDio0Irq+0x146>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	488f      	ldr	r0, [pc, #572]	; (800417c <SX1276OnDio0Irq+0x2e8>)
 8003f40:	f005 ffba 	bl	8009eb8 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003f44:	4c8a      	ldr	r4, [pc, #552]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8003f46:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8003f4a:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 8003f4e:	1ac9      	subs	r1, r1, r3
 8003f50:	b2c9      	uxtb	r1, r1
 8003f52:	488b      	ldr	r0, [pc, #556]	; (8004180 <SX1276OnDio0Irq+0x2ec>)
 8003f54:	4418      	add	r0, r3
 8003f56:	f005 ffaf 	bl	8009eb8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003f5a:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8003f5e:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 8003f62:	e04e      	b.n	8004002 <SX1276OnDio0Irq+0x16e>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8003f64:	203f      	movs	r0, #63	; 0x3f
 8003f66:	f005 fff3 	bl	8009f50 <SX1276Read>
 8003f6a:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8003f6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f72:	f013 0f02 	tst.w	r3, #2
 8003f76:	d1d3      	bne.n	8003f20 <SX1276OnDio0Irq+0x8c>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003f78:	210b      	movs	r1, #11
 8003f7a:	203e      	movs	r0, #62	; 0x3e
 8003f7c:	f005 ffdc 	bl	8009f38 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003f80:	2110      	movs	r1, #16
 8003f82:	203f      	movs	r0, #63	; 0x3f
 8003f84:	f005 ffd8 	bl	8009f38 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8003f88:	487a      	ldr	r0, [pc, #488]	; (8004174 <SX1276OnDio0Irq+0x2e0>)
 8003f8a:	f7ff fd6d 	bl	8003a68 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8003f8e:	4b78      	ldr	r3, [pc, #480]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8003f90:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8003f94:	b9bb      	cbnz	r3, 8003fc6 <SX1276OnDio0Irq+0x132>
                            TimerStop( &RxTimeoutSyncWord );
 8003f96:	487b      	ldr	r0, [pc, #492]	; (8004184 <SX1276OnDio0Irq+0x2f0>)
 8003f98:	f7ff fd66 	bl	8003a68 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8003f9c:	4b74      	ldr	r3, [pc, #464]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003fa4:	4b74      	ldr	r3, [pc, #464]	; (8004178 <SX1276OnDio0Irq+0x2e4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	b113      	cbz	r3, 8003fb0 <SX1276OnDio0Irq+0x11c>
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	b103      	cbz	r3, 8003fb0 <SX1276OnDio0Irq+0x11c>
                            RadioEvents->RxError( );
 8003fae:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003fb0:	4b6f      	ldr	r3, [pc, #444]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8003fb8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003fbc:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8003fc0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                        break;
 8003fc4:	e779      	b.n	8003eba <SX1276OnDio0Irq+0x26>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003fc6:	200d      	movs	r0, #13
 8003fc8:	f005 ffc2 	bl	8009f50 <SX1276Read>
 8003fcc:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8003fd0:	b2c9      	uxtb	r1, r1
 8003fd2:	200d      	movs	r0, #13
 8003fd4:	f005 ffb0 	bl	8009f38 <SX1276Write>
 8003fd8:	e7e4      	b.n	8003fa4 <SX1276OnDio0Irq+0x110>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8003fda:	2032      	movs	r0, #50	; 0x32
 8003fdc:	f005 ffb8 	bl	8009f50 <SX1276Read>
 8003fe0:	4b63      	ldr	r3, [pc, #396]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8003fe2:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8003fe6:	e7ad      	b.n	8003f44 <SX1276OnDio0Irq+0xb0>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003fe8:	4c61      	ldr	r4, [pc, #388]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8003fea:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8003fee:	1ac9      	subs	r1, r1, r3
 8003ff0:	b2c9      	uxtb	r1, r1
 8003ff2:	4863      	ldr	r0, [pc, #396]	; (8004180 <SX1276OnDio0Irq+0x2ec>)
 8003ff4:	4418      	add	r0, r3
 8003ff6:	f005 ff5f 	bl	8009eb8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003ffa:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8003ffe:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 8004002:	485c      	ldr	r0, [pc, #368]	; (8004174 <SX1276OnDio0Irq+0x2e0>)
 8004004:	f7ff fd30 	bl	8003a68 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8004008:	4b59      	ldr	r3, [pc, #356]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 800400a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800400e:	b9f3      	cbnz	r3, 800404e <SX1276OnDio0Irq+0x1ba>
                    SX1276.Settings.State = RF_IDLE;
 8004010:	4b57      	ldr	r3, [pc, #348]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8004012:	2200      	movs	r2, #0
 8004014:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 8004018:	485a      	ldr	r0, [pc, #360]	; (8004184 <SX1276OnDio0Irq+0x2f0>)
 800401a:	f7ff fd25 	bl	8003a68 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800401e:	4b56      	ldr	r3, [pc, #344]	; (8004178 <SX1276OnDio0Irq+0x2e4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	b14b      	cbz	r3, 8004038 <SX1276OnDio0Irq+0x1a4>
 8004024:	689c      	ldr	r4, [r3, #8]
 8004026:	b13c      	cbz	r4, 8004038 <SX1276OnDio0Irq+0x1a4>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8004028:	4951      	ldr	r1, [pc, #324]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 800402a:	2300      	movs	r3, #0
 800402c:	f991 210e 	ldrsb.w	r2, [r1, #270]	; 0x10e
 8004030:	f8b1 1116 	ldrh.w	r1, [r1, #278]	; 0x116
 8004034:	4852      	ldr	r0, [pc, #328]	; (8004180 <SX1276OnDio0Irq+0x2ec>)
 8004036:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004038:	4b4d      	ldr	r3, [pc, #308]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 800403a:	2200      	movs	r2, #0
 800403c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004040:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004044:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                SX1276.Settings.FskPacketHandler.Size = 0;
 8004048:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                break;
 800404c:	e735      	b.n	8003eba <SX1276OnDio0Irq+0x26>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800404e:	200d      	movs	r0, #13
 8004050:	f005 ff7e 	bl	8009f50 <SX1276Read>
 8004054:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8004058:	b2c9      	uxtb	r1, r1
 800405a:	200d      	movs	r0, #13
 800405c:	f005 ff6c 	bl	8009f38 <SX1276Write>
 8004060:	e7dd      	b.n	800401e <SX1276OnDio0Irq+0x18a>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8004062:	2019      	movs	r0, #25
 8004064:	f005 ff74 	bl	8009f50 <SX1276Read>
 8004068:	b243      	sxtb	r3, r0
 800406a:	3302      	adds	r3, #2
 800406c:	109b      	asrs	r3, r3, #2
 800406e:	4c40      	ldr	r4, [pc, #256]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8004070:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8004074:	201a      	movs	r0, #26
 8004076:	f005 ff6b 	bl	8009f50 <SX1276Read>
 800407a:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800407c:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
 8004080:	2a00      	cmp	r2, #0
 8004082:	db39      	blt.n	80040f8 <SX1276OnDio0Irq+0x264>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004084:	4a3a      	ldr	r2, [pc, #232]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8004086:	f8d2 10e4 	ldr.w	r1, [r2, #228]	; 0xe4
 800408a:	4a3f      	ldr	r2, [pc, #252]	; (8004188 <SX1276OnDio0Irq+0x2f4>)
 800408c:	4291      	cmp	r1, r2
 800408e:	d94c      	bls.n	800412a <SX1276OnDio0Irq+0x296>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8004090:	eb00 1023 	add.w	r0, r0, r3, asr #4
 8004094:	389d      	subs	r0, #157	; 0x9d
 8004096:	4b36      	ldr	r3, [pc, #216]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8004098:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800409c:	2013      	movs	r0, #19
 800409e:	f005 ff57 	bl	8009f50 <SX1276Read>
 80040a2:	4c33      	ldr	r4, [pc, #204]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 80040a4:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80040a8:	2010      	movs	r0, #16
 80040aa:	f005 ff51 	bl	8009f50 <SX1276Read>
 80040ae:	4601      	mov	r1, r0
 80040b0:	200d      	movs	r0, #13
 80040b2:	f005 ff41 	bl	8009f38 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80040b6:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 80040ba:	4831      	ldr	r0, [pc, #196]	; (8004180 <SX1276OnDio0Irq+0x2ec>)
 80040bc:	f005 fefc 	bl	8009eb8 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80040c0:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 80040c4:	b913      	cbnz	r3, 80040cc <SX1276OnDio0Irq+0x238>
                        SX1276.Settings.State = RF_IDLE;
 80040c6:	2200      	movs	r2, #0
 80040c8:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 80040cc:	4829      	ldr	r0, [pc, #164]	; (8004174 <SX1276OnDio0Irq+0x2e0>)
 80040ce:	f7ff fccb 	bl	8003a68 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80040d2:	4b29      	ldr	r3, [pc, #164]	; (8004178 <SX1276OnDio0Irq+0x2e4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f43f aeef 	beq.w	8003eba <SX1276OnDio0Irq+0x26>
 80040dc:	689c      	ldr	r4, [r3, #8]
 80040de:	2c00      	cmp	r4, #0
 80040e0:	f43f aeeb 	beq.w	8003eba <SX1276OnDio0Irq+0x26>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80040e4:	4922      	ldr	r1, [pc, #136]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 80040e6:	f991 313c 	ldrsb.w	r3, [r1, #316]	; 0x13c
 80040ea:	f9b1 213e 	ldrsh.w	r2, [r1, #318]	; 0x13e
 80040ee:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 80040f2:	4823      	ldr	r0, [pc, #140]	; (8004180 <SX1276OnDio0Irq+0x2ec>)
 80040f4:	47a0      	blx	r4
 80040f6:	e6e0      	b.n	8003eba <SX1276OnDio0Irq+0x26>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80040f8:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 80040fc:	4922      	ldr	r1, [pc, #136]	; (8004188 <SX1276OnDio0Irq+0x2f4>)
 80040fe:	428c      	cmp	r4, r1
 8004100:	d909      	bls.n	8004116 <SX1276OnDio0Irq+0x282>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8004102:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8004106:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8004108:	fa12 f383 	uxtah	r3, r2, r3
 800410c:	3b9d      	subs	r3, #157	; 0x9d
 800410e:	4a18      	ldr	r2, [pc, #96]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8004110:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 8004114:	e7c2      	b.n	800409c <SX1276OnDio0Irq+0x208>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8004116:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800411a:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800411c:	fa12 f383 	uxtah	r3, r2, r3
 8004120:	3ba4      	subs	r3, #164	; 0xa4
 8004122:	4a13      	ldr	r2, [pc, #76]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8004124:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 8004128:	e7b8      	b.n	800409c <SX1276OnDio0Irq+0x208>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800412a:	eb00 1023 	add.w	r0, r0, r3, asr #4
 800412e:	38a4      	subs	r0, #164	; 0xa4
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8004132:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 8004136:	e7b1      	b.n	800409c <SX1276OnDio0Irq+0x208>
            TimerStop( &TxTimeoutTimer );
 8004138:	4814      	ldr	r0, [pc, #80]	; (800418c <SX1276OnDio0Irq+0x2f8>)
 800413a:	f7ff fc95 	bl	8003a68 <TimerStop>
            switch( SX1276.Settings.Modem )
 800413e:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 8004140:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d00e      	beq.n	8004166 <SX1276OnDio0Irq+0x2d2>
                SX1276.Settings.State = RF_IDLE;
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <SX1276OnDio0Irq+0x2dc>)
 800414a:	2200      	movs	r2, #0
 800414c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <SX1276OnDio0Irq+0x2e4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f43f aeb0 	beq.w	8003eba <SX1276OnDio0Irq+0x26>
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f43f aeac 	beq.w	8003eba <SX1276OnDio0Irq+0x26>
                    RadioEvents->TxDone( );
 8004162:	4798      	blx	r3
}
 8004164:	e6a9      	b.n	8003eba <SX1276OnDio0Irq+0x26>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8004166:	2108      	movs	r1, #8
 8004168:	2012      	movs	r0, #18
 800416a:	f005 fee5 	bl	8009f38 <SX1276Write>
 800416e:	e7eb      	b.n	8004148 <SX1276OnDio0Irq+0x2b4>
 8004170:	20000cb4 	.word	0x20000cb4
 8004174:	20000b9c 	.word	0x20000b9c
 8004178:	20000b80 	.word	0x20000b80
 800417c:	20000dca 	.word	0x20000dca
 8004180:	20000bb4 	.word	0x20000bb4
 8004184:	20000b84 	.word	0x20000b84
 8004188:	1f4add40 	.word	0x1f4add40
 800418c:	20000df8 	.word	0x20000df8

08004190 <RxChainCalibration>:
{
 8004190:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8004192:	2009      	movs	r0, #9
 8004194:	f005 fedc 	bl	8009f50 <SX1276Read>
 8004198:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800419a:	2006      	movs	r0, #6
 800419c:	f005 fed8 	bl	8009f50 <SX1276Read>
 80041a0:	0404      	lsls	r4, r0, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80041a2:	2007      	movs	r0, #7
 80041a4:	f005 fed4 	bl	8009f50 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80041a8:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 80041ac:	2008      	movs	r0, #8
 80041ae:	f005 fecf 	bl	8009f50 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80041b2:	4320      	orrs	r0, r4
 80041b4:	f005 fe13 	bl	8009dde <SX1276ConvertPllStepToFreqInHz>
 80041b8:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 80041ba:	2100      	movs	r1, #0
 80041bc:	2009      	movs	r0, #9
 80041be:	f005 febb 	bl	8009f38 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80041c2:	203b      	movs	r0, #59	; 0x3b
 80041c4:	f005 fec4 	bl	8009f50 <SX1276Read>
 80041c8:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80041cc:	b2c9      	uxtb	r1, r1
 80041ce:	203b      	movs	r0, #59	; 0x3b
 80041d0:	f005 feb2 	bl	8009f38 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80041d4:	203b      	movs	r0, #59	; 0x3b
 80041d6:	f005 febb 	bl	8009f50 <SX1276Read>
 80041da:	f010 0f20 	tst.w	r0, #32
 80041de:	d1f9      	bne.n	80041d4 <RxChainCalibration+0x44>
    SX1276SetChannel( 868000000 );
 80041e0:	480c      	ldr	r0, [pc, #48]	; (8004214 <RxChainCalibration+0x84>)
 80041e2:	f7ff fce9 	bl	8003bb8 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80041e6:	203b      	movs	r0, #59	; 0x3b
 80041e8:	f005 feb2 	bl	8009f50 <SX1276Read>
 80041ec:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80041f0:	b2c9      	uxtb	r1, r1
 80041f2:	203b      	movs	r0, #59	; 0x3b
 80041f4:	f005 fea0 	bl	8009f38 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80041f8:	203b      	movs	r0, #59	; 0x3b
 80041fa:	f005 fea9 	bl	8009f50 <SX1276Read>
 80041fe:	f010 0f20 	tst.w	r0, #32
 8004202:	d1f9      	bne.n	80041f8 <RxChainCalibration+0x68>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8004204:	4629      	mov	r1, r5
 8004206:	2009      	movs	r0, #9
 8004208:	f005 fe96 	bl	8009f38 <SX1276Write>
    SX1276SetChannel( initialFreq );
 800420c:	4620      	mov	r0, r4
 800420e:	f7ff fcd3 	bl	8003bb8 <SX1276SetChannel>
}
 8004212:	bd38      	pop	{r3, r4, r5, pc}
 8004214:	33bca100 	.word	0x33bca100

08004218 <SX1276SetSleep>:
{
 8004218:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 800421a:	480a      	ldr	r0, [pc, #40]	; (8004244 <SX1276SetSleep+0x2c>)
 800421c:	f7ff fc24 	bl	8003a68 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8004220:	4809      	ldr	r0, [pc, #36]	; (8004248 <SX1276SetSleep+0x30>)
 8004222:	f7ff fc21 	bl	8003a68 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8004226:	4809      	ldr	r0, [pc, #36]	; (800424c <SX1276SetSleep+0x34>)
 8004228:	f7ff fc1e 	bl	8003a68 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800422c:	2000      	movs	r0, #0
 800422e:	f005 fe9b 	bl	8009f68 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
 8004232:	2000      	movs	r0, #0
 8004234:	f005 fd1a 	bl	8009c6c <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <SX1276SetSleep+0x38>)
 800423a:	2200      	movs	r2, #0
 800423c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8004240:	bd08      	pop	{r3, pc}
 8004242:	bf00      	nop
 8004244:	20000b9c 	.word	0x20000b9c
 8004248:	20000df8 	.word	0x20000df8
 800424c:	20000b84 	.word	0x20000b84
 8004250:	20000cb4 	.word	0x20000cb4

08004254 <SX1276SetStby>:
{
 8004254:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8004256:	4808      	ldr	r0, [pc, #32]	; (8004278 <SX1276SetStby+0x24>)
 8004258:	f7ff fc06 	bl	8003a68 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800425c:	4807      	ldr	r0, [pc, #28]	; (800427c <SX1276SetStby+0x28>)
 800425e:	f7ff fc03 	bl	8003a68 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8004262:	4807      	ldr	r0, [pc, #28]	; (8004280 <SX1276SetStby+0x2c>)
 8004264:	f7ff fc00 	bl	8003a68 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8004268:	2001      	movs	r0, #1
 800426a:	f005 fe7d 	bl	8009f68 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <SX1276SetStby+0x30>)
 8004270:	2200      	movs	r2, #0
 8004272:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8004276:	bd08      	pop	{r3, pc}
 8004278:	20000b9c 	.word	0x20000b9c
 800427c:	20000df8 	.word	0x20000df8
 8004280:	20000b84 	.word	0x20000b84
 8004284:	20000cb4 	.word	0x20000cb4

08004288 <SX1276SetTx>:
{
 8004288:	b510      	push	{r4, lr}
 800428a:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 800428c:	4829      	ldr	r0, [pc, #164]	; (8004334 <SX1276SetTx+0xac>)
 800428e:	f7ff fbeb 	bl	8003a68 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8004292:	4621      	mov	r1, r4
 8004294:	4828      	ldr	r0, [pc, #160]	; (8004338 <SX1276SetTx+0xb0>)
 8004296:	f005 fd77 	bl	8009d88 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 800429a:	4b28      	ldr	r3, [pc, #160]	; (800433c <SX1276SetTx+0xb4>)
 800429c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80042a0:	b163      	cbz	r3, 80042bc <SX1276SetTx+0x34>
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d023      	beq.n	80042ee <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 80042a6:	4b25      	ldr	r3, [pc, #148]	; (800433c <SX1276SetTx+0xb4>)
 80042a8:	2202      	movs	r2, #2
 80042aa:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 80042ae:	4822      	ldr	r0, [pc, #136]	; (8004338 <SX1276SetTx+0xb0>)
 80042b0:	f7ff fb60 	bl	8003974 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80042b4:	2003      	movs	r0, #3
 80042b6:	f005 fe57 	bl	8009f68 <SX1276SetOpMode>
}
 80042ba:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80042bc:	2040      	movs	r0, #64	; 0x40
 80042be:	f005 fe47 	bl	8009f50 <SX1276Read>
 80042c2:	f000 0103 	and.w	r1, r0, #3
 80042c6:	2040      	movs	r0, #64	; 0x40
 80042c8:	f005 fe36 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80042cc:	2041      	movs	r0, #65	; 0x41
 80042ce:	f005 fe3f 	bl	8009f50 <SX1276Read>
 80042d2:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 80042d6:	2041      	movs	r0, #65	; 0x41
 80042d8:	f005 fe2e 	bl	8009f38 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80042dc:	2035      	movs	r0, #53	; 0x35
 80042de:	f005 fe37 	bl	8009f50 <SX1276Read>
 80042e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <SX1276SetTx+0xb4>)
 80042e8:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
        break;
 80042ec:	e7db      	b.n	80042a6 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80042ee:	4b13      	ldr	r3, [pc, #76]	; (800433c <SX1276SetTx+0xb4>)
 80042f0:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80042f4:	b173      	cbz	r3, 8004314 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80042f6:	21f5      	movs	r1, #245	; 0xf5
 80042f8:	2011      	movs	r0, #17
 80042fa:	f005 fe1d 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 80042fe:	2040      	movs	r0, #64	; 0x40
 8004300:	f005 fe26 	bl	8009f50 <SX1276Read>
 8004304:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8004308:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800430c:	2040      	movs	r0, #64	; 0x40
 800430e:	f005 fe13 	bl	8009f38 <SX1276Write>
 8004312:	e7c8      	b.n	80042a6 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004314:	21f7      	movs	r1, #247	; 0xf7
 8004316:	2011      	movs	r0, #17
 8004318:	f005 fe0e 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800431c:	2040      	movs	r0, #64	; 0x40
 800431e:	f005 fe17 	bl	8009f50 <SX1276Read>
 8004322:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8004326:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800432a:	2040      	movs	r0, #64	; 0x40
 800432c:	f005 fe04 	bl	8009f38 <SX1276Write>
 8004330:	e7b9      	b.n	80042a6 <SX1276SetTx+0x1e>
 8004332:	bf00      	nop
 8004334:	20000b9c 	.word	0x20000b9c
 8004338:	20000df8 	.word	0x20000df8
 800433c:	20000cb4 	.word	0x20000cb4

08004340 <SX1276Send>:
{
 8004340:	b530      	push	{r4, r5, lr}
 8004342:	b083      	sub	sp, #12
 8004344:	4604      	mov	r4, r0
 8004346:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 800434a:	4b44      	ldr	r3, [pc, #272]	; (800445c <SX1276Send+0x11c>)
 800434c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004350:	b133      	cbz	r3, 8004360 <SX1276Send+0x20>
 8004352:	2b01      	cmp	r3, #1
 8004354:	d03a      	beq.n	80043cc <SX1276Send+0x8c>
 8004356:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 8004358:	f7ff ff96 	bl	8004288 <SX1276SetTx>
}
 800435c:	b003      	add	sp, #12
 800435e:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004360:	4b3e      	ldr	r3, [pc, #248]	; (800445c <SX1276Send+0x11c>)
 8004362:	2200      	movs	r2, #0
 8004364:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 8004368:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800436c:	f8a3 1116 	strh.w	r1, [r3, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
 8004370:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8004374:	b9eb      	cbnz	r3, 80043b2 <SX1276Send+0x72>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8004376:	2101      	movs	r1, #1
 8004378:	f10d 0007 	add.w	r0, sp, #7
 800437c:	f005 fda3 	bl	8009ec6 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8004380:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004384:	1e53      	subs	r3, r2, #1
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b3f      	cmp	r3, #63	; 0x3f
 800438a:	d816      	bhi.n	80043ba <SX1276Send+0x7a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800438c:	4b33      	ldr	r3, [pc, #204]	; (800445c <SX1276Send+0x11c>)
 800438e:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8004392:	4d32      	ldr	r5, [pc, #200]	; (800445c <SX1276Send+0x11c>)
 8004394:	f895 111b 	ldrb.w	r1, [r5, #283]	; 0x11b
 8004398:	4620      	mov	r0, r4
 800439a:	f005 fd94 	bl	8009ec6 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800439e:	f895 311b 	ldrb.w	r3, [r5, #283]	; 0x11b
 80043a2:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 80043a6:	4413      	add	r3, r2
 80043a8:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80043ac:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
        break;
 80043b0:	e7d2      	b.n	8004358 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 80043b2:	2032      	movs	r0, #50	; 0x32
 80043b4:	f005 fdc0 	bl	8009f38 <SX1276Write>
 80043b8:	e7e2      	b.n	8004380 <SX1276Send+0x40>
                memcpy1( RxTxBuffer, buffer, size );
 80043ba:	4621      	mov	r1, r4
 80043bc:	4828      	ldr	r0, [pc, #160]	; (8004460 <SX1276Send+0x120>)
 80043be:	f005 fcb9 	bl	8009d34 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80043c2:	4b26      	ldr	r3, [pc, #152]	; (800445c <SX1276Send+0x11c>)
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 80043ca:	e7e2      	b.n	8004392 <SX1276Send+0x52>
            if( SX1276.Settings.LoRa.IqInverted == true )
 80043cc:	4b23      	ldr	r3, [pc, #140]	; (800445c <SX1276Send+0x11c>)
 80043ce:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80043d2:	b353      	cbz	r3, 800442a <SX1276Send+0xea>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80043d4:	2033      	movs	r0, #51	; 0x33
 80043d6:	f005 fdbb 	bl	8009f50 <SX1276Read>
 80043da:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 80043de:	2033      	movs	r0, #51	; 0x33
 80043e0:	f005 fdaa 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80043e4:	2119      	movs	r1, #25
 80043e6:	203b      	movs	r0, #59	; 0x3b
 80043e8:	f005 fda6 	bl	8009f38 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 80043ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80043f0:	4b1a      	ldr	r3, [pc, #104]	; (800445c <SX1276Send+0x11c>)
 80043f2:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80043f6:	2022      	movs	r0, #34	; 0x22
 80043f8:	f005 fd9e 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80043fc:	2100      	movs	r1, #0
 80043fe:	200e      	movs	r0, #14
 8004400:	f005 fd9a 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004404:	2100      	movs	r1, #0
 8004406:	200d      	movs	r0, #13
 8004408:	f005 fd96 	bl	8009f38 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800440c:	2001      	movs	r0, #1
 800440e:	f005 fd9f 	bl	8009f50 <SX1276Read>
 8004412:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8004416:	d01a      	beq.n	800444e <SX1276Send+0x10e>
            SX1276WriteFifo( buffer, size );
 8004418:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800441c:	4620      	mov	r0, r4
 800441e:	f005 fd52 	bl	8009ec6 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8004422:	4b0e      	ldr	r3, [pc, #56]	; (800445c <SX1276Send+0x11c>)
 8004424:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
        break;
 8004428:	e796      	b.n	8004358 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800442a:	2033      	movs	r0, #51	; 0x33
 800442c:	f005 fd90 	bl	8009f50 <SX1276Read>
 8004430:	b241      	sxtb	r1, r0
 8004432:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8004436:	f041 0101 	orr.w	r1, r1, #1
 800443a:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 800443e:	2033      	movs	r0, #51	; 0x33
 8004440:	f005 fd7a 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004444:	211d      	movs	r1, #29
 8004446:	203b      	movs	r0, #59	; 0x3b
 8004448:	f005 fd76 	bl	8009f38 <SX1276Write>
 800444c:	e7ce      	b.n	80043ec <SX1276Send+0xac>
                SX1276SetStby( );
 800444e:	f7ff ff01 	bl	8004254 <SX1276SetStby>
                DelayMs( 1 );
 8004452:	2001      	movs	r0, #1
 8004454:	f005 fcbf 	bl	8009dd6 <DelayMs>
 8004458:	e7de      	b.n	8004418 <SX1276Send+0xd8>
 800445a:	bf00      	nop
 800445c:	20000cb4 	.word	0x20000cb4
 8004460:	20000bb4 	.word	0x20000bb4

08004464 <SX1276SetRx>:
{
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	4604      	mov	r4, r0
    TimerStop( &TxTimeoutTimer );
 8004468:	489d      	ldr	r0, [pc, #628]	; (80046e0 <SX1276SetRx+0x27c>)
 800446a:	f7ff fafd 	bl	8003a68 <TimerStop>
    switch( SX1276.Settings.Modem )
 800446e:	4b9d      	ldr	r3, [pc, #628]	; (80046e4 <SX1276SetRx+0x280>)
 8004470:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004474:	b1e3      	cbz	r3, 80044b0 <SX1276SetRx+0x4c>
 8004476:	2b01      	cmp	r3, #1
 8004478:	d045      	beq.n	8004506 <SX1276SetRx+0xa2>
 800447a:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 800447c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004480:	2100      	movs	r1, #0
 8004482:	4899      	ldr	r0, [pc, #612]	; (80046e8 <SX1276SetRx+0x284>)
 8004484:	f006 fe4f 	bl	800b126 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8004488:	4b96      	ldr	r3, [pc, #600]	; (80046e4 <SX1276SetRx+0x280>)
 800448a:	2201      	movs	r2, #1
 800448c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if( timeout != 0 )
 8004490:	2c00      	cmp	r4, #0
 8004492:	f040 8107 	bne.w	80046a4 <SX1276SetRx+0x240>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8004496:	4b93      	ldr	r3, [pc, #588]	; (80046e4 <SX1276SetRx+0x280>)
 8004498:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 810a 	beq.w	80046b6 <SX1276SetRx+0x252>
        if( rxContinuous == true )
 80044a2:	2e00      	cmp	r6, #0
 80044a4:	f000 8118 	beq.w	80046d8 <SX1276SetRx+0x274>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80044a8:	2005      	movs	r0, #5
 80044aa:	f005 fd5d 	bl	8009f68 <SX1276SetOpMode>
}
 80044ae:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80044b0:	4d8c      	ldr	r5, [pc, #560]	; (80046e4 <SX1276SetRx+0x280>)
 80044b2:	f895 6102 	ldrb.w	r6, [r5, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80044b6:	2040      	movs	r0, #64	; 0x40
 80044b8:	f005 fd4a 	bl	8009f50 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 80044bc:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80044c0:	f041 010c 	orr.w	r1, r1, #12
 80044c4:	2040      	movs	r0, #64	; 0x40
 80044c6:	f005 fd37 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80044ca:	2041      	movs	r0, #65	; 0x41
 80044cc:	f005 fd40 	bl	8009f50 <SX1276Read>
 80044d0:	f060 013e 	orn	r1, r0, #62	; 0x3e
 80044d4:	b2c9      	uxtb	r1, r1
 80044d6:	2041      	movs	r0, #65	; 0x41
 80044d8:	f005 fd2e 	bl	8009f38 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80044dc:	2035      	movs	r0, #53	; 0x35
 80044de:	f005 fd37 	bl	8009f50 <SX1276Read>
 80044e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80044e6:	f885 011a 	strb.w	r0, [r5, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80044ea:	211e      	movs	r1, #30
 80044ec:	200d      	movs	r0, #13
 80044ee:	f005 fd23 	bl	8009f38 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80044f2:	2300      	movs	r3, #0
 80044f4:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80044f8:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80044fc:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8004500:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
        break;
 8004504:	e7ba      	b.n	800447c <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004506:	4b77      	ldr	r3, [pc, #476]	; (80046e4 <SX1276SetRx+0x280>)
 8004508:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800450c:	b353      	cbz	r3, 8004564 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800450e:	2033      	movs	r0, #51	; 0x33
 8004510:	f005 fd1e 	bl	8009f50 <SX1276Read>
 8004514:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8004518:	b2c9      	uxtb	r1, r1
 800451a:	2033      	movs	r0, #51	; 0x33
 800451c:	f005 fd0c 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8004520:	2119      	movs	r1, #25
 8004522:	203b      	movs	r0, #59	; 0x3b
 8004524:	f005 fd08 	bl	8009f38 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8004528:	4b6e      	ldr	r3, [pc, #440]	; (80046e4 <SX1276SetRx+0x280>)
 800452a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800452e:	2b08      	cmp	r3, #8
 8004530:	f200 8087 	bhi.w	8004642 <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8004534:	2031      	movs	r0, #49	; 0x31
 8004536:	f005 fd0b 	bl	8009f50 <SX1276Read>
 800453a:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800453e:	2031      	movs	r0, #49	; 0x31
 8004540:	f005 fcfa 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8004544:	2100      	movs	r1, #0
 8004546:	2030      	movs	r0, #48	; 0x30
 8004548:	f005 fcf6 	bl	8009f38 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800454c:	4b65      	ldr	r3, [pc, #404]	; (80046e4 <SX1276SetRx+0x280>)
 800454e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004552:	2b08      	cmp	r3, #8
 8004554:	d87e      	bhi.n	8004654 <SX1276SetRx+0x1f0>
 8004556:	e8df f003 	tbb	[pc, r3]
 800455a:	2417      	.short	0x2417
 800455c:	584b3e31 	.word	0x584b3e31
 8004560:	6a65      	.short	0x6a65
 8004562:	6f          	.byte	0x6f
 8004563:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8004564:	2033      	movs	r0, #51	; 0x33
 8004566:	f005 fcf3 	bl	8009f50 <SX1276Read>
 800456a:	b241      	sxtb	r1, r0
 800456c:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8004570:	f041 0101 	orr.w	r1, r1, #1
 8004574:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8004578:	2033      	movs	r0, #51	; 0x33
 800457a:	f005 fcdd 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800457e:	211d      	movs	r1, #29
 8004580:	203b      	movs	r0, #59	; 0x3b
 8004582:	f005 fcd9 	bl	8009f38 <SX1276Write>
 8004586:	e7cf      	b.n	8004528 <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8004588:	2148      	movs	r1, #72	; 0x48
 800458a:	202f      	movs	r0, #47	; 0x2f
 800458c:	f005 fcd4 	bl	8009f38 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8004590:	4b54      	ldr	r3, [pc, #336]	; (80046e4 <SX1276SetRx+0x280>)
 8004592:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004596:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 800459a:	3002      	adds	r0, #2
 800459c:	f7ff fb0c 	bl	8003bb8 <SX1276SetChannel>
                    break;
 80045a0:	e058      	b.n	8004654 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80045a2:	2144      	movs	r1, #68	; 0x44
 80045a4:	202f      	movs	r0, #47	; 0x2f
 80045a6:	f005 fcc7 	bl	8009f38 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80045aa:	4b4e      	ldr	r3, [pc, #312]	; (80046e4 <SX1276SetRx+0x280>)
 80045ac:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 80045b0:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 80045b4:	3034      	adds	r0, #52	; 0x34
 80045b6:	f7ff faff 	bl	8003bb8 <SX1276SetChannel>
                    break;
 80045ba:	e04b      	b.n	8004654 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80045bc:	2144      	movs	r1, #68	; 0x44
 80045be:	202f      	movs	r0, #47	; 0x2f
 80045c0:	f005 fcba 	bl	8009f38 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 80045c4:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <SX1276SetRx+0x280>)
 80045c6:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 80045ca:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 80045ce:	3004      	adds	r0, #4
 80045d0:	f7ff faf2 	bl	8003bb8 <SX1276SetChannel>
                    break;
 80045d4:	e03e      	b.n	8004654 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80045d6:	2144      	movs	r1, #68	; 0x44
 80045d8:	202f      	movs	r0, #47	; 0x2f
 80045da:	f005 fcad 	bl	8009f38 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80045de:	4b41      	ldr	r3, [pc, #260]	; (80046e4 <SX1276SetRx+0x280>)
 80045e0:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 80045e4:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 80045e8:	305e      	adds	r0, #94	; 0x5e
 80045ea:	f7ff fae5 	bl	8003bb8 <SX1276SetChannel>
                    break;
 80045ee:	e031      	b.n	8004654 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80045f0:	2144      	movs	r1, #68	; 0x44
 80045f2:	202f      	movs	r0, #47	; 0x2f
 80045f4:	f005 fca0 	bl	8009f38 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 80045f8:	4b3a      	ldr	r3, [pc, #232]	; (80046e4 <SX1276SetRx+0x280>)
 80045fa:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 80045fe:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8004602:	3012      	adds	r0, #18
 8004604:	f7ff fad8 	bl	8003bb8 <SX1276SetChannel>
                    break;
 8004608:	e024      	b.n	8004654 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800460a:	2144      	movs	r1, #68	; 0x44
 800460c:	202f      	movs	r0, #47	; 0x2f
 800460e:	f005 fc93 	bl	8009f38 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8004612:	4b34      	ldr	r3, [pc, #208]	; (80046e4 <SX1276SetRx+0x280>)
 8004614:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004618:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 800461c:	30c6      	adds	r0, #198	; 0xc6
 800461e:	f7ff facb 	bl	8003bb8 <SX1276SetChannel>
                    break;
 8004622:	e017      	b.n	8004654 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8004624:	2140      	movs	r1, #64	; 0x40
 8004626:	202f      	movs	r0, #47	; 0x2f
 8004628:	f005 fc86 	bl	8009f38 <SX1276Write>
                    break;
 800462c:	e012      	b.n	8004654 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800462e:	2140      	movs	r1, #64	; 0x40
 8004630:	202f      	movs	r0, #47	; 0x2f
 8004632:	f005 fc81 	bl	8009f38 <SX1276Write>
                    break;
 8004636:	e00d      	b.n	8004654 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8004638:	2140      	movs	r1, #64	; 0x40
 800463a:	202f      	movs	r0, #47	; 0x2f
 800463c:	f005 fc7c 	bl	8009f38 <SX1276Write>
                    break;
 8004640:	e008      	b.n	8004654 <SX1276SetRx+0x1f0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8004642:	2031      	movs	r0, #49	; 0x31
 8004644:	f005 fc84 	bl	8009f50 <SX1276Read>
 8004648:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800464c:	b2c9      	uxtb	r1, r1
 800464e:	2031      	movs	r0, #49	; 0x31
 8004650:	f005 fc72 	bl	8009f38 <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8004654:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <SX1276SetRx+0x280>)
 8004656:	f893 6132 	ldrb.w	r6, [r3, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800465a:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 800465e:	b1a3      	cbz	r3, 800468a <SX1276SetRx+0x226>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8004660:	211d      	movs	r1, #29
 8004662:	2011      	movs	r0, #17
 8004664:	f005 fc68 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8004668:	2040      	movs	r0, #64	; 0x40
 800466a:	f005 fc71 	bl	8009f50 <SX1276Read>
 800466e:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8004672:	2040      	movs	r0, #64	; 0x40
 8004674:	f005 fc60 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8004678:	2100      	movs	r1, #0
 800467a:	200f      	movs	r0, #15
 800467c:	f005 fc5c 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004680:	2100      	movs	r1, #0
 8004682:	200d      	movs	r0, #13
 8004684:	f005 fc58 	bl	8009f38 <SX1276Write>
        break;
 8004688:	e6f8      	b.n	800447c <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800468a:	211f      	movs	r1, #31
 800468c:	2011      	movs	r0, #17
 800468e:	f005 fc53 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8004692:	2040      	movs	r0, #64	; 0x40
 8004694:	f005 fc5c 	bl	8009f50 <SX1276Read>
 8004698:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 800469c:	2040      	movs	r0, #64	; 0x40
 800469e:	f005 fc4b 	bl	8009f38 <SX1276Write>
 80046a2:	e7e9      	b.n	8004678 <SX1276SetRx+0x214>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80046a4:	4d11      	ldr	r5, [pc, #68]	; (80046ec <SX1276SetRx+0x288>)
 80046a6:	4621      	mov	r1, r4
 80046a8:	4628      	mov	r0, r5
 80046aa:	f005 fb6d 	bl	8009d88 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80046ae:	4628      	mov	r0, r5
 80046b0:	f7ff f960 	bl	8003974 <TimerStart>
 80046b4:	e6ef      	b.n	8004496 <SX1276SetRx+0x32>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80046b6:	2005      	movs	r0, #5
 80046b8:	f005 fc56 	bl	8009f68 <SX1276SetOpMode>
        if( rxContinuous == false )
 80046bc:	2e00      	cmp	r6, #0
 80046be:	f47f aef6 	bne.w	80044ae <SX1276SetRx+0x4a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 80046c2:	4c0b      	ldr	r4, [pc, #44]	; (80046f0 <SX1276SetRx+0x28c>)
 80046c4:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <SX1276SetRx+0x280>)
 80046c6:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80046ca:	4620      	mov	r0, r4
 80046cc:	f005 fb5c 	bl	8009d88 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 80046d0:	4620      	mov	r0, r4
 80046d2:	f7ff f94f 	bl	8003974 <TimerStart>
 80046d6:	e6ea      	b.n	80044ae <SX1276SetRx+0x4a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80046d8:	2006      	movs	r0, #6
 80046da:	f005 fc45 	bl	8009f68 <SX1276SetOpMode>
}
 80046de:	e6e6      	b.n	80044ae <SX1276SetRx+0x4a>
 80046e0:	20000df8 	.word	0x20000df8
 80046e4:	20000cb4 	.word	0x20000cb4
 80046e8:	20000bb4 	.word	0x20000bb4
 80046ec:	20000b9c 	.word	0x20000b9c
 80046f0:	20000b84 	.word	0x20000b84

080046f4 <SX1276ReadRssi>:
{
 80046f4:	b508      	push	{r3, lr}
    switch( modem )
 80046f6:	b120      	cbz	r0, 8004702 <SX1276ReadRssi+0xe>
 80046f8:	2801      	cmp	r0, #1
 80046fa:	d00a      	beq.n	8004712 <SX1276ReadRssi+0x1e>
 80046fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004700:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004702:	2011      	movs	r0, #17
 8004704:	f005 fc24 	bl	8009f50 <SX1276Read>
 8004708:	f3c0 0047 	ubfx	r0, r0, #1, #8
 800470c:	4240      	negs	r0, r0
 800470e:	b200      	sxth	r0, r0
        break;
 8004710:	e7f6      	b.n	8004700 <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <SX1276ReadRssi+0x48>)
 8004714:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004718:	4b09      	ldr	r3, [pc, #36]	; (8004740 <SX1276ReadRssi+0x4c>)
 800471a:	429a      	cmp	r2, r3
 800471c:	d906      	bls.n	800472c <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800471e:	201b      	movs	r0, #27
 8004720:	f005 fc16 	bl	8009f50 <SX1276Read>
 8004724:	b280      	uxth	r0, r0
 8004726:	389d      	subs	r0, #157	; 0x9d
 8004728:	b200      	sxth	r0, r0
 800472a:	e7e9      	b.n	8004700 <SX1276ReadRssi+0xc>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800472c:	201b      	movs	r0, #27
 800472e:	f005 fc0f 	bl	8009f50 <SX1276Read>
 8004732:	b280      	uxth	r0, r0
 8004734:	38a4      	subs	r0, #164	; 0xa4
 8004736:	b200      	sxth	r0, r0
 8004738:	e7e2      	b.n	8004700 <SX1276ReadRssi+0xc>
 800473a:	bf00      	nop
 800473c:	20000cb4 	.word	0x20000cb4
 8004740:	1f4add40 	.word	0x1f4add40

08004744 <SX1276SetModem>:
{
 8004744:	b510      	push	{r4, lr}
 8004746:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8004748:	2001      	movs	r0, #1
 800474a:	f005 fc01 	bl	8009f50 <SX1276Read>
 800474e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004752:	d121      	bne.n	8004798 <SX1276SetModem+0x54>
        SX1276.Settings.Modem = MODEM_FSK;
 8004754:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <SX1276SetModem+0x88>)
 8004756:	2200      	movs	r2, #0
 8004758:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    if( SX1276.Settings.Modem == modem )
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <SX1276SetModem+0x88>)
 800475e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004762:	42a3      	cmp	r3, r4
 8004764:	d017      	beq.n	8004796 <SX1276SetModem+0x52>
    SX1276.Settings.Modem = modem;
 8004766:	4b19      	ldr	r3, [pc, #100]	; (80047cc <SX1276SetModem+0x88>)
 8004768:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 800476c:	2c01      	cmp	r4, #1
 800476e:	d018      	beq.n	80047a2 <SX1276SetModem+0x5e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004770:	2000      	movs	r0, #0
 8004772:	f005 fbf9 	bl	8009f68 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8004776:	2001      	movs	r0, #1
 8004778:	f005 fbea 	bl	8009f50 <SX1276Read>
 800477c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8004780:	2001      	movs	r0, #1
 8004782:	f005 fbd9 	bl	8009f38 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004786:	2100      	movs	r1, #0
 8004788:	2040      	movs	r0, #64	; 0x40
 800478a:	f005 fbd5 	bl	8009f38 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800478e:	2130      	movs	r1, #48	; 0x30
 8004790:	2041      	movs	r0, #65	; 0x41
 8004792:	f005 fbd1 	bl	8009f38 <SX1276Write>
}
 8004796:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 8004798:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <SX1276SetModem+0x88>)
 800479a:	2201      	movs	r2, #1
 800479c:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 80047a0:	e7dc      	b.n	800475c <SX1276SetModem+0x18>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80047a2:	2000      	movs	r0, #0
 80047a4:	f005 fbe0 	bl	8009f68 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80047a8:	2001      	movs	r0, #1
 80047aa:	f005 fbd1 	bl	8009f50 <SX1276Read>
 80047ae:	f060 017f 	orn	r1, r0, #127	; 0x7f
 80047b2:	b2c9      	uxtb	r1, r1
 80047b4:	2001      	movs	r0, #1
 80047b6:	f005 fbbf 	bl	8009f38 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80047ba:	2100      	movs	r1, #0
 80047bc:	2040      	movs	r0, #64	; 0x40
 80047be:	f005 fbbb 	bl	8009f38 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80047c2:	2100      	movs	r1, #0
 80047c4:	2041      	movs	r0, #65	; 0x41
 80047c6:	f005 fbb7 	bl	8009f38 <SX1276Write>
        break;
 80047ca:	e7e4      	b.n	8004796 <SX1276SetModem+0x52>
 80047cc:	20000cb4 	.word	0x20000cb4

080047d0 <SX1276Init>:
{
 80047d0:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 80047d2:	4b19      	ldr	r3, [pc, #100]	; (8004838 <SX1276Init+0x68>)
 80047d4:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80047d6:	4c19      	ldr	r4, [pc, #100]	; (800483c <SX1276Init+0x6c>)
 80047d8:	4621      	mov	r1, r4
 80047da:	4819      	ldr	r0, [pc, #100]	; (8004840 <SX1276Init+0x70>)
 80047dc:	f005 facb 	bl	8009d76 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80047e0:	4621      	mov	r1, r4
 80047e2:	4818      	ldr	r0, [pc, #96]	; (8004844 <SX1276Init+0x74>)
 80047e4:	f005 fac7 	bl	8009d76 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80047e8:	4621      	mov	r1, r4
 80047ea:	4817      	ldr	r0, [pc, #92]	; (8004848 <SX1276Init+0x78>)
 80047ec:	f005 fac3 	bl	8009d76 <TimerInit>
    SX1276Reset( );
 80047f0:	f7fe ff2a 	bl	8003648 <SX1276Reset>
    RxChainCalibration( );
 80047f4:	f7ff fccc 	bl	8004190 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80047f8:	2000      	movs	r0, #0
 80047fa:	f005 fbb5 	bl	8009f68 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
 80047fe:	4813      	ldr	r0, [pc, #76]	; (800484c <SX1276Init+0x7c>)
 8004800:	f7fe ff5a 	bl	80036b8 <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004804:	2400      	movs	r4, #0
 8004806:	e00c      	b.n	8004822 <SX1276Init+0x52>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8004808:	4a11      	ldr	r2, [pc, #68]	; (8004850 <SX1276Init+0x80>)
 800480a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800480e:	18d5      	adds	r5, r2, r3
 8004810:	5cd0      	ldrb	r0, [r2, r3]
 8004812:	f7ff ff97 	bl	8004744 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004816:	78a9      	ldrb	r1, [r5, #2]
 8004818:	7868      	ldrb	r0, [r5, #1]
 800481a:	f005 fb8d 	bl	8009f38 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800481e:	3401      	adds	r4, #1
 8004820:	b2e4      	uxtb	r4, r4
 8004822:	2c0f      	cmp	r4, #15
 8004824:	d9f0      	bls.n	8004808 <SX1276Init+0x38>
    SX1276SetModem( MODEM_FSK );
 8004826:	2000      	movs	r0, #0
 8004828:	f7ff ff8c 	bl	8004744 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <SX1276Init+0x84>)
 800482e:	2200      	movs	r2, #0
 8004830:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8004834:	bd38      	pop	{r3, r4, r5, pc}
 8004836:	bf00      	nop
 8004838:	20000b80 	.word	0x20000b80
 800483c:	08004e51 	.word	0x08004e51
 8004840:	20000df8 	.word	0x20000df8
 8004844:	20000b9c 	.word	0x20000b9c
 8004848:	20000b84 	.word	0x20000b84
 800484c:	200002a8 	.word	0x200002a8
 8004850:	0800c290 	.word	0x0800c290
 8004854:	20000cb4 	.word	0x20000cb4

08004858 <SX1276SetRxConfig>:
{
 8004858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485c:	b085      	sub	sp, #20
 800485e:	4604      	mov	r4, r0
 8004860:	9101      	str	r1, [sp, #4]
 8004862:	4615      	mov	r5, r2
 8004864:	9303      	str	r3, [sp, #12]
 8004866:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 800486a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 800486e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8004872:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8004876:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 800487a:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 800487e:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8004882:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
 8004884:	f7ff ff5e 	bl	8004744 <SX1276SetModem>
    switch( modem )
 8004888:	b124      	cbz	r4, 8004894 <SX1276SetRxConfig+0x3c>
 800488a:	2c01      	cmp	r4, #1
 800488c:	d069      	beq.n	8004962 <SX1276SetRxConfig+0x10a>
}
 800488e:	b005      	add	sp, #20
 8004890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004894:	4ba0      	ldr	r3, [pc, #640]	; (8004b18 <SX1276SetRxConfig+0x2c0>)
 8004896:	9c01      	ldr	r4, [sp, #4]
 8004898:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 800489c:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80048a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048a2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 80048a6:	f883 70fe 	strb.w	r7, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80048aa:	f883 90ff 	strb.w	r9, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80048ae:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80048b2:	f883 b101 	strb.w	fp, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80048b6:	9a02      	ldr	r2, [sp, #8]
 80048b8:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80048bc:	f8a3 80fc 	strh.w	r8, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80048c0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80048c4:	fb02 fa0a 	mul.w	sl, r2, sl
 80048c8:	fbba f2f5 	udiv	r2, sl, r5
 80048cc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 80048d0:	4b92      	ldr	r3, [pc, #584]	; (8004b1c <SX1276SetRxConfig+0x2c4>)
 80048d2:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 80048d6:	f3c5 2107 	ubfx	r1, r5, #8, #8
 80048da:	2002      	movs	r0, #2
 80048dc:	f005 fb2c 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 80048e0:	b2e9      	uxtb	r1, r5
 80048e2:	2003      	movs	r0, #3
 80048e4:	f005 fb28 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80048e8:	4620      	mov	r0, r4
 80048ea:	f7ff f911 	bl	8003b10 <GetFskBandwidthRegValue>
 80048ee:	4601      	mov	r1, r0
 80048f0:	2012      	movs	r0, #18
 80048f2:	f005 fb21 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80048f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80048f8:	f7ff f90a 	bl	8003b10 <GetFskBandwidthRegValue>
 80048fc:	4601      	mov	r1, r0
 80048fe:	2013      	movs	r0, #19
 8004900:	f005 fb1a 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8004904:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8004908:	2025      	movs	r0, #37	; 0x25
 800490a:	f005 fb15 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800490e:	fa5f f188 	uxtb.w	r1, r8
 8004912:	2026      	movs	r0, #38	; 0x26
 8004914:	f005 fb10 	bl	8009f38 <SX1276Write>
            if( fixLen == 1 )
 8004918:	b1df      	cbz	r7, 8004952 <SX1276SetRxConfig+0xfa>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800491a:	4649      	mov	r1, r9
 800491c:	2032      	movs	r0, #50	; 0x32
 800491e:	f005 fb0b 	bl	8009f38 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004922:	2030      	movs	r0, #48	; 0x30
 8004924:	f005 fb14 	bl	8009f50 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8004928:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800492c:	b1b7      	cbz	r7, 800495c <SX1276SetRxConfig+0x104>
 800492e:	2300      	movs	r3, #0
 8004930:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8004932:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8004936:	b2c9      	uxtb	r1, r1
 8004938:	2030      	movs	r0, #48	; 0x30
 800493a:	f005 fafd 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800493e:	2031      	movs	r0, #49	; 0x31
 8004940:	f005 fb06 	bl	8009f50 <SX1276Read>
 8004944:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8004948:	b2c9      	uxtb	r1, r1
 800494a:	2031      	movs	r0, #49	; 0x31
 800494c:	f005 faf4 	bl	8009f38 <SX1276Write>
        break;
 8004950:	e79d      	b.n	800488e <SX1276SetRxConfig+0x36>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8004952:	21ff      	movs	r1, #255	; 0xff
 8004954:	2032      	movs	r0, #50	; 0x32
 8004956:	f005 faef 	bl	8009f38 <SX1276Write>
 800495a:	e7e2      	b.n	8004922 <SX1276SetRxConfig+0xca>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800495c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004960:	e7e6      	b.n	8004930 <SX1276SetRxConfig+0xd8>
            if( bandwidth > 2 )
 8004962:	9b01      	ldr	r3, [sp, #4]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d900      	bls.n	800496a <SX1276SetRxConfig+0x112>
                while( 1 );
 8004968:	e7fe      	b.n	8004968 <SX1276SetRxConfig+0x110>
            bandwidth += 7;
 800496a:	9c01      	ldr	r4, [sp, #4]
 800496c:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800496e:	4b6a      	ldr	r3, [pc, #424]	; (8004b18 <SX1276SetRxConfig+0x2c0>)
 8004970:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8004974:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8004978:	9a03      	ldr	r2, [sp, #12]
 800497a:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800497e:	f8a3 812a 	strh.w	r8, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8004982:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8004986:	f883 912d 	strb.w	r9, [r3, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800498a:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800498e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8004992:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8004996:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800499a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800499e:	f883 b131 	strb.w	fp, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80049a2:	9a02      	ldr	r2, [sp, #8]
 80049a4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            if( datarate > 12 )
 80049a8:	2d0c      	cmp	r5, #12
 80049aa:	d803      	bhi.n	80049b4 <SX1276SetRxConfig+0x15c>
            else if( datarate < 6 )
 80049ac:	2d05      	cmp	r5, #5
 80049ae:	d802      	bhi.n	80049b6 <SX1276SetRxConfig+0x15e>
                datarate = 6;
 80049b0:	2506      	movs	r5, #6
 80049b2:	e000      	b.n	80049b6 <SX1276SetRxConfig+0x15e>
                datarate = 12;
 80049b4:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80049b6:	2c07      	cmp	r4, #7
 80049b8:	d063      	beq.n	8004a82 <SX1276SetRxConfig+0x22a>
 80049ba:	2c08      	cmp	r4, #8
 80049bc:	d06a      	beq.n	8004a94 <SX1276SetRxConfig+0x23c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80049be:	4b56      	ldr	r3, [pc, #344]	; (8004b18 <SX1276SetRxConfig+0x2c0>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80049c6:	201d      	movs	r0, #29
 80049c8:	f005 fac2 	bl	8009f50 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80049cc:	0123      	lsls	r3, r4, #4
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	9b03      	ldr	r3, [sp, #12]
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 80049d8:	ea43 0107 	orr.w	r1, r3, r7
 80049dc:	201d      	movs	r0, #29
 80049de:	f005 faab 	bl	8009f38 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80049e2:	201e      	movs	r0, #30
 80049e4:	f005 fab4 	bl	8009f50 <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80049e8:	f000 0308 	and.w	r3, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80049ec:	012a      	lsls	r2, r5, #4
 80049ee:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 80049f0:	431a      	orrs	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80049f2:	00b3      	lsls	r3, r6, #2
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80049f8:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 80049fc:	4319      	orrs	r1, r3
 80049fe:	201e      	movs	r0, #30
 8004a00:	f005 fa9a 	bl	8009f38 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004a04:	2026      	movs	r0, #38	; 0x26
 8004a06:	f005 faa3 	bl	8009f50 <SX1276Read>
 8004a0a:	b241      	sxtb	r1, r0
 8004a0c:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8004a10:	4b41      	ldr	r3, [pc, #260]	; (8004b18 <SX1276SetRxConfig+0x2c0>)
 8004a12:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8004a16:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8004a1a:	b2c9      	uxtb	r1, r1
 8004a1c:	2026      	movs	r0, #38	; 0x26
 8004a1e:	f005 fa8b 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8004a22:	fa5f f18a 	uxtb.w	r1, sl
 8004a26:	201f      	movs	r0, #31
 8004a28:	f005 fa86 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8004a2c:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8004a30:	2020      	movs	r0, #32
 8004a32:	f005 fa81 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8004a36:	fa5f f188 	uxtb.w	r1, r8
 8004a3a:	2021      	movs	r0, #33	; 0x21
 8004a3c:	f005 fa7c 	bl	8009f38 <SX1276Write>
            if( fixLen == 1 )
 8004a40:	bb5f      	cbnz	r7, 8004a9a <SX1276SetRxConfig+0x242>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004a42:	4b35      	ldr	r3, [pc, #212]	; (8004b18 <SX1276SetRxConfig+0x2c0>)
 8004a44:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8004a48:	bb63      	cbnz	r3, 8004aa4 <SX1276SetRxConfig+0x24c>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8004a4a:	2c09      	cmp	r4, #9
 8004a4c:	d03a      	beq.n	8004ac4 <SX1276SetRxConfig+0x26c>
            else if( bandwidth == 9 )
 8004a4e:	2c09      	cmp	r4, #9
 8004a50:	d047      	beq.n	8004ae2 <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8004a52:	2103      	movs	r1, #3
 8004a54:	2036      	movs	r0, #54	; 0x36
 8004a56:	f005 fa6f 	bl	8009f38 <SX1276Write>
            if( datarate == 6 )
 8004a5a:	2d06      	cmp	r5, #6
 8004a5c:	d04a      	beq.n	8004af4 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004a5e:	2031      	movs	r0, #49	; 0x31
 8004a60:	f005 fa76 	bl	8009f50 <SX1276Read>
 8004a64:	b241      	sxtb	r1, r0
 8004a66:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004a6a:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004a6e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8004a72:	2031      	movs	r0, #49	; 0x31
 8004a74:	f005 fa60 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004a78:	210a      	movs	r1, #10
 8004a7a:	2037      	movs	r0, #55	; 0x37
 8004a7c:	f005 fa5c 	bl	8009f38 <SX1276Write>
}
 8004a80:	e705      	b.n	800488e <SX1276SetRxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004a82:	f1a5 030b 	sub.w	r3, r5, #11
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d897      	bhi.n	80049ba <SX1276SetRxConfig+0x162>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8004a8a:	4b23      	ldr	r3, [pc, #140]	; (8004b18 <SX1276SetRxConfig+0x2c0>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8004a92:	e798      	b.n	80049c6 <SX1276SetRxConfig+0x16e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8004a94:	2d0c      	cmp	r5, #12
 8004a96:	d192      	bne.n	80049be <SX1276SetRxConfig+0x166>
 8004a98:	e7f7      	b.n	8004a8a <SX1276SetRxConfig+0x232>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	2022      	movs	r0, #34	; 0x22
 8004a9e:	f005 fa4b 	bl	8009f38 <SX1276Write>
 8004aa2:	e7ce      	b.n	8004a42 <SX1276SetRxConfig+0x1ea>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8004aa4:	2044      	movs	r0, #68	; 0x44
 8004aa6:	f005 fa53 	bl	8009f50 <SX1276Read>
 8004aaa:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8004aae:	b2c9      	uxtb	r1, r1
 8004ab0:	2044      	movs	r0, #68	; 0x44
 8004ab2:	f005 fa41 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8004ab6:	4b18      	ldr	r3, [pc, #96]	; (8004b18 <SX1276SetRxConfig+0x2c0>)
 8004ab8:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8004abc:	2024      	movs	r0, #36	; 0x24
 8004abe:	f005 fa3b 	bl	8009f38 <SX1276Write>
 8004ac2:	e7c2      	b.n	8004a4a <SX1276SetRxConfig+0x1f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8004ac4:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <SX1276SetRxConfig+0x2c0>)
 8004ac6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004aca:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <SX1276SetRxConfig+0x2c8>)
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d9be      	bls.n	8004a4e <SX1276SetRxConfig+0x1f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	2036      	movs	r0, #54	; 0x36
 8004ad4:	f005 fa30 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8004ad8:	2164      	movs	r1, #100	; 0x64
 8004ada:	203a      	movs	r0, #58	; 0x3a
 8004adc:	f005 fa2c 	bl	8009f38 <SX1276Write>
 8004ae0:	e7bb      	b.n	8004a5a <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8004ae2:	2102      	movs	r1, #2
 8004ae4:	2036      	movs	r0, #54	; 0x36
 8004ae6:	f005 fa27 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8004aea:	217f      	movs	r1, #127	; 0x7f
 8004aec:	203a      	movs	r0, #58	; 0x3a
 8004aee:	f005 fa23 	bl	8009f38 <SX1276Write>
 8004af2:	e7b2      	b.n	8004a5a <SX1276SetRxConfig+0x202>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004af4:	2031      	movs	r0, #49	; 0x31
 8004af6:	f005 fa2b 	bl	8009f50 <SX1276Read>
 8004afa:	b241      	sxtb	r1, r0
 8004afc:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004b00:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004b04:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8004b08:	2031      	movs	r0, #49	; 0x31
 8004b0a:	f005 fa15 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004b0e:	210c      	movs	r1, #12
 8004b10:	2037      	movs	r0, #55	; 0x37
 8004b12:	f005 fa11 	bl	8009f38 <SX1276Write>
 8004b16:	e6ba      	b.n	800488e <SX1276SetRxConfig+0x36>
 8004b18:	20000cb4 	.word	0x20000cb4
 8004b1c:	01e84800 	.word	0x01e84800
 8004b20:	1f4add40 	.word	0x1f4add40

08004b24 <SX1276SetTxConfig>:
{
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	460d      	mov	r5, r1
 8004b2e:	9201      	str	r2, [sp, #4]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8004b36:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 8004b3a:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 8004b3e:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8004b42:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 8004b46:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    SX1276SetModem( modem );
 8004b4a:	f7ff fdfb 	bl	8004744 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f005 f8a8 	bl	8009ca4 <SX1276SetRfTxPower>
    switch( modem )
 8004b54:	b124      	cbz	r4, 8004b60 <SX1276SetTxConfig+0x3c>
 8004b56:	2c01      	cmp	r4, #1
 8004b58:	d057      	beq.n	8004c0a <SX1276SetTxConfig+0xe6>
}
 8004b5a:	b003      	add	sp, #12
 8004b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 8004b60:	4b81      	ldr	r3, [pc, #516]	; (8004d68 <SX1276SetTxConfig+0x244>)
 8004b62:	f883 50e8 	strb.w	r5, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Fdev = fdev;
 8004b66:	9801      	ldr	r0, [sp, #4]
 8004b68:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004b6c:	9a00      	ldr	r2, [sp, #0]
 8004b6e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8004b72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b74:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004b78:	f8a3 70fc 	strh.w	r7, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 8004b7c:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8004b80:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8004b84:	f883 a101 	strb.w	sl, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8004b88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004b8a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 8004b8e:	f7fe ffab 	bl	8003ae8 <SX1276ConvertFreqInHzToPllStep>
 8004b92:	4604      	mov	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8004b94:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8004b98:	2004      	movs	r0, #4
 8004b9a:	f005 f9cd 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8004b9e:	b2e1      	uxtb	r1, r4
 8004ba0:	2005      	movs	r0, #5
 8004ba2:	f005 f9c9 	bl	8009f38 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8004ba6:	4c71      	ldr	r4, [pc, #452]	; (8004d6c <SX1276SetTxConfig+0x248>)
 8004ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004baa:	fbb4 f4f3 	udiv	r4, r4, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8004bae:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8004bb2:	2002      	movs	r0, #2
 8004bb4:	f005 f9c0 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8004bb8:	b2e1      	uxtb	r1, r4
 8004bba:	2003      	movs	r0, #3
 8004bbc:	f005 f9bc 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8004bc0:	0a39      	lsrs	r1, r7, #8
 8004bc2:	2025      	movs	r0, #37	; 0x25
 8004bc4:	f005 f9b8 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8004bc8:	b2f9      	uxtb	r1, r7
 8004bca:	2026      	movs	r0, #38	; 0x26
 8004bcc:	f005 f9b4 	bl	8009f38 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004bd0:	2030      	movs	r0, #48	; 0x30
 8004bd2:	f005 f9bd 	bl	8009f50 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8004bd6:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004bda:	f1b8 0f00 	cmp.w	r8, #0
 8004bde:	d011      	beq.n	8004c04 <SX1276SetTxConfig+0xe0>
 8004be0:	2300      	movs	r3, #0
 8004be2:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8004be4:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8004be8:	b2c9      	uxtb	r1, r1
 8004bea:	2030      	movs	r0, #48	; 0x30
 8004bec:	f005 f9a4 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8004bf0:	2031      	movs	r0, #49	; 0x31
 8004bf2:	f005 f9ad 	bl	8009f50 <SX1276Read>
 8004bf6:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8004bfa:	b2c9      	uxtb	r1, r1
 8004bfc:	2031      	movs	r0, #49	; 0x31
 8004bfe:	f005 f99b 	bl	8009f38 <SX1276Write>
        break;
 8004c02:	e7aa      	b.n	8004b5a <SX1276SetTxConfig+0x36>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004c04:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004c08:	e7eb      	b.n	8004be2 <SX1276SetTxConfig+0xbe>
            SX1276.Settings.LoRa.Power = power;
 8004c0a:	4b57      	ldr	r3, [pc, #348]	; (8004d68 <SX1276SetTxConfig+0x244>)
 8004c0c:	f883 511c 	strb.w	r5, [r3, #284]	; 0x11c
            if( bandwidth > 2 )
 8004c10:	9b00      	ldr	r3, [sp, #0]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d900      	bls.n	8004c18 <SX1276SetTxConfig+0xf4>
                while( 1 );
 8004c16:	e7fe      	b.n	8004c16 <SX1276SetTxConfig+0xf2>
            bandwidth += 7;
 8004c18:	9c00      	ldr	r4, [sp, #0]
 8004c1a:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004c1c:	4b52      	ldr	r3, [pc, #328]	; (8004d68 <SX1276SetTxConfig+0x244>)
 8004c1e:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8004c22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c24:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8004c28:	f883 9129 	strb.w	r9, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8004c2c:	f8a3 712a 	strh.w	r7, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8004c30:	f883 812c 	strb.w	r8, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8004c34:	f883 b12f 	strb.w	fp, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8004c38:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8004c3c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8004c40:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8004c44:	f883 a131 	strb.w	sl, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8004c48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004c4a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            if( datarate > 12 )
 8004c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c50:	2b0c      	cmp	r3, #12
 8004c52:	d804      	bhi.n	8004c5e <SX1276SetTxConfig+0x13a>
            else if( datarate < 6 )
 8004c54:	2b05      	cmp	r3, #5
 8004c56:	d804      	bhi.n	8004c62 <SX1276SetTxConfig+0x13e>
                datarate = 6;
 8004c58:	2306      	movs	r3, #6
 8004c5a:	930c      	str	r3, [sp, #48]	; 0x30
 8004c5c:	e001      	b.n	8004c62 <SX1276SetTxConfig+0x13e>
                datarate = 12;
 8004c5e:	230c      	movs	r3, #12
 8004c60:	930c      	str	r3, [sp, #48]	; 0x30
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004c62:	2c07      	cmp	r4, #7
 8004c64:	d051      	beq.n	8004d0a <SX1276SetTxConfig+0x1e6>
 8004c66:	2c08      	cmp	r4, #8
 8004c68:	d058      	beq.n	8004d1c <SX1276SetTxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8004c6a:	4b3f      	ldr	r3, [pc, #252]	; (8004d68 <SX1276SetTxConfig+0x244>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004c72:	f1bb 0f00 	cmp.w	fp, #0
 8004c76:	d155      	bne.n	8004d24 <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8004c78:	201d      	movs	r0, #29
 8004c7a:	f005 f969 	bl	8009f50 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004c7e:	0123      	lsls	r3, r4, #4
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004c8a:	ea43 0108 	orr.w	r1, r3, r8
 8004c8e:	201d      	movs	r0, #29
 8004c90:	f005 f952 	bl	8009f38 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8004c94:	201e      	movs	r0, #30
 8004c96:	f005 f95b 	bl	8009f50 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 8004c9a:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8004c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8004ca4:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8004ca6:	00b3      	lsls	r3, r6, #2
 8004ca8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004caa:	4319      	orrs	r1, r3
 8004cac:	201e      	movs	r0, #30
 8004cae:	f005 f943 	bl	8009f38 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004cb2:	2026      	movs	r0, #38	; 0x26
 8004cb4:	f005 f94c 	bl	8009f50 <SX1276Read>
 8004cb8:	b241      	sxtb	r1, r0
 8004cba:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8004cbe:	4b2a      	ldr	r3, [pc, #168]	; (8004d68 <SX1276SetTxConfig+0x244>)
 8004cc0:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8004cc4:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8004cc8:	b2c9      	uxtb	r1, r1
 8004cca:	2026      	movs	r0, #38	; 0x26
 8004ccc:	f005 f934 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8004cd0:	0a39      	lsrs	r1, r7, #8
 8004cd2:	2020      	movs	r0, #32
 8004cd4:	f005 f930 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8004cd8:	b2f9      	uxtb	r1, r7
 8004cda:	2021      	movs	r0, #33	; 0x21
 8004cdc:	f005 f92c 	bl	8009f38 <SX1276Write>
            if( datarate == 6 )
 8004ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ce2:	2b06      	cmp	r3, #6
 8004ce4:	d02e      	beq.n	8004d44 <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004ce6:	2031      	movs	r0, #49	; 0x31
 8004ce8:	f005 f932 	bl	8009f50 <SX1276Read>
 8004cec:	b241      	sxtb	r1, r0
 8004cee:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004cf2:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004cf6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8004cfa:	2031      	movs	r0, #49	; 0x31
 8004cfc:	f005 f91c 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004d00:	210a      	movs	r1, #10
 8004d02:	2037      	movs	r0, #55	; 0x37
 8004d04:	f005 f918 	bl	8009f38 <SX1276Write>
}
 8004d08:	e727      	b.n	8004b5a <SX1276SetTxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d0c:	3b0b      	subs	r3, #11
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d8a9      	bhi.n	8004c66 <SX1276SetTxConfig+0x142>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <SX1276SetTxConfig+0x244>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8004d1a:	e7aa      	b.n	8004c72 <SX1276SetTxConfig+0x14e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8004d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d1e:	2b0c      	cmp	r3, #12
 8004d20:	d1a3      	bne.n	8004c6a <SX1276SetTxConfig+0x146>
 8004d22:	e7f6      	b.n	8004d12 <SX1276SetTxConfig+0x1ee>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8004d24:	2044      	movs	r0, #68	; 0x44
 8004d26:	f005 f913 	bl	8009f50 <SX1276Read>
 8004d2a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8004d2e:	b2c9      	uxtb	r1, r1
 8004d30:	2044      	movs	r0, #68	; 0x44
 8004d32:	f005 f901 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8004d36:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <SX1276SetTxConfig+0x244>)
 8004d38:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8004d3c:	2024      	movs	r0, #36	; 0x24
 8004d3e:	f005 f8fb 	bl	8009f38 <SX1276Write>
 8004d42:	e799      	b.n	8004c78 <SX1276SetTxConfig+0x154>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004d44:	2031      	movs	r0, #49	; 0x31
 8004d46:	f005 f903 	bl	8009f50 <SX1276Read>
 8004d4a:	b241      	sxtb	r1, r0
 8004d4c:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004d50:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004d54:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8004d58:	2031      	movs	r0, #49	; 0x31
 8004d5a:	f005 f8ed 	bl	8009f38 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004d5e:	210c      	movs	r1, #12
 8004d60:	2037      	movs	r0, #55	; 0x37
 8004d62:	f005 f8e9 	bl	8009f38 <SX1276Write>
 8004d66:	e6f8      	b.n	8004b5a <SX1276SetTxConfig+0x36>
 8004d68:	20000cb4 	.word	0x20000cb4
 8004d6c:	01e84800 	.word	0x01e84800

08004d70 <SX1276SetTxContinuousWave>:
{
 8004d70:	b530      	push	{r4, r5, lr}
 8004d72:	b08b      	sub	sp, #44	; 0x2c
 8004d74:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8004d76:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004d7a:	fb02 f404 	mul.w	r4, r2, r4
    SX1276SetChannel( freq );
 8004d7e:	f7fe ff1b 	bl	8003bb8 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8004d82:	9408      	str	r4, [sp, #32]
 8004d84:	2000      	movs	r0, #0
 8004d86:	9007      	str	r0, [sp, #28]
 8004d88:	9006      	str	r0, [sp, #24]
 8004d8a:	9005      	str	r0, [sp, #20]
 8004d8c:	9004      	str	r0, [sp, #16]
 8004d8e:	9003      	str	r0, [sp, #12]
 8004d90:	2305      	movs	r3, #5
 8004d92:	9302      	str	r3, [sp, #8]
 8004d94:	9001      	str	r0, [sp, #4]
 8004d96:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4602      	mov	r2, r0
 8004da0:	4629      	mov	r1, r5
 8004da2:	f7ff febf 	bl	8004b24 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8004da6:	2031      	movs	r0, #49	; 0x31
 8004da8:	f005 f8d2 	bl	8009f50 <SX1276Read>
 8004dac:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 8004db0:	2031      	movs	r0, #49	; 0x31
 8004db2:	f005 f8c1 	bl	8009f38 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8004db6:	21f0      	movs	r1, #240	; 0xf0
 8004db8:	2040      	movs	r0, #64	; 0x40
 8004dba:	f005 f8bd 	bl	8009f38 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8004dbe:	21a0      	movs	r1, #160	; 0xa0
 8004dc0:	2041      	movs	r0, #65	; 0x41
 8004dc2:	f005 f8b9 	bl	8009f38 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8004dc6:	4d08      	ldr	r5, [pc, #32]	; (8004de8 <SX1276SetTxContinuousWave+0x78>)
 8004dc8:	4621      	mov	r1, r4
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f004 ffdc 	bl	8009d88 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <SX1276SetTxContinuousWave+0x7c>)
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8004dd8:	4628      	mov	r0, r5
 8004dda:	f7fe fdcb 	bl	8003974 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8004dde:	2003      	movs	r0, #3
 8004de0:	f005 f8c2 	bl	8009f68 <SX1276SetOpMode>
}
 8004de4:	b00b      	add	sp, #44	; 0x2c
 8004de6:	bd30      	pop	{r4, r5, pc}
 8004de8:	20000df8 	.word	0x20000df8
 8004dec:	20000cb4 	.word	0x20000cb4

08004df0 <SX1276SetMaxPayloadLength>:
{
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4604      	mov	r4, r0
 8004df4:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 8004df6:	f7ff fca5 	bl	8004744 <SX1276SetModem>
    switch( modem )
 8004dfa:	b114      	cbz	r4, 8004e02 <SX1276SetMaxPayloadLength+0x12>
 8004dfc:	2c01      	cmp	r4, #1
 8004dfe:	d00a      	beq.n	8004e16 <SX1276SetMaxPayloadLength+0x26>
}
 8004e00:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8004e02:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <SX1276SetMaxPayloadLength+0x30>)
 8004e04:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f9      	bne.n	8004e00 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	2032      	movs	r0, #50	; 0x32
 8004e10:	f005 f892 	bl	8009f38 <SX1276Write>
 8004e14:	e7f4      	b.n	8004e00 <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004e16:	4629      	mov	r1, r5
 8004e18:	2023      	movs	r0, #35	; 0x23
 8004e1a:	f005 f88d 	bl	8009f38 <SX1276Write>
}
 8004e1e:	e7ef      	b.n	8004e00 <SX1276SetMaxPayloadLength+0x10>
 8004e20:	20000cb4 	.word	0x20000cb4

08004e24 <SX1276SetPublicNetwork>:
{
 8004e24:	b510      	push	{r4, lr}
 8004e26:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 8004e28:	2001      	movs	r0, #1
 8004e2a:	f7ff fc8b 	bl	8004744 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <SX1276SetPublicNetwork+0x28>)
 8004e30:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 8004e34:	b124      	cbz	r4, 8004e40 <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8004e36:	2134      	movs	r1, #52	; 0x34
 8004e38:	2039      	movs	r0, #57	; 0x39
 8004e3a:	f005 f87d 	bl	8009f38 <SX1276Write>
}
 8004e3e:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8004e40:	2112      	movs	r1, #18
 8004e42:	2039      	movs	r0, #57	; 0x39
 8004e44:	f005 f878 	bl	8009f38 <SX1276Write>
}
 8004e48:	e7f9      	b.n	8004e3e <SX1276SetPublicNetwork+0x1a>
 8004e4a:	bf00      	nop
 8004e4c:	20000cb4 	.word	0x20000cb4

08004e50 <SX1276OnTimeoutIrq>:
{
 8004e50:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 8004e52:	4b33      	ldr	r3, [pc, #204]	; (8004f20 <SX1276OnTimeoutIrq+0xd0>)
 8004e54:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d002      	beq.n	8004e62 <SX1276OnTimeoutIrq+0x12>
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d033      	beq.n	8004ec8 <SX1276OnTimeoutIrq+0x78>
}
 8004e60:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8004e62:	4b2f      	ldr	r3, [pc, #188]	; (8004f20 <SX1276OnTimeoutIrq+0xd0>)
 8004e64:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004e68:	b143      	cbz	r3, 8004e7c <SX1276OnTimeoutIrq+0x2c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004e6a:	4b2e      	ldr	r3, [pc, #184]	; (8004f24 <SX1276OnTimeoutIrq+0xd4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f6      	beq.n	8004e60 <SX1276OnTimeoutIrq+0x10>
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f3      	beq.n	8004e60 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
 8004e78:	4798      	blx	r3
 8004e7a:	e7f1      	b.n	8004e60 <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004e7c:	4c28      	ldr	r4, [pc, #160]	; (8004f20 <SX1276OnTimeoutIrq+0xd0>)
 8004e7e:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004e82:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004e86:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8004e8a:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004e8e:	210b      	movs	r1, #11
 8004e90:	203e      	movs	r0, #62	; 0x3e
 8004e92:	f005 f851 	bl	8009f38 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004e96:	2110      	movs	r1, #16
 8004e98:	203f      	movs	r0, #63	; 0x3f
 8004e9a:	f005 f84d 	bl	8009f38 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8004e9e:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 8004ea2:	b14b      	cbz	r3, 8004eb8 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004ea4:	200d      	movs	r0, #13
 8004ea6:	f005 f853 	bl	8009f50 <SX1276Read>
 8004eaa:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8004eae:	b2c9      	uxtb	r1, r1
 8004eb0:	200d      	movs	r0, #13
 8004eb2:	f005 f841 	bl	8009f38 <SX1276Write>
 8004eb6:	e7d8      	b.n	8004e6a <SX1276OnTimeoutIrq+0x1a>
                SX1276.Settings.State = RF_IDLE;
 8004eb8:	4b19      	ldr	r3, [pc, #100]	; (8004f20 <SX1276OnTimeoutIrq+0xd0>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 8004ec0:	4819      	ldr	r0, [pc, #100]	; (8004f28 <SX1276OnTimeoutIrq+0xd8>)
 8004ec2:	f7fe fdd1 	bl	8003a68 <TimerStop>
 8004ec6:	e7d0      	b.n	8004e6a <SX1276OnTimeoutIrq+0x1a>
        SX1276Reset( );
 8004ec8:	f7fe fbbe 	bl	8003648 <SX1276Reset>
        RxChainCalibration( );
 8004ecc:	f7ff f960 	bl	8004190 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	f005 f849 	bl	8009f68 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004ed6:	2400      	movs	r4, #0
 8004ed8:	e00c      	b.n	8004ef4 <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8004eda:	4a14      	ldr	r2, [pc, #80]	; (8004f2c <SX1276OnTimeoutIrq+0xdc>)
 8004edc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8004ee0:	18d5      	adds	r5, r2, r3
 8004ee2:	5cd0      	ldrb	r0, [r2, r3]
 8004ee4:	f7ff fc2e 	bl	8004744 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004ee8:	78a9      	ldrb	r1, [r5, #2]
 8004eea:	7868      	ldrb	r0, [r5, #1]
 8004eec:	f005 f824 	bl	8009f38 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004ef0:	3401      	adds	r4, #1
 8004ef2:	b2e4      	uxtb	r4, r4
 8004ef4:	2c0f      	cmp	r4, #15
 8004ef6:	d9f0      	bls.n	8004eda <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f7ff fc23 	bl	8004744 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8004efe:	4c08      	ldr	r4, [pc, #32]	; (8004f20 <SX1276OnTimeoutIrq+0xd0>)
 8004f00:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 8004f04:	f7ff ff8e 	bl	8004e24 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <SX1276OnTimeoutIrq+0xd4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0a4      	beq.n	8004e60 <SX1276OnTimeoutIrq+0x10>
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0a1      	beq.n	8004e60 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
 8004f1c:	4798      	blx	r3
}
 8004f1e:	e79f      	b.n	8004e60 <SX1276OnTimeoutIrq+0x10>
 8004f20:	20000cb4 	.word	0x20000cb4
 8004f24:	20000b80 	.word	0x20000b80
 8004f28:	20000b84 	.word	0x20000b84
 8004f2c:	0800c290 	.word	0x0800c290

08004f30 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 8004f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	460c      	mov	r4, r1
	struct uart_stm32_data *data = dev->data;
 8004f38:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004f3a:	6843      	ldr	r3, [r0, #4]
 8004f3c:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8004f3e:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 8004f40:	2a01      	cmp	r2, #1
 8004f42:	d015      	beq.n	8004f70 <uart_stm32_configure+0x40>
 8004f44:	2a02      	cmp	r2, #2
 8004f46:	d116      	bne.n	8004f76 <uart_stm32_configure+0x46>
		return LL_USART_PARITY_EVEN;
 8004f48:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8004f4c:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d017      	beq.n	8004f82 <uart_stm32_configure+0x52>
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d018      	beq.n	8004f88 <uart_stm32_configure+0x58>
 8004f56:	b18b      	cbz	r3, 8004f7c <uart_stm32_configure+0x4c>
		return LL_USART_STOPBITS_2;
 8004f58:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8004f5c:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 8004f5e:	2902      	cmp	r1, #2
 8004f60:	d015      	beq.n	8004f8e <uart_stm32_configure+0x5e>
 8004f62:	2904      	cmp	r1, #4
 8004f64:	d019      	beq.n	8004f9a <uart_stm32_configure+0x6a>
		if (p == UART_CFG_PARITY_NONE) {
 8004f66:	2a00      	cmp	r2, #0
 8004f68:	f040 8097 	bne.w	800509a <uart_stm32_configure+0x16a>
			return LL_USART_DATAWIDTH_8B;
 8004f6c:	2700      	movs	r7, #0
 8004f6e:	e016      	b.n	8004f9e <uart_stm32_configure+0x6e>
	switch (parity) {
 8004f70:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 8004f74:	e7ea      	b.n	8004f4c <uart_stm32_configure+0x1c>
		return LL_USART_PARITY_NONE;
 8004f76:	f04f 0e00 	mov.w	lr, #0
 8004f7a:	e7e7      	b.n	8004f4c <uart_stm32_configure+0x1c>
	switch (sb) {
 8004f7c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8004f80:	e7ec      	b.n	8004f5c <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1;
 8004f82:	f04f 0c00 	mov.w	ip, #0
 8004f86:	e7e9      	b.n	8004f5c <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1_5;
 8004f88:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8004f8c:	e7e6      	b.n	8004f5c <uart_stm32_configure+0x2c>
		if (p == UART_CFG_PARITY_NONE) {
 8004f8e:	b10a      	cbz	r2, 8004f94 <uart_stm32_configure+0x64>
			return LL_USART_DATAWIDTH_8B;
 8004f90:	2700      	movs	r7, #0
 8004f92:	e004      	b.n	8004f9e <uart_stm32_configure+0x6e>
			return LL_USART_DATAWIDTH_7B;
 8004f94:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8004f98:	e001      	b.n	8004f9e <uart_stm32_configure+0x6e>
	switch (db) {
 8004f9a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8004f9e:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8004fa2:	f1ba 0f01 	cmp.w	sl, #1
 8004fa6:	d07b      	beq.n	80050a0 <uart_stm32_configure+0x170>
	return LL_USART_HWCONTROL_NONE;
 8004fa8:	f04f 0800 	mov.w	r8, #0

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8004fac:	f1a2 0903 	sub.w	r9, r2, #3
 8004fb0:	fa5f f989 	uxtb.w	r9, r9
 8004fb4:	f1b9 0f01 	cmp.w	r9, #1
 8004fb8:	f240 809e 	bls.w	80050f8 <uart_stm32_configure+0x1c8>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8004fbc:	b112      	cbz	r2, 8004fc4 <uart_stm32_configure+0x94>
 8004fbe:	2904      	cmp	r1, #4
 8004fc0:	f000 809d 	beq.w	80050fe <uart_stm32_configure+0x1ce>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 809d 	beq.w	8005104 <uart_stm32_configure+0x1d4>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_1_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	f000 809d 	beq.w	800510a <uart_stm32_configure+0x1da>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8004fd0:	2901      	cmp	r1, #1
 8004fd2:	f240 809d 	bls.w	8005110 <uart_stm32_configure+0x1e0>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8004fd6:	2904      	cmp	r1, #4
 8004fd8:	f000 809d 	beq.w	8005116 <uart_stm32_configure+0x1e6>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8004fdc:	f1ba 0f00 	cmp.w	sl, #0
 8004fe0:	d017      	beq.n	8005012 <uart_stm32_configure+0xe2>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8004fe2:	4b51      	ldr	r3, [pc, #324]	; (8005128 <uart_stm32_configure+0x1f8>)
 8004fe4:	429d      	cmp	r5, r3
 8004fe6:	d010      	beq.n	800500a <uart_stm32_configure+0xda>
 8004fe8:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8004fec:	429d      	cmp	r5, r3
 8004fee:	d00c      	beq.n	800500a <uart_stm32_configure+0xda>
 8004ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ff4:	429d      	cmp	r5, r3
 8004ff6:	d008      	beq.n	800500a <uart_stm32_configure+0xda>
 8004ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ffc:	429d      	cmp	r5, r3
 8004ffe:	d004      	beq.n	800500a <uart_stm32_configure+0xda>
 8005000:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8005004:	429d      	cmp	r5, r3
 8005006:	f040 8089 	bne.w	800511c <uart_stm32_configure+0x1ec>
 800500a:	f1ba 0f01 	cmp.w	sl, #1
 800500e:	f040 8088 	bne.w	8005122 <uart_stm32_configure+0x1f2>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8005012:	682b      	ldr	r3, [r5, #0]
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	602b      	str	r3, [r5, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800501a:	6843      	ldr	r3, [r0, #4]
 800501c:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800501e:	6813      	ldr	r3, [r2, #0]
 8005020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 8005024:	459e      	cmp	lr, r3
 8005026:	d005      	beq.n	8005034 <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8005028:	6813      	ldr	r3, [r2, #0]
 800502a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800502e:	ea4e 0303 	orr.w	r3, lr, r3
 8005032:	6013      	str	r3, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005034:	6843      	ldr	r3, [r0, #4]
 8005036:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8005038:	6853      	ldr	r3, [r2, #4]
 800503a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800503e:	459c      	cmp	ip, r3
 8005040:	d005      	beq.n	800504e <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005042:	6853      	ldr	r3, [r2, #4]
 8005044:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005048:	ea4c 0303 	orr.w	r3, ip, r3
 800504c:	6053      	str	r3, [r2, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800504e:	6843      	ldr	r3, [r0, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8005052:	6813      	ldr	r3, [r2, #0]
 8005054:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 8005058:	429f      	cmp	r7, r3
 800505a:	d004      	beq.n	8005066 <uart_stm32_configure+0x136>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800505c:	6813      	ldr	r3, [r2, #0]
 800505e:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8005062:	431f      	orrs	r7, r3
 8005064:	6017      	str	r7, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005066:	6843      	ldr	r3, [r0, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800506a:	6893      	ldr	r3, [r2, #8]
 800506c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8005070:	4598      	cmp	r8, r3
 8005072:	d005      	beq.n	8005080 <uart_stm32_configure+0x150>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005074:	6893      	ldr	r3, [r2, #8]
 8005076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800507a:	ea48 0303 	orr.w	r3, r8, r3
 800507e:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 8005080:	f8d4 8000 	ldr.w	r8, [r4]
 8005084:	6833      	ldr	r3, [r6, #0]
 8005086:	4598      	cmp	r8, r3
 8005088:	d10d      	bne.n	80050a6 <uart_stm32_configure+0x176>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800508a:	682b      	ldr	r3, [r5, #0]
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	602b      	str	r3, [r5, #0]
		uart_stm32_set_baudrate(dev, cfg->baudrate);
		data->baud_rate = cfg->baudrate;
	}

	LL_USART_Enable(UartInstance);
	return 0;
 8005092:	2000      	movs	r0, #0
};
 8005094:	b002      	add	sp, #8
 8005096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return LL_USART_DATAWIDTH_9B;
 800509a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 800509e:	e77e      	b.n	8004f9e <uart_stm32_configure+0x6e>
		return LL_USART_HWCONTROL_RTS_CTS;
 80050a0:	f44f 7840 	mov.w	r8, #768	; 0x300
 80050a4:	e782      	b.n	8004fac <uart_stm32_configure+0x7c>
	struct uart_stm32_data *data = dev->data;
 80050a6:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80050a8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80050ac:	f859 7b0c 	ldr.w	r7, [r9], #12
	if (clock_control_get_rate(data->clock,
 80050b0:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80050b4:	4650      	mov	r0, sl
 80050b6:	f005 fbed 	bl	800a894 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80050ba:	b1b8      	cbz	r0, 80050ec <uart_stm32_configure+0x1bc>
	const struct clock_control_driver_api *api =
 80050bc:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	b1b3      	cbz	r3, 80050f2 <uart_stm32_configure+0x1c2>
	return api->get_rate(dev, sys, rate);
 80050c4:	aa01      	add	r2, sp, #4
 80050c6:	4649      	mov	r1, r9
 80050c8:	4650      	mov	r0, sl
 80050ca:	4798      	blx	r3
 80050cc:	2800      	cmp	r0, #0
 80050ce:	db0a      	blt.n	80050e6 <uart_stm32_configure+0x1b6>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050d6:	603b      	str	r3, [r7, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80050d8:	9b01      	ldr	r3, [sp, #4]
 80050da:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 80050de:	fbb3 f3f8 	udiv	r3, r3, r8
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	60fb      	str	r3, [r7, #12]
		data->baud_rate = cfg->baudrate;
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	6033      	str	r3, [r6, #0]
 80050ea:	e7ce      	b.n	800508a <uart_stm32_configure+0x15a>
		return -ENODEV;
 80050ec:	f06f 0012 	mvn.w	r0, #18
 80050f0:	e7ec      	b.n	80050cc <uart_stm32_configure+0x19c>
		return -ENOSYS;
 80050f2:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80050f6:	e7e9      	b.n	80050cc <uart_stm32_configure+0x19c>
		return -ENOTSUP;
 80050f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80050fc:	e7ca      	b.n	8005094 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80050fe:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005102:	e7c7      	b.n	8005094 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8005104:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005108:	e7c4      	b.n	8005094 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 800510a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800510e:	e7c1      	b.n	8005094 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8005110:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005114:	e7be      	b.n	8005094 <uart_stm32_configure+0x164>
 8005116:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800511a:	e7bb      	b.n	8005094 <uart_stm32_configure+0x164>
			return -ENOTSUP;
 800511c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005120:	e7b8      	b.n	8005094 <uart_stm32_configure+0x164>
 8005122:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005126:	e7b5      	b.n	8005094 <uart_stm32_configure+0x164>
 8005128:	40013800 	.word	0x40013800

0800512c <uart_stm32_async_init>:

	return 0;
}

static int uart_stm32_async_init(const struct device *dev)
{
 800512c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005130:	4605      	mov	r5, r0
	struct uart_stm32_data *data = dev->data;
 8005132:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005134:	6843      	ldr	r3, [r0, #4]
 8005136:	681e      	ldr	r6, [r3, #0]

	data->uart_dev = dev;
 8005138:	60a0      	str	r0, [r4, #8]

	if (data->dma_rx.dma_dev != NULL) {
 800513a:	69a0      	ldr	r0, [r4, #24]
 800513c:	b120      	cbz	r0, 8005148 <uart_stm32_async_init+0x1c>
 800513e:	f005 fba9 	bl	800a894 <z_device_is_ready>
		if (!device_is_ready(data->dma_rx.dma_dev)) {
 8005142:	2800      	cmp	r0, #0
 8005144:	f000 80a3 	beq.w	800528e <uart_stm32_async_init+0x162>
			return -ENODEV;
		}
	}

	if (data->dma_tx.dma_dev != NULL) {
 8005148:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800514c:	b12b      	cbz	r3, 800515a <uart_stm32_async_init+0x2e>
		if (!device_is_ready(data->dma_rx.dma_dev)) {
 800514e:	69a0      	ldr	r0, [r4, #24]
 8005150:	f005 fba0 	bl	800a894 <z_device_is_ready>
 8005154:	2800      	cmp	r0, #0
 8005156:	f000 809d 	beq.w	8005294 <uart_stm32_async_init+0x168>
	struct uart_stm32_data *data = dev->data;
 800515a:	692b      	ldr	r3, [r5, #16]
	data->dma_rx.enabled = false;
 800515c:	2700      	movs	r7, #0
 800515e:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005162:	686b      	ldr	r3, [r5, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_TX(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 8005166:	6893      	ldr	r3, [r2, #8]
 8005168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516c:	6093      	str	r3, [r2, #8]

	/* Disable both TX and RX DMA requests */
	uart_stm32_dma_rx_disable(dev);
	uart_stm32_dma_tx_disable(dev);

	k_work_init_delayable(&data->dma_rx.timeout_work,
 800516e:	494b      	ldr	r1, [pc, #300]	; (800529c <uart_stm32_async_init+0x170>)
 8005170:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8005174:	f005 fcdc 	bl	800ab30 <k_work_init_delayable>
			    uart_stm32_async_rx_timeout);
	k_work_init_delayable(&data->dma_tx.timeout_work,
 8005178:	4949      	ldr	r1, [pc, #292]	; (80052a0 <uart_stm32_async_init+0x174>)
 800517a:	f504 7088 	add.w	r0, r4, #272	; 0x110
 800517e:	f005 fcd7 	bl	800ab30 <k_work_init_delayable>
			    uart_stm32_async_tx_timeout);

	/* Configure dma rx config */
	memset(&data->dma_rx.blk_cfg, 0, sizeof(data->dma_rx.blk_cfg));
 8005182:	f104 0844 	add.w	r8, r4, #68	; 0x44
__ssp_bos_icheck3(memset, void *, int)
 8005186:	2220      	movs	r2, #32
 8005188:	4639      	mov	r1, r7
 800518a:	4640      	mov	r0, r8
 800518c:	f005 ffcb 	bl	800b126 <memset>
    data_reg_addr = (uint32_t) &(USARTx->TDR);
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8005190:	f106 0324 	add.w	r3, r6, #36	; 0x24
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X)
	data->dma_rx.blk_cfg.source_address =
				LL_USART_DMA_GetRegAddr(UartInstance);
#else
	data->dma_rx.blk_cfg.source_address =
 8005194:	6463      	str	r3, [r4, #68]	; 0x44
				LL_USART_DMA_GetRegAddr(UartInstance,
						LL_USART_DMA_REG_DATA_RECEIVE);
#endif

	data->dma_rx.blk_cfg.dest_address = 0; /* dest not ready */
 8005196:	64a7      	str	r7, [r4, #72]	; 0x48

	if (data->dma_rx.src_addr_increment) {
 8005198:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800519c:	2b00      	cmp	r3, #0
 800519e:	d056      	beq.n	800524e <uart_stm32_async_init+0x122>
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 80051a0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80051a4:	f36f 0383 	bfc	r3, #2, #2
 80051a8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	} else {
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	if (data->dma_rx.dst_addr_increment) {
 80051ac:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d054      	beq.n	800525e <uart_stm32_async_init+0x132>
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 80051b4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80051b8:	f36f 1305 	bfc	r3, #4, #2
 80051bc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	} else {
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	/* RX disable circular buffer */
	data->dma_rx.blk_cfg.source_reload_en  = 0;
 80051c0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80051c4:	f36f 1386 	bfc	r3, #6, #1
 80051c8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	data->dma_rx.blk_cfg.dest_reload_en = 0;
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	f36f 13c7 	bfc	r3, #7, #1
 80051d2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	data->dma_rx.blk_cfg.fifo_mode_control = data->dma_rx.fifo_threshold;
 80051d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80051d8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80051dc:	f362 0303 	bfi	r3, r2, #0, #4
 80051e0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

	data->dma_rx.dma_cfg.head_block = &data->dma_rx.blk_cfg;
 80051e4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	data->dma_rx.dma_cfg.user_data = (void *)dev;
 80051e8:	6365      	str	r5, [r4, #52]	; 0x34
	data->rx_next_buffer = NULL;
 80051ea:	2700      	movs	r7, #0
 80051ec:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
	data->rx_next_buffer_len = 0;
 80051f0:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c

	/* Configure dma tx config */
	memset(&data->dma_tx.blk_cfg, 0, sizeof(data->dma_tx.blk_cfg));
 80051f4:	f104 08dc 	add.w	r8, r4, #220	; 0xdc
 80051f8:	2220      	movs	r2, #32
 80051fa:	4639      	mov	r1, r7
 80051fc:	4640      	mov	r0, r8
 80051fe:	f005 ff92 	bl	800b126 <memset>
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8005202:	3628      	adds	r6, #40	; 0x28
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X)
	data->dma_tx.blk_cfg.dest_address =
			LL_USART_DMA_GetRegAddr(UartInstance);
#else
	data->dma_tx.blk_cfg.dest_address =
 8005204:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
			LL_USART_DMA_GetRegAddr(UartInstance,
					LL_USART_DMA_REG_DATA_TRANSMIT);
#endif

	data->dma_tx.blk_cfg.source_address = 0; /* not ready */
 8005208:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc

	if (data->dma_tx.src_addr_increment) {
 800520c:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
 8005210:	b36b      	cbz	r3, 800526e <uart_stm32_async_init+0x142>
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8005212:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 8005216:	f36f 0383 	bfc	r3, #2, #2
 800521a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	} else {
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	if (data->dma_tx.dst_addr_increment) {
 800521e:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
 8005222:	b363      	cbz	r3, 800527e <uart_stm32_async_init+0x152>
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8005224:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 8005228:	f36f 1305 	bfc	r3, #4, #2
 800522c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	} else {
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	data->dma_tx.blk_cfg.fifo_mode_control = data->dma_tx.fifo_threshold;
 8005230:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 8005234:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
 8005238:	f362 0303 	bfi	r3, r2, #0, #4
 800523c:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9

	data->dma_tx.dma_cfg.head_block = &data->dma_tx.blk_cfg;
 8005240:	f8c4 80c8 	str.w	r8, [r4, #200]	; 0xc8
	data->dma_tx.dma_cfg.user_data = (void *)dev;
 8005244:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc

	return 0;
 8005248:	2000      	movs	r0, #0
}
 800524a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 800524e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8005252:	2202      	movs	r2, #2
 8005254:	f362 0383 	bfi	r3, r2, #2, #2
 8005258:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800525c:	e7a6      	b.n	80051ac <uart_stm32_async_init+0x80>
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 800525e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8005262:	2202      	movs	r2, #2
 8005264:	f362 1305 	bfi	r3, r2, #4, #2
 8005268:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800526c:	e7a8      	b.n	80051c0 <uart_stm32_async_init+0x94>
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 800526e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 8005272:	2202      	movs	r2, #2
 8005274:	f362 0383 	bfi	r3, r2, #2, #2
 8005278:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 800527c:	e7cf      	b.n	800521e <uart_stm32_async_init+0xf2>
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 800527e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 8005282:	2202      	movs	r2, #2
 8005284:	f362 1305 	bfi	r3, r2, #4, #2
 8005288:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 800528c:	e7d0      	b.n	8005230 <uart_stm32_async_init+0x104>
			return -ENODEV;
 800528e:	f06f 0012 	mvn.w	r0, #18
 8005292:	e7da      	b.n	800524a <uart_stm32_async_init+0x11e>
			return -ENODEV;
 8005294:	f06f 0012 	mvn.w	r0, #18
 8005298:	e7d7      	b.n	800524a <uart_stm32_async_init+0x11e>
 800529a:	bf00      	nop
 800529c:	0800a66d 	.word	0x0800a66d
 80052a0:	0800a383 	.word	0x0800a383

080052a4 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 80052a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	4605      	mov	r5, r0
	const struct uart_stm32_config *config = dev->config;
 80052ac:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 80052ae:	6907      	ldr	r7, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80052b0:	46b0      	mov	r8, r6
 80052b2:	f858 4b0c 	ldr.w	r4, [r8], #12
	data->clock = clk;
 80052b6:	484a      	ldr	r0, [pc, #296]	; (80053e0 <uart_stm32_init+0x13c>)
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	f005 faeb 	bl	800a894 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80052be:	2800      	cmp	r0, #0
 80052c0:	d078      	beq.n	80053b4 <uart_stm32_init+0x110>
	const struct clock_control_driver_api *api =
 80052c2:	4847      	ldr	r0, [pc, #284]	; (80053e0 <uart_stm32_init+0x13c>)
 80052c4:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4641      	mov	r1, r8
 80052ca:	4798      	blx	r3
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 80052cc:	2800      	cmp	r0, #0
 80052ce:	f040 8084 	bne.w	80053da <uart_stm32_init+0x136>
	ret = pinctrl_lookup_state(config, id, &state);
 80052d2:	aa01      	add	r2, sp, #4
 80052d4:	2100      	movs	r1, #0
 80052d6:	6a30      	ldr	r0, [r6, #32]
 80052d8:	f005 fa7b 	bl	800a7d2 <pinctrl_lookup_state>
	if (ret < 0) {
 80052dc:	2800      	cmp	r0, #0
 80052de:	db05      	blt.n	80052ec <uart_stm32_init+0x48>
	return pinctrl_apply_state_direct(config, state);
 80052e0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80052e2:	2200      	movs	r2, #0
 80052e4:	7919      	ldrb	r1, [r3, #4]
 80052e6:	6818      	ldr	r0, [r3, #0]
 80052e8:	f005 fa8c 	bl	800a804 <pinctrl_configure_pins>
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 80052ec:	2800      	cmp	r0, #0
 80052ee:	db5e      	blt.n	80053ae <uart_stm32_init+0x10a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	f043 030c 	orr.w	r3, r3, #12
 80052fe:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8005300:	69b3      	ldr	r3, [r6, #24]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d05e      	beq.n	80053c4 <uart_stm32_init+0x120>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8005306:	2b01      	cmp	r3, #1
 8005308:	d057      	beq.n	80053ba <uart_stm32_init+0x116>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800530a:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 800530c:	4619      	mov	r1, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800530e:	6822      	ldr	r2, [r4, #0]
 8005310:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005314:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8005318:	430b      	orrs	r3, r1
 800531a:	4313      	orrs	r3, r2
 800531c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800531e:	6863      	ldr	r3, [r4, #4]
 8005320:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005324:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8005326:	7d33      	ldrb	r3, [r6, #20]
 8005328:	b12b      	cbz	r3, 8005336 <uart_stm32_init+0x92>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800532a:	686b      	ldr	r3, [r5, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800532e:	6893      	ldr	r3, [r2, #8]
 8005330:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005334:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8005336:	f8d7 9000 	ldr.w	r9, [r7]
	struct uart_stm32_data *data = dev->data;
 800533a:	692b      	ldr	r3, [r5, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800533c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005340:	f858 7b0c 	ldr.w	r7, [r8], #12
	if (clock_control_get_rate(data->clock,
 8005344:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8005348:	4650      	mov	r0, sl
 800534a:	f005 faa3 	bl	800a894 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800534e:	2800      	cmp	r0, #0
 8005350:	d03d      	beq.n	80053ce <uart_stm32_init+0x12a>
	const struct clock_control_driver_api *api =
 8005352:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d03b      	beq.n	80053d4 <uart_stm32_init+0x130>
	return api->get_rate(dev, sys, rate);
 800535c:	aa01      	add	r2, sp, #4
 800535e:	4641      	mov	r1, r8
 8005360:	4650      	mov	r0, sl
 8005362:	4798      	blx	r3
 8005364:	2800      	cmp	r0, #0
 8005366:	db0a      	blt.n	800537e <uart_stm32_init+0xda>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800536e:	603b      	str	r3, [r7, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005370:	9b01      	ldr	r3, [sp, #4]
 8005372:	eb03 0359 	add.w	r3, r3, r9, lsr #1
 8005376:	fbb3 f3f9 	udiv	r3, r3, r9
 800537a:	b29b      	uxth	r3, r3
 800537c:	60fb      	str	r3, [r7, #12]

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 800537e:	7f33      	ldrb	r3, [r6, #28]
 8005380:	b11b      	cbz	r3, 800538a <uart_stm32_init+0xe6>
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8005382:	68a3      	ldr	r3, [r4, #8]
 8005384:	f043 0308 	orr.w	r3, r3, #8
 8005388:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	f043 0301 	orr.w	r3, r3, #1
 8005390:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8005392:	69e3      	ldr	r3, [r4, #28]
 8005394:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005398:	d0fb      	beq.n	8005392 <uart_stm32_init+0xee>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800539a:	69e3      	ldr	r3, [r4, #28]
 800539c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80053a0:	d0fb      	beq.n	800539a <uart_stm32_init+0xf6>
	while (!(LL_USART_IsActiveFlag_REACK(UartInstance))) {
	}
#endif /* !USART_ISR_REACK */

#if defined(CONFIG_UART_INTERRUPT_DRIVEN) || defined(CONFIG_UART_ASYNC_API)
	config->uconf.irq_config_func(dev);
 80053a2:	68b3      	ldr	r3, [r6, #8]
 80053a4:	4628      	mov	r0, r5
 80053a6:	4798      	blx	r3
#elif defined(CONFIG_PM)
	config->irq_config_func(dev);
#endif /* defined(CONFIG_UART_INTERRUPT_DRIVEN) || defined(CONFIG_UART_ASYNC_API) */

#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
 80053a8:	4628      	mov	r0, r5
 80053aa:	f7ff febf 	bl	800512c <uart_stm32_async_init>
#else
	return 0;
#endif
}
 80053ae:	b002      	add	sp, #8
 80053b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENODEV;
 80053b4:	f06f 0012 	mvn.w	r0, #18
 80053b8:	e788      	b.n	80052cc <uart_stm32_init+0x28>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80053ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 80053be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053c2:	e7a4      	b.n	800530e <uart_stm32_init+0x6a>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80053c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 80053c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053cc:	e79f      	b.n	800530e <uart_stm32_init+0x6a>
		return -ENODEV;
 80053ce:	f06f 0012 	mvn.w	r0, #18
 80053d2:	e7c7      	b.n	8005364 <uart_stm32_init+0xc0>
		return -ENOSYS;
 80053d4:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80053d8:	e7c4      	b.n	8005364 <uart_stm32_init+0xc0>
		return -EIO;
 80053da:	f06f 0004 	mvn.w	r0, #4
 80053de:	e7e6      	b.n	80053ae <uart_stm32_init+0x10a>
 80053e0:	0800b6b8 	.word	0x0800b6b8

080053e4 <random_byte_get>:
	return 0;
}
#endif /* !STM32_CONDRST_SUPPORT */

static int random_byte_get(void)
{
 80053e4:	b538      	push	{r3, r4, r5, lr}
	int retval = -EAGAIN;
	unsigned int key;
	RNG_TypeDef *rng = entropy_stm32_rng_data.rng;
 80053e6:	4b17      	ldr	r3, [pc, #92]	; (8005444 <random_byte_get+0x60>)
 80053e8:	681c      	ldr	r4, [r3, #0]
	__asm__ volatile(
 80053ea:	f04f 0310 	mov.w	r3, #16
 80053ee:	f3ef 8511 	mrs	r5, BASEPRI
 80053f2:	f383 8812 	msr	BASEPRI_MAX, r3
 80053f6:	f3bf 8f6f 	isb	sy
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_SEIS(RNG_TypeDef *RNGx)
{
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 80053fa:	6863      	ldr	r3, [r4, #4]
 80053fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005400:	d004      	beq.n	800540c <random_byte_get+0x28>

	key = irq_lock();

	if (LL_RNG_IsActiveFlag_SEIS(rng) && (recover_seed_error(rng) < 0)) {
 8005402:	4620      	mov	r0, r4
 8005404:	f005 f9b7 	bl	800a776 <recover_seed_error>
 8005408:	2800      	cmp	r0, #0
 800540a:	db0b      	blt.n	8005424 <random_byte_get+0x40>
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	f013 0f01 	tst.w	r3, #1
 8005412:	d00a      	beq.n	800542a <random_byte_get+0x46>
		retval = -EIO;
		goto out;
	}

	if ((LL_RNG_IsActiveFlag_DRDY(rng) == 1)) {
		if (entropy_stm32_got_error(rng)) {
 8005414:	4620      	mov	r0, r4
 8005416:	f005 f9a0 	bl	800a75a <entropy_stm32_got_error>
 800541a:	b968      	cbnz	r0, 8005438 <random_byte_get+0x54>
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(RNG_TypeDef *RNGx)
{
  return (uint32_t)(READ_REG(RNGx->DR));
 800541c:	68a0      	ldr	r0, [r4, #8]
			retval = -EIO;
			goto out;
		}

		retval = LL_RNG_ReadRandData32(rng);
		if (retval == 0) {
 800541e:	b170      	cbz	r0, 800543e <random_byte_get+0x5a>
			 */
			retval = -EAGAIN;
			goto out;
		}

		retval &= 0xFF;
 8005420:	b2c0      	uxtb	r0, r0
 8005422:	e004      	b.n	800542e <random_byte_get+0x4a>
		retval = -EIO;
 8005424:	f06f 0004 	mvn.w	r0, #4
 8005428:	e001      	b.n	800542e <random_byte_get+0x4a>
	int retval = -EAGAIN;
 800542a:	f06f 000a 	mvn.w	r0, #10
	__asm__ volatile(
 800542e:	f385 8811 	msr	BASEPRI, r5
 8005432:	f3bf 8f6f 	isb	sy

out:
	irq_unlock(key);

	return retval;
}
 8005436:	bd38      	pop	{r3, r4, r5, pc}
			retval = -EIO;
 8005438:	f06f 0004 	mvn.w	r0, #4
 800543c:	e7f7      	b.n	800542e <random_byte_get+0x4a>
			retval = -EAGAIN;
 800543e:	f06f 000a 	mvn.w	r0, #10
 8005442:	e7f4      	b.n	800542e <random_byte_get+0x4a>
 8005444:	200002c0 	.word	0x200002c0

08005448 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
 8005448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800544a:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
 800544c:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
 800544e:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
 8005450:	f04f 0310 	mov.w	r3, #16
 8005454:	f3ef 8c11 	mrs	ip, BASEPRI
 8005458:	f383 8812 	msr	BASEPRI_MAX, r3
 800545c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
 8005460:	7806      	ldrb	r6, [r0, #0]
 8005462:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
 8005464:	7847      	ldrb	r7, [r0, #1]

	available = (last - first) & mask;
 8005466:	1bad      	subs	r5, r5, r6
 8005468:	4025      	ands	r5, r4
	if (available < len) {
 800546a:	42aa      	cmp	r2, r5
 800546c:	d900      	bls.n	8005470 <rng_pool_get+0x28>
		len = available;
 800546e:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
 8005470:	18b0      	adds	r0, r6, r2
 8005472:	4020      	ands	r0, r4
 8005474:	f88e 0000 	strb.w	r0, [lr]
	__asm__ volatile(
 8005478:	f38c 8811 	msr	BASEPRI, ip
 800547c:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
 8005480:	4608      	mov	r0, r1
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8005482:	e007      	b.n	8005494 <rng_pool_get+0x4c>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
 8005484:	eb0e 0203 	add.w	r2, lr, r3
 8005488:	7952      	ldrb	r2, [r2, #5]
 800548a:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
 800548e:	3301      	adds	r3, #1
 8005490:	4023      	ands	r3, r4
	while (likely(len--)) {
 8005492:	4662      	mov	r2, ip
 8005494:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8005498:	fa1f fc8c 	uxth.w	ip, ip
 800549c:	2a00      	cmp	r2, #0
 800549e:	d1f1      	bne.n	8005484 <rng_pool_get+0x3c>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
 80054a0:	42be      	cmp	r6, r7
 80054a2:	d10f      	bne.n	80054c4 <rng_pool_get+0x7c>
	__asm__ volatile(
 80054a4:	f04f 0210 	mov.w	r2, #16
 80054a8:	f3ef 8311 	mrs	r3, BASEPRI
 80054ac:	f382 8812 	msr	BASEPRI_MAX, r2
 80054b0:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
 80054b4:	f89e 2000 	ldrb.w	r2, [lr]
 80054b8:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
 80054c4:	1a40      	subs	r0, r0, r1
 80054c6:	b280      	uxth	r0, r0
	available = available - len;
 80054c8:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
 80054ca:	f89e 3004 	ldrb.w	r3, [lr, #4]
 80054ce:	42ab      	cmp	r3, r5
 80054d0:	d305      	bcc.n	80054de <rng_pool_get+0x96>
		LL_RNG_EnableIT(entropy_stm32_rng_data.rng);
 80054d2:	4b03      	ldr	r3, [pc, #12]	; (80054e0 <rng_pool_get+0x98>)
 80054d4:	681a      	ldr	r2, [r3, #0]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 80054d6:	6813      	ldr	r3, [r2, #0]
 80054d8:	f043 0308 	orr.w	r3, r3, #8
 80054dc:	6013      	str	r3, [r2, #0]
	}

	return len;
}
 80054de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e0:	200002c0 	.word	0x200002c0

080054e4 <entropy_stm32_rng_get_entropy_isr>:

static int entropy_stm32_rng_get_entropy_isr(const struct device *dev,
						uint8_t *buf,
						uint16_t len,
					uint32_t flags)
{
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	460d      	mov	r5, r1
 80054e8:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_stm32_rng_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 80054ea:	f013 0f01 	tst.w	r3, #1
 80054ee:	d103      	bne.n	80054f8 <entropy_stm32_rng_get_entropy_isr+0x14>
		return rng_pool_get(
 80054f0:	481f      	ldr	r0, [pc, #124]	; (8005570 <entropy_stm32_rng_get_entropy_isr+0x8c>)
 80054f2:	f7ff ffa9 	bl	8005448 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
 80054f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
 80054f8:	b90a      	cbnz	r2, 80054fe <entropy_stm32_rng_get_entropy_isr+0x1a>
	return cnt;
 80054fa:	4620      	mov	r0, r4
 80054fc:	e7fb      	b.n	80054f6 <entropy_stm32_rng_get_entropy_isr+0x12>
	__asm__ volatile(
 80054fe:	f04f 0310 	mov.w	r3, #16
 8005502:	f3ef 8611 	mrs	r6, BASEPRI
 8005506:	f383 8812 	msr	BASEPRI_MAX, r3
 800550a:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
 800550e:	2050      	movs	r0, #80	; 0x50
 8005510:	f7fc f926 	bl	8001760 <arch_irq_is_enabled>
 8005514:	4607      	mov	r7, r0
		irq_disable(IRQN);
 8005516:	2050      	movs	r0, #80	; 0x50
 8005518:	f7fc f90e 	bl	8001738 <arch_irq_disable>
	__asm__ volatile(
 800551c:	f386 8811 	msr	BASEPRI, r6
 8005520:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005524:	4b13      	ldr	r3, [pc, #76]	; (8005574 <entropy_stm32_rng_get_entropy_isr+0x90>)
 8005526:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800552a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 800552e:	4626      	mov	r6, r4
 8005530:	e004      	b.n	800553c <entropy_stm32_rng_get_entropy_isr+0x58>
  __ASM volatile ("dsb 0xF":::"memory");
 8005532:	f3bf 8f4f 	dsb	sy
				__WFE();
 8005536:	bf20      	wfe
				__SEV();
 8005538:	bf40      	sev
				__WFE();
 800553a:	bf20      	wfe
			while (LL_RNG_IsActiveFlag_DRDY(
 800553c:	4b0e      	ldr	r3, [pc, #56]	; (8005578 <entropy_stm32_rng_get_entropy_isr+0x94>)
 800553e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f013 0f01 	tst.w	r3, #1
 8005546:	d0f4      	beq.n	8005532 <entropy_stm32_rng_get_entropy_isr+0x4e>
			byte = random_byte_get();
 8005548:	f7ff ff4c 	bl	80053e4 <random_byte_get>
 800554c:	4b09      	ldr	r3, [pc, #36]	; (8005574 <entropy_stm32_rng_get_entropy_isr+0x90>)
 800554e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005552:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			if (byte < 0) {
 8005556:	2800      	cmp	r0, #0
 8005558:	db02      	blt.n	8005560 <entropy_stm32_rng_get_entropy_isr+0x7c>
			buf[--len] = byte;
 800555a:	3e01      	subs	r6, #1
 800555c:	b2b6      	uxth	r6, r6
 800555e:	55a8      	strb	r0, [r5, r6]
		} while (len);
 8005560:	2e00      	cmp	r6, #0
 8005562:	d1eb      	bne.n	800553c <entropy_stm32_rng_get_entropy_isr+0x58>
		if (irq_enabled) {
 8005564:	2f00      	cmp	r7, #0
 8005566:	d0c8      	beq.n	80054fa <entropy_stm32_rng_get_entropy_isr+0x16>
			irq_enable(IRQN);
 8005568:	2050      	movs	r0, #80	; 0x50
 800556a:	f7fc f8d7 	bl	800171c <arch_irq_enable>
 800556e:	e7c4      	b.n	80054fa <entropy_stm32_rng_get_entropy_isr+0x16>
 8005570:	200002f8 	.word	0x200002f8
 8005574:	e000e100 	.word	0xe000e100
 8005578:	200002c0 	.word	0x200002c0

0800557c <stm32_rng_isr>:
{
 800557c:	b510      	push	{r4, lr}
	byte = random_byte_get();
 800557e:	f7ff ff31 	bl	80053e4 <random_byte_get>
	if (byte < 0) {
 8005582:	2800      	cmp	r0, #0
 8005584:	db06      	blt.n	8005594 <stm32_rng_isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_stm32_rng_data.isr),
 8005586:	b2c4      	uxtb	r4, r0
 8005588:	4621      	mov	r1, r4
 800558a:	480b      	ldr	r0, [pc, #44]	; (80055b8 <stm32_rng_isr+0x3c>)
 800558c:	f005 f905 	bl	800a79a <rng_pool_put>
	if (ret < 0) {
 8005590:	2800      	cmp	r0, #0
 8005592:	db00      	blt.n	8005596 <stm32_rng_isr+0x1a>
}
 8005594:	bd10      	pop	{r4, pc}
		ret = rng_pool_put(
 8005596:	4621      	mov	r1, r4
 8005598:	4808      	ldr	r0, [pc, #32]	; (80055bc <stm32_rng_isr+0x40>)
 800559a:	f005 f8fe 	bl	800a79a <rng_pool_put>
		if (ret < 0) {
 800559e:	2800      	cmp	r0, #0
 80055a0:	db03      	blt.n	80055aa <stm32_rng_isr+0x2e>
	z_impl_k_sem_give(sem);
 80055a2:	4807      	ldr	r0, [pc, #28]	; (80055c0 <stm32_rng_isr+0x44>)
 80055a4:	f000 fdc0 	bl	8006128 <z_impl_k_sem_give>
}
 80055a8:	e7f4      	b.n	8005594 <stm32_rng_isr+0x18>
			LL_RNG_DisableIT(entropy_stm32_rng_data.rng);
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <stm32_rng_isr+0x48>)
 80055ac:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(RNGx->CR, RNG_CR_IE);
 80055ae:	6813      	ldr	r3, [r2, #0]
 80055b0:	f023 0308 	bic.w	r3, r3, #8
 80055b4:	6013      	str	r3, [r2, #0]
}
 80055b6:	e7f4      	b.n	80055a2 <stm32_rng_isr+0x26>
 80055b8:	200002f8 	.word	0x200002f8
 80055bc:	2000030d 	.word	0x2000030d
 80055c0:	200002e0 	.word	0x200002e0
 80055c4:	200002c0 	.word	0x200002c0

080055c8 <entropy_stm32_rng_get_entropy>:
{
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	460f      	mov	r7, r1
 80055cc:	4614      	mov	r4, r2
	while (len) {
 80055ce:	e007      	b.n	80055e0 <entropy_stm32_rng_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
 80055d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055d8:	f106 0018 	add.w	r0, r6, #24
 80055dc:	f000 fdcc 	bl	8006178 <z_impl_k_sem_take>
 80055e0:	b1cc      	cbz	r4, 8005616 <entropy_stm32_rng_get_entropy+0x4e>
 80055e2:	4d0e      	ldr	r5, [pc, #56]	; (800561c <entropy_stm32_rng_get_entropy+0x54>)
 80055e4:	f105 0608 	add.w	r6, r5, #8
 80055e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055f0:	4630      	mov	r0, r6
 80055f2:	f000 fdc1 	bl	8006178 <z_impl_k_sem_take>
		bytes = rng_pool_get(
 80055f6:	4622      	mov	r2, r4
 80055f8:	4639      	mov	r1, r7
 80055fa:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 80055fe:	f7ff ff23 	bl	8005448 <rng_pool_get>
 8005602:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 8005604:	4630      	mov	r0, r6
 8005606:	f000 fd8f 	bl	8006128 <z_impl_k_sem_give>
		if (bytes == 0U) {
 800560a:	2d00      	cmp	r5, #0
 800560c:	d0e0      	beq.n	80055d0 <entropy_stm32_rng_get_entropy+0x8>
		len -= bytes;
 800560e:	1b64      	subs	r4, r4, r5
 8005610:	b2a4      	uxth	r4, r4
		buf += bytes;
 8005612:	442f      	add	r7, r5
 8005614:	e7e4      	b.n	80055e0 <entropy_stm32_rng_get_entropy+0x18>
}
 8005616:	2000      	movs	r0, #0
 8005618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800561a:	bf00      	nop
 800561c:	200002c0 	.word	0x200002c0

08005620 <entropy_stm32_rng_init>:

static int entropy_stm32_rng_init(const struct device *dev)
{
 8005620:	b538      	push	{r3, r4, r5, lr}
	const struct entropy_stm32_rng_dev_cfg *dev_cfg;
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	dev_data = dev->data;
 8005622:	6904      	ldr	r4, [r0, #16]
	dev_cfg = dev->config;
 8005624:	6845      	ldr	r5, [r0, #4]
  *         @arg @ref LL_RCC_PLLSAI1Q_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 8005626:	4b2d      	ldr	r3, [pc, #180]	; (80056dc <entropy_stm32_rng_init+0xbc>)
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLQ);
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800563a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800563e:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8005642:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800564a:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLSAI1CFGR  PLLSAI1QEN    LL_RCC_PLLSAI1_EnableDomain_48M
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_48M(void)
{
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN);
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005652:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8005654:	4b21      	ldr	r3, [pc, #132]	; (80056dc <entropy_stm32_rng_init+0xbc>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800565c:	d0fa      	beq.n	8005654 <entropy_stm32_rng_init+0x34>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, RNGxSource);
 800565e:	4a1f      	ldr	r2, [pc, #124]	; (80056dc <entropy_stm32_rng_init+0xbc>)
 8005660:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005664:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005668:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800566c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	z_stm32_hsem_unlock(CFG_HW_CLK48_CONFIG_SEMID);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

#endif /* CONFIG_SOC_SERIES_STM32L4X */

	dev_data->clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
 8005670:	481b      	ldr	r0, [pc, #108]	; (80056e0 <entropy_stm32_rng_init+0xc0>)
 8005672:	6060      	str	r0, [r4, #4]
 8005674:	f005 f90e 	bl	800a894 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8005678:	b120      	cbz	r0, 8005684 <entropy_stm32_rng_init+0x64>
	const struct clock_control_driver_api *api =
 800567a:	4819      	ldr	r0, [pc, #100]	; (80056e0 <entropy_stm32_rng_init+0xc0>)
 800567c:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4629      	mov	r1, r5
 8005682:	4798      	blx	r3
#endif
	/* Write RNG HTCR configuration */
	LL_RNG_SetHealthConfig(dev_data->rng, DT_INST_PROP(0, health_test_config));
#endif

	LL_RNG_EnableIT(dev_data->rng);
 8005684:	6822      	ldr	r2, [r4, #0]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 8005686:	6813      	ldr	r3, [r2, #0]
 8005688:	f043 0308 	orr.w	r3, r3, #8
 800568c:	6013      	str	r3, [r2, #0]

	LL_RNG_Enable(dev_data->rng);
 800568e:	4620      	mov	r0, r4
 8005690:	f850 2b08 	ldr.w	r2, [r0], #8
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8005694:	6813      	ldr	r3, [r2, #0]
 8005696:	f043 0304 	orr.w	r3, r3, #4
 800569a:	6013      	str	r3, [r2, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
 800569c:	2201      	movs	r2, #1
 800569e:	4611      	mov	r1, r2
 80056a0:	f005 f99f 	bl	800a9e2 <z_impl_k_sem_init>

	/* Locking semaphore initialized to 1 (unlocked) */
	k_sem_init(&dev_data->sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&dev_data->sem_sync, 0, 1);
 80056a4:	f104 0020 	add.w	r0, r4, #32
 80056a8:	2201      	movs	r2, #1
 80056aa:	2100      	movs	r1, #0
 80056ac:	f005 f999 	bl	800a9e2 <z_impl_k_sem_init>

	rng_pool_init((struct rng_pool *)(dev_data->thr),
 80056b0:	2204      	movs	r2, #4
 80056b2:	2108      	movs	r1, #8
 80056b4:	f104 004d 	add.w	r0, r4, #77	; 0x4d
 80056b8:	f005 f883 	bl	800a7c2 <rng_pool_init>
		      CONFIG_ENTROPY_STM32_THR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(dev_data->isr),
 80056bc:	220c      	movs	r2, #12
 80056be:	2110      	movs	r1, #16
 80056c0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80056c4:	f005 f87d 	bl	800a7c2 <rng_pool_init>
		      CONFIG_ENTROPY_STM32_ISR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_ISR_THRESHOLD);

	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 80056c8:	2200      	movs	r2, #0
 80056ca:	4611      	mov	r1, r2
 80056cc:	2050      	movs	r0, #80	; 0x50
 80056ce:	f7fc f855 	bl	800177c <z_arm_irq_priority_set>
	irq_enable(IRQN);
 80056d2:	2050      	movs	r0, #80	; 0x50
 80056d4:	f7fc f822 	bl	800171c <arch_irq_enable>

	return 0;
}
 80056d8:	2000      	movs	r0, #0
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	40021000 	.word	0x40021000
 80056e0:	0800b6b8 	.word	0x0800b6b8

080056e4 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 80056e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80056e8:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 80056ea:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 80056ec:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 80056ee:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80056f2:	d101      	bne.n	80056f8 <elapsed+0x14>
	    || (val1 < val2)) {
 80056f4:	4281      	cmp	r1, r0
 80056f6:	d208      	bcs.n	800570a <elapsed+0x26>
		overflow_cyc += last_load;
 80056f8:	4b07      	ldr	r3, [pc, #28]	; (8005718 <elapsed+0x34>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	4907      	ldr	r1, [pc, #28]	; (800571c <elapsed+0x38>)
 80056fe:	6809      	ldr	r1, [r1, #0]
 8005700:	440a      	add	r2, r1
 8005702:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8005704:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005708:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 800570a:	4b04      	ldr	r3, [pc, #16]	; (800571c <elapsed+0x38>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	1a1b      	subs	r3, r3, r0
 8005710:	4a01      	ldr	r2, [pc, #4]	; (8005718 <elapsed+0x34>)
 8005712:	6810      	ldr	r0, [r2, #0]
}
 8005714:	4418      	add	r0, r3
 8005716:	4770      	bx	lr
 8005718:	20000e1c 	.word	0x20000e1c
 800571c:	20000e18 	.word	0x20000e18

08005720 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005720:	4b09      	ldr	r3, [pc, #36]	; (8005748 <sys_clock_driver_init+0x28>)
 8005722:	2210      	movs	r2, #16
 8005724:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8005728:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800572c:	4b07      	ldr	r3, [pc, #28]	; (800574c <sys_clock_driver_init+0x2c>)
 800572e:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8005730:	2000      	movs	r0, #0
 8005732:	4b07      	ldr	r3, [pc, #28]	; (8005750 <sys_clock_driver_init+0x30>)
 8005734:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8005736:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800573a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800573c:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	f042 0207 	orr.w	r2, r2, #7
 8005744:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8005746:	4770      	bx	lr
 8005748:	e000ed00 	.word	0xe000ed00
 800574c:	20000e18 	.word	0x20000e18
 8005750:	20000e1c 	.word	0x20000e1c

08005754 <sys_clock_isr>:
{
 8005754:	b508      	push	{r3, lr}
	elapsed();
 8005756:	f7ff ffc5 	bl	80056e4 <elapsed>
	cycle_count += overflow_cyc;
 800575a:	4b0c      	ldr	r3, [pc, #48]	; (800578c <sys_clock_isr+0x38>)
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	4a0c      	ldr	r2, [pc, #48]	; (8005790 <sys_clock_isr+0x3c>)
 8005760:	6811      	ldr	r1, [r2, #0]
 8005762:	4408      	add	r0, r1
 8005764:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800576a:	4a0a      	ldr	r2, [pc, #40]	; (8005794 <sys_clock_isr+0x40>)
 800576c:	6813      	ldr	r3, [r2, #0]
 800576e:	1ac0      	subs	r0, r0, r3
 8005770:	4909      	ldr	r1, [pc, #36]	; (8005798 <sys_clock_isr+0x44>)
 8005772:	fba1 1000 	umull	r1, r0, r1, r0
 8005776:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 8005778:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800577c:	fb01 3300 	mla	r3, r1, r0, r3
 8005780:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8005782:	f001 fb6f 	bl	8006e64 <sys_clock_announce>
	z_arm_int_exit();
 8005786:	f7fc f98b 	bl	8001aa0 <z_arm_exc_exit>
}
 800578a:	bd08      	pop	{r3, pc}
 800578c:	20000e1c 	.word	0x20000e1c
 8005790:	20000e14 	.word	0x20000e14
 8005794:	20000e10 	.word	0x20000e10
 8005798:	10624dd3 	.word	0x10624dd3

0800579c <sys_clock_set_timeout>:
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 800579c:	b111      	cbz	r1, 80057a4 <sys_clock_set_timeout+0x8>
 800579e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80057a2:	d03a      	beq.n	800581a <sys_clock_set_timeout+0x7e>
{
 80057a4:	b570      	push	{r4, r5, r6, lr}
	uint32_t last_load_ = last_load;
 80057a6:	4b38      	ldr	r3, [pc, #224]	; (8005888 <sys_clock_set_timeout+0xec>)
 80057a8:	681d      	ldr	r5, [r3, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80057aa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80057ae:	d03f      	beq.n	8005830 <sys_clock_set_timeout+0x94>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80057b0:	2801      	cmp	r0, #1
 80057b2:	dd40      	ble.n	8005836 <sys_clock_set_timeout+0x9a>
 80057b4:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 80057b8:	dc3f      	bgt.n	800583a <sys_clock_set_timeout+0x9e>
 80057ba:	1e44      	subs	r4, r0, #1
	__asm__ volatile(
 80057bc:	f04f 0310 	mov.w	r3, #16
 80057c0:	f3ef 8611 	mrs	r6, BASEPRI
 80057c4:	f383 8812 	msr	BASEPRI_MAX, r3
 80057c8:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 80057cc:	f7ff ff8a 	bl	80056e4 <elapsed>
	val1 = SysTick->VAL;
 80057d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80057d4:	6999      	ldr	r1, [r3, #24]
	cycle_count += pending;
 80057d6:	4b2d      	ldr	r3, [pc, #180]	; (800588c <sys_clock_set_timeout+0xf0>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4410      	add	r0, r2
 80057dc:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 80057de:	4b2c      	ldr	r3, [pc, #176]	; (8005890 <sys_clock_set_timeout+0xf4>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 80057e4:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <sys_clock_set_timeout+0xf8>)
 80057e6:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 80057e8:	1a83      	subs	r3, r0, r2
 80057ea:	d429      	bmi.n	8005840 <sys_clock_set_timeout+0xa4>
		delay = ticks * CYC_PER_TICK;
 80057ec:	f44f 5cfa 	mov.w	ip, #8000	; 0x1f40
		delay += unannounced;
 80057f0:	fb0c 3304 	mla	r3, ip, r4, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80057f4:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 80057f8:	331f      	adds	r3, #31
 80057fa:	4c27      	ldr	r4, [pc, #156]	; (8005898 <sys_clock_set_timeout+0xfc>)
 80057fc:	fba4 4303 	umull	r4, r3, r4, r3
 8005800:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 8005802:	1a12      	subs	r2, r2, r0
 8005804:	fb0c 2303 	mla	r3, ip, r3, r2
		delay = MAX(delay, MIN_DELAY);
 8005808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580c:	d91d      	bls.n	800584a <sys_clock_set_timeout+0xae>
		if (delay > MAX_CYCLES) {
 800580e:	4a23      	ldr	r2, [pc, #140]	; (800589c <sys_clock_set_timeout+0x100>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d91c      	bls.n	800584e <sys_clock_set_timeout+0xb2>
			last_load = MAX_CYCLES;
 8005814:	4b1c      	ldr	r3, [pc, #112]	; (8005888 <sys_clock_set_timeout+0xec>)
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e01b      	b.n	8005852 <sys_clock_set_timeout+0xb6>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800581a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800581e:	6913      	ldr	r3, [r2, #16]
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8005826:	4b18      	ldr	r3, [pc, #96]	; (8005888 <sys_clock_set_timeout+0xec>)
 8005828:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800582c:	601a      	str	r2, [r3, #0]
		return;
 800582e:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8005830:	f44f 6003 	mov.w	r0, #2096	; 0x830
 8005834:	e7be      	b.n	80057b4 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005836:	2400      	movs	r4, #0
 8005838:	e7c0      	b.n	80057bc <sys_clock_set_timeout+0x20>
 800583a:	f44f 6403 	mov.w	r4, #2096	; 0x830
 800583e:	e7bd      	b.n	80057bc <sys_clock_set_timeout+0x20>
		last_load = MIN_DELAY;
 8005840:	4b11      	ldr	r3, [pc, #68]	; (8005888 <sys_clock_set_timeout+0xec>)
 8005842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	e003      	b.n	8005852 <sys_clock_set_timeout+0xb6>
		delay = MAX(delay, MIN_DELAY);
 800584a:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 800584e:	4a0e      	ldr	r2, [pc, #56]	; (8005888 <sys_clock_set_timeout+0xec>)
 8005850:	6013      	str	r3, [r2, #0]
	val2 = SysTick->VAL;
 8005852:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005856:	699c      	ldr	r4, [r3, #24]
	SysTick->LOAD = last_load - 1;
 8005858:	4a0b      	ldr	r2, [pc, #44]	; (8005888 <sys_clock_set_timeout+0xec>)
 800585a:	6812      	ldr	r2, [r2, #0]
 800585c:	3a01      	subs	r2, #1
 800585e:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8005860:	2200      	movs	r2, #0
 8005862:	619a      	str	r2, [r3, #24]
	if (val1 < val2) {
 8005864:	42a1      	cmp	r1, r4
 8005866:	d209      	bcs.n	800587c <sys_clock_set_timeout+0xe0>
		cycle_count += (val1 + (last_load_ - val2));
 8005868:	1b2d      	subs	r5, r5, r4
 800586a:	440d      	add	r5, r1
 800586c:	4428      	add	r0, r5
 800586e:	4b07      	ldr	r3, [pc, #28]	; (800588c <sys_clock_set_timeout+0xf0>)
 8005870:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 8005872:	f386 8811 	msr	BASEPRI, r6
 8005876:	f3bf 8f6f 	isb	sy
}
 800587a:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 800587c:	1b0d      	subs	r5, r1, r4
 800587e:	4428      	add	r0, r5
 8005880:	4b02      	ldr	r3, [pc, #8]	; (800588c <sys_clock_set_timeout+0xf0>)
 8005882:	6018      	str	r0, [r3, #0]
 8005884:	e7f5      	b.n	8005872 <sys_clock_set_timeout+0xd6>
 8005886:	bf00      	nop
 8005888:	20000e18 	.word	0x20000e18
 800588c:	20000e14 	.word	0x20000e14
 8005890:	20000e1c 	.word	0x20000e1c
 8005894:	20000e10 	.word	0x20000e10
 8005898:	10624dd3 	.word	0x10624dd3
 800589c:	00ffdc00 	.word	0x00ffdc00

080058a0 <sys_clock_elapsed>:
{
 80058a0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80058a2:	f04f 0310 	mov.w	r3, #16
 80058a6:	f3ef 8411 	mrs	r4, BASEPRI
 80058aa:	f383 8812 	msr	BASEPRI_MAX, r3
 80058ae:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 80058b2:	f7ff ff17 	bl	80056e4 <elapsed>
 80058b6:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <sys_clock_elapsed+0x34>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4418      	add	r0, r3
 80058bc:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <sys_clock_elapsed+0x38>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 80058c2:	f384 8811 	msr	BASEPRI, r4
 80058c6:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
 80058ca:	4b04      	ldr	r3, [pc, #16]	; (80058dc <sys_clock_elapsed+0x3c>)
 80058cc:	fba3 3000 	umull	r3, r0, r3, r0
}
 80058d0:	0a40      	lsrs	r0, r0, #9
 80058d2:	bd10      	pop	{r4, pc}
 80058d4:	20000e14 	.word	0x20000e14
 80058d8:	20000e10 	.word	0x20000e10
 80058dc:	10624dd3 	.word	0x10624dd3

080058e0 <sys_clock_cycle_get_32>:
{
 80058e0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80058e2:	f04f 0310 	mov.w	r3, #16
 80058e6:	f3ef 8411 	mrs	r4, BASEPRI
 80058ea:	f383 8812 	msr	BASEPRI_MAX, r3
 80058ee:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 80058f2:	f7ff fef7 	bl	80056e4 <elapsed>
 80058f6:	4b04      	ldr	r3, [pc, #16]	; (8005908 <sys_clock_cycle_get_32+0x28>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4418      	add	r0, r3
	__asm__ volatile(
 80058fc:	f384 8811 	msr	BASEPRI, r4
 8005900:	f3bf 8f6f 	isb	sy
}
 8005904:	bd10      	pop	{r4, pc}
 8005906:	bf00      	nop
 8005908:	20000e14 	.word	0x20000e14

0800590c <stm32_pin_configure>:

static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;

	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800590c:	28af      	cmp	r0, #175	; 0xaf
 800590e:	d817      	bhi.n	8005940 <stm32_pin_configure+0x34>
{
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	4604      	mov	r4, r0
 8005914:	460d      	mov	r5, r1
 8005916:	4616      	mov	r6, r2
 8005918:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 800591a:	4a0b      	ldr	r2, [pc, #44]	; (8005948 <stm32_pin_configure+0x3c>)
 800591c:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8005920:	b15f      	cbz	r7, 800593a <stm32_pin_configure+0x2e>
 8005922:	4638      	mov	r0, r7
 8005924:	f004 ffb6 	bl	800a894 <z_device_is_ready>
 8005928:	b138      	cbz	r0, 800593a <stm32_pin_configure+0x2e>
		return -ENODEV;
	}

	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 800592a:	4633      	mov	r3, r6
 800592c:	462a      	mov	r2, r5
 800592e:	f004 010f 	and.w	r1, r4, #15
 8005932:	4638      	mov	r0, r7
 8005934:	f003 fbec 	bl	8009110 <gpio_stm32_configure>
}
 8005938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
 800593a:	f06f 0012 	mvn.w	r0, #18
 800593e:	e7fb      	b.n	8005938 <stm32_pin_configure+0x2c>
		return -EINVAL;
 8005940:	f06f 0015 	mvn.w	r0, #21
}
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	0800c340 	.word	0x0800c340

0800594c <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800594c:	b530      	push	{r4, r5, lr}
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800594e:	6893      	ldr	r3, [r2, #8]
                        DMA_InitStruct->Mode                   | \
 8005950:	68d4      	ldr	r4, [r2, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8005952:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8005954:	6914      	ldr	r4, [r2, #16]
                        DMA_InitStruct->Mode                   | \
 8005956:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8005958:	6954      	ldr	r4, [r2, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800595a:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800595c:	6994      	ldr	r4, [r2, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800595e:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 8005960:	69d4      	ldr	r4, [r2, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8005962:	4323      	orrs	r3, r4
                        DMA_InitStruct->Priority);
 8005964:	6a94      	ldr	r4, [r2, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8005966:	4323      	orrs	r3, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8005968:	4c17      	ldr	r4, [pc, #92]	; (80059c8 <LL_DMA_Init+0x7c>)
 800596a:	5c65      	ldrb	r5, [r4, r1]
 800596c:	eb00 0e05 	add.w	lr, r0, r5
 8005970:	5944      	ldr	r4, [r0, r5]
 8005972:	f424 4cff 	bic.w	ip, r4, #32640	; 0x7f80
 8005976:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800597a:	ea43 030c 	orr.w	r3, r3, ip
 800597e:	5143      	str	r3, [r0, r5]

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 8005980:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8005982:	f8ce 300c 	str.w	r3, [lr, #12]

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8005986:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8005988:	f8ce 3008 	str.w	r3, [lr, #8]

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800598c:	6a14      	ldr	r4, [r2, #32]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800598e:	f8de 3004 	ldr.w	r3, [lr, #4]
 8005992:	0c1b      	lsrs	r3, r3, #16
 8005994:	041b      	lsls	r3, r3, #16
 8005996:	4323      	orrs	r3, r4
 8005998:	f8ce 3004 	str.w	r3, [lr, #4]
#else
  /*--------------------------- DMAx CSELR Configuration -----------------------
   * Configure the DMA request for DMA instance on Channel x with parameter :
   * - PeriphRequest: DMA_CSELR[31:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800599c:	6a54      	ldr	r4, [r2, #36]	; 0x24
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 800599e:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 80059a2:	008a      	lsls	r2, r1, #2
 80059a4:	210f      	movs	r1, #15
 80059a6:	4091      	lsls	r1, r2
 80059a8:	ea23 0301 	bic.w	r3, r3, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ac:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 80059b0:	b141      	cbz	r1, 80059c4 <LL_DMA_Init+0x78>
  return __builtin_clz(value);
 80059b2:	fab1 f181 	clz	r1, r1
 80059b6:	fa04 f101 	lsl.w	r1, r4, r1
 80059ba:	4319      	orrs	r1, r3
 80059bc:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
#endif /* DMAMUX1 */

  return SUCCESS;
}
 80059c0:	2000      	movs	r0, #0
 80059c2:	bd30      	pop	{r4, r5, pc}
    return 32U;
 80059c4:	2120      	movs	r1, #32
 80059c6:	e7f6      	b.n	80059b6 <LL_DMA_Init+0x6a>
 80059c8:	0800c37c 	.word	0x0800c37c

080059cc <UTILS_PLL_IsBusy>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80059cc:	4b07      	ldr	r3, [pc, #28]	; (80059ec <UTILS_PLL_IsBusy+0x20>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80059d4:	d007      	beq.n	80059e6 <UTILS_PLL_IsBusy+0x1a>

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 80059d6:	2001      	movs	r0, #1
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 80059d8:	4b04      	ldr	r3, [pc, #16]	; (80059ec <UTILS_PLL_IsBusy+0x20>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80059e0:	d000      	beq.n	80059e4 <UTILS_PLL_IsBusy+0x18>
#if defined(RCC_PLLSAI1_SUPPORT)
  /* Check if PLLSAI1 is busy*/
  if(LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
 80059e2:	2001      	movs	r0, #1
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 80059e4:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 80059e6:	2000      	movs	r0, #0
 80059e8:	e7f6      	b.n	80059d8 <UTILS_PLL_IsBusy+0xc>
 80059ea:	bf00      	nop
 80059ec:	40021000 	.word	0x40021000

080059f0 <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 80059f0:	4b01      	ldr	r3, [pc, #4]	; (80059f8 <LL_SetSystemCoreClock+0x8>)
 80059f2:	6018      	str	r0, [r3, #0]
}
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	2000031c 	.word	0x2000031c

080059fc <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 80059fc:	1e42      	subs	r2, r0, #1
 80059fe:	4b29      	ldr	r3, [pc, #164]	; (8005aa4 <LL_SetFlashLatency+0xa8>)
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d84c      	bhi.n	8005a9e <LL_SetFlashLatency+0xa2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8005a04:	4b28      	ldr	r3, [pc, #160]	; (8005aa8 <LL_SetFlashLatency+0xac>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8005a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a10:	d011      	beq.n	8005a36 <LL_SetFlashLatency+0x3a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 8005a12:	4b26      	ldr	r3, [pc, #152]	; (8005aac <LL_SetFlashLatency+0xb0>)
 8005a14:	4298      	cmp	r0, r3
 8005a16:	d829      	bhi.n	8005a6c <LL_SetFlashLatency+0x70>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 8005a18:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 8005a1c:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 8005a20:	4298      	cmp	r0, r3
 8005a22:	d832      	bhi.n	8005a8a <LL_SetFlashLatency+0x8e>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 8005a24:	4b22      	ldr	r3, [pc, #136]	; (8005ab0 <LL_SetFlashLatency+0xb4>)
 8005a26:	4298      	cmp	r0, r3
 8005a28:	d832      	bhi.n	8005a90 <LL_SetFlashLatency+0x94>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8005a2a:	4b22      	ldr	r3, [pc, #136]	; (8005ab4 <LL_SetFlashLatency+0xb8>)
 8005a2c:	4298      	cmp	r0, r3
 8005a2e:	d832      	bhi.n	8005a96 <LL_SetFlashLatency+0x9a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005a30:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 8005a32:	4608      	mov	r0, r1
 8005a34:	e01c      	b.n	8005a70 <LL_SetFlashLatency+0x74>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 8005a36:	4b20      	ldr	r3, [pc, #128]	; (8005ab8 <LL_SetFlashLatency+0xbc>)
 8005a38:	4298      	cmp	r0, r3
 8005a3a:	d80b      	bhi.n	8005a54 <LL_SetFlashLatency+0x58>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 8005a3c:	4b1f      	ldr	r3, [pc, #124]	; (8005abc <LL_SetFlashLatency+0xc0>)
 8005a3e:	4298      	cmp	r0, r3
 8005a40:	d80b      	bhi.n	8005a5a <LL_SetFlashLatency+0x5e>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 8005a42:	4b1f      	ldr	r3, [pc, #124]	; (8005ac0 <LL_SetFlashLatency+0xc4>)
 8005a44:	4298      	cmp	r0, r3
 8005a46:	d80b      	bhi.n	8005a60 <LL_SetFlashLatency+0x64>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 8005a48:	4b1e      	ldr	r3, [pc, #120]	; (8005ac4 <LL_SetFlashLatency+0xc8>)
 8005a4a:	4298      	cmp	r0, r3
 8005a4c:	d80b      	bhi.n	8005a66 <LL_SetFlashLatency+0x6a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005a4e:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 8005a50:	4608      	mov	r0, r1
 8005a52:	e00d      	b.n	8005a70 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_4;
 8005a54:	2104      	movs	r1, #4
  ErrorStatus status = SUCCESS;
 8005a56:	2000      	movs	r0, #0
 8005a58:	e00a      	b.n	8005a70 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_3;
 8005a5a:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	e007      	b.n	8005a70 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 8005a60:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 8005a62:	2000      	movs	r0, #0
 8005a64:	e004      	b.n	8005a70 <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 8005a66:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e001      	b.n	8005a70 <LL_SetFlashLatency+0x74>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005a6c:	2100      	movs	r1, #0
        status = ERROR;
 8005a6e:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8005a70:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <LL_SetFlashLatency+0xcc>)
 8005a72:	6813      	ldr	r3, [r2, #0]
 8005a74:	f023 0307 	bic.w	r3, r3, #7
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8005a7c:	6813      	ldr	r3, [r2, #0]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
    if(LL_FLASH_GetLatency() != latency)
 8005a82:	4299      	cmp	r1, r3
 8005a84:	d00a      	beq.n	8005a9c <LL_SetFlashLatency+0xa0>
      status = ERROR;
 8005a86:	2001      	movs	r0, #1
}
 8005a88:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 8005a8a:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	e7ef      	b.n	8005a70 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 8005a90:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 8005a92:	2000      	movs	r0, #0
 8005a94:	e7ec      	b.n	8005a70 <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 8005a96:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e7e9      	b.n	8005a70 <LL_SetFlashLatency+0x74>
 8005a9c:	4770      	bx	lr
    status = ERROR;
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	04c4b3ff 	.word	0x04c4b3ff
 8005aa8:	40007000 	.word	0x40007000
 8005aac:	018cba80 	.word	0x018cba80
 8005ab0:	00b71b00 	.word	0x00b71b00
 8005ab4:	005b8d80 	.word	0x005b8d80
 8005ab8:	03d09000 	.word	0x03d09000
 8005abc:	02dc6c00 	.word	0x02dc6c00
 8005ac0:	01e84800 	.word	0x01e84800
 8005ac4:	00f42400 	.word	0x00f42400
 8005ac8:	40022000 	.word	0x40022000

08005acc <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8005ad0:	680b      	ldr	r3, [r1, #0]
 8005ad2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005ad6:	4a26      	ldr	r2, [pc, #152]	; (8005b70 <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8005ad8:	5cd3      	ldrb	r3, [r2, r3]
 8005ada:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8005ade:	4b25      	ldr	r3, [pc, #148]	; (8005b74 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	42ab      	cmp	r3, r5
 8005ae4:	d333      	bcc.n	8005b4e <UTILS_EnablePLLAndSwitchSystem+0x82>
  ErrorStatus status = SUCCESS;
 8005ae6:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ae8:	4b23      	ldr	r3, [pc, #140]	; (8005b78 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005af0:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005af8:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8005afa:	4b1f      	ldr	r3, [pc, #124]	; (8005b78 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005b02:	d0fa      	beq.n	8005afa <UTILS_EnablePLLAndSwitchSystem+0x2e>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8005b04:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005b06:	4b1c      	ldr	r3, [pc, #112]	; (8005b78 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005b08:	6899      	ldr	r1, [r3, #8]
 8005b0a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	f042 0203 	orr.w	r2, r2, #3
 8005b18:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b1a:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005b22:	2b0c      	cmp	r3, #12
 8005b24:	d1f9      	bne.n	8005b1a <UTILS_EnablePLLAndSwitchSystem+0x4e>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 8005b26:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005b28:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005b2a:	6899      	ldr	r1, [r3, #8]
 8005b2c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8005b30:	430a      	orrs	r2, r1
 8005b32:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 8005b34:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005b36:	6899      	ldr	r1, [r3, #8]
 8005b38:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8005b40:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	42ab      	cmp	r3, r5
 8005b46:	d809      	bhi.n	8005b5c <UTILS_EnablePLLAndSwitchSystem+0x90>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8005b48:	b16e      	cbz	r6, 8005b66 <UTILS_EnablePLLAndSwitchSystem+0x9a>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f7ff ff54 	bl	80059fc <LL_SetFlashLatency>
  if(status == SUCCESS)
 8005b54:	4606      	mov	r6, r0
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d1f2      	bne.n	8005b40 <UTILS_EnablePLLAndSwitchSystem+0x74>
 8005b5a:	e7c5      	b.n	8005ae8 <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f7ff ff4d 	bl	80059fc <LL_SetFlashLatency>
 8005b62:	4606      	mov	r6, r0
 8005b64:	e7f0      	b.n	8005b48 <UTILS_EnablePLLAndSwitchSystem+0x7c>
    LL_SetSystemCoreClock(hclk_frequency);
 8005b66:	4628      	mov	r0, r5
 8005b68:	f7ff ff42 	bl	80059f0 <LL_SetSystemCoreClock>
 8005b6c:	e7ed      	b.n	8005b4a <UTILS_EnablePLLAndSwitchSystem+0x7e>
 8005b6e:	bf00      	nop
 8005b70:	0800c36c 	.word	0x0800c36c
 8005b74:	2000031c 	.word	0x2000031c
 8005b78:	40021000 	.word	0x40021000

08005b7c <LL_PLL_ConfigSystemClock_HSI>:
{
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	4604      	mov	r4, r0
 8005b80:	460d      	mov	r5, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8005b82:	f7ff ff23 	bl	80059cc <UTILS_PLL_IsBusy>
 8005b86:	bb20      	cbnz	r0, 8005bd2 <LL_PLL_ConfigSystemClock_HSI+0x56>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 8005b88:	4621      	mov	r1, r4
 8005b8a:	4813      	ldr	r0, [pc, #76]	; (8005bd8 <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 8005b8c:	f004 fe71 	bl	800a872 <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005b90:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005b98:	d109      	bne.n	8005bae <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005b9a:	4a10      	ldr	r2, [pc, #64]	; (8005bdc <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8005b9c:	6813      	ldr	r3, [r2, #0]
 8005b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba2:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005ba4:	4b0d      	ldr	r3, [pc, #52]	; (8005bdc <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005bac:	d0fa      	beq.n	8005ba4 <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 8005bae:	6822      	ldr	r2, [r4, #0]
 8005bb0:	6866      	ldr	r6, [r4, #4]
 8005bb2:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8005bb4:	4c09      	ldr	r4, [pc, #36]	; (8005bdc <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8005bb6:	68e7      	ldr	r7, [r4, #12]
 8005bb8:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <LL_PLL_ConfigSystemClock_HSI+0x64>)
 8005bba:	403b      	ands	r3, r7
 8005bbc:	f042 0202 	orr.w	r2, r2, #2
 8005bc0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60e3      	str	r3, [r4, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8005bca:	4629      	mov	r1, r5
 8005bcc:	f7ff ff7e 	bl	8005acc <UTILS_EnablePLLAndSwitchSystem>
}
 8005bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ERROR;
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	e7fc      	b.n	8005bd0 <LL_PLL_ConfigSystemClock_HSI+0x54>
 8005bd6:	bf00      	nop
 8005bd8:	00f42400 	.word	0x00f42400
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	f9ff808c 	.word	0xf9ff808c

08005be4 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 8005be4:	4b03      	ldr	r3, [pc, #12]	; (8005bf4 <z_device_state_init+0x10>)

	while (dev < __device_end) {
 8005be6:	e000      	b.n	8005bea <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 8005be8:	3318      	adds	r3, #24
	while (dev < __device_end) {
 8005bea:	4a03      	ldr	r2, [pc, #12]	; (8005bf8 <z_device_state_init+0x14>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d3fb      	bcc.n	8005be8 <z_device_state_init+0x4>
	}
}
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	0800b6b8 	.word	0x0800b6b8
 8005bf8:	0800b7f0 	.word	0x0800b7f0

08005bfc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8005c00:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <z_sys_init_run_level+0x4c>)
 8005c02:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8005c06:	e009      	b.n	8005c1c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 8005c08:	4240      	negs	r0, r0
 8005c0a:	e017      	b.n	8005c3c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 8005c0c:	68eb      	ldr	r3, [r5, #12]
 8005c0e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 8005c10:	68ea      	ldr	r2, [r5, #12]
 8005c12:	7853      	ldrb	r3, [r2, #1]
 8005c14:	f043 0301 	orr.w	r3, r3, #1
 8005c18:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8005c1a:	3408      	adds	r4, #8
 8005c1c:	1c73      	adds	r3, r6, #1
 8005c1e:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <z_sys_init_run_level+0x4c>)
 8005c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	d90d      	bls.n	8005c44 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 8005c28:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	4798      	blx	r3
		if (dev != NULL) {
 8005c30:	2d00      	cmp	r5, #0
 8005c32:	d0f2      	beq.n	8005c1a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d0eb      	beq.n	8005c10 <z_sys_init_run_level+0x14>
				if (rc < 0) {
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	dbe5      	blt.n	8005c08 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 8005c3c:	28ff      	cmp	r0, #255	; 0xff
 8005c3e:	dde5      	ble.n	8005c0c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 8005c40:	20ff      	movs	r0, #255	; 0xff
 8005c42:	e7e3      	b.n	8005c0c <z_sys_init_run_level+0x10>
		}
	}
}
 8005c44:	bd70      	pop	{r4, r5, r6, pc}
 8005c46:	bf00      	nop
 8005c48:	0800c384 	.word	0x0800c384

08005c4c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8005c4c:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8005c4e:	4605      	mov	r5, r0
 8005c50:	b328      	cbz	r0, 8005c9e <z_impl_device_get_binding+0x52>
 8005c52:	7803      	ldrb	r3, [r0, #0]
 8005c54:	b32b      	cbz	r3, 8005ca2 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 8005c56:	4c14      	ldr	r4, [pc, #80]	; (8005ca8 <z_impl_device_get_binding+0x5c>)
 8005c58:	e000      	b.n	8005c5c <z_impl_device_get_binding+0x10>
 8005c5a:	3418      	adds	r4, #24
 8005c5c:	4b13      	ldr	r3, [pc, #76]	; (8005cac <z_impl_device_get_binding+0x60>)
 8005c5e:	429c      	cmp	r4, r3
 8005c60:	d008      	beq.n	8005c74 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
 8005c62:	4620      	mov	r0, r4
 8005c64:	f004 fe16 	bl	800a894 <z_device_is_ready>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d0f6      	beq.n	8005c5a <z_impl_device_get_binding+0xe>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	42ab      	cmp	r3, r5
 8005c70:	d1f3      	bne.n	8005c5a <z_impl_device_get_binding+0xe>
 8005c72:	e012      	b.n	8005c9a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 8005c74:	4c0c      	ldr	r4, [pc, #48]	; (8005ca8 <z_impl_device_get_binding+0x5c>)
 8005c76:	e000      	b.n	8005c7a <z_impl_device_get_binding+0x2e>
 8005c78:	3418      	adds	r4, #24
 8005c7a:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <z_impl_device_get_binding+0x60>)
 8005c7c:	429c      	cmp	r4, r3
 8005c7e:	d00b      	beq.n	8005c98 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8005c80:	4620      	mov	r0, r4
 8005c82:	f004 fe07 	bl	800a894 <z_device_is_ready>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d0f6      	beq.n	8005c78 <z_impl_device_get_binding+0x2c>
 8005c8a:	6821      	ldr	r1, [r4, #0]
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	f7fa fc46 	bl	800051e <strcmp>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d1f0      	bne.n	8005c78 <z_impl_device_get_binding+0x2c>
 8005c96:	e000      	b.n	8005c9a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 8005c98:	2400      	movs	r4, #0
}
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	e7fb      	b.n	8005c9a <z_impl_device_get_binding+0x4e>
 8005ca2:	2400      	movs	r4, #0
 8005ca4:	e7f9      	b.n	8005c9a <z_impl_device_get_binding+0x4e>
 8005ca6:	bf00      	nop
 8005ca8:	0800b6b8 	.word	0x0800b6b8
 8005cac:	0800b7f0 	.word	0x0800b7f0

08005cb0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 8005cb0:	4b01      	ldr	r3, [pc, #4]	; (8005cb8 <z_impl_z_errno+0x8>)
 8005cb2:	6898      	ldr	r0, [r3, #8]
}
 8005cb4:	3064      	adds	r0, #100	; 0x64
 8005cb6:	4770      	bx	lr
 8005cb8:	20000e20 	.word	0x20000e20

08005cbc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 8005cc0:	4c10      	ldr	r4, [pc, #64]	; (8005d04 <init_idle_thread+0x48>)
 8005cc2:	23c8      	movs	r3, #200	; 0xc8
 8005cc4:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
 8005cc8:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8005ccc:	4b0e      	ldr	r3, [pc, #56]	; (8005d08 <init_idle_thread+0x4c>)
 8005cce:	eb03 00cc 	add.w	r0, r3, ip, lsl #3
	z_setup_new_thread(thread, stack,
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	9305      	str	r3, [sp, #20]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	9204      	str	r2, [sp, #16]
 8005cda:	220f      	movs	r2, #15
 8005cdc:	9203      	str	r2, [sp, #12]
 8005cde:	9302      	str	r3, [sp, #8]
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	9000      	str	r0, [sp, #0]
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <init_idle_thread+0x50>)
 8005ce6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005cea:	4909      	ldr	r1, [pc, #36]	; (8005d10 <init_idle_thread+0x54>)
 8005cec:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f000 f8db 	bl	8005eac <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005cf6:	7b63      	ldrb	r3, [r4, #13]
 8005cf8:	f023 0304 	bic.w	r3, r3, #4
 8005cfc:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8005cfe:	b006      	add	sp, #24
 8005d00:	bd10      	pop	{r4, pc}
 8005d02:	bf00      	nop
 8005d04:	20000538 	.word	0x20000538
 8005d08:	20000e20 	.word	0x20000e20
 8005d0c:	0800a991 	.word	0x0800a991
 8005d10:	20002400 	.word	0x20002400

08005d14 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 8005d18:	f000 feb2 	bl	8006a80 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 8005d1c:	4d1b      	ldr	r5, [pc, #108]	; (8005d8c <prepare_multithreading+0x78>)
 8005d1e:	4b1c      	ldr	r3, [pc, #112]	; (8005d90 <prepare_multithreading+0x7c>)
 8005d20:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8005d22:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <prepare_multithreading+0x80>)
 8005d24:	9305      	str	r3, [sp, #20]
 8005d26:	2301      	movs	r3, #1
 8005d28:	9304      	str	r3, [sp, #16]
 8005d2a:	2400      	movs	r4, #0
 8005d2c:	9403      	str	r4, [sp, #12]
 8005d2e:	9402      	str	r4, [sp, #8]
 8005d30:	9401      	str	r4, [sp, #4]
 8005d32:	9400      	str	r4, [sp, #0]
 8005d34:	4b18      	ldr	r3, [pc, #96]	; (8005d98 <prepare_multithreading+0x84>)
 8005d36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d3a:	4918      	ldr	r1, [pc, #96]	; (8005d9c <prepare_multithreading+0x88>)
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f000 f8b5 	bl	8005eac <z_setup_new_thread>
 8005d42:	4606      	mov	r6, r0
 8005d44:	7b6b      	ldrb	r3, [r5, #13]
 8005d46:	f023 0304 	bic.w	r3, r3, #4
 8005d4a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f004 ffa7 	bl	800aca0 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8005d52:	2c00      	cmp	r4, #0
 8005d54:	dd02      	ble.n	8005d5c <prepare_multithreading+0x48>
			CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
	}

	return stack_ptr;
}
 8005d56:	4630      	mov	r0, r6
 8005d58:	b006      	add	sp, #24
 8005d5a:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f7ff ffad 	bl	8005cbc <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8005d62:	4a0f      	ldr	r2, [pc, #60]	; (8005da0 <prepare_multithreading+0x8c>)
 8005d64:	23c8      	movs	r3, #200	; 0xc8
 8005d66:	fb03 2204 	mla	r2, r3, r4, r2
 8005d6a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8005d6e:	4b08      	ldr	r3, [pc, #32]	; (8005d90 <prepare_multithreading+0x7c>)
 8005d70:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005d74:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 8005d76:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 8005d78:	eb04 1104 	add.w	r1, r4, r4, lsl #4
 8005d7c:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <prepare_multithreading+0x90>)
 8005d7e:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8005d82:	f502 6208 	add.w	r2, r2, #2176	; 0x880
		_kernel.cpus[i].irq_stack =
 8005d86:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8005d88:	3401      	adds	r4, #1
 8005d8a:	e7e2      	b.n	8005d52 <prepare_multithreading+0x3e>
 8005d8c:	20000600 	.word	0x20000600
 8005d90:	20000e20 	.word	0x20000e20
 8005d94:	0800c39c 	.word	0x0800c39c
 8005d98:	08005da9 	.word	0x08005da9
 8005d9c:	20001380 	.word	0x20001380
 8005da0:	20000538 	.word	0x20000538
 8005da4:	20002580 	.word	0x20002580

08005da8 <bg_thread_main>:
{
 8005da8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8005daa:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <bg_thread_main+0x30>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8005db0:	2002      	movs	r0, #2
 8005db2:	f7ff ff23 	bl	8005bfc <z_sys_init_run_level>
	boot_banner();
 8005db6:	f005 f9a3 	bl	800b100 <boot_banner>
	z_cpp_init_static();
 8005dba:	f002 fcca 	bl	8008752 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8005dbe:	2003      	movs	r0, #3
 8005dc0:	f7ff ff1c 	bl	8005bfc <z_sys_init_run_level>
	z_init_static_threads();
 8005dc4:	f000 f8a2 	bl	8005f0c <z_init_static_threads>
	main();
 8005dc8:	f005 f998 	bl	800b0fc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8005dcc:	4a03      	ldr	r2, [pc, #12]	; (8005ddc <bg_thread_main+0x34>)
 8005dce:	7b13      	ldrb	r3, [r2, #12]
 8005dd0:	f023 0301 	bic.w	r3, r3, #1
 8005dd4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8005dd6:	bd08      	pop	{r3, pc}
 8005dd8:	20000e81 	.word	0x20000e81
 8005ddc:	20000600 	.word	0x20000600

08005de0 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 8005de0:	b508      	push	{r3, lr}
 8005de2:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8005de4:	4a01      	ldr	r2, [pc, #4]	; (8005dec <switch_to_main_thread+0xc>)
 8005de6:	4802      	ldr	r0, [pc, #8]	; (8005df0 <switch_to_main_thread+0x10>)
 8005de8:	f7fb fe2c 	bl	8001a44 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8005dec:	08005da9 	.word	0x08005da9
 8005df0:	20000600 	.word	0x20000600

08005df4 <z_bss_zero>:
{
 8005df4:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8005df6:	4803      	ldr	r0, [pc, #12]	; (8005e04 <z_bss_zero+0x10>)
 8005df8:	4a03      	ldr	r2, [pc, #12]	; (8005e08 <z_bss_zero+0x14>)
 8005dfa:	1a12      	subs	r2, r2, r0
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	f005 f992 	bl	800b126 <memset>
}
 8005e02:	bd08      	pop	{r3, pc}
 8005e04:	20000470 	.word	0x20000470
 8005e08:	20000e84 	.word	0x20000e84

08005e0c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8005e0c:	b500      	push	{lr}
 8005e0e:	b0b3      	sub	sp, #204	; 0xcc
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8005e10:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8005e12:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8005e16:	4c1c      	ldr	r4, [pc, #112]	; (8005e88 <z_cstart+0x7c>)
 8005e18:	6963      	ldr	r3, [r4, #20]
 8005e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e1e:	6163      	str	r3, [r4, #20]
 8005e20:	23f0      	movs	r3, #240	; 0xf0
 8005e22:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8005e26:	2500      	movs	r5, #0
 8005e28:	77e5      	strb	r5, [r4, #31]
 8005e2a:	7625      	strb	r5, [r4, #24]
 8005e2c:	7665      	strb	r5, [r4, #25]
 8005e2e:	76a5      	strb	r5, [r4, #26]
 8005e30:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8005e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e36:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005e3a:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8005e3c:	f7fb ff48 	bl	8001cd0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8005e40:	f7fb fc58 	bl	80016f4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8005e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e48:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8005e4a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8005e4c:	f7fc f808 	bl	8001e60 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8005e50:	f7fb ff96 	bl	8001d80 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 8005e54:	2401      	movs	r4, #1
 8005e56:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 8005e5a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 8005e5e:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
 8005e60:	951b      	str	r5, [sp, #108]	; 0x6c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
 8005e62:	951d      	str	r5, [sp, #116]	; 0x74
#endif

	_current_cpu->current = dummy_thread;
 8005e64:	4b09      	ldr	r3, [pc, #36]	; (8005e8c <z_cstart+0x80>)
 8005e66:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8005e6a:	f7ff febb 	bl	8005be4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f7ff fec4 	bl	8005bfc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8005e74:	4620      	mov	r0, r4
 8005e76:	f7ff fec1 	bl	8005bfc <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 8005e7a:	f7ff ff4b 	bl	8005d14 <prepare_multithreading>
 8005e7e:	f7ff ffaf 	bl	8005de0 <switch_to_main_thread>
 8005e82:	bf00      	nop
 8005e84:	20002e00 	.word	0x20002e00
 8005e88:	e000ed00 	.word	0xe000ed00
 8005e8c:	20000e20 	.word	0x20000e20

08005e90 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 8005e90:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8005e92:	ea53 0102 	orrs.w	r1, r3, r2
 8005e96:	d102      	bne.n	8005e9e <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 8005e98:	f004 fd48 	bl	800a92c <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 8005e9c:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8005e9e:	4902      	ldr	r1, [pc, #8]	; (8005ea8 <schedule_new_thread+0x18>)
 8005ea0:	3018      	adds	r0, #24
 8005ea2:	f000 ff53 	bl	8006d4c <z_add_timeout>
 8005ea6:	e7f9      	b.n	8005e9c <schedule_new_thread+0xc>
 8005ea8:	0800acd9 	.word	0x0800acd9

08005eac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8005eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	460e      	mov	r6, r1
 8005eb4:	4615      	mov	r5, r2
 8005eb6:	461f      	mov	r7, r3
 8005eb8:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->head = (sys_dnode_t *)list;
 8005ebc:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 8005ebe:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 8005ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ec6:	f004 fd35 	bl	800a934 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 8005eca:	462a      	mov	r2, r5
 8005ecc:	4631      	mov	r1, r6
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f004 fd13 	bl	800a8fa <setup_thread_stack>
 8005ed4:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8005ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ed8:	9302      	str	r3, [sp, #8]
 8005eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f7fb fd01 	bl	80018f0 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	6563      	str	r3, [r4, #84]	; 0x54
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 8005ef2:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <z_setup_new_thread+0x5c>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	b123      	cbz	r3, 8005f02 <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8005ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005efa:	6763      	str	r3, [r4, #116]	; 0x74
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
 8005efc:	4628      	mov	r0, r5
 8005efe:	b005      	add	sp, #20
 8005f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 8005f02:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
 8005f04:	e7fa      	b.n	8005efc <z_setup_new_thread+0x50>
 8005f06:	bf00      	nop
 8005f08:	20000e20 	.word	0x20000e20

08005f0c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 8005f10:	4c1d      	ldr	r4, [pc, #116]	; (8005f88 <z_init_static_threads+0x7c>)
 8005f12:	e014      	b.n	8005f3e <z_init_static_threads+0x32>
		z_setup_new_thread(
 8005f14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f16:	9305      	str	r3, [sp, #20]
 8005f18:	6a23      	ldr	r3, [r4, #32]
 8005f1a:	9304      	str	r3, [sp, #16]
 8005f1c:	69e3      	ldr	r3, [r4, #28]
 8005f1e:	9303      	str	r3, [sp, #12]
 8005f20:	69a3      	ldr	r3, [r4, #24]
 8005f22:	9302      	str	r3, [sp, #8]
 8005f24:	6963      	ldr	r3, [r4, #20]
 8005f26:	9301      	str	r3, [sp, #4]
 8005f28:	6923      	ldr	r3, [r4, #16]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	68e3      	ldr	r3, [r4, #12]
 8005f2e:	68a2      	ldr	r2, [r4, #8]
 8005f30:	6861      	ldr	r1, [r4, #4]
 8005f32:	6820      	ldr	r0, [r4, #0]
 8005f34:	f7ff ffba 	bl	8005eac <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8005f3c:	3430      	adds	r4, #48	; 0x30
 8005f3e:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <z_init_static_threads+0x80>)
 8005f40:	429c      	cmp	r4, r3
 8005f42:	d3e7      	bcc.n	8005f14 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 8005f44:	f000 fb20 	bl	8006588 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8005f48:	4c0f      	ldr	r4, [pc, #60]	; (8005f88 <z_init_static_threads+0x7c>)
 8005f4a:	e000      	b.n	8005f4e <z_init_static_threads+0x42>
 8005f4c:	3430      	adds	r4, #48	; 0x30
 8005f4e:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <z_init_static_threads+0x80>)
 8005f50:	429c      	cmp	r4, r3
 8005f52:	d214      	bcs.n	8005f7e <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8005f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f5a:	d0f7      	beq.n	8005f4c <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 8005f5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f60:	17d8      	asrs	r0, r3, #31
 8005f62:	0082      	lsls	r2, r0, #2
 8005f64:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8005f68:	0099      	lsls	r1, r3, #2
 8005f6a:	18c9      	adds	r1, r1, r3
 8005f6c:	eb40 0002 	adc.w	r0, r0, r2
 8005f70:	184a      	adds	r2, r1, r1
 8005f72:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 8005f76:	6820      	ldr	r0, [r4, #0]
 8005f78:	f7ff ff8a 	bl	8005e90 <schedule_new_thread>
 8005f7c:	e7e6      	b.n	8005f4c <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 8005f7e:	f000 fd0d 	bl	800699c <k_sched_unlock>
}
 8005f82:	b006      	add	sp, #24
 8005f84:	bd10      	pop	{r4, pc}
 8005f86:	bf00      	nop
 8005f88:	200003c8 	.word	0x200003c8
 8005f8c:	200003f8 	.word	0x200003f8

08005f90 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8005f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f94:	b083      	sub	sp, #12
 8005f96:	4604      	mov	r4, r0
 8005f98:	461d      	mov	r5, r3
	__asm__ volatile(
 8005f9a:	f04f 0310 	mov.w	r3, #16
 8005f9e:	f3ef 8711 	mrs	r7, BASEPRI
 8005fa2:	f383 8812 	msr	BASEPRI_MAX, r3
 8005fa6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8005faa:	68c1      	ldr	r1, [r0, #12]
 8005fac:	b999      	cbnz	r1, 8005fd6 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 8005fae:	2900      	cmp	r1, #0
 8005fb0:	d14f      	bne.n	8006052 <z_impl_k_mutex_lock+0xc2>
 8005fb2:	4b3a      	ldr	r3, [pc, #232]	; (800609c <z_impl_k_mutex_lock+0x10c>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8005fba:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 8005fbc:	3101      	adds	r1, #1
 8005fbe:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 8005fc0:	4b36      	ldr	r3, [pc, #216]	; (800609c <z_impl_k_mutex_lock+0x10c>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8005fc6:	f387 8811 	msr	BASEPRI, r7
 8005fca:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 8005fce:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 8005fd0:	b003      	add	sp, #12
 8005fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fd6:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8005fd8:	6882      	ldr	r2, [r0, #8]
 8005fda:	4b30      	ldr	r3, [pc, #192]	; (800609c <z_impl_k_mutex_lock+0x10c>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d0e5      	beq.n	8005fae <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8005fe2:	ea55 0106 	orrs.w	r1, r5, r6
 8005fe6:	bf0c      	ite	eq
 8005fe8:	f04f 0801 	moveq.w	r8, #1
 8005fec:	f04f 0800 	movne.w	r8, #0
 8005ff0:	d031      	beq.n	8006056 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 8005ff2:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8005ffc:	f004 fcd4 	bl	800a9a8 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8006000:	4581      	cmp	r9, r0
 8006002:	dc2f      	bgt.n	8006064 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 8006004:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8006008:	9600      	str	r6, [sp, #0]
 800600a:	9501      	str	r5, [sp, #4]
 800600c:	4622      	mov	r2, r4
 800600e:	4639      	mov	r1, r7
 8006010:	4823      	ldr	r0, [pc, #140]	; (80060a0 <z_impl_k_mutex_lock+0x110>)
 8006012:	f000 fc0d 	bl	8006830 <z_pend_curr>
	if (got_mutex == 0) {
 8006016:	2800      	cmp	r0, #0
 8006018:	d0da      	beq.n	8005fd0 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 800601a:	f04f 0310 	mov.w	r3, #16
 800601e:	f3ef 8511 	mrs	r5, BASEPRI
 8006022:	f383 8812 	msr	BASEPRI_MAX, r3
 8006026:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800602a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800602c:	429c      	cmp	r4, r3
 800602e:	d01f      	beq.n	8006070 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8006030:	b1f3      	cbz	r3, 8006070 <z_impl_k_mutex_lock+0xe0>
 8006032:	6921      	ldr	r1, [r4, #16]
 8006034:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8006038:	f004 fcb6 	bl	800a9a8 <new_prio_for_inheritance>
 800603c:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800603e:	4620      	mov	r0, r4
 8006040:	f004 fcbd 	bl	800a9be <adjust_owner_prio>
 8006044:	b9b0      	cbnz	r0, 8006074 <z_impl_k_mutex_lock+0xe4>
 8006046:	f1b9 0f00 	cmp.w	r9, #0
 800604a:	d015      	beq.n	8006078 <z_impl_k_mutex_lock+0xe8>
 800604c:	f04f 0801 	mov.w	r8, #1
 8006050:	e012      	b.n	8006078 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 8006052:	6923      	ldr	r3, [r4, #16]
 8006054:	e7b1      	b.n	8005fba <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 8006056:	f387 8811 	msr	BASEPRI, r7
 800605a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 800605e:	f06f 000f 	mvn.w	r0, #15
 8006062:	e7b5      	b.n	8005fd0 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 8006064:	4601      	mov	r1, r0
 8006066:	4620      	mov	r0, r4
 8006068:	f004 fca9 	bl	800a9be <adjust_owner_prio>
 800606c:	4681      	mov	r9, r0
 800606e:	e7cb      	b.n	8006008 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8006070:	6921      	ldr	r1, [r4, #16]
 8006072:	e7e4      	b.n	800603e <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8006074:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 8006078:	f1b8 0f00 	cmp.w	r8, #0
 800607c:	d106      	bne.n	800608c <z_impl_k_mutex_lock+0xfc>
 800607e:	f385 8811 	msr	BASEPRI, r5
 8006082:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 8006086:	f06f 000a 	mvn.w	r0, #10
 800608a:	e7a1      	b.n	8005fd0 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 800608c:	4629      	mov	r1, r5
 800608e:	4804      	ldr	r0, [pc, #16]	; (80060a0 <z_impl_k_mutex_lock+0x110>)
 8006090:	f000 fa5e 	bl	8006550 <z_reschedule>
	return -EAGAIN;
 8006094:	f06f 000a 	mvn.w	r0, #10
 8006098:	e79a      	b.n	8005fd0 <z_impl_k_mutex_lock+0x40>
 800609a:	bf00      	nop
 800609c:	20000e20 	.word	0x20000e20
 80060a0:	20000e48 	.word	0x20000e48

080060a4 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 80060a4:	6882      	ldr	r2, [r0, #8]
 80060a6:	2a00      	cmp	r2, #0
 80060a8:	d034      	beq.n	8006114 <z_impl_k_mutex_unlock+0x70>
{
 80060aa:	b538      	push	{r3, r4, r5, lr}
 80060ac:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 80060ae:	4b1c      	ldr	r3, [pc, #112]	; (8006120 <z_impl_k_mutex_unlock+0x7c>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d131      	bne.n	800611a <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 80060b6:	7bda      	ldrb	r2, [r3, #15]
 80060b8:	3a01      	subs	r2, #1
 80060ba:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 80060bc:	68c3      	ldr	r3, [r0, #12]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d905      	bls.n	80060ce <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 80060c2:	3b01      	subs	r3, #1
 80060c4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 80060c6:	f000 fc69 	bl	800699c <k_sched_unlock>

	return 0;
 80060ca:	2000      	movs	r0, #0
}
 80060cc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 80060ce:	f04f 0310 	mov.w	r3, #16
 80060d2:	f3ef 8511 	mrs	r5, BASEPRI
 80060d6:	f383 8812 	msr	BASEPRI_MAX, r3
 80060da:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 80060de:	6901      	ldr	r1, [r0, #16]
 80060e0:	f004 fc6d 	bl	800a9be <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 80060e4:	4620      	mov	r0, r4
 80060e6:	f004 fea2 	bl	800ae2e <z_unpend_first_thread>
	mutex->owner = new_owner;
 80060ea:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 80060ec:	b158      	cbz	r0, 8006106 <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 80060ee:	f990 300e 	ldrsb.w	r3, [r0, #14]
 80060f2:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80060f4:	2300      	movs	r3, #0
 80060f6:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 80060f8:	f004 fdd2 	bl	800aca0 <z_ready_thread>
		z_reschedule(&lock, key);
 80060fc:	4629      	mov	r1, r5
 80060fe:	4809      	ldr	r0, [pc, #36]	; (8006124 <z_impl_k_mutex_unlock+0x80>)
 8006100:	f000 fa26 	bl	8006550 <z_reschedule>
 8006104:	e7df      	b.n	80060c6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 800610a:	f385 8811 	msr	BASEPRI, r5
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	e7d8      	b.n	80060c6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 8006114:	f06f 0015 	mvn.w	r0, #21
}
 8006118:	4770      	bx	lr
		return -EPERM;
 800611a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800611e:	e7d5      	b.n	80060cc <z_impl_k_mutex_unlock+0x28>
 8006120:	20000e20 	.word	0x20000e20
 8006124:	20000e48 	.word	0x20000e48

08006128 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4604      	mov	r4, r0
	__asm__ volatile(
 800612c:	f04f 0310 	mov.w	r3, #16
 8006130:	f3ef 8511 	mrs	r5, BASEPRI
 8006134:	f383 8812 	msr	BASEPRI_MAX, r3
 8006138:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800613c:	f004 fe77 	bl	800ae2e <z_unpend_first_thread>

	if (thread != NULL) {
 8006140:	b140      	cbz	r0, 8006154 <z_impl_k_sem_give+0x2c>
 8006142:	2200      	movs	r2, #0
 8006144:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8006146:	f004 fdab 	bl	800aca0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800614a:	4629      	mov	r1, r5
 800614c:	4809      	ldr	r0, [pc, #36]	; (8006174 <z_impl_k_sem_give+0x4c>)
 800614e:	f000 f9ff 	bl	8006550 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8006152:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8006154:	68a3      	ldr	r3, [r4, #8]
 8006156:	68e2      	ldr	r2, [r4, #12]
 8006158:	4293      	cmp	r3, r2
 800615a:	d008      	beq.n	800616e <z_impl_k_sem_give+0x46>
 800615c:	2201      	movs	r2, #1
 800615e:	4413      	add	r3, r2
 8006160:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 8006162:	2102      	movs	r1, #2
 8006164:	f104 0010 	add.w	r0, r4, #16
 8006168:	f004 ffb8 	bl	800b0dc <z_handle_obj_poll_events>
}
 800616c:	e7ed      	b.n	800614a <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800616e:	2200      	movs	r2, #0
 8006170:	e7f5      	b.n	800615e <z_impl_k_sem_give+0x36>
 8006172:	bf00      	nop
 8006174:	20000e4c 	.word	0x20000e4c

08006178 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8006178:	b510      	push	{r4, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	f04f 0410 	mov.w	r4, #16
 8006180:	f3ef 8111 	mrs	r1, BASEPRI
 8006184:	f384 8812 	msr	BASEPRI_MAX, r4
 8006188:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800618c:	6884      	ldr	r4, [r0, #8]
 800618e:	b144      	cbz	r4, 80061a2 <z_impl_k_sem_take+0x2a>
		sem->count--;
 8006190:	3c01      	subs	r4, #1
 8006192:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8006194:	f381 8811 	msr	BASEPRI, r1
 8006198:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800619c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800619e:	b002      	add	sp, #8
 80061a0:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80061a2:	ea53 0402 	orrs.w	r4, r3, r2
 80061a6:	d006      	beq.n	80061b6 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 80061a8:	9200      	str	r2, [sp, #0]
 80061aa:	9301      	str	r3, [sp, #4]
 80061ac:	4602      	mov	r2, r0
 80061ae:	4805      	ldr	r0, [pc, #20]	; (80061c4 <z_impl_k_sem_take+0x4c>)
 80061b0:	f000 fb3e 	bl	8006830 <z_pend_curr>
	return ret;
 80061b4:	e7f3      	b.n	800619e <z_impl_k_sem_take+0x26>
 80061b6:	f381 8811 	msr	BASEPRI, r1
 80061ba:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 80061be:	f06f 000f 	mvn.w	r0, #15
 80061c2:	e7ec      	b.n	800619e <z_impl_k_sem_take+0x26>
 80061c4:	20000e4c 	.word	0x20000e4c

080061c8 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4604      	mov	r4, r0
	__asm__ volatile(
 80061cc:	f04f 0310 	mov.w	r3, #16
 80061d0:	f3ef 8511 	mrs	r5, BASEPRI
 80061d4:	f383 8812 	msr	BASEPRI_MAX, r3
 80061d8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 80061dc:	e004      	b.n	80061e8 <z_impl_k_sem_reset+0x20>
 80061de:	f06f 020a 	mvn.w	r2, #10
 80061e2:	67c2      	str	r2, [r0, #124]	; 0x7c
		thread = z_unpend_first_thread(&sem->wait_q);
		if (thread == NULL) {
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
 80061e4:	f004 fd5c 	bl	800aca0 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
 80061e8:	4620      	mov	r0, r4
 80061ea:	f004 fe20 	bl	800ae2e <z_unpend_first_thread>
		if (thread == NULL) {
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d1f5      	bne.n	80061de <z_impl_k_sem_reset+0x16>
	}
	sem->count = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 80061f6:	2102      	movs	r1, #2
 80061f8:	f104 0010 	add.w	r0, r4, #16
 80061fc:	f004 ff6e 	bl	800b0dc <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
 8006200:	4629      	mov	r1, r5
 8006202:	4802      	ldr	r0, [pc, #8]	; (800620c <z_impl_k_sem_reset+0x44>)
 8006204:	f000 f9a4 	bl	8006550 <z_reschedule>
}
 8006208:	bd38      	pop	{r3, r4, r5, pc}
 800620a:	bf00      	nop
 800620c:	20000e4c 	.word	0x20000e4c

08006210 <submit_to_queue_locked>:
{
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 8006214:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8006216:	f013 0f02 	tst.w	r3, #2
 800621a:	d15c      	bne.n	80062d6 <submit_to_queue_locked+0xc6>
 800621c:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800621e:	f013 0f04 	tst.w	r3, #4
 8006222:	d15d      	bne.n	80062e0 <submit_to_queue_locked+0xd0>
		if (*queuep == NULL) {
 8006224:	680b      	ldr	r3, [r1, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d038      	beq.n	800629c <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 800622a:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800622c:	f013 0f01 	tst.w	r3, #1
 8006230:	d037      	beq.n	80062a2 <submit_to_queue_locked+0x92>
			*queuep = work->queue;
 8006232:	68a3      	ldr	r3, [r4, #8]
 8006234:	602b      	str	r3, [r5, #0]
			ret = 2;
 8006236:	2702      	movs	r7, #2
		int rc = queue_submit_locked(*queuep, work);
 8006238:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 800623a:	2e00      	cmp	r6, #0
 800623c:	d03f      	beq.n	80062be <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800623e:	4b29      	ldr	r3, [pc, #164]	; (80062e4 <submit_to_queue_locked+0xd4>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	42b3      	cmp	r3, r6
 8006244:	d02f      	beq.n	80062a6 <submit_to_queue_locked+0x96>
 8006246:	2300      	movs	r3, #0
 8006248:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 800624a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800624e:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8006252:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8006256:	f013 0f01 	tst.w	r3, #1
 800625a:	d033      	beq.n	80062c4 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 800625c:	b101      	cbz	r1, 8006260 <submit_to_queue_locked+0x50>
 800625e:	b3a2      	cbz	r2, 80062ca <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 8006260:	b100      	cbz	r0, 8006264 <submit_to_queue_locked+0x54>
 8006262:	b3a9      	cbz	r1, 80062d0 <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 8006264:	2300      	movs	r3, #0
 8006266:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 8006268:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 800626c:	b313      	cbz	r3, 80062b4 <submit_to_queue_locked+0xa4>
	parent->next = child;
 800626e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8006270:	f8c6 40cc 	str.w	r4, [r6, #204]	; 0xcc
	if (queue != NULL) {
 8006274:	b12e      	cbz	r6, 8006282 <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 8006276:	2200      	movs	r2, #0
 8006278:	4611      	mov	r1, r2
 800627a:	f106 00d0 	add.w	r0, r6, #208	; 0xd0
 800627e:	f004 fe05 	bl	800ae8c <z_sched_wake>
		ret = 1;
 8006282:	2001      	movs	r0, #1
		if (rc < 0) {
 8006284:	2800      	cmp	r0, #0
 8006286:	db06      	blt.n	8006296 <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 8006288:	68e3      	ldr	r3, [r4, #12]
 800628a:	f043 0304 	orr.w	r3, r3, #4
 800628e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	60a3      	str	r3, [r4, #8]
 8006294:	4638      	mov	r0, r7
	if (ret <= 0) {
 8006296:	2800      	cmp	r0, #0
 8006298:	dc21      	bgt.n	80062de <submit_to_queue_locked+0xce>
 800629a:	e01e      	b.n	80062da <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 800629c:	6883      	ldr	r3, [r0, #8]
 800629e:	600b      	str	r3, [r1, #0]
 80062a0:	e7c3      	b.n	800622a <submit_to_queue_locked+0x1a>
		ret = 1;
 80062a2:	2701      	movs	r7, #1
 80062a4:	e7c8      	b.n	8006238 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 80062a6:	f004 fb38 	bl	800a91a <k_is_in_isr>
 80062aa:	b908      	cbnz	r0, 80062b0 <submit_to_queue_locked+0xa0>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e7cb      	b.n	8006248 <submit_to_queue_locked+0x38>
 80062b0:	2300      	movs	r3, #0
 80062b2:	e7c9      	b.n	8006248 <submit_to_queue_locked+0x38>
 80062b4:	f8c6 40cc 	str.w	r4, [r6, #204]	; 0xcc
	list->head = node;
 80062b8:	f8c6 40c8 	str.w	r4, [r6, #200]	; 0xc8
}
 80062bc:	e7da      	b.n	8006274 <submit_to_queue_locked+0x64>
		return -EINVAL;
 80062be:	f06f 0015 	mvn.w	r0, #21
 80062c2:	e7df      	b.n	8006284 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 80062c4:	f06f 0012 	mvn.w	r0, #18
 80062c8:	e7dc      	b.n	8006284 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 80062ca:	f06f 000f 	mvn.w	r0, #15
 80062ce:	e7d9      	b.n	8006284 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 80062d0:	f06f 000f 	mvn.w	r0, #15
 80062d4:	e7d6      	b.n	8006284 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 80062d6:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	602b      	str	r3, [r5, #0]
}
 80062de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 80062e0:	2000      	movs	r0, #0
 80062e2:	e7fa      	b.n	80062da <submit_to_queue_locked+0xca>
 80062e4:	20000e20 	.word	0x20000e20

080062e8 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 80062e8:	b508      	push	{r3, lr}
 80062ea:	4684      	mov	ip, r0
 80062ec:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80062ee:	ea53 0102 	orrs.w	r1, r3, r2
 80062f2:	d00c      	beq.n	800630e <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
 80062f4:	68c1      	ldr	r1, [r0, #12]
 80062f6:	f041 0108 	orr.w	r1, r1, #8
 80062fa:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
 80062fc:	f8dc 1000 	ldr.w	r1, [ip]
 8006300:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 8006302:	4905      	ldr	r1, [pc, #20]	; (8006318 <schedule_for_queue_locked+0x30>)
 8006304:	3010      	adds	r0, #16
 8006306:	f000 fd21 	bl	8006d4c <z_add_timeout>

	return ret;
 800630a:	2001      	movs	r0, #1
}
 800630c:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
 800630e:	4661      	mov	r1, ip
 8006310:	f7ff ff7e 	bl	8006210 <submit_to_queue_locked>
 8006314:	e7fa      	b.n	800630c <schedule_for_queue_locked+0x24>
 8006316:	bf00      	nop
 8006318:	0800aa7b 	.word	0x0800aa7b

0800631c <finalize_cancel_locked>:
{
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 8006320:	68c3      	ldr	r3, [r0, #12]
 8006322:	f023 0302 	bic.w	r3, r3, #2
 8006326:	60c3      	str	r3, [r0, #12]
	return list->head;
 8006328:	4b1a      	ldr	r3, [pc, #104]	; (8006394 <finalize_cancel_locked+0x78>)
 800632a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800632c:	b1fb      	cbz	r3, 800636e <finalize_cancel_locked+0x52>
 800632e:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 8006330:	b103      	cbz	r3, 8006334 <finalize_cancel_locked+0x18>
	return node->next;
 8006332:	681c      	ldr	r4, [r3, #0]
 8006334:	2600      	movs	r6, #0
 8006336:	e01f      	b.n	8006378 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 8006338:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 800633a:	b166      	cbz	r6, 8006356 <finalize_cancel_locked+0x3a>
	return node->next;
 800633c:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 800633e:	6031      	str	r1, [r6, #0]
	return list->tail;
 8006340:	4914      	ldr	r1, [pc, #80]	; (8006394 <finalize_cancel_locked+0x78>)
 8006342:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 8006344:	428b      	cmp	r3, r1
 8006346:	d00f      	beq.n	8006368 <finalize_cancel_locked+0x4c>
	parent->next = child;
 8006348:	2100      	movs	r1, #0
 800634a:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 800634c:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 8006350:	f7ff feea 	bl	8006128 <z_impl_k_sem_give>
}
 8006354:	e015      	b.n	8006382 <finalize_cancel_locked+0x66>
	return node->next;
 8006356:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 8006358:	490e      	ldr	r1, [pc, #56]	; (8006394 <finalize_cancel_locked+0x78>)
 800635a:	6008      	str	r0, [r1, #0]
	return list->tail;
 800635c:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800635e:	428b      	cmp	r3, r1
 8006360:	d1f2      	bne.n	8006348 <finalize_cancel_locked+0x2c>
	list->tail = node;
 8006362:	490c      	ldr	r1, [pc, #48]	; (8006394 <finalize_cancel_locked+0x78>)
 8006364:	6048      	str	r0, [r1, #4]
}
 8006366:	e7ef      	b.n	8006348 <finalize_cancel_locked+0x2c>
	list->tail = node;
 8006368:	490a      	ldr	r1, [pc, #40]	; (8006394 <finalize_cancel_locked+0x78>)
 800636a:	604e      	str	r6, [r1, #4]
}
 800636c:	e7ec      	b.n	8006348 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800636e:	461c      	mov	r4, r3
 8006370:	e7e0      	b.n	8006334 <finalize_cancel_locked+0x18>
 8006372:	4622      	mov	r2, r4
 8006374:	4623      	mov	r3, r4
 8006376:	4614      	mov	r4, r2
 8006378:	b153      	cbz	r3, 8006390 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	42aa      	cmp	r2, r5
 800637e:	d0db      	beq.n	8006338 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 8006380:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8006382:	2c00      	cmp	r4, #0
 8006384:	d0f5      	beq.n	8006372 <finalize_cancel_locked+0x56>
 8006386:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8006388:	2c00      	cmp	r4, #0
 800638a:	d0f3      	beq.n	8006374 <finalize_cancel_locked+0x58>
	return node->next;
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	e7f1      	b.n	8006374 <finalize_cancel_locked+0x58>
}
 8006390:	bd70      	pop	{r4, r5, r6, pc}
 8006392:	bf00      	nop
 8006394:	20000e54 	.word	0x20000e54

08006398 <work_queue_main>:
{
 8006398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800639a:	b085      	sub	sp, #20
 800639c:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 800639e:	e016      	b.n	80063ce <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 80063a0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	*flagp &= ~BIT(bit);
 80063a4:	f023 0204 	bic.w	r2, r3, #4
 80063a8:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
		} else if (flag_test_and_clear(&queue->flags,
 80063ac:	f013 0f04 	tst.w	r3, #4
 80063b0:	d159      	bne.n	8006466 <work_queue_main+0xce>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 80063b2:	2300      	movs	r3, #0
 80063b4:	9302      	str	r3, [sp, #8]
 80063b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063be:	e9cd 2300 	strd	r2, r3, [sp]
 80063c2:	f105 02d0 	add.w	r2, r5, #208	; 0xd0
 80063c6:	4631      	mov	r1, r6
 80063c8:	482e      	ldr	r0, [pc, #184]	; (8006484 <work_queue_main+0xec>)
 80063ca:	f000 fc4b 	bl	8006c64 <z_sched_wait>
 80063ce:	f04f 0310 	mov.w	r3, #16
 80063d2:	f3ef 8611 	mrs	r6, BASEPRI
 80063d6:	f383 8812 	msr	BASEPRI_MAX, r3
 80063da:	f3bf 8f6f 	isb	sy
	return list->head;
 80063de:	f8d5 40c8 	ldr.w	r4, [r5, #200]	; 0xc8
Z_GENLIST_GET(slist, snode)
 80063e2:	2c00      	cmp	r4, #0
 80063e4:	d0dc      	beq.n	80063a0 <work_queue_main+0x8>
	return node->next;
 80063e6:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 80063e8:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return list->tail;
 80063ec:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80063f0:	4294      	cmp	r4, r2
 80063f2:	d035      	beq.n	8006460 <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 80063f4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80063f8:	f043 0302 	orr.w	r3, r3, #2
 80063fc:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8006400:	68e3      	ldr	r3, [r4, #12]
 8006402:	f043 0301 	orr.w	r3, r3, #1
 8006406:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 8006408:	f023 0304 	bic.w	r3, r3, #4
 800640c:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 800640e:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 8006410:	2c00      	cmp	r4, #0
 8006412:	d0ce      	beq.n	80063b2 <work_queue_main+0x1a>
	__asm__ volatile(
 8006414:	f386 8811 	msr	BASEPRI, r6
 8006418:	f3bf 8f6f 	isb	sy
		handler(work);
 800641c:	4620      	mov	r0, r4
 800641e:	4798      	blx	r3
	__asm__ volatile(
 8006420:	f04f 0310 	mov.w	r3, #16
 8006424:	f3ef 8611 	mrs	r6, BASEPRI
 8006428:	f383 8812 	msr	BASEPRI_MAX, r3
 800642c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 8006430:	68e3      	ldr	r3, [r4, #12]
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8006438:	f013 0f02 	tst.w	r3, #2
 800643c:	d11e      	bne.n	800647c <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 800643e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8006442:	f023 0302 	bic.w	r3, r3, #2
 8006446:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
	return (*flagp & BIT(bit)) != 0U;
 800644a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 800644e:	f386 8811 	msr	BASEPRI, r6
 8006452:	f3bf 8f6f 	isb	sy
		if (yield) {
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1b9      	bne.n	80063ce <work_queue_main+0x36>
	z_impl_k_yield();
 800645a:	f000 fb1d 	bl	8006a98 <z_impl_k_yield>
}
 800645e:	e7b6      	b.n	80063ce <work_queue_main+0x36>
	list->tail = node;
 8006460:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
}
 8006464:	e7c6      	b.n	80063f4 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 8006466:	f105 07d8 	add.w	r7, r5, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 800646a:	2200      	movs	r2, #0
 800646c:	2101      	movs	r1, #1
 800646e:	4638      	mov	r0, r7
 8006470:	f004 fd0c 	bl	800ae8c <z_sched_wake>
 8006474:	2800      	cmp	r0, #0
 8006476:	d1f8      	bne.n	800646a <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	e7c9      	b.n	8006410 <work_queue_main+0x78>
			finalize_cancel_locked(work);
 800647c:	4620      	mov	r0, r4
 800647e:	f7ff ff4d 	bl	800631c <finalize_cancel_locked>
 8006482:	e7dc      	b.n	800643e <work_queue_main+0xa6>
 8006484:	20000e50 	.word	0x20000e50

08006488 <k_work_submit>:
{
 8006488:	b508      	push	{r3, lr}
 800648a:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 800648c:	4801      	ldr	r0, [pc, #4]	; (8006494 <k_work_submit+0xc>)
 800648e:	f004 fb2f 	bl	800aaf0 <k_work_submit_to_queue>
}
 8006492:	bd08      	pop	{r3, pc}
 8006494:	200006d0 	.word	0x200006d0

08006498 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 8006498:	b508      	push	{r3, lr}
 800649a:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
 800649c:	4801      	ldr	r0, [pc, #4]	; (80064a4 <k_work_reschedule+0xc>)
 800649e:	f004 fb53 	bl	800ab48 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
 80064a2:	bd08      	pop	{r3, pc}
 80064a4:	200006d0 	.word	0x200006d0

080064a8 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80064a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ac:	bf08      	it	eq
 80064ae:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80064b2:	d100      	bne.n	80064b6 <add_thread_timeout+0xe>
 80064b4:	4770      	bx	lr
{
 80064b6:	b508      	push	{r3, lr}
 80064b8:	4902      	ldr	r1, [pc, #8]	; (80064c4 <add_thread_timeout+0x1c>)
 80064ba:	3018      	adds	r0, #24
 80064bc:	f000 fc46 	bl	8006d4c <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 80064c0:	bd08      	pop	{r3, pc}
 80064c2:	bf00      	nop
 80064c4:	0800acd9 	.word	0x0800acd9

080064c8 <z_reset_time_slice>:
{
 80064c8:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 80064ca:	4b08      	ldr	r3, [pc, #32]	; (80064ec <z_reset_time_slice+0x24>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	b903      	cbnz	r3, 80064d2 <z_reset_time_slice+0xa>
}
 80064d0:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 80064d2:	f7ff f9e5 	bl	80058a0 <sys_clock_elapsed>
 80064d6:	4603      	mov	r3, r0
 80064d8:	4a04      	ldr	r2, [pc, #16]	; (80064ec <z_reset_time_slice+0x24>)
 80064da:	6810      	ldr	r0, [r2, #0]
 80064dc:	4403      	add	r3, r0
 80064de:	4a04      	ldr	r2, [pc, #16]	; (80064f0 <z_reset_time_slice+0x28>)
 80064e0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 80064e2:	2100      	movs	r1, #0
 80064e4:	f004 fd3e 	bl	800af64 <z_set_timeout_expiry>
}
 80064e8:	e7f2      	b.n	80064d0 <z_reset_time_slice+0x8>
 80064ea:	bf00      	nop
 80064ec:	20000e68 	.word	0x20000e68
 80064f0:	20000e20 	.word	0x20000e20

080064f4 <k_sched_time_slice_set>:
{
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	4604      	mov	r4, r0
 80064f8:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 80064fa:	2300      	movs	r3, #0
	__asm__ volatile(
 80064fc:	f04f 0210 	mov.w	r2, #16
 8006500:	f3ef 8611 	mrs	r6, BASEPRI
 8006504:	f382 8812 	msr	BASEPRI_MAX, r2
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	e00c      	b.n	8006528 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 800650e:	2b02      	cmp	r3, #2
 8006510:	bfb8      	it	lt
 8006512:	2302      	movlt	r3, #2
 8006514:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 8006516:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <k_sched_time_slice_set+0x50>)
 8006518:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 800651a:	f7ff ffd5 	bl	80064c8 <z_reset_time_slice>
	__asm__ volatile(
 800651e:	f386 8811 	msr	BASEPRI, r6
 8006522:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8006526:	2301      	movs	r3, #1
 8006528:	b953      	cbnz	r3, 8006540 <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 800652a:	4b07      	ldr	r3, [pc, #28]	; (8006548 <k_sched_time_slice_set+0x54>)
 800652c:	2200      	movs	r2, #0
 800652e:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 8006530:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8006534:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 8006536:	4a05      	ldr	r2, [pc, #20]	; (800654c <k_sched_time_slice_set+0x58>)
 8006538:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800653a:	2c00      	cmp	r4, #0
 800653c:	dce7      	bgt.n	800650e <k_sched_time_slice_set+0x1a>
 800653e:	e7ea      	b.n	8006516 <k_sched_time_slice_set+0x22>
}
 8006540:	bd70      	pop	{r4, r5, r6, pc}
 8006542:	bf00      	nop
 8006544:	20000e64 	.word	0x20000e64
 8006548:	20000e20 	.word	0x20000e20
 800654c:	20000e68 	.word	0x20000e68

08006550 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 8006550:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 8006552:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8006554:	b921      	cbnz	r1, 8006560 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006556:	f3ef 8305 	mrs	r3, IPSR
 800655a:	b913      	cbnz	r3, 8006562 <z_reschedule+0x12>
 800655c:	2101      	movs	r1, #1
 800655e:	e000      	b.n	8006562 <z_reschedule+0x12>
 8006560:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 8006562:	f011 0f01 	tst.w	r1, #1
 8006566:	d007      	beq.n	8006578 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <z_reschedule+0x34>)
 800656a:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 800656c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 800656e:	429a      	cmp	r2, r3
 8006570:	d002      	beq.n	8006578 <z_reschedule+0x28>
	ret = arch_swap(key);
 8006572:	f7fb f94b 	bl	800180c <arch_swap>
		z_swap(lock, key);
 8006576:	e003      	b.n	8006580 <z_reschedule+0x30>
 8006578:	f380 8811 	msr	BASEPRI, r0
 800657c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 8006580:	bd08      	pop	{r3, pc}
 8006582:	bf00      	nop
 8006584:	20000e20 	.word	0x20000e20

08006588 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 8006588:	2300      	movs	r3, #0
	__asm__ volatile(
 800658a:	f04f 0210 	mov.w	r2, #16
 800658e:	f3ef 8111 	mrs	r1, BASEPRI
 8006592:	f382 8812 	msr	BASEPRI_MAX, r2
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	e009      	b.n	80065b0 <k_sched_lock+0x28>
	--_current->base.sched_locked;
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <k_sched_lock+0x30>)
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	7bd3      	ldrb	r3, [r2, #15]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80065a6:	f381 8811 	msr	BASEPRI, r1
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	2301      	movs	r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f3      	beq.n	800659c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20000e20 	.word	0x20000e20

080065bc <update_cache>:
{
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
 80065c0:	480f      	ldr	r0, [pc, #60]	; (8006600 <update_cache+0x44>)
 80065c2:	f004 fb66 	bl	800ac92 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80065c6:	4605      	mov	r5, r0
 80065c8:	b170      	cbz	r0, 80065e8 <update_cache+0x2c>
	if (preempt_ok != 0) {
 80065ca:	b984      	cbnz	r4, 80065ee <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 80065cc:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <update_cache+0x48>)
 80065ce:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 80065d0:	7b5a      	ldrb	r2, [r3, #13]
 80065d2:	f012 0f1f 	tst.w	r2, #31
 80065d6:	d10a      	bne.n	80065ee <update_cache+0x32>
	return node->next != NULL;
 80065d8:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80065da:	b942      	cbnz	r2, 80065ee <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 80065dc:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 80065de:	2a7f      	cmp	r2, #127	; 0x7f
 80065e0:	d905      	bls.n	80065ee <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 80065e2:	4a08      	ldr	r2, [pc, #32]	; (8006604 <update_cache+0x48>)
 80065e4:	6193      	str	r3, [r2, #24]
 80065e6:	e00a      	b.n	80065fe <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80065e8:	4b06      	ldr	r3, [pc, #24]	; (8006604 <update_cache+0x48>)
 80065ea:	68dd      	ldr	r5, [r3, #12]
 80065ec:	e7ed      	b.n	80065ca <update_cache+0xe>
		if (thread != _current) {
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <update_cache+0x48>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	42ab      	cmp	r3, r5
 80065f4:	d001      	beq.n	80065fa <update_cache+0x3e>
			z_reset_time_slice();
 80065f6:	f7ff ff67 	bl	80064c8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 80065fa:	4b02      	ldr	r3, [pc, #8]	; (8006604 <update_cache+0x48>)
 80065fc:	619d      	str	r5, [r3, #24]
}
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	20000e3c 	.word	0x20000e3c
 8006604:	20000e20 	.word	0x20000e20

08006608 <move_thread_to_end_of_prio_q>:
{
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 800660c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800660e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8006612:	2b00      	cmp	r3, #0
 8006614:	db28      	blt.n	8006668 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 8006616:	7b6b      	ldrb	r3, [r5, #13]
 8006618:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800661c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800661e:	4b1a      	ldr	r3, [pc, #104]	; (8006688 <move_thread_to_end_of_prio_q+0x80>)
 8006620:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006624:	429c      	cmp	r4, r3
 8006626:	d02d      	beq.n	8006684 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006628:	b16c      	cbz	r4, 8006646 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800662a:	4621      	mov	r1, r4
 800662c:	4628      	mov	r0, r5
 800662e:	f004 fac5 	bl	800abbc <z_sched_prio_cmp>
 8006632:	2800      	cmp	r0, #0
 8006634:	dc20      	bgt.n	8006678 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8006636:	b134      	cbz	r4, 8006646 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 8006638:	4b13      	ldr	r3, [pc, #76]	; (8006688 <move_thread_to_end_of_prio_q+0x80>)
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	429c      	cmp	r4, r3
 800663e:	d002      	beq.n	8006646 <move_thread_to_end_of_prio_q+0x3e>
 8006640:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006642:	2c00      	cmp	r4, #0
 8006644:	d1f0      	bne.n	8006628 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 8006646:	4b10      	ldr	r3, [pc, #64]	; (8006688 <move_thread_to_end_of_prio_q+0x80>)
 8006648:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 800664a:	f103 011c 	add.w	r1, r3, #28
 800664e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8006650:	606a      	str	r2, [r5, #4]

	tail->next = node;
 8006652:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8006654:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 8006656:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <move_thread_to_end_of_prio_q+0x80>)
 8006658:	6898      	ldr	r0, [r3, #8]
 800665a:	42a8      	cmp	r0, r5
 800665c:	bf14      	ite	ne
 800665e:	2000      	movne	r0, #0
 8006660:	2001      	moveq	r0, #1
 8006662:	f7ff ffab 	bl	80065bc <update_cache>
}
 8006666:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006668:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800666c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800666e:	4601      	mov	r1, r0
 8006670:	4806      	ldr	r0, [pc, #24]	; (800668c <move_thread_to_end_of_prio_q+0x84>)
 8006672:	f004 fae2 	bl	800ac3a <z_priq_dumb_remove>
}
 8006676:	e7ce      	b.n	8006616 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8006678:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 800667a:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800667c:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800667e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8006680:	6065      	str	r5, [r4, #4]
}
 8006682:	e7e8      	b.n	8006656 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006684:	2400      	movs	r4, #0
 8006686:	e7cf      	b.n	8006628 <move_thread_to_end_of_prio_q+0x20>
 8006688:	20000e20 	.word	0x20000e20
 800668c:	20000e3c 	.word	0x20000e3c

08006690 <z_time_slice>:
{
 8006690:	b510      	push	{r4, lr}
	__asm__ volatile(
 8006692:	f04f 0310 	mov.w	r3, #16
 8006696:	f3ef 8411 	mrs	r4, BASEPRI
 800669a:	f383 8812 	msr	BASEPRI_MAX, r3
 800669e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80066a2:	4b21      	ldr	r3, [pc, #132]	; (8006728 <z_time_slice+0x98>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	4a21      	ldr	r2, [pc, #132]	; (800672c <z_time_slice+0x9c>)
 80066a8:	6812      	ldr	r2, [r2, #0]
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d017      	beq.n	80066de <z_time_slice+0x4e>
	pending_current = NULL;
 80066ae:	4a1f      	ldr	r2, [pc, #124]	; (800672c <z_time_slice+0x9c>)
 80066b0:	2100      	movs	r1, #0
 80066b2:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 80066b4:	4a1e      	ldr	r2, [pc, #120]	; (8006730 <z_time_slice+0xa0>)
 80066b6:	6812      	ldr	r2, [r2, #0]
 80066b8:	b372      	cbz	r2, 8006718 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 80066ba:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 80066bc:	2a7f      	cmp	r2, #127	; 0x7f
 80066be:	d815      	bhi.n	80066ec <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 80066c0:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 80066c2:	f012 0f1f 	tst.w	r2, #31
 80066c6:	d11b      	bne.n	8006700 <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80066c8:	f993 100e 	ldrsb.w	r1, [r3, #14]
 80066cc:	4a19      	ldr	r2, [pc, #100]	; (8006734 <z_time_slice+0xa4>)
 80066ce:	6812      	ldr	r2, [r2, #0]
 80066d0:	4291      	cmp	r1, r2
 80066d2:	db17      	blt.n	8006704 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 80066d4:	4a18      	ldr	r2, [pc, #96]	; (8006738 <z_time_slice+0xa8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d016      	beq.n	8006708 <z_time_slice+0x78>
 80066da:	2201      	movs	r2, #1
 80066dc:	e007      	b.n	80066ee <z_time_slice+0x5e>
		z_reset_time_slice();
 80066de:	f7ff fef3 	bl	80064c8 <z_reset_time_slice>
	__asm__ volatile(
 80066e2:	f384 8811 	msr	BASEPRI, r4
 80066e6:	f3bf 8f6f 	isb	sy
		return;
 80066ea:	e01c      	b.n	8006726 <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 80066ec:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 80066ee:	b19a      	cbz	r2, 8006718 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 80066f0:	4a0d      	ldr	r2, [pc, #52]	; (8006728 <z_time_slice+0x98>)
 80066f2:	6912      	ldr	r2, [r2, #16]
 80066f4:	4282      	cmp	r2, r0
 80066f6:	dd09      	ble.n	800670c <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 80066f8:	1a10      	subs	r0, r2, r0
 80066fa:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <z_time_slice+0x98>)
 80066fc:	6118      	str	r0, [r3, #16]
 80066fe:	e00e      	b.n	800671e <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 8006700:	2200      	movs	r2, #0
 8006702:	e7f4      	b.n	80066ee <z_time_slice+0x5e>
 8006704:	2200      	movs	r2, #0
 8006706:	e7f2      	b.n	80066ee <z_time_slice+0x5e>
 8006708:	2200      	movs	r2, #0
 800670a:	e7f0      	b.n	80066ee <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff ff7b 	bl	8006608 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 8006712:	f7ff fed9 	bl	80064c8 <z_reset_time_slice>
 8006716:	e002      	b.n	800671e <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 8006718:	4b03      	ldr	r3, [pc, #12]	; (8006728 <z_time_slice+0x98>)
 800671a:	2200      	movs	r2, #0
 800671c:	611a      	str	r2, [r3, #16]
 800671e:	f384 8811 	msr	BASEPRI, r4
 8006722:	f3bf 8f6f 	isb	sy
}
 8006726:	bd10      	pop	{r4, pc}
 8006728:	20000e20 	.word	0x20000e20
 800672c:	20000e5c 	.word	0x20000e5c
 8006730:	20000e68 	.word	0x20000e68
 8006734:	20000e64 	.word	0x20000e64
 8006738:	20000538 	.word	0x20000538

0800673c <ready_thread>:
{
 800673c:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 800673e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8006740:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8006744:	2a00      	cmp	r2, #0
 8006746:	db2d      	blt.n	80067a4 <ready_thread+0x68>
 8006748:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800674a:	f013 0f1f 	tst.w	r3, #31
 800674e:	d105      	bne.n	800675c <ready_thread+0x20>
	return node->next != NULL;
 8006750:	6982      	ldr	r2, [r0, #24]
 8006752:	b10a      	cbz	r2, 8006758 <ready_thread+0x1c>
 8006754:	2200      	movs	r2, #0
 8006756:	e002      	b.n	800675e <ready_thread+0x22>
 8006758:	2201      	movs	r2, #1
 800675a:	e000      	b.n	800675e <ready_thread+0x22>
 800675c:	2200      	movs	r2, #0
 800675e:	b30a      	cbz	r2, 80067a4 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 8006760:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006764:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8006766:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <ready_thread+0x7c>)
 8006768:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800676c:	429d      	cmp	r5, r3
 800676e:	d020      	beq.n	80067b2 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006770:	b16d      	cbz	r5, 800678e <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8006772:	4629      	mov	r1, r5
 8006774:	4620      	mov	r0, r4
 8006776:	f004 fa21 	bl	800abbc <z_sched_prio_cmp>
 800677a:	2800      	cmp	r0, #0
 800677c:	dc13      	bgt.n	80067a6 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800677e:	b135      	cbz	r5, 800678e <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 8006780:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <ready_thread+0x7c>)
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	429d      	cmp	r5, r3
 8006786:	d002      	beq.n	800678e <ready_thread+0x52>
 8006788:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800678a:	2d00      	cmp	r5, #0
 800678c:	d1f0      	bne.n	8006770 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 800678e:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <ready_thread+0x7c>)
 8006790:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8006792:	f103 011c 	add.w	r1, r3, #28
 8006796:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8006798:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800679a:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800679c:	621c      	str	r4, [r3, #32]
		update_cache(0);
 800679e:	2000      	movs	r0, #0
 80067a0:	f7ff ff0c 	bl	80065bc <update_cache>
}
 80067a4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 80067a6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 80067a8:	6063      	str	r3, [r4, #4]
	node->next = successor;
 80067aa:	6025      	str	r5, [r4, #0]
	prev->next = node;
 80067ac:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80067ae:	606c      	str	r4, [r5, #4]
}
 80067b0:	e7f5      	b.n	800679e <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80067b2:	2500      	movs	r5, #0
 80067b4:	e7dc      	b.n	8006770 <ready_thread+0x34>
 80067b6:	bf00      	nop
 80067b8:	20000e20 	.word	0x20000e20

080067bc <z_sched_start>:
{
 80067bc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80067be:	f04f 0310 	mov.w	r3, #16
 80067c2:	f3ef 8411 	mrs	r4, BASEPRI
 80067c6:	f383 8812 	msr	BASEPRI_MAX, r3
 80067ca:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80067ce:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 80067d0:	f013 0f04 	tst.w	r3, #4
 80067d4:	d104      	bne.n	80067e0 <z_sched_start+0x24>
	__asm__ volatile(
 80067d6:	f384 8811 	msr	BASEPRI, r4
 80067da:	f3bf 8f6f 	isb	sy
}
 80067de:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80067e0:	f023 0304 	bic.w	r3, r3, #4
 80067e4:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 80067e6:	f7ff ffa9 	bl	800673c <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80067ea:	4621      	mov	r1, r4
 80067ec:	4801      	ldr	r0, [pc, #4]	; (80067f4 <z_sched_start+0x38>)
 80067ee:	f7ff feaf 	bl	8006550 <z_reschedule>
 80067f2:	e7f4      	b.n	80067de <z_sched_start+0x22>
 80067f4:	20000e60 	.word	0x20000e60

080067f8 <unready_thread>:
{
 80067f8:	b510      	push	{r4, lr}
 80067fa:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 80067fc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 80067fe:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8006802:	2b00      	cmp	r3, #0
 8006804:	db08      	blt.n	8006818 <unready_thread+0x20>
	update_cache(thread == _current);
 8006806:	4b08      	ldr	r3, [pc, #32]	; (8006828 <unready_thread+0x30>)
 8006808:	6898      	ldr	r0, [r3, #8]
 800680a:	42a0      	cmp	r0, r4
 800680c:	bf14      	ite	ne
 800680e:	2000      	movne	r0, #0
 8006810:	2001      	moveq	r0, #1
 8006812:	f7ff fed3 	bl	80065bc <update_cache>
}
 8006816:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006818:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800681c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800681e:	4601      	mov	r1, r0
 8006820:	4802      	ldr	r0, [pc, #8]	; (800682c <unready_thread+0x34>)
 8006822:	f004 fa0a 	bl	800ac3a <z_priq_dumb_remove>
}
 8006826:	e7ee      	b.n	8006806 <unready_thread+0xe>
 8006828:	20000e20 	.word	0x20000e20
 800682c:	20000e3c 	.word	0x20000e3c

08006830 <z_pend_curr>:
{
 8006830:	b510      	push	{r4, lr}
 8006832:	460c      	mov	r4, r1
 8006834:	4611      	mov	r1, r2
	pending_current = _current;
 8006836:	4b06      	ldr	r3, [pc, #24]	; (8006850 <z_pend_curr+0x20>)
 8006838:	6898      	ldr	r0, [r3, #8]
 800683a:	4b06      	ldr	r3, [pc, #24]	; (8006854 <z_pend_curr+0x24>)
 800683c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 800683e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006842:	f004 faab 	bl	800ad9c <pend>
 8006846:	4620      	mov	r0, r4
 8006848:	f7fa ffe0 	bl	800180c <arch_swap>
}
 800684c:	bd10      	pop	{r4, pc}
 800684e:	bf00      	nop
 8006850:	20000e20 	.word	0x20000e20
 8006854:	20000e5c 	.word	0x20000e5c

08006858 <z_set_prio>:
{
 8006858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800685c:	4604      	mov	r4, r0
 800685e:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 8006860:	2300      	movs	r3, #0
	__asm__ volatile(
 8006862:	f04f 0210 	mov.w	r2, #16
 8006866:	f3ef 8811 	mrs	r8, BASEPRI
 800686a:	f382 8812 	msr	BASEPRI_MAX, r2
 800686e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 8006872:	461f      	mov	r7, r3
 8006874:	e008      	b.n	8006888 <z_set_prio+0x30>
		if (need_sched) {
 8006876:	f012 0701 	ands.w	r7, r2, #1
 800687a:	d111      	bne.n	80068a0 <z_set_prio+0x48>
			thread->base.prio = prio;
 800687c:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 800687e:	f388 8811 	msr	BASEPRI, r8
 8006882:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8006886:	2301      	movs	r3, #1
 8006888:	461a      	mov	r2, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d13d      	bne.n	800690a <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 800688e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8006890:	f013 0f1f 	tst.w	r3, #31
 8006894:	d1ef      	bne.n	8006876 <z_set_prio+0x1e>
	return node->next != NULL;
 8006896:	69a1      	ldr	r1, [r4, #24]
 8006898:	2900      	cmp	r1, #0
 800689a:	d1ec      	bne.n	8006876 <z_set_prio+0x1e>
 800689c:	2201      	movs	r2, #1
 800689e:	e7ea      	b.n	8006876 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80068a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a4:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 80068a6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8006914 <z_set_prio+0xbc>
 80068aa:	4621      	mov	r1, r4
 80068ac:	4648      	mov	r0, r9
 80068ae:	f004 f9c4 	bl	800ac3a <z_priq_dumb_remove>
				thread->base.prio = prio;
 80068b2:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 80068b4:	7b63      	ldrb	r3, [r4, #13]
 80068b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068ba:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 80068bc:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80068c0:	454d      	cmp	r5, r9
 80068c2:	d020      	beq.n	8006906 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80068c4:	b16d      	cbz	r5, 80068e2 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80068c6:	4629      	mov	r1, r5
 80068c8:	4620      	mov	r0, r4
 80068ca:	f004 f977 	bl	800abbc <z_sched_prio_cmp>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	dc13      	bgt.n	80068fa <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80068d2:	b135      	cbz	r5, 80068e2 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 80068d4:	4b0e      	ldr	r3, [pc, #56]	; (8006910 <z_set_prio+0xb8>)
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	429d      	cmp	r5, r3
 80068da:	d002      	beq.n	80068e2 <z_set_prio+0x8a>
 80068dc:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80068de:	2d00      	cmp	r5, #0
 80068e0:	d1f0      	bne.n	80068c4 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 80068e2:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <z_set_prio+0xb8>)
 80068e4:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 80068e6:	f103 011c 	add.w	r1, r3, #28
 80068ea:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 80068ec:	6062      	str	r2, [r4, #4]
	tail->next = node;
 80068ee:	6014      	str	r4, [r2, #0]
	list->tail = node;
 80068f0:	621c      	str	r4, [r3, #32]
			update_cache(1);
 80068f2:	2001      	movs	r0, #1
 80068f4:	f7ff fe62 	bl	80065bc <update_cache>
 80068f8:	e7c1      	b.n	800687e <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 80068fa:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 80068fc:	6063      	str	r3, [r4, #4]
	node->next = successor;
 80068fe:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8006900:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8006902:	606c      	str	r4, [r5, #4]
}
 8006904:	e7f5      	b.n	80068f2 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006906:	2500      	movs	r5, #0
 8006908:	e7dc      	b.n	80068c4 <z_set_prio+0x6c>
}
 800690a:	4638      	mov	r0, r7
 800690c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006910:	20000e20 	.word	0x20000e20
 8006914:	20000e3c 	.word	0x20000e3c

08006918 <z_impl_k_thread_suspend>:
{
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800691c:	3018      	adds	r0, #24
 800691e:	f004 fb03 	bl	800af28 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 8006922:	2300      	movs	r3, #0
	__asm__ volatile(
 8006924:	f04f 0210 	mov.w	r2, #16
 8006928:	f3ef 8511 	mrs	r5, BASEPRI
 800692c:	f382 8812 	msr	BASEPRI_MAX, r2
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	e010      	b.n	8006958 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8006936:	7b63      	ldrb	r3, [r4, #13]
 8006938:	f043 0310 	orr.w	r3, r3, #16
 800693c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 800693e:	4b15      	ldr	r3, [pc, #84]	; (8006994 <z_impl_k_thread_suspend+0x7c>)
 8006940:	6898      	ldr	r0, [r3, #8]
 8006942:	42a0      	cmp	r0, r4
 8006944:	bf14      	ite	ne
 8006946:	2000      	movne	r0, #0
 8006948:	2001      	moveq	r0, #1
 800694a:	f7ff fe37 	bl	80065bc <update_cache>
	__asm__ volatile(
 800694e:	f385 8811 	msr	BASEPRI, r5
 8006952:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8006956:	2301      	movs	r3, #1
 8006958:	b963      	cbnz	r3, 8006974 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 800695a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 800695c:	f994 300d 	ldrsb.w	r3, [r4, #13]
 8006960:	2b00      	cmp	r3, #0
 8006962:	dae8      	bge.n	8006936 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006968:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800696a:	4621      	mov	r1, r4
 800696c:	480a      	ldr	r0, [pc, #40]	; (8006998 <z_impl_k_thread_suspend+0x80>)
 800696e:	f004 f964 	bl	800ac3a <z_priq_dumb_remove>
}
 8006972:	e7e0      	b.n	8006936 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 8006974:	4b07      	ldr	r3, [pc, #28]	; (8006994 <z_impl_k_thread_suspend+0x7c>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	42a3      	cmp	r3, r4
 800697a:	d000      	beq.n	800697e <z_impl_k_thread_suspend+0x66>
}
 800697c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800697e:	f04f 0310 	mov.w	r3, #16
 8006982:	f3ef 8011 	mrs	r0, BASEPRI
 8006986:	f383 8812 	msr	BASEPRI_MAX, r3
 800698a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800698e:	f004 f93f 	bl	800ac10 <z_reschedule_irqlock>
 8006992:	e7f3      	b.n	800697c <z_impl_k_thread_suspend+0x64>
 8006994:	20000e20 	.word	0x20000e20
 8006998:	20000e3c 	.word	0x20000e3c

0800699c <k_sched_unlock>:

void k_sched_unlock(void)
{
 800699c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 800699e:	2300      	movs	r3, #0
 80069a0:	f04f 0210 	mov.w	r2, #16
 80069a4:	f3ef 8411 	mrs	r4, BASEPRI
 80069a8:	f382 8812 	msr	BASEPRI_MAX, r2
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	e00c      	b.n	80069cc <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 80069b2:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <k_sched_unlock+0x4c>)
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	7bd3      	ldrb	r3, [r2, #15]
 80069b8:	3301      	adds	r3, #1
 80069ba:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80069bc:	2000      	movs	r0, #0
 80069be:	f7ff fdfd 	bl	80065bc <update_cache>
	__asm__ volatile(
 80069c2:	f384 8811 	msr	BASEPRI, r4
 80069c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80069ca:	2301      	movs	r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0f0      	beq.n	80069b2 <k_sched_unlock+0x16>
	__asm__ volatile(
 80069d0:	f04f 0310 	mov.w	r3, #16
 80069d4:	f3ef 8011 	mrs	r0, BASEPRI
 80069d8:	f383 8812 	msr	BASEPRI_MAX, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f004 f916 	bl	800ac10 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 80069e4:	bd10      	pop	{r4, pc}
 80069e6:	bf00      	nop
 80069e8:	20000e20 	.word	0x20000e20

080069ec <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 80069ec:	7b43      	ldrb	r3, [r0, #13]
 80069ee:	f013 0f08 	tst.w	r3, #8
 80069f2:	d142      	bne.n	8006a7a <end_thread+0x8e>
{
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 80069f8:	f043 0308 	orr.w	r3, r3, #8
 80069fc:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80069fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a02:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 8006a04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a08:	d12b      	bne.n	8006a62 <end_thread+0x76>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
 8006a0a:	68ab      	ldr	r3, [r5, #8]
 8006a0c:	b15b      	cbz	r3, 8006a26 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f004 f8d2 	bl	800abb8 <pended_on_thread>
 8006a14:	4629      	mov	r1, r5
 8006a16:	f004 f910 	bl	800ac3a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8006a1a:	7b6b      	ldrb	r3, [r5, #13]
 8006a1c:	f023 0302 	bic.w	r3, r3, #2
 8006a20:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60ab      	str	r3, [r5, #8]
 8006a26:	f105 0018 	add.w	r0, r5, #24
 8006a2a:	f004 fa7d 	bl	800af28 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 8006a2e:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 8006a30:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006a32:	42ac      	cmp	r4, r5
 8006a34:	d01d      	beq.n	8006a72 <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8006a36:	b1e4      	cbz	r4, 8006a72 <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f004 f8bd 	bl	800abb8 <pended_on_thread>
 8006a3e:	4621      	mov	r1, r4
 8006a40:	f004 f8fb 	bl	800ac3a <z_priq_dumb_remove>
 8006a44:	7b63      	ldrb	r3, [r4, #13]
 8006a46:	f023 0302 	bic.w	r3, r3, #2
 8006a4a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8006a4c:	2600      	movs	r6, #0
 8006a4e:	60a6      	str	r6, [r4, #8]
 8006a50:	f104 0018 	add.w	r0, r4, #24
 8006a54:	f004 fa68 	bl	800af28 <z_abort_timeout>
 8006a58:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f7ff fe6e 	bl	800673c <ready_thread>
 8006a60:	e7e6      	b.n	8006a30 <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a66:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8006a68:	4601      	mov	r1, r0
 8006a6a:	4804      	ldr	r0, [pc, #16]	; (8006a7c <end_thread+0x90>)
 8006a6c:	f004 f8e5 	bl	800ac3a <z_priq_dumb_remove>
}
 8006a70:	e7cb      	b.n	8006a0a <end_thread+0x1e>
		update_cache(1);
 8006a72:	2001      	movs	r0, #1
 8006a74:	f7ff fda2 	bl	80065bc <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 8006a78:	bd70      	pop	{r4, r5, r6, pc}
 8006a7a:	4770      	bx	lr
 8006a7c:	20000e3c 	.word	0x20000e3c

08006a80 <z_sched_init>:
{
 8006a80:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
 8006a82:	4804      	ldr	r0, [pc, #16]	; (8006a94 <z_sched_init+0x14>)
 8006a84:	f004 f9fe 	bl	800ae84 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8006a88:	2100      	movs	r1, #0
 8006a8a:	4608      	mov	r0, r1
 8006a8c:	f7ff fd32 	bl	80064f4 <k_sched_time_slice_set>
}
 8006a90:	bd08      	pop	{r3, pc}
 8006a92:	bf00      	nop
 8006a94:	20000e38 	.word	0x20000e38

08006a98 <z_impl_k_yield>:
{
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	f04f 0310 	mov.w	r3, #16
 8006a9e:	f3ef 8611 	mrs	r6, BASEPRI
 8006aa2:	f383 8812 	msr	BASEPRI_MAX, r3
 8006aa6:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
 8006aaa:	4c1c      	ldr	r4, [pc, #112]	; (8006b1c <z_impl_k_yield+0x84>)
 8006aac:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006aae:	7b4b      	ldrb	r3, [r1, #13]
 8006ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ab4:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8006ab6:	f104 071c 	add.w	r7, r4, #28
 8006aba:	4638      	mov	r0, r7
 8006abc:	f004 f8bd 	bl	800ac3a <z_priq_dumb_remove>
	queue_thread(_current);
 8006ac0:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8006ac2:	7b6b      	ldrb	r3, [r5, #13]
 8006ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ac8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 8006aca:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006acc:	42bc      	cmp	r4, r7
 8006ace:	d023      	beq.n	8006b18 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006ad0:	b16c      	cbz	r4, 8006aee <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f004 f871 	bl	800abbc <z_sched_prio_cmp>
 8006ada:	2800      	cmp	r0, #0
 8006adc:	dc16      	bgt.n	8006b0c <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8006ade:	b134      	cbz	r4, 8006aee <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 8006ae0:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <z_impl_k_yield+0x84>)
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	429c      	cmp	r4, r3
 8006ae6:	d002      	beq.n	8006aee <z_impl_k_yield+0x56>
 8006ae8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006aea:	2c00      	cmp	r4, #0
 8006aec:	d1f0      	bne.n	8006ad0 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 8006aee:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <z_impl_k_yield+0x84>)
 8006af0:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8006af2:	f103 011c 	add.w	r1, r3, #28
 8006af6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8006af8:	606a      	str	r2, [r5, #4]
	tail->next = node;
 8006afa:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8006afc:	621d      	str	r5, [r3, #32]
	update_cache(1);
 8006afe:	2001      	movs	r0, #1
 8006b00:	f7ff fd5c 	bl	80065bc <update_cache>
 8006b04:	4630      	mov	r0, r6
 8006b06:	f7fa fe81 	bl	800180c <arch_swap>
}
 8006b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 8006b0c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 8006b0e:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8006b10:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8006b12:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8006b14:	6065      	str	r5, [r4, #4]
}
 8006b16:	e7f2      	b.n	8006afe <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006b18:	2400      	movs	r4, #0
 8006b1a:	e7d9      	b.n	8006ad0 <z_impl_k_yield+0x38>
 8006b1c:	20000e20 	.word	0x20000e20

08006b20 <z_tick_sleep>:
{
 8006b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 8006b24:	ea50 0301 	orrs.w	r3, r0, r1
 8006b28:	d038      	beq.n	8006b9c <z_tick_sleep+0x7c>
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 8006b2e:	f06f 0301 	mvn.w	r3, #1
 8006b32:	1a1b      	subs	r3, r3, r0
 8006b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b38:	eb62 0201 	sbc.w	r2, r2, r1
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	f172 0300 	sbcs.w	r3, r2, #0
 8006b42:	db2f      	blt.n	8006ba4 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8006b44:	f06f 0501 	mvn.w	r5, #1
 8006b48:	1a2d      	subs	r5, r5, r0
 8006b4a:	f04f 0310 	mov.w	r3, #16
 8006b4e:	f3ef 8811 	mrs	r8, BASEPRI
 8006b52:	f383 8812 	msr	BASEPRI_MAX, r3
 8006b56:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8006b5a:	4f14      	ldr	r7, [pc, #80]	; (8006bac <z_tick_sleep+0x8c>)
 8006b5c:	68b8      	ldr	r0, [r7, #8]
 8006b5e:	4b14      	ldr	r3, [pc, #80]	; (8006bb0 <z_tick_sleep+0x90>)
 8006b60:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8006b62:	f7ff fe49 	bl	80067f8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8006b66:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8006b68:	4622      	mov	r2, r4
 8006b6a:	4633      	mov	r3, r6
 8006b6c:	4911      	ldr	r1, [pc, #68]	; (8006bb4 <z_tick_sleep+0x94>)
 8006b6e:	3018      	adds	r0, #24
 8006b70:	f000 f8ec 	bl	8006d4c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8006b74:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8006b76:	7b53      	ldrb	r3, [r2, #13]
 8006b78:	f043 0310 	orr.w	r3, r3, #16
 8006b7c:	7353      	strb	r3, [r2, #13]
 8006b7e:	4640      	mov	r0, r8
 8006b80:	f7fa fe44 	bl	800180c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8006b84:	f004 fa19 	bl	800afba <sys_clock_tick_get_32>
 8006b88:	1a28      	subs	r0, r5, r0
 8006b8a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8006b8e:	2801      	cmp	r0, #1
 8006b90:	f173 0300 	sbcs.w	r3, r3, #0
 8006b94:	da00      	bge.n	8006b98 <z_tick_sleep+0x78>
	return 0;
 8006b96:	2000      	movs	r0, #0
}
 8006b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 8006b9c:	f7ff ff7c 	bl	8006a98 <z_impl_k_yield>
		return 0;
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	e7f9      	b.n	8006b98 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8006ba4:	f004 fa09 	bl	800afba <sys_clock_tick_get_32>
 8006ba8:	1905      	adds	r5, r0, r4
 8006baa:	e7ce      	b.n	8006b4a <z_tick_sleep+0x2a>
 8006bac:	20000e20 	.word	0x20000e20
 8006bb0:	20000e5c 	.word	0x20000e5c
 8006bb4:	0800acd9 	.word	0x0800acd9

08006bb8 <z_impl_k_sleep>:
{
 8006bb8:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8006bba:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8006bbe:	bf08      	it	eq
 8006bc0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8006bc4:	d007      	beq.n	8006bd6 <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 8006bc6:	f7ff ffab 	bl	8006b20 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8006bca:	220a      	movs	r2, #10
 8006bcc:	2300      	movs	r3, #0
 8006bce:	17c1      	asrs	r1, r0, #31
 8006bd0:	f7f9 fb36 	bl	8000240 <__aeabi_uldivmod>
}
 8006bd4:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 8006bd6:	4b03      	ldr	r3, [pc, #12]	; (8006be4 <z_impl_k_sleep+0x2c>)
 8006bd8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8006bda:	f7ff fe9d 	bl	8006918 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 8006bde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006be2:	e7f7      	b.n	8006bd4 <z_impl_k_sleep+0x1c>
 8006be4:	20000e20 	.word	0x20000e20

08006be8 <z_impl_z_current_get>:
}
 8006be8:	4b01      	ldr	r3, [pc, #4]	; (8006bf0 <z_impl_z_current_get+0x8>)
 8006bea:	6898      	ldr	r0, [r3, #8]
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	20000e20 	.word	0x20000e20

08006bf4 <z_impl_k_is_preempt_thread>:
 8006bf4:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 8006bf8:	b933      	cbnz	r3, 8006c08 <z_impl_k_is_preempt_thread+0x14>
 8006bfa:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <z_impl_k_is_preempt_thread+0x1c>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8006bfe:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 8006c00:	2b7f      	cmp	r3, #127	; 0x7f
 8006c02:	d803      	bhi.n	8006c0c <z_impl_k_is_preempt_thread+0x18>
 8006c04:	2001      	movs	r0, #1
 8006c06:	4770      	bx	lr
 8006c08:	2000      	movs	r0, #0
 8006c0a:	4770      	bx	lr
 8006c0c:	2000      	movs	r0, #0
}
 8006c0e:	4770      	bx	lr
 8006c10:	20000e20 	.word	0x20000e20

08006c14 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	f04f 0310 	mov.w	r3, #16
 8006c1a:	f3ef 8511 	mrs	r5, BASEPRI
 8006c1e:	f383 8812 	msr	BASEPRI_MAX, r3
 8006c22:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8006c26:	7b43      	ldrb	r3, [r0, #13]
 8006c28:	f013 0f08 	tst.w	r3, #8
 8006c2c:	d004      	beq.n	8006c38 <z_thread_abort+0x24>
	__asm__ volatile(
 8006c2e:	f385 8811 	msr	BASEPRI, r5
 8006c32:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
 8006c38:	4604      	mov	r4, r0
	end_thread(thread);
 8006c3a:	f7ff fed7 	bl	80069ec <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 8006c3e:	4b08      	ldr	r3, [pc, #32]	; (8006c60 <z_thread_abort+0x4c>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	42a3      	cmp	r3, r4
 8006c44:	d004      	beq.n	8006c50 <z_thread_abort+0x3c>
 8006c46:	f385 8811 	msr	BASEPRI, r5
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	e7f2      	b.n	8006c36 <z_thread_abort+0x22>
 8006c50:	f3ef 8305 	mrs	r3, IPSR
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1f6      	bne.n	8006c46 <z_thread_abort+0x32>
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f7fa fdd7 	bl	800180c <arch_swap>
	return ret;
 8006c5e:	e7f2      	b.n	8006c46 <z_thread_abort+0x32>
 8006c60:	20000e20 	.word	0x20000e20

08006c64 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8006c64:	b510      	push	{r4, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	9c06      	ldr	r4, [sp, #24]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8006c6a:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006c6e:	ed8d 7b00 	vstr	d7, [sp]
 8006c72:	f7ff fddd 	bl	8006830 <z_pend_curr>

	if (data != NULL) {
 8006c76:	b11c      	cbz	r4, 8006c80 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
 8006c78:	4b02      	ldr	r3, [pc, #8]	; (8006c84 <z_sched_wait+0x20>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 8006c80:	b002      	add	sp, #8
 8006c82:	bd10      	pop	{r4, pc}
 8006c84:	20000e20 	.word	0x20000e20

08006c88 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8006c88:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 8006c8a:	4806      	ldr	r0, [pc, #24]	; (8006ca4 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8006c8c:	4a06      	ldr	r2, [pc, #24]	; (8006ca8 <z_data_copy+0x20>)
 8006c8e:	1a12      	subs	r2, r2, r0
 8006c90:	4906      	ldr	r1, [pc, #24]	; (8006cac <z_data_copy+0x24>)
 8006c92:	f004 fa3a 	bl	800b10a <memcpy>
 8006c96:	4a06      	ldr	r2, [pc, #24]	; (8006cb0 <z_data_copy+0x28>)
 8006c98:	4906      	ldr	r1, [pc, #24]	; (8006cb4 <z_data_copy+0x2c>)
 8006c9a:	4807      	ldr	r0, [pc, #28]	; (8006cb8 <z_data_copy+0x30>)
 8006c9c:	f004 fa35 	bl	800b10a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8006ca0:	bd08      	pop	{r3, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20000000 	.word	0x20000000
 8006ca8:	2000046c 	.word	0x2000046c
 8006cac:	0800c5f8 	.word	0x0800c5f8
 8006cb0:	00000000 	.word	0x00000000
 8006cb4:	0800c5f8 	.word	0x0800c5f8
 8006cb8:	20000000 	.word	0x20000000

08006cbc <first>:
	return list->head == list;
 8006cbc:	4b03      	ldr	r3, [pc, #12]	; (8006ccc <first+0x10>)
 8006cbe:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006cc0:	4298      	cmp	r0, r3
 8006cc2:	d000      	beq.n	8006cc6 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 8006cc4:	4770      	bx	lr
 8006cc6:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 8006cc8:	e7fc      	b.n	8006cc4 <first+0x8>
 8006cca:	bf00      	nop
 8006ccc:	20000320 	.word	0x20000320

08006cd0 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8006cd0:	b130      	cbz	r0, 8006ce0 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 8006cd2:	4a04      	ldr	r2, [pc, #16]	; (8006ce4 <next+0x14>)
 8006cd4:	6852      	ldr	r2, [r2, #4]
 8006cd6:	4290      	cmp	r0, r2
 8006cd8:	d001      	beq.n	8006cde <next+0xe>
 8006cda:	6800      	ldr	r0, [r0, #0]
 8006cdc:	4770      	bx	lr
 8006cde:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000320 	.word	0x20000320

08006ce8 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 8006ce8:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8006cea:	4b04      	ldr	r3, [pc, #16]	; (8006cfc <elapsed+0x14>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	b10b      	cbz	r3, 8006cf4 <elapsed+0xc>
 8006cf0:	2000      	movs	r0, #0
}
 8006cf2:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8006cf4:	f7fe fdd4 	bl	80058a0 <sys_clock_elapsed>
 8006cf8:	e7fb      	b.n	8006cf2 <elapsed+0xa>
 8006cfa:	bf00      	nop
 8006cfc:	20000e6c 	.word	0x20000e6c

08006d00 <next_timeout>:

static int32_t next_timeout(void)
{
 8006d00:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 8006d02:	f7ff ffdb 	bl	8006cbc <first>
 8006d06:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 8006d08:	f7ff ffee 	bl	8006ce8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 8006d0c:	b17c      	cbz	r4, 8006d2e <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	6962      	ldr	r2, [r4, #20]
 8006d12:	1a1b      	subs	r3, r3, r0
 8006d14:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 8006d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d1c:	f170 0200 	sbcs.w	r2, r0, #0
 8006d20:	da08      	bge.n	8006d34 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 8006d22:	2800      	cmp	r0, #0
 8006d24:	db01      	blt.n	8006d2a <next_timeout+0x2a>
 8006d26:	4618      	mov	r0, r3
 8006d28:	e006      	b.n	8006d38 <next_timeout+0x38>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e7fb      	b.n	8006d26 <next_timeout+0x26>
		ret = MAX_WAIT;
 8006d2e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8006d32:	e001      	b.n	8006d38 <next_timeout+0x38>
 8006d34:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8006d38:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <next_timeout+0x48>)
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	b113      	cbz	r3, 8006d44 <next_timeout+0x44>
 8006d3e:	4283      	cmp	r3, r0
 8006d40:	da00      	bge.n	8006d44 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
 8006d42:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 8006d44:	bd10      	pop	{r4, pc}
 8006d46:	bf00      	nop
 8006d48:	20000e20 	.word	0x20000e20

08006d4c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d50:	bf08      	it	eq
 8006d52:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8006d56:	d07d      	beq.n	8006e54 <z_add_timeout+0x108>
{
 8006d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	4692      	mov	sl, r2
 8006d60:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8006d62:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 8006d64:	2300      	movs	r3, #0
	__asm__ volatile(
 8006d66:	f04f 0210 	mov.w	r2, #16
 8006d6a:	f3ef 8711 	mrs	r7, BASEPRI
 8006d6e:	f382 8812 	msr	BASEPRI_MAX, r2
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	e021      	b.n	8006dbc <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8006d78:	f11a 0801 	adds.w	r8, sl, #1
 8006d7c:	f145 0900 	adc.w	r9, r5, #0
 8006d80:	f7ff ffb2 	bl	8006ce8 <elapsed>
 8006d84:	eb18 0300 	adds.w	r3, r8, r0
 8006d88:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
 8006d8c:	6123      	str	r3, [r4, #16]
 8006d8e:	6160      	str	r0, [r4, #20]
 8006d90:	e036      	b.n	8006e00 <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 8006d92:	1a51      	subs	r1, r2, r1
 8006d94:	eb66 0303 	sbc.w	r3, r6, r3
 8006d98:	6101      	str	r1, [r0, #16]
 8006d9a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 8006d9c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 8006d9e:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8006da0:	6020      	str	r0, [r4, #0]
	prev->next = node;
 8006da2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8006da4:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d03e      	beq.n	8006e28 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8006daa:	f7ff ff87 	bl	8006cbc <first>
 8006dae:	4284      	cmp	r4, r0
 8006db0:	d041      	beq.n	8006e36 <z_add_timeout+0xea>
	__asm__ volatile(
 8006db2:	f387 8811 	msr	BASEPRI, r7
 8006db6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8006dba:	2301      	movs	r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d147      	bne.n	8006e50 <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8006dc0:	4653      	mov	r3, sl
 8006dc2:	f06f 0101 	mvn.w	r1, #1
 8006dc6:	ebb1 010a 	subs.w	r1, r1, sl
 8006dca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dce:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8006dd2:	2a00      	cmp	r2, #0
 8006dd4:	dbd0      	blt.n	8006d78 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8006dd6:	4a20      	ldr	r2, [pc, #128]	; (8006e58 <z_add_timeout+0x10c>)
 8006dd8:	6811      	ldr	r1, [r2, #0]
 8006dda:	6852      	ldr	r2, [r2, #4]
 8006ddc:	185b      	adds	r3, r3, r1
 8006dde:	eb42 0205 	adc.w	r2, r2, r5
 8006de2:	f06f 0101 	mvn.w	r1, #1
 8006de6:	1acb      	subs	r3, r1, r3
 8006de8:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
 8006dec:	4618      	mov	r0, r3
 8006dee:	4611      	mov	r1, r2
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	f172 0300 	sbcs.w	r3, r2, #0
 8006df6:	da01      	bge.n	8006dfc <z_add_timeout+0xb0>
 8006df8:	2001      	movs	r0, #1
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	6120      	str	r0, [r4, #16]
 8006dfe:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 8006e00:	f7ff ff5c 	bl	8006cbc <first>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d0ce      	beq.n	8006da6 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 8006e08:	6902      	ldr	r2, [r0, #16]
 8006e0a:	6946      	ldr	r6, [r0, #20]
 8006e0c:	6921      	ldr	r1, [r4, #16]
 8006e0e:	6963      	ldr	r3, [r4, #20]
 8006e10:	4291      	cmp	r1, r2
 8006e12:	eb73 0c06 	sbcs.w	ip, r3, r6
 8006e16:	dbbc      	blt.n	8006d92 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 8006e18:	1a89      	subs	r1, r1, r2
 8006e1a:	eb63 0306 	sbc.w	r3, r3, r6
 8006e1e:	6121      	str	r1, [r4, #16]
 8006e20:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 8006e22:	f7ff ff55 	bl	8006cd0 <next>
 8006e26:	e7ed      	b.n	8006e04 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
 8006e28:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <z_add_timeout+0x110>)
 8006e2a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8006e2c:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 8006e2e:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8006e30:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8006e32:	605c      	str	r4, [r3, #4]
}
 8006e34:	e7b9      	b.n	8006daa <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8006e36:	f7ff ff63 	bl	8006d00 <next_timeout>

			if (next_time == 0 ||
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	b118      	cbz	r0, 8006e46 <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
 8006e3e:	4a08      	ldr	r2, [pc, #32]	; (8006e60 <z_add_timeout+0x114>)
 8006e40:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 8006e42:	4282      	cmp	r2, r0
 8006e44:	d0b5      	beq.n	8006db2 <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 8006e46:	2100      	movs	r1, #0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe fca7 	bl	800579c <sys_clock_set_timeout>
 8006e4e:	e7b0      	b.n	8006db2 <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8006e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	200006c8 	.word	0x200006c8
 8006e5c:	20000320 	.word	0x20000320
 8006e60:	20000e20 	.word	0x20000e20

08006e64 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8006e68:	f7ff fc12 	bl	8006690 <z_time_slice>
	__asm__ volatile(
 8006e6c:	f04f 0310 	mov.w	r3, #16
 8006e70:	f3ef 8511 	mrs	r5, BASEPRI
 8006e74:	f383 8812 	msr	BASEPRI_MAX, r3
 8006e78:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8006e7c:	4b28      	ldr	r3, [pc, #160]	; (8006f20 <sys_clock_announce+0xbc>)
 8006e7e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8006e80:	e020      	b.n	8006ec4 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8006e82:	4828      	ldr	r0, [pc, #160]	; (8006f24 <sys_clock_announce+0xc0>)
 8006e84:	6801      	ldr	r1, [r0, #0]
 8006e86:	6846      	ldr	r6, [r0, #4]
 8006e88:	1889      	adds	r1, r1, r2
 8006e8a:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 8006e8e:	6001      	str	r1, [r0, #0]
 8006e90:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 8006e92:	1a9b      	subs	r3, r3, r2
 8006e94:	4a22      	ldr	r2, [pc, #136]	; (8006f20 <sys_clock_announce+0xbc>)
 8006e96:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f004 f82a 	bl	800aefa <remove_timeout>
	__asm__ volatile(
 8006ea6:	f385 8811 	msr	BASEPRI, r5
 8006eaa:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 8006eae:	68a3      	ldr	r3, [r4, #8]
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	4798      	blx	r3
	__asm__ volatile(
 8006eb4:	f04f 0310 	mov.w	r3, #16
 8006eb8:	f3ef 8511 	mrs	r5, BASEPRI
 8006ebc:	f383 8812 	msr	BASEPRI_MAX, r3
 8006ec0:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8006ec4:	f7ff fefa 	bl	8006cbc <first>
 8006ec8:	4604      	mov	r4, r0
 8006eca:	b140      	cbz	r0, 8006ede <sys_clock_announce+0x7a>
 8006ecc:	6902      	ldr	r2, [r0, #16]
 8006ece:	6941      	ldr	r1, [r0, #20]
 8006ed0:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <sys_clock_announce+0xbc>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	17d8      	asrs	r0, r3, #31
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	eb70 0101 	sbcs.w	r1, r0, r1
 8006edc:	dad1      	bge.n	8006e82 <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 8006ede:	b144      	cbz	r4, 8006ef2 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <sys_clock_announce+0xbc>)
 8006ee2:	6819      	ldr	r1, [r3, #0]
 8006ee4:	6923      	ldr	r3, [r4, #16]
 8006ee6:	6962      	ldr	r2, [r4, #20]
 8006ee8:	1a5b      	subs	r3, r3, r1
 8006eea:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 8006eee:	6123      	str	r3, [r4, #16]
 8006ef0:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 8006ef2:	4a0c      	ldr	r2, [pc, #48]	; (8006f24 <sys_clock_announce+0xc0>)
 8006ef4:	4e0a      	ldr	r6, [pc, #40]	; (8006f20 <sys_clock_announce+0xbc>)
 8006ef6:	6830      	ldr	r0, [r6, #0]
 8006ef8:	6813      	ldr	r3, [r2, #0]
 8006efa:	6851      	ldr	r1, [r2, #4]
 8006efc:	181b      	adds	r3, r3, r0
 8006efe:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 8006f06:	2400      	movs	r4, #0
 8006f08:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8006f0a:	f7ff fef9 	bl	8006d00 <next_timeout>
 8006f0e:	4621      	mov	r1, r4
 8006f10:	f7fe fc44 	bl	800579c <sys_clock_set_timeout>
	__asm__ volatile(
 8006f14:	f385 8811 	msr	BASEPRI, r5
 8006f18:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8006f1c:	bd70      	pop	{r4, r5, r6, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000e6c 	.word	0x20000e6c
 8006f24:	200006c8 	.word	0x200006c8

08006f28 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8006f28:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 8006f2a:	2300      	movs	r3, #0
	__asm__ volatile(
 8006f2c:	f04f 0210 	mov.w	r2, #16
 8006f30:	f3ef 8411 	mrs	r4, BASEPRI
 8006f34:	f382 8812 	msr	BASEPRI_MAX, r2
 8006f38:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	4619      	mov	r1, r3
 8006f40:	e00c      	b.n	8006f5c <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 8006f42:	f7fe fcad 	bl	80058a0 <sys_clock_elapsed>
 8006f46:	4a07      	ldr	r2, [pc, #28]	; (8006f64 <sys_clock_tick_get+0x3c>)
 8006f48:	6813      	ldr	r3, [r2, #0]
 8006f4a:	6851      	ldr	r1, [r2, #4]
 8006f4c:	18c0      	adds	r0, r0, r3
 8006f4e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8006f52:	f384 8811 	msr	BASEPRI, r4
 8006f56:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d0f0      	beq.n	8006f42 <sys_clock_tick_get+0x1a>
	}
	return t;
}
 8006f60:	bd10      	pop	{r4, pc}
 8006f62:	bf00      	nop
 8006f64:	200006c8 	.word	0x200006c8

08006f68 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8006f68:	b900      	cbnz	r0, 8006f6c <z_impl_k_busy_wait+0x4>
 8006f6a:	4770      	bx	lr
{
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4604      	mov	r4, r0
 8006f70:	f7fe fcb6 	bl	80058e0 <sys_clock_cycle_get_32>
 8006f74:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8006f76:	4907      	ldr	r1, [pc, #28]	; (8006f94 <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8006f78:	4a07      	ldr	r2, [pc, #28]	; (8006f98 <z_impl_k_busy_wait+0x30>)
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	fba4 0101 	umull	r0, r1, r4, r1
 8006f80:	f7f9 f95e 	bl	8000240 <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 8006f84:	4604      	mov	r4, r0
 8006f86:	f7fe fcab 	bl	80058e0 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8006f8a:	1b40      	subs	r0, r0, r5
 8006f8c:	42a0      	cmp	r0, r4
 8006f8e:	d3fa      	bcc.n	8006f86 <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8006f90:	bd38      	pop	{r3, r4, r5, pc}
 8006f92:	bf00      	nop
 8006f94:	04c4b400 	.word	0x04c4b400
 8006f98:	000f4240 	.word	0x000f4240

08006f9c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	4604      	mov	r4, r0
	__asm__ volatile(
 8006fa0:	f04f 0310 	mov.w	r3, #16
 8006fa4:	f3ef 8611 	mrs	r6, BASEPRI
 8006fa8:	f383 8812 	msr	BASEPRI_MAX, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8006fb2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006fb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006fb6:	ea52 0103 	orrs.w	r1, r2, r3
 8006fba:	d005      	beq.n	8006fc8 <z_timer_expiration_handler+0x2c>
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fc0:	bf08      	it	eq
 8006fc2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8006fc6:	d126      	bne.n	8007016 <z_timer_expiration_handler+0x7a>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 8006fc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006fca:	3301      	adds	r3, #1
 8006fcc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 8006fce:	6a23      	ldr	r3, [r4, #32]
 8006fd0:	b173      	cbz	r3, 8006ff0 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
 8006fd2:	f386 8811 	msr	BASEPRI, r6
 8006fd6:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 8006fda:	6a23      	ldr	r3, [r4, #32]
 8006fdc:	4620      	mov	r0, r4
 8006fde:	4798      	blx	r3
	__asm__ volatile(
 8006fe0:	f04f 0310 	mov.w	r3, #16
 8006fe4:	f3ef 8511 	mrs	r5, BASEPRI
 8006fe8:	f383 8812 	msr	BASEPRI_MAX, r3
 8006fec:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8006ff0:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 8006ff4:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006ff6:	42a3      	cmp	r3, r4
 8006ff8:	d013      	beq.n	8007022 <z_timer_expiration_handler+0x86>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8006ffa:	b194      	cbz	r4, 8007022 <z_timer_expiration_handler+0x86>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f003 fde7 	bl	800abd0 <z_unpend_thread_no_timeout>
 8007002:	2300      	movs	r3, #0
 8007004:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
 8007006:	f385 8811 	msr	BASEPRI, r5
 800700a:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 800700e:	4620      	mov	r0, r4
 8007010:	f003 fe46 	bl	800aca0 <z_ready_thread>
}
 8007014:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8007016:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 800701a:	4904      	ldr	r1, [pc, #16]	; (800702c <z_timer_expiration_handler+0x90>)
 800701c:	f7ff fe96 	bl	8006d4c <z_add_timeout>
 8007020:	e7d2      	b.n	8006fc8 <z_timer_expiration_handler+0x2c>
 8007022:	f385 8811 	msr	BASEPRI, r5
 8007026:	f3bf 8f6f 	isb	sy
		return;
 800702a:	e7f3      	b.n	8007014 <z_timer_expiration_handler+0x78>
 800702c:	08006f9d 	.word	0x08006f9d

08007030 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8007030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007034:	9f06      	ldr	r7, [sp, #24]
 8007036:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800703a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800703e:	bf08      	it	eq
 8007040:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8007044:	d02f      	beq.n	80070a6 <z_impl_k_timer_start+0x76>
 8007046:	4605      	mov	r5, r0
 8007048:	4614      	mov	r4, r2
 800704a:	461e      	mov	r6, r3
 800704c:	4611      	mov	r1, r2
 800704e:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8007050:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007054:	bf08      	it	eq
 8007056:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 800705a:	d00d      	beq.n	8007078 <z_impl_k_timer_start+0x48>
 800705c:	ea57 0c08 	orrs.w	ip, r7, r8
 8007060:	d00a      	beq.n	8007078 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
 8007062:	f06f 0c01 	mvn.w	ip, #1
 8007066:	ebbc 0c07 	subs.w	ip, ip, r7
 800706a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800706e:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8007072:	f1bc 0f00 	cmp.w	ip, #0
 8007076:	db18      	blt.n	80070aa <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8007078:	f06f 0301 	mvn.w	r3, #1
 800707c:	1a5b      	subs	r3, r3, r1
 800707e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007082:	eb63 0300 	sbc.w	r3, r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	db1a      	blt.n	80070c0 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 800708a:	4628      	mov	r0, r5
 800708c:	f003 ff4c 	bl	800af28 <z_abort_timeout>
	timer->period = period;
 8007090:	62af      	str	r7, [r5, #40]	; 0x28
 8007092:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800709a:	4622      	mov	r2, r4
 800709c:	4633      	mov	r3, r6
 800709e:	490e      	ldr	r1, [pc, #56]	; (80070d8 <z_impl_k_timer_start+0xa8>)
 80070a0:	4628      	mov	r0, r5
 80070a2:	f7ff fe53 	bl	8006d4c <z_add_timeout>
		     duration);
}
 80070a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 80070aa:	2f02      	cmp	r7, #2
 80070ac:	f178 0300 	sbcs.w	r3, r8, #0
 80070b0:	da02      	bge.n	80070b8 <z_impl_k_timer_start+0x88>
 80070b2:	2702      	movs	r7, #2
 80070b4:	f04f 0800 	mov.w	r8, #0
 80070b8:	3f01      	subs	r7, #1
 80070ba:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
 80070be:	e7db      	b.n	8007078 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
 80070c0:	460c      	mov	r4, r1
 80070c2:	4606      	mov	r6, r0
 80070c4:	2901      	cmp	r1, #1
 80070c6:	f170 0300 	sbcs.w	r3, r0, #0
 80070ca:	da01      	bge.n	80070d0 <z_impl_k_timer_start+0xa0>
 80070cc:	2401      	movs	r4, #1
 80070ce:	2600      	movs	r6, #0
 80070d0:	3c01      	subs	r4, #1
 80070d2:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
 80070d6:	e7d8      	b.n	800708a <z_impl_k_timer_start+0x5a>
 80070d8:	08006f9d 	.word	0x08006f9d

080070dc <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	b087      	sub	sp, #28
 80070e2:	4682      	mov	sl, r0
 80070e4:	460f      	mov	r7, r1
 80070e6:	4693      	mov	fp, r2
 80070e8:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 80070ea:	2500      	movs	r5, #0
	int events_registered = 0;
 80070ec:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
 80070ee:	e02f      	b.n	8007150 <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
 80070f0:	6923      	ldr	r3, [r4, #16]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	b1cb      	cbz	r3, 800712a <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 80070f6:	f04f 0902 	mov.w	r9, #2
			return true;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e015      	b.n	800712a <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 80070fe:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	b193      	cbz	r3, 800712a <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 8007104:	f04f 0904 	mov.w	r9, #4
			return true;
 8007108:	2301      	movs	r3, #1
 800710a:	e00e      	b.n	800712a <register_events+0x4e>
		if (event->signal->signaled != 0U) {
 800710c:	6923      	ldr	r3, [r4, #16]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	b15b      	cbz	r3, 800712a <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
 8007112:	f04f 0901 	mov.w	r9, #1
			return true;
 8007116:	464b      	mov	r3, r9
 8007118:	e007      	b.n	800712a <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
 800711a:	6923      	ldr	r3, [r4, #16]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	b123      	cbz	r3, 800712a <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 8007120:	f04f 0910 	mov.w	r9, #16
			return true;
 8007124:	2301      	movs	r3, #1
 8007126:	e000      	b.n	800712a <register_events+0x4e>
	switch (event->type) {
 8007128:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
 800712a:	2b00      	cmp	r3, #0
 800712c:	d03a      	beq.n	80071a4 <register_events+0xc8>
	event->poller = NULL;
 800712e:	2100      	movs	r1, #0
 8007130:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 8007132:	68e3      	ldr	r3, [r4, #12]
 8007134:	f3c3 3245 	ubfx	r2, r3, #13, #6
 8007138:	ea49 0202 	orr.w	r2, r9, r2
 800713c:	f362 3352 	bfi	r3, r2, #13, #6
 8007140:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
 8007142:	f88b 1000 	strb.w	r1, [fp]
 8007146:	f386 8811 	msr	BASEPRI, r6
 800714a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 800714e:	3501      	adds	r5, #1
 8007150:	42bd      	cmp	r5, r7
 8007152:	f280 81b9 	bge.w	80074c8 <register_events+0x3ec>
	__asm__ volatile(
 8007156:	f04f 0310 	mov.w	r3, #16
 800715a:	f3ef 8611 	mrs	r6, BASEPRI
 800715e:	f383 8812 	msr	BASEPRI_MAX, r3
 8007162:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 8007166:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800716a:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800716e:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
 8007172:	7b63      	ldrb	r3, [r4, #13]
 8007174:	f003 031f 	and.w	r3, r3, #31
 8007178:	3b01      	subs	r3, #1
 800717a:	2b07      	cmp	r3, #7
 800717c:	d8d4      	bhi.n	8007128 <register_events+0x4c>
 800717e:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <register_events+0xa8>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	0800710d 	.word	0x0800710d
 8007188:	080070f1 	.word	0x080070f1
 800718c:	08007129 	.word	0x08007129
 8007190:	080070ff 	.word	0x080070ff
 8007194:	08007129 	.word	0x08007129
 8007198:	08007129 	.word	0x08007129
 800719c:	08007129 	.word	0x08007129
 80071a0:	0800711b 	.word	0x0800711b
		} else if (!just_check && poller->is_polling) {
 80071a4:	9b00      	ldr	r3, [sp, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1cd      	bne.n	8007146 <register_events+0x6a>
 80071aa:	f89b 3000 	ldrb.w	r3, [fp]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0c9      	beq.n	8007146 <register_events+0x6a>
	switch (event->type) {
 80071b2:	7b63      	ldrb	r3, [r4, #13]
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	3b01      	subs	r3, #1
 80071ba:	2b07      	cmp	r3, #7
 80071bc:	d848      	bhi.n	8007250 <register_events+0x174>
 80071be:	e8df f013 	tbh	[pc, r3, lsl #1]
 80071c2:	00cb      	.short	0x00cb
 80071c4:	00470008 	.word	0x00470008
 80071c8:	0047006d 	.word	0x0047006d
 80071cc:	00470047 	.word	0x00470047
 80071d0:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
 80071d2:	6923      	ldr	r3, [r4, #16]
 80071d4:	9304      	str	r3, [sp, #16]
 80071d6:	461a      	mov	r2, r3
 80071d8:	3210      	adds	r2, #16
 80071da:	9202      	str	r2, [sp, #8]
	return list->head == list;
 80071dc:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80071de:	429a      	cmp	r2, r3
 80071e0:	d02f      	beq.n	8007242 <register_events+0x166>
 80071e2:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d02c      	beq.n	8007242 <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80071e8:	6898      	ldr	r0, [r3, #8]
 80071ea:	f003 ff09 	bl	800b000 <poller_thread>
 80071ee:	9005      	str	r0, [sp, #20]
 80071f0:	4658      	mov	r0, fp
 80071f2:	f003 ff05 	bl	800b000 <poller_thread>
 80071f6:	4601      	mov	r1, r0
 80071f8:	9003      	str	r0, [sp, #12]
 80071fa:	9805      	ldr	r0, [sp, #20]
 80071fc:	f003 fcde 	bl	800abbc <z_sched_prio_cmp>
	if ((pending == NULL) ||
 8007200:	2800      	cmp	r0, #0
 8007202:	dc1e      	bgt.n	8007242 <register_events+0x166>
	return list->head == list;
 8007204:	9b04      	ldr	r3, [sp, #16]
 8007206:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007208:	9a02      	ldr	r2, [sp, #8]
 800720a:	429a      	cmp	r2, r3
 800720c:	d030      	beq.n	8007270 <register_events+0x194>
 800720e:	9404      	str	r4, [sp, #16]
 8007210:	9505      	str	r5, [sp, #20]
 8007212:	9d02      	ldr	r5, [sp, #8]
 8007214:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8007216:	2c00      	cmp	r4, #0
 8007218:	d030      	beq.n	800727c <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
 800721a:	68a0      	ldr	r0, [r4, #8]
 800721c:	f003 fef0 	bl	800b000 <poller_thread>
 8007220:	4601      	mov	r1, r0
 8007222:	9803      	ldr	r0, [sp, #12]
 8007224:	f003 fcca 	bl	800abbc <z_sched_prio_cmp>
 8007228:	2800      	cmp	r0, #0
 800722a:	dc17      	bgt.n	800725c <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800722c:	2c00      	cmp	r4, #0
 800722e:	d028      	beq.n	8007282 <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
 8007230:	686b      	ldr	r3, [r5, #4]
 8007232:	429c      	cmp	r4, r3
 8007234:	d02f      	beq.n	8007296 <register_events+0x1ba>
 8007236:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8007238:	2c00      	cmp	r4, #0
 800723a:	d1ec      	bne.n	8007216 <register_events+0x13a>
 800723c:	9c04      	ldr	r4, [sp, #16]
 800723e:	9d05      	ldr	r5, [sp, #20]
 8007240:	e021      	b.n	8007286 <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
 8007242:	9a02      	ldr	r2, [sp, #8]
 8007244:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8007246:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800724a:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800724c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800724e:	6054      	str	r4, [r2, #4]
	event->poller = poller;
 8007250:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
 8007254:	9b01      	ldr	r3, [sp, #4]
 8007256:	3301      	adds	r3, #1
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	e774      	b.n	8007146 <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
 800725c:	9d05      	ldr	r5, [sp, #20]
 800725e:	4622      	mov	r2, r4
 8007260:	9c04      	ldr	r4, [sp, #16]
 8007262:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8007264:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8007266:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800726a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800726c:	6054      	str	r4, [r2, #4]
			return;
 800726e:	e7ef      	b.n	8007250 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8007270:	2300      	movs	r3, #0
 8007272:	9404      	str	r4, [sp, #16]
 8007274:	9505      	str	r5, [sp, #20]
 8007276:	9d02      	ldr	r5, [sp, #8]
 8007278:	461c      	mov	r4, r3
 800727a:	e7cc      	b.n	8007216 <register_events+0x13a>
 800727c:	9c04      	ldr	r4, [sp, #16]
 800727e:	9d05      	ldr	r5, [sp, #20]
 8007280:	e001      	b.n	8007286 <register_events+0x1aa>
 8007282:	9c04      	ldr	r4, [sp, #16]
 8007284:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 8007286:	9a02      	ldr	r2, [sp, #8]
 8007288:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800728a:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800728e:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8007290:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8007292:	6054      	str	r4, [r2, #4]
}
 8007294:	e7dc      	b.n	8007250 <register_events+0x174>
 8007296:	9c04      	ldr	r4, [sp, #16]
 8007298:	9d05      	ldr	r5, [sp, #20]
 800729a:	e7f4      	b.n	8007286 <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	9304      	str	r3, [sp, #16]
 80072a0:	461a      	mov	r2, r3
 80072a2:	3214      	adds	r2, #20
 80072a4:	9202      	str	r2, [sp, #8]
	return list->head == list;
 80072a6:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d02d      	beq.n	8007308 <register_events+0x22c>
 80072ac:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 80072ae:	b35b      	cbz	r3, 8007308 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80072b0:	6898      	ldr	r0, [r3, #8]
 80072b2:	f003 fea5 	bl	800b000 <poller_thread>
 80072b6:	9005      	str	r0, [sp, #20]
 80072b8:	4658      	mov	r0, fp
 80072ba:	f003 fea1 	bl	800b000 <poller_thread>
 80072be:	4601      	mov	r1, r0
 80072c0:	9003      	str	r0, [sp, #12]
 80072c2:	9805      	ldr	r0, [sp, #20]
 80072c4:	f003 fc7a 	bl	800abbc <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80072c8:	2800      	cmp	r0, #0
 80072ca:	dc1d      	bgt.n	8007308 <register_events+0x22c>
	return list->head == list;
 80072cc:	9b04      	ldr	r3, [sp, #16]
 80072ce:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80072d0:	9a02      	ldr	r2, [sp, #8]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d02a      	beq.n	800732c <register_events+0x250>
 80072d6:	9404      	str	r4, [sp, #16]
 80072d8:	9505      	str	r5, [sp, #20]
 80072da:	9d02      	ldr	r5, [sp, #8]
 80072dc:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80072de:	2c00      	cmp	r4, #0
 80072e0:	d02a      	beq.n	8007338 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
 80072e2:	68a0      	ldr	r0, [r4, #8]
 80072e4:	f003 fe8c 	bl	800b000 <poller_thread>
 80072e8:	4601      	mov	r1, r0
 80072ea:	9803      	ldr	r0, [sp, #12]
 80072ec:	f003 fc66 	bl	800abbc <z_sched_prio_cmp>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	dc11      	bgt.n	8007318 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80072f4:	b31c      	cbz	r4, 800733e <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
 80072f6:	686b      	ldr	r3, [r5, #4]
 80072f8:	429c      	cmp	r4, r3
 80072fa:	d02a      	beq.n	8007352 <register_events+0x276>
 80072fc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80072fe:	2c00      	cmp	r4, #0
 8007300:	d1ed      	bne.n	80072de <register_events+0x202>
 8007302:	9c04      	ldr	r4, [sp, #16]
 8007304:	9d05      	ldr	r5, [sp, #20]
 8007306:	e01c      	b.n	8007342 <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
 8007308:	9a02      	ldr	r2, [sp, #8]
 800730a:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800730c:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8007310:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8007312:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8007314:	6054      	str	r4, [r2, #4]
		return;
 8007316:	e79b      	b.n	8007250 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 8007318:	9d05      	ldr	r5, [sp, #20]
 800731a:	4622      	mov	r2, r4
 800731c:	9c04      	ldr	r4, [sp, #16]
 800731e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8007320:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8007322:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 8007326:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8007328:	6054      	str	r4, [r2, #4]
			return;
 800732a:	e791      	b.n	8007250 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800732c:	2300      	movs	r3, #0
 800732e:	9404      	str	r4, [sp, #16]
 8007330:	9505      	str	r5, [sp, #20]
 8007332:	9d02      	ldr	r5, [sp, #8]
 8007334:	461c      	mov	r4, r3
 8007336:	e7d2      	b.n	80072de <register_events+0x202>
 8007338:	9c04      	ldr	r4, [sp, #16]
 800733a:	9d05      	ldr	r5, [sp, #20]
 800733c:	e001      	b.n	8007342 <register_events+0x266>
 800733e:	9c04      	ldr	r4, [sp, #16]
 8007340:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 8007342:	9a02      	ldr	r2, [sp, #8]
 8007344:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8007346:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800734a:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800734c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800734e:	6054      	str	r4, [r2, #4]
}
 8007350:	e77e      	b.n	8007250 <register_events+0x174>
 8007352:	9c04      	ldr	r4, [sp, #16]
 8007354:	9d05      	ldr	r5, [sp, #20]
 8007356:	e7f4      	b.n	8007342 <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
 8007358:	6922      	ldr	r2, [r4, #16]
 800735a:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800735c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800735e:	429a      	cmp	r2, r3
 8007360:	d02c      	beq.n	80073bc <register_events+0x2e0>
 8007362:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 8007364:	b353      	cbz	r3, 80073bc <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8007366:	6898      	ldr	r0, [r3, #8]
 8007368:	f003 fe4a 	bl	800b000 <poller_thread>
 800736c:	9004      	str	r0, [sp, #16]
 800736e:	4658      	mov	r0, fp
 8007370:	f003 fe46 	bl	800b000 <poller_thread>
 8007374:	4601      	mov	r1, r0
 8007376:	9003      	str	r0, [sp, #12]
 8007378:	9804      	ldr	r0, [sp, #16]
 800737a:	f003 fc1f 	bl	800abbc <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800737e:	2800      	cmp	r0, #0
 8007380:	dc1c      	bgt.n	80073bc <register_events+0x2e0>
	return list->head == list;
 8007382:	9a02      	ldr	r2, [sp, #8]
 8007384:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007386:	429a      	cmp	r2, r3
 8007388:	d02a      	beq.n	80073e0 <register_events+0x304>
 800738a:	9404      	str	r4, [sp, #16]
 800738c:	9505      	str	r5, [sp, #20]
 800738e:	9d02      	ldr	r5, [sp, #8]
 8007390:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8007392:	2c00      	cmp	r4, #0
 8007394:	d02a      	beq.n	80073ec <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
 8007396:	68a0      	ldr	r0, [r4, #8]
 8007398:	f003 fe32 	bl	800b000 <poller_thread>
 800739c:	4601      	mov	r1, r0
 800739e:	9803      	ldr	r0, [sp, #12]
 80073a0:	f003 fc0c 	bl	800abbc <z_sched_prio_cmp>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	dc11      	bgt.n	80073cc <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80073a8:	b31c      	cbz	r4, 80073f2 <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
 80073aa:	686b      	ldr	r3, [r5, #4]
 80073ac:	429c      	cmp	r4, r3
 80073ae:	d02a      	beq.n	8007406 <register_events+0x32a>
 80073b0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80073b2:	2c00      	cmp	r4, #0
 80073b4:	d1ed      	bne.n	8007392 <register_events+0x2b6>
 80073b6:	9c04      	ldr	r4, [sp, #16]
 80073b8:	9d05      	ldr	r5, [sp, #20]
 80073ba:	e01c      	b.n	80073f6 <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
 80073bc:	9a02      	ldr	r2, [sp, #8]
 80073be:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80073c0:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80073c4:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80073c6:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80073c8:	6054      	str	r4, [r2, #4]
		return;
 80073ca:	e741      	b.n	8007250 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 80073cc:	9d05      	ldr	r5, [sp, #20]
 80073ce:	4622      	mov	r2, r4
 80073d0:	9c04      	ldr	r4, [sp, #16]
 80073d2:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 80073d4:	6063      	str	r3, [r4, #4]
	node->next = successor;
 80073d6:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 80073da:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80073dc:	6054      	str	r4, [r2, #4]
			return;
 80073de:	e737      	b.n	8007250 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80073e0:	2300      	movs	r3, #0
 80073e2:	9404      	str	r4, [sp, #16]
 80073e4:	9505      	str	r5, [sp, #20]
 80073e6:	9d02      	ldr	r5, [sp, #8]
 80073e8:	461c      	mov	r4, r3
 80073ea:	e7d2      	b.n	8007392 <register_events+0x2b6>
 80073ec:	9c04      	ldr	r4, [sp, #16]
 80073ee:	9d05      	ldr	r5, [sp, #20]
 80073f0:	e001      	b.n	80073f6 <register_events+0x31a>
 80073f2:	9c04      	ldr	r4, [sp, #16]
 80073f4:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 80073f6:	9a02      	ldr	r2, [sp, #8]
 80073f8:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80073fa:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80073fe:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8007400:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8007402:	6054      	str	r4, [r2, #4]
}
 8007404:	e724      	b.n	8007250 <register_events+0x174>
 8007406:	9c04      	ldr	r4, [sp, #16]
 8007408:	9d05      	ldr	r5, [sp, #20]
 800740a:	e7f4      	b.n	80073f6 <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
 800740c:	6923      	ldr	r3, [r4, #16]
 800740e:	9304      	str	r3, [sp, #16]
 8007410:	461a      	mov	r2, r3
 8007412:	3228      	adds	r2, #40	; 0x28
 8007414:	9202      	str	r2, [sp, #8]
	return list->head == list;
 8007416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8007418:	429a      	cmp	r2, r3
 800741a:	d02d      	beq.n	8007478 <register_events+0x39c>
 800741c:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800741e:	b35b      	cbz	r3, 8007478 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8007420:	6898      	ldr	r0, [r3, #8]
 8007422:	f003 fded 	bl	800b000 <poller_thread>
 8007426:	9005      	str	r0, [sp, #20]
 8007428:	4658      	mov	r0, fp
 800742a:	f003 fde9 	bl	800b000 <poller_thread>
 800742e:	4601      	mov	r1, r0
 8007430:	9003      	str	r0, [sp, #12]
 8007432:	9805      	ldr	r0, [sp, #20]
 8007434:	f003 fbc2 	bl	800abbc <z_sched_prio_cmp>
	if ((pending == NULL) ||
 8007438:	2800      	cmp	r0, #0
 800743a:	dc1d      	bgt.n	8007478 <register_events+0x39c>
	return list->head == list;
 800743c:	9b04      	ldr	r3, [sp, #16]
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007440:	9a02      	ldr	r2, [sp, #8]
 8007442:	429a      	cmp	r2, r3
 8007444:	d02a      	beq.n	800749c <register_events+0x3c0>
 8007446:	9404      	str	r4, [sp, #16]
 8007448:	9505      	str	r5, [sp, #20]
 800744a:	9d02      	ldr	r5, [sp, #8]
 800744c:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800744e:	2c00      	cmp	r4, #0
 8007450:	d02a      	beq.n	80074a8 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
 8007452:	68a0      	ldr	r0, [r4, #8]
 8007454:	f003 fdd4 	bl	800b000 <poller_thread>
 8007458:	4601      	mov	r1, r0
 800745a:	9803      	ldr	r0, [sp, #12]
 800745c:	f003 fbae 	bl	800abbc <z_sched_prio_cmp>
 8007460:	2800      	cmp	r0, #0
 8007462:	dc11      	bgt.n	8007488 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8007464:	b31c      	cbz	r4, 80074ae <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
 8007466:	686b      	ldr	r3, [r5, #4]
 8007468:	429c      	cmp	r4, r3
 800746a:	d02a      	beq.n	80074c2 <register_events+0x3e6>
 800746c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800746e:	2c00      	cmp	r4, #0
 8007470:	d1ed      	bne.n	800744e <register_events+0x372>
 8007472:	9c04      	ldr	r4, [sp, #16]
 8007474:	9d05      	ldr	r5, [sp, #20]
 8007476:	e01c      	b.n	80074b2 <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
 8007478:	9a02      	ldr	r2, [sp, #8]
 800747a:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800747c:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8007480:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8007482:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8007484:	6054      	str	r4, [r2, #4]
		return;
 8007486:	e6e3      	b.n	8007250 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 8007488:	9d05      	ldr	r5, [sp, #20]
 800748a:	4622      	mov	r2, r4
 800748c:	9c04      	ldr	r4, [sp, #16]
 800748e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8007490:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8007492:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 8007496:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8007498:	6054      	str	r4, [r2, #4]
			return;
 800749a:	e6d9      	b.n	8007250 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800749c:	2300      	movs	r3, #0
 800749e:	9404      	str	r4, [sp, #16]
 80074a0:	9505      	str	r5, [sp, #20]
 80074a2:	9d02      	ldr	r5, [sp, #8]
 80074a4:	461c      	mov	r4, r3
 80074a6:	e7d2      	b.n	800744e <register_events+0x372>
 80074a8:	9c04      	ldr	r4, [sp, #16]
 80074aa:	9d05      	ldr	r5, [sp, #20]
 80074ac:	e001      	b.n	80074b2 <register_events+0x3d6>
 80074ae:	9c04      	ldr	r4, [sp, #16]
 80074b0:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 80074b2:	9a02      	ldr	r2, [sp, #8]
 80074b4:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80074b6:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80074ba:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80074bc:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80074be:	6054      	str	r4, [r2, #4]
}
 80074c0:	e6c6      	b.n	8007250 <register_events+0x174>
 80074c2:	9c04      	ldr	r4, [sp, #16]
 80074c4:	9d05      	ldr	r5, [sp, #20]
 80074c6:	e7f4      	b.n	80074b2 <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 80074c8:	9801      	ldr	r0, [sp, #4]
 80074ca:	b007      	add	sp, #28
 80074cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074d0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 80074d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	4605      	mov	r5, r0
 80074d8:	4690      	mov	r8, r2
 80074da:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 80074dc:	4b4f      	ldr	r3, [pc, #316]	; (800761c <z_impl_k_poll+0x14c>)
 80074de:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
 80074e0:	2301      	movs	r3, #1
 80074e2:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
 80074e6:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 80074ea:	ea57 0302 	orrs.w	r3, r7, r2
 80074ee:	bf0c      	ite	eq
 80074f0:	2301      	moveq	r3, #1
 80074f2:	2300      	movne	r3, #0
 80074f4:	f106 0260 	add.w	r2, r6, #96	; 0x60
 80074f8:	f7ff fdf0 	bl	80070dc <register_events>
 80074fc:	4604      	mov	r4, r0
 80074fe:	f04f 0310 	mov.w	r3, #16
 8007502:	f3ef 8111 	mrs	r1, BASEPRI
 8007506:	f383 8812 	msr	BASEPRI_MAX, r3
 800750a:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 800750e:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 8007512:	b1b3      	cbz	r3, 8007542 <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
 8007514:	2300      	movs	r3, #0
 8007516:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800751a:	ea57 0308 	orrs.w	r3, r7, r8
 800751e:	d043      	beq.n	80075a8 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8007520:	f8cd 8000 	str.w	r8, [sp]
 8007524:	9701      	str	r7, [sp, #4]
 8007526:	4a3e      	ldr	r2, [pc, #248]	; (8007620 <z_impl_k_poll+0x150>)
 8007528:	483e      	ldr	r0, [pc, #248]	; (8007624 <z_impl_k_poll+0x154>)
 800752a:	f7ff f981 	bl	8006830 <z_pend_curr>
 800752e:	f04f 0310 	mov.w	r3, #16
 8007532:	f3ef 8611 	mrs	r6, BASEPRI
 8007536:	f383 8812 	msr	BASEPRI_MAX, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	46b4      	mov	ip, r6
	while (num_events--) {
 8007540:	e04c      	b.n	80075dc <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
 8007542:	460e      	mov	r6, r1
	while (num_events--) {
 8007544:	e00c      	b.n	8007560 <z_impl_k_poll+0x90>
	__asm__ volatile(
 8007546:	f386 8811 	msr	BASEPRI, r6
 800754a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800754e:	f04f 0310 	mov.w	r3, #16
 8007552:	f3ef 8611 	mrs	r6, BASEPRI
 8007556:	f383 8812 	msr	BASEPRI_MAX, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	4604      	mov	r4, r0
 8007560:	1e60      	subs	r0, r4, #1
 8007562:	b1dc      	cbz	r4, 800759c <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
 8007564:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8007568:	009f      	lsls	r7, r3, #2
 800756a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800756e:	2200      	movs	r2, #0
 8007570:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 8007572:	7b5a      	ldrb	r2, [r3, #13]
 8007574:	f002 021f 	and.w	r2, r2, #31
 8007578:	2a08      	cmp	r2, #8
 800757a:	d8e4      	bhi.n	8007546 <z_impl_k_poll+0x76>
 800757c:	2401      	movs	r4, #1
 800757e:	fa04 f202 	lsl.w	r2, r4, r2
 8007582:	f412 7f8b 	tst.w	r2, #278	; 0x116
 8007586:	d0de      	beq.n	8007546 <z_impl_k_poll+0x76>
	return node->next != NULL;
 8007588:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800758a:	2a00      	cmp	r2, #0
 800758c:	d0db      	beq.n	8007546 <z_impl_k_poll+0x76>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800758e:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8007590:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 8007592:	6054      	str	r4, [r2, #4]
	node->next = NULL;
 8007594:	2200      	movs	r2, #0
 8007596:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
 8007598:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 800759a:	e7d4      	b.n	8007546 <z_impl_k_poll+0x76>
	__asm__ volatile(
 800759c:	f381 8811 	msr	BASEPRI, r1
 80075a0:	f3bf 8f6f 	isb	sy
		return 0;
 80075a4:	4620      	mov	r0, r4
 80075a6:	e036      	b.n	8007616 <z_impl_k_poll+0x146>
 80075a8:	f381 8811 	msr	BASEPRI, r1
 80075ac:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 80075b0:	f06f 000a 	mvn.w	r0, #10
 80075b4:	e02f      	b.n	8007616 <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
 80075b6:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
 80075b8:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 80075ba:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 80075bc:	2200      	movs	r2, #0
 80075be:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
 80075c0:	605a      	str	r2, [r3, #4]
 80075c2:	f38c 8811 	msr	BASEPRI, ip
 80075c6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80075ca:	f04f 0310 	mov.w	r3, #16
 80075ce:	f3ef 8c11 	mrs	ip, BASEPRI
 80075d2:	f383 8812 	msr	BASEPRI_MAX, r3
 80075d6:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 80075da:	4674      	mov	r4, lr
 80075dc:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 80075e0:	b1ac      	cbz	r4, 800760e <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
 80075e2:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 80075e6:	009c      	lsls	r4, r3, #2
 80075e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 80075ec:	2200      	movs	r2, #0
 80075ee:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 80075f0:	7b5a      	ldrb	r2, [r3, #13]
 80075f2:	f002 021f 	and.w	r2, r2, #31
 80075f6:	2a08      	cmp	r2, #8
 80075f8:	d8e3      	bhi.n	80075c2 <z_impl_k_poll+0xf2>
 80075fa:	2101      	movs	r1, #1
 80075fc:	fa01 f202 	lsl.w	r2, r1, r2
 8007600:	f412 7f8b 	tst.w	r2, #278	; 0x116
 8007604:	d0dd      	beq.n	80075c2 <z_impl_k_poll+0xf2>
	return node->next != NULL;
 8007606:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 8007608:	2a00      	cmp	r2, #0
 800760a:	d1d4      	bne.n	80075b6 <z_impl_k_poll+0xe6>
 800760c:	e7d9      	b.n	80075c2 <z_impl_k_poll+0xf2>
	__asm__ volatile(
 800760e:	f386 8811 	msr	BASEPRI, r6
 8007612:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 8007616:	b002      	add	sp, #8
 8007618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800761c:	20000e20 	.word	0x20000e20
 8007620:	20000328 	.word	0x20000328
 8007624:	20000e70 	.word	0x20000e70

08007628 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4603      	mov	r3, r0
	__asm__ volatile(
 800762c:	f04f 0210 	mov.w	r2, #16
 8007630:	f3ef 8511 	mrs	r5, BASEPRI
 8007634:	f382 8812 	msr	BASEPRI_MAX, r2
 8007638:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 800763c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 800763e:	2201      	movs	r2, #1
 8007640:	6082      	str	r2, [r0, #8]
	return list->head == list;
 8007642:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 8007644:	4283      	cmp	r3, r0
 8007646:	d011      	beq.n	800766c <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
 8007648:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800764a:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800764c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800764e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8007650:	2300      	movs	r3, #0
 8007652:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8007654:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
 8007656:	b148      	cbz	r0, 800766c <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8007658:	2101      	movs	r1, #1
 800765a:	f003 fd1d 	bl	800b098 <signal_poll_event>
 800765e:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 8007660:	4629      	mov	r1, r5
 8007662:	4805      	ldr	r0, [pc, #20]	; (8007678 <z_impl_k_poll_signal_raise+0x50>)
 8007664:	f7fe ff74 	bl	8006550 <z_reschedule>
	return rc;
}
 8007668:	4620      	mov	r0, r4
 800766a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800766c:	f385 8811 	msr	BASEPRI, r5
 8007670:	f3bf 8f6f 	isb	sy
		return 0;
 8007674:	2400      	movs	r4, #0
 8007676:	e7f7      	b.n	8007668 <z_impl_k_poll_signal_raise+0x40>
 8007678:	20000e70 	.word	0x20000e70

0800767c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800767c:	b510      	push	{r4, lr}
 800767e:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 8007680:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <k_sys_work_q_init+0x28>)
 8007682:	9302      	str	r3, [sp, #8]
 8007684:	2400      	movs	r4, #0
 8007686:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800768a:	ab02      	add	r3, sp, #8
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	4623      	mov	r3, r4
 8007690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007694:	4904      	ldr	r1, [pc, #16]	; (80076a8 <k_sys_work_q_init+0x2c>)
 8007696:	4805      	ldr	r0, [pc, #20]	; (80076ac <k_sys_work_q_init+0x30>)
 8007698:	f7f8 ff56 	bl	8000548 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800769c:	4620      	mov	r0, r4
 800769e:	b004      	add	sp, #16
 80076a0:	bd10      	pop	{r4, pc}
 80076a2:	bf00      	nop
 80076a4:	0800c3a4 	.word	0x0800c3a4
 80076a8:	20002e00 	.word	0x20002e00
 80076ac:	200006d0 	.word	0x200006d0

080076b0 <malloc>:
 80076b0:	4b02      	ldr	r3, [pc, #8]	; (80076bc <malloc+0xc>)
 80076b2:	4601      	mov	r1, r0
 80076b4:	6818      	ldr	r0, [r3, #0]
 80076b6:	f000 b84f 	b.w	8007758 <_malloc_r>
 80076ba:	bf00      	nop
 80076bc:	20000330 	.word	0x20000330

080076c0 <_free_r>:
 80076c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076c2:	2900      	cmp	r1, #0
 80076c4:	d044      	beq.n	8007750 <_free_r+0x90>
 80076c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ca:	9001      	str	r0, [sp, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f1a1 0404 	sub.w	r4, r1, #4
 80076d2:	bfb8      	it	lt
 80076d4:	18e4      	addlt	r4, r4, r3
 80076d6:	f000 f9c7 	bl	8007a68 <__malloc_lock>
 80076da:	4a1e      	ldr	r2, [pc, #120]	; (8007754 <_free_r+0x94>)
 80076dc:	9801      	ldr	r0, [sp, #4]
 80076de:	6813      	ldr	r3, [r2, #0]
 80076e0:	b933      	cbnz	r3, 80076f0 <_free_r+0x30>
 80076e2:	6063      	str	r3, [r4, #4]
 80076e4:	6014      	str	r4, [r2, #0]
 80076e6:	b003      	add	sp, #12
 80076e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076ec:	f000 b9c2 	b.w	8007a74 <__malloc_unlock>
 80076f0:	42a3      	cmp	r3, r4
 80076f2:	d908      	bls.n	8007706 <_free_r+0x46>
 80076f4:	6825      	ldr	r5, [r4, #0]
 80076f6:	1961      	adds	r1, r4, r5
 80076f8:	428b      	cmp	r3, r1
 80076fa:	bf01      	itttt	eq
 80076fc:	6819      	ldreq	r1, [r3, #0]
 80076fe:	685b      	ldreq	r3, [r3, #4]
 8007700:	1949      	addeq	r1, r1, r5
 8007702:	6021      	streq	r1, [r4, #0]
 8007704:	e7ed      	b.n	80076e2 <_free_r+0x22>
 8007706:	461a      	mov	r2, r3
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	b10b      	cbz	r3, 8007710 <_free_r+0x50>
 800770c:	42a3      	cmp	r3, r4
 800770e:	d9fa      	bls.n	8007706 <_free_r+0x46>
 8007710:	6811      	ldr	r1, [r2, #0]
 8007712:	1855      	adds	r5, r2, r1
 8007714:	42a5      	cmp	r5, r4
 8007716:	d10b      	bne.n	8007730 <_free_r+0x70>
 8007718:	6824      	ldr	r4, [r4, #0]
 800771a:	4421      	add	r1, r4
 800771c:	1854      	adds	r4, r2, r1
 800771e:	42a3      	cmp	r3, r4
 8007720:	6011      	str	r1, [r2, #0]
 8007722:	d1e0      	bne.n	80076e6 <_free_r+0x26>
 8007724:	681c      	ldr	r4, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	6053      	str	r3, [r2, #4]
 800772a:	4421      	add	r1, r4
 800772c:	6011      	str	r1, [r2, #0]
 800772e:	e7da      	b.n	80076e6 <_free_r+0x26>
 8007730:	d902      	bls.n	8007738 <_free_r+0x78>
 8007732:	230c      	movs	r3, #12
 8007734:	6003      	str	r3, [r0, #0]
 8007736:	e7d6      	b.n	80076e6 <_free_r+0x26>
 8007738:	6825      	ldr	r5, [r4, #0]
 800773a:	1961      	adds	r1, r4, r5
 800773c:	428b      	cmp	r3, r1
 800773e:	bf04      	itt	eq
 8007740:	6819      	ldreq	r1, [r3, #0]
 8007742:	685b      	ldreq	r3, [r3, #4]
 8007744:	6063      	str	r3, [r4, #4]
 8007746:	bf04      	itt	eq
 8007748:	1949      	addeq	r1, r1, r5
 800774a:	6021      	streq	r1, [r4, #0]
 800774c:	6054      	str	r4, [r2, #4]
 800774e:	e7ca      	b.n	80076e6 <_free_r+0x26>
 8007750:	b003      	add	sp, #12
 8007752:	bd30      	pop	{r4, r5, pc}
 8007754:	20000e74 	.word	0x20000e74

08007758 <_malloc_r>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	1ccd      	adds	r5, r1, #3
 800775c:	f025 0503 	bic.w	r5, r5, #3
 8007760:	3508      	adds	r5, #8
 8007762:	2d0c      	cmp	r5, #12
 8007764:	bf38      	it	cc
 8007766:	250c      	movcc	r5, #12
 8007768:	2d00      	cmp	r5, #0
 800776a:	4606      	mov	r6, r0
 800776c:	db01      	blt.n	8007772 <_malloc_r+0x1a>
 800776e:	42a9      	cmp	r1, r5
 8007770:	d903      	bls.n	800777a <_malloc_r+0x22>
 8007772:	230c      	movs	r3, #12
 8007774:	6033      	str	r3, [r6, #0]
 8007776:	2000      	movs	r0, #0
 8007778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800777a:	f000 f975 	bl	8007a68 <__malloc_lock>
 800777e:	4921      	ldr	r1, [pc, #132]	; (8007804 <_malloc_r+0xac>)
 8007780:	680a      	ldr	r2, [r1, #0]
 8007782:	4614      	mov	r4, r2
 8007784:	b99c      	cbnz	r4, 80077ae <_malloc_r+0x56>
 8007786:	4f20      	ldr	r7, [pc, #128]	; (8007808 <_malloc_r+0xb0>)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	b923      	cbnz	r3, 8007796 <_malloc_r+0x3e>
 800778c:	4621      	mov	r1, r4
 800778e:	4630      	mov	r0, r6
 8007790:	f000 f83c 	bl	800780c <_sbrk_r>
 8007794:	6038      	str	r0, [r7, #0]
 8007796:	4629      	mov	r1, r5
 8007798:	4630      	mov	r0, r6
 800779a:	f000 f837 	bl	800780c <_sbrk_r>
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	d123      	bne.n	80077ea <_malloc_r+0x92>
 80077a2:	230c      	movs	r3, #12
 80077a4:	6033      	str	r3, [r6, #0]
 80077a6:	4630      	mov	r0, r6
 80077a8:	f000 f964 	bl	8007a74 <__malloc_unlock>
 80077ac:	e7e3      	b.n	8007776 <_malloc_r+0x1e>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	1b5b      	subs	r3, r3, r5
 80077b2:	d417      	bmi.n	80077e4 <_malloc_r+0x8c>
 80077b4:	2b0b      	cmp	r3, #11
 80077b6:	d903      	bls.n	80077c0 <_malloc_r+0x68>
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	441c      	add	r4, r3
 80077bc:	6025      	str	r5, [r4, #0]
 80077be:	e004      	b.n	80077ca <_malloc_r+0x72>
 80077c0:	6863      	ldr	r3, [r4, #4]
 80077c2:	42a2      	cmp	r2, r4
 80077c4:	bf0c      	ite	eq
 80077c6:	600b      	streq	r3, [r1, #0]
 80077c8:	6053      	strne	r3, [r2, #4]
 80077ca:	4630      	mov	r0, r6
 80077cc:	f000 f952 	bl	8007a74 <__malloc_unlock>
 80077d0:	f104 000b 	add.w	r0, r4, #11
 80077d4:	1d23      	adds	r3, r4, #4
 80077d6:	f020 0007 	bic.w	r0, r0, #7
 80077da:	1ac2      	subs	r2, r0, r3
 80077dc:	d0cc      	beq.n	8007778 <_malloc_r+0x20>
 80077de:	1a1b      	subs	r3, r3, r0
 80077e0:	50a3      	str	r3, [r4, r2]
 80077e2:	e7c9      	b.n	8007778 <_malloc_r+0x20>
 80077e4:	4622      	mov	r2, r4
 80077e6:	6864      	ldr	r4, [r4, #4]
 80077e8:	e7cc      	b.n	8007784 <_malloc_r+0x2c>
 80077ea:	1cc4      	adds	r4, r0, #3
 80077ec:	f024 0403 	bic.w	r4, r4, #3
 80077f0:	42a0      	cmp	r0, r4
 80077f2:	d0e3      	beq.n	80077bc <_malloc_r+0x64>
 80077f4:	1a21      	subs	r1, r4, r0
 80077f6:	4630      	mov	r0, r6
 80077f8:	f000 f808 	bl	800780c <_sbrk_r>
 80077fc:	3001      	adds	r0, #1
 80077fe:	d1dd      	bne.n	80077bc <_malloc_r+0x64>
 8007800:	e7cf      	b.n	80077a2 <_malloc_r+0x4a>
 8007802:	bf00      	nop
 8007804:	20000e74 	.word	0x20000e74
 8007808:	20000e78 	.word	0x20000e78

0800780c <_sbrk_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4d06      	ldr	r5, [pc, #24]	; (8007828 <_sbrk_r+0x1c>)
 8007810:	2300      	movs	r3, #0
 8007812:	4604      	mov	r4, r0
 8007814:	4608      	mov	r0, r1
 8007816:	602b      	str	r3, [r5, #0]
 8007818:	f7fa fb7e 	bl	8001f18 <_sbrk>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d102      	bne.n	8007826 <_sbrk_r+0x1a>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	b103      	cbz	r3, 8007826 <_sbrk_r+0x1a>
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	bd38      	pop	{r3, r4, r5, pc}
 8007828:	20000e7c 	.word	0x20000e7c

0800782c <strtok>:
 800782c:	4b16      	ldr	r3, [pc, #88]	; (8007888 <strtok+0x5c>)
 800782e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007830:	681e      	ldr	r6, [r3, #0]
 8007832:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007834:	4605      	mov	r5, r0
 8007836:	b9fc      	cbnz	r4, 8007878 <strtok+0x4c>
 8007838:	2050      	movs	r0, #80	; 0x50
 800783a:	9101      	str	r1, [sp, #4]
 800783c:	f7ff ff38 	bl	80076b0 <malloc>
 8007840:	9901      	ldr	r1, [sp, #4]
 8007842:	65b0      	str	r0, [r6, #88]	; 0x58
 8007844:	4602      	mov	r2, r0
 8007846:	b920      	cbnz	r0, 8007852 <strtok+0x26>
 8007848:	4b10      	ldr	r3, [pc, #64]	; (800788c <strtok+0x60>)
 800784a:	4811      	ldr	r0, [pc, #68]	; (8007890 <strtok+0x64>)
 800784c:	2157      	movs	r1, #87	; 0x57
 800784e:	f000 f8db 	bl	8007a08 <__assert_func>
 8007852:	e9c0 4400 	strd	r4, r4, [r0]
 8007856:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800785a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800785e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007862:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007866:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800786a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800786e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007872:	6184      	str	r4, [r0, #24]
 8007874:	7704      	strb	r4, [r0, #28]
 8007876:	6244      	str	r4, [r0, #36]	; 0x24
 8007878:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800787a:	2301      	movs	r3, #1
 800787c:	4628      	mov	r0, r5
 800787e:	b002      	add	sp, #8
 8007880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007884:	f003 bc71 	b.w	800b16a <__strtok_r>
 8007888:	20000330 	.word	0x20000330
 800788c:	0800c515 	.word	0x0800c515
 8007890:	0800c52c 	.word	0x0800c52c

08007894 <_strtol_l.constprop.0>:
 8007894:	2b01      	cmp	r3, #1
 8007896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800789a:	d001      	beq.n	80078a0 <_strtol_l.constprop.0+0xc>
 800789c:	2b24      	cmp	r3, #36	; 0x24
 800789e:	d906      	bls.n	80078ae <_strtol_l.constprop.0+0x1a>
 80078a0:	f001 f84f 	bl	8008942 <__errno>
 80078a4:	2316      	movs	r3, #22
 80078a6:	6003      	str	r3, [r0, #0]
 80078a8:	2000      	movs	r0, #0
 80078aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007994 <_strtol_l.constprop.0+0x100>
 80078b2:	460d      	mov	r5, r1
 80078b4:	462e      	mov	r6, r5
 80078b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 80078be:	f017 0708 	ands.w	r7, r7, #8
 80078c2:	d1f7      	bne.n	80078b4 <_strtol_l.constprop.0+0x20>
 80078c4:	2c2d      	cmp	r4, #45	; 0x2d
 80078c6:	d132      	bne.n	800792e <_strtol_l.constprop.0+0x9a>
 80078c8:	782c      	ldrb	r4, [r5, #0]
 80078ca:	2701      	movs	r7, #1
 80078cc:	1cb5      	adds	r5, r6, #2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d05b      	beq.n	800798a <_strtol_l.constprop.0+0xf6>
 80078d2:	2b10      	cmp	r3, #16
 80078d4:	d109      	bne.n	80078ea <_strtol_l.constprop.0+0x56>
 80078d6:	2c30      	cmp	r4, #48	; 0x30
 80078d8:	d107      	bne.n	80078ea <_strtol_l.constprop.0+0x56>
 80078da:	782c      	ldrb	r4, [r5, #0]
 80078dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80078e0:	2c58      	cmp	r4, #88	; 0x58
 80078e2:	d14d      	bne.n	8007980 <_strtol_l.constprop.0+0xec>
 80078e4:	786c      	ldrb	r4, [r5, #1]
 80078e6:	2310      	movs	r3, #16
 80078e8:	3502      	adds	r5, #2
 80078ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80078ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80078f2:	f04f 0c00 	mov.w	ip, #0
 80078f6:	fbb8 f9f3 	udiv	r9, r8, r3
 80078fa:	4666      	mov	r6, ip
 80078fc:	fb03 8a19 	mls	sl, r3, r9, r8
 8007900:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007904:	f1be 0f09 	cmp.w	lr, #9
 8007908:	d816      	bhi.n	8007938 <_strtol_l.constprop.0+0xa4>
 800790a:	4674      	mov	r4, lr
 800790c:	42a3      	cmp	r3, r4
 800790e:	dd24      	ble.n	800795a <_strtol_l.constprop.0+0xc6>
 8007910:	f1bc 0f00 	cmp.w	ip, #0
 8007914:	db1e      	blt.n	8007954 <_strtol_l.constprop.0+0xc0>
 8007916:	45b1      	cmp	r9, r6
 8007918:	d31c      	bcc.n	8007954 <_strtol_l.constprop.0+0xc0>
 800791a:	d101      	bne.n	8007920 <_strtol_l.constprop.0+0x8c>
 800791c:	45a2      	cmp	sl, r4
 800791e:	db19      	blt.n	8007954 <_strtol_l.constprop.0+0xc0>
 8007920:	fb06 4603 	mla	r6, r6, r3, r4
 8007924:	f04f 0c01 	mov.w	ip, #1
 8007928:	f815 4b01 	ldrb.w	r4, [r5], #1
 800792c:	e7e8      	b.n	8007900 <_strtol_l.constprop.0+0x6c>
 800792e:	2c2b      	cmp	r4, #43	; 0x2b
 8007930:	bf04      	itt	eq
 8007932:	782c      	ldrbeq	r4, [r5, #0]
 8007934:	1cb5      	addeq	r5, r6, #2
 8007936:	e7ca      	b.n	80078ce <_strtol_l.constprop.0+0x3a>
 8007938:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800793c:	f1be 0f19 	cmp.w	lr, #25
 8007940:	d801      	bhi.n	8007946 <_strtol_l.constprop.0+0xb2>
 8007942:	3c37      	subs	r4, #55	; 0x37
 8007944:	e7e2      	b.n	800790c <_strtol_l.constprop.0+0x78>
 8007946:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800794a:	f1be 0f19 	cmp.w	lr, #25
 800794e:	d804      	bhi.n	800795a <_strtol_l.constprop.0+0xc6>
 8007950:	3c57      	subs	r4, #87	; 0x57
 8007952:	e7db      	b.n	800790c <_strtol_l.constprop.0+0x78>
 8007954:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007958:	e7e6      	b.n	8007928 <_strtol_l.constprop.0+0x94>
 800795a:	f1bc 0f00 	cmp.w	ip, #0
 800795e:	da05      	bge.n	800796c <_strtol_l.constprop.0+0xd8>
 8007960:	2322      	movs	r3, #34	; 0x22
 8007962:	6003      	str	r3, [r0, #0]
 8007964:	4646      	mov	r6, r8
 8007966:	b942      	cbnz	r2, 800797a <_strtol_l.constprop.0+0xe6>
 8007968:	4630      	mov	r0, r6
 800796a:	e79e      	b.n	80078aa <_strtol_l.constprop.0+0x16>
 800796c:	b107      	cbz	r7, 8007970 <_strtol_l.constprop.0+0xdc>
 800796e:	4276      	negs	r6, r6
 8007970:	2a00      	cmp	r2, #0
 8007972:	d0f9      	beq.n	8007968 <_strtol_l.constprop.0+0xd4>
 8007974:	f1bc 0f00 	cmp.w	ip, #0
 8007978:	d000      	beq.n	800797c <_strtol_l.constprop.0+0xe8>
 800797a:	1e69      	subs	r1, r5, #1
 800797c:	6011      	str	r1, [r2, #0]
 800797e:	e7f3      	b.n	8007968 <_strtol_l.constprop.0+0xd4>
 8007980:	2430      	movs	r4, #48	; 0x30
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1b1      	bne.n	80078ea <_strtol_l.constprop.0+0x56>
 8007986:	2308      	movs	r3, #8
 8007988:	e7af      	b.n	80078ea <_strtol_l.constprop.0+0x56>
 800798a:	2c30      	cmp	r4, #48	; 0x30
 800798c:	d0a5      	beq.n	80078da <_strtol_l.constprop.0+0x46>
 800798e:	230a      	movs	r3, #10
 8007990:	e7ab      	b.n	80078ea <_strtol_l.constprop.0+0x56>
 8007992:	bf00      	nop
 8007994:	0800c415 	.word	0x0800c415

08007998 <strtol>:
 8007998:	4613      	mov	r3, r2
 800799a:	460a      	mov	r2, r1
 800799c:	4601      	mov	r1, r0
 800799e:	4802      	ldr	r0, [pc, #8]	; (80079a8 <strtol+0x10>)
 80079a0:	6800      	ldr	r0, [r0, #0]
 80079a2:	f7ff bf77 	b.w	8007894 <_strtol_l.constprop.0>
 80079a6:	bf00      	nop
 80079a8:	20000330 	.word	0x20000330

080079ac <vsniprintf>:
 80079ac:	b507      	push	{r0, r1, r2, lr}
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	4613      	mov	r3, r2
 80079b2:	460a      	mov	r2, r1
 80079b4:	4601      	mov	r1, r0
 80079b6:	4803      	ldr	r0, [pc, #12]	; (80079c4 <vsniprintf+0x18>)
 80079b8:	6800      	ldr	r0, [r0, #0]
 80079ba:	f003 fbfe 	bl	800b1ba <_vsniprintf_r>
 80079be:	b003      	add	sp, #12
 80079c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80079c4:	20000330 	.word	0x20000330

080079c8 <_vsiprintf_r>:
 80079c8:	b500      	push	{lr}
 80079ca:	b09b      	sub	sp, #108	; 0x6c
 80079cc:	9100      	str	r1, [sp, #0]
 80079ce:	9104      	str	r1, [sp, #16]
 80079d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079d4:	9105      	str	r1, [sp, #20]
 80079d6:	9102      	str	r1, [sp, #8]
 80079d8:	4905      	ldr	r1, [pc, #20]	; (80079f0 <_vsiprintf_r+0x28>)
 80079da:	9103      	str	r1, [sp, #12]
 80079dc:	4669      	mov	r1, sp
 80079de:	f000 f84f 	bl	8007a80 <_svfiprintf_r>
 80079e2:	9b00      	ldr	r3, [sp, #0]
 80079e4:	2200      	movs	r2, #0
 80079e6:	701a      	strb	r2, [r3, #0]
 80079e8:	b01b      	add	sp, #108	; 0x6c
 80079ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80079ee:	bf00      	nop
 80079f0:	ffff0208 	.word	0xffff0208

080079f4 <vsiprintf>:
 80079f4:	4613      	mov	r3, r2
 80079f6:	460a      	mov	r2, r1
 80079f8:	4601      	mov	r1, r0
 80079fa:	4802      	ldr	r0, [pc, #8]	; (8007a04 <vsiprintf+0x10>)
 80079fc:	6800      	ldr	r0, [r0, #0]
 80079fe:	f7ff bfe3 	b.w	80079c8 <_vsiprintf_r>
 8007a02:	bf00      	nop
 8007a04:	20000330 	.word	0x20000330

08007a08 <__assert_func>:
 8007a08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a0a:	4614      	mov	r4, r2
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <__assert_func+0x2c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4605      	mov	r5, r0
 8007a14:	68d8      	ldr	r0, [r3, #12]
 8007a16:	b14c      	cbz	r4, 8007a2c <__assert_func+0x24>
 8007a18:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <__assert_func+0x30>)
 8007a1a:	9100      	str	r1, [sp, #0]
 8007a1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a20:	4906      	ldr	r1, [pc, #24]	; (8007a3c <__assert_func+0x34>)
 8007a22:	462b      	mov	r3, r5
 8007a24:	f000 f80e 	bl	8007a44 <fiprintf>
 8007a28:	f003 fce3 	bl	800b3f2 <abort>
 8007a2c:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <__assert_func+0x38>)
 8007a2e:	461c      	mov	r4, r3
 8007a30:	e7f3      	b.n	8007a1a <__assert_func+0x12>
 8007a32:	bf00      	nop
 8007a34:	20000330 	.word	0x20000330
 8007a38:	0800c588 	.word	0x0800c588
 8007a3c:	0800c595 	.word	0x0800c595
 8007a40:	0800c5c3 	.word	0x0800c5c3

08007a44 <fiprintf>:
 8007a44:	b40e      	push	{r1, r2, r3}
 8007a46:	b503      	push	{r0, r1, lr}
 8007a48:	4601      	mov	r1, r0
 8007a4a:	ab03      	add	r3, sp, #12
 8007a4c:	4805      	ldr	r0, [pc, #20]	; (8007a64 <fiprintf+0x20>)
 8007a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a52:	6800      	ldr	r0, [r0, #0]
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	f000 f913 	bl	8007c80 <_vfiprintf_r>
 8007a5a:	b002      	add	sp, #8
 8007a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a60:	b003      	add	sp, #12
 8007a62:	4770      	bx	lr
 8007a64:	20000330 	.word	0x20000330

08007a68 <__malloc_lock>:
 8007a68:	4801      	ldr	r0, [pc, #4]	; (8007a70 <__malloc_lock+0x8>)
 8007a6a:	f000 bf5e 	b.w	800892a <__retarget_lock_acquire_recursive>
 8007a6e:	bf00      	nop
 8007a70:	20000430 	.word	0x20000430

08007a74 <__malloc_unlock>:
 8007a74:	4801      	ldr	r0, [pc, #4]	; (8007a7c <__malloc_unlock+0x8>)
 8007a76:	f000 bf60 	b.w	800893a <__retarget_lock_release_recursive>
 8007a7a:	bf00      	nop
 8007a7c:	20000430 	.word	0x20000430

08007a80 <_svfiprintf_r>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	4698      	mov	r8, r3
 8007a86:	898b      	ldrh	r3, [r1, #12]
 8007a88:	061b      	lsls	r3, r3, #24
 8007a8a:	b09d      	sub	sp, #116	; 0x74
 8007a8c:	4607      	mov	r7, r0
 8007a8e:	460d      	mov	r5, r1
 8007a90:	4614      	mov	r4, r2
 8007a92:	d50e      	bpl.n	8007ab2 <_svfiprintf_r+0x32>
 8007a94:	690b      	ldr	r3, [r1, #16]
 8007a96:	b963      	cbnz	r3, 8007ab2 <_svfiprintf_r+0x32>
 8007a98:	2140      	movs	r1, #64	; 0x40
 8007a9a:	f7ff fe5d 	bl	8007758 <_malloc_r>
 8007a9e:	6028      	str	r0, [r5, #0]
 8007aa0:	6128      	str	r0, [r5, #16]
 8007aa2:	b920      	cbnz	r0, 8007aae <_svfiprintf_r+0x2e>
 8007aa4:	230c      	movs	r3, #12
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aac:	e0d1      	b.n	8007c52 <_svfiprintf_r+0x1d2>
 8007aae:	2340      	movs	r3, #64	; 0x40
 8007ab0:	616b      	str	r3, [r5, #20]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab6:	2320      	movs	r3, #32
 8007ab8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007abc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ac0:	2330      	movs	r3, #48	; 0x30
 8007ac2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c6c <_svfiprintf_r+0x1ec>
 8007ac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aca:	f04f 0901 	mov.w	r9, #1
 8007ace:	4623      	mov	r3, r4
 8007ad0:	469a      	mov	sl, r3
 8007ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ad6:	b10a      	cbz	r2, 8007adc <_svfiprintf_r+0x5c>
 8007ad8:	2a25      	cmp	r2, #37	; 0x25
 8007ada:	d1f9      	bne.n	8007ad0 <_svfiprintf_r+0x50>
 8007adc:	ebba 0b04 	subs.w	fp, sl, r4
 8007ae0:	d00b      	beq.n	8007afa <_svfiprintf_r+0x7a>
 8007ae2:	465b      	mov	r3, fp
 8007ae4:	4622      	mov	r2, r4
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f003 fb91 	bl	800b210 <__ssputs_r>
 8007aee:	3001      	adds	r0, #1
 8007af0:	f000 80aa 	beq.w	8007c48 <_svfiprintf_r+0x1c8>
 8007af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007af6:	445a      	add	r2, fp
 8007af8:	9209      	str	r2, [sp, #36]	; 0x24
 8007afa:	f89a 3000 	ldrb.w	r3, [sl]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 80a2 	beq.w	8007c48 <_svfiprintf_r+0x1c8>
 8007b04:	2300      	movs	r3, #0
 8007b06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b0e:	f10a 0a01 	add.w	sl, sl, #1
 8007b12:	9304      	str	r3, [sp, #16]
 8007b14:	9307      	str	r3, [sp, #28]
 8007b16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b1a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b1c:	4654      	mov	r4, sl
 8007b1e:	2205      	movs	r2, #5
 8007b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b24:	4851      	ldr	r0, [pc, #324]	; (8007c6c <_svfiprintf_r+0x1ec>)
 8007b26:	f7f8 fb3b 	bl	80001a0 <memchr>
 8007b2a:	9a04      	ldr	r2, [sp, #16]
 8007b2c:	b9d8      	cbnz	r0, 8007b66 <_svfiprintf_r+0xe6>
 8007b2e:	06d0      	lsls	r0, r2, #27
 8007b30:	bf44      	itt	mi
 8007b32:	2320      	movmi	r3, #32
 8007b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b38:	0711      	lsls	r1, r2, #28
 8007b3a:	bf44      	itt	mi
 8007b3c:	232b      	movmi	r3, #43	; 0x2b
 8007b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b42:	f89a 3000 	ldrb.w	r3, [sl]
 8007b46:	2b2a      	cmp	r3, #42	; 0x2a
 8007b48:	d015      	beq.n	8007b76 <_svfiprintf_r+0xf6>
 8007b4a:	9a07      	ldr	r2, [sp, #28]
 8007b4c:	4654      	mov	r4, sl
 8007b4e:	2000      	movs	r0, #0
 8007b50:	f04f 0c0a 	mov.w	ip, #10
 8007b54:	4621      	mov	r1, r4
 8007b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b5a:	3b30      	subs	r3, #48	; 0x30
 8007b5c:	2b09      	cmp	r3, #9
 8007b5e:	d94e      	bls.n	8007bfe <_svfiprintf_r+0x17e>
 8007b60:	b1b0      	cbz	r0, 8007b90 <_svfiprintf_r+0x110>
 8007b62:	9207      	str	r2, [sp, #28]
 8007b64:	e014      	b.n	8007b90 <_svfiprintf_r+0x110>
 8007b66:	eba0 0308 	sub.w	r3, r0, r8
 8007b6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	9304      	str	r3, [sp, #16]
 8007b72:	46a2      	mov	sl, r4
 8007b74:	e7d2      	b.n	8007b1c <_svfiprintf_r+0x9c>
 8007b76:	9b03      	ldr	r3, [sp, #12]
 8007b78:	1d19      	adds	r1, r3, #4
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	9103      	str	r1, [sp, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bfbb      	ittet	lt
 8007b82:	425b      	neglt	r3, r3
 8007b84:	f042 0202 	orrlt.w	r2, r2, #2
 8007b88:	9307      	strge	r3, [sp, #28]
 8007b8a:	9307      	strlt	r3, [sp, #28]
 8007b8c:	bfb8      	it	lt
 8007b8e:	9204      	strlt	r2, [sp, #16]
 8007b90:	7823      	ldrb	r3, [r4, #0]
 8007b92:	2b2e      	cmp	r3, #46	; 0x2e
 8007b94:	d10c      	bne.n	8007bb0 <_svfiprintf_r+0x130>
 8007b96:	7863      	ldrb	r3, [r4, #1]
 8007b98:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9a:	d135      	bne.n	8007c08 <_svfiprintf_r+0x188>
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	1d1a      	adds	r2, r3, #4
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	9203      	str	r2, [sp, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bfb8      	it	lt
 8007ba8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007bac:	3402      	adds	r4, #2
 8007bae:	9305      	str	r3, [sp, #20]
 8007bb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c7c <_svfiprintf_r+0x1fc>
 8007bb4:	7821      	ldrb	r1, [r4, #0]
 8007bb6:	2203      	movs	r2, #3
 8007bb8:	4650      	mov	r0, sl
 8007bba:	f7f8 faf1 	bl	80001a0 <memchr>
 8007bbe:	b140      	cbz	r0, 8007bd2 <_svfiprintf_r+0x152>
 8007bc0:	2340      	movs	r3, #64	; 0x40
 8007bc2:	eba0 000a 	sub.w	r0, r0, sl
 8007bc6:	fa03 f000 	lsl.w	r0, r3, r0
 8007bca:	9b04      	ldr	r3, [sp, #16]
 8007bcc:	4303      	orrs	r3, r0
 8007bce:	3401      	adds	r4, #1
 8007bd0:	9304      	str	r3, [sp, #16]
 8007bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd6:	4826      	ldr	r0, [pc, #152]	; (8007c70 <_svfiprintf_r+0x1f0>)
 8007bd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bdc:	2206      	movs	r2, #6
 8007bde:	f7f8 fadf 	bl	80001a0 <memchr>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d038      	beq.n	8007c58 <_svfiprintf_r+0x1d8>
 8007be6:	4b23      	ldr	r3, [pc, #140]	; (8007c74 <_svfiprintf_r+0x1f4>)
 8007be8:	bb1b      	cbnz	r3, 8007c32 <_svfiprintf_r+0x1b2>
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	3307      	adds	r3, #7
 8007bee:	f023 0307 	bic.w	r3, r3, #7
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	9303      	str	r3, [sp, #12]
 8007bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf8:	4433      	add	r3, r6
 8007bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfc:	e767      	b.n	8007ace <_svfiprintf_r+0x4e>
 8007bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c02:	460c      	mov	r4, r1
 8007c04:	2001      	movs	r0, #1
 8007c06:	e7a5      	b.n	8007b54 <_svfiprintf_r+0xd4>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	3401      	adds	r4, #1
 8007c0c:	9305      	str	r3, [sp, #20]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	f04f 0c0a 	mov.w	ip, #10
 8007c14:	4620      	mov	r0, r4
 8007c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c1a:	3a30      	subs	r2, #48	; 0x30
 8007c1c:	2a09      	cmp	r2, #9
 8007c1e:	d903      	bls.n	8007c28 <_svfiprintf_r+0x1a8>
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0c5      	beq.n	8007bb0 <_svfiprintf_r+0x130>
 8007c24:	9105      	str	r1, [sp, #20]
 8007c26:	e7c3      	b.n	8007bb0 <_svfiprintf_r+0x130>
 8007c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e7f0      	b.n	8007c14 <_svfiprintf_r+0x194>
 8007c32:	ab03      	add	r3, sp, #12
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	462a      	mov	r2, r5
 8007c38:	4b0f      	ldr	r3, [pc, #60]	; (8007c78 <_svfiprintf_r+0x1f8>)
 8007c3a:	a904      	add	r1, sp, #16
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	f3af 8000 	nop.w
 8007c42:	1c42      	adds	r2, r0, #1
 8007c44:	4606      	mov	r6, r0
 8007c46:	d1d6      	bne.n	8007bf6 <_svfiprintf_r+0x176>
 8007c48:	89ab      	ldrh	r3, [r5, #12]
 8007c4a:	065b      	lsls	r3, r3, #25
 8007c4c:	f53f af2c 	bmi.w	8007aa8 <_svfiprintf_r+0x28>
 8007c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c52:	b01d      	add	sp, #116	; 0x74
 8007c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c58:	ab03      	add	r3, sp, #12
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <_svfiprintf_r+0x1f8>)
 8007c60:	a904      	add	r1, sp, #16
 8007c62:	4638      	mov	r0, r7
 8007c64:	f000 f93c 	bl	8007ee0 <_printf_i>
 8007c68:	e7eb      	b.n	8007c42 <_svfiprintf_r+0x1c2>
 8007c6a:	bf00      	nop
 8007c6c:	0800c5c4 	.word	0x0800c5c4
 8007c70:	0800c5ce 	.word	0x0800c5ce
 8007c74:	00000000 	.word	0x00000000
 8007c78:	0800b211 	.word	0x0800b211
 8007c7c:	0800c5ca 	.word	0x0800c5ca

08007c80 <_vfiprintf_r>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	460d      	mov	r5, r1
 8007c86:	b09d      	sub	sp, #116	; 0x74
 8007c88:	4614      	mov	r4, r2
 8007c8a:	4698      	mov	r8, r3
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	b118      	cbz	r0, 8007c98 <_vfiprintf_r+0x18>
 8007c90:	6983      	ldr	r3, [r0, #24]
 8007c92:	b90b      	cbnz	r3, 8007c98 <_vfiprintf_r+0x18>
 8007c94:	f000 fc0e 	bl	80084b4 <__sinit>
 8007c98:	4b89      	ldr	r3, [pc, #548]	; (8007ec0 <_vfiprintf_r+0x240>)
 8007c9a:	429d      	cmp	r5, r3
 8007c9c:	d11b      	bne.n	8007cd6 <_vfiprintf_r+0x56>
 8007c9e:	6875      	ldr	r5, [r6, #4]
 8007ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ca2:	07d9      	lsls	r1, r3, #31
 8007ca4:	d405      	bmi.n	8007cb2 <_vfiprintf_r+0x32>
 8007ca6:	89ab      	ldrh	r3, [r5, #12]
 8007ca8:	059a      	lsls	r2, r3, #22
 8007caa:	d402      	bmi.n	8007cb2 <_vfiprintf_r+0x32>
 8007cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cae:	f000 fe3c 	bl	800892a <__retarget_lock_acquire_recursive>
 8007cb2:	89ab      	ldrh	r3, [r5, #12]
 8007cb4:	071b      	lsls	r3, r3, #28
 8007cb6:	d501      	bpl.n	8007cbc <_vfiprintf_r+0x3c>
 8007cb8:	692b      	ldr	r3, [r5, #16]
 8007cba:	b9eb      	cbnz	r3, 8007cf8 <_vfiprintf_r+0x78>
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f000 fa86 	bl	80081d0 <__swsetup_r>
 8007cc4:	b1c0      	cbz	r0, 8007cf8 <_vfiprintf_r+0x78>
 8007cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cc8:	07dc      	lsls	r4, r3, #31
 8007cca:	d50e      	bpl.n	8007cea <_vfiprintf_r+0x6a>
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cd0:	b01d      	add	sp, #116	; 0x74
 8007cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd6:	4b7b      	ldr	r3, [pc, #492]	; (8007ec4 <_vfiprintf_r+0x244>)
 8007cd8:	429d      	cmp	r5, r3
 8007cda:	d101      	bne.n	8007ce0 <_vfiprintf_r+0x60>
 8007cdc:	68b5      	ldr	r5, [r6, #8]
 8007cde:	e7df      	b.n	8007ca0 <_vfiprintf_r+0x20>
 8007ce0:	4b79      	ldr	r3, [pc, #484]	; (8007ec8 <_vfiprintf_r+0x248>)
 8007ce2:	429d      	cmp	r5, r3
 8007ce4:	bf08      	it	eq
 8007ce6:	68f5      	ldreq	r5, [r6, #12]
 8007ce8:	e7da      	b.n	8007ca0 <_vfiprintf_r+0x20>
 8007cea:	89ab      	ldrh	r3, [r5, #12]
 8007cec:	0598      	lsls	r0, r3, #22
 8007cee:	d4ed      	bmi.n	8007ccc <_vfiprintf_r+0x4c>
 8007cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cf2:	f000 fe22 	bl	800893a <__retarget_lock_release_recursive>
 8007cf6:	e7e9      	b.n	8007ccc <_vfiprintf_r+0x4c>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007cfc:	2320      	movs	r3, #32
 8007cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d02:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d06:	2330      	movs	r3, #48	; 0x30
 8007d08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ecc <_vfiprintf_r+0x24c>
 8007d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d10:	f04f 0901 	mov.w	r9, #1
 8007d14:	4623      	mov	r3, r4
 8007d16:	469a      	mov	sl, r3
 8007d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d1c:	b10a      	cbz	r2, 8007d22 <_vfiprintf_r+0xa2>
 8007d1e:	2a25      	cmp	r2, #37	; 0x25
 8007d20:	d1f9      	bne.n	8007d16 <_vfiprintf_r+0x96>
 8007d22:	ebba 0b04 	subs.w	fp, sl, r4
 8007d26:	d00b      	beq.n	8007d40 <_vfiprintf_r+0xc0>
 8007d28:	465b      	mov	r3, fp
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f003 fae0 	bl	800b2f4 <__sfputs_r>
 8007d34:	3001      	adds	r0, #1
 8007d36:	f000 80aa 	beq.w	8007e8e <_vfiprintf_r+0x20e>
 8007d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d3c:	445a      	add	r2, fp
 8007d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d40:	f89a 3000 	ldrb.w	r3, [sl]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 80a2 	beq.w	8007e8e <_vfiprintf_r+0x20e>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d54:	f10a 0a01 	add.w	sl, sl, #1
 8007d58:	9304      	str	r3, [sp, #16]
 8007d5a:	9307      	str	r3, [sp, #28]
 8007d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d60:	931a      	str	r3, [sp, #104]	; 0x68
 8007d62:	4654      	mov	r4, sl
 8007d64:	2205      	movs	r2, #5
 8007d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6a:	4858      	ldr	r0, [pc, #352]	; (8007ecc <_vfiprintf_r+0x24c>)
 8007d6c:	f7f8 fa18 	bl	80001a0 <memchr>
 8007d70:	9a04      	ldr	r2, [sp, #16]
 8007d72:	b9d8      	cbnz	r0, 8007dac <_vfiprintf_r+0x12c>
 8007d74:	06d1      	lsls	r1, r2, #27
 8007d76:	bf44      	itt	mi
 8007d78:	2320      	movmi	r3, #32
 8007d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d7e:	0713      	lsls	r3, r2, #28
 8007d80:	bf44      	itt	mi
 8007d82:	232b      	movmi	r3, #43	; 0x2b
 8007d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d88:	f89a 3000 	ldrb.w	r3, [sl]
 8007d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d8e:	d015      	beq.n	8007dbc <_vfiprintf_r+0x13c>
 8007d90:	9a07      	ldr	r2, [sp, #28]
 8007d92:	4654      	mov	r4, sl
 8007d94:	2000      	movs	r0, #0
 8007d96:	f04f 0c0a 	mov.w	ip, #10
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007da0:	3b30      	subs	r3, #48	; 0x30
 8007da2:	2b09      	cmp	r3, #9
 8007da4:	d94e      	bls.n	8007e44 <_vfiprintf_r+0x1c4>
 8007da6:	b1b0      	cbz	r0, 8007dd6 <_vfiprintf_r+0x156>
 8007da8:	9207      	str	r2, [sp, #28]
 8007daa:	e014      	b.n	8007dd6 <_vfiprintf_r+0x156>
 8007dac:	eba0 0308 	sub.w	r3, r0, r8
 8007db0:	fa09 f303 	lsl.w	r3, r9, r3
 8007db4:	4313      	orrs	r3, r2
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	46a2      	mov	sl, r4
 8007dba:	e7d2      	b.n	8007d62 <_vfiprintf_r+0xe2>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	1d19      	adds	r1, r3, #4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	9103      	str	r1, [sp, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bfbb      	ittet	lt
 8007dc8:	425b      	neglt	r3, r3
 8007dca:	f042 0202 	orrlt.w	r2, r2, #2
 8007dce:	9307      	strge	r3, [sp, #28]
 8007dd0:	9307      	strlt	r3, [sp, #28]
 8007dd2:	bfb8      	it	lt
 8007dd4:	9204      	strlt	r2, [sp, #16]
 8007dd6:	7823      	ldrb	r3, [r4, #0]
 8007dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8007dda:	d10c      	bne.n	8007df6 <_vfiprintf_r+0x176>
 8007ddc:	7863      	ldrb	r3, [r4, #1]
 8007dde:	2b2a      	cmp	r3, #42	; 0x2a
 8007de0:	d135      	bne.n	8007e4e <_vfiprintf_r+0x1ce>
 8007de2:	9b03      	ldr	r3, [sp, #12]
 8007de4:	1d1a      	adds	r2, r3, #4
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	9203      	str	r2, [sp, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bfb8      	it	lt
 8007dee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007df2:	3402      	adds	r4, #2
 8007df4:	9305      	str	r3, [sp, #20]
 8007df6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007edc <_vfiprintf_r+0x25c>
 8007dfa:	7821      	ldrb	r1, [r4, #0]
 8007dfc:	2203      	movs	r2, #3
 8007dfe:	4650      	mov	r0, sl
 8007e00:	f7f8 f9ce 	bl	80001a0 <memchr>
 8007e04:	b140      	cbz	r0, 8007e18 <_vfiprintf_r+0x198>
 8007e06:	2340      	movs	r3, #64	; 0x40
 8007e08:	eba0 000a 	sub.w	r0, r0, sl
 8007e0c:	fa03 f000 	lsl.w	r0, r3, r0
 8007e10:	9b04      	ldr	r3, [sp, #16]
 8007e12:	4303      	orrs	r3, r0
 8007e14:	3401      	adds	r4, #1
 8007e16:	9304      	str	r3, [sp, #16]
 8007e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1c:	482c      	ldr	r0, [pc, #176]	; (8007ed0 <_vfiprintf_r+0x250>)
 8007e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e22:	2206      	movs	r2, #6
 8007e24:	f7f8 f9bc 	bl	80001a0 <memchr>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d03f      	beq.n	8007eac <_vfiprintf_r+0x22c>
 8007e2c:	4b29      	ldr	r3, [pc, #164]	; (8007ed4 <_vfiprintf_r+0x254>)
 8007e2e:	bb1b      	cbnz	r3, 8007e78 <_vfiprintf_r+0x1f8>
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	3307      	adds	r3, #7
 8007e34:	f023 0307 	bic.w	r3, r3, #7
 8007e38:	3308      	adds	r3, #8
 8007e3a:	9303      	str	r3, [sp, #12]
 8007e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3e:	443b      	add	r3, r7
 8007e40:	9309      	str	r3, [sp, #36]	; 0x24
 8007e42:	e767      	b.n	8007d14 <_vfiprintf_r+0x94>
 8007e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e48:	460c      	mov	r4, r1
 8007e4a:	2001      	movs	r0, #1
 8007e4c:	e7a5      	b.n	8007d9a <_vfiprintf_r+0x11a>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	3401      	adds	r4, #1
 8007e52:	9305      	str	r3, [sp, #20]
 8007e54:	4619      	mov	r1, r3
 8007e56:	f04f 0c0a 	mov.w	ip, #10
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e60:	3a30      	subs	r2, #48	; 0x30
 8007e62:	2a09      	cmp	r2, #9
 8007e64:	d903      	bls.n	8007e6e <_vfiprintf_r+0x1ee>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0c5      	beq.n	8007df6 <_vfiprintf_r+0x176>
 8007e6a:	9105      	str	r1, [sp, #20]
 8007e6c:	e7c3      	b.n	8007df6 <_vfiprintf_r+0x176>
 8007e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e72:	4604      	mov	r4, r0
 8007e74:	2301      	movs	r3, #1
 8007e76:	e7f0      	b.n	8007e5a <_vfiprintf_r+0x1da>
 8007e78:	ab03      	add	r3, sp, #12
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	4b16      	ldr	r3, [pc, #88]	; (8007ed8 <_vfiprintf_r+0x258>)
 8007e80:	a904      	add	r1, sp, #16
 8007e82:	4630      	mov	r0, r6
 8007e84:	f3af 8000 	nop.w
 8007e88:	4607      	mov	r7, r0
 8007e8a:	1c78      	adds	r0, r7, #1
 8007e8c:	d1d6      	bne.n	8007e3c <_vfiprintf_r+0x1bc>
 8007e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e90:	07d9      	lsls	r1, r3, #31
 8007e92:	d405      	bmi.n	8007ea0 <_vfiprintf_r+0x220>
 8007e94:	89ab      	ldrh	r3, [r5, #12]
 8007e96:	059a      	lsls	r2, r3, #22
 8007e98:	d402      	bmi.n	8007ea0 <_vfiprintf_r+0x220>
 8007e9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e9c:	f000 fd4d 	bl	800893a <__retarget_lock_release_recursive>
 8007ea0:	89ab      	ldrh	r3, [r5, #12]
 8007ea2:	065b      	lsls	r3, r3, #25
 8007ea4:	f53f af12 	bmi.w	8007ccc <_vfiprintf_r+0x4c>
 8007ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eaa:	e711      	b.n	8007cd0 <_vfiprintf_r+0x50>
 8007eac:	ab03      	add	r3, sp, #12
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	462a      	mov	r2, r5
 8007eb2:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <_vfiprintf_r+0x258>)
 8007eb4:	a904      	add	r1, sp, #16
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f000 f812 	bl	8007ee0 <_printf_i>
 8007ebc:	e7e4      	b.n	8007e88 <_vfiprintf_r+0x208>
 8007ebe:	bf00      	nop
 8007ec0:	0800c3d4 	.word	0x0800c3d4
 8007ec4:	0800c3f4 	.word	0x0800c3f4
 8007ec8:	0800c3b4 	.word	0x0800c3b4
 8007ecc:	0800c5c4 	.word	0x0800c5c4
 8007ed0:	0800c5ce 	.word	0x0800c5ce
 8007ed4:	00000000 	.word	0x00000000
 8007ed8:	0800b2f5 	.word	0x0800b2f5
 8007edc:	0800c5ca 	.word	0x0800c5ca

08007ee0 <_printf_i>:
 8007ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	7e0f      	ldrb	r7, [r1, #24]
 8007ee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ee8:	2f78      	cmp	r7, #120	; 0x78
 8007eea:	4691      	mov	r9, r2
 8007eec:	4680      	mov	r8, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	469a      	mov	sl, r3
 8007ef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ef6:	d807      	bhi.n	8007f08 <_printf_i+0x28>
 8007ef8:	2f62      	cmp	r7, #98	; 0x62
 8007efa:	d80a      	bhi.n	8007f12 <_printf_i+0x32>
 8007efc:	2f00      	cmp	r7, #0
 8007efe:	f000 80d8 	beq.w	80080b2 <_printf_i+0x1d2>
 8007f02:	2f58      	cmp	r7, #88	; 0x58
 8007f04:	f000 80a3 	beq.w	800804e <_printf_i+0x16e>
 8007f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f10:	e03a      	b.n	8007f88 <_printf_i+0xa8>
 8007f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f16:	2b15      	cmp	r3, #21
 8007f18:	d8f6      	bhi.n	8007f08 <_printf_i+0x28>
 8007f1a:	a101      	add	r1, pc, #4	; (adr r1, 8007f20 <_printf_i+0x40>)
 8007f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f20:	08007f79 	.word	0x08007f79
 8007f24:	08007f8d 	.word	0x08007f8d
 8007f28:	08007f09 	.word	0x08007f09
 8007f2c:	08007f09 	.word	0x08007f09
 8007f30:	08007f09 	.word	0x08007f09
 8007f34:	08007f09 	.word	0x08007f09
 8007f38:	08007f8d 	.word	0x08007f8d
 8007f3c:	08007f09 	.word	0x08007f09
 8007f40:	08007f09 	.word	0x08007f09
 8007f44:	08007f09 	.word	0x08007f09
 8007f48:	08007f09 	.word	0x08007f09
 8007f4c:	08008099 	.word	0x08008099
 8007f50:	08007fbd 	.word	0x08007fbd
 8007f54:	0800807b 	.word	0x0800807b
 8007f58:	08007f09 	.word	0x08007f09
 8007f5c:	08007f09 	.word	0x08007f09
 8007f60:	080080bb 	.word	0x080080bb
 8007f64:	08007f09 	.word	0x08007f09
 8007f68:	08007fbd 	.word	0x08007fbd
 8007f6c:	08007f09 	.word	0x08007f09
 8007f70:	08007f09 	.word	0x08007f09
 8007f74:	08008083 	.word	0x08008083
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	1d1a      	adds	r2, r3, #4
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	602a      	str	r2, [r5, #0]
 8007f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e0a3      	b.n	80080d4 <_printf_i+0x1f4>
 8007f8c:	6820      	ldr	r0, [r4, #0]
 8007f8e:	6829      	ldr	r1, [r5, #0]
 8007f90:	0606      	lsls	r6, r0, #24
 8007f92:	f101 0304 	add.w	r3, r1, #4
 8007f96:	d50a      	bpl.n	8007fae <_printf_i+0xce>
 8007f98:	680e      	ldr	r6, [r1, #0]
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	2e00      	cmp	r6, #0
 8007f9e:	da03      	bge.n	8007fa8 <_printf_i+0xc8>
 8007fa0:	232d      	movs	r3, #45	; 0x2d
 8007fa2:	4276      	negs	r6, r6
 8007fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa8:	485e      	ldr	r0, [pc, #376]	; (8008124 <_printf_i+0x244>)
 8007faa:	230a      	movs	r3, #10
 8007fac:	e019      	b.n	8007fe2 <_printf_i+0x102>
 8007fae:	680e      	ldr	r6, [r1, #0]
 8007fb0:	602b      	str	r3, [r5, #0]
 8007fb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fb6:	bf18      	it	ne
 8007fb8:	b236      	sxthne	r6, r6
 8007fba:	e7ef      	b.n	8007f9c <_printf_i+0xbc>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	6820      	ldr	r0, [r4, #0]
 8007fc0:	1d19      	adds	r1, r3, #4
 8007fc2:	6029      	str	r1, [r5, #0]
 8007fc4:	0601      	lsls	r1, r0, #24
 8007fc6:	d501      	bpl.n	8007fcc <_printf_i+0xec>
 8007fc8:	681e      	ldr	r6, [r3, #0]
 8007fca:	e002      	b.n	8007fd2 <_printf_i+0xf2>
 8007fcc:	0646      	lsls	r6, r0, #25
 8007fce:	d5fb      	bpl.n	8007fc8 <_printf_i+0xe8>
 8007fd0:	881e      	ldrh	r6, [r3, #0]
 8007fd2:	4854      	ldr	r0, [pc, #336]	; (8008124 <_printf_i+0x244>)
 8007fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8007fd6:	bf0c      	ite	eq
 8007fd8:	2308      	moveq	r3, #8
 8007fda:	230a      	movne	r3, #10
 8007fdc:	2100      	movs	r1, #0
 8007fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fe2:	6865      	ldr	r5, [r4, #4]
 8007fe4:	60a5      	str	r5, [r4, #8]
 8007fe6:	2d00      	cmp	r5, #0
 8007fe8:	bfa2      	ittt	ge
 8007fea:	6821      	ldrge	r1, [r4, #0]
 8007fec:	f021 0104 	bicge.w	r1, r1, #4
 8007ff0:	6021      	strge	r1, [r4, #0]
 8007ff2:	b90e      	cbnz	r6, 8007ff8 <_printf_i+0x118>
 8007ff4:	2d00      	cmp	r5, #0
 8007ff6:	d04d      	beq.n	8008094 <_printf_i+0x1b4>
 8007ff8:	4615      	mov	r5, r2
 8007ffa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ffe:	fb03 6711 	mls	r7, r3, r1, r6
 8008002:	5dc7      	ldrb	r7, [r0, r7]
 8008004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008008:	4637      	mov	r7, r6
 800800a:	42bb      	cmp	r3, r7
 800800c:	460e      	mov	r6, r1
 800800e:	d9f4      	bls.n	8007ffa <_printf_i+0x11a>
 8008010:	2b08      	cmp	r3, #8
 8008012:	d10b      	bne.n	800802c <_printf_i+0x14c>
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	07de      	lsls	r6, r3, #31
 8008018:	d508      	bpl.n	800802c <_printf_i+0x14c>
 800801a:	6923      	ldr	r3, [r4, #16]
 800801c:	6861      	ldr	r1, [r4, #4]
 800801e:	4299      	cmp	r1, r3
 8008020:	bfde      	ittt	le
 8008022:	2330      	movle	r3, #48	; 0x30
 8008024:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008028:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800802c:	1b52      	subs	r2, r2, r5
 800802e:	6122      	str	r2, [r4, #16]
 8008030:	f8cd a000 	str.w	sl, [sp]
 8008034:	464b      	mov	r3, r9
 8008036:	aa03      	add	r2, sp, #12
 8008038:	4621      	mov	r1, r4
 800803a:	4640      	mov	r0, r8
 800803c:	f003 f96c 	bl	800b318 <_printf_common>
 8008040:	3001      	adds	r0, #1
 8008042:	d14c      	bne.n	80080de <_printf_i+0x1fe>
 8008044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008048:	b004      	add	sp, #16
 800804a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804e:	4835      	ldr	r0, [pc, #212]	; (8008124 <_printf_i+0x244>)
 8008050:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008054:	6829      	ldr	r1, [r5, #0]
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	f851 6b04 	ldr.w	r6, [r1], #4
 800805c:	6029      	str	r1, [r5, #0]
 800805e:	061d      	lsls	r5, r3, #24
 8008060:	d514      	bpl.n	800808c <_printf_i+0x1ac>
 8008062:	07df      	lsls	r7, r3, #31
 8008064:	bf44      	itt	mi
 8008066:	f043 0320 	orrmi.w	r3, r3, #32
 800806a:	6023      	strmi	r3, [r4, #0]
 800806c:	b91e      	cbnz	r6, 8008076 <_printf_i+0x196>
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	f023 0320 	bic.w	r3, r3, #32
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	2310      	movs	r3, #16
 8008078:	e7b0      	b.n	8007fdc <_printf_i+0xfc>
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	f043 0320 	orr.w	r3, r3, #32
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	2378      	movs	r3, #120	; 0x78
 8008084:	4828      	ldr	r0, [pc, #160]	; (8008128 <_printf_i+0x248>)
 8008086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800808a:	e7e3      	b.n	8008054 <_printf_i+0x174>
 800808c:	0659      	lsls	r1, r3, #25
 800808e:	bf48      	it	mi
 8008090:	b2b6      	uxthmi	r6, r6
 8008092:	e7e6      	b.n	8008062 <_printf_i+0x182>
 8008094:	4615      	mov	r5, r2
 8008096:	e7bb      	b.n	8008010 <_printf_i+0x130>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	6826      	ldr	r6, [r4, #0]
 800809c:	6961      	ldr	r1, [r4, #20]
 800809e:	1d18      	adds	r0, r3, #4
 80080a0:	6028      	str	r0, [r5, #0]
 80080a2:	0635      	lsls	r5, r6, #24
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	d501      	bpl.n	80080ac <_printf_i+0x1cc>
 80080a8:	6019      	str	r1, [r3, #0]
 80080aa:	e002      	b.n	80080b2 <_printf_i+0x1d2>
 80080ac:	0670      	lsls	r0, r6, #25
 80080ae:	d5fb      	bpl.n	80080a8 <_printf_i+0x1c8>
 80080b0:	8019      	strh	r1, [r3, #0]
 80080b2:	2300      	movs	r3, #0
 80080b4:	6123      	str	r3, [r4, #16]
 80080b6:	4615      	mov	r5, r2
 80080b8:	e7ba      	b.n	8008030 <_printf_i+0x150>
 80080ba:	682b      	ldr	r3, [r5, #0]
 80080bc:	1d1a      	adds	r2, r3, #4
 80080be:	602a      	str	r2, [r5, #0]
 80080c0:	681d      	ldr	r5, [r3, #0]
 80080c2:	6862      	ldr	r2, [r4, #4]
 80080c4:	2100      	movs	r1, #0
 80080c6:	4628      	mov	r0, r5
 80080c8:	f7f8 f86a 	bl	80001a0 <memchr>
 80080cc:	b108      	cbz	r0, 80080d2 <_printf_i+0x1f2>
 80080ce:	1b40      	subs	r0, r0, r5
 80080d0:	6060      	str	r0, [r4, #4]
 80080d2:	6863      	ldr	r3, [r4, #4]
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	2300      	movs	r3, #0
 80080d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080dc:	e7a8      	b.n	8008030 <_printf_i+0x150>
 80080de:	6923      	ldr	r3, [r4, #16]
 80080e0:	462a      	mov	r2, r5
 80080e2:	4649      	mov	r1, r9
 80080e4:	4640      	mov	r0, r8
 80080e6:	47d0      	blx	sl
 80080e8:	3001      	adds	r0, #1
 80080ea:	d0ab      	beq.n	8008044 <_printf_i+0x164>
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	079b      	lsls	r3, r3, #30
 80080f0:	d413      	bmi.n	800811a <_printf_i+0x23a>
 80080f2:	68e0      	ldr	r0, [r4, #12]
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	4298      	cmp	r0, r3
 80080f8:	bfb8      	it	lt
 80080fa:	4618      	movlt	r0, r3
 80080fc:	e7a4      	b.n	8008048 <_printf_i+0x168>
 80080fe:	2301      	movs	r3, #1
 8008100:	4632      	mov	r2, r6
 8008102:	4649      	mov	r1, r9
 8008104:	4640      	mov	r0, r8
 8008106:	47d0      	blx	sl
 8008108:	3001      	adds	r0, #1
 800810a:	d09b      	beq.n	8008044 <_printf_i+0x164>
 800810c:	3501      	adds	r5, #1
 800810e:	68e3      	ldr	r3, [r4, #12]
 8008110:	9903      	ldr	r1, [sp, #12]
 8008112:	1a5b      	subs	r3, r3, r1
 8008114:	42ab      	cmp	r3, r5
 8008116:	dcf2      	bgt.n	80080fe <_printf_i+0x21e>
 8008118:	e7eb      	b.n	80080f2 <_printf_i+0x212>
 800811a:	2500      	movs	r5, #0
 800811c:	f104 0619 	add.w	r6, r4, #25
 8008120:	e7f5      	b.n	800810e <_printf_i+0x22e>
 8008122:	bf00      	nop
 8008124:	0800c5d5 	.word	0x0800c5d5
 8008128:	0800c5e6 	.word	0x0800c5e6

0800812c <__swbuf_r>:
 800812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812e:	460e      	mov	r6, r1
 8008130:	4614      	mov	r4, r2
 8008132:	4605      	mov	r5, r0
 8008134:	b118      	cbz	r0, 800813e <__swbuf_r+0x12>
 8008136:	6983      	ldr	r3, [r0, #24]
 8008138:	b90b      	cbnz	r3, 800813e <__swbuf_r+0x12>
 800813a:	f000 f9bb 	bl	80084b4 <__sinit>
 800813e:	4b21      	ldr	r3, [pc, #132]	; (80081c4 <__swbuf_r+0x98>)
 8008140:	429c      	cmp	r4, r3
 8008142:	d12b      	bne.n	800819c <__swbuf_r+0x70>
 8008144:	686c      	ldr	r4, [r5, #4]
 8008146:	69a3      	ldr	r3, [r4, #24]
 8008148:	60a3      	str	r3, [r4, #8]
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	071a      	lsls	r2, r3, #28
 800814e:	d52f      	bpl.n	80081b0 <__swbuf_r+0x84>
 8008150:	6923      	ldr	r3, [r4, #16]
 8008152:	b36b      	cbz	r3, 80081b0 <__swbuf_r+0x84>
 8008154:	6923      	ldr	r3, [r4, #16]
 8008156:	6820      	ldr	r0, [r4, #0]
 8008158:	1ac0      	subs	r0, r0, r3
 800815a:	6963      	ldr	r3, [r4, #20]
 800815c:	b2f6      	uxtb	r6, r6
 800815e:	4283      	cmp	r3, r0
 8008160:	4637      	mov	r7, r6
 8008162:	dc04      	bgt.n	800816e <__swbuf_r+0x42>
 8008164:	4621      	mov	r1, r4
 8008166:	4628      	mov	r0, r5
 8008168:	f000 f926 	bl	80083b8 <_fflush_r>
 800816c:	bb30      	cbnz	r0, 80081bc <__swbuf_r+0x90>
 800816e:	68a3      	ldr	r3, [r4, #8]
 8008170:	3b01      	subs	r3, #1
 8008172:	60a3      	str	r3, [r4, #8]
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	6022      	str	r2, [r4, #0]
 800817a:	701e      	strb	r6, [r3, #0]
 800817c:	6963      	ldr	r3, [r4, #20]
 800817e:	3001      	adds	r0, #1
 8008180:	4283      	cmp	r3, r0
 8008182:	d004      	beq.n	800818e <__swbuf_r+0x62>
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	07db      	lsls	r3, r3, #31
 8008188:	d506      	bpl.n	8008198 <__swbuf_r+0x6c>
 800818a:	2e0a      	cmp	r6, #10
 800818c:	d104      	bne.n	8008198 <__swbuf_r+0x6c>
 800818e:	4621      	mov	r1, r4
 8008190:	4628      	mov	r0, r5
 8008192:	f000 f911 	bl	80083b8 <_fflush_r>
 8008196:	b988      	cbnz	r0, 80081bc <__swbuf_r+0x90>
 8008198:	4638      	mov	r0, r7
 800819a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800819c:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <__swbuf_r+0x9c>)
 800819e:	429c      	cmp	r4, r3
 80081a0:	d101      	bne.n	80081a6 <__swbuf_r+0x7a>
 80081a2:	68ac      	ldr	r4, [r5, #8]
 80081a4:	e7cf      	b.n	8008146 <__swbuf_r+0x1a>
 80081a6:	4b09      	ldr	r3, [pc, #36]	; (80081cc <__swbuf_r+0xa0>)
 80081a8:	429c      	cmp	r4, r3
 80081aa:	bf08      	it	eq
 80081ac:	68ec      	ldreq	r4, [r5, #12]
 80081ae:	e7ca      	b.n	8008146 <__swbuf_r+0x1a>
 80081b0:	4621      	mov	r1, r4
 80081b2:	4628      	mov	r0, r5
 80081b4:	f000 f80c 	bl	80081d0 <__swsetup_r>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d0cb      	beq.n	8008154 <__swbuf_r+0x28>
 80081bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80081c0:	e7ea      	b.n	8008198 <__swbuf_r+0x6c>
 80081c2:	bf00      	nop
 80081c4:	0800c3d4 	.word	0x0800c3d4
 80081c8:	0800c3f4 	.word	0x0800c3f4
 80081cc:	0800c3b4 	.word	0x0800c3b4

080081d0 <__swsetup_r>:
 80081d0:	4b32      	ldr	r3, [pc, #200]	; (800829c <__swsetup_r+0xcc>)
 80081d2:	b570      	push	{r4, r5, r6, lr}
 80081d4:	681d      	ldr	r5, [r3, #0]
 80081d6:	4606      	mov	r6, r0
 80081d8:	460c      	mov	r4, r1
 80081da:	b125      	cbz	r5, 80081e6 <__swsetup_r+0x16>
 80081dc:	69ab      	ldr	r3, [r5, #24]
 80081de:	b913      	cbnz	r3, 80081e6 <__swsetup_r+0x16>
 80081e0:	4628      	mov	r0, r5
 80081e2:	f000 f967 	bl	80084b4 <__sinit>
 80081e6:	4b2e      	ldr	r3, [pc, #184]	; (80082a0 <__swsetup_r+0xd0>)
 80081e8:	429c      	cmp	r4, r3
 80081ea:	d10f      	bne.n	800820c <__swsetup_r+0x3c>
 80081ec:	686c      	ldr	r4, [r5, #4]
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081f4:	0719      	lsls	r1, r3, #28
 80081f6:	d42c      	bmi.n	8008252 <__swsetup_r+0x82>
 80081f8:	06dd      	lsls	r5, r3, #27
 80081fa:	d411      	bmi.n	8008220 <__swsetup_r+0x50>
 80081fc:	2309      	movs	r3, #9
 80081fe:	6033      	str	r3, [r6, #0]
 8008200:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008204:	81a3      	strh	r3, [r4, #12]
 8008206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800820a:	e03e      	b.n	800828a <__swsetup_r+0xba>
 800820c:	4b25      	ldr	r3, [pc, #148]	; (80082a4 <__swsetup_r+0xd4>)
 800820e:	429c      	cmp	r4, r3
 8008210:	d101      	bne.n	8008216 <__swsetup_r+0x46>
 8008212:	68ac      	ldr	r4, [r5, #8]
 8008214:	e7eb      	b.n	80081ee <__swsetup_r+0x1e>
 8008216:	4b24      	ldr	r3, [pc, #144]	; (80082a8 <__swsetup_r+0xd8>)
 8008218:	429c      	cmp	r4, r3
 800821a:	bf08      	it	eq
 800821c:	68ec      	ldreq	r4, [r5, #12]
 800821e:	e7e6      	b.n	80081ee <__swsetup_r+0x1e>
 8008220:	0758      	lsls	r0, r3, #29
 8008222:	d512      	bpl.n	800824a <__swsetup_r+0x7a>
 8008224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008226:	b141      	cbz	r1, 800823a <__swsetup_r+0x6a>
 8008228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800822c:	4299      	cmp	r1, r3
 800822e:	d002      	beq.n	8008236 <__swsetup_r+0x66>
 8008230:	4630      	mov	r0, r6
 8008232:	f7ff fa45 	bl	80076c0 <_free_r>
 8008236:	2300      	movs	r3, #0
 8008238:	6363      	str	r3, [r4, #52]	; 0x34
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	2300      	movs	r3, #0
 8008244:	6063      	str	r3, [r4, #4]
 8008246:	6923      	ldr	r3, [r4, #16]
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	f043 0308 	orr.w	r3, r3, #8
 8008250:	81a3      	strh	r3, [r4, #12]
 8008252:	6923      	ldr	r3, [r4, #16]
 8008254:	b94b      	cbnz	r3, 800826a <__swsetup_r+0x9a>
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800825c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008260:	d003      	beq.n	800826a <__swsetup_r+0x9a>
 8008262:	4621      	mov	r1, r4
 8008264:	4630      	mov	r0, r6
 8008266:	f000 f9a3 	bl	80085b0 <__smakebuf_r>
 800826a:	89a0      	ldrh	r0, [r4, #12]
 800826c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008270:	f010 0301 	ands.w	r3, r0, #1
 8008274:	d00a      	beq.n	800828c <__swsetup_r+0xbc>
 8008276:	2300      	movs	r3, #0
 8008278:	60a3      	str	r3, [r4, #8]
 800827a:	6963      	ldr	r3, [r4, #20]
 800827c:	425b      	negs	r3, r3
 800827e:	61a3      	str	r3, [r4, #24]
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	b943      	cbnz	r3, 8008296 <__swsetup_r+0xc6>
 8008284:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008288:	d1ba      	bne.n	8008200 <__swsetup_r+0x30>
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	0781      	lsls	r1, r0, #30
 800828e:	bf58      	it	pl
 8008290:	6963      	ldrpl	r3, [r4, #20]
 8008292:	60a3      	str	r3, [r4, #8]
 8008294:	e7f4      	b.n	8008280 <__swsetup_r+0xb0>
 8008296:	2000      	movs	r0, #0
 8008298:	e7f7      	b.n	800828a <__swsetup_r+0xba>
 800829a:	bf00      	nop
 800829c:	20000330 	.word	0x20000330
 80082a0:	0800c3d4 	.word	0x0800c3d4
 80082a4:	0800c3f4 	.word	0x0800c3f4
 80082a8:	0800c3b4 	.word	0x0800c3b4

080082ac <__sflush_r>:
 80082ac:	898a      	ldrh	r2, [r1, #12]
 80082ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b2:	4605      	mov	r5, r0
 80082b4:	0710      	lsls	r0, r2, #28
 80082b6:	460c      	mov	r4, r1
 80082b8:	d458      	bmi.n	800836c <__sflush_r+0xc0>
 80082ba:	684b      	ldr	r3, [r1, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dc05      	bgt.n	80082cc <__sflush_r+0x20>
 80082c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	dc02      	bgt.n	80082cc <__sflush_r+0x20>
 80082c6:	2000      	movs	r0, #0
 80082c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	d0f9      	beq.n	80082c6 <__sflush_r+0x1a>
 80082d2:	2300      	movs	r3, #0
 80082d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082d8:	682f      	ldr	r7, [r5, #0]
 80082da:	602b      	str	r3, [r5, #0]
 80082dc:	d032      	beq.n	8008344 <__sflush_r+0x98>
 80082de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	075a      	lsls	r2, r3, #29
 80082e4:	d505      	bpl.n	80082f2 <__sflush_r+0x46>
 80082e6:	6863      	ldr	r3, [r4, #4]
 80082e8:	1ac0      	subs	r0, r0, r3
 80082ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082ec:	b10b      	cbz	r3, 80082f2 <__sflush_r+0x46>
 80082ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082f0:	1ac0      	subs	r0, r0, r3
 80082f2:	2300      	movs	r3, #0
 80082f4:	4602      	mov	r2, r0
 80082f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082f8:	6a21      	ldr	r1, [r4, #32]
 80082fa:	4628      	mov	r0, r5
 80082fc:	47b0      	blx	r6
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	d106      	bne.n	8008312 <__sflush_r+0x66>
 8008304:	6829      	ldr	r1, [r5, #0]
 8008306:	291d      	cmp	r1, #29
 8008308:	d82c      	bhi.n	8008364 <__sflush_r+0xb8>
 800830a:	4a2a      	ldr	r2, [pc, #168]	; (80083b4 <__sflush_r+0x108>)
 800830c:	40ca      	lsrs	r2, r1
 800830e:	07d6      	lsls	r6, r2, #31
 8008310:	d528      	bpl.n	8008364 <__sflush_r+0xb8>
 8008312:	2200      	movs	r2, #0
 8008314:	6062      	str	r2, [r4, #4]
 8008316:	04d9      	lsls	r1, r3, #19
 8008318:	6922      	ldr	r2, [r4, #16]
 800831a:	6022      	str	r2, [r4, #0]
 800831c:	d504      	bpl.n	8008328 <__sflush_r+0x7c>
 800831e:	1c42      	adds	r2, r0, #1
 8008320:	d101      	bne.n	8008326 <__sflush_r+0x7a>
 8008322:	682b      	ldr	r3, [r5, #0]
 8008324:	b903      	cbnz	r3, 8008328 <__sflush_r+0x7c>
 8008326:	6560      	str	r0, [r4, #84]	; 0x54
 8008328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800832a:	602f      	str	r7, [r5, #0]
 800832c:	2900      	cmp	r1, #0
 800832e:	d0ca      	beq.n	80082c6 <__sflush_r+0x1a>
 8008330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008334:	4299      	cmp	r1, r3
 8008336:	d002      	beq.n	800833e <__sflush_r+0x92>
 8008338:	4628      	mov	r0, r5
 800833a:	f7ff f9c1 	bl	80076c0 <_free_r>
 800833e:	2000      	movs	r0, #0
 8008340:	6360      	str	r0, [r4, #52]	; 0x34
 8008342:	e7c1      	b.n	80082c8 <__sflush_r+0x1c>
 8008344:	6a21      	ldr	r1, [r4, #32]
 8008346:	2301      	movs	r3, #1
 8008348:	4628      	mov	r0, r5
 800834a:	47b0      	blx	r6
 800834c:	1c41      	adds	r1, r0, #1
 800834e:	d1c7      	bne.n	80082e0 <__sflush_r+0x34>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0c4      	beq.n	80082e0 <__sflush_r+0x34>
 8008356:	2b1d      	cmp	r3, #29
 8008358:	d001      	beq.n	800835e <__sflush_r+0xb2>
 800835a:	2b16      	cmp	r3, #22
 800835c:	d101      	bne.n	8008362 <__sflush_r+0xb6>
 800835e:	602f      	str	r7, [r5, #0]
 8008360:	e7b1      	b.n	80082c6 <__sflush_r+0x1a>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008368:	81a3      	strh	r3, [r4, #12]
 800836a:	e7ad      	b.n	80082c8 <__sflush_r+0x1c>
 800836c:	690f      	ldr	r7, [r1, #16]
 800836e:	2f00      	cmp	r7, #0
 8008370:	d0a9      	beq.n	80082c6 <__sflush_r+0x1a>
 8008372:	0793      	lsls	r3, r2, #30
 8008374:	680e      	ldr	r6, [r1, #0]
 8008376:	bf08      	it	eq
 8008378:	694b      	ldreq	r3, [r1, #20]
 800837a:	600f      	str	r7, [r1, #0]
 800837c:	bf18      	it	ne
 800837e:	2300      	movne	r3, #0
 8008380:	eba6 0807 	sub.w	r8, r6, r7
 8008384:	608b      	str	r3, [r1, #8]
 8008386:	f1b8 0f00 	cmp.w	r8, #0
 800838a:	dd9c      	ble.n	80082c6 <__sflush_r+0x1a>
 800838c:	6a21      	ldr	r1, [r4, #32]
 800838e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008390:	4643      	mov	r3, r8
 8008392:	463a      	mov	r2, r7
 8008394:	4628      	mov	r0, r5
 8008396:	47b0      	blx	r6
 8008398:	2800      	cmp	r0, #0
 800839a:	dc06      	bgt.n	80083aa <__sflush_r+0xfe>
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a2:	81a3      	strh	r3, [r4, #12]
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083a8:	e78e      	b.n	80082c8 <__sflush_r+0x1c>
 80083aa:	4407      	add	r7, r0
 80083ac:	eba8 0800 	sub.w	r8, r8, r0
 80083b0:	e7e9      	b.n	8008386 <__sflush_r+0xda>
 80083b2:	bf00      	nop
 80083b4:	20400001 	.word	0x20400001

080083b8 <_fflush_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	690b      	ldr	r3, [r1, #16]
 80083bc:	4605      	mov	r5, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	b913      	cbnz	r3, 80083c8 <_fflush_r+0x10>
 80083c2:	2500      	movs	r5, #0
 80083c4:	4628      	mov	r0, r5
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	b118      	cbz	r0, 80083d2 <_fflush_r+0x1a>
 80083ca:	6983      	ldr	r3, [r0, #24]
 80083cc:	b90b      	cbnz	r3, 80083d2 <_fflush_r+0x1a>
 80083ce:	f000 f871 	bl	80084b4 <__sinit>
 80083d2:	4b14      	ldr	r3, [pc, #80]	; (8008424 <_fflush_r+0x6c>)
 80083d4:	429c      	cmp	r4, r3
 80083d6:	d11b      	bne.n	8008410 <_fflush_r+0x58>
 80083d8:	686c      	ldr	r4, [r5, #4]
 80083da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0ef      	beq.n	80083c2 <_fflush_r+0xa>
 80083e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083e4:	07d0      	lsls	r0, r2, #31
 80083e6:	d404      	bmi.n	80083f2 <_fflush_r+0x3a>
 80083e8:	0599      	lsls	r1, r3, #22
 80083ea:	d402      	bmi.n	80083f2 <_fflush_r+0x3a>
 80083ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ee:	f000 fa9c 	bl	800892a <__retarget_lock_acquire_recursive>
 80083f2:	4628      	mov	r0, r5
 80083f4:	4621      	mov	r1, r4
 80083f6:	f7ff ff59 	bl	80082ac <__sflush_r>
 80083fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083fc:	07da      	lsls	r2, r3, #31
 80083fe:	4605      	mov	r5, r0
 8008400:	d4e0      	bmi.n	80083c4 <_fflush_r+0xc>
 8008402:	89a3      	ldrh	r3, [r4, #12]
 8008404:	059b      	lsls	r3, r3, #22
 8008406:	d4dd      	bmi.n	80083c4 <_fflush_r+0xc>
 8008408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800840a:	f000 fa96 	bl	800893a <__retarget_lock_release_recursive>
 800840e:	e7d9      	b.n	80083c4 <_fflush_r+0xc>
 8008410:	4b05      	ldr	r3, [pc, #20]	; (8008428 <_fflush_r+0x70>)
 8008412:	429c      	cmp	r4, r3
 8008414:	d101      	bne.n	800841a <_fflush_r+0x62>
 8008416:	68ac      	ldr	r4, [r5, #8]
 8008418:	e7df      	b.n	80083da <_fflush_r+0x22>
 800841a:	4b04      	ldr	r3, [pc, #16]	; (800842c <_fflush_r+0x74>)
 800841c:	429c      	cmp	r4, r3
 800841e:	bf08      	it	eq
 8008420:	68ec      	ldreq	r4, [r5, #12]
 8008422:	e7da      	b.n	80083da <_fflush_r+0x22>
 8008424:	0800c3d4 	.word	0x0800c3d4
 8008428:	0800c3f4 	.word	0x0800c3f4
 800842c:	0800c3b4 	.word	0x0800c3b4

08008430 <std>:
 8008430:	2300      	movs	r3, #0
 8008432:	b510      	push	{r4, lr}
 8008434:	4604      	mov	r4, r0
 8008436:	e9c0 3300 	strd	r3, r3, [r0]
 800843a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800843e:	6083      	str	r3, [r0, #8]
 8008440:	8181      	strh	r1, [r0, #12]
 8008442:	6643      	str	r3, [r0, #100]	; 0x64
 8008444:	81c2      	strh	r2, [r0, #14]
 8008446:	6183      	str	r3, [r0, #24]
 8008448:	4619      	mov	r1, r3
 800844a:	2208      	movs	r2, #8
 800844c:	305c      	adds	r0, #92	; 0x5c
 800844e:	f002 fe6a 	bl	800b126 <memset>
 8008452:	4b05      	ldr	r3, [pc, #20]	; (8008468 <std+0x38>)
 8008454:	6263      	str	r3, [r4, #36]	; 0x24
 8008456:	4b05      	ldr	r3, [pc, #20]	; (800846c <std+0x3c>)
 8008458:	62a3      	str	r3, [r4, #40]	; 0x28
 800845a:	4b05      	ldr	r3, [pc, #20]	; (8008470 <std+0x40>)
 800845c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800845e:	4b05      	ldr	r3, [pc, #20]	; (8008474 <std+0x44>)
 8008460:	6224      	str	r4, [r4, #32]
 8008462:	6323      	str	r3, [r4, #48]	; 0x30
 8008464:	bd10      	pop	{r4, pc}
 8008466:	bf00      	nop
 8008468:	0800b589 	.word	0x0800b589
 800846c:	0800b5ab 	.word	0x0800b5ab
 8008470:	0800b5e3 	.word	0x0800b5e3
 8008474:	0800b607 	.word	0x0800b607

08008478 <_cleanup_r>:
 8008478:	4901      	ldr	r1, [pc, #4]	; (8008480 <_cleanup_r+0x8>)
 800847a:	f002 bfd7 	b.w	800b42c <_fwalk_reent>
 800847e:	bf00      	nop
 8008480:	080083b9 	.word	0x080083b9

08008484 <__sfp_lock_acquire>:
 8008484:	4801      	ldr	r0, [pc, #4]	; (800848c <__sfp_lock_acquire+0x8>)
 8008486:	f000 ba50 	b.w	800892a <__retarget_lock_acquire_recursive>
 800848a:	bf00      	nop
 800848c:	20000444 	.word	0x20000444

08008490 <__sfp_lock_release>:
 8008490:	4801      	ldr	r0, [pc, #4]	; (8008498 <__sfp_lock_release+0x8>)
 8008492:	f000 ba52 	b.w	800893a <__retarget_lock_release_recursive>
 8008496:	bf00      	nop
 8008498:	20000444 	.word	0x20000444

0800849c <__sinit_lock_acquire>:
 800849c:	4801      	ldr	r0, [pc, #4]	; (80084a4 <__sinit_lock_acquire+0x8>)
 800849e:	f000 ba44 	b.w	800892a <__retarget_lock_acquire_recursive>
 80084a2:	bf00      	nop
 80084a4:	20000458 	.word	0x20000458

080084a8 <__sinit_lock_release>:
 80084a8:	4801      	ldr	r0, [pc, #4]	; (80084b0 <__sinit_lock_release+0x8>)
 80084aa:	f000 ba46 	b.w	800893a <__retarget_lock_release_recursive>
 80084ae:	bf00      	nop
 80084b0:	20000458 	.word	0x20000458

080084b4 <__sinit>:
 80084b4:	b510      	push	{r4, lr}
 80084b6:	4604      	mov	r4, r0
 80084b8:	f7ff fff0 	bl	800849c <__sinit_lock_acquire>
 80084bc:	69a3      	ldr	r3, [r4, #24]
 80084be:	b11b      	cbz	r3, 80084c8 <__sinit+0x14>
 80084c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084c4:	f7ff bff0 	b.w	80084a8 <__sinit_lock_release>
 80084c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084cc:	6523      	str	r3, [r4, #80]	; 0x50
 80084ce:	4b13      	ldr	r3, [pc, #76]	; (800851c <__sinit+0x68>)
 80084d0:	4a13      	ldr	r2, [pc, #76]	; (8008520 <__sinit+0x6c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80084d6:	42a3      	cmp	r3, r4
 80084d8:	bf04      	itt	eq
 80084da:	2301      	moveq	r3, #1
 80084dc:	61a3      	streq	r3, [r4, #24]
 80084de:	4620      	mov	r0, r4
 80084e0:	f000 f820 	bl	8008524 <__sfp>
 80084e4:	6060      	str	r0, [r4, #4]
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 f81c 	bl	8008524 <__sfp>
 80084ec:	60a0      	str	r0, [r4, #8]
 80084ee:	4620      	mov	r0, r4
 80084f0:	f000 f818 	bl	8008524 <__sfp>
 80084f4:	2200      	movs	r2, #0
 80084f6:	60e0      	str	r0, [r4, #12]
 80084f8:	2104      	movs	r1, #4
 80084fa:	6860      	ldr	r0, [r4, #4]
 80084fc:	f7ff ff98 	bl	8008430 <std>
 8008500:	68a0      	ldr	r0, [r4, #8]
 8008502:	2201      	movs	r2, #1
 8008504:	2109      	movs	r1, #9
 8008506:	f7ff ff93 	bl	8008430 <std>
 800850a:	68e0      	ldr	r0, [r4, #12]
 800850c:	2202      	movs	r2, #2
 800850e:	2112      	movs	r1, #18
 8008510:	f7ff ff8e 	bl	8008430 <std>
 8008514:	2301      	movs	r3, #1
 8008516:	61a3      	str	r3, [r4, #24]
 8008518:	e7d2      	b.n	80084c0 <__sinit+0xc>
 800851a:	bf00      	nop
 800851c:	0800c3b0 	.word	0x0800c3b0
 8008520:	08008479 	.word	0x08008479

08008524 <__sfp>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	4607      	mov	r7, r0
 8008528:	f7ff ffac 	bl	8008484 <__sfp_lock_acquire>
 800852c:	4b1e      	ldr	r3, [pc, #120]	; (80085a8 <__sfp+0x84>)
 800852e:	681e      	ldr	r6, [r3, #0]
 8008530:	69b3      	ldr	r3, [r6, #24]
 8008532:	b913      	cbnz	r3, 800853a <__sfp+0x16>
 8008534:	4630      	mov	r0, r6
 8008536:	f7ff ffbd 	bl	80084b4 <__sinit>
 800853a:	3648      	adds	r6, #72	; 0x48
 800853c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008540:	3b01      	subs	r3, #1
 8008542:	d503      	bpl.n	800854c <__sfp+0x28>
 8008544:	6833      	ldr	r3, [r6, #0]
 8008546:	b30b      	cbz	r3, 800858c <__sfp+0x68>
 8008548:	6836      	ldr	r6, [r6, #0]
 800854a:	e7f7      	b.n	800853c <__sfp+0x18>
 800854c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008550:	b9d5      	cbnz	r5, 8008588 <__sfp+0x64>
 8008552:	4b16      	ldr	r3, [pc, #88]	; (80085ac <__sfp+0x88>)
 8008554:	60e3      	str	r3, [r4, #12]
 8008556:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800855a:	6665      	str	r5, [r4, #100]	; 0x64
 800855c:	f000 f9dc 	bl	8008918 <__retarget_lock_init_recursive>
 8008560:	f7ff ff96 	bl	8008490 <__sfp_lock_release>
 8008564:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008568:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800856c:	6025      	str	r5, [r4, #0]
 800856e:	61a5      	str	r5, [r4, #24]
 8008570:	2208      	movs	r2, #8
 8008572:	4629      	mov	r1, r5
 8008574:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008578:	f002 fdd5 	bl	800b126 <memset>
 800857c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008580:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008584:	4620      	mov	r0, r4
 8008586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008588:	3468      	adds	r4, #104	; 0x68
 800858a:	e7d9      	b.n	8008540 <__sfp+0x1c>
 800858c:	2104      	movs	r1, #4
 800858e:	4638      	mov	r0, r7
 8008590:	f002 ff36 	bl	800b400 <__sfmoreglue>
 8008594:	4604      	mov	r4, r0
 8008596:	6030      	str	r0, [r6, #0]
 8008598:	2800      	cmp	r0, #0
 800859a:	d1d5      	bne.n	8008548 <__sfp+0x24>
 800859c:	f7ff ff78 	bl	8008490 <__sfp_lock_release>
 80085a0:	230c      	movs	r3, #12
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	e7ee      	b.n	8008584 <__sfp+0x60>
 80085a6:	bf00      	nop
 80085a8:	0800c3b0 	.word	0x0800c3b0
 80085ac:	ffff0001 	.word	0xffff0001

080085b0 <__smakebuf_r>:
 80085b0:	898b      	ldrh	r3, [r1, #12]
 80085b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085b4:	079d      	lsls	r5, r3, #30
 80085b6:	4606      	mov	r6, r0
 80085b8:	460c      	mov	r4, r1
 80085ba:	d507      	bpl.n	80085cc <__smakebuf_r+0x1c>
 80085bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	6123      	str	r3, [r4, #16]
 80085c4:	2301      	movs	r3, #1
 80085c6:	6163      	str	r3, [r4, #20]
 80085c8:	b002      	add	sp, #8
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	ab01      	add	r3, sp, #4
 80085ce:	466a      	mov	r2, sp
 80085d0:	f002 ff4b 	bl	800b46a <__swhatbuf_r>
 80085d4:	9900      	ldr	r1, [sp, #0]
 80085d6:	4605      	mov	r5, r0
 80085d8:	4630      	mov	r0, r6
 80085da:	f7ff f8bd 	bl	8007758 <_malloc_r>
 80085de:	b948      	cbnz	r0, 80085f4 <__smakebuf_r+0x44>
 80085e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085e4:	059a      	lsls	r2, r3, #22
 80085e6:	d4ef      	bmi.n	80085c8 <__smakebuf_r+0x18>
 80085e8:	f023 0303 	bic.w	r3, r3, #3
 80085ec:	f043 0302 	orr.w	r3, r3, #2
 80085f0:	81a3      	strh	r3, [r4, #12]
 80085f2:	e7e3      	b.n	80085bc <__smakebuf_r+0xc>
 80085f4:	4b0d      	ldr	r3, [pc, #52]	; (800862c <__smakebuf_r+0x7c>)
 80085f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80085f8:	89a3      	ldrh	r3, [r4, #12]
 80085fa:	6020      	str	r0, [r4, #0]
 80085fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008600:	81a3      	strh	r3, [r4, #12]
 8008602:	9b00      	ldr	r3, [sp, #0]
 8008604:	6163      	str	r3, [r4, #20]
 8008606:	9b01      	ldr	r3, [sp, #4]
 8008608:	6120      	str	r0, [r4, #16]
 800860a:	b15b      	cbz	r3, 8008624 <__smakebuf_r+0x74>
 800860c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008610:	4630      	mov	r0, r6
 8008612:	f000 f85b 	bl	80086cc <_isatty_r>
 8008616:	b128      	cbz	r0, 8008624 <__smakebuf_r+0x74>
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	f023 0303 	bic.w	r3, r3, #3
 800861e:	f043 0301 	orr.w	r3, r3, #1
 8008622:	81a3      	strh	r3, [r4, #12]
 8008624:	89a0      	ldrh	r0, [r4, #12]
 8008626:	4305      	orrs	r5, r0
 8008628:	81a5      	strh	r5, [r4, #12]
 800862a:	e7cd      	b.n	80085c8 <__smakebuf_r+0x18>
 800862c:	08008479 	.word	0x08008479

08008630 <raise>:
 8008630:	4b02      	ldr	r3, [pc, #8]	; (800863c <raise+0xc>)
 8008632:	4601      	mov	r1, r0
 8008634:	6818      	ldr	r0, [r3, #0]
 8008636:	f002 bf7d 	b.w	800b534 <_raise_r>
 800863a:	bf00      	nop
 800863c:	20000330 	.word	0x20000330

08008640 <_kill_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	4d07      	ldr	r5, [pc, #28]	; (8008660 <_kill_r+0x20>)
 8008644:	2300      	movs	r3, #0
 8008646:	4604      	mov	r4, r0
 8008648:	4608      	mov	r0, r1
 800864a:	4611      	mov	r1, r2
 800864c:	602b      	str	r3, [r5, #0]
 800864e:	f000 f95a 	bl	8008906 <_kill>
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	d102      	bne.n	800865c <_kill_r+0x1c>
 8008656:	682b      	ldr	r3, [r5, #0]
 8008658:	b103      	cbz	r3, 800865c <_kill_r+0x1c>
 800865a:	6023      	str	r3, [r4, #0]
 800865c:	bd38      	pop	{r3, r4, r5, pc}
 800865e:	bf00      	nop
 8008660:	20000e7c 	.word	0x20000e7c

08008664 <_write_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	4d07      	ldr	r5, [pc, #28]	; (8008684 <_write_r+0x20>)
 8008668:	4604      	mov	r4, r0
 800866a:	4608      	mov	r0, r1
 800866c:	4611      	mov	r1, r2
 800866e:	2200      	movs	r2, #0
 8008670:	602a      	str	r2, [r5, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	f000 f937 	bl	80088e6 <_write>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_write_r+0x1e>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b103      	cbz	r3, 8008682 <_write_r+0x1e>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	20000e7c 	.word	0x20000e7c

08008688 <_close_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4d06      	ldr	r5, [pc, #24]	; (80086a4 <_close_r+0x1c>)
 800868c:	2300      	movs	r3, #0
 800868e:	4604      	mov	r4, r0
 8008690:	4608      	mov	r0, r1
 8008692:	602b      	str	r3, [r5, #0]
 8008694:	f000 f92d 	bl	80088f2 <_close>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d102      	bne.n	80086a2 <_close_r+0x1a>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	b103      	cbz	r3, 80086a2 <_close_r+0x1a>
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	20000e7c 	.word	0x20000e7c

080086a8 <_fstat_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4d07      	ldr	r5, [pc, #28]	; (80086c8 <_fstat_r+0x20>)
 80086ac:	2300      	movs	r3, #0
 80086ae:	4604      	mov	r4, r0
 80086b0:	4608      	mov	r0, r1
 80086b2:	4611      	mov	r1, r2
 80086b4:	602b      	str	r3, [r5, #0]
 80086b6:	f000 f92a 	bl	800890e <_fstat>
 80086ba:	1c43      	adds	r3, r0, #1
 80086bc:	d102      	bne.n	80086c4 <_fstat_r+0x1c>
 80086be:	682b      	ldr	r3, [r5, #0]
 80086c0:	b103      	cbz	r3, 80086c4 <_fstat_r+0x1c>
 80086c2:	6023      	str	r3, [r4, #0]
 80086c4:	bd38      	pop	{r3, r4, r5, pc}
 80086c6:	bf00      	nop
 80086c8:	20000e7c 	.word	0x20000e7c

080086cc <_isatty_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4d06      	ldr	r5, [pc, #24]	; (80086e8 <_isatty_r+0x1c>)
 80086d0:	2300      	movs	r3, #0
 80086d2:	4604      	mov	r4, r0
 80086d4:	4608      	mov	r0, r1
 80086d6:	602b      	str	r3, [r5, #0]
 80086d8:	f000 f910 	bl	80088fc <_isatty>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	d102      	bne.n	80086e6 <_isatty_r+0x1a>
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	b103      	cbz	r3, 80086e6 <_isatty_r+0x1a>
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	20000e7c 	.word	0x20000e7c

080086ec <_lseek_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	4d07      	ldr	r5, [pc, #28]	; (800870c <_lseek_r+0x20>)
 80086f0:	4604      	mov	r4, r0
 80086f2:	4608      	mov	r0, r1
 80086f4:	4611      	mov	r1, r2
 80086f6:	2200      	movs	r2, #0
 80086f8:	602a      	str	r2, [r5, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	f000 f8fc 	bl	80088f8 <_lseek>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_lseek_r+0x1e>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_lseek_r+0x1e>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	20000e7c 	.word	0x20000e7c

08008710 <_read_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d07      	ldr	r5, [pc, #28]	; (8008730 <_read_r+0x20>)
 8008714:	4604      	mov	r4, r0
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	2200      	movs	r2, #0
 800871c:	602a      	str	r2, [r5, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	f000 f8db 	bl	80088da <_read>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_read_r+0x1e>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_read_r+0x1e>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	20000e7c 	.word	0x20000e7c

08008734 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8008734:	4770      	bx	lr

08008736 <lora_rx_error_timeout_cb>:
}
 8008736:	4770      	bx	lr

08008738 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8008738:	b508      	push	{r3, lr}
 800873a:	4604      	mov	r4, r0
 800873c:	4608      	mov	r0, r1
 800873e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8008740:	461a      	mov	r2, r3
 8008742:	47a0      	blx	r4
	return z_impl_z_current_get();
 8008744:	f7fe fa50 	bl	8006be8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8008748:	f7f9 fb04 	bl	8001d54 <z_impl_k_thread_abort>

0800874c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800874c:	4770      	bx	lr

0800874e <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800874e:	2000      	movs	r0, #0
 8008750:	4770      	bx	lr

08008752 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 8008752:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 8008754:	f7f8 ffbe 	bl	80016d4 <__do_global_ctors_aux>
	__do_init_array_aux();
 8008758:	f7f8 ffae 	bl	80016b8 <__do_init_array_aux>
}
 800875c:	bd08      	pop	{r3, pc}

0800875e <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800875e:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8008760:	f002 f8b1 	bl	800a8c6 <z_fatal_error>
}
 8008764:	bd08      	pop	{r3, pc}

08008766 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8008766:	b508      	push	{r3, lr}
 8008768:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800876a:	6800      	ldr	r0, [r0, #0]
 800876c:	f7ff fff7 	bl	800875e <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 8008770:	bd08      	pop	{r3, pc}

08008772 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
 8008772:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8008774:	2100      	movs	r1, #0
 8008776:	2001      	movs	r0, #1
 8008778:	f7ff fff1 	bl	800875e <z_arm_fatal_error>
}
 800877c:	bd08      	pop	{r3, pc}

0800877e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 800877e:	b508      	push	{r3, lr}
	handler();
 8008780:	f7f9 f812 	bl	80017a8 <z_SysNmiOnReset>
	z_arm_int_exit();
 8008784:	f7f9 f98c 	bl	8001aa0 <z_arm_exc_exit>
}
 8008788:	bd08      	pop	{r3, pc}

0800878a <z_arm_prepare_switch_to_main>:
  __builtin_arm_set_fpscr(fpscr);
 800878a:	2300      	movs	r3, #0
 800878c:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8008790:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8008794:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8008798:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f6f 	isb	sy
}
 80087a4:	4770      	bx	lr

080087a6 <memory_fault_recoverable>:
}
 80087a6:	2000      	movs	r0, #0
 80087a8:	4770      	bx	lr

080087aa <debug_monitor>:
	*recoverable = false;
 80087aa:	2300      	movs	r3, #0
 80087ac:	700b      	strb	r3, [r1, #0]
}
 80087ae:	4770      	bx	lr

080087b0 <fault_handle>:
{
 80087b0:	b508      	push	{r3, lr}
	*recoverable = false;
 80087b2:	2300      	movs	r3, #0
 80087b4:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 80087b6:	1ecb      	subs	r3, r1, #3
 80087b8:	2b09      	cmp	r3, #9
 80087ba:	d81a      	bhi.n	80087f2 <fault_handle+0x42>
 80087bc:	e8df f003 	tbb	[pc, r3]
 80087c0:	110d0905 	.word	0x110d0905
 80087c4:	19191919 	.word	0x19191919
 80087c8:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
 80087ca:	4611      	mov	r1, r2
 80087cc:	f7f9 f9f8 	bl	8001bc0 <hard_fault>
		break;
 80087d0:	e010      	b.n	80087f4 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
 80087d2:	2100      	movs	r1, #0
 80087d4:	f7f9 f9ae 	bl	8001b34 <mem_manage_fault>
		break;
 80087d8:	e00c      	b.n	80087f4 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
 80087da:	2100      	movs	r1, #0
 80087dc:	f7f9 f96e 	bl	8001abc <bus_fault>
		break;
 80087e0:	e008      	b.n	80087f4 <fault_handle+0x44>
		reason = usage_fault(esf);
 80087e2:	f7f9 f995 	bl	8001b10 <usage_fault>
		break;
 80087e6:	e005      	b.n	80087f4 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
 80087e8:	4611      	mov	r1, r2
 80087ea:	f7ff ffde 	bl	80087aa <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80087ee:	2000      	movs	r0, #0
		break;
 80087f0:	e000      	b.n	80087f4 <fault_handle+0x44>
	switch (fault) {
 80087f2:	2000      	movs	r0, #0
}
 80087f4:	bd08      	pop	{r3, pc}

080087f6 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 80087f6:	6843      	ldr	r3, [r0, #4]
 80087f8:	1e5a      	subs	r2, r3, #1
		&&
 80087fa:	4213      	tst	r3, r2
 80087fc:	d106      	bne.n	800880c <mpu_partition_is_valid+0x16>
		&&
 80087fe:	2b1f      	cmp	r3, #31
 8008800:	d906      	bls.n	8008810 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 8008802:	6803      	ldr	r3, [r0, #0]
		&&
 8008804:	421a      	tst	r2, r3
 8008806:	d005      	beq.n	8008814 <mpu_partition_is_valid+0x1e>
 8008808:	2000      	movs	r0, #0
 800880a:	4770      	bx	lr
 800880c:	2000      	movs	r0, #0
 800880e:	4770      	bx	lr
 8008810:	2000      	movs	r0, #0
 8008812:	4770      	bx	lr
 8008814:	2001      	movs	r0, #1
}
 8008816:	4770      	bx	lr

08008818 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
 8008818:	2807      	cmp	r0, #7
 800881a:	d805      	bhi.n	8008828 <region_allocate_and_init+0x10>
{
 800881c:	b510      	push	{r4, lr}
 800881e:	4604      	mov	r4, r0
	region_init(index, region_conf);
 8008820:	f7f9 fad0 	bl	8001dc4 <region_init>
	return index;
 8008824:	4620      	mov	r0, r4
}
 8008826:	bd10      	pop	{r4, pc}
		return -EINVAL;
 8008828:	f06f 0015 	mvn.w	r0, #21
}
 800882c:	4770      	bx	lr

0800882e <mpu_configure_region>:
{
 800882e:	b500      	push	{lr}
 8008830:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 8008832:	680b      	ldr	r3, [r1, #0]
 8008834:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 8008836:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8008838:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 800883a:	2b20      	cmp	r3, #32
 800883c:	d912      	bls.n	8008864 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 800883e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008842:	d811      	bhi.n	8008868 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8008844:	3b01      	subs	r3, #1
 8008846:	fab3 f383 	clz	r3, r3
 800884a:	f1c3 031f 	rsb	r3, r3, #31
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8008854:	4313      	orrs	r3, r2
 8008856:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 8008858:	a901      	add	r1, sp, #4
 800885a:	f7ff ffdd 	bl	8008818 <region_allocate_and_init>
}
 800885e:	b005      	add	sp, #20
 8008860:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 8008864:	2308      	movs	r3, #8
 8008866:	e7f5      	b.n	8008854 <mpu_configure_region+0x26>
		return REGION_4G;
 8008868:	233e      	movs	r3, #62	; 0x3e
 800886a:	e7f3      	b.n	8008854 <mpu_configure_region+0x26>

0800886c <mpu_configure_regions>:
{
 800886c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008870:	4680      	mov	r8, r0
 8008872:	460f      	mov	r7, r1
 8008874:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
 8008876:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
 8008878:	2500      	movs	r5, #0
 800887a:	e009      	b.n	8008890 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 800887c:	4621      	mov	r1, r4
 800887e:	b2f0      	uxtb	r0, r6
 8008880:	f7ff ffd5 	bl	800882e <mpu_configure_region>
 8008884:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
 8008886:	f110 0f16 	cmn.w	r0, #22
 800888a:	d014      	beq.n	80088b6 <mpu_configure_regions+0x4a>
		reg_index++;
 800888c:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 800888e:	3501      	adds	r5, #1
 8008890:	42bd      	cmp	r5, r7
 8008892:	da10      	bge.n	80088b6 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
 8008894:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8008898:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 800889c:	6862      	ldr	r2, [r4, #4]
 800889e:	2a00      	cmp	r2, #0
 80088a0:	d0f5      	beq.n	800888e <mpu_configure_regions+0x22>
		if (do_sanity_check &&
 80088a2:	f1b9 0f00 	cmp.w	r9, #0
 80088a6:	d0e9      	beq.n	800887c <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
 80088a8:	4620      	mov	r0, r4
 80088aa:	f7ff ffa4 	bl	80087f6 <mpu_partition_is_valid>
		if (do_sanity_check &&
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d1e4      	bne.n	800887c <mpu_configure_regions+0x10>
			return -EINVAL;
 80088b2:	f06f 0615 	mvn.w	r6, #21
}
 80088b6:	4630      	mov	r0, r6
 80088b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080088bc <arm_core_mpu_configure_static_mpu_regions>:
{
 80088bc:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 80088be:	f7f9 fa95 	bl	8001dec <mpu_configure_static_mpu_regions>
}
 80088c2:	bd08      	pop	{r3, pc}

080088c4 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 80088c4:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 80088c6:	f7f9 fa9b 	bl	8001e00 <mpu_configure_dynamic_mpu_regions>
}
 80088ca:	bd08      	pop	{r3, pc}

080088cc <malloc_prepare>:
}
 80088cc:	2000      	movs	r0, #0
 80088ce:	4770      	bx	lr

080088d0 <_stdout_hook_default>:
}
 80088d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088d4:	4770      	bx	lr

080088d6 <_stdin_hook_default>:
}
 80088d6:	2000      	movs	r0, #0
 80088d8:	4770      	bx	lr

080088da <_read>:
{
 80088da:	b508      	push	{r3, lr}
 80088dc:	4608      	mov	r0, r1
 80088de:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 80088e0:	f7f9 fae0 	bl	8001ea4 <z_impl_zephyr_read_stdin>
}
 80088e4:	bd08      	pop	{r3, pc}

080088e6 <_write>:
{
 80088e6:	b508      	push	{r3, lr}
 80088e8:	4608      	mov	r0, r1
 80088ea:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 80088ec:	f7f9 faf0 	bl	8001ed0 <z_impl_zephyr_write_stdout>
}
 80088f0:	bd08      	pop	{r3, pc}

080088f2 <_close>:
}
 80088f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088f6:	4770      	bx	lr

080088f8 <_lseek>:
}
 80088f8:	2000      	movs	r0, #0
 80088fa:	4770      	bx	lr

080088fc <_isatty>:
}
 80088fc:	2802      	cmp	r0, #2
 80088fe:	bfcc      	ite	gt
 8008900:	2000      	movgt	r0, #0
 8008902:	2001      	movle	r0, #1
 8008904:	4770      	bx	lr

08008906 <_kill>:
}
 8008906:	2000      	movs	r0, #0
 8008908:	4770      	bx	lr

0800890a <_getpid>:
}
 800890a:	2000      	movs	r0, #0
 800890c:	4770      	bx	lr

0800890e <_fstat>:
	st->st_mode = S_IFCHR;
 800890e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008912:	604b      	str	r3, [r1, #4]
}
 8008914:	2000      	movs	r0, #0
 8008916:	4770      	bx	lr

08008918 <__retarget_lock_init_recursive>:
{
 8008918:	b510      	push	{r4, lr}
 800891a:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
 800891c:	2014      	movs	r0, #20
 800891e:	f7fe fec7 	bl	80076b0 <malloc>
 8008922:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 8008924:	f002 f856 	bl	800a9d4 <z_impl_k_mutex_init>
}
 8008928:	bd10      	pop	{r4, pc}

0800892a <__retarget_lock_acquire_recursive>:
{
 800892a:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 800892c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008934:	f7fd fb2c 	bl	8005f90 <z_impl_k_mutex_lock>
}
 8008938:	bd08      	pop	{r3, pc}

0800893a <__retarget_lock_release_recursive>:
{
 800893a:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 800893c:	f7fd fbb2 	bl	80060a4 <z_impl_k_mutex_unlock>
}
 8008940:	bd08      	pop	{r3, pc}

08008942 <__errno>:
{
 8008942:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 8008944:	f7fd f9b4 	bl	8005cb0 <z_impl_z_errno>
}
 8008948:	bd08      	pop	{r3, pc}

0800894a <z_impl_sys_rand_get>:

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
void z_impl_sys_rand_get(void *dst, size_t outlen)
{
 800894a:	b508      	push	{r3, lr}
	rand_get(dst, outlen, false);
 800894c:	2200      	movs	r2, #0
 800894e:	f7f9 fb07 	bl	8001f60 <rand_get>
}
 8008952:	bd08      	pop	{r3, pc}

08008954 <__stm32_exti_isr_0>:
{
 8008954:	b508      	push	{r3, lr}
 8008956:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 8008958:	2101      	movs	r1, #1
 800895a:	2000      	movs	r0, #0
 800895c:	f7f9 fb32 	bl	8001fc4 <__stm32_exti_isr>
}
 8008960:	bd08      	pop	{r3, pc}

08008962 <__stm32_exti_isr_1>:
{
 8008962:	b508      	push	{r3, lr}
 8008964:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 8008966:	2102      	movs	r1, #2
 8008968:	2001      	movs	r0, #1
 800896a:	f7f9 fb2b 	bl	8001fc4 <__stm32_exti_isr>
}
 800896e:	bd08      	pop	{r3, pc}

08008970 <__stm32_exti_isr_2>:
{
 8008970:	b508      	push	{r3, lr}
 8008972:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 8008974:	2103      	movs	r1, #3
 8008976:	2002      	movs	r0, #2
 8008978:	f7f9 fb24 	bl	8001fc4 <__stm32_exti_isr>
}
 800897c:	bd08      	pop	{r3, pc}

0800897e <__stm32_exti_isr_3>:
{
 800897e:	b508      	push	{r3, lr}
 8008980:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 8008982:	2104      	movs	r1, #4
 8008984:	2003      	movs	r0, #3
 8008986:	f7f9 fb1d 	bl	8001fc4 <__stm32_exti_isr>
}
 800898a:	bd08      	pop	{r3, pc}

0800898c <__stm32_exti_isr_4>:
{
 800898c:	b508      	push	{r3, lr}
 800898e:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 8008990:	2105      	movs	r1, #5
 8008992:	2004      	movs	r0, #4
 8008994:	f7f9 fb16 	bl	8001fc4 <__stm32_exti_isr>
}
 8008998:	bd08      	pop	{r3, pc}

0800899a <__stm32_exti_isr_9_5>:
{
 800899a:	b508      	push	{r3, lr}
 800899c:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 800899e:	210a      	movs	r1, #10
 80089a0:	2005      	movs	r0, #5
 80089a2:	f7f9 fb0f 	bl	8001fc4 <__stm32_exti_isr>
}
 80089a6:	bd08      	pop	{r3, pc}

080089a8 <__stm32_exti_isr_15_10>:
{
 80089a8:	b508      	push	{r3, lr}
 80089aa:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 80089ac:	2110      	movs	r1, #16
 80089ae:	200a      	movs	r0, #10
 80089b0:	f7f9 fb08 	bl	8001fc4 <__stm32_exti_isr>
}
 80089b4:	bd08      	pop	{r3, pc}

080089b6 <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 80089b6:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 80089b8:	2200      	movs	r2, #0
 80089ba:	4611      	mov	r1, r2
 80089bc:	2006      	movs	r0, #6
 80089be:	f7f8 fedd 	bl	800177c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 80089c2:	2200      	movs	r2, #0
 80089c4:	4611      	mov	r1, r2
 80089c6:	2007      	movs	r0, #7
 80089c8:	f7f8 fed8 	bl	800177c <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 80089cc:	2200      	movs	r2, #0
 80089ce:	4611      	mov	r1, r2
 80089d0:	2008      	movs	r0, #8
 80089d2:	f7f8 fed3 	bl	800177c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80089d6:	2200      	movs	r2, #0
 80089d8:	4611      	mov	r1, r2
 80089da:	2009      	movs	r0, #9
 80089dc:	f7f8 fece 	bl	800177c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80089e0:	2200      	movs	r2, #0
 80089e2:	4611      	mov	r1, r2
 80089e4:	200a      	movs	r0, #10
 80089e6:	f7f8 fec9 	bl	800177c <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 80089ea:	2200      	movs	r2, #0
 80089ec:	4611      	mov	r1, r2
 80089ee:	2017      	movs	r0, #23
 80089f0:	f7f8 fec4 	bl	800177c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 80089f4:	2200      	movs	r2, #0
 80089f6:	4611      	mov	r1, r2
 80089f8:	2028      	movs	r0, #40	; 0x28
 80089fa:	f7f8 febf 	bl	800177c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 80089fe:	bd08      	pop	{r3, pc}

08008a00 <stm32_exti_init>:
{
 8008a00:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 8008a02:	f7ff ffd8 	bl	80089b6 <__stm32_exti_connect_irqs>
}
 8008a06:	2000      	movs	r0, #0
 8008a08:	bd08      	pop	{r3, pc}

08008a0a <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8008a0e:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8008a10:	6083      	str	r3, [r0, #8]
}
 8008a12:	4770      	bx	lr

08008a14 <get_bus_clock>:
}
 8008a14:	fbb0 f0f1 	udiv	r0, r0, r1
 8008a18:	4770      	bx	lr

08008a1a <config_pll_init>:
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6003      	str	r3, [r0, #0]
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 8008a1e:	2314      	movs	r3, #20
 8008a20:	6043      	str	r3, [r0, #4]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 8008a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a26:	6083      	str	r3, [r0, #8]
}
 8008a28:	4770      	bx	lr

08008a2a <dma_stm32_get_priority>:
	switch (priority) {
 8008a2a:	2803      	cmp	r0, #3
 8008a2c:	d815      	bhi.n	8008a5a <dma_stm32_get_priority+0x30>
 8008a2e:	e8df f000 	tbb	[pc, r0]
 8008a32:	0502      	.short	0x0502
 8008a34:	0f0a      	.short	0x0f0a
		*ll_priority = LL_DMA_PRIORITY_LOW;
 8008a36:	2000      	movs	r0, #0
 8008a38:	6008      	str	r0, [r1, #0]
		break;
 8008a3a:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_MEDIUM;
 8008a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a40:	600b      	str	r3, [r1, #0]
	return 0;
 8008a42:	2000      	movs	r0, #0
		break;
 8008a44:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_HIGH;
 8008a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a4a:	600b      	str	r3, [r1, #0]
	return 0;
 8008a4c:	2000      	movs	r0, #0
		break;
 8008a4e:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_VERYHIGH;
 8008a50:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008a54:	600b      	str	r3, [r1, #0]
	return 0;
 8008a56:	2000      	movs	r0, #0
		break;
 8008a58:	4770      	bx	lr
	switch (priority) {
 8008a5a:	f06f 0015 	mvn.w	r0, #21
}
 8008a5e:	4770      	bx	lr

08008a60 <dma_stm32_get_direction>:
	switch (direction) {
 8008a60:	2801      	cmp	r0, #1
 8008a62:	d009      	beq.n	8008a78 <dma_stm32_get_direction+0x18>
 8008a64:	2802      	cmp	r0, #2
 8008a66:	d00b      	beq.n	8008a80 <dma_stm32_get_direction+0x20>
 8008a68:	b110      	cbz	r0, 8008a70 <dma_stm32_get_direction+0x10>
 8008a6a:	f06f 0015 	mvn.w	r0, #21
}
 8008a6e:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_MEMORY;
 8008a70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a74:	600b      	str	r3, [r1, #0]
		break;
 8008a76:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8008a78:	2310      	movs	r3, #16
 8008a7a:	600b      	str	r3, [r1, #0]
	return 0;
 8008a7c:	2000      	movs	r0, #0
		break;
 8008a7e:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8008a80:	2000      	movs	r0, #0
 8008a82:	6008      	str	r0, [r1, #0]
		break;
 8008a84:	4770      	bx	lr

08008a86 <dma_stm32_get_memory_increment>:
	switch (increment) {
 8008a86:	2801      	cmp	r0, #1
 8008a88:	d00b      	beq.n	8008aa2 <dma_stm32_get_memory_increment+0x1c>
 8008a8a:	2802      	cmp	r0, #2
 8008a8c:	d006      	beq.n	8008a9c <dma_stm32_get_memory_increment+0x16>
 8008a8e:	b110      	cbz	r0, 8008a96 <dma_stm32_get_memory_increment+0x10>
		return -EINVAL;
 8008a90:	f06f 0015 	mvn.w	r0, #21
}
 8008a94:	4770      	bx	lr
		*ll_increment = LL_DMA_MEMORY_INCREMENT;
 8008a96:	2380      	movs	r3, #128	; 0x80
 8008a98:	600b      	str	r3, [r1, #0]
		break;
 8008a9a:	4770      	bx	lr
		*ll_increment = LL_DMA_MEMORY_NOINCREMENT;
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	6008      	str	r0, [r1, #0]
		break;
 8008aa0:	4770      	bx	lr
	switch (increment) {
 8008aa2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8008aa6:	4770      	bx	lr

08008aa8 <dma_stm32_get_periph_increment>:
	switch (increment) {
 8008aa8:	2801      	cmp	r0, #1
 8008aaa:	d00b      	beq.n	8008ac4 <dma_stm32_get_periph_increment+0x1c>
 8008aac:	2802      	cmp	r0, #2
 8008aae:	d006      	beq.n	8008abe <dma_stm32_get_periph_increment+0x16>
 8008ab0:	b110      	cbz	r0, 8008ab8 <dma_stm32_get_periph_increment+0x10>
		return -EINVAL;
 8008ab2:	f06f 0015 	mvn.w	r0, #21
}
 8008ab6:	4770      	bx	lr
		*ll_increment = LL_DMA_PERIPH_INCREMENT;
 8008ab8:	2340      	movs	r3, #64	; 0x40
 8008aba:	600b      	str	r3, [r1, #0]
		break;
 8008abc:	4770      	bx	lr
		*ll_increment = LL_DMA_PERIPH_NOINCREMENT;
 8008abe:	2000      	movs	r0, #0
 8008ac0:	6008      	str	r0, [r1, #0]
		break;
 8008ac2:	4770      	bx	lr
	switch (increment) {
 8008ac4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8008ac8:	4770      	bx	lr

08008aca <dma_stm32_config_irq_0>:
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */

static void dma_stm32_config_irq_0(const struct device *dev)
{
 8008aca:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	DMA_STM32_IRQ_CONNECT(0, 0);
 8008acc:	2200      	movs	r2, #0
 8008ace:	4611      	mov	r1, r2
 8008ad0:	200b      	movs	r0, #11
 8008ad2:	f7f8 fe53 	bl	800177c <z_arm_irq_priority_set>
 8008ad6:	200b      	movs	r0, #11
 8008ad8:	f7f8 fe20 	bl	800171c <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(0, 1);
 8008adc:	2200      	movs	r2, #0
 8008ade:	4611      	mov	r1, r2
 8008ae0:	200c      	movs	r0, #12
 8008ae2:	f7f8 fe4b 	bl	800177c <z_arm_irq_priority_set>
 8008ae6:	200c      	movs	r0, #12
 8008ae8:	f7f8 fe18 	bl	800171c <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 2);
 8008aec:	2200      	movs	r2, #0
 8008aee:	4611      	mov	r1, r2
 8008af0:	200d      	movs	r0, #13
 8008af2:	f7f8 fe43 	bl	800177c <z_arm_irq_priority_set>
 8008af6:	200d      	movs	r0, #13
 8008af8:	f7f8 fe10 	bl	800171c <arch_irq_enable>
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
	DMA_STM32_IRQ_CONNECT(0, 3);
 8008afc:	2200      	movs	r2, #0
 8008afe:	4611      	mov	r1, r2
 8008b00:	200e      	movs	r0, #14
 8008b02:	f7f8 fe3b 	bl	800177c <z_arm_irq_priority_set>
 8008b06:	200e      	movs	r0, #14
 8008b08:	f7f8 fe08 	bl	800171c <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 4);
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	4611      	mov	r1, r2
 8008b10:	200f      	movs	r0, #15
 8008b12:	f7f8 fe33 	bl	800177c <z_arm_irq_priority_set>
 8008b16:	200f      	movs	r0, #15
 8008b18:	f7f8 fe00 	bl	800171c <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 5)
	DMA_STM32_IRQ_CONNECT(0, 5);
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	4611      	mov	r1, r2
 8008b20:	2010      	movs	r0, #16
 8008b22:	f7f8 fe2b 	bl	800177c <z_arm_irq_priority_set>
 8008b26:	2010      	movs	r0, #16
 8008b28:	f7f8 fdf8 	bl	800171c <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 6)
	DMA_STM32_IRQ_CONNECT(0, 6);
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	4611      	mov	r1, r2
 8008b30:	2011      	movs	r0, #17
 8008b32:	f7f8 fe23 	bl	800177c <z_arm_irq_priority_set>
 8008b36:	2011      	movs	r0, #17
 8008b38:	f7f8 fdf0 	bl	800171c <arch_irq_enable>
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
/* Either 5 or 6 or 7 or 8 channels for DMA across all stm32 series. */
}
 8008b3c:	bd08      	pop	{r3, pc}

08008b3e <dma_stm32_dump_stream_irq>:
{
 8008b3e:	b508      	push	{r3, lr}
	const struct dma_stm32_config *config = dev->config;
 8008b40:	6843      	ldr	r3, [r0, #4]
	stm32_dma_dump_stream_irq(dma, id);
 8008b42:	6918      	ldr	r0, [r3, #16]
 8008b44:	f000 f954 	bl	8008df0 <stm32_dma_dump_stream_irq>
}
 8008b48:	bd08      	pop	{r3, pc}

08008b4a <dma_stm32_clear_stream_irq>:
{
 8008b4a:	b538      	push	{r3, r4, r5, lr}
 8008b4c:	460c      	mov	r4, r1
	const struct dma_stm32_config *config = dev->config;
 8008b4e:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8008b50:	691d      	ldr	r5, [r3, #16]
	dma_stm32_clear_tc(dma, id);
 8008b52:	4628      	mov	r0, r5
 8008b54:	f7f9 fe04 	bl	8002760 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f7f9 fdf8 	bl	8002750 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 8008b60:	4621      	mov	r1, r4
 8008b62:	4628      	mov	r0, r5
 8008b64:	f000 f945 	bl	8008df2 <stm32_dma_clear_stream_irq>
}
 8008b68:	bd38      	pop	{r3, r4, r5, pc}

08008b6a <dma_stm32_irq_handler>:
{
 8008b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6e:	4606      	mov	r6, r0
 8008b70:	460d      	mov	r5, r1
	const struct dma_stm32_config *config = dev->config;
 8008b72:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8008b74:	691f      	ldr	r7, [r3, #16]
	stream = &config->streams[id];
 8008b76:	699c      	ldr	r4, [r3, #24]
 8008b78:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8008b7c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	callback_arg = id + STREAM_OFFSET;
 8008b80:	f101 0801 	add.w	r8, r1, #1
		stream->busy = false;
 8008b84:	2300      	movs	r3, #0
 8008b86:	71a3      	strb	r3, [r4, #6]
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 8008b88:	4638      	mov	r0, r7
 8008b8a:	f7f9 fe2b 	bl	80027e4 <stm32_dma_is_ht_irq_active>
 8008b8e:	b170      	cbz	r0, 8008bae <dma_stm32_irq_handler+0x44>
		if (!stream->hal_override) {
 8008b90:	7963      	ldrb	r3, [r4, #5]
 8008b92:	b13b      	cbz	r3, 8008ba4 <dma_stm32_irq_handler+0x3a>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 8008b94:	6965      	ldr	r5, [r4, #20]
 8008b96:	2300      	movs	r3, #0
 8008b98:	4642      	mov	r2, r8
 8008b9a:	6921      	ldr	r1, [r4, #16]
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	47a8      	blx	r5
}
 8008ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			dma_stm32_clear_ht(dma, id);
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	f7f9 fdd2 	bl	8002750 <dma_stm32_clear_ht>
 8008bac:	e7f2      	b.n	8008b94 <dma_stm32_irq_handler+0x2a>
	} else if (stm32_dma_is_tc_irq_active(dma, id)) {
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f7f9 fdfd 	bl	80027b0 <stm32_dma_is_tc_irq_active>
 8008bb6:	b168      	cbz	r0, 8008bd4 <dma_stm32_irq_handler+0x6a>
		if (!stream->hal_override) {
 8008bb8:	7963      	ldrb	r3, [r4, #5]
 8008bba:	b133      	cbz	r3, 8008bca <dma_stm32_irq_handler+0x60>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 8008bbc:	6965      	ldr	r5, [r4, #20]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4642      	mov	r2, r8
 8008bc2:	6921      	ldr	r1, [r4, #16]
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	47a8      	blx	r5
 8008bc8:	e7ea      	b.n	8008ba0 <dma_stm32_irq_handler+0x36>
			dma_stm32_clear_tc(dma, id);
 8008bca:	4629      	mov	r1, r5
 8008bcc:	4638      	mov	r0, r7
 8008bce:	f7f9 fdc7 	bl	8002760 <dma_stm32_clear_tc>
 8008bd2:	e7f3      	b.n	8008bbc <dma_stm32_irq_handler+0x52>
	} else if (stm32_dma_is_unexpected_irq_happened(dma, id)) {
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	f000 f90f 	bl	8008dfa <stm32_dma_is_unexpected_irq_happened>
 8008bdc:	b138      	cbz	r0, 8008bee <dma_stm32_irq_handler+0x84>
		stream->dma_callback(dev, stream->user_data,
 8008bde:	6965      	ldr	r5, [r4, #20]
 8008be0:	f06f 0304 	mvn.w	r3, #4
 8008be4:	4642      	mov	r2, r8
 8008be6:	6921      	ldr	r1, [r4, #16]
 8008be8:	4630      	mov	r0, r6
 8008bea:	47a8      	blx	r5
 8008bec:	e7d8      	b.n	8008ba0 <dma_stm32_irq_handler+0x36>
		dma_stm32_dump_stream_irq(dev, id);
 8008bee:	4629      	mov	r1, r5
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f7ff ffa4 	bl	8008b3e <dma_stm32_dump_stream_irq>
		dma_stm32_clear_stream_irq(dev, id);
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f7ff ffa6 	bl	8008b4a <dma_stm32_clear_stream_irq>
		stream->dma_callback(dev, stream->user_data,
 8008bfe:	6965      	ldr	r5, [r4, #20]
 8008c00:	f06f 0304 	mvn.w	r3, #4
 8008c04:	4642      	mov	r2, r8
 8008c06:	6921      	ldr	r1, [r4, #16]
 8008c08:	4630      	mov	r0, r6
 8008c0a:	47a8      	blx	r5
}
 8008c0c:	e7c8      	b.n	8008ba0 <dma_stm32_irq_handler+0x36>

08008c0e <dma_stm32_irq_0_0>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 0);
 8008c0e:	b508      	push	{r3, lr}
 8008c10:	2100      	movs	r1, #0
 8008c12:	f7ff ffaa 	bl	8008b6a <dma_stm32_irq_handler>
 8008c16:	bd08      	pop	{r3, pc}

08008c18 <dma_stm32_irq_0_1>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 1);
 8008c18:	b508      	push	{r3, lr}
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	f7ff ffa5 	bl	8008b6a <dma_stm32_irq_handler>
 8008c20:	bd08      	pop	{r3, pc}

08008c22 <dma_stm32_irq_0_2>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 2);
 8008c22:	b508      	push	{r3, lr}
 8008c24:	2102      	movs	r1, #2
 8008c26:	f7ff ffa0 	bl	8008b6a <dma_stm32_irq_handler>
 8008c2a:	bd08      	pop	{r3, pc}

08008c2c <dma_stm32_irq_0_3>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 3);
 8008c2c:	b508      	push	{r3, lr}
 8008c2e:	2103      	movs	r1, #3
 8008c30:	f7ff ff9b 	bl	8008b6a <dma_stm32_irq_handler>
 8008c34:	bd08      	pop	{r3, pc}

08008c36 <dma_stm32_irq_0_4>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 4);
 8008c36:	b508      	push	{r3, lr}
 8008c38:	2104      	movs	r1, #4
 8008c3a:	f7ff ff96 	bl	8008b6a <dma_stm32_irq_handler>
 8008c3e:	bd08      	pop	{r3, pc}

08008c40 <dma_stm32_irq_0_5>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 5);
 8008c40:	b508      	push	{r3, lr}
 8008c42:	2105      	movs	r1, #5
 8008c44:	f7ff ff91 	bl	8008b6a <dma_stm32_irq_handler>
 8008c48:	bd08      	pop	{r3, pc}

08008c4a <dma_stm32_irq_0_6>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 6);
 8008c4a:	b508      	push	{r3, lr}
 8008c4c:	2106      	movs	r1, #6
 8008c4e:	f7ff ff8c 	bl	8008b6a <dma_stm32_irq_handler>
 8008c52:	bd08      	pop	{r3, pc}

08008c54 <dma_stm32_disable_stream>:
{
 8008c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c56:	4607      	mov	r7, r0
 8008c58:	460e      	mov	r6, r1
	int count = 0;
 8008c5a:	2400      	movs	r4, #0
		if (stm32_dma_disable_stream(dma, id) == 0) {
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f7f9 fde8 	bl	8002834 <stm32_dma_disable_stream>
 8008c64:	4603      	mov	r3, r0
 8008c66:	b160      	cbz	r0, 8008c82 <dma_stm32_disable_stream+0x2e>
		if (count++ > (5 * 1000)) {
 8008c68:	1c65      	adds	r5, r4, #1
 8008c6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c6e:	429c      	cmp	r4, r3
 8008c70:	dc05      	bgt.n	8008c7e <dma_stm32_disable_stream+0x2a>
	return z_impl_k_sleep(timeout);
 8008c72:	200a      	movs	r0, #10
 8008c74:	2100      	movs	r1, #0
 8008c76:	f7fd ff9f 	bl	8006bb8 <z_impl_k_sleep>
 8008c7a:	462c      	mov	r4, r5
	for (;;) {
 8008c7c:	e7ee      	b.n	8008c5c <dma_stm32_disable_stream+0x8>
			return -EBUSY;
 8008c7e:	f06f 030f 	mvn.w	r3, #15
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c86 <dma_stm32_start>:
{
 8008c86:	b538      	push	{r3, r4, r5, lr}
	const struct dma_stm32_config *config = dev->config;
 8008c88:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8008c8a:	691d      	ldr	r5, [r3, #16]
	id = id - STREAM_OFFSET;
 8008c8c:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	d908      	bls.n	8008ca6 <dma_stm32_start+0x20>
	dma_stm32_clear_stream_irq(dev, id);
 8008c94:	4621      	mov	r1, r4
 8008c96:	f7ff ff58 	bl	8008b4a <dma_stm32_clear_stream_irq>
	stm32_dma_enable_stream(dma, id);
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f7f9 fdbb 	bl	8002818 <stm32_dma_enable_stream>
	return 0;
 8008ca2:	2000      	movs	r0, #0
}
 8008ca4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 8008ca6:	f06f 0015 	mvn.w	r0, #21
 8008caa:	e7fb      	b.n	8008ca4 <dma_stm32_start+0x1e>

08008cac <LL_DMA_IsActiveFlag_TC1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8008cac:	6800      	ldr	r0, [r0, #0]
 8008cae:	f010 0002 	ands.w	r0, r0, #2
 8008cb2:	d000      	beq.n	8008cb6 <LL_DMA_IsActiveFlag_TC1+0xa>
 8008cb4:	2001      	movs	r0, #1
}
 8008cb6:	4770      	bx	lr

08008cb8 <LL_DMA_IsActiveFlag_TC2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8008cb8:	6800      	ldr	r0, [r0, #0]
 8008cba:	f010 0020 	ands.w	r0, r0, #32
 8008cbe:	d000      	beq.n	8008cc2 <LL_DMA_IsActiveFlag_TC2+0xa>
 8008cc0:	2001      	movs	r0, #1
}
 8008cc2:	4770      	bx	lr

08008cc4 <LL_DMA_IsActiveFlag_TC3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8008cc4:	6800      	ldr	r0, [r0, #0]
 8008cc6:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8008cca:	d000      	beq.n	8008cce <LL_DMA_IsActiveFlag_TC3+0xa>
 8008ccc:	2001      	movs	r0, #1
}
 8008cce:	4770      	bx	lr

08008cd0 <LL_DMA_IsActiveFlag_TC4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 8008cd0:	6800      	ldr	r0, [r0, #0]
 8008cd2:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8008cd6:	d000      	beq.n	8008cda <LL_DMA_IsActiveFlag_TC4+0xa>
 8008cd8:	2001      	movs	r0, #1
}
 8008cda:	4770      	bx	lr

08008cdc <LL_DMA_IsActiveFlag_TC5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 8008cdc:	6800      	ldr	r0, [r0, #0]
 8008cde:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008ce2:	d000      	beq.n	8008ce6 <LL_DMA_IsActiveFlag_TC5+0xa>
 8008ce4:	2001      	movs	r0, #1
}
 8008ce6:	4770      	bx	lr

08008ce8 <LL_DMA_IsActiveFlag_TC6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 8008ce8:	6800      	ldr	r0, [r0, #0]
 8008cea:	f410 1000 	ands.w	r0, r0, #2097152	; 0x200000
 8008cee:	d000      	beq.n	8008cf2 <LL_DMA_IsActiveFlag_TC6+0xa>
 8008cf0:	2001      	movs	r0, #1
}
 8008cf2:	4770      	bx	lr

08008cf4 <LL_DMA_IsActiveFlag_TC7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
 8008cf4:	6800      	ldr	r0, [r0, #0]
 8008cf6:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008cfa:	d000      	beq.n	8008cfe <LL_DMA_IsActiveFlag_TC7+0xa>
 8008cfc:	2001      	movs	r0, #1
}
 8008cfe:	4770      	bx	lr

08008d00 <LL_DMA_IsActiveFlag_HT1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 8008d00:	6800      	ldr	r0, [r0, #0]
 8008d02:	f010 0004 	ands.w	r0, r0, #4
 8008d06:	d000      	beq.n	8008d0a <LL_DMA_IsActiveFlag_HT1+0xa>
 8008d08:	2001      	movs	r0, #1
}
 8008d0a:	4770      	bx	lr

08008d0c <LL_DMA_IsActiveFlag_HT2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2)) ? 1UL : 0UL);
 8008d0c:	6800      	ldr	r0, [r0, #0]
 8008d0e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8008d12:	d000      	beq.n	8008d16 <LL_DMA_IsActiveFlag_HT2+0xa>
 8008d14:	2001      	movs	r0, #1
}
 8008d16:	4770      	bx	lr

08008d18 <LL_DMA_IsActiveFlag_HT3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3)) ? 1UL : 0UL);
 8008d18:	6800      	ldr	r0, [r0, #0]
 8008d1a:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8008d1e:	d000      	beq.n	8008d22 <LL_DMA_IsActiveFlag_HT3+0xa>
 8008d20:	2001      	movs	r0, #1
}
 8008d22:	4770      	bx	lr

08008d24 <LL_DMA_IsActiveFlag_HT4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4)) ? 1UL : 0UL);
 8008d24:	6800      	ldr	r0, [r0, #0]
 8008d26:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8008d2a:	d000      	beq.n	8008d2e <LL_DMA_IsActiveFlag_HT4+0xa>
 8008d2c:	2001      	movs	r0, #1
}
 8008d2e:	4770      	bx	lr

08008d30 <LL_DMA_IsActiveFlag_HT5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5)) ? 1UL : 0UL);
 8008d30:	6800      	ldr	r0, [r0, #0]
 8008d32:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 8008d36:	d000      	beq.n	8008d3a <LL_DMA_IsActiveFlag_HT5+0xa>
 8008d38:	2001      	movs	r0, #1
}
 8008d3a:	4770      	bx	lr

08008d3c <LL_DMA_IsActiveFlag_HT6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6)) ? 1UL : 0UL);
 8008d3c:	6800      	ldr	r0, [r0, #0]
 8008d3e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8008d42:	d000      	beq.n	8008d46 <LL_DMA_IsActiveFlag_HT6+0xa>
 8008d44:	2001      	movs	r0, #1
}
 8008d46:	4770      	bx	lr

08008d48 <LL_DMA_IsActiveFlag_HT7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7)) ? 1UL : 0UL);
 8008d48:	6800      	ldr	r0, [r0, #0]
 8008d4a:	f010 6080 	ands.w	r0, r0, #67108864	; 0x4000000
 8008d4e:	d000      	beq.n	8008d52 <LL_DMA_IsActiveFlag_HT7+0xa>
 8008d50:	2001      	movs	r0, #1
}
 8008d52:	4770      	bx	lr

08008d54 <LL_DMA_ClearFlag_TC1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8008d54:	2302      	movs	r3, #2
 8008d56:	6043      	str	r3, [r0, #4]
}
 8008d58:	4770      	bx	lr

08008d5a <LL_DMA_ClearFlag_TC2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8008d5a:	2320      	movs	r3, #32
 8008d5c:	6043      	str	r3, [r0, #4]
}
 8008d5e:	4770      	bx	lr

08008d60 <LL_DMA_ClearFlag_TC3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8008d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d64:	6043      	str	r3, [r0, #4]
}
 8008d66:	4770      	bx	lr

08008d68 <LL_DMA_ClearFlag_TC4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8008d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d6c:	6043      	str	r3, [r0, #4]
}
 8008d6e:	4770      	bx	lr

08008d70 <LL_DMA_ClearFlag_TC5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8008d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d74:	6043      	str	r3, [r0, #4]
}
 8008d76:	4770      	bx	lr

08008d78 <LL_DMA_ClearFlag_TC6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8008d78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d7c:	6043      	str	r3, [r0, #4]
}
 8008d7e:	4770      	bx	lr

08008d80 <LL_DMA_ClearFlag_TC7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8008d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d84:	6043      	str	r3, [r0, #4]
}
 8008d86:	4770      	bx	lr

08008d88 <LL_DMA_ClearFlag_HT1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8008d88:	2304      	movs	r3, #4
 8008d8a:	6043      	str	r3, [r0, #4]
}
 8008d8c:	4770      	bx	lr

08008d8e <LL_DMA_ClearFlag_HT2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF2);
 8008d8e:	2340      	movs	r3, #64	; 0x40
 8008d90:	6043      	str	r3, [r0, #4]
}
 8008d92:	4770      	bx	lr

08008d94 <LL_DMA_ClearFlag_HT3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 8008d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d98:	6043      	str	r3, [r0, #4]
}
 8008d9a:	4770      	bx	lr

08008d9c <LL_DMA_ClearFlag_HT4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF4);
 8008d9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008da0:	6043      	str	r3, [r0, #4]
}
 8008da2:	4770      	bx	lr

08008da4 <LL_DMA_ClearFlag_HT5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 8008da4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008da8:	6043      	str	r3, [r0, #4]
}
 8008daa:	4770      	bx	lr

08008dac <LL_DMA_ClearFlag_HT6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8008dac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008db0:	6043      	str	r3, [r0, #4]
}
 8008db2:	4770      	bx	lr

08008db4 <LL_DMA_ClearFlag_HT7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
 8008db4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008db8:	6043      	str	r3, [r0, #4]
}
 8008dba:	4770      	bx	lr

08008dbc <LL_DMA_ClearFlag_TE1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8008dbc:	2308      	movs	r3, #8
 8008dbe:	6043      	str	r3, [r0, #4]
}
 8008dc0:	4770      	bx	lr

08008dc2 <LL_DMA_ClearFlag_TE2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 8008dc2:	2380      	movs	r3, #128	; 0x80
 8008dc4:	6043      	str	r3, [r0, #4]
}
 8008dc6:	4770      	bx	lr

08008dc8 <LL_DMA_ClearFlag_TE3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 8008dc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008dcc:	6043      	str	r3, [r0, #4]
}
 8008dce:	4770      	bx	lr

08008dd0 <LL_DMA_ClearFlag_TE4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
 8008dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dd4:	6043      	str	r3, [r0, #4]
}
 8008dd6:	4770      	bx	lr

08008dd8 <LL_DMA_ClearFlag_TE5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
 8008dd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ddc:	6043      	str	r3, [r0, #4]
}
 8008dde:	4770      	bx	lr

08008de0 <LL_DMA_ClearFlag_TE6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF6);
 8008de0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008de4:	6043      	str	r3, [r0, #4]
}
 8008de6:	4770      	bx	lr

08008de8 <LL_DMA_ClearFlag_TE7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF7);
 8008de8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008dec:	6043      	str	r3, [r0, #4]
}
 8008dee:	4770      	bx	lr

08008df0 <stm32_dma_dump_stream_irq>:
}
 8008df0:	4770      	bx	lr

08008df2 <stm32_dma_clear_stream_irq>:
{
 8008df2:	b508      	push	{r3, lr}
	dma_stm32_clear_te(dma, id);
 8008df4:	f7f9 fcd4 	bl	80027a0 <dma_stm32_clear_te>
}
 8008df8:	bd08      	pop	{r3, pc}

08008dfa <stm32_dma_is_unexpected_irq_happened>:
}
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	4770      	bx	lr

08008dfe <gpio_stm32_isr>:
{
 8008dfe:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8008e00:	684e      	ldr	r6, [r1, #4]
 8008e02:	2501      	movs	r5, #1
 8008e04:	4085      	lsls	r5, r0
	return list->head;
 8008e06:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8008e08:	b119      	cbz	r1, 8008e12 <gpio_stm32_isr+0x14>
 8008e0a:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 8008e0c:	b149      	cbz	r1, 8008e22 <gpio_stm32_isr+0x24>
	return node->next;
 8008e0e:	680c      	ldr	r4, [r1, #0]
 8008e10:	e007      	b.n	8008e22 <gpio_stm32_isr+0x24>
 8008e12:	460c      	mov	r4, r1
 8008e14:	e005      	b.n	8008e22 <gpio_stm32_isr+0x24>
 8008e16:	b164      	cbz	r4, 8008e32 <gpio_stm32_isr+0x34>
 8008e18:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8008e1a:	b104      	cbz	r4, 8008e1e <gpio_stm32_isr+0x20>
	return node->next;
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	4621      	mov	r1, r4
 8008e20:	461c      	mov	r4, r3
 8008e22:	b141      	cbz	r1, 8008e36 <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 8008e24:	688a      	ldr	r2, [r1, #8]
 8008e26:	402a      	ands	r2, r5
 8008e28:	d0f5      	beq.n	8008e16 <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8008e2a:	684b      	ldr	r3, [r1, #4]
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	4798      	blx	r3
 8008e30:	e7f1      	b.n	8008e16 <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8008e32:	4623      	mov	r3, r4
 8008e34:	e7f3      	b.n	8008e1e <gpio_stm32_isr+0x20>
}
 8008e36:	bd70      	pop	{r4, r5, r6, pc}

08008e38 <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 8008e38:	f410 7f00 	tst.w	r0, #512	; 0x200
 8008e3c:	d01b      	beq.n	8008e76 <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8008e3e:	2310      	movs	r3, #16
 8008e40:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8008e42:	f010 0f02 	tst.w	r0, #2
 8008e46:	d004      	beq.n	8008e52 <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8008e48:	f010 0f04 	tst.w	r0, #4
 8008e4c:	d02c      	beq.n	8008ea8 <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8008e4e:	2350      	movs	r3, #80	; 0x50
 8008e50:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 8008e52:	f010 0310 	ands.w	r3, r0, #16
 8008e56:	d005      	beq.n	8008e64 <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8008e58:	680b      	ldr	r3, [r1, #0]
 8008e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e5e:	600b      	str	r3, [r1, #0]
	return 0;
 8008e60:	2000      	movs	r0, #0
 8008e62:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8008e64:	f010 0020 	ands.w	r0, r0, #32
 8008e68:	d020      	beq.n	8008eac <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8008e6a:	680a      	ldr	r2, [r1, #0]
 8008e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e70:	600a      	str	r2, [r1, #0]
	return 0;
 8008e72:	4618      	mov	r0, r3
 8008e74:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 8008e76:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008e7a:	d011      	beq.n	8008ea0 <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 8008e80:	f010 0310 	ands.w	r3, r0, #16
 8008e84:	d004      	beq.n	8008e90 <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8008e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e8a:	600b      	str	r3, [r1, #0]
	return 0;
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8008e90:	f010 0020 	ands.w	r0, r0, #32
 8008e94:	d00a      	beq.n	8008eac <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8008e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e9a:	600a      	str	r2, [r1, #0]
	return 0;
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8008ea0:	2330      	movs	r3, #48	; 0x30
 8008ea2:	600b      	str	r3, [r1, #0]
	return 0;
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	4770      	bx	lr
				return -ENOTSUP;
 8008ea8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8008eac:	4770      	bx	lr

08008eae <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8008eae:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008eb0:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8008eb2:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8008eb4:	600b      	str	r3, [r1, #0]
}
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	4770      	bx	lr

08008eba <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8008eba:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008ebc:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8008ebe:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8008ec0:	4042      	eors	r2, r0
 8008ec2:	400a      	ands	r2, r1
 8008ec4:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8008ec6:	615a      	str	r2, [r3, #20]
}
 8008ec8:	2000      	movs	r0, #0
 8008eca:	4770      	bx	lr

08008ecc <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8008ecc:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008ece:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8008ed0:	6199      	str	r1, [r3, #24]
}
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	4770      	bx	lr

08008ed6 <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8008ed6:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008ed8:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8008eda:	6299      	str	r1, [r3, #40]	; 0x28
}
 8008edc:	2000      	movs	r0, #0
 8008ede:	4770      	bx	lr

08008ee0 <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 8008ee0:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008ee2:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8008ee4:	6953      	ldr	r3, [r2, #20]
 8008ee6:	404b      	eors	r3, r1
 8008ee8:	6153      	str	r3, [r2, #20]
}
 8008eea:	2000      	movs	r0, #0
 8008eec:	4770      	bx	lr

08008eee <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 8008eee:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 8008ef0:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 8008ef2:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 8008ef6:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 8008ef8:	b1fb      	cbz	r3, 8008f3a <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008efa:	2000      	movs	r0, #0
 8008efc:	e00d      	b.n	8008f1a <gpio_stm32_manage_callback+0x2c>
	return node->next;
 8008efe:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 8008f00:	60a3      	str	r3, [r4, #8]
	return list->tail;
 8008f02:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 8008f06:	4281      	cmp	r1, r0
 8008f08:	d112      	bne.n	8008f30 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 8008f0a:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8008f0e:	e00f      	b.n	8008f30 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 8008f10:	f8cc 0004 	str.w	r0, [ip, #4]
}
 8008f14:	e00c      	b.n	8008f30 <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008f16:	4618      	mov	r0, r3
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	b163      	cbz	r3, 8008f36 <gpio_stm32_manage_callback+0x48>
 8008f1c:	4299      	cmp	r1, r3
 8008f1e:	d1fa      	bne.n	8008f16 <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d0ec      	beq.n	8008efe <gpio_stm32_manage_callback+0x10>
	return node->next;
 8008f24:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 8008f26:	6003      	str	r3, [r0, #0]
	return list->tail;
 8008f28:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 8008f2c:	4299      	cmp	r1, r3
 8008f2e:	d0ef      	beq.n	8008f10 <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 8008f30:	2300      	movs	r3, #0
 8008f32:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008f34:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 8008f36:	b903      	cbnz	r3, 8008f3a <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 8008f38:	b162      	cbz	r2, 8008f54 <gpio_stm32_manage_callback+0x66>
	if (set) {
 8008f3a:	b172      	cbz	r2, 8008f5a <gpio_stm32_manage_callback+0x6c>
	return list->head;
 8008f3c:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 8008f3e:	600b      	str	r3, [r1, #0]
	list->head = node;
 8008f40:	60a1      	str	r1, [r4, #8]
	return list->tail;
 8008f42:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 8008f46:	b10b      	cbz	r3, 8008f4c <gpio_stm32_manage_callback+0x5e>
	return 0;
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e007      	b.n	8008f5c <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 8008f4c:	f8cc 1004 	str.w	r1, [ip, #4]
 8008f50:	2000      	movs	r0, #0
}
 8008f52:	e003      	b.n	8008f5c <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 8008f54:	f06f 0015 	mvn.w	r0, #21
 8008f58:	e000      	b.n	8008f5c <gpio_stm32_manage_callback+0x6e>
	return 0;
 8008f5a:	2000      	movs	r0, #0
}
 8008f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <gpio_stm32_configure_raw>:
{
 8008f62:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8008f64:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008f66:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8008f68:	2001      	movs	r0, #1
 8008f6a:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8008f6c:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8008f70:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008f74:	6865      	ldr	r5, [r4, #4]
 8008f76:	ea25 0500 	bic.w	r5, r5, r0
 8008f7a:	408e      	lsls	r6, r1
 8008f7c:	4335      	orrs	r5, r6
 8008f7e:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8008f80:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008f84:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f86:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8008f8a:	2d00      	cmp	r5, #0
 8008f8c:	d04a      	beq.n	8009024 <gpio_stm32_configure_raw+0xc2>
  return __builtin_clz(value);
 8008f8e:	fab5 f585 	clz	r5, r5
 8008f92:	006d      	lsls	r5, r5, #1
 8008f94:	2703      	movs	r7, #3
 8008f96:	fa07 f505 	lsl.w	r5, r7, r5
 8008f9a:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f9e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8008fa2:	2d00      	cmp	r5, #0
 8008fa4:	d040      	beq.n	8009028 <gpio_stm32_configure_raw+0xc6>
  return __builtin_clz(value);
 8008fa6:	fab5 f585 	clz	r5, r5
 8008faa:	006d      	lsls	r5, r5, #1
 8008fac:	fa0e f505 	lsl.w	r5, lr, r5
 8008fb0:	4335      	orrs	r5, r6
 8008fb2:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8008fb4:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008fb8:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fba:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8008fbe:	b3ad      	cbz	r5, 800902c <gpio_stm32_configure_raw+0xca>
  return __builtin_clz(value);
 8008fc0:	fab5 f585 	clz	r5, r5
 8008fc4:	006d      	lsls	r5, r5, #1
 8008fc6:	f04f 0e03 	mov.w	lr, #3
 8008fca:	fa0e f505 	lsl.w	r5, lr, r5
 8008fce:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fd2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8008fd6:	b35d      	cbz	r5, 8009030 <gpio_stm32_configure_raw+0xce>
  return __builtin_clz(value);
 8008fd8:	fab5 f585 	clz	r5, r5
 8008fdc:	006d      	lsls	r5, r5, #1
 8008fde:	fa02 f505 	lsl.w	r5, r2, r5
 8008fe2:	ea4e 0505 	orr.w	r5, lr, r5
 8008fe6:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 8008fe8:	f1bc 0f20 	cmp.w	ip, #32
 8008fec:	d022      	beq.n	8009034 <gpio_stm32_configure_raw+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8008fee:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008ff2:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ff4:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d052      	beq.n	80090a2 <gpio_stm32_configure_raw+0x140>
  return __builtin_clz(value);
 8008ffc:	fab3 f383 	clz	r3, r3
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	2103      	movs	r1, #3
 8009004:	fa01 f303 	lsl.w	r3, r1, r3
 8009008:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800900c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8009010:	2800      	cmp	r0, #0
 8009012:	d048      	beq.n	80090a6 <gpio_stm32_configure_raw+0x144>
  return __builtin_clz(value);
 8009014:	fab0 f080 	clz	r0, r0
 8009018:	0040      	lsls	r0, r0, #1
 800901a:	fa0c f000 	lsl.w	r0, ip, r0
 800901e:	4318      	orrs	r0, r3
 8009020:	6020      	str	r0, [r4, #0]
}
 8009022:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8009024:	2520      	movs	r5, #32
 8009026:	e7b4      	b.n	8008f92 <gpio_stm32_configure_raw+0x30>
 8009028:	2520      	movs	r5, #32
 800902a:	e7be      	b.n	8008faa <gpio_stm32_configure_raw+0x48>
 800902c:	2520      	movs	r5, #32
 800902e:	e7c9      	b.n	8008fc4 <gpio_stm32_configure_raw+0x62>
 8009030:	2520      	movs	r5, #32
 8009032:	e7d3      	b.n	8008fdc <gpio_stm32_configure_raw+0x7a>
		if (pin < 8) {
 8009034:	2907      	cmp	r1, #7
 8009036:	dc19      	bgt.n	800906c <gpio_stm32_configure_raw+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009038:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800903a:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800903e:	b18a      	cbz	r2, 8009064 <gpio_stm32_configure_raw+0x102>
  return __builtin_clz(value);
 8009040:	fab2 f282 	clz	r2, r2
 8009044:	0092      	lsls	r2, r2, #2
 8009046:	250f      	movs	r5, #15
 8009048:	fa05 f202 	lsl.w	r2, r5, r2
 800904c:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009050:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8009054:	b142      	cbz	r2, 8009068 <gpio_stm32_configure_raw+0x106>
  return __builtin_clz(value);
 8009056:	fab2 f282 	clz	r2, r2
 800905a:	0092      	lsls	r2, r2, #2
 800905c:	4093      	lsls	r3, r2
 800905e:	430b      	orrs	r3, r1
 8009060:	6223      	str	r3, [r4, #32]
}
 8009062:	e7c4      	b.n	8008fee <gpio_stm32_configure_raw+0x8c>
    return 32U;
 8009064:	2220      	movs	r2, #32
 8009066:	e7ed      	b.n	8009044 <gpio_stm32_configure_raw+0xe2>
 8009068:	2220      	movs	r2, #32
 800906a:	e7f6      	b.n	800905a <gpio_stm32_configure_raw+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800906c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800906e:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009070:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8009074:	b189      	cbz	r1, 800909a <gpio_stm32_configure_raw+0x138>
  return __builtin_clz(value);
 8009076:	fab1 f181 	clz	r1, r1
 800907a:	0089      	lsls	r1, r1, #2
 800907c:	260f      	movs	r6, #15
 800907e:	fa06 f101 	lsl.w	r1, r6, r1
 8009082:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009086:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800908a:	b142      	cbz	r2, 800909e <gpio_stm32_configure_raw+0x13c>
  return __builtin_clz(value);
 800908c:	fab2 f282 	clz	r2, r2
 8009090:	0092      	lsls	r2, r2, #2
 8009092:	4093      	lsls	r3, r2
 8009094:	430b      	orrs	r3, r1
 8009096:	6263      	str	r3, [r4, #36]	; 0x24
}
 8009098:	e7a9      	b.n	8008fee <gpio_stm32_configure_raw+0x8c>
    return 32U;
 800909a:	2120      	movs	r1, #32
 800909c:	e7ed      	b.n	800907a <gpio_stm32_configure_raw+0x118>
 800909e:	2220      	movs	r2, #32
 80090a0:	e7f6      	b.n	8009090 <gpio_stm32_configure_raw+0x12e>
 80090a2:	2320      	movs	r3, #32
 80090a4:	e7ac      	b.n	8009000 <gpio_stm32_configure_raw+0x9e>
 80090a6:	2020      	movs	r0, #32
 80090a8:	e7b6      	b.n	8009018 <gpio_stm32_configure_raw+0xb6>

080090aa <gpio_stm32_config>:
{
 80090aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ac:	b083      	sub	sp, #12
 80090ae:	4607      	mov	r7, r0
 80090b0:	460d      	mov	r5, r1
 80090b2:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 80090b4:	a901      	add	r1, sp, #4
 80090b6:	4610      	mov	r0, r2
 80090b8:	f7ff febe 	bl	8008e38 <gpio_stm32_flags_to_conf>
	if (err != 0) {
 80090bc:	4606      	mov	r6, r0
 80090be:	b970      	cbnz	r0, 80090de <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 80090c0:	f414 7f00 	tst.w	r4, #512	; 0x200
 80090c4:	d005      	beq.n	80090d2 <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80090c6:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80090ca:	d10b      	bne.n	80090e4 <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 80090cc:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80090d0:	d10e      	bne.n	80090f0 <gpio_stm32_config+0x46>
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 80090d2:	2300      	movs	r3, #0
 80090d4:	9a01      	ldr	r2, [sp, #4]
 80090d6:	4629      	mov	r1, r5
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ff42 	bl	8008f62 <gpio_stm32_configure_raw>
}
 80090de:	4630      	mov	r0, r6
 80090e0:	b003      	add	sp, #12
 80090e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80090e4:	2101      	movs	r1, #1
 80090e6:	40a9      	lsls	r1, r5
 80090e8:	4638      	mov	r0, r7
 80090ea:	f7ff feef 	bl	8008ecc <gpio_stm32_port_set_bits_raw>
 80090ee:	e7f0      	b.n	80090d2 <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 80090f0:	2101      	movs	r1, #1
 80090f2:	40a9      	lsls	r1, r5
 80090f4:	4638      	mov	r0, r7
 80090f6:	f7ff feee 	bl	8008ed6 <gpio_stm32_port_clear_bits_raw>
 80090fa:	e7ea      	b.n	80090d2 <gpio_stm32_config+0x28>

080090fc <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 80090fc:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 80090fe:	6902      	ldr	r2, [r0, #16]
	int ret;

	data->dev = dev;
 8009100:	6050      	str	r0, [r2, #4]
	/* Cf: L4/L5 RM, Chapter "Independent I/O supply rail" */
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
 8009102:	2101      	movs	r1, #1
 8009104:	f7f9 fc00 	bl	8002908 <gpio_stm32_clock_request>
	if (ret < 0) {
 8009108:	2800      	cmp	r0, #0
 800910a:	db00      	blt.n	800910e <gpio_stm32_init+0x12>
	}

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
 800910c:	2000      	movs	r0, #0
}
 800910e:	bd08      	pop	{r3, pc}

08009110 <gpio_stm32_configure>:
{
 8009110:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 8009112:	f7ff ff26 	bl	8008f62 <gpio_stm32_configure_raw>
}
 8009116:	2000      	movs	r0, #0
 8009118:	bd08      	pop	{r3, pc}

0800911a <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 800911a:	6d83      	ldr	r3, [r0, #88]	; 0x58
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800911c:	b91b      	cbnz	r3, 8009126 <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 800911e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8009120:	b91b      	cbnz	r3, 800912a <spi_stm32_transfer_ongoing+0x10>
 8009122:	2000      	movs	r0, #0
 8009124:	4770      	bx	lr
 8009126:	2001      	movs	r0, #1
 8009128:	4770      	bx	lr
 800912a:	2001      	movs	r0, #1
}
 800912c:	4770      	bx	lr

0800912e <spi_stm32_get_err>:
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 800912e:	6883      	ldr	r3, [r0, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8009130:	f413 7fb8 	tst.w	r3, #368	; 0x170
 8009134:	d101      	bne.n	800913a <spi_stm32_get_err+0xc>
	return 0;
 8009136:	2000      	movs	r0, #0
 8009138:	4770      	bx	lr
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 800913a:	6883      	ldr	r3, [r0, #8]
 800913c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009140:	d00a      	beq.n	8009158 <spi_stm32_get_err+0x2a>
{
 8009142:	b082      	sub	sp, #8
  tmpreg = SPIx->DR;
 8009144:	68c3      	ldr	r3, [r0, #12]
 8009146:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8009148:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 800914a:	6883      	ldr	r3, [r0, #8]
 800914c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800914e:	9b01      	ldr	r3, [sp, #4]
		return -EIO;
 8009150:	f06f 0004 	mvn.w	r0, #4
}
 8009154:	b002      	add	sp, #8
 8009156:	4770      	bx	lr
		return -EIO;
 8009158:	f06f 0004 	mvn.w	r0, #4
}
 800915c:	4770      	bx	lr

0800915e <dma_callback>:
{
 800915e:	b508      	push	{r3, lr}
	if (status != 0) {
 8009160:	b143      	cbz	r3, 8009174 <dma_callback+0x16>
		data->status_flags |= SPI_STM32_DMA_ERROR_FLAG;
 8009162:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 8009164:	f043 0301 	orr.w	r3, r3, #1
 8009168:	67cb      	str	r3, [r1, #124]	; 0x7c
	k_sem_give(&data->status_sem);
 800916a:	f101 0064 	add.w	r0, r1, #100	; 0x64
	z_impl_k_sem_give(sem);
 800916e:	f7fc ffdb 	bl	8006128 <z_impl_k_sem_give>
}
 8009172:	bd08      	pop	{r3, pc}
		if (channel == data->dma_tx.channel) {
 8009174:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 8009178:	4293      	cmp	r3, r2
 800917a:	d008      	beq.n	800918e <dma_callback+0x30>
		} else if (channel == data->dma_rx.channel) {
 800917c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8009180:	4293      	cmp	r3, r2
 8009182:	d009      	beq.n	8009198 <dma_callback+0x3a>
			data->status_flags |= SPI_STM32_DMA_ERROR_FLAG;
 8009184:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 8009186:	f043 0301 	orr.w	r3, r3, #1
 800918a:	67cb      	str	r3, [r1, #124]	; 0x7c
 800918c:	e7ed      	b.n	800916a <dma_callback+0xc>
			data->status_flags |= SPI_STM32_DMA_TX_DONE_FLAG;
 800918e:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 8009190:	f043 0304 	orr.w	r3, r3, #4
 8009194:	67cb      	str	r3, [r1, #124]	; 0x7c
 8009196:	e7e8      	b.n	800916a <dma_callback+0xc>
			data->status_flags |= SPI_STM32_DMA_RX_DONE_FLAG;
 8009198:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 800919a:	f043 0302 	orr.w	r3, r3, #2
 800919e:	67cb      	str	r3, [r1, #124]	; 0x7c
 80091a0:	e7e3      	b.n	800916a <dma_callback+0xc>

080091a2 <wait_dma_rx_tx_done>:
{
 80091a2:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 80091a4:	6904      	ldr	r4, [r0, #16]
		res = k_sem_take(&data->status_sem, K_MSEC(1000));
 80091a6:	f104 0064 	add.w	r0, r4, #100	; 0x64
	return z_impl_k_sem_take(sem, timeout);
 80091aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80091ae:	2300      	movs	r3, #0
 80091b0:	f7fc ffe2 	bl	8006178 <z_impl_k_sem_take>
		if (res != 0) {
 80091b4:	4602      	mov	r2, r0
 80091b6:	b950      	cbnz	r0, 80091ce <wait_dma_rx_tx_done+0x2c>
		if (data->status_flags & SPI_STM32_DMA_ERROR_FLAG) {
 80091b8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80091ba:	f013 0f01 	tst.w	r3, #1
 80091be:	d104      	bne.n	80091ca <wait_dma_rx_tx_done+0x28>
		if (data->status_flags & SPI_STM32_DMA_DONE_FLAG) {
 80091c0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80091c2:	f013 0f06 	tst.w	r3, #6
 80091c6:	d0ee      	beq.n	80091a6 <wait_dma_rx_tx_done+0x4>
 80091c8:	e001      	b.n	80091ce <wait_dma_rx_tx_done+0x2c>
			return -EIO;
 80091ca:	f06f 0204 	mvn.w	r2, #4
}
 80091ce:	4610      	mov	r0, r2
 80091d0:	bd10      	pop	{r4, pc}

080091d2 <spi_dma_move_buffers>:
{
 80091d2:	b570      	push	{r4, r5, r6, lr}
 80091d4:	4604      	mov	r4, r0
 80091d6:	460d      	mov	r5, r1
	struct spi_stm32_data *data = dev->data;
 80091d8:	6906      	ldr	r6, [r0, #16]
	dma_segment_len = len / data->dma_rx.dma_cfg.dest_data_size;
 80091da:	f8b6 208e 	ldrh.w	r2, [r6, #142]	; 0x8e
	ret = spi_stm32_dma_rx_load(dev, data->ctx.rx_buf, dma_segment_len);
 80091de:	fbb1 f2f2 	udiv	r2, r1, r2
 80091e2:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 80091e4:	f7f9 fd02 	bl	8002bec <spi_stm32_dma_rx_load>
	if (ret != 0) {
 80091e8:	b100      	cbz	r0, 80091ec <spi_dma_move_buffers+0x1a>
}
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
	dma_segment_len = len / data->dma_tx.dma_cfg.source_data_size;
 80091ec:	f8b6 20d8 	ldrh.w	r2, [r6, #216]	; 0xd8
	ret = spi_stm32_dma_tx_load(dev, data->ctx.tx_buf, dma_segment_len);
 80091f0:	fbb5 f2f2 	udiv	r2, r5, r2
 80091f4:	6d71      	ldr	r1, [r6, #84]	; 0x54
 80091f6:	4620      	mov	r0, r4
 80091f8:	f7f9 fd60 	bl	8002cbc <spi_stm32_dma_tx_load>
	return ret;
 80091fc:	e7f5      	b.n	80091ea <spi_dma_move_buffers+0x18>

080091fe <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 80091fe:	b508      	push	{r3, lr}
 8009200:	2200      	movs	r2, #0
 8009202:	2105      	movs	r1, #5
 8009204:	2023      	movs	r0, #35	; 0x23
 8009206:	f7f8 fab9 	bl	800177c <z_arm_irq_priority_set>
 800920a:	2023      	movs	r0, #35	; 0x23
 800920c:	f7f8 fa86 	bl	800171c <arch_irq_enable>
 8009210:	bd08      	pop	{r3, pc}

08009212 <spi_stm32_release>:
{
 8009212:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 8009214:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	b1c3      	cbz	r3, 800924c <spi_stm32_release+0x3a>
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	b1b3      	cbz	r3, 800924c <spi_stm32_release+0x3a>
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	b1a2      	cbz	r2, 800924c <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 8009222:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8009224:	f7fd fea0 	bl	8006f68 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 800922c:	6818      	ldr	r0, [r3, #0]
 800922e:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 8009230:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	2301      	movs	r3, #1
 8009236:	408b      	lsls	r3, r1
 8009238:	421a      	tst	r2, r3
 800923a:	d10b      	bne.n	8009254 <spi_stm32_release+0x42>
 800923c:	2300      	movs	r3, #0
	if (value != 0)	{
 800923e:	b15b      	cbz	r3, 8009258 <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8009240:	2301      	movs	r3, #1
 8009242:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8009246:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	4798      	blx	r3
 800924c:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
 800924e:	b153      	cbz	r3, 8009266 <spi_stm32_release+0x54>
}
 8009250:	2000      	movs	r0, #0
 8009252:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 8009254:	2301      	movs	r3, #1
 8009256:	e7f2      	b.n	800923e <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8009258:	2301      	movs	r3, #1
 800925a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800925e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 8009264:	e7f2      	b.n	800924c <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 8009266:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 8009268:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 800926c:	f7fc ff5c 	bl	8006128 <z_impl_k_sem_give>
}
 8009270:	e7ee      	b.n	8009250 <spi_stm32_release+0x3e>

08009272 <spi_stm32_cs_control>:
{
 8009272:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 8009274:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d034      	beq.n	80092e6 <spi_stm32_cs_control+0x74>
 800927c:	689a      	ldr	r2, [r3, #8]
 800927e:	2a00      	cmp	r2, #0
 8009280:	d031      	beq.n	80092e6 <spi_stm32_cs_control+0x74>
 8009282:	6810      	ldr	r0, [r2, #0]
 8009284:	2800      	cmp	r0, #0
 8009286:	d02e      	beq.n	80092e6 <spi_stm32_cs_control+0x74>
		if (on) {
 8009288:	b9c9      	cbnz	r1, 80092be <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 800928a:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 800928c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8009290:	d129      	bne.n	80092e6 <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 8009292:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8009294:	f7fd fe68 	bl	8006f68 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 800929c:	6818      	ldr	r0, [r3, #0]
 800929e:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 80092a0:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	2301      	movs	r3, #1
 80092a6:	408b      	lsls	r3, r1
 80092a8:	421a      	tst	r2, r3
 80092aa:	d126      	bne.n	80092fa <spi_stm32_cs_control+0x88>
 80092ac:	2300      	movs	r3, #0
	if (value != 0)	{
 80092ae:	b333      	cbz	r3, 80092fe <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 80092b0:	2301      	movs	r3, #1
 80092b2:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 80092b6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	4798      	blx	r3
 80092bc:	e013      	b.n	80092e6 <spi_stm32_cs_control+0x74>
	return gpio_pin_set(spec->port, spec->pin, value);
 80092be:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_data *const data =
 80092c0:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	2301      	movs	r3, #1
 80092c6:	408b      	lsls	r3, r1
 80092c8:	421a      	tst	r2, r3
 80092ca:	d10d      	bne.n	80092e8 <spi_stm32_cs_control+0x76>
 80092cc:	2301      	movs	r3, #1
	if (value != 0)	{
 80092ce:	b16b      	cbz	r3, 80092ec <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 80092d0:	2301      	movs	r3, #1
 80092d2:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 80092d6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	6898      	ldr	r0, [r3, #8]
 80092e2:	f7fd fe41 	bl	8006f68 <z_impl_k_busy_wait>
}
 80092e6:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 80092e8:	2300      	movs	r3, #0
 80092ea:	e7f0      	b.n	80092ce <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 80092ec:	2301      	movs	r3, #1
 80092ee:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 80092f2:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	4798      	blx	r3
 80092f8:	e7f0      	b.n	80092dc <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e7d7      	b.n	80092ae <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 80092fe:	2301      	movs	r3, #1
 8009300:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8009304:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	4798      	blx	r3
 800930a:	e7ec      	b.n	80092e6 <spi_stm32_cs_control+0x74>

0800930c <spi_stm32_complete>:
{
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	460e      	mov	r6, r1
	const struct spi_stm32_config *cfg = dev->config;
 8009312:	6842      	ldr	r2, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 8009314:	6894      	ldr	r4, [r2, #8]
	struct spi_stm32_data *data = dev->data;
 8009316:	6905      	ldr	r5, [r0, #16]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8009318:	6863      	ldr	r3, [r4, #4]
 800931a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800931e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8009320:	6863      	ldr	r3, [r4, #4]
 8009322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009326:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8009328:	6863      	ldr	r3, [r4, #4]
 800932a:	f023 0320 	bic.w	r3, r3, #32
 800932e:	6063      	str	r3, [r4, #4]
	spi_stm32_cs_control(dev, false);
 8009330:	2100      	movs	r1, #0
 8009332:	f7ff ff9e 	bl	8009272 <spi_stm32_cs_control>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8009336:	68a3      	ldr	r3, [r4, #8]
 8009338:	f013 0f01 	tst.w	r3, #1
 800933c:	d001      	beq.n	8009342 <spi_stm32_complete+0x36>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 800933e:	68e3      	ldr	r3, [r4, #12]
 8009340:	e7f9      	b.n	8009336 <spi_stm32_complete+0x2a>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8009348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800934c:	d015      	beq.n	800937a <spi_stm32_complete+0x6e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800934e:	68a3      	ldr	r3, [r4, #8]
 8009350:	f013 0f20 	tst.w	r3, #32
 8009354:	d006      	beq.n	8009364 <spi_stm32_complete+0x58>
  tmpreg_sr = SPIx->SR;
 8009356:	68a3      	ldr	r3, [r4, #8]
 8009358:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 800935a:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009362:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800936a:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 800936c:	642e      	str	r6, [r5, #64]	; 0x40
	k_sem_give(&ctx->sync);
 800936e:	f105 0028 	add.w	r0, r5, #40	; 0x28
	z_impl_k_sem_give(sem);
 8009372:	f7fc fed9 	bl	8006128 <z_impl_k_sem_give>
}
 8009376:	b002      	add	sp, #8
 8009378:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800937a:	68a3      	ldr	r3, [r4, #8]
 800937c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009380:	d1fb      	bne.n	800937a <spi_stm32_complete+0x6e>
 8009382:	e7e4      	b.n	800934e <spi_stm32_complete+0x42>

08009384 <transceive>:
{
 8009384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009388:	4605      	mov	r5, r0
 800938a:	4688      	mov	r8, r1
 800938c:	461f      	mov	r7, r3
	const struct spi_stm32_config *cfg = dev->config;
 800938e:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8009390:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8009392:	689e      	ldr	r6, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 8009394:	4691      	mov	r9, r2
 8009396:	b312      	cbz	r2, 80093de <transceive+0x5a>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8009398:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800939c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80093a0:	d004      	beq.n	80093ac <transceive+0x28>
 80093a2:	69a3      	ldr	r3, [r4, #24]
 80093a4:	b913      	cbnz	r3, 80093ac <transceive+0x28>
		(ctx->owner == spi_cfg)) {
 80093a6:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 80093a8:	4598      	cmp	r8, r3
 80093aa:	d009      	beq.n	80093c0 <transceive+0x3c>
	k_sem_take(&ctx->lock, K_FOREVER);
 80093ac:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
 80093b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093b8:	f7fc fede 	bl	8006178 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 80093bc:	f8c4 8004 	str.w	r8, [r4, #4]
	ret = spi_stm32_configure(dev, config);
 80093c0:	4641      	mov	r1, r8
 80093c2:	4628      	mov	r0, r5
 80093c4:	f7f9 fb30 	bl	8002a28 <spi_stm32_configure>
	if (ret) {
 80093c8:	4680      	mov	r8, r0
 80093ca:	b168      	cbz	r0, 80093e8 <transceive+0x64>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	889b      	ldrh	r3, [r3, #4]
 80093d0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80093d4:	f000 8088 	beq.w	80094e8 <transceive+0x164>
}
 80093d8:	4640      	mov	r0, r8
 80093da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 80093de:	2f00      	cmp	r7, #0
 80093e0:	d1da      	bne.n	8009398 <transceive+0x14>
		return 0;
 80093e2:	f04f 0800 	mov.w	r8, #0
 80093e6:	e7f7      	b.n	80093d8 <transceive+0x54>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 80093e8:	f1b9 0f00 	cmp.w	r9, #0
 80093ec:	d00b      	beq.n	8009406 <transceive+0x82>
 80093ee:	f8d9 3000 	ldr.w	r3, [r9]
 80093f2:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 80093f4:	b14b      	cbz	r3, 800940a <transceive+0x86>
 80093f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80093fa:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 80093fc:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8009400:	f104 0148 	add.w	r1, r4, #72	; 0x48
	while (*count) {
 8009404:	e008      	b.n	8009418 <transceive+0x94>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8009406:	464b      	mov	r3, r9
 8009408:	e7f3      	b.n	80093f2 <transceive+0x6e>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800940a:	2300      	movs	r3, #0
 800940c:	e7f5      	b.n	80093fa <transceive+0x76>
		++(*current);
 800940e:	3208      	adds	r2, #8
 8009410:	6002      	str	r2, [r0, #0]
		--(*count);
 8009412:	680b      	ldr	r3, [r1, #0]
 8009414:	3b01      	subs	r3, #1
 8009416:	600b      	str	r3, [r1, #0]
	while (*count) {
 8009418:	680b      	ldr	r3, [r1, #0]
 800941a:	b13b      	cbz	r3, 800942c <transceive+0xa8>
		if (((*current)->len / dfs) != 0) {
 800941c:	6802      	ldr	r2, [r0, #0]
 800941e:	6853      	ldr	r3, [r2, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d0f4      	beq.n	800940e <transceive+0x8a>
			*buf_len = (*current)->len / dfs;
 8009424:	65a3      	str	r3, [r4, #88]	; 0x58
			return (*current)->buf;
 8009426:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	e000      	b.n	800942e <transceive+0xaa>
	*buf_len = 0;
 800942c:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 800942e:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8009430:	b19f      	cbz	r7, 800945a <transceive+0xd6>
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8009436:	b193      	cbz	r3, 800945e <transceive+0xda>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 800943c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8009440:	f104 0150 	add.w	r1, r4, #80	; 0x50
	while (*count) {
 8009444:	680b      	ldr	r3, [r1, #0]
 8009446:	b183      	cbz	r3, 800946a <transceive+0xe6>
		if (((*current)->len / dfs) != 0) {
 8009448:	6802      	ldr	r2, [r0, #0]
 800944a:	6853      	ldr	r3, [r2, #4]
 800944c:	b94b      	cbnz	r3, 8009462 <transceive+0xde>
		++(*current);
 800944e:	3208      	adds	r2, #8
 8009450:	6002      	str	r2, [r0, #0]
		--(*count);
 8009452:	680b      	ldr	r3, [r1, #0]
 8009454:	3b01      	subs	r3, #1
 8009456:	600b      	str	r3, [r1, #0]
 8009458:	e7f4      	b.n	8009444 <transceive+0xc0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800945a:	463b      	mov	r3, r7
 800945c:	e7ea      	b.n	8009434 <transceive+0xb0>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800945e:	2300      	movs	r3, #0
 8009460:	e7eb      	b.n	800943a <transceive+0xb6>
			*buf_len = (*current)->len / dfs;
 8009462:	6623      	str	r3, [r4, #96]	; 0x60
			return (*current)->buf;
 8009464:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	e000      	b.n	800946c <transceive+0xe8>
	*buf_len = 0;
 800946a:	6623      	str	r3, [r4, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
 800946c:	65e3      	str	r3, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	6423      	str	r3, [r4, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8009472:	68b3      	ldr	r3, [r6, #8]
 8009474:	f013 0f01 	tst.w	r3, #1
 8009478:	d001      	beq.n	800947e <transceive+0xfa>
  return (uint8_t)(READ_REG(SPIx->DR));
 800947a:	68f3      	ldr	r3, [r6, #12]
 800947c:	e7f9      	b.n	8009472 <transceive+0xee>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800947e:	6833      	ldr	r3, [r6, #0]
 8009480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009484:	6033      	str	r3, [r6, #0]
	spi_stm32_cs_control(dev, true);
 8009486:	2101      	movs	r1, #1
 8009488:	4628      	mov	r0, r5
 800948a:	f7ff fef2 	bl	8009272 <spi_stm32_cs_control>
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 800948e:	6873      	ldr	r3, [r6, #4]
 8009490:	f043 0320 	orr.w	r3, r3, #32
 8009494:	6073      	str	r3, [r6, #4]
	if (rx_bufs) {
 8009496:	b11f      	cbz	r7, 80094a0 <transceive+0x11c>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8009498:	6873      	ldr	r3, [r6, #4]
 800949a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800949e:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80094a0:	6873      	ldr	r3, [r6, #4]
 80094a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a6:	6073      	str	r3, [r6, #4]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 80094a8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80094aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094ac:	429a      	cmp	r2, r3
 80094ae:	bf38      	it	cc
 80094b0:	461a      	movcc	r2, r3
 80094b2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80094b6:	fb03 f202 	mul.w	r2, r3, r2
			     ctx->config->frequency;
 80094ba:	4620      	mov	r0, r4
 80094bc:	f850 3b28 	ldr.w	r3, [r0], #40
 80094c0:	681b      	ldr	r3, [r3, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 80094c2:	fbb2 f2f3 	udiv	r2, r2, r3
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
 80094c6:	32c8      	adds	r2, #200	; 0xc8
			return t * ((uint64_t)to_hz / from_hz);
 80094c8:	0f91      	lsrs	r1, r2, #30
 80094ca:	0093      	lsls	r3, r2, #2
 80094cc:	189a      	adds	r2, r3, r2
 80094ce:	f141 0300 	adc.w	r3, r1, #0
 80094d2:	1892      	adds	r2, r2, r2
 80094d4:	415b      	adcs	r3, r3
 80094d6:	f7fc fe4f 	bl	8006178 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
 80094da:	b910      	cbnz	r0, 80094e2 <transceive+0x15e>
	status = ctx->sync_status;
 80094dc:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
	return status;
 80094e0:	e774      	b.n	80093cc <transceive+0x48>
		return -ETIMEDOUT;
 80094e2:	f06f 0873 	mvn.w	r8, #115	; 0x73
 80094e6:	e771      	b.n	80093cc <transceive+0x48>
		ctx->owner = NULL;
 80094e8:	2300      	movs	r3, #0
 80094ea:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 80094ec:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 80094f0:	f7fc fe1a 	bl	8006128 <z_impl_k_sem_give>
}
 80094f4:	e770      	b.n	80093d8 <transceive+0x54>

080094f6 <transceive_dma>:
{
 80094f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094fa:	4680      	mov	r8, r0
 80094fc:	460f      	mov	r7, r1
 80094fe:	461e      	mov	r6, r3
 8009500:	f89d 1020 	ldrb.w	r1, [sp, #32]
	const struct spi_stm32_config *cfg = dev->config;
 8009504:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8009506:	6905      	ldr	r5, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8009508:	689c      	ldr	r4, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 800950a:	4691      	mov	r9, r2
 800950c:	b33a      	cbz	r2, 800955e <transceive_dma+0x68>
	if (asynchronous) {
 800950e:	2900      	cmp	r1, #0
 8009510:	f040 812b 	bne.w	800976a <transceive_dma+0x274>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8009514:	88bb      	ldrh	r3, [r7, #4]
 8009516:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800951a:	d004      	beq.n	8009526 <transceive_dma+0x30>
 800951c:	69ab      	ldr	r3, [r5, #24]
 800951e:	b913      	cbnz	r3, 8009526 <transceive_dma+0x30>
		(ctx->owner == spi_cfg)) {
 8009520:	686b      	ldr	r3, [r5, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 8009522:	429f      	cmp	r7, r3
 8009524:	d008      	beq.n	8009538 <transceive_dma+0x42>
	k_sem_take(&ctx->lock, K_FOREVER);
 8009526:	f105 0010 	add.w	r0, r5, #16
	return z_impl_k_sem_take(sem, timeout);
 800952a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800952e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009532:	f7fc fe21 	bl	8006178 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8009536:	606f      	str	r7, [r5, #4]
	k_sem_reset(&data->status_sem);
 8009538:	f105 0064 	add.w	r0, r5, #100	; 0x64
	z_impl_k_sem_reset(sem);
 800953c:	f7fc fe44 	bl	80061c8 <z_impl_k_sem_reset>
	ret = spi_stm32_configure(dev, config);
 8009540:	4639      	mov	r1, r7
 8009542:	4640      	mov	r0, r8
 8009544:	f7f9 fa70 	bl	8002a28 <spi_stm32_configure>
	if (ret) {
 8009548:	4607      	mov	r7, r0
 800954a:	b160      	cbz	r0, 8009566 <transceive_dma+0x70>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	889b      	ldrh	r3, [r3, #4]
 8009550:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009554:	f000 8102 	beq.w	800975c <transceive_dma+0x266>
}
 8009558:	4638      	mov	r0, r7
 800955a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 800955e:	2e00      	cmp	r6, #0
 8009560:	d1d5      	bne.n	800950e <transceive_dma+0x18>
		return 0;
 8009562:	2700      	movs	r7, #0
 8009564:	e7f8      	b.n	8009558 <transceive_dma+0x62>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8009566:	f1b9 0f00 	cmp.w	r9, #0
 800956a:	d015      	beq.n	8009598 <transceive_dma+0xa2>
 800956c:	f8d9 3000 	ldr.w	r3, [r9]
 8009570:	646b      	str	r3, [r5, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8009572:	b19b      	cbz	r3, 800959c <transceive_dma+0xa6>
 8009574:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009578:	64ab      	str	r3, [r5, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800957a:	f105 0044 	add.w	r0, r5, #68	; 0x44
 800957e:	f105 0348 	add.w	r3, r5, #72	; 0x48
	while (*count) {
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	b182      	cbz	r2, 80095a8 <transceive_dma+0xb2>
		if (((*current)->len / dfs) != 0) {
 8009586:	6802      	ldr	r2, [r0, #0]
 8009588:	6851      	ldr	r1, [r2, #4]
 800958a:	b949      	cbnz	r1, 80095a0 <transceive_dma+0xaa>
		++(*current);
 800958c:	3208      	adds	r2, #8
 800958e:	6002      	str	r2, [r0, #0]
		--(*count);
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	3a01      	subs	r2, #1
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	e7f4      	b.n	8009582 <transceive_dma+0x8c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8009598:	464b      	mov	r3, r9
 800959a:	e7e9      	b.n	8009570 <transceive_dma+0x7a>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800959c:	2300      	movs	r3, #0
 800959e:	e7eb      	b.n	8009578 <transceive_dma+0x82>
			*buf_len = (*current)->len / dfs;
 80095a0:	65a9      	str	r1, [r5, #88]	; 0x58
			return (*current)->buf;
 80095a2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	e001      	b.n	80095ac <transceive_dma+0xb6>
	*buf_len = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	65ab      	str	r3, [r5, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 80095ac:	656b      	str	r3, [r5, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 80095ae:	b19e      	cbz	r6, 80095d8 <transceive_dma+0xe2>
 80095b0:	6833      	ldr	r3, [r6, #0]
 80095b2:	64eb      	str	r3, [r5, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 80095b4:	b193      	cbz	r3, 80095dc <transceive_dma+0xe6>
 80095b6:	6873      	ldr	r3, [r6, #4]
 80095b8:	652b      	str	r3, [r5, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 80095ba:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 80095be:	f105 0250 	add.w	r2, r5, #80	; 0x50
	while (*count) {
 80095c2:	6813      	ldr	r3, [r2, #0]
 80095c4:	b183      	cbz	r3, 80095e8 <transceive_dma+0xf2>
		if (((*current)->len / dfs) != 0) {
 80095c6:	6803      	ldr	r3, [r0, #0]
 80095c8:	6859      	ldr	r1, [r3, #4]
 80095ca:	b949      	cbnz	r1, 80095e0 <transceive_dma+0xea>
		++(*current);
 80095cc:	3308      	adds	r3, #8
 80095ce:	6003      	str	r3, [r0, #0]
		--(*count);
 80095d0:	6813      	ldr	r3, [r2, #0]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	6013      	str	r3, [r2, #0]
 80095d6:	e7f4      	b.n	80095c2 <transceive_dma+0xcc>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 80095d8:	4633      	mov	r3, r6
 80095da:	e7ea      	b.n	80095b2 <transceive_dma+0xbc>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	e7eb      	b.n	80095b8 <transceive_dma+0xc2>
			*buf_len = (*current)->len / dfs;
 80095e0:	6629      	str	r1, [r5, #96]	; 0x60
			return (*current)->buf;
 80095e2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	e000      	b.n	80095ea <transceive_dma+0xf4>
	*buf_len = 0;
 80095e8:	662b      	str	r3, [r5, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
 80095ea:	65eb      	str	r3, [r5, #92]	; 0x5c
	ctx->sync_status = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	642b      	str	r3, [r5, #64]	; 0x40
	spi_stm32_cs_control(dev, true);
 80095f0:	2101      	movs	r1, #1
 80095f2:	4640      	mov	r0, r8
 80095f4:	f7ff fe3d 	bl	8009272 <spi_stm32_cs_control>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095fe:	6023      	str	r3, [r4, #0]
}
 8009600:	e031      	b.n	8009666 <transceive_dma+0x170>
		} else if (data->ctx.tx_len == 0) {
 8009602:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009604:	2b00      	cmp	r3, #0
 8009606:	d036      	beq.n	8009676 <transceive_dma+0x180>
			dma_len = MIN(data->ctx.tx_len, data->ctx.rx_len);
 8009608:	429e      	cmp	r6, r3
 800960a:	bf28      	it	cs
 800960c:	461e      	movcs	r6, r3
 800960e:	e032      	b.n	8009676 <transceive_dma+0x180>
		++ctx->current_tx;
 8009610:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8009612:	3308      	adds	r3, #8
 8009614:	646b      	str	r3, [r5, #68]	; 0x44
		--ctx->tx_count;
 8009616:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8009618:	3b01      	subs	r3, #1
 800961a:	64ab      	str	r3, [r5, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800961c:	f105 0144 	add.w	r1, r5, #68	; 0x44
 8009620:	f105 0248 	add.w	r2, r5, #72	; 0x48
	while (*count) {
 8009624:	e004      	b.n	8009630 <transceive_dma+0x13a>
		++(*current);
 8009626:	3308      	adds	r3, #8
 8009628:	600b      	str	r3, [r1, #0]
		--(*count);
 800962a:	6813      	ldr	r3, [r2, #0]
 800962c:	3b01      	subs	r3, #1
 800962e:	6013      	str	r3, [r2, #0]
	while (*count) {
 8009630:	6813      	ldr	r3, [r2, #0]
 8009632:	b13b      	cbz	r3, 8009644 <transceive_dma+0x14e>
		if (((*current)->len / dfs) != 0) {
 8009634:	680b      	ldr	r3, [r1, #0]
 8009636:	6858      	ldr	r0, [r3, #4]
 8009638:	2800      	cmp	r0, #0
 800963a:	d0f4      	beq.n	8009626 <transceive_dma+0x130>
			*buf_len = (*current)->len / dfs;
 800963c:	65a8      	str	r0, [r5, #88]	; 0x58
			return (*current)->buf;
 800963e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	e000      	b.n	8009646 <transceive_dma+0x150>
	*buf_len = 0;
 8009644:	65ab      	str	r3, [r5, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8009646:	656b      	str	r3, [r5, #84]	; 0x54
 8009648:	e001      	b.n	800964e <transceive_dma+0x158>
		ctx->tx_buf += dfs * len;
 800964a:	4433      	add	r3, r6
 800964c:	656b      	str	r3, [r5, #84]	; 0x54
	if (!ctx->rx_len) {
 800964e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8009650:	b14b      	cbz	r3, 8009666 <transceive_dma+0x170>
	if (len > ctx->rx_len) {
 8009652:	429e      	cmp	r6, r3
 8009654:	d807      	bhi.n	8009666 <transceive_dma+0x170>
	ctx->rx_len -= len;
 8009656:	1b9b      	subs	r3, r3, r6
 8009658:	662b      	str	r3, [r5, #96]	; 0x60
	if (!ctx->rx_len) {
 800965a:	2b00      	cmp	r3, #0
 800965c:	d043      	beq.n	80096e6 <transceive_dma+0x1f0>
	} else if (ctx->rx_buf) {
 800965e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8009660:	b10b      	cbz	r3, 8009666 <transceive_dma+0x170>
		ctx->rx_buf += dfs * len;
 8009662:	4433      	add	r3, r6
 8009664:	65eb      	str	r3, [r5, #92]	; 0x5c
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
 8009666:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 8009668:	b916      	cbnz	r6, 8009670 <transceive_dma+0x17a>
 800966a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800966c:	2b00      	cmp	r3, #0
 800966e:	d056      	beq.n	800971e <transceive_dma+0x228>
		if (data->ctx.rx_len == 0) {
 8009670:	2e00      	cmp	r6, #0
 8009672:	d1c6      	bne.n	8009602 <transceive_dma+0x10c>
			dma_len = data->ctx.tx_len;
 8009674:	6dae      	ldr	r6, [r5, #88]	; 0x58
		data->status_flags = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	67eb      	str	r3, [r5, #124]	; 0x7c
		ret = spi_dma_move_buffers(dev, dma_len);
 800967a:	4631      	mov	r1, r6
 800967c:	4640      	mov	r0, r8
 800967e:	f7ff fda8 	bl	80091d2 <spi_dma_move_buffers>
		if (ret != 0) {
 8009682:	4607      	mov	r7, r0
 8009684:	2800      	cmp	r0, #0
 8009686:	d14a      	bne.n	800971e <transceive_dma+0x228>
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8009688:	6863      	ldr	r3, [r4, #4]
 800968a:	f043 0301 	orr.w	r3, r3, #1
 800968e:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8009690:	6863      	ldr	r3, [r4, #4]
 8009692:	f043 0302 	orr.w	r3, r3, #2
 8009696:	6063      	str	r3, [r4, #4]
		ret = wait_dma_rx_tx_done(dev);
 8009698:	4640      	mov	r0, r8
 800969a:	f7ff fd82 	bl	80091a2 <wait_dma_rx_tx_done>
		if (ret != 0) {
 800969e:	4607      	mov	r7, r0
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d13c      	bne.n	800971e <transceive_dma+0x228>
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 80096a4:	68a3      	ldr	r3, [r4, #8]
		while (LL_SPI_GetTxFIFOLevel(spi) > 0) {
 80096a6:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 80096aa:	d1fb      	bne.n	80096a4 <transceive_dma+0x1ae>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80096ac:	68a3      	ldr	r3, [r4, #8]
 80096ae:	f013 0f02 	tst.w	r3, #2
 80096b2:	d0fb      	beq.n	80096ac <transceive_dma+0x1b6>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80096b4:	68a3      	ldr	r3, [r4, #8]
 80096b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096ba:	d1f7      	bne.n	80096ac <transceive_dma+0x1b6>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 80096bc:	6863      	ldr	r3, [r4, #4]
 80096be:	f023 0302 	bic.w	r3, r3, #2
 80096c2:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 80096c4:	6863      	ldr	r3, [r4, #4]
 80096c6:	f023 0301 	bic.w	r3, r3, #1
 80096ca:	6063      	str	r3, [r4, #4]
	if (!ctx->tx_len) {
 80096cc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d0bd      	beq.n	800964e <transceive_dma+0x158>
	if (len > ctx->tx_len) {
 80096d2:	429e      	cmp	r6, r3
 80096d4:	d8bb      	bhi.n	800964e <transceive_dma+0x158>
	ctx->tx_len -= len;
 80096d6:	1b9b      	subs	r3, r3, r6
 80096d8:	65ab      	str	r3, [r5, #88]	; 0x58
	if (!ctx->tx_len) {
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d098      	beq.n	8009610 <transceive_dma+0x11a>
	} else if (ctx->tx_buf) {
 80096de:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1b2      	bne.n	800964a <transceive_dma+0x154>
 80096e4:	e7b3      	b.n	800964e <transceive_dma+0x158>
		++ctx->current_rx;
 80096e6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80096e8:	3308      	adds	r3, #8
 80096ea:	64eb      	str	r3, [r5, #76]	; 0x4c
		--ctx->rx_count;
 80096ec:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80096ee:	3b01      	subs	r3, #1
 80096f0:	652b      	str	r3, [r5, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 80096f2:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80096f6:	f105 0250 	add.w	r2, r5, #80	; 0x50
	while (*count) {
 80096fa:	6813      	ldr	r3, [r2, #0]
 80096fc:	b163      	cbz	r3, 8009718 <transceive_dma+0x222>
		if (((*current)->len / dfs) != 0) {
 80096fe:	680b      	ldr	r3, [r1, #0]
 8009700:	6858      	ldr	r0, [r3, #4]
 8009702:	b928      	cbnz	r0, 8009710 <transceive_dma+0x21a>
		++(*current);
 8009704:	3308      	adds	r3, #8
 8009706:	600b      	str	r3, [r1, #0]
		--(*count);
 8009708:	6813      	ldr	r3, [r2, #0]
 800970a:	3b01      	subs	r3, #1
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	e7f4      	b.n	80096fa <transceive_dma+0x204>
			*buf_len = (*current)->len / dfs;
 8009710:	6628      	str	r0, [r5, #96]	; 0x60
			return (*current)->buf;
 8009712:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	e000      	b.n	800971a <transceive_dma+0x224>
	*buf_len = 0;
 8009718:	662b      	str	r3, [r5, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800971a:	65eb      	str	r3, [r5, #92]	; 0x5c
 800971c:	e7a3      	b.n	8009666 <transceive_dma+0x170>
	spi_stm32_complete(dev, ret);
 800971e:	4639      	mov	r1, r7
 8009720:	4640      	mov	r0, r8
 8009722:	f7ff fdf3 	bl	800930c <spi_stm32_complete>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800972c:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800972e:	6863      	ldr	r3, [r4, #4]
 8009730:	f023 0302 	bic.w	r3, r3, #2
 8009734:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8009736:	6863      	ldr	r3, [r4, #4]
 8009738:	f023 0301 	bic.w	r3, r3, #1
 800973c:	6063      	str	r3, [r4, #4]
	dma_stop(data->dma_rx.dma_dev, data->dma_rx.channel);
 800973e:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8009742:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 */
__syscall int dma_stop(const struct device *dev, uint32_t channel);

static inline int z_impl_dma_stop(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
 8009746:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	return api->stop(dev, channel);
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	4798      	blx	r3
	dma_stop(data->dma_tx.dma_dev, data->dma_tx.channel);
 800974c:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
 8009750:	f8d5 10d0 	ldr.w	r1, [r5, #208]	; 0xd0
	const struct dma_driver_api *api =
 8009754:	6883      	ldr	r3, [r0, #8]
	return api->stop(dev, channel);
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	4798      	blx	r3
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&channel, K_SYSCALL_DMA_STOP);
	}
#endif
	compiler_barrier();
	return z_impl_dma_stop(dev, channel);
 800975a:	e6f7      	b.n	800954c <transceive_dma+0x56>
		ctx->owner = NULL;
 800975c:	2300      	movs	r3, #0
 800975e:	606b      	str	r3, [r5, #4]
		k_sem_give(&ctx->lock);
 8009760:	f105 0010 	add.w	r0, r5, #16
	z_impl_k_sem_give(sem);
 8009764:	f7fc fce0 	bl	8006128 <z_impl_k_sem_give>
}
 8009768:	e6f6      	b.n	8009558 <transceive_dma+0x62>
		return -ENOTSUP;
 800976a:	f06f 0785 	mvn.w	r7, #133	; 0x85
 800976e:	e6f3      	b.n	8009558 <transceive_dma+0x62>

08009770 <spi_stm32_transceive>:
{
 8009770:	b530      	push	{r4, r5, lr}
 8009772:	b083      	sub	sp, #12
	struct spi_stm32_data *data = dev->data;
 8009774:	6904      	ldr	r4, [r0, #16]
	if ((data->dma_tx.dma_dev != NULL)
 8009776:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
 800977a:	b115      	cbz	r5, 8009782 <spi_stm32_transceive+0x12>
	 && (data->dma_rx.dma_dev != NULL)) {
 800977c:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 8009780:	b934      	cbnz	r4, 8009790 <spi_stm32_transceive+0x20>
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 8009782:	2400      	movs	r4, #0
 8009784:	9401      	str	r4, [sp, #4]
 8009786:	9400      	str	r4, [sp, #0]
 8009788:	f7ff fdfc 	bl	8009384 <transceive>
}
 800978c:	b003      	add	sp, #12
 800978e:	bd30      	pop	{r4, r5, pc}
		return transceive_dma(dev, config, tx_bufs, rx_bufs,
 8009790:	2400      	movs	r4, #0
 8009792:	9401      	str	r4, [sp, #4]
 8009794:	9400      	str	r4, [sp, #0]
 8009796:	f7ff feae 	bl	80094f6 <transceive_dma>
 800979a:	e7f7      	b.n	800978c <spi_stm32_transceive+0x1c>

0800979c <spi_stm32_shift_m>:
{
 800979c:	b430      	push	{r4, r5}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800979e:	6883      	ldr	r3, [r0, #8]
 80097a0:	f013 0f02 	tst.w	r3, #2
 80097a4:	d0fb      	beq.n	800979e <spi_stm32_shift_m+0x2>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80097a6:	680b      	ldr	r3, [r1, #0]
 80097a8:	889b      	ldrh	r3, [r3, #4]
 80097aa:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80097ae:	2b08      	cmp	r3, #8
 80097b0:	d009      	beq.n	80097c6 <spi_stm32_shift_m+0x2a>
	return !!(ctx->tx_buf && ctx->tx_len);
 80097b2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d03d      	beq.n	8009834 <spi_stm32_shift_m+0x98>
 80097b8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80097ba:	2a00      	cmp	r2, #0
 80097bc:	d13c      	bne.n	8009838 <spi_stm32_shift_m+0x9c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 80097be:	2a00      	cmp	r2, #0
 80097c0:	d03c      	beq.n	800983c <spi_stm32_shift_m+0xa0>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 80097c2:	881b      	ldrh	r3, [r3, #0]
 80097c4:	e03b      	b.n	800983e <spi_stm32_shift_m+0xa2>
 80097c6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80097c8:	b18b      	cbz	r3, 80097ee <spi_stm32_shift_m+0x52>
 80097ca:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80097cc:	b98a      	cbnz	r2, 80097f2 <spi_stm32_shift_m+0x56>
		if (spi_context_tx_buf_on(&data->ctx)) {
 80097ce:	b192      	cbz	r2, 80097f6 <spi_stm32_shift_m+0x5a>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80097d0:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 80097d2:	b2db      	uxtb	r3, r3
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 80097d4:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 80097d6:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d03a      	beq.n	8009852 <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 80097dc:	3b01      	subs	r3, #1
 80097de:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 80097e0:	b15b      	cbz	r3, 80097fa <spi_stm32_shift_m+0x5e>
	} else if (ctx->tx_buf) {
 80097e2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d034      	beq.n	8009852 <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 80097e8:	3301      	adds	r3, #1
 80097ea:	654b      	str	r3, [r1, #84]	; 0x54
 80097ec:	e031      	b.n	8009852 <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 80097ee:	2200      	movs	r2, #0
 80097f0:	e7ed      	b.n	80097ce <spi_stm32_shift_m+0x32>
 80097f2:	2201      	movs	r2, #1
 80097f4:	e7eb      	b.n	80097ce <spi_stm32_shift_m+0x32>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 80097f6:	2300      	movs	r3, #0
 80097f8:	e7eb      	b.n	80097d2 <spi_stm32_shift_m+0x36>
		++ctx->current_tx;
 80097fa:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80097fc:	3308      	adds	r3, #8
 80097fe:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 8009800:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8009802:	3b01      	subs	r3, #1
 8009804:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 8009806:	f101 0444 	add.w	r4, r1, #68	; 0x44
 800980a:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800980e:	e004      	b.n	800981a <spi_stm32_shift_m+0x7e>
		++(*current);
 8009810:	3308      	adds	r3, #8
 8009812:	6023      	str	r3, [r4, #0]
		--(*count);
 8009814:	6813      	ldr	r3, [r2, #0]
 8009816:	3b01      	subs	r3, #1
 8009818:	6013      	str	r3, [r2, #0]
	while (*count) {
 800981a:	6813      	ldr	r3, [r2, #0]
 800981c:	b13b      	cbz	r3, 800982e <spi_stm32_shift_m+0x92>
		if (((*current)->len / dfs) != 0) {
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	685d      	ldr	r5, [r3, #4]
 8009822:	2d00      	cmp	r5, #0
 8009824:	d0f4      	beq.n	8009810 <spi_stm32_shift_m+0x74>
			*buf_len = (*current)->len / dfs;
 8009826:	658d      	str	r5, [r1, #88]	; 0x58
			return (*current)->buf;
 8009828:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	e000      	b.n	8009830 <spi_stm32_shift_m+0x94>
	*buf_len = 0;
 800982e:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8009830:	654b      	str	r3, [r1, #84]	; 0x54
 8009832:	e00e      	b.n	8009852 <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 8009834:	2200      	movs	r2, #0
 8009836:	e7c2      	b.n	80097be <spi_stm32_shift_m+0x22>
 8009838:	2201      	movs	r2, #1
 800983a:	e7c0      	b.n	80097be <spi_stm32_shift_m+0x22>
 800983c:	2300      	movs	r3, #0
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800983e:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 8009840:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8009842:	b133      	cbz	r3, 8009852 <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 8009844:	3b01      	subs	r3, #1
 8009846:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 8009848:	b31b      	cbz	r3, 8009892 <spi_stm32_shift_m+0xf6>
	} else if (ctx->tx_buf) {
 800984a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800984c:	b10b      	cbz	r3, 8009852 <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 800984e:	3302      	adds	r3, #2
 8009850:	654b      	str	r3, [r1, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8009852:	6883      	ldr	r3, [r0, #8]
 8009854:	f013 0f01 	tst.w	r3, #1
 8009858:	d0fb      	beq.n	8009852 <spi_stm32_shift_m+0xb6>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800985a:	680b      	ldr	r3, [r1, #0]
 800985c:	889b      	ldrh	r3, [r3, #4]
 800985e:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009862:	2b08      	cmp	r3, #8
 8009864:	d035      	beq.n	80098d2 <spi_stm32_shift_m+0x136>
  return (uint16_t)(READ_REG(SPIx->DR));
 8009866:	68c3      	ldr	r3, [r0, #12]
 8009868:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800986a:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800986c:	2a00      	cmp	r2, #0
 800986e:	d065      	beq.n	800993c <spi_stm32_shift_m+0x1a0>
 8009870:	6e08      	ldr	r0, [r1, #96]	; 0x60
 8009872:	2800      	cmp	r0, #0
 8009874:	d164      	bne.n	8009940 <spi_stm32_shift_m+0x1a4>
		if (spi_context_rx_buf_on(&data->ctx)) {
 8009876:	b100      	cbz	r0, 800987a <spi_stm32_shift_m+0xde>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8009878:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 800987a:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800987c:	b13b      	cbz	r3, 800988e <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 800987e:	3b01      	subs	r3, #1
 8009880:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 8009882:	2b00      	cmp	r3, #0
 8009884:	d05e      	beq.n	8009944 <spi_stm32_shift_m+0x1a8>
	} else if (ctx->rx_buf) {
 8009886:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8009888:	b10b      	cbz	r3, 800988e <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 800988a:	3302      	adds	r3, #2
 800988c:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 800988e:	bc30      	pop	{r4, r5}
 8009890:	4770      	bx	lr
		++ctx->current_tx;
 8009892:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8009894:	3308      	adds	r3, #8
 8009896:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 8009898:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800989a:	3b01      	subs	r3, #1
 800989c:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800989e:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 80098a2:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 80098a6:	e005      	b.n	80098b4 <spi_stm32_shift_m+0x118>
		++(*current);
 80098a8:	3308      	adds	r3, #8
 80098aa:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 80098ae:	6813      	ldr	r3, [r2, #0]
 80098b0:	3b01      	subs	r3, #1
 80098b2:	6013      	str	r3, [r2, #0]
	while (*count) {
 80098b4:	6813      	ldr	r3, [r2, #0]
 80098b6:	b14b      	cbz	r3, 80098cc <spi_stm32_shift_m+0x130>
		if (((*current)->len / dfs) != 0) {
 80098b8:	f8dc 3000 	ldr.w	r3, [ip]
 80098bc:	685c      	ldr	r4, [r3, #4]
 80098be:	2c01      	cmp	r4, #1
 80098c0:	d9f2      	bls.n	80098a8 <spi_stm32_shift_m+0x10c>
			*buf_len = (*current)->len / dfs;
 80098c2:	0864      	lsrs	r4, r4, #1
 80098c4:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 80098c6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	e000      	b.n	80098ce <spi_stm32_shift_m+0x132>
	*buf_len = 0;
 80098cc:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 80098ce:	654b      	str	r3, [r1, #84]	; 0x54
 80098d0:	e7bf      	b.n	8009852 <spi_stm32_shift_m+0xb6>
  return (uint8_t)(READ_REG(SPIx->DR));
 80098d2:	68c3      	ldr	r3, [r0, #12]
 80098d4:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 80098d6:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 80098d8:	b17a      	cbz	r2, 80098fa <spi_stm32_shift_m+0x15e>
 80098da:	6e08      	ldr	r0, [r1, #96]	; 0x60
 80098dc:	b978      	cbnz	r0, 80098fe <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 80098de:	b100      	cbz	r0, 80098e2 <spi_stm32_shift_m+0x146>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 80098e0:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 80098e2:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d0d2      	beq.n	800988e <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 80098e8:	3b01      	subs	r3, #1
 80098ea:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 80098ec:	b14b      	cbz	r3, 8009902 <spi_stm32_shift_m+0x166>
	} else if (ctx->rx_buf) {
 80098ee:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d0cc      	beq.n	800988e <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 80098f4:	3301      	adds	r3, #1
 80098f6:	65cb      	str	r3, [r1, #92]	; 0x5c
 80098f8:	e7c9      	b.n	800988e <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 80098fa:	2000      	movs	r0, #0
 80098fc:	e7ef      	b.n	80098de <spi_stm32_shift_m+0x142>
 80098fe:	2001      	movs	r0, #1
 8009900:	e7ed      	b.n	80098de <spi_stm32_shift_m+0x142>
		++ctx->current_rx;
 8009902:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009904:	3308      	adds	r3, #8
 8009906:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 8009908:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800990a:	3b01      	subs	r3, #1
 800990c:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800990e:	f101 004c 	add.w	r0, r1, #76	; 0x4c
 8009912:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 8009916:	e004      	b.n	8009922 <spi_stm32_shift_m+0x186>
		++(*current);
 8009918:	3308      	adds	r3, #8
 800991a:	6003      	str	r3, [r0, #0]
		--(*count);
 800991c:	6813      	ldr	r3, [r2, #0]
 800991e:	3b01      	subs	r3, #1
 8009920:	6013      	str	r3, [r2, #0]
	while (*count) {
 8009922:	6813      	ldr	r3, [r2, #0]
 8009924:	b13b      	cbz	r3, 8009936 <spi_stm32_shift_m+0x19a>
		if (((*current)->len / dfs) != 0) {
 8009926:	6803      	ldr	r3, [r0, #0]
 8009928:	685c      	ldr	r4, [r3, #4]
 800992a:	2c00      	cmp	r4, #0
 800992c:	d0f4      	beq.n	8009918 <spi_stm32_shift_m+0x17c>
			*buf_len = (*current)->len / dfs;
 800992e:	660c      	str	r4, [r1, #96]	; 0x60
			return (*current)->buf;
 8009930:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	e000      	b.n	8009938 <spi_stm32_shift_m+0x19c>
	*buf_len = 0;
 8009936:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 8009938:	65cb      	str	r3, [r1, #92]	; 0x5c
 800993a:	e7a8      	b.n	800988e <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 800993c:	2000      	movs	r0, #0
 800993e:	e79a      	b.n	8009876 <spi_stm32_shift_m+0xda>
 8009940:	2001      	movs	r0, #1
 8009942:	e798      	b.n	8009876 <spi_stm32_shift_m+0xda>
		++ctx->current_rx;
 8009944:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009946:	3308      	adds	r3, #8
 8009948:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 800994a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800994c:	3b01      	subs	r3, #1
 800994e:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 8009950:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 8009954:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 8009958:	e004      	b.n	8009964 <spi_stm32_shift_m+0x1c8>
		++(*current);
 800995a:	3308      	adds	r3, #8
 800995c:	6023      	str	r3, [r4, #0]
		--(*count);
 800995e:	6813      	ldr	r3, [r2, #0]
 8009960:	3b01      	subs	r3, #1
 8009962:	6013      	str	r3, [r2, #0]
	while (*count) {
 8009964:	6813      	ldr	r3, [r2, #0]
 8009966:	b143      	cbz	r3, 800997a <spi_stm32_shift_m+0x1de>
		if (((*current)->len / dfs) != 0) {
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	6858      	ldr	r0, [r3, #4]
 800996c:	2801      	cmp	r0, #1
 800996e:	d9f4      	bls.n	800995a <spi_stm32_shift_m+0x1be>
			*buf_len = (*current)->len / dfs;
 8009970:	0840      	lsrs	r0, r0, #1
 8009972:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 8009974:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	e000      	b.n	800997c <spi_stm32_shift_m+0x1e0>
	*buf_len = 0;
 800997a:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800997c:	65cb      	str	r3, [r1, #92]	; 0x5c
 800997e:	e786      	b.n	800988e <spi_stm32_shift_m+0xf2>

08009980 <spi_stm32_shift_s>:
{
 8009980:	b410      	push	{r4}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8009982:	6883      	ldr	r3, [r0, #8]
 8009984:	f013 0f02 	tst.w	r3, #2
 8009988:	d065      	beq.n	8009a56 <spi_stm32_shift_s+0xd6>
	return !!(ctx->tx_len);
 800998a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800998c:	2b00      	cmp	r3, #0
 800998e:	d062      	beq.n	8009a56 <spi_stm32_shift_s+0xd6>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8009990:	680b      	ldr	r3, [r1, #0]
 8009992:	889b      	ldrh	r3, [r3, #4]
 8009994:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009998:	2b08      	cmp	r3, #8
 800999a:	d00f      	beq.n	80099bc <spi_stm32_shift_s+0x3c>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800999c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800999e:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 80099a0:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 80099a2:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d05a      	beq.n	8009a5e <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 80099a8:	3b01      	subs	r3, #1
 80099aa:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d032      	beq.n	8009a16 <spi_stm32_shift_s+0x96>
	} else if (ctx->tx_buf) {
 80099b0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d053      	beq.n	8009a5e <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 80099b6:	3302      	adds	r3, #2
 80099b8:	654b      	str	r3, [r1, #84]	; 0x54
 80099ba:	e050      	b.n	8009a5e <spi_stm32_shift_s+0xde>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80099bc:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80099be:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 80099c0:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 80099c2:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d04a      	beq.n	8009a5e <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 80099c8:	3b01      	subs	r3, #1
 80099ca:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 80099cc:	b12b      	cbz	r3, 80099da <spi_stm32_shift_s+0x5a>
	} else if (ctx->tx_buf) {
 80099ce:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d044      	beq.n	8009a5e <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 80099d4:	3301      	adds	r3, #1
 80099d6:	654b      	str	r3, [r1, #84]	; 0x54
 80099d8:	e041      	b.n	8009a5e <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 80099da:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80099dc:	3308      	adds	r3, #8
 80099de:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 80099e0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 80099e2:	3b01      	subs	r3, #1
 80099e4:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 80099e6:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 80099ea:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 80099ee:	6813      	ldr	r3, [r2, #0]
 80099f0:	b173      	cbz	r3, 8009a10 <spi_stm32_shift_s+0x90>
		if (((*current)->len / dfs) != 0) {
 80099f2:	f8dc 3000 	ldr.w	r3, [ip]
 80099f6:	685c      	ldr	r4, [r3, #4]
 80099f8:	b934      	cbnz	r4, 8009a08 <spi_stm32_shift_s+0x88>
		++(*current);
 80099fa:	3308      	adds	r3, #8
 80099fc:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 8009a00:	6813      	ldr	r3, [r2, #0]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	6013      	str	r3, [r2, #0]
 8009a06:	e7f2      	b.n	80099ee <spi_stm32_shift_s+0x6e>
			*buf_len = (*current)->len / dfs;
 8009a08:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 8009a0a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	e000      	b.n	8009a12 <spi_stm32_shift_s+0x92>
	*buf_len = 0;
 8009a10:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8009a12:	654b      	str	r3, [r1, #84]	; 0x54
 8009a14:	e023      	b.n	8009a5e <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 8009a16:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8009a18:	3308      	adds	r3, #8
 8009a1a:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 8009a1c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 8009a22:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 8009a26:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 8009a2a:	6813      	ldr	r3, [r2, #0]
 8009a2c:	b183      	cbz	r3, 8009a50 <spi_stm32_shift_s+0xd0>
		if (((*current)->len / dfs) != 0) {
 8009a2e:	f8dc 3000 	ldr.w	r3, [ip]
 8009a32:	685c      	ldr	r4, [r3, #4]
 8009a34:	2c01      	cmp	r4, #1
 8009a36:	d806      	bhi.n	8009a46 <spi_stm32_shift_s+0xc6>
		++(*current);
 8009a38:	3308      	adds	r3, #8
 8009a3a:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 8009a3e:	6813      	ldr	r3, [r2, #0]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	6013      	str	r3, [r2, #0]
 8009a44:	e7f1      	b.n	8009a2a <spi_stm32_shift_s+0xaa>
			*buf_len = (*current)->len / dfs;
 8009a46:	0864      	lsrs	r4, r4, #1
 8009a48:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 8009a4a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	e000      	b.n	8009a52 <spi_stm32_shift_s+0xd2>
	*buf_len = 0;
 8009a50:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8009a52:	654b      	str	r3, [r1, #84]	; 0x54
 8009a54:	e003      	b.n	8009a5e <spi_stm32_shift_s+0xde>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8009a56:	6843      	ldr	r3, [r0, #4]
 8009a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a5c:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8009a5e:	6883      	ldr	r3, [r0, #8]
 8009a60:	f013 0f01 	tst.w	r3, #1
 8009a64:	d016      	beq.n	8009a94 <spi_stm32_shift_s+0x114>
	return !!(ctx->rx_buf && ctx->rx_len);
 8009a66:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8009a68:	b1bb      	cbz	r3, 8009a9a <spi_stm32_shift_s+0x11a>
 8009a6a:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8009a6c:	b9ba      	cbnz	r2, 8009a9e <spi_stm32_shift_s+0x11e>
	if (ll_func_rx_is_not_empty(spi) &&
 8009a6e:	b18a      	cbz	r2, 8009a94 <spi_stm32_shift_s+0x114>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8009a70:	680a      	ldr	r2, [r1, #0]
 8009a72:	8892      	ldrh	r2, [r2, #4]
 8009a74:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8009a78:	2a08      	cmp	r2, #8
 8009a7a:	d012      	beq.n	8009aa2 <spi_stm32_shift_s+0x122>
  return (uint16_t)(READ_REG(SPIx->DR));
 8009a7c:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8009a7e:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8009a80:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 8009a82:	b13b      	cbz	r3, 8009a94 <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 8009a84:	3b01      	subs	r3, #1
 8009a86:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d034      	beq.n	8009af6 <spi_stm32_shift_s+0x176>
	} else if (ctx->rx_buf) {
 8009a8c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8009a8e:	b10b      	cbz	r3, 8009a94 <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 8009a90:	3302      	adds	r3, #2
 8009a92:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 8009a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a98:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	e7e7      	b.n	8009a6e <spi_stm32_shift_s+0xee>
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	e7e5      	b.n	8009a6e <spi_stm32_shift_s+0xee>
  return (uint8_t)(READ_REG(SPIx->DR));
 8009aa2:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8009aa4:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8009aa6:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d0f3      	beq.n	8009a94 <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 8009aac:	3b01      	subs	r3, #1
 8009aae:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 8009ab0:	b12b      	cbz	r3, 8009abe <spi_stm32_shift_s+0x13e>
	} else if (ctx->rx_buf) {
 8009ab2:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d0ed      	beq.n	8009a94 <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 8009ab8:	3301      	adds	r3, #1
 8009aba:	65cb      	str	r3, [r1, #92]	; 0x5c
 8009abc:	e7ea      	b.n	8009a94 <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 8009abe:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 8009ac4:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 8009aca:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 8009ace:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 8009ad2:	6813      	ldr	r3, [r2, #0]
 8009ad4:	b163      	cbz	r3, 8009af0 <spi_stm32_shift_s+0x170>
		if (((*current)->len / dfs) != 0) {
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	6858      	ldr	r0, [r3, #4]
 8009ada:	b928      	cbnz	r0, 8009ae8 <spi_stm32_shift_s+0x168>
		++(*current);
 8009adc:	3308      	adds	r3, #8
 8009ade:	6023      	str	r3, [r4, #0]
		--(*count);
 8009ae0:	6813      	ldr	r3, [r2, #0]
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	e7f4      	b.n	8009ad2 <spi_stm32_shift_s+0x152>
			*buf_len = (*current)->len / dfs;
 8009ae8:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 8009aea:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	e000      	b.n	8009af2 <spi_stm32_shift_s+0x172>
	*buf_len = 0;
 8009af0:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 8009af2:	65cb      	str	r3, [r1, #92]	; 0x5c
 8009af4:	e7ce      	b.n	8009a94 <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 8009af6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009af8:	3308      	adds	r3, #8
 8009afa:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 8009afc:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8009afe:	3b01      	subs	r3, #1
 8009b00:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 8009b02:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 8009b06:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 8009b0a:	6813      	ldr	r3, [r2, #0]
 8009b0c:	b173      	cbz	r3, 8009b2c <spi_stm32_shift_s+0x1ac>
		if (((*current)->len / dfs) != 0) {
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	6858      	ldr	r0, [r3, #4]
 8009b12:	2801      	cmp	r0, #1
 8009b14:	d805      	bhi.n	8009b22 <spi_stm32_shift_s+0x1a2>
		++(*current);
 8009b16:	3308      	adds	r3, #8
 8009b18:	6023      	str	r3, [r4, #0]
		--(*count);
 8009b1a:	6813      	ldr	r3, [r2, #0]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	6013      	str	r3, [r2, #0]
 8009b20:	e7f3      	b.n	8009b0a <spi_stm32_shift_s+0x18a>
			*buf_len = (*current)->len / dfs;
 8009b22:	0840      	lsrs	r0, r0, #1
 8009b24:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 8009b26:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	e000      	b.n	8009b2e <spi_stm32_shift_s+0x1ae>
	*buf_len = 0;
 8009b2c:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 8009b2e:	65cb      	str	r3, [r1, #92]	; 0x5c
 8009b30:	e7b0      	b.n	8009a94 <spi_stm32_shift_s+0x114>

08009b32 <spi_stm32_shift_frames>:
{
 8009b32:	b510      	push	{r4, lr}
 8009b34:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 8009b36:	680b      	ldr	r3, [r1, #0]
 8009b38:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8009b3a:	f013 0f01 	tst.w	r3, #1
 8009b3e:	d105      	bne.n	8009b4c <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 8009b40:	f7ff fe2c 	bl	800979c <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 8009b44:	4620      	mov	r0, r4
 8009b46:	f7ff faf2 	bl	800912e <spi_stm32_get_err>
}
 8009b4a:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 8009b4c:	f7ff ff18 	bl	8009980 <spi_stm32_shift_s>
 8009b50:	e7f8      	b.n	8009b44 <spi_stm32_shift_frames+0x12>

08009b52 <spi_stm32_isr>:
{
 8009b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b54:	4604      	mov	r4, r0
	const struct spi_stm32_config *cfg = dev->config;
 8009b56:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8009b58:	6906      	ldr	r6, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8009b5a:	689f      	ldr	r7, [r3, #8]
	err = spi_stm32_get_err(spi);
 8009b5c:	4638      	mov	r0, r7
 8009b5e:	f7ff fae6 	bl	800912e <spi_stm32_get_err>
	if (err) {
 8009b62:	4605      	mov	r5, r0
 8009b64:	b968      	cbnz	r0, 8009b82 <spi_stm32_isr+0x30>
	if (spi_stm32_transfer_ongoing(data)) {
 8009b66:	4630      	mov	r0, r6
 8009b68:	f7ff fad7 	bl	800911a <spi_stm32_transfer_ongoing>
 8009b6c:	b970      	cbnz	r0, 8009b8c <spi_stm32_isr+0x3a>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 8009b6e:	b91d      	cbnz	r5, 8009b78 <spi_stm32_isr+0x26>
 8009b70:	4630      	mov	r0, r6
 8009b72:	f7ff fad2 	bl	800911a <spi_stm32_transfer_ongoing>
 8009b76:	b918      	cbnz	r0, 8009b80 <spi_stm32_isr+0x2e>
		spi_stm32_complete(dev, err);
 8009b78:	4629      	mov	r1, r5
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f7ff fbc6 	bl	800930c <spi_stm32_complete>
}
 8009b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_stm32_complete(dev, err);
 8009b82:	4601      	mov	r1, r0
 8009b84:	4620      	mov	r0, r4
 8009b86:	f7ff fbc1 	bl	800930c <spi_stm32_complete>
		return;
 8009b8a:	e7f9      	b.n	8009b80 <spi_stm32_isr+0x2e>
		err = spi_stm32_shift_frames(spi, data);
 8009b8c:	4631      	mov	r1, r6
 8009b8e:	4638      	mov	r0, r7
 8009b90:	f7ff ffcf 	bl	8009b32 <spi_stm32_shift_frames>
 8009b94:	4605      	mov	r5, r0
 8009b96:	e7ea      	b.n	8009b6e <spi_stm32_isr+0x1c>

08009b98 <timer_work_handler>:
{
 8009b98:	b508      	push	{r3, lr}
	TimerIrqHandler();
 8009b9a:	f7f9 ff21 	bl	80039e0 <TimerIrqHandler>
}
 8009b9e:	bd08      	pop	{r3, pc}

08009ba0 <RtcGetTimerValue>:
{
 8009ba0:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8009ba2:	f001 fa0e 	bl	800afc2 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8009ba6:	220a      	movs	r2, #10
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f7f6 fb49 	bl	8000240 <__aeabi_uldivmod>
}
 8009bae:	bd08      	pop	{r3, pc}

08009bb0 <RtcGetMinimumTimeout>:
}
 8009bb0:	2001      	movs	r0, #1
 8009bb2:	4770      	bx	lr

08009bb4 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
 8009bb4:	b508      	push	{r3, lr}
			return t * ((uint64_t)to_hz / from_hz);
 8009bb6:	0f81      	lsrs	r1, r0, #30
 8009bb8:	0083      	lsls	r3, r0, #2
 8009bba:	1818      	adds	r0, r3, r0
 8009bbc:	f141 0100 	adc.w	r1, r1, #0
 8009bc0:	1800      	adds	r0, r0, r0
 8009bc2:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 8009bc4:	f7fc fff8 	bl	8006bb8 <z_impl_k_sleep>
	k_sleep(K_MSEC(ms));
}
 8009bc8:	bd08      	pop	{r3, pc}

08009bca <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 8009bca:	4770      	bx	lr

08009bcc <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
{
	return tick;
}
 8009bcc:	4770      	bx	lr

08009bce <BoardCriticalSectionBegin>:
	__asm__ volatile(
 8009bce:	f04f 0210 	mov.w	r2, #16
 8009bd2:	f3ef 8311 	mrs	r3, BASEPRI
 8009bd6:	f382 8812 	msr	BASEPRI_MAX, r2
 8009bda:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 8009bde:	6003      	str	r3, [r0, #0]
}
 8009be0:	4770      	bx	lr

08009be2 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
 8009be2:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
}
 8009bec:	4770      	bx	lr

08009bee <__sx12xx_configure_pin>:
{
 8009bee:	b570      	push	{r4, r5, r6, lr}
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	4608      	mov	r0, r1
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	461d      	mov	r5, r3
 8009bf8:	f7fc f828 	bl	8005c4c <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 8009bfc:	6020      	str	r0, [r4, #0]
	if (!(*dev)) {
 8009bfe:	b318      	cbz	r0, 8009c48 <__sx12xx_configure_pin+0x5a>
	const struct gpio_driver_api *api =
 8009c00:	6883      	ldr	r3, [r0, #8]
	struct gpio_driver_data *data =
 8009c02:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8009c04:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8009c08:	d007      	beq.n	8009c1a <__sx12xx_configure_pin+0x2c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8009c0a:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 8009c0e:	d004      	beq.n	8009c1a <__sx12xx_configure_pin+0x2c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8009c10:	f015 0f01 	tst.w	r5, #1
 8009c14:	d001      	beq.n	8009c1a <__sx12xx_configure_pin+0x2c>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8009c16:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8009c1a:	f425 5280 	bic.w	r2, r5, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8009c1e:	f015 0f01 	tst.w	r5, #1
 8009c22:	d009      	beq.n	8009c38 <__sx12xx_configure_pin+0x4a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8009c24:	2101      	movs	r1, #1
 8009c26:	fa01 f506 	lsl.w	r5, r1, r6
 8009c2a:	6821      	ldr	r1, [r4, #0]
 8009c2c:	4329      	orrs	r1, r5
 8009c2e:	6021      	str	r1, [r4, #0]
	return api->pin_configure(port, pin, flags);
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4631      	mov	r1, r6
 8009c34:	4798      	blx	r3
}
 8009c36:	bd70      	pop	{r4, r5, r6, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8009c38:	2101      	movs	r1, #1
 8009c3a:	fa01 f506 	lsl.w	r5, r1, r6
 8009c3e:	6821      	ldr	r1, [r4, #0]
 8009c40:	ea21 0105 	bic.w	r1, r1, r5
 8009c44:	6021      	str	r1, [r4, #0]
 8009c46:	e7f3      	b.n	8009c30 <__sx12xx_configure_pin+0x42>
		return -EIO;
 8009c48:	f06f 0004 	mvn.w	r0, #4
 8009c4c:	e7f3      	b.n	8009c36 <__sx12xx_configure_pin+0x48>

08009c4e <clamp_int8>:
	if (x < min) {
 8009c4e:	4288      	cmp	r0, r1
 8009c50:	db03      	blt.n	8009c5a <clamp_int8+0xc>
	} else if (x > max) {
 8009c52:	4290      	cmp	r0, r2
 8009c54:	dd02      	ble.n	8009c5c <clamp_int8+0xe>
		return max;
 8009c56:	4610      	mov	r0, r2
 8009c58:	4770      	bx	lr
		return min;
 8009c5a:	4608      	mov	r0, r1
}
 8009c5c:	4770      	bx	lr

08009c5e <SX1276CheckRfFrequency>:
}
 8009c5e:	2001      	movs	r0, #1
 8009c60:	4770      	bx	lr

08009c62 <sx127x_antenna_configure>:
}
 8009c62:	2000      	movs	r0, #0
 8009c64:	4770      	bx	lr

08009c66 <SX1276GetBoardTcxoWakeupTime>:
}
 8009c66:	2000      	movs	r0, #0
 8009c68:	4770      	bx	lr

08009c6a <SX1276SetAntSwLowPower>:
}
 8009c6a:	4770      	bx	lr

08009c6c <SX1276SetBoardTcxo>:
}
 8009c6c:	4770      	bx	lr

08009c6e <SX1276SetAntSw>:
}
 8009c6e:	4770      	bx	lr

08009c70 <sx127x_read>:
{
 8009c70:	b508      	push	{r3, lr}
 8009c72:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr, false, data, len);
 8009c74:	460a      	mov	r2, r1
 8009c76:	2100      	movs	r1, #0
 8009c78:	f7f9 fc94 	bl	80035a4 <sx127x_transceive>
}
 8009c7c:	bd08      	pop	{r3, pc}

08009c7e <SX1276ReadBuffer>:
{
 8009c7e:	b508      	push	{r3, lr}
	ret = sx127x_read(addr, buffer, size);
 8009c80:	b2c0      	uxtb	r0, r0
 8009c82:	f7ff fff5 	bl	8009c70 <sx127x_read>
}
 8009c86:	bd08      	pop	{r3, pc}

08009c88 <sx127x_write>:
{
 8009c88:	b508      	push	{r3, lr}
 8009c8a:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 8009c8c:	460a      	mov	r2, r1
 8009c8e:	2101      	movs	r1, #1
 8009c90:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8009c94:	f7f9 fc86 	bl	80035a4 <sx127x_transceive>
}
 8009c98:	bd08      	pop	{r3, pc}

08009c9a <SX1276WriteBuffer>:
{
 8009c9a:	b508      	push	{r3, lr}
	ret = sx127x_write(addr, buffer, size);
 8009c9c:	b2c0      	uxtb	r0, r0
 8009c9e:	f7ff fff3 	bl	8009c88 <sx127x_write>
}
 8009ca2:	bd08      	pop	{r3, pc}

08009ca4 <SX1276SetRfTxPower>:
{
 8009ca4:	b530      	push	{r4, r5, lr}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	4605      	mov	r5, r0
	uint8_t pa_config = 0;
 8009caa:	2300      	movs	r3, #0
 8009cac:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t pa_dac = 0;
 8009cb0:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f10d 0106 	add.w	r1, sp, #6
 8009cba:	204d      	movs	r0, #77	; 0x4d
 8009cbc:	f7ff ffd8 	bl	8009c70 <sx127x_read>
	if (ret < 0) {
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	db2a      	blt.n	8009d1a <SX1276SetRfTxPower+0x76>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8009cc4:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8009cc8:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8009ccc:	f88d 4006 	strb.w	r4, [sp, #6]
		power = clamp_int8(power, 2, 20);
 8009cd0:	2214      	movs	r2, #20
 8009cd2:	2102      	movs	r1, #2
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	f7ff ffba 	bl	8009c4e <clamp_int8>
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 8009cda:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce2:	f88d 3007 	strb.w	r3, [sp, #7]
		if (power > 17) {
 8009ce6:	2811      	cmp	r0, #17
 8009ce8:	dd19      	ble.n	8009d1e <SX1276SetRfTxPower+0x7a>
			pa_dac |= SX127X_PADAC_20DBM_ON;
 8009cea:	f044 0407 	orr.w	r4, r4, #7
 8009cee:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8009cf2:	3805      	subs	r0, #5
 8009cf4:	f000 000f 	and.w	r0, r0, #15
 8009cf8:	4318      	orrs	r0, r3
 8009cfa:	f88d 0007 	strb.w	r0, [sp, #7]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f10d 0107 	add.w	r1, sp, #7
 8009d04:	2009      	movs	r0, #9
 8009d06:	f7ff ffbf 	bl	8009c88 <sx127x_write>
	if (ret < 0) {
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	db05      	blt.n	8009d1a <SX1276SetRfTxPower+0x76>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f10d 0106 	add.w	r1, sp, #6
 8009d14:	204d      	movs	r0, #77	; 0x4d
 8009d16:	f7ff ffb7 	bl	8009c88 <sx127x_write>
}
 8009d1a:	b003      	add	sp, #12
 8009d1c:	bd30      	pop	{r4, r5, pc}
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8009d1e:	f044 0404 	orr.w	r4, r4, #4
 8009d22:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8009d26:	3802      	subs	r0, #2
 8009d28:	f000 000f 	and.w	r0, r0, #15
 8009d2c:	4318      	orrs	r0, r3
 8009d2e:	f88d 0007 	strb.w	r0, [sp, #7]
 8009d32:	e7e4      	b.n	8009cfe <SX1276SetRfTxPower+0x5a>

08009d34 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8009d34:	e004      	b.n	8009d40 <memcpy1+0xc>
    {
        *dst++ = *src++;
 8009d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d3a:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8009d3e:	461a      	mov	r2, r3
 8009d40:	1e53      	subs	r3, r2, #1
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	2a00      	cmp	r2, #0
 8009d46:	d1f6      	bne.n	8009d36 <memcpy1+0x2>
    }
}
 8009d48:	4770      	bx	lr

08009d4a <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8009d4a:	b570      	push	{r4, r5, r6, lr}
 8009d4c:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 8009d4e:	f7ff ff2f 	bl	8009bb0 <RtcGetMinimumTimeout>
 8009d52:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 8009d54:	2301      	movs	r3, #1
 8009d56:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8009d58:	6826      	ldr	r6, [r4, #0]
 8009d5a:	f7f9 f8cf 	bl	8002efc <RtcGetTimerElapsedTime>
 8009d5e:	4428      	add	r0, r5
 8009d60:	4286      	cmp	r6, r0
 8009d62:	d303      	bcc.n	8009d6c <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 8009d64:	6820      	ldr	r0, [r4, #0]
 8009d66:	f7f9 f8df 	bl	8002f28 <RtcSetAlarm>
}
 8009d6a:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8009d6c:	f7f9 f8c6 	bl	8002efc <RtcGetTimerElapsedTime>
 8009d70:	4405      	add	r5, r0
 8009d72:	6025      	str	r5, [r4, #0]
 8009d74:	e7f6      	b.n	8009d64 <TimerSetTimeout+0x1a>

08009d76 <TimerInit>:
    obj->Timestamp = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 8009d7a:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 8009d7c:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 8009d7e:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 8009d80:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 8009d82:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 8009d84:	6143      	str	r3, [r0, #20]
}
 8009d86:	4770      	bx	lr

08009d88 <TimerSetValue>:
{
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 8009d8c:	4608      	mov	r0, r1
 8009d8e:	f7ff ff1c 	bl	8009bca <RtcMs2Tick>
 8009d92:	4605      	mov	r5, r0
    TimerStop( obj );
 8009d94:	4620      	mov	r0, r4
 8009d96:	f7f9 fe67 	bl	8003a68 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 8009d9a:	f7ff ff09 	bl	8009bb0 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 8009d9e:	4285      	cmp	r5, r0
 8009da0:	d300      	bcc.n	8009da4 <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 8009da2:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 8009da4:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 8009da6:	6060      	str	r0, [r4, #4]
}
 8009da8:	bd38      	pop	{r3, r4, r5, pc}

08009daa <TimerGetCurrentTime>:
{
 8009daa:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 8009dac:	f7ff fef8 	bl	8009ba0 <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 8009db0:	f7ff ff0c 	bl	8009bcc <RtcTick2Ms>
}
 8009db4:	bd08      	pop	{r3, pc}

08009db6 <TimerGetElapsedTime>:
{
 8009db6:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 8009db8:	4604      	mov	r4, r0
 8009dba:	b908      	cbnz	r0, 8009dc0 <TimerGetElapsedTime+0xa>
}
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 8009dc0:	f7ff feee 	bl	8009ba0 <RtcGetTimerValue>
 8009dc4:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f7ff feff 	bl	8009bca <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8009dcc:	1a28      	subs	r0, r5, r0
 8009dce:	f7ff fefd 	bl	8009bcc <RtcTick2Ms>
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	e7f2      	b.n	8009dbc <TimerGetElapsedTime+0x6>

08009dd6 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 8009dd6:	b508      	push	{r3, lr}
    DelayMsMcu( ms );
 8009dd8:	f7ff feec 	bl	8009bb4 <DelayMsMcu>
}
 8009ddc:	bd08      	pop	{r3, pc}

08009dde <SX1276ConvertPllStepToFreqInHz>:
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8009dde:	0a01      	lsrs	r1, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8009de0:	f643 5209 	movw	r2, #15625	; 0x3d09
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8009de4:	b2c3      	uxtb	r3, r0
 8009de6:	fb02 f303 	mul.w	r3, r2, r3
 8009dea:	3380      	adds	r3, #128	; 0x80
 8009dec:	0a1b      	lsrs	r3, r3, #8
}
 8009dee:	fb02 3001 	mla	r0, r2, r1, r3
 8009df2:	4770      	bx	lr

08009df4 <SX1276GetGfskTimeOnAirNumerator>:
    return ( preambleLen << 3 ) +
 8009df4:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8009df6:	b941      	cbnz	r1, 8009e0a <SX1276GetGfskTimeOnAirNumerator+0x16>
 8009df8:	2108      	movs	r1, #8
    return ( preambleLen << 3 ) +
 8009dfa:	4408      	add	r0, r1
           ( ( fixLen == false ) ? 8 : 0 ) +
 8009dfc:	3018      	adds	r0, #24
               ( ( crcOn == true ) ? 2 : 0 ) 
 8009dfe:	b133      	cbz	r3, 8009e0e <SX1276GetGfskTimeOnAirNumerator+0x1a>
 8009e00:	2302      	movs	r3, #2
               ( 0 ) + // Address filter size
 8009e02:	441a      	add	r2, r3
}
 8009e04:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8009e08:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	e7f5      	b.n	8009dfa <SX1276GetGfskTimeOnAirNumerator+0x6>
               ( ( crcOn == true ) ? 2 : 0 ) 
 8009e0e:	2300      	movs	r3, #0
 8009e10:	e7f7      	b.n	8009e02 <SX1276GetGfskTimeOnAirNumerator+0xe>

08009e12 <SX1276GetLoRaTimeOnAirNumerator>:
{
 8009e12:	b570      	push	{r4, r5, r6, lr}
 8009e14:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8009e18:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8009e1c:	3204      	adds	r2, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8009e1e:	f1a1 0c05 	sub.w	ip, r1, #5
 8009e22:	f1bc 0f01 	cmp.w	ip, #1
 8009e26:	d932      	bls.n	8009e8e <SX1276GetLoRaTimeOnAirNumerator+0x7c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009e28:	b918      	cbnz	r0, 8009e32 <SX1276GetLoRaTimeOnAirNumerator+0x20>
 8009e2a:	f1a1 060b 	sub.w	r6, r1, #11
 8009e2e:	2e01      	cmp	r6, #1
 8009e30:	d935      	bls.n	8009e9e <SX1276GetLoRaTimeOnAirNumerator+0x8c>
 8009e32:	2801      	cmp	r0, #1
 8009e34:	d02f      	beq.n	8009e96 <SX1276GetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 8009e36:	2600      	movs	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009e38:	f89d e014 	ldrb.w	lr, [sp, #20]
 8009e3c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8009e40:	b38d      	cbz	r5, 8009ea6 <SX1276GetLoRaTimeOnAirNumerator+0x94>
 8009e42:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009e46:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8009e48:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8009e4a:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8009e4e:	b36c      	cbz	r4, 8009eac <SX1276GetLoRaTimeOnAirNumerator+0x9a>
 8009e50:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 8009e54:	44f4      	add	ip, lr
    if( datarate <= 6 )
 8009e56:	2906      	cmp	r1, #6
 8009e58:	d904      	bls.n	8009e64 <SX1276GetLoRaTimeOnAirNumerator+0x52>
        ceilNumerator += 8;
 8009e5a:	f10c 0c08 	add.w	ip, ip, #8
        if( lowDatareOptimize == true )
 8009e5e:	b10e      	cbz	r6, 8009e64 <SX1276GetLoRaTimeOnAirNumerator+0x52>
            ceilDenominator = 4 * ( datarate - 2 );
 8009e60:	1e88      	subs	r0, r1, #2
 8009e62:	0080      	lsls	r0, r0, #2
    if( ceilNumerator < 0 )
 8009e64:	f1bc 0f00 	cmp.w	ip, #0
 8009e68:	db23      	blt.n	8009eb2 <SX1276GetLoRaTimeOnAirNumerator+0xa0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8009e6a:	4484      	add	ip, r0
 8009e6c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009e70:	fb9c fcf0 	sdiv	ip, ip, r0
 8009e74:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8009e78:	f103 000c 	add.w	r0, r3, #12
    if( datarate <= 6 )
 8009e7c:	2906      	cmp	r1, #6
 8009e7e:	d801      	bhi.n	8009e84 <SX1276GetLoRaTimeOnAirNumerator+0x72>
        intermediate += 2;
 8009e80:	f103 000e 	add.w	r0, r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8009e84:	0080      	lsls	r0, r0, #2
 8009e86:	3001      	adds	r0, #1
 8009e88:	3902      	subs	r1, #2
}
 8009e8a:	4088      	lsls	r0, r1
 8009e8c:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8009e8e:	2b0b      	cmp	r3, #11
 8009e90:	d8ca      	bhi.n	8009e28 <SX1276GetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8009e92:	230c      	movs	r3, #12
 8009e94:	e7c8      	b.n	8009e28 <SX1276GetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009e96:	290c      	cmp	r1, #12
 8009e98:	d003      	beq.n	8009ea2 <SX1276GetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 8009e9a:	2600      	movs	r6, #0
 8009e9c:	e7cc      	b.n	8009e38 <SX1276GetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8009e9e:	2601      	movs	r6, #1
 8009ea0:	e7ca      	b.n	8009e38 <SX1276GetLoRaTimeOnAirNumerator+0x26>
 8009ea2:	2601      	movs	r6, #1
 8009ea4:	e7c8      	b.n	8009e38 <SX1276GetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8009ea6:	f04f 0c00 	mov.w	ip, #0
 8009eaa:	e7cc      	b.n	8009e46 <SX1276GetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 8009eac:	f04f 0c14 	mov.w	ip, #20
 8009eb0:	e7d0      	b.n	8009e54 <SX1276GetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 8009eb2:	f04f 0c00 	mov.w	ip, #0
 8009eb6:	e7d8      	b.n	8009e6a <SX1276GetLoRaTimeOnAirNumerator+0x58>

08009eb8 <SX1276ReadFifo>:
{
 8009eb8:	b508      	push	{r3, lr}
 8009eba:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8009ebc:	4601      	mov	r1, r0
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	f7ff fedd 	bl	8009c7e <SX1276ReadBuffer>
}
 8009ec4:	bd08      	pop	{r3, pc}

08009ec6 <SX1276WriteFifo>:
{
 8009ec6:	b508      	push	{r3, lr}
 8009ec8:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 8009eca:	4601      	mov	r1, r0
 8009ecc:	2000      	movs	r0, #0
 8009ece:	f7ff fee4 	bl	8009c9a <SX1276WriteBuffer>
}
 8009ed2:	bd08      	pop	{r3, pc}

08009ed4 <SX1276GetTimeOnAir>:
{
 8009ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	460e      	mov	r6, r1
 8009eda:	4615      	mov	r5, r2
 8009edc:	461a      	mov	r2, r3
 8009ede:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 8009ee2:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8009ee6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8009eea:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    switch( modem )
 8009eee:	b148      	cbz	r0, 8009f04 <SX1276GetTimeOnAir+0x30>
 8009ef0:	2801      	cmp	r0, #1
 8009ef2:	d010      	beq.n	8009f16 <SX1276GetTimeOnAir+0x42>
 8009ef4:	2501      	movs	r5, #1
 8009ef6:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 8009ef8:	1960      	adds	r0, r4, r5
 8009efa:	3801      	subs	r0, #1
}
 8009efc:	fbb0 f0f5 	udiv	r0, r0, r5
 8009f00:	b005      	add	sp, #20
 8009f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8009f04:	463a      	mov	r2, r7
 8009f06:	4660      	mov	r0, ip
 8009f08:	f7ff ff74 	bl	8009df4 <SX1276GetGfskTimeOnAirNumerator>
 8009f0c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8009f10:	fb00 f404 	mul.w	r4, r0, r4
        break;
 8009f14:	e7f0      	b.n	8009ef8 <SX1276GetTimeOnAir+0x24>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8009f16:	9302      	str	r3, [sp, #8]
 8009f18:	9701      	str	r7, [sp, #4]
 8009f1a:	9100      	str	r1, [sp, #0]
 8009f1c:	4663      	mov	r3, ip
 8009f1e:	4629      	mov	r1, r5
 8009f20:	4630      	mov	r0, r6
 8009f22:	f7ff ff76 	bl	8009e12 <SX1276GetLoRaTimeOnAirNumerator>
 8009f26:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8009f2a:	fb00 f404 	mul.w	r4, r0, r4
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f7f9 fe18 	bl	8003b64 <SX1276GetLoRaBandwidthInHz>
 8009f34:	4605      	mov	r5, r0
        break;
 8009f36:	e7df      	b.n	8009ef8 <SX1276GetTimeOnAir+0x24>

08009f38 <SX1276Write>:
{
 8009f38:	b500      	push	{lr}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8009f40:	2201      	movs	r2, #1
 8009f42:	f10d 0107 	add.w	r1, sp, #7
 8009f46:	f7ff fea8 	bl	8009c9a <SX1276WriteBuffer>
}
 8009f4a:	b003      	add	sp, #12
 8009f4c:	f85d fb04 	ldr.w	pc, [sp], #4

08009f50 <SX1276Read>:
{
 8009f50:	b500      	push	{lr}
 8009f52:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 8009f54:	2201      	movs	r2, #1
 8009f56:	f10d 0107 	add.w	r1, sp, #7
 8009f5a:	f7ff fe90 	bl	8009c7e <SX1276ReadBuffer>
}
 8009f5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8009f62:	b003      	add	sp, #12
 8009f64:	f85d fb04 	ldr.w	pc, [sp], #4

08009f68 <SX1276SetOpMode>:
{
 8009f68:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	b970      	cbnz	r0, 8009f8c <SX1276SetOpMode+0x24>
        SX1276SetAntSwLowPower( true );
 8009f6e:	2001      	movs	r0, #1
 8009f70:	f7ff fe7b 	bl	8009c6a <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8009f74:	2001      	movs	r0, #1
 8009f76:	f7ff ffeb 	bl	8009f50 <SX1276Read>
 8009f7a:	b241      	sxtb	r1, r0
 8009f7c:	f021 0107 	bic.w	r1, r1, #7
 8009f80:	4321      	orrs	r1, r4
 8009f82:	b2c9      	uxtb	r1, r1
 8009f84:	2001      	movs	r0, #1
 8009f86:	f7ff ffd7 	bl	8009f38 <SX1276Write>
}
 8009f8a:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 8009f8c:	2001      	movs	r0, #1
 8009f8e:	f7ff fe6d 	bl	8009c6c <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 8009f92:	2000      	movs	r0, #0
 8009f94:	f7ff fe69 	bl	8009c6a <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f7ff fe68 	bl	8009c6e <SX1276SetAntSw>
 8009f9e:	e7e9      	b.n	8009f74 <SX1276SetOpMode+0xc>

08009fa0 <SX1276IsChannelFree>:
{
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	4616      	mov	r6, r2
 8009fa8:	461d      	mov	r5, r3
    SX1276SetSleep( );
 8009faa:	f7fa f935 	bl	8004218 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 8009fae:	2000      	movs	r0, #0
 8009fb0:	f7fa fbc8 	bl	8004744 <SX1276SetModem>
    SX1276SetChannel( freq );
 8009fb4:	4638      	mov	r0, r7
 8009fb6:	f7f9 fdff 	bl	8003bb8 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f7f9 fda8 	bl	8003b10 <GetFskBandwidthRegValue>
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	2012      	movs	r0, #18
 8009fc6:	f7ff ffb7 	bl	8009f38 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8009fca:	4621      	mov	r1, r4
 8009fcc:	2013      	movs	r0, #19
 8009fce:	f7ff ffb3 	bl	8009f38 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8009fd2:	2005      	movs	r0, #5
 8009fd4:	f7ff ffc8 	bl	8009f68 <SX1276SetOpMode>
    DelayMs( 1 );
 8009fd8:	2001      	movs	r0, #1
 8009fda:	f7ff fefc 	bl	8009dd6 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 8009fde:	f7ff fee4 	bl	8009daa <TimerGetCurrentTime>
 8009fe2:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f7ff fee6 	bl	8009db6 <TimerGetElapsedTime>
 8009fea:	42a8      	cmp	r0, r5
 8009fec:	d206      	bcs.n	8009ffc <SX1276IsChannelFree+0x5c>
        rssi = SX1276ReadRssi( MODEM_FSK );
 8009fee:	2000      	movs	r0, #0
 8009ff0:	f7fa fb80 	bl	80046f4 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8009ff4:	42b0      	cmp	r0, r6
 8009ff6:	ddf5      	ble.n	8009fe4 <SX1276IsChannelFree+0x44>
            status = false;
 8009ff8:	2400      	movs	r4, #0
 8009ffa:	e000      	b.n	8009ffe <SX1276IsChannelFree+0x5e>
    bool status = true;
 8009ffc:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8009ffe:	f7fa f90b 	bl	8004218 <SX1276SetSleep>
}
 800a002:	4620      	mov	r0, r4
 800a004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a006 <SX1276Random>:
{
 800a006:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 800a008:	2001      	movs	r0, #1
 800a00a:	f7fa fb9b 	bl	8004744 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800a00e:	21ff      	movs	r1, #255	; 0xff
 800a010:	2011      	movs	r0, #17
 800a012:	f7ff ff91 	bl	8009f38 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800a016:	2005      	movs	r0, #5
 800a018:	f7ff ffa6 	bl	8009f68 <SX1276SetOpMode>
    uint32_t rnd = 0;
 800a01c:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 800a01e:	462c      	mov	r4, r5
 800a020:	e00b      	b.n	800a03a <SX1276Random+0x34>
        DelayMs( 1 );
 800a022:	2001      	movs	r0, #1
 800a024:	f7ff fed7 	bl	8009dd6 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800a028:	202c      	movs	r0, #44	; 0x2c
 800a02a:	f7ff ff91 	bl	8009f50 <SX1276Read>
 800a02e:	f000 0001 	and.w	r0, r0, #1
 800a032:	40a0      	lsls	r0, r4
 800a034:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800a036:	3401      	adds	r4, #1
 800a038:	b2e4      	uxtb	r4, r4
 800a03a:	2c1f      	cmp	r4, #31
 800a03c:	d9f1      	bls.n	800a022 <SX1276Random+0x1c>
    SX1276SetSleep( );
 800a03e:	f7fa f8eb 	bl	8004218 <SX1276SetSleep>
}
 800a042:	4628      	mov	r0, r5
 800a044:	bd38      	pop	{r3, r4, r5, pc}

0800a046 <SX1276GetWakeupTime>:
{
 800a046:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 800a048:	f7ff fe0d 	bl	8009c66 <SX1276GetBoardTcxoWakeupTime>
}
 800a04c:	3001      	adds	r0, #1
 800a04e:	bd08      	pop	{r3, pc}

0800a050 <uart_stm32_config_get>:
	struct uart_stm32_data *data = dev->data;
 800a050:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a056:	6843      	ldr	r3, [r0, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800a060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a064:	d02f      	beq.n	800a0c6 <uart_stm32_config_get+0x76>
 800a066:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a06a:	d12e      	bne.n	800a0ca <uart_stm32_config_get+0x7a>
 800a06c:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800a06e:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a070:	6843      	ldr	r3, [r0, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800a07a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a07e:	d028      	beq.n	800a0d2 <uart_stm32_config_get+0x82>
 800a080:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a084:	d027      	beq.n	800a0d6 <uart_stm32_config_get+0x86>
 800a086:	b313      	cbz	r3, 800a0ce <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 800a088:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800a08a:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a08c:	6843      	ldr	r3, [r0, #4]
 800a08e:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800a090:	6813      	ldr	r3, [r2, #0]
 800a092:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800a096:	6812      	ldr	r2, [r2, #0]
 800a098:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	switch (db) {
 800a09c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0a0:	d01d      	beq.n	800a0de <uart_stm32_config_get+0x8e>
 800a0a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0a6:	d11d      	bne.n	800a0e4 <uart_stm32_config_get+0x94>
		if (p == LL_USART_PARITY_NONE) {
 800a0a8:	b1ba      	cbz	r2, 800a0da <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_6;
 800a0aa:	2301      	movs	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800a0ac:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a0ae:	6843      	ldr	r3, [r0, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800a0b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0bc:	d019      	beq.n	800a0f2 <uart_stm32_config_get+0xa2>
	return UART_CFG_FLOW_CTRL_NONE;
 800a0be:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 800a0c0:	71cb      	strb	r3, [r1, #7]
}
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e7d1      	b.n	800a06e <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	e7cf      	b.n	800a06e <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e7db      	b.n	800a08a <uart_stm32_config_get+0x3a>
	switch (sb) {
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	e7d9      	b.n	800a08a <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	e7d7      	b.n	800a08a <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_7;
 800a0da:	2302      	movs	r3, #2
 800a0dc:	e7e6      	b.n	800a0ac <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 800a0de:	b922      	cbnz	r2, 800a0ea <uart_stm32_config_get+0x9a>
			return UART_CFG_DATA_BITS_9;
 800a0e0:	2304      	movs	r3, #4
 800a0e2:	e7e3      	b.n	800a0ac <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 800a0e4:	b91a      	cbnz	r2, 800a0ee <uart_stm32_config_get+0x9e>
			return UART_CFG_DATA_BITS_8;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e7e0      	b.n	800a0ac <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	e7de      	b.n	800a0ac <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_7;
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	e7dc      	b.n	800a0ac <uart_stm32_config_get+0x5c>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e7e4      	b.n	800a0c0 <uart_stm32_config_get+0x70>

0800a0f6 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a0f6:	6843      	ldr	r3, [r0, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800a0fa:	69da      	ldr	r2, [r3, #28]
 800a0fc:	f012 0f08 	tst.w	r2, #8
 800a100:	d001      	beq.n	800a106 <uart_stm32_poll_in+0x10>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800a102:	2208      	movs	r2, #8
 800a104:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800a106:	69da      	ldr	r2, [r3, #28]
 800a108:	f012 0f20 	tst.w	r2, #32
 800a10c:	d003      	beq.n	800a116 <uart_stm32_poll_in+0x20>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800a10e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 800a110:	700b      	strb	r3, [r1, #0]
	return 0;
 800a112:	2000      	movs	r0, #0
 800a114:	4770      	bx	lr
		return -1;
 800a116:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a11a:	4770      	bx	lr

0800a11c <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a11c:	6843      	ldr	r3, [r0, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800a120:	69da      	ldr	r2, [r3, #28]
 800a122:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a126:	d0fb      	beq.n	800a120 <uart_stm32_poll_out+0x4>
	__asm__ volatile(
 800a128:	f04f 0010 	mov.w	r0, #16
 800a12c:	f3ef 8211 	mrs	r2, BASEPRI
 800a130:	f380 8812 	msr	BASEPRI_MAX, r0
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	69d8      	ldr	r0, [r3, #28]
 800a13a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a13e:	d104      	bne.n	800a14a <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 800a140:	f382 8811 	msr	BASEPRI, r2
 800a144:	f3bf 8f6f 	isb	sy
}
 800a148:	e7ea      	b.n	800a120 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800a14a:	b289      	uxth	r1, r1
 800a14c:	8519      	strh	r1, [r3, #40]	; 0x28
	__asm__ volatile(
 800a14e:	f382 8811 	msr	BASEPRI, r2
 800a152:	f3bf 8f6f 	isb	sy
}
 800a156:	4770      	bx	lr

0800a158 <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a158:	6843      	ldr	r3, [r0, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800a15c:	69d8      	ldr	r0, [r3, #28]
 800a15e:	f010 0008 	ands.w	r0, r0, #8
 800a162:	d000      	beq.n	800a166 <uart_stm32_err_check+0xe>
		err |= UART_ERROR_OVERRUN;
 800a164:	2001      	movs	r0, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800a166:	69da      	ldr	r2, [r3, #28]
 800a168:	f012 0f01 	tst.w	r2, #1
 800a16c:	d001      	beq.n	800a172 <uart_stm32_err_check+0x1a>
		err |= UART_ERROR_PARITY;
 800a16e:	f040 0002 	orr.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800a172:	69da      	ldr	r2, [r3, #28]
 800a174:	f012 0f02 	tst.w	r2, #2
 800a178:	d001      	beq.n	800a17e <uart_stm32_err_check+0x26>
		err |= UART_ERROR_FRAMING;
 800a17a:	f040 0004 	orr.w	r0, r0, #4
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 800a17e:	69da      	ldr	r2, [r3, #28]
 800a180:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a184:	d001      	beq.n	800a18a <uart_stm32_err_check+0x32>
		err |= UART_BREAK;
 800a186:	f040 0008 	orr.w	r0, r0, #8
	if (err & UART_BREAK) {
 800a18a:	f010 0f08 	tst.w	r0, #8
 800a18e:	d002      	beq.n	800a196 <uart_stm32_err_check+0x3e>
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 800a190:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a194:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 800a196:	f010 0f01 	tst.w	r0, #1
 800a19a:	d001      	beq.n	800a1a0 <uart_stm32_err_check+0x48>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800a19c:	2208      	movs	r2, #8
 800a19e:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 800a1a0:	f010 0f02 	tst.w	r0, #2
 800a1a4:	d001      	beq.n	800a1aa <uart_stm32_err_check+0x52>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 800a1aa:	f010 0f04 	tst.w	r0, #4
 800a1ae:	d001      	beq.n	800a1b4 <uart_stm32_err_check+0x5c>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800a1b4:	2204      	movs	r2, #4
 800a1b6:	621a      	str	r2, [r3, #32]
}
 800a1b8:	4770      	bx	lr

0800a1ba <uart_stm32_async_callback_set>:
	struct uart_stm32_data *data = dev->data;
 800a1ba:	6903      	ldr	r3, [r0, #16]
	data->async_cb = callback;
 800a1bc:	60d9      	str	r1, [r3, #12]
	data->async_user_data = user_data;
 800a1be:	611a      	str	r2, [r3, #16]
}
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	4770      	bx	lr

0800a1c4 <uart_stm32_async_rx_buf_rsp>:
	struct uart_stm32_data *data = dev->data;
 800a1c4:	6903      	ldr	r3, [r0, #16]
	data->rx_next_buffer = buf;
 800a1c6:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
	data->rx_next_buffer_len = len;
 800a1ca:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
}
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	4770      	bx	lr

0800a1d2 <uart_stm32_dma_tx_cb>:
{
 800a1d2:	b530      	push	{r4, r5, lr}
 800a1d4:	b083      	sub	sp, #12
	struct uart_stm32_data *data = uart_dev->data;
 800a1d6:	690c      	ldr	r4, [r1, #16]
	__asm__ volatile(
 800a1d8:	f04f 0310 	mov.w	r3, #16
 800a1dc:	f3ef 8511 	mrs	r5, BASEPRI
 800a1e0:	f383 8812 	msr	BASEPRI_MAX, r3
 800a1e4:	f3bf 8f6f 	isb	sy
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a1e8:	684b      	ldr	r3, [r1, #4]
 800a1ea:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 800a1ec:	6893      	ldr	r3, [r2, #8]
 800a1ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1f2:	6093      	str	r3, [r2, #8]
	(void)k_work_cancel_delayable(&data->dma_tx.timeout_work);
 800a1f4:	f504 7088 	add.w	r0, r4, #272	; 0x110
 800a1f8:	f000 fccc 	bl	800ab94 <k_work_cancel_delayable>
	if (!dma_get_status(data->dma_tx.dma_dev,
 800a1fc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800a200:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 * @retval Negative errno code if failure.
 */
static inline int dma_get_status(const struct device *dev, uint32_t channel,
				 struct dma_status *stat)
{
	const struct dma_driver_api *api =
 800a204:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	if (api->get_status) {
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	b143      	cbz	r3, 800a21c <uart_stm32_dma_tx_cb+0x4a>
		return api->get_status(dev, channel, stat);
 800a20a:	466a      	mov	r2, sp
 800a20c:	4798      	blx	r3
 800a20e:	b928      	cbnz	r0, 800a21c <uart_stm32_dma_tx_cb+0x4a>
		data->dma_tx.counter = data->dma_tx.buffer_length -
 800a210:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
					stat.pending_length;
 800a214:	9a01      	ldr	r2, [sp, #4]
		data->dma_tx.counter = data->dma_tx.buffer_length -
 800a216:	1a9b      	subs	r3, r3, r2
 800a218:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	data->dma_tx.buffer_length = 0;
 800a21c:	2300      	movs	r3, #0
 800a21e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	__asm__ volatile(
 800a222:	f385 8811 	msr	BASEPRI, r5
 800a226:	f3bf 8f6f 	isb	sy
}
 800a22a:	b003      	add	sp, #12
 800a22c:	bd30      	pop	{r4, r5, pc}

0800a22e <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 800a22e:	b508      	push	{r3, lr}
 800a230:	2200      	movs	r2, #0
 800a232:	4611      	mov	r1, r2
 800a234:	2026      	movs	r0, #38	; 0x26
 800a236:	f7f7 faa1 	bl	800177c <z_arm_irq_priority_set>
 800a23a:	2026      	movs	r0, #38	; 0x26
 800a23c:	f7f7 fa6e 	bl	800171c <arch_irq_enable>
 800a240:	bd08      	pop	{r3, pc}

0800a242 <uart_stm32_async_tx>:
{
 800a242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a244:	4605      	mov	r5, r0
	struct uart_stm32_data *data = dev->data;
 800a246:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a248:	6840      	ldr	r0, [r0, #4]
 800a24a:	6800      	ldr	r0, [r0, #0]
	if (data->dma_tx.dma_dev == NULL) {
 800a24c:	f8d4 60b0 	ldr.w	r6, [r4, #176]	; 0xb0
 800a250:	2e00      	cmp	r6, #0
 800a252:	d04b      	beq.n	800a2ec <uart_stm32_async_tx+0xaa>
	if (data->dma_tx.buffer_length != 0) {
 800a254:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 800a258:	2e00      	cmp	r6, #0
 800a25a:	d14a      	bne.n	800a2f2 <uart_stm32_async_tx+0xb0>
	data->dma_tx.buffer = (uint8_t *)tx_data;
 800a25c:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
	data->dma_tx.buffer_length = buf_size;
 800a260:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	data->dma_tx.timeout = timeout;
 800a264:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800a268:	2340      	movs	r3, #64	; 0x40
 800a26a:	6203      	str	r3, [r0, #32]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800a26c:	6803      	ldr	r3, [r0, #0]
 800a26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a272:	6003      	str	r3, [r0, #0]
	data->dma_tx.blk_cfg.source_address = (uint32_t)data->dma_tx.buffer;
 800a274:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800a278:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	data->dma_tx.blk_cfg.block_size = data->dma_tx.buffer_length;
 800a27c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a280:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	ret = dma_config(data->dma_tx.dma_dev, data->dma_tx.dma_channel,
 800a284:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
	const struct dma_driver_api *api =
 800a288:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, channel, config);
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
 800a290:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800a294:	4798      	blx	r3
	if (ret != 0) {
 800a296:	bb78      	cbnz	r0, 800a2f8 <uart_stm32_async_tx+0xb6>
	if (dma_start(data->dma_tx.dma_dev, data->dma_tx.dma_channel)) {
 800a298:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800a29c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	const struct dma_driver_api *api =
 800a2a0:	6883      	ldr	r3, [r0, #8]
	return api->start(dev, channel);
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	4798      	blx	r3
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	bb48      	cbnz	r0, 800a2fe <uart_stm32_async_tx+0xbc>
	async_timer_start(&data->dma_tx.timeout_work, data->dma_tx.timeout);
 800a2aa:	f504 7788 	add.w	r7, r4, #272	; 0x110
 800a2ae:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
	if ((timeout != SYS_FOREVER_US) && (timeout != 0)) {
 800a2b2:	1c43      	adds	r3, r0, #1
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d807      	bhi.n	800a2c8 <uart_stm32_async_tx+0x86>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a2b8:	686b      	ldr	r3, [r5, #4]
 800a2ba:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800a2bc:	6893      	ldr	r3, [r2, #8]
 800a2be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c2:	6093      	str	r3, [r2, #8]
}
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_work_reschedule(work, K_USEC(timeout));
 800a2c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a2cc:	17c1      	asrs	r1, r0, #31
		t += off;
 800a2ce:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
 800a2d0:	f04f 0264 	mov.w	r2, #100	; 0x64
 800a2d4:	f04f 0300 	mov.w	r3, #0
 800a2d8:	f141 0100 	adc.w	r1, r1, #0
 800a2dc:	f7f5 ffb0 	bl	8000240 <__aeabi_uldivmod>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	f7fc f8d7 	bl	8006498 <k_work_reschedule>
 800a2ea:	e7e5      	b.n	800a2b8 <uart_stm32_async_tx+0x76>
		return -ENODEV;
 800a2ec:	f06f 0612 	mvn.w	r6, #18
 800a2f0:	e7e8      	b.n	800a2c4 <uart_stm32_async_tx+0x82>
		return -EBUSY;
 800a2f2:	f06f 060f 	mvn.w	r6, #15
 800a2f6:	e7e5      	b.n	800a2c4 <uart_stm32_async_tx+0x82>
		return -EINVAL;
 800a2f8:	f06f 0615 	mvn.w	r6, #21
 800a2fc:	e7e2      	b.n	800a2c4 <uart_stm32_async_tx+0x82>
		return -EFAULT;
 800a2fe:	f06f 060d 	mvn.w	r6, #13
 800a302:	e7df      	b.n	800a2c4 <uart_stm32_async_tx+0x82>

0800a304 <uart_stm32_async_tx_abort>:
{
 800a304:	b530      	push	{r4, r5, lr}
 800a306:	b089      	sub	sp, #36	; 0x24
	struct uart_stm32_data *data = dev->data;
 800a308:	6904      	ldr	r4, [r0, #16]
	size_t tx_buffer_length = data->dma_tx.buffer_length;
 800a30a:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
	if (tx_buffer_length == 0) {
 800a30e:	2d00      	cmp	r5, #0
 800a310:	d034      	beq.n	800a37c <uart_stm32_async_tx_abort+0x78>
	(void)k_work_cancel_delayable(&data->dma_tx.timeout_work);
 800a312:	f504 7088 	add.w	r0, r4, #272	; 0x110
 800a316:	f000 fc3d 	bl	800ab94 <k_work_cancel_delayable>
	if (!dma_get_status(data->dma_tx.dma_dev,
 800a31a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800a31e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	const struct dma_driver_api *api =
 800a322:	6883      	ldr	r3, [r0, #8]
	if (api->get_status) {
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	b133      	cbz	r3, 800a336 <uart_stm32_async_tx_abort+0x32>
		return api->get_status(dev, channel, stat);
 800a328:	aa06      	add	r2, sp, #24
 800a32a:	4798      	blx	r3
 800a32c:	b918      	cbnz	r0, 800a336 <uart_stm32_async_tx_abort+0x32>
		data->dma_tx.counter = tx_buffer_length - stat.pending_length;
 800a32e:	9b07      	ldr	r3, [sp, #28]
 800a330:	1aed      	subs	r5, r5, r3
 800a332:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	dma_stop(data->dma_tx.dma_dev, data->dma_tx.dma_channel);
 800a336:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800a33a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	const struct dma_driver_api *api =
 800a33e:	6883      	ldr	r3, [r0, #8]
	return api->stop(dev, channel);
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	4798      	blx	r3
	struct uart_event event = {
 800a344:	2300      	movs	r3, #0
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	9302      	str	r3, [sp, #8]
 800a34a:	9303      	str	r3, [sp, #12]
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	9305      	str	r3, [sp, #20]
 800a350:	2201      	movs	r2, #1
 800a352:	f88d 2004 	strb.w	r2, [sp, #4]
		.data.tx.buf = data->dma_tx.buffer,
 800a356:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	struct uart_event event = {
 800a35a:	9202      	str	r2, [sp, #8]
		.data.tx.len = data->dma_tx.counter
 800a35c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	struct uart_event event = {
 800a360:	9203      	str	r2, [sp, #12]
	data->dma_tx.buffer_length = 0;
 800a362:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	data->dma_tx.counter = 0;
 800a366:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	if (data->async_cb) {
 800a36a:	68e3      	ldr	r3, [r4, #12]
 800a36c:	b11b      	cbz	r3, 800a376 <uart_stm32_async_tx_abort+0x72>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a36e:	6922      	ldr	r2, [r4, #16]
 800a370:	a901      	add	r1, sp, #4
 800a372:	68a0      	ldr	r0, [r4, #8]
 800a374:	4798      	blx	r3
	return 0;
 800a376:	2000      	movs	r0, #0
}
 800a378:	b009      	add	sp, #36	; 0x24
 800a37a:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
 800a37c:	f06f 000d 	mvn.w	r0, #13
 800a380:	e7fa      	b.n	800a378 <uart_stm32_async_tx_abort+0x74>

0800a382 <uart_stm32_async_tx_timeout>:
{
 800a382:	b508      	push	{r3, lr}
	const struct device *dev = data->uart_dev;
 800a384:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
	uart_stm32_async_tx_abort(dev);
 800a388:	6880      	ldr	r0, [r0, #8]
 800a38a:	f7ff ffbb 	bl	800a304 <uart_stm32_async_tx_abort>
}
 800a38e:	bd08      	pop	{r3, pc}

0800a390 <uart_stm32_dma_replace_buffer>:
{
 800a390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a392:	b089      	sub	sp, #36	; 0x24
 800a394:	4605      	mov	r5, r0
	struct uart_stm32_data *data = dev->data;
 800a396:	6904      	ldr	r4, [r0, #16]
	data->dma_rx.offset = 0;
 800a398:	2200      	movs	r2, #0
 800a39a:	66e2      	str	r2, [r4, #108]	; 0x6c
	data->dma_rx.counter = 0;
 800a39c:	6722      	str	r2, [r4, #112]	; 0x70
	data->dma_rx.buffer = data->rx_next_buffer;
 800a39e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800a3a2:	6663      	str	r3, [r4, #100]	; 0x64
	data->dma_rx.buffer_length = data->rx_next_buffer_len;
 800a3a4:	f8d4 614c 	ldr.w	r6, [r4, #332]	; 0x14c
 800a3a8:	66a6      	str	r6, [r4, #104]	; 0x68
	data->dma_rx.blk_cfg.block_size = data->dma_rx.buffer_length;
 800a3aa:	65a6      	str	r6, [r4, #88]	; 0x58
	data->dma_rx.blk_cfg.dest_address = (uint32_t)data->dma_rx.buffer;
 800a3ac:	64a3      	str	r3, [r4, #72]	; 0x48
	data->rx_next_buffer = NULL;
 800a3ae:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	data->rx_next_buffer_len = 0;
 800a3b2:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
	dma_reload(data->dma_rx.dma_dev, data->dma_rx.dma_channel,
 800a3b6:	69a0      	ldr	r0, [r4, #24]
 800a3b8:	69e1      	ldr	r1, [r4, #28]
 800a3ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
	const struct dma_driver_api *api =
 800a3bc:	6887      	ldr	r7, [r0, #8]
	if (api->reload) {
 800a3be:	687f      	ldr	r7, [r7, #4]
 800a3c0:	b10f      	cbz	r7, 800a3c6 <uart_stm32_dma_replace_buffer+0x36>
		return api->reload(dev, channel, src, dst, size);
 800a3c2:	9600      	str	r6, [sp, #0]
 800a3c4:	47b8      	blx	r7
	dma_start(data->dma_rx.dma_dev, data->dma_rx.dma_channel);
 800a3c6:	69a0      	ldr	r0, [r4, #24]
 800a3c8:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 800a3ca:	6883      	ldr	r3, [r0, #8]
	return api->start(dev, channel);
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	4798      	blx	r3
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a3d0:	686b      	ldr	r3, [r5, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800a3d4:	2210      	movs	r2, #16
 800a3d6:	621a      	str	r2, [r3, #32]
	struct uart_event evt = {
 800a3d8:	2300      	movs	r3, #0
 800a3da:	9303      	str	r3, [sp, #12]
 800a3dc:	9304      	str	r3, [sp, #16]
 800a3de:	9305      	str	r3, [sp, #20]
 800a3e0:	9306      	str	r3, [sp, #24]
 800a3e2:	9307      	str	r3, [sp, #28]
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	f88d 300c 	strb.w	r3, [sp, #12]
	if (data->async_cb) {
 800a3ea:	68e3      	ldr	r3, [r4, #12]
 800a3ec:	b11b      	cbz	r3, 800a3f6 <uart_stm32_dma_replace_buffer+0x66>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a3ee:	6922      	ldr	r2, [r4, #16]
 800a3f0:	a903      	add	r1, sp, #12
 800a3f2:	68a0      	ldr	r0, [r4, #8]
 800a3f4:	4798      	blx	r3
}
 800a3f6:	b009      	add	sp, #36	; 0x24
 800a3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a3fa <uart_stm32_async_rx_enable>:
{
 800a3fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3fc:	b087      	sub	sp, #28
 800a3fe:	4606      	mov	r6, r0
	struct uart_stm32_data *data = dev->data;
 800a400:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a402:	6840      	ldr	r0, [r0, #4]
 800a404:	6805      	ldr	r5, [r0, #0]
	if (data->dma_rx.dma_dev == NULL) {
 800a406:	69a0      	ldr	r0, [r4, #24]
 800a408:	2800      	cmp	r0, #0
 800a40a:	d046      	beq.n	800a49a <uart_stm32_async_rx_enable+0xa0>
	if (data->dma_rx.enabled) {
 800a40c:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
 800a410:	2800      	cmp	r0, #0
 800a412:	d145      	bne.n	800a4a0 <uart_stm32_async_rx_enable+0xa6>
	data->dma_rx.offset = 0;
 800a414:	66e0      	str	r0, [r4, #108]	; 0x6c
	data->dma_rx.buffer = rx_buf;
 800a416:	6661      	str	r1, [r4, #100]	; 0x64
	data->dma_rx.buffer_length = buf_size;
 800a418:	66a2      	str	r2, [r4, #104]	; 0x68
	data->dma_rx.counter = 0;
 800a41a:	6720      	str	r0, [r4, #112]	; 0x70
	data->dma_rx.timeout = timeout;
 800a41c:	6763      	str	r3, [r4, #116]	; 0x74
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800a41e:	682b      	ldr	r3, [r5, #0]
 800a420:	f023 0320 	bic.w	r3, r3, #32
 800a424:	602b      	str	r3, [r5, #0]
	data->dma_rx.blk_cfg.block_size = buf_size;
 800a426:	65a2      	str	r2, [r4, #88]	; 0x58
	data->dma_rx.blk_cfg.dest_address = (uint32_t)data->dma_rx.buffer;
 800a428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a42a:	64a3      	str	r3, [r4, #72]	; 0x48
	ret = dma_config(data->dma_rx.dma_dev, data->dma_rx.dma_channel,
 800a42c:	69a0      	ldr	r0, [r4, #24]
	const struct dma_driver_api *api =
 800a42e:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, channel, config);
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f104 0220 	add.w	r2, r4, #32
 800a436:	69e1      	ldr	r1, [r4, #28]
 800a438:	4798      	blx	r3
	if (ret != 0) {
 800a43a:	4607      	mov	r7, r0
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d132      	bne.n	800a4a6 <uart_stm32_async_rx_enable+0xac>
	if (dma_start(data->dma_rx.dma_dev, data->dma_rx.dma_channel)) {
 800a440:	69a0      	ldr	r0, [r4, #24]
 800a442:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 800a444:	6883      	ldr	r3, [r0, #8]
	return api->start(dev, channel);
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	4798      	blx	r3
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d12e      	bne.n	800a4ac <uart_stm32_async_rx_enable+0xb2>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a44e:	6873      	ldr	r3, [r6, #4]
 800a450:	681a      	ldr	r2, [r3, #0]
	struct uart_stm32_data *data = dev->data;
 800a452:	6931      	ldr	r1, [r6, #16]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800a454:	6893      	ldr	r3, [r2, #8]
 800a456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a45a:	6093      	str	r3, [r2, #8]
	data->dma_rx.enabled = true;
 800a45c:	2301      	movs	r3, #1
 800a45e:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800a462:	2310      	movs	r3, #16
 800a464:	622b      	str	r3, [r5, #32]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800a466:	682b      	ldr	r3, [r5, #0]
 800a468:	f043 0310 	orr.w	r3, r3, #16
 800a46c:	602b      	str	r3, [r5, #0]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800a46e:	68ab      	ldr	r3, [r5, #8]
 800a470:	f043 0301 	orr.w	r3, r3, #1
 800a474:	60ab      	str	r3, [r5, #8]
	struct uart_event evt = {
 800a476:	2300      	movs	r3, #0
 800a478:	9301      	str	r3, [sp, #4]
 800a47a:	9302      	str	r3, [sp, #8]
 800a47c:	9303      	str	r3, [sp, #12]
 800a47e:	9304      	str	r3, [sp, #16]
 800a480:	9305      	str	r3, [sp, #20]
 800a482:	2303      	movs	r3, #3
 800a484:	f88d 3004 	strb.w	r3, [sp, #4]
	if (data->async_cb) {
 800a488:	68e3      	ldr	r3, [r4, #12]
 800a48a:	b11b      	cbz	r3, 800a494 <uart_stm32_async_rx_enable+0x9a>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a48c:	6922      	ldr	r2, [r4, #16]
 800a48e:	a901      	add	r1, sp, #4
 800a490:	68a0      	ldr	r0, [r4, #8]
 800a492:	4798      	blx	r3
}
 800a494:	4638      	mov	r0, r7
 800a496:	b007      	add	sp, #28
 800a498:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENODEV;
 800a49a:	f06f 0712 	mvn.w	r7, #18
 800a49e:	e7f9      	b.n	800a494 <uart_stm32_async_rx_enable+0x9a>
		return -EBUSY;
 800a4a0:	f06f 070f 	mvn.w	r7, #15
 800a4a4:	e7f6      	b.n	800a494 <uart_stm32_async_rx_enable+0x9a>
		return -EINVAL;
 800a4a6:	f06f 0715 	mvn.w	r7, #21
 800a4aa:	e7f3      	b.n	800a494 <uart_stm32_async_rx_enable+0x9a>
		return -EFAULT;
 800a4ac:	f06f 070d 	mvn.w	r7, #13
 800a4b0:	e7f0      	b.n	800a494 <uart_stm32_async_rx_enable+0x9a>

0800a4b2 <uart_stm32_dma_rx_cb>:
{
 800a4b2:	b570      	push	{r4, r5, r6, lr}
 800a4b4:	b086      	sub	sp, #24
	struct uart_stm32_data *data = uart_dev->data;
 800a4b6:	690c      	ldr	r4, [r1, #16]
	if (status != 0) {
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d135      	bne.n	800a528 <uart_stm32_dma_rx_cb+0x76>
 800a4bc:	460d      	mov	r5, r1
	(void)k_work_cancel_delayable(&data->dma_rx.timeout_work);
 800a4be:	f104 0678 	add.w	r6, r4, #120	; 0x78
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f000 fb66 	bl	800ab94 <k_work_cancel_delayable>
	data->dma_rx.counter = data->dma_rx.buffer_length;
 800a4c8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a4ca:	6723      	str	r3, [r4, #112]	; 0x70
	struct uart_event event = {
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	9301      	str	r3, [sp, #4]
 800a4d0:	9302      	str	r3, [sp, #8]
 800a4d2:	9303      	str	r3, [sp, #12]
 800a4d4:	9304      	str	r3, [sp, #16]
 800a4d6:	9305      	str	r3, [sp, #20]
 800a4d8:	2302      	movs	r3, #2
 800a4da:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->dma_rx.buffer,
 800a4de:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event event = {
 800a4e0:	9302      	str	r3, [sp, #8]
		.data.rx.offset = data->dma_rx.offset
 800a4e2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
	struct uart_event event = {
 800a4e4:	9203      	str	r2, [sp, #12]
		.data.rx.len = data->dma_rx.counter - data->dma_rx.offset,
 800a4e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a4e8:	1a9b      	subs	r3, r3, r2
	struct uart_event event = {
 800a4ea:	9304      	str	r3, [sp, #16]
	data->dma_rx.offset = data->dma_rx.counter;
 800a4ec:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a4ee:	66e2      	str	r2, [r4, #108]	; 0x6c
	if (event.data.rx.len > 0) {
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d12d      	bne.n	800a550 <uart_stm32_dma_rx_cb+0x9e>
	if (data->rx_next_buffer != NULL) {
 800a4f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d031      	beq.n	800a560 <uart_stm32_dma_rx_cb+0xae>
	struct uart_event evt = {
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	9302      	str	r3, [sp, #8]
 800a502:	9303      	str	r3, [sp, #12]
 800a504:	9304      	str	r3, [sp, #16]
 800a506:	9305      	str	r3, [sp, #20]
 800a508:	2304      	movs	r3, #4
 800a50a:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_buf.buf = data->dma_rx.buffer,
 800a50e:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event evt = {
 800a510:	9302      	str	r3, [sp, #8]
	if (data->async_cb) {
 800a512:	68e3      	ldr	r3, [r4, #12]
 800a514:	b11b      	cbz	r3, 800a51e <uart_stm32_dma_rx_cb+0x6c>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a516:	6922      	ldr	r2, [r4, #16]
 800a518:	a901      	add	r1, sp, #4
 800a51a:	68a0      	ldr	r0, [r4, #8]
 800a51c:	4798      	blx	r3
		uart_stm32_dma_replace_buffer(uart_dev);
 800a51e:	4628      	mov	r0, r5
 800a520:	f7ff ff36 	bl	800a390 <uart_stm32_dma_replace_buffer>
}
 800a524:	b006      	add	sp, #24
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	461a      	mov	r2, r3
	struct uart_event event = {
 800a52a:	2306      	movs	r3, #6
 800a52c:	f88d 3004 	strb.w	r3, [sp, #4]
 800a530:	f88d 2008 	strb.w	r2, [sp, #8]
		.data.rx_stop.data.buf = data->dma_rx.buffer
 800a534:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event event = {
 800a536:	9303      	str	r3, [sp, #12]
 800a538:	2300      	movs	r3, #0
 800a53a:	9304      	str	r3, [sp, #16]
		.data.rx_stop.data.len = data->dma_rx.counter,
 800a53c:	6f23      	ldr	r3, [r4, #112]	; 0x70
	struct uart_event event = {
 800a53e:	9305      	str	r3, [sp, #20]
	if (data->async_cb) {
 800a540:	68e3      	ldr	r3, [r4, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0ee      	beq.n	800a524 <uart_stm32_dma_rx_cb+0x72>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a546:	6922      	ldr	r2, [r4, #16]
 800a548:	a901      	add	r1, sp, #4
 800a54a:	68a0      	ldr	r0, [r4, #8]
 800a54c:	4798      	blx	r3
}
 800a54e:	e7e9      	b.n	800a524 <uart_stm32_dma_rx_cb+0x72>
	if (data->async_cb) {
 800a550:	68e3      	ldr	r3, [r4, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0ce      	beq.n	800a4f4 <uart_stm32_dma_rx_cb+0x42>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a556:	6922      	ldr	r2, [r4, #16]
 800a558:	a901      	add	r1, sp, #4
 800a55a:	68a0      	ldr	r0, [r4, #8]
 800a55c:	4798      	blx	r3
}
 800a55e:	e7c9      	b.n	800a4f4 <uart_stm32_dma_rx_cb+0x42>
		k_work_reschedule(&data->dma_rx.timeout_work, K_TICKS(1));
 800a560:	2201      	movs	r2, #1
 800a562:	2300      	movs	r3, #0
 800a564:	4630      	mov	r0, r6
 800a566:	f7fb ff97 	bl	8006498 <k_work_reschedule>
 800a56a:	e7db      	b.n	800a524 <uart_stm32_dma_rx_cb+0x72>

0800a56c <uart_stm32_dma_rx_flush>:
{
 800a56c:	b510      	push	{r4, lr}
 800a56e:	b088      	sub	sp, #32
	struct uart_stm32_data *data = dev->data;
 800a570:	6904      	ldr	r4, [r0, #16]
	if (dma_get_status(data->dma_rx.dma_dev,
 800a572:	69a0      	ldr	r0, [r4, #24]
 800a574:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 800a576:	6883      	ldr	r3, [r0, #8]
	if (api->get_status) {
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	b143      	cbz	r3, 800a58e <uart_stm32_dma_rx_flush+0x22>
		return api->get_status(dev, channel, stat);
 800a57c:	aa06      	add	r2, sp, #24
 800a57e:	4798      	blx	r3
 800a580:	b928      	cbnz	r0, 800a58e <uart_stm32_dma_rx_flush+0x22>
		size_t rx_rcv_len = data->dma_rx.buffer_length -
 800a582:	6ea3      	ldr	r3, [r4, #104]	; 0x68
					stat.pending_length;
 800a584:	9a07      	ldr	r2, [sp, #28]
		size_t rx_rcv_len = data->dma_rx.buffer_length -
 800a586:	1a9b      	subs	r3, r3, r2
		if (rx_rcv_len > data->dma_rx.offset) {
 800a588:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d301      	bcc.n	800a592 <uart_stm32_dma_rx_flush+0x26>
}
 800a58e:	b008      	add	sp, #32
 800a590:	bd10      	pop	{r4, pc}
			data->dma_rx.counter = rx_rcv_len;
 800a592:	6723      	str	r3, [r4, #112]	; 0x70
	struct uart_event event = {
 800a594:	2300      	movs	r3, #0
 800a596:	9301      	str	r3, [sp, #4]
 800a598:	9302      	str	r3, [sp, #8]
 800a59a:	9303      	str	r3, [sp, #12]
 800a59c:	9304      	str	r3, [sp, #16]
 800a59e:	9305      	str	r3, [sp, #20]
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->dma_rx.buffer,
 800a5a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event event = {
 800a5a8:	9302      	str	r3, [sp, #8]
 800a5aa:	9203      	str	r2, [sp, #12]
		.data.rx.len = data->dma_rx.counter - data->dma_rx.offset,
 800a5ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a5ae:	1a9b      	subs	r3, r3, r2
	struct uart_event event = {
 800a5b0:	9304      	str	r3, [sp, #16]
	data->dma_rx.offset = data->dma_rx.counter;
 800a5b2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a5b4:	66e2      	str	r2, [r4, #108]	; 0x6c
	if (event.data.rx.len > 0) {
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d0e9      	beq.n	800a58e <uart_stm32_dma_rx_flush+0x22>
	if (data->async_cb) {
 800a5ba:	68e3      	ldr	r3, [r4, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d0e6      	beq.n	800a58e <uart_stm32_dma_rx_flush+0x22>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a5c0:	6922      	ldr	r2, [r4, #16]
 800a5c2:	a901      	add	r1, sp, #4
 800a5c4:	68a0      	ldr	r0, [r4, #8]
 800a5c6:	4798      	blx	r3
}
 800a5c8:	e7e1      	b.n	800a58e <uart_stm32_dma_rx_flush+0x22>

0800a5ca <uart_stm32_async_rx_disable>:
{
 800a5ca:	b570      	push	{r4, r5, r6, lr}
 800a5cc:	b08a      	sub	sp, #40	; 0x28
	struct uart_stm32_data *data = dev->data;
 800a5ce:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a5d0:	6843      	ldr	r3, [r0, #4]
 800a5d2:	681e      	ldr	r6, [r3, #0]
	struct uart_event disabled_event = {
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	9305      	str	r3, [sp, #20]
 800a5d8:	9306      	str	r3, [sp, #24]
 800a5da:	9307      	str	r3, [sp, #28]
 800a5dc:	9308      	str	r3, [sp, #32]
 800a5de:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e0:	2305      	movs	r3, #5
 800a5e2:	f88d 3014 	strb.w	r3, [sp, #20]
	if (!data->dma_rx.enabled) {
 800a5e6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d035      	beq.n	800a65a <uart_stm32_async_rx_disable+0x90>
 800a5ee:	4605      	mov	r5, r0
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800a5f0:	6833      	ldr	r3, [r6, #0]
 800a5f2:	f023 0310 	bic.w	r3, r3, #16
 800a5f6:	6033      	str	r3, [r6, #0]
	uart_stm32_dma_rx_flush(dev);
 800a5f8:	f7ff ffb8 	bl	800a56c <uart_stm32_dma_rx_flush>
	struct uart_event evt = {
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	9301      	str	r3, [sp, #4]
 800a602:	9302      	str	r3, [sp, #8]
 800a604:	9303      	str	r3, [sp, #12]
 800a606:	9304      	str	r3, [sp, #16]
 800a608:	2304      	movs	r3, #4
 800a60a:	f88d 3000 	strb.w	r3, [sp]
		.data.rx_buf.buf = data->dma_rx.buffer,
 800a60e:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event evt = {
 800a610:	9301      	str	r3, [sp, #4]
	if (data->async_cb) {
 800a612:	68e3      	ldr	r3, [r4, #12]
 800a614:	b11b      	cbz	r3, 800a61e <uart_stm32_async_rx_disable+0x54>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a616:	6922      	ldr	r2, [r4, #16]
 800a618:	4669      	mov	r1, sp
 800a61a:	68a0      	ldr	r0, [r4, #8]
 800a61c:	4798      	blx	r3
	struct uart_stm32_data *data = dev->data;
 800a61e:	692b      	ldr	r3, [r5, #16]
	data->dma_rx.enabled = false;
 800a620:	2500      	movs	r5, #0
 800a622:	f883 50a8 	strb.w	r5, [r3, #168]	; 0xa8
	(void)k_work_cancel_delayable(&data->dma_rx.timeout_work);
 800a626:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800a62a:	f000 fab3 	bl	800ab94 <k_work_cancel_delayable>
	dma_stop(data->dma_rx.dma_dev, data->dma_rx.dma_channel);
 800a62e:	69a0      	ldr	r0, [r4, #24]
 800a630:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 800a632:	6883      	ldr	r3, [r0, #8]
	return api->stop(dev, channel);
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	4798      	blx	r3
	data->rx_next_buffer = NULL;
 800a638:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
	data->rx_next_buffer_len = 0;
 800a63c:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800a640:	6833      	ldr	r3, [r6, #0]
 800a642:	f043 0320 	orr.w	r3, r3, #32
 800a646:	6033      	str	r3, [r6, #0]
	if (data->async_cb) {
 800a648:	68e3      	ldr	r3, [r4, #12]
 800a64a:	b11b      	cbz	r3, 800a654 <uart_stm32_async_rx_disable+0x8a>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a64c:	6922      	ldr	r2, [r4, #16]
 800a64e:	a905      	add	r1, sp, #20
 800a650:	68a0      	ldr	r0, [r4, #8]
 800a652:	4798      	blx	r3
	return 0;
 800a654:	2000      	movs	r0, #0
}
 800a656:	b00a      	add	sp, #40	; 0x28
 800a658:	bd70      	pop	{r4, r5, r6, pc}
	if (data->async_cb) {
 800a65a:	68e3      	ldr	r3, [r4, #12]
 800a65c:	b11b      	cbz	r3, 800a666 <uart_stm32_async_rx_disable+0x9c>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a65e:	6922      	ldr	r2, [r4, #16]
 800a660:	a905      	add	r1, sp, #20
 800a662:	68a0      	ldr	r0, [r4, #8]
 800a664:	4798      	blx	r3
		return -EFAULT;
 800a666:	f06f 000d 	mvn.w	r0, #13
}
 800a66a:	e7f4      	b.n	800a656 <uart_stm32_async_rx_disable+0x8c>

0800a66c <uart_stm32_async_rx_timeout>:
{
 800a66c:	b508      	push	{r3, lr}
 800a66e:	4603      	mov	r3, r0
	const struct device *dev = data->uart_dev;
 800a670:	f850 0c70 	ldr.w	r0, [r0, #-112]
	if (data->dma_rx.counter == data->dma_rx.buffer_length) {
 800a674:	f853 2c08 	ldr.w	r2, [r3, #-8]
 800a678:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d002      	beq.n	800a686 <uart_stm32_async_rx_timeout+0x1a>
		uart_stm32_dma_rx_flush(dev);
 800a680:	f7ff ff74 	bl	800a56c <uart_stm32_dma_rx_flush>
}
 800a684:	bd08      	pop	{r3, pc}
		uart_stm32_async_rx_disable(dev);
 800a686:	f7ff ffa0 	bl	800a5ca <uart_stm32_async_rx_disable>
 800a68a:	e7fb      	b.n	800a684 <uart_stm32_async_rx_timeout+0x18>

0800a68c <uart_stm32_isr>:
{
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	4604      	mov	r4, r0
	struct uart_stm32_data *data = dev->data;
 800a692:	6905      	ldr	r5, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a694:	6843      	ldr	r3, [r0, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	f012 0f10 	tst.w	r2, #16
 800a69e:	d028      	beq.n	800a6f2 <uart_stm32_isr+0x66>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800a6a0:	69da      	ldr	r2, [r3, #28]
 800a6a2:	f012 0f10 	tst.w	r2, #16
 800a6a6:	d024      	beq.n	800a6f2 <uart_stm32_isr+0x66>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800a6a8:	2210      	movs	r2, #16
 800a6aa:	621a      	str	r2, [r3, #32]
		async_timer_start(&data->dma_rx.timeout_work,
 800a6ac:	f105 0678 	add.w	r6, r5, #120	; 0x78
 800a6b0:	6f68      	ldr	r0, [r5, #116]	; 0x74
	if ((timeout != SYS_FOREVER_US) && (timeout != 0)) {
 800a6b2:	1c43      	adds	r3, r0, #1
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d806      	bhi.n	800a6c6 <uart_stm32_isr+0x3a>
		if (data->dma_rx.timeout == 0) {
 800a6b8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a6ba:	b1b3      	cbz	r3, 800a6ea <uart_stm32_isr+0x5e>
	uart_stm32_err_check(dev);
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f7ff fd4b 	bl	800a158 <uart_stm32_err_check>
}
 800a6c2:	b006      	add	sp, #24
 800a6c4:	bd70      	pop	{r4, r5, r6, pc}
		k_work_reschedule(work, K_USEC(timeout));
 800a6c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a6ca:	17c1      	asrs	r1, r0, #31
		t += off;
 800a6cc:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
 800a6ce:	f04f 0264 	mov.w	r2, #100	; 0x64
 800a6d2:	f04f 0300 	mov.w	r3, #0
 800a6d6:	f141 0100 	adc.w	r1, r1, #0
 800a6da:	f7f5 fdb1 	bl	8000240 <__aeabi_uldivmod>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f7fb fed8 	bl	8006498 <k_work_reschedule>
 800a6e8:	e7e6      	b.n	800a6b8 <uart_stm32_isr+0x2c>
			uart_stm32_dma_rx_flush(dev);
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f7ff ff3e 	bl	800a56c <uart_stm32_dma_rx_flush>
 800a6f0:	e7e4      	b.n	800a6bc <uart_stm32_isr+0x30>
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a6f8:	d021      	beq.n	800a73e <uart_stm32_isr+0xb2>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800a6fa:	69da      	ldr	r2, [r3, #28]
 800a6fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a700:	d01d      	beq.n	800a73e <uart_stm32_isr+0xb2>
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a708:	601a      	str	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800a70a:	2240      	movs	r2, #64	; 0x40
 800a70c:	621a      	str	r2, [r3, #32]
	struct uart_event event = {
 800a70e:	2300      	movs	r3, #0
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	9302      	str	r3, [sp, #8]
 800a714:	9303      	str	r3, [sp, #12]
 800a716:	9304      	str	r3, [sp, #16]
 800a718:	9305      	str	r3, [sp, #20]
		.data.tx.buf = data->dma_tx.buffer,
 800a71a:	f8d5 20fc 	ldr.w	r2, [r5, #252]	; 0xfc
	struct uart_event event = {
 800a71e:	9202      	str	r2, [sp, #8]
		.data.tx.len = data->dma_tx.counter
 800a720:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
	struct uart_event event = {
 800a724:	9203      	str	r2, [sp, #12]
	data->dma_tx.buffer_length = 0;
 800a726:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	data->dma_tx.counter = 0;
 800a72a:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	if (data->async_cb) {
 800a72e:	68eb      	ldr	r3, [r5, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d0c3      	beq.n	800a6bc <uart_stm32_isr+0x30>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a734:	692a      	ldr	r2, [r5, #16]
 800a736:	a901      	add	r1, sp, #4
 800a738:	68a8      	ldr	r0, [r5, #8]
 800a73a:	4798      	blx	r3
}
 800a73c:	e7be      	b.n	800a6bc <uart_stm32_isr+0x30>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	f012 0f20 	tst.w	r2, #32
 800a744:	d0ba      	beq.n	800a6bc <uart_stm32_isr+0x30>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800a746:	69da      	ldr	r2, [r3, #28]
 800a748:	f012 0f20 	tst.w	r2, #32
 800a74c:	d0b6      	beq.n	800a6bc <uart_stm32_isr+0x30>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 800a74e:	8b1a      	ldrh	r2, [r3, #24]
 800a750:	b292      	uxth	r2, r2
 800a752:	f042 0208 	orr.w	r2, r2, #8
 800a756:	831a      	strh	r2, [r3, #24]
}
 800a758:	e7b0      	b.n	800a6bc <uart_stm32_isr+0x30>

0800a75a <entropy_stm32_got_error>:
  return ((READ_BIT(RNGx->SR, RNG_SR_CECS) == (RNG_SR_CECS)) ? 1UL : 0UL);
 800a75a:	6843      	ldr	r3, [r0, #4]
 800a75c:	f013 0f02 	tst.w	r3, #2
 800a760:	d105      	bne.n	800a76e <entropy_stm32_got_error+0x14>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800a762:	6843      	ldr	r3, [r0, #4]
 800a764:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a768:	d103      	bne.n	800a772 <entropy_stm32_got_error+0x18>
	return 0;
 800a76a:	2000      	movs	r0, #0
 800a76c:	4770      	bx	lr
		return 1;
 800a76e:	2001      	movs	r0, #1
 800a770:	4770      	bx	lr
		return 1;
 800a772:	2001      	movs	r0, #1
}
 800a774:	4770      	bx	lr

0800a776 <recover_seed_error>:
  WRITE_REG(RNGx->SR, ~RNG_SR_SEIS);
 800a776:	f06f 0340 	mvn.w	r3, #64	; 0x40
 800a77a:	6043      	str	r3, [r0, #4]
	for (int i = 0; i < 12; ++i) {
 800a77c:	2300      	movs	r3, #0
 800a77e:	e001      	b.n	800a784 <recover_seed_error+0xe>
  return (uint32_t)(READ_REG(RNGx->DR));
 800a780:	6882      	ldr	r2, [r0, #8]
 800a782:	3301      	adds	r3, #1
 800a784:	2b0b      	cmp	r3, #11
 800a786:	ddfb      	ble.n	800a780 <recover_seed_error+0xa>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800a788:	6843      	ldr	r3, [r0, #4]
 800a78a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a78e:	d101      	bne.n	800a794 <recover_seed_error+0x1e>
	return 0;
 800a790:	2000      	movs	r0, #0
 800a792:	4770      	bx	lr
		return -EIO;
 800a794:	f06f 0004 	mvn.w	r0, #4
}
 800a798:	4770      	bx	lr

0800a79a <rng_pool_put>:
	uint8_t first = rngp->first_read;
 800a79a:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
 800a79c:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
 800a79e:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
 800a7a2:	1a9a      	subs	r2, r3, r2
 800a7a4:	ea3c 0202 	bics.w	r2, ip, r2
 800a7a8:	d008      	beq.n	800a7bc <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
 800a7aa:	18c2      	adds	r2, r0, r3
 800a7ac:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	b25b      	sxtb	r3, r3
 800a7b2:	ea03 030c 	and.w	r3, r3, ip
 800a7b6:	7083      	strb	r3, [r0, #2]
	return 0;
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	4770      	bx	lr
		return -ENOBUFS;
 800a7bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 800a7c0:	4770      	bx	lr

0800a7c2 <rng_pool_init>:
	rngp->first_alloc = 0U;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
 800a7c6:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
 800a7c8:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
 800a7ca:	3901      	subs	r1, #1
 800a7cc:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
 800a7ce:	7102      	strb	r2, [r0, #4]
}
 800a7d0:	4770      	bx	lr

0800a7d2 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 800a7d2:	b430      	push	{r4, r5}
	*state = &config->states[0];
 800a7d4:	6803      	ldr	r3, [r0, #0]
 800a7d6:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800a7d8:	e001      	b.n	800a7de <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
 800a7da:	3408      	adds	r4, #8
 800a7dc:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800a7de:	6814      	ldr	r4, [r2, #0]
 800a7e0:	7903      	ldrb	r3, [r0, #4]
 800a7e2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	6805      	ldr	r5, [r0, #0]
 800a7ea:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800a7ee:	429c      	cmp	r4, r3
 800a7f0:	d804      	bhi.n	800a7fc <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
 800a7f2:	7963      	ldrb	r3, [r4, #5]
 800a7f4:	428b      	cmp	r3, r1
 800a7f6:	d1f0      	bne.n	800a7da <pinctrl_lookup_state+0x8>
			return 0;
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	e001      	b.n	800a800 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
 800a7fc:	f06f 0001 	mvn.w	r0, #1
}
 800a800:	bc30      	pop	{r4, r5}
 800a802:	4770      	bx	lr

0800a804 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	4606      	mov	r6, r0
 800a808:	460f      	mov	r7, r1
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800a80a:	2400      	movs	r4, #0
	uint32_t func = 0;
 800a80c:	4625      	mov	r5, r4
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800a80e:	e012      	b.n	800a836 <pinctrl_configure_pins+0x32>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800a810:	f002 031f 	and.w	r3, r2, #31
 800a814:	2b10      	cmp	r3, #16
 800a816:	d01b      	beq.n	800a850 <pinctrl_configure_pins+0x4c>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800a818:	0a53      	lsrs	r3, r2, #9
 800a81a:	011b      	lsls	r3, r3, #4
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	f3c2 1043 	ubfx	r0, r2, #5, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 800a822:	f002 021f 	and.w	r2, r2, #31
 800a826:	4629      	mov	r1, r5
 800a828:	4318      	orrs	r0, r3
 800a82a:	f7fb f86f 	bl	800590c <stm32_pin_configure>
		if (ret < 0) {
 800a82e:	2800      	cmp	r0, #0
 800a830:	db11      	blt.n	800a856 <pinctrl_configure_pins+0x52>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800a832:	3401      	adds	r4, #1
 800a834:	b2e4      	uxtb	r4, r4
 800a836:	42bc      	cmp	r4, r7
 800a838:	d20c      	bcs.n	800a854 <pinctrl_configure_pins+0x50>
		mux = pins[i].pinmux;
 800a83a:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 800a83e:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800a842:	f012 0f10 	tst.w	r2, #16
 800a846:	d1e3      	bne.n	800a810 <pinctrl_configure_pins+0xc>
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 800a848:	685d      	ldr	r5, [r3, #4]
 800a84a:	f045 0520 	orr.w	r5, r5, #32
 800a84e:	e7e3      	b.n	800a818 <pinctrl_configure_pins+0x14>
			func = STM32_MODER_ANALOG_MODE;
 800a850:	2530      	movs	r5, #48	; 0x30
 800a852:	e7e1      	b.n	800a818 <pinctrl_configure_pins+0x14>
			return ret;
		}
	}

	return 0;
 800a854:	2000      	movs	r0, #0
}
 800a856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a858 <LL_DMA_StructInit>:
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 800a858:	2300      	movs	r3, #0
 800a85a:	6003      	str	r3, [r0, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800a85c:	6043      	str	r3, [r0, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800a85e:	6083      	str	r3, [r0, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800a860:	60c3      	str	r3, [r0, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800a862:	6103      	str	r3, [r0, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800a864:	6143      	str	r3, [r0, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800a866:	6183      	str	r3, [r0, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800a868:	61c3      	str	r3, [r0, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 800a86a:	6203      	str	r3, [r0, #32]
#if defined(DMAMUX1)
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
#else
  DMA_InitStruct->PeriphRequest          = LL_DMA_REQUEST_0;
 800a86c:	6243      	str	r3, [r0, #36]	; 0x24
#endif /* DMAMUX1 */
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800a86e:	6283      	str	r3, [r0, #40]	; 0x28
}
 800a870:	4770      	bx	lr

0800a872 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a872:	680a      	ldr	r2, [r1, #0]
 800a874:	0912      	lsrs	r2, r2, #4
 800a876:	3201      	adds	r2, #1
 800a878:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 800a87c:	684b      	ldr	r3, [r1, #4]
 800a87e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a882:	fb03 f000 	mul.w	r0, r3, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 800a886:	688b      	ldr	r3, [r1, #8]
 800a888:	0e5b      	lsrs	r3, r3, #25
 800a88a:	3301      	adds	r3, #1
 800a88c:	005b      	lsls	r3, r3, #1
}
 800a88e:	fbb0 f0f3 	udiv	r0, r0, r3
 800a892:	4770      	bx	lr

0800a894 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800a894:	b148      	cbz	r0, 800a8aa <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800a896:	68c3      	ldr	r3, [r0, #12]
 800a898:	8818      	ldrh	r0, [r3, #0]
 800a89a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800a89e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800a8a2:	bf14      	ite	ne
 800a8a4:	2000      	movne	r0, #0
 800a8a6:	2001      	moveq	r0, #1
 800a8a8:	4770      	bx	lr
		return false;
 800a8aa:	2000      	movs	r0, #0
}
 800a8ac:	4770      	bx	lr

0800a8ae <arch_system_halt>:
	__asm__ volatile(
 800a8ae:	f04f 0210 	mov.w	r2, #16
 800a8b2:	f3ef 8311 	mrs	r3, BASEPRI
 800a8b6:	f382 8812 	msr	BASEPRI_MAX, r2
 800a8ba:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 800a8be:	e7fe      	b.n	800a8be <arch_system_halt+0x10>

0800a8c0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800a8c0:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 800a8c2:	f7ff fff4 	bl	800a8ae <arch_system_halt>

0800a8c6 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800a8c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	460e      	mov	r6, r1
 800a8cc:	f04f 0310 	mov.w	r3, #16
 800a8d0:	f3ef 8711 	mrs	r7, BASEPRI
 800a8d4:	f383 8812 	msr	BASEPRI_MAX, r3
 800a8d8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800a8dc:	f7fc f984 	bl	8006be8 <z_impl_z_current_get>
 800a8e0:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	f7ff ffeb 	bl	800a8c0 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800a8ea:	f387 8811 	msr	BASEPRI, r7
 800a8ee:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f7f7 fa2e 	bl	8001d54 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800a8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a8fa <setup_thread_stack>:
{
 800a8fa:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800a8fc:	3207      	adds	r2, #7
 800a8fe:	f022 0207 	bic.w	r2, r2, #7
 800a902:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800a906:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800a90a:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
 800a90c:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
 800a90e:	2200      	movs	r2, #0
 800a910:	6702      	str	r2, [r0, #112]	; 0x70
}
 800a912:	18c8      	adds	r0, r1, r3
 800a914:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a91a:	f3ef 8005 	mrs	r0, IPSR
}
 800a91e:	3800      	subs	r0, #0
 800a920:	bf18      	it	ne
 800a922:	2001      	movne	r0, #1
 800a924:	4770      	bx	lr

0800a926 <z_impl_k_thread_name_set>:
}
 800a926:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800a92a:	4770      	bx	lr

0800a92c <z_impl_k_thread_start>:
{
 800a92c:	b508      	push	{r3, lr}
	z_sched_start(thread);
 800a92e:	f7fb ff45 	bl	80067bc <z_sched_start>
}
 800a932:	bd08      	pop	{r3, pc}

0800a934 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 800a934:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 800a936:	2400      	movs	r4, #0
 800a938:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 800a93a:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800a93c:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 800a93e:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 800a940:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 800a942:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 800a944:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 800a946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <z_impl_k_thread_create>:
{
 800a94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a94e:	b087      	sub	sp, #28
 800a950:	4604      	mov	r4, r0
 800a952:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a954:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800a956:	2700      	movs	r7, #0
 800a958:	9705      	str	r7, [sp, #20]
 800a95a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800a95c:	9704      	str	r7, [sp, #16]
 800a95e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a960:	9703      	str	r7, [sp, #12]
 800a962:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a964:	9702      	str	r7, [sp, #8]
 800a966:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a968:	9701      	str	r7, [sp, #4]
 800a96a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a96c:	9700      	str	r7, [sp, #0]
 800a96e:	f7fb fa9d 	bl	8005eac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800a972:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800a976:	bf08      	it	eq
 800a978:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800a97c:	d102      	bne.n	800a984 <z_impl_k_thread_create+0x38>
}
 800a97e:	4620      	mov	r0, r4
 800a980:	b007      	add	sp, #28
 800a982:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 800a984:	4632      	mov	r2, r6
 800a986:	462b      	mov	r3, r5
 800a988:	4620      	mov	r0, r4
 800a98a:	f7fb fa81 	bl	8005e90 <schedule_new_thread>
 800a98e:	e7f6      	b.n	800a97e <z_impl_k_thread_create+0x32>

0800a990 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800a990:	b508      	push	{r3, lr}
	__asm__ volatile(
 800a992:	f04f 0210 	mov.w	r2, #16
 800a996:	f3ef 8311 	mrs	r3, BASEPRI
 800a99a:	f382 8812 	msr	BASEPRI_MAX, r2
 800a99e:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800a9a2:	f7f6 fead 	bl	8001700 <arch_cpu_idle>
 800a9a6:	e7f4      	b.n	800a992 <idle+0x2>

0800a9a8 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 800a9a8:	4288      	cmp	r0, r1
 800a9aa:	da00      	bge.n	800a9ae <new_prio_for_inheritance+0x6>
 800a9ac:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 800a9ae:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 800a9b2:	db01      	blt.n	800a9b8 <new_prio_for_inheritance+0x10>
 800a9b4:	4608      	mov	r0, r1
 800a9b6:	4770      	bx	lr
 800a9b8:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 800a9bc:	4770      	bx	lr

0800a9be <adjust_owner_prio>:
{
 800a9be:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 800a9c0:	6880      	ldr	r0, [r0, #8]
 800a9c2:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800a9c6:	428b      	cmp	r3, r1
 800a9c8:	d101      	bne.n	800a9ce <adjust_owner_prio+0x10>
	return false;
 800a9ca:	2000      	movs	r0, #0
}
 800a9cc:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 800a9ce:	f7fb ff43 	bl	8006858 <z_set_prio>
 800a9d2:	e7fb      	b.n	800a9cc <adjust_owner_prio+0xe>

0800a9d4 <z_impl_k_mutex_init>:
{
 800a9d4:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 800a9da:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 800a9dc:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 800a9de:	605b      	str	r3, [r3, #4]
}
 800a9e0:	4770      	bx	lr

0800a9e2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800a9e2:	b15a      	cbz	r2, 800a9fc <z_impl_k_sem_init+0x1a>
 800a9e4:	428a      	cmp	r2, r1
 800a9e6:	d30c      	bcc.n	800aa02 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 800a9e8:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 800a9ea:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 800a9ec:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 800a9ee:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 800a9f0:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 800a9f4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 800a9f6:	6143      	str	r3, [r0, #20]
	return 0;
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	4770      	bx	lr
		return -EINVAL;
 800a9fc:	f06f 0015 	mvn.w	r0, #21
 800aa00:	4770      	bx	lr
 800aa02:	f06f 0015 	mvn.w	r0, #21
}
 800aa06:	4770      	bx	lr

0800aa08 <cancel_async_locked>:
{
 800aa08:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
 800aa0a:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800aa0c:	f012 0f02 	tst.w	r2, #2
 800aa10:	d009      	beq.n	800aa26 <cancel_async_locked+0x1e>
	return *flagp;
 800aa12:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
 800aa14:	f012 000f 	ands.w	r0, r2, #15
 800aa18:	d004      	beq.n	800aa24 <cancel_async_locked+0x1c>
	*flagp |= BIT(bit);
 800aa1a:	f042 0202 	orr.w	r2, r2, #2
 800aa1e:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
 800aa20:	f002 000f 	and.w	r0, r2, #15
}
 800aa24:	4770      	bx	lr
		queue_remove_locked(work->queue, work);
 800aa26:	6880      	ldr	r0, [r0, #8]
	*flagp &= ~BIT(bit);
 800aa28:	f022 0104 	bic.w	r1, r2, #4
 800aa2c:	60d9      	str	r1, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
 800aa2e:	f012 0f04 	tst.w	r2, #4
 800aa32:	d0ee      	beq.n	800aa12 <cancel_async_locked+0xa>
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
 800aa34:	f100 0cc8 	add.w	ip, r0, #200	; 0xc8
	return list->head;
 800aa38:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	d0e7      	beq.n	800aa12 <cancel_async_locked+0xa>
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d002      	beq.n	800aa4c <cancel_async_locked+0x44>
 800aa46:	4611      	mov	r1, r2
 800aa48:	6812      	ldr	r2, [r2, #0]
 800aa4a:	e7f8      	b.n	800aa3e <cancel_async_locked+0x36>
Z_GENLIST_REMOVE(slist, snode)
 800aa4c:	b141      	cbz	r1, 800aa60 <cancel_async_locked+0x58>
	return node->next;
 800aa4e:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 800aa50:	600a      	str	r2, [r1, #0]
	return list->tail;
 800aa52:	f8dc 2004 	ldr.w	r2, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d00c      	beq.n	800aa74 <cancel_async_locked+0x6c>
	parent->next = child;
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 800aa5e:	e7d8      	b.n	800aa12 <cancel_async_locked+0xa>
	return node->next;
 800aa60:	681a      	ldr	r2, [r3, #0]
	list->head = node;
 800aa62:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
	return list->tail;
 800aa66:	f8dc 1004 	ldr.w	r1, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800aa6a:	428b      	cmp	r3, r1
 800aa6c:	d1f5      	bne.n	800aa5a <cancel_async_locked+0x52>
	list->tail = node;
 800aa6e:	f8cc 2004 	str.w	r2, [ip, #4]
}
 800aa72:	e7f2      	b.n	800aa5a <cancel_async_locked+0x52>
	list->tail = node;
 800aa74:	f8cc 1004 	str.w	r1, [ip, #4]
}
 800aa78:	e7ef      	b.n	800aa5a <cancel_async_locked+0x52>

0800aa7a <work_timeout>:
{
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	4603      	mov	r3, r0
 800aa80:	f04f 0210 	mov.w	r2, #16
 800aa84:	f3ef 8411 	mrs	r4, BASEPRI
 800aa88:	f382 8812 	msr	BASEPRI_MAX, r2
 800aa8c:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
 800aa90:	2200      	movs	r2, #0
 800aa92:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
 800aa94:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
 800aa98:	f022 0108 	bic.w	r1, r2, #8
 800aa9c:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 800aaa0:	f012 0f08 	tst.w	r2, #8
 800aaa4:	d105      	bne.n	800aab2 <work_timeout+0x38>
	__asm__ volatile(
 800aaa6:	f384 8811 	msr	BASEPRI, r4
 800aaaa:	f3bf 8f6f 	isb	sy
}
 800aaae:	b002      	add	sp, #8
 800aab0:	bd10      	pop	{r4, pc}
 800aab2:	3810      	subs	r0, #16
		queue = dw->queue;
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 800aab8:	a901      	add	r1, sp, #4
 800aaba:	f7fb fba9 	bl	8006210 <submit_to_queue_locked>
 800aabe:	e7f2      	b.n	800aaa6 <work_timeout+0x2c>

0800aac0 <cancel_delayable_async_locked>:
{
 800aac0:	b510      	push	{r4, lr}
 800aac2:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
 800aac4:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
 800aac6:	f023 0208 	bic.w	r2, r3, #8
 800aaca:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 800aacc:	f013 0f08 	tst.w	r3, #8
 800aad0:	d103      	bne.n	800aada <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
 800aad2:	4620      	mov	r0, r4
 800aad4:	f7ff ff98 	bl	800aa08 <cancel_async_locked>
}
 800aad8:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
 800aada:	3010      	adds	r0, #16
 800aadc:	f000 fa24 	bl	800af28 <z_abort_timeout>
		ret = true;
 800aae0:	e7f7      	b.n	800aad2 <cancel_delayable_async_locked+0x12>

0800aae2 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800aae2:	2300      	movs	r3, #0
 800aae4:	6003      	str	r3, [r0, #0]
 800aae6:	6043      	str	r3, [r0, #4]
 800aae8:	6083      	str	r3, [r0, #8]
 800aaea:	60c3      	str	r3, [r0, #12]
 800aaec:	6041      	str	r1, [r0, #4]
}
 800aaee:	4770      	bx	lr

0800aaf0 <k_work_submit_to_queue>:
{
 800aaf0:	b530      	push	{r4, r5, lr}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	9001      	str	r0, [sp, #4]
 800aaf6:	4608      	mov	r0, r1
	__asm__ volatile(
 800aaf8:	f04f 0310 	mov.w	r3, #16
 800aafc:	f3ef 8511 	mrs	r5, BASEPRI
 800ab00:	f383 8812 	msr	BASEPRI_MAX, r3
 800ab04:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800ab08:	a901      	add	r1, sp, #4
 800ab0a:	f7fb fb81 	bl	8006210 <submit_to_queue_locked>
 800ab0e:	4604      	mov	r4, r0
	__asm__ volatile(
 800ab10:	f385 8811 	msr	BASEPRI, r5
 800ab14:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	dc02      	bgt.n	800ab22 <k_work_submit_to_queue+0x32>
}
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	b003      	add	sp, #12
 800ab20:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 800ab22:	f7fc f867 	bl	8006bf4 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d0f8      	beq.n	800ab1c <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 800ab2a:	f7fb ffb5 	bl	8006a98 <z_impl_k_yield>
	return ret;
 800ab2e:	e7f5      	b.n	800ab1c <k_work_submit_to_queue+0x2c>

0800ab30 <k_work_init_delayable>:
{
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4604      	mov	r4, r0
 800ab34:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 800ab36:	2230      	movs	r2, #48	; 0x30
 800ab38:	2100      	movs	r1, #0
 800ab3a:	f000 faf4 	bl	800b126 <memset>
 800ab3e:	6065      	str	r5, [r4, #4]
 800ab40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab44:	60e3      	str	r3, [r4, #12]
}
 800ab46:	bd38      	pop	{r3, r4, r5, pc}

0800ab48 <k_work_reschedule_for_queue>:
{
 800ab48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	9001      	str	r0, [sp, #4]
 800ab4e:	460c      	mov	r4, r1
 800ab50:	4616      	mov	r6, r2
 800ab52:	461d      	mov	r5, r3
	__asm__ volatile(
 800ab54:	f04f 0310 	mov.w	r3, #16
 800ab58:	f3ef 8711 	mrs	r7, BASEPRI
 800ab5c:	f383 8812 	msr	BASEPRI_MAX, r3
 800ab60:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
 800ab64:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
 800ab66:	f023 0208 	bic.w	r2, r3, #8
 800ab6a:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 800ab6c:	f013 0f08 	tst.w	r3, #8
 800ab70:	d10b      	bne.n	800ab8a <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
 800ab72:	4632      	mov	r2, r6
 800ab74:	462b      	mov	r3, r5
 800ab76:	4621      	mov	r1, r4
 800ab78:	a801      	add	r0, sp, #4
 800ab7a:	f7fb fbb5 	bl	80062e8 <schedule_for_queue_locked>
	__asm__ volatile(
 800ab7e:	f387 8811 	msr	BASEPRI, r7
 800ab82:	f3bf 8f6f 	isb	sy
}
 800ab86:	b003      	add	sp, #12
 800ab88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
 800ab8a:	f101 0010 	add.w	r0, r1, #16
 800ab8e:	f000 f9cb 	bl	800af28 <z_abort_timeout>
		ret = true;
 800ab92:	e7ee      	b.n	800ab72 <k_work_reschedule_for_queue+0x2a>

0800ab94 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
 800ab94:	b510      	push	{r4, lr}
	__asm__ volatile(
 800ab96:	f04f 0310 	mov.w	r3, #16
 800ab9a:	f3ef 8411 	mrs	r4, BASEPRI
 800ab9e:	f383 8812 	msr	BASEPRI_MAX, r3
 800aba2:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
 800aba6:	f7ff ff8b 	bl	800aac0 <cancel_delayable_async_locked>
	__asm__ volatile(
 800abaa:	f384 8811 	msr	BASEPRI, r4
 800abae:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
 800abb2:	bd10      	pop	{r4, pc}

0800abb4 <thread_active_elsewhere>:
}
 800abb4:	2000      	movs	r0, #0
 800abb6:	4770      	bx	lr

0800abb8 <pended_on_thread>:
}
 800abb8:	6880      	ldr	r0, [r0, #8]
 800abba:	4770      	bx	lr

0800abbc <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 800abbc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800abc0:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 800abc4:	4283      	cmp	r3, r0
 800abc6:	d001      	beq.n	800abcc <z_sched_prio_cmp+0x10>
		return b2 - b1;
 800abc8:	1ac0      	subs	r0, r0, r3
 800abca:	4770      	bx	lr
	return 0;
 800abcc:	2000      	movs	r0, #0
}
 800abce:	4770      	bx	lr

0800abd0 <z_unpend_thread_no_timeout>:
{
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800abd4:	2300      	movs	r3, #0
	__asm__ volatile(
 800abd6:	f04f 0210 	mov.w	r2, #16
 800abda:	f3ef 8511 	mrs	r5, BASEPRI
 800abde:	f382 8812 	msr	BASEPRI_MAX, r2
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	e010      	b.n	800ac0a <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800abe8:	4620      	mov	r0, r4
 800abea:	f7ff ffe5 	bl	800abb8 <pended_on_thread>
 800abee:	4621      	mov	r1, r4
 800abf0:	f000 f823 	bl	800ac3a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800abf4:	7b63      	ldrb	r3, [r4, #13]
 800abf6:	f023 0302 	bic.w	r3, r3, #2
 800abfa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800abfc:	2300      	movs	r3, #0
 800abfe:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800ac00:	f385 8811 	msr	BASEPRI, r5
 800ac04:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ac08:	2301      	movs	r3, #1
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d0ec      	beq.n	800abe8 <z_unpend_thread_no_timeout+0x18>
}
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}

0800ac10 <z_reschedule_irqlock>:
{
 800ac10:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800ac12:	4603      	mov	r3, r0
 800ac14:	b920      	cbnz	r0, 800ac20 <z_reschedule_irqlock+0x10>
 800ac16:	f3ef 8205 	mrs	r2, IPSR
 800ac1a:	b942      	cbnz	r2, 800ac2e <z_reschedule_irqlock+0x1e>
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	e000      	b.n	800ac22 <z_reschedule_irqlock+0x12>
 800ac20:	2200      	movs	r2, #0
	if (resched(key)) {
 800ac22:	b932      	cbnz	r2, 800ac32 <z_reschedule_irqlock+0x22>
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
}
 800ac2c:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800ac2e:	2200      	movs	r2, #0
 800ac30:	e7f7      	b.n	800ac22 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7f6 fdea 	bl	800180c <arch_swap>
	return ret;
 800ac38:	e7f8      	b.n	800ac2c <z_reschedule_irqlock+0x1c>

0800ac3a <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
 800ac3a:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 800ac3c:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
 800ac3e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800ac40:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800ac42:	2300      	movs	r3, #0
 800ac44:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 800ac46:	604b      	str	r3, [r1, #4]
}
 800ac48:	4770      	bx	lr

0800ac4a <z_unpend_thread>:
{
 800ac4a:	b538      	push	{r3, r4, r5, lr}
 800ac4c:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800ac4e:	2300      	movs	r3, #0
	__asm__ volatile(
 800ac50:	f04f 0210 	mov.w	r2, #16
 800ac54:	f3ef 8511 	mrs	r5, BASEPRI
 800ac58:	f382 8812 	msr	BASEPRI_MAX, r2
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	e010      	b.n	800ac84 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ac62:	4620      	mov	r0, r4
 800ac64:	f7ff ffa8 	bl	800abb8 <pended_on_thread>
 800ac68:	4621      	mov	r1, r4
 800ac6a:	f7ff ffe6 	bl	800ac3a <z_priq_dumb_remove>
 800ac6e:	7b63      	ldrb	r3, [r4, #13]
 800ac70:	f023 0302 	bic.w	r3, r3, #2
 800ac74:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800ac76:	2300      	movs	r3, #0
 800ac78:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800ac7a:	f385 8811 	msr	BASEPRI, r5
 800ac7e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ac82:	2301      	movs	r3, #1
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d0ec      	beq.n	800ac62 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
 800ac88:	f104 0018 	add.w	r0, r4, #24
 800ac8c:	f000 f94c 	bl	800af28 <z_abort_timeout>
}
 800ac90:	bd38      	pop	{r3, r4, r5, pc}

0800ac92 <z_priq_dumb_best>:
{
 800ac92:	4603      	mov	r3, r0
	return list->head == list;
 800ac94:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ac96:	4283      	cmp	r3, r0
 800ac98:	d000      	beq.n	800ac9c <z_priq_dumb_best+0xa>
}
 800ac9a:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800ac9c:	2000      	movs	r0, #0
	return thread;
 800ac9e:	e7fc      	b.n	800ac9a <z_priq_dumb_best+0x8>

0800aca0 <z_ready_thread>:
{
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800aca4:	2300      	movs	r3, #0
	__asm__ volatile(
 800aca6:	f04f 0210 	mov.w	r2, #16
 800acaa:	f3ef 8511 	mrs	r5, BASEPRI
 800acae:	f382 8812 	msr	BASEPRI_MAX, r2
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	e004      	b.n	800acc2 <z_ready_thread+0x22>
	__asm__ volatile(
 800acb8:	f385 8811 	msr	BASEPRI, r5
 800acbc:	f3bf 8f6f 	isb	sy
 800acc0:	2301      	movs	r3, #1
 800acc2:	b943      	cbnz	r3, 800acd6 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 800acc4:	4620      	mov	r0, r4
 800acc6:	f7ff ff75 	bl	800abb4 <thread_active_elsewhere>
 800acca:	2800      	cmp	r0, #0
 800accc:	d1f4      	bne.n	800acb8 <z_ready_thread+0x18>
			ready_thread(thread);
 800acce:	4620      	mov	r0, r4
 800acd0:	f7fb fd34 	bl	800673c <ready_thread>
 800acd4:	e7f0      	b.n	800acb8 <z_ready_thread+0x18>
}
 800acd6:	bd38      	pop	{r3, r4, r5, pc}

0800acd8 <z_thread_timeout>:
{
 800acd8:	b570      	push	{r4, r5, r6, lr}
 800acda:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 800acdc:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 800ace0:	2300      	movs	r3, #0
	__asm__ volatile(
 800ace2:	f04f 0210 	mov.w	r2, #16
 800ace6:	f3ef 8611 	mrs	r6, BASEPRI
 800acea:	f382 8812 	msr	BASEPRI_MAX, r2
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	e011      	b.n	800ad18 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800acf4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800acf8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800acfc:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800ad00:	f023 0310 	bic.w	r3, r3, #16
 800ad04:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f7fb fd17 	bl	800673c <ready_thread>
	__asm__ volatile(
 800ad0e:	f386 8811 	msr	BASEPRI, r6
 800ad12:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ad16:	2301      	movs	r3, #1
 800ad18:	b9ab      	cbnz	r3, 800ad46 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 800ad1a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 800ad1e:	f013 0f28 	tst.w	r3, #40	; 0x28
 800ad22:	d1f4      	bne.n	800ad0e <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 800ad24:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d0e3      	beq.n	800acf4 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	f7ff ff43 	bl	800abb8 <pended_on_thread>
 800ad32:	4629      	mov	r1, r5
 800ad34:	f7ff ff81 	bl	800ac3a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800ad38:	7b6b      	ldrb	r3, [r5, #13]
 800ad3a:	f023 0302 	bic.w	r3, r3, #2
 800ad3e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800ad40:	2300      	movs	r3, #0
 800ad42:	60ab      	str	r3, [r5, #8]
}
 800ad44:	e7d6      	b.n	800acf4 <z_thread_timeout+0x1c>
}
 800ad46:	bd70      	pop	{r4, r5, r6, pc}

0800ad48 <add_to_waitq_locked>:
{
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	4605      	mov	r5, r0
 800ad4c:	460e      	mov	r6, r1
	unready_thread(thread);
 800ad4e:	f7fb fd53 	bl	80067f8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 800ad52:	7b6b      	ldrb	r3, [r5, #13]
 800ad54:	f043 0302 	orr.w	r3, r3, #2
 800ad58:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 800ad5a:	b1b6      	cbz	r6, 800ad8a <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 800ad5c:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 800ad5e:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ad60:	42a6      	cmp	r6, r4
 800ad62:	d019      	beq.n	800ad98 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ad64:	b164      	cbz	r4, 800ad80 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800ad66:	4621      	mov	r1, r4
 800ad68:	4628      	mov	r0, r5
 800ad6a:	f7ff ff27 	bl	800abbc <z_sched_prio_cmp>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	dc0c      	bgt.n	800ad8c <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800ad72:	b12c      	cbz	r4, 800ad80 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 800ad74:	6873      	ldr	r3, [r6, #4]
 800ad76:	429c      	cmp	r4, r3
 800ad78:	d002      	beq.n	800ad80 <add_to_waitq_locked+0x38>
 800ad7a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ad7c:	2c00      	cmp	r4, #0
 800ad7e:	d1f1      	bne.n	800ad64 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 800ad80:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 800ad82:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 800ad84:	606b      	str	r3, [r5, #4]
	tail->next = node;
 800ad86:	601d      	str	r5, [r3, #0]
	list->tail = node;
 800ad88:	6075      	str	r5, [r6, #4]
}
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 800ad8c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800ad8e:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800ad90:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800ad92:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800ad94:	6065      	str	r5, [r4, #4]
}
 800ad96:	e7f8      	b.n	800ad8a <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ad98:	2400      	movs	r4, #0
 800ad9a:	e7e3      	b.n	800ad64 <add_to_waitq_locked+0x1c>

0800ad9c <pend>:
{
 800ad9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada0:	4605      	mov	r5, r0
 800ada2:	460e      	mov	r6, r1
 800ada4:	4691      	mov	r9, r2
 800ada6:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 800ada8:	2400      	movs	r4, #0
	__asm__ volatile(
 800adaa:	f04f 0310 	mov.w	r3, #16
 800adae:	f3ef 8711 	mrs	r7, BASEPRI
 800adb2:	f383 8812 	msr	BASEPRI_MAX, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	e008      	b.n	800adce <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 800adbc:	4631      	mov	r1, r6
 800adbe:	4628      	mov	r0, r5
 800adc0:	f7ff ffc2 	bl	800ad48 <add_to_waitq_locked>
	__asm__ volatile(
 800adc4:	f387 8811 	msr	BASEPRI, r7
 800adc8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800adcc:	2401      	movs	r4, #1
 800adce:	2c00      	cmp	r4, #0
 800add0:	d0f4      	beq.n	800adbc <pend+0x20>
	add_thread_timeout(thread, timeout);
 800add2:	464a      	mov	r2, r9
 800add4:	4643      	mov	r3, r8
 800add6:	4628      	mov	r0, r5
 800add8:	f7fb fb66 	bl	80064a8 <add_thread_timeout>
}
 800addc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ade0 <z_unpend1_no_timeout>:
{
 800ade0:	b570      	push	{r4, r5, r6, lr}
 800ade2:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800ade4:	2300      	movs	r3, #0
	__asm__ volatile(
 800ade6:	f04f 0210 	mov.w	r2, #16
 800adea:	f3ef 8611 	mrs	r6, BASEPRI
 800adee:	f382 8812 	msr	BASEPRI_MAX, r2
 800adf2:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800adf6:	461c      	mov	r4, r3
 800adf8:	e004      	b.n	800ae04 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 800adfa:	f386 8811 	msr	BASEPRI, r6
 800adfe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ae02:	2301      	movs	r3, #1
 800ae04:	b98b      	cbnz	r3, 800ae2a <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 800ae06:	4628      	mov	r0, r5
 800ae08:	f7ff ff43 	bl	800ac92 <z_priq_dumb_best>
		if (thread != NULL) {
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d0f3      	beq.n	800adfa <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ae12:	f7ff fed1 	bl	800abb8 <pended_on_thread>
 800ae16:	4621      	mov	r1, r4
 800ae18:	f7ff ff0f 	bl	800ac3a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800ae1c:	7b63      	ldrb	r3, [r4, #13]
 800ae1e:	f023 0302 	bic.w	r3, r3, #2
 800ae22:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800ae24:	2300      	movs	r3, #0
 800ae26:	60a3      	str	r3, [r4, #8]
}
 800ae28:	e7e7      	b.n	800adfa <z_unpend1_no_timeout+0x1a>
}
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	bd70      	pop	{r4, r5, r6, pc}

0800ae2e <z_unpend_first_thread>:
{
 800ae2e:	b570      	push	{r4, r5, r6, lr}
 800ae30:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800ae32:	2300      	movs	r3, #0
	__asm__ volatile(
 800ae34:	f04f 0210 	mov.w	r2, #16
 800ae38:	f3ef 8611 	mrs	r6, BASEPRI
 800ae3c:	f382 8812 	msr	BASEPRI_MAX, r2
 800ae40:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800ae44:	461c      	mov	r4, r3
 800ae46:	e004      	b.n	800ae52 <z_unpend_first_thread+0x24>
	__asm__ volatile(
 800ae48:	f386 8811 	msr	BASEPRI, r6
 800ae4c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ae50:	2301      	movs	r3, #1
 800ae52:	b9ab      	cbnz	r3, 800ae80 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 800ae54:	4628      	mov	r0, r5
 800ae56:	f7ff ff1c 	bl	800ac92 <z_priq_dumb_best>
		if (thread != NULL) {
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d0f3      	beq.n	800ae48 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ae60:	f7ff feaa 	bl	800abb8 <pended_on_thread>
 800ae64:	4621      	mov	r1, r4
 800ae66:	f7ff fee8 	bl	800ac3a <z_priq_dumb_remove>
 800ae6a:	7b63      	ldrb	r3, [r4, #13]
 800ae6c:	f023 0302 	bic.w	r3, r3, #2
 800ae70:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800ae72:	2300      	movs	r3, #0
 800ae74:	60a3      	str	r3, [r4, #8]
 800ae76:	f104 0018 	add.w	r0, r4, #24
 800ae7a:	f000 f855 	bl	800af28 <z_abort_timeout>
 800ae7e:	e7e3      	b.n	800ae48 <z_unpend_first_thread+0x1a>
}
 800ae80:	4620      	mov	r0, r4
 800ae82:	bd70      	pop	{r4, r5, r6, pc}

0800ae84 <init_ready_q>:
	sys_dlist_init(&rq->runq);
 800ae84:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
 800ae86:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
 800ae88:	6083      	str	r3, [r0, #8]
}
 800ae8a:	4770      	bx	lr

0800ae8c <z_sched_wake>:
{
 800ae8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae90:	4605      	mov	r5, r0
 800ae92:	4688      	mov	r8, r1
 800ae94:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 800ae96:	2300      	movs	r3, #0
	__asm__ volatile(
 800ae98:	f04f 0210 	mov.w	r2, #16
 800ae9c:	f3ef 8611 	mrs	r6, BASEPRI
 800aea0:	f382 8812 	msr	BASEPRI_MAX, r2
 800aea4:	f3bf 8f6f 	isb	sy
	bool ret = false;
 800aea8:	4699      	mov	r9, r3
 800aeaa:	e004      	b.n	800aeb6 <z_sched_wake+0x2a>
	__asm__ volatile(
 800aeac:	f386 8811 	msr	BASEPRI, r6
 800aeb0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	b9eb      	cbnz	r3, 800aef4 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 800aeb8:	4628      	mov	r0, r5
 800aeba:	f7ff feea 	bl	800ac92 <z_priq_dumb_best>
		if (thread != NULL) {
 800aebe:	4604      	mov	r4, r0
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d0f3      	beq.n	800aeac <z_sched_wake+0x20>
 800aec4:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800aec8:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800aeca:	f7ff fe75 	bl	800abb8 <pended_on_thread>
 800aece:	4621      	mov	r1, r4
 800aed0:	f7ff feb3 	bl	800ac3a <z_priq_dumb_remove>
 800aed4:	7b63      	ldrb	r3, [r4, #13]
 800aed6:	f023 0302 	bic.w	r3, r3, #2
 800aeda:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800aedc:	2300      	movs	r3, #0
 800aede:	60a3      	str	r3, [r4, #8]
 800aee0:	f104 0018 	add.w	r0, r4, #24
 800aee4:	f000 f820 	bl	800af28 <z_abort_timeout>
			ready_thread(thread);
 800aee8:	4620      	mov	r0, r4
 800aeea:	f7fb fc27 	bl	800673c <ready_thread>
			ret = true;
 800aeee:	f04f 0901 	mov.w	r9, #1
 800aef2:	e7db      	b.n	800aeac <z_sched_wake+0x20>
}
 800aef4:	4648      	mov	r0, r9
 800aef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800aefa <remove_timeout>:
{
 800aefa:	b510      	push	{r4, lr}
 800aefc:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 800aefe:	f7fb fee7 	bl	8006cd0 <next>
 800af02:	b148      	cbz	r0, 800af18 <remove_timeout+0x1e>
 800af04:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 800af06:	6920      	ldr	r0, [r4, #16]
 800af08:	6961      	ldr	r1, [r4, #20]
 800af0a:	6913      	ldr	r3, [r2, #16]
 800af0c:	181b      	adds	r3, r3, r0
 800af0e:	6950      	ldr	r0, [r2, #20]
 800af10:	eb41 0100 	adc.w	r1, r1, r0
 800af14:	6113      	str	r3, [r2, #16]
 800af16:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 800af18:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 800af1a:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 800af1c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800af1e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800af20:	2300      	movs	r3, #0
 800af22:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 800af24:	6063      	str	r3, [r4, #4]
}
 800af26:	bd10      	pop	{r4, pc}

0800af28 <z_abort_timeout>:
{
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800af2c:	2300      	movs	r3, #0
	__asm__ volatile(
 800af2e:	f04f 0210 	mov.w	r2, #16
 800af32:	f3ef 8611 	mrs	r6, BASEPRI
 800af36:	f382 8812 	msr	BASEPRI_MAX, r2
 800af3a:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 800af3e:	f06f 0015 	mvn.w	r0, #21
 800af42:	e004      	b.n	800af4e <z_abort_timeout+0x26>
	__asm__ volatile(
 800af44:	f386 8811 	msr	BASEPRI, r6
 800af48:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800af4c:	2301      	movs	r3, #1
 800af4e:	461d      	mov	r5, r3
 800af50:	b93b      	cbnz	r3, 800af62 <z_abort_timeout+0x3a>
	return node->next != NULL;
 800af52:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 800af54:	2b00      	cmp	r3, #0
 800af56:	d0f5      	beq.n	800af44 <z_abort_timeout+0x1c>
			remove_timeout(to);
 800af58:	4620      	mov	r0, r4
 800af5a:	f7ff ffce 	bl	800aefa <remove_timeout>
			ret = 0;
 800af5e:	4628      	mov	r0, r5
 800af60:	e7f0      	b.n	800af44 <z_abort_timeout+0x1c>
}
 800af62:	bd70      	pop	{r4, r5, r6, pc}

0800af64 <z_set_timeout_expiry>:
{
 800af64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af66:	4605      	mov	r5, r0
 800af68:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 800af6a:	2300      	movs	r3, #0
	__asm__ volatile(
 800af6c:	f04f 0210 	mov.w	r2, #16
 800af70:	f3ef 8611 	mrs	r6, BASEPRI
 800af74:	f382 8812 	msr	BASEPRI_MAX, r2
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	e00a      	b.n	800af94 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 800af7e:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 800af80:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800af84:	2801      	cmp	r0, #1
 800af86:	dd00      	ble.n	800af8a <z_set_timeout_expiry+0x26>
 800af88:	b97c      	cbnz	r4, 800afaa <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 800af8a:	f386 8811 	msr	BASEPRI, r6
 800af8e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800af92:	2301      	movs	r3, #1
 800af94:	461c      	mov	r4, r3
 800af96:	b97b      	cbnz	r3, 800afb8 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 800af98:	f7fb feb2 	bl	8006d00 <next_timeout>
			      || (ticks <= next_to);
 800af9c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800afa0:	d0ed      	beq.n	800af7e <z_set_timeout_expiry+0x1a>
 800afa2:	42a8      	cmp	r0, r5
 800afa4:	dbec      	blt.n	800af80 <z_set_timeout_expiry+0x1c>
 800afa6:	2401      	movs	r4, #1
 800afa8:	e7ea      	b.n	800af80 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800afaa:	4639      	mov	r1, r7
 800afac:	42a8      	cmp	r0, r5
 800afae:	bfa8      	it	ge
 800afb0:	4628      	movge	r0, r5
 800afb2:	f7fa fbf3 	bl	800579c <sys_clock_set_timeout>
 800afb6:	e7e8      	b.n	800af8a <z_set_timeout_expiry+0x26>
}
 800afb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800afba <sys_clock_tick_get_32>:
{
 800afba:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800afbc:	f7fb ffb4 	bl	8006f28 <sys_clock_tick_get>
}
 800afc0:	bd08      	pop	{r3, pc}

0800afc2 <z_impl_k_uptime_ticks>:
{
 800afc2:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 800afc4:	f7fb ffb0 	bl	8006f28 <sys_clock_tick_get>
}
 800afc8:	bd08      	pop	{r3, pc}

0800afca <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800afca:	b510      	push	{r4, lr}
 800afcc:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 800afce:	f7ff ffab 	bl	800af28 <z_abort_timeout>

	if (inactive) {
 800afd2:	b9a0      	cbnz	r0, 800affe <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 800afd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afd6:	b10b      	cbz	r3, 800afdc <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800afd8:	4620      	mov	r0, r4
 800afda:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800afdc:	f104 0018 	add.w	r0, r4, #24
 800afe0:	f7ff fefe 	bl	800ade0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800afe4:	b158      	cbz	r0, 800affe <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 800afe6:	f7ff fe5b 	bl	800aca0 <z_ready_thread>
	__asm__ volatile(
 800afea:	f04f 0310 	mov.w	r3, #16
 800afee:	f3ef 8011 	mrs	r0, BASEPRI
 800aff2:	f383 8812 	msr	BASEPRI_MAX, r3
 800aff6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800affa:	f7ff fe09 	bl	800ac10 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 800affe:	bd10      	pop	{r4, pc}

0800b000 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800b000:	b108      	cbz	r0, 800b006 <poller_thread+0x6>
 800b002:	3860      	subs	r0, #96	; 0x60
 800b004:	4770      	bx	lr
}
 800b006:	4770      	bx	lr

0800b008 <signal_poller>:
{
 800b008:	b538      	push	{r3, r4, r5, lr}
 800b00a:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 800b00c:	6880      	ldr	r0, [r0, #8]
 800b00e:	f7ff fff7 	bl	800b000 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800b012:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
 800b014:	f013 0f02 	tst.w	r3, #2
 800b018:	d024      	beq.n	800b064 <signal_poller+0x5c>
 800b01a:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 800b01c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b01e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
 800b020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b024:	bf08      	it	eq
 800b026:	f112 0f02 	cmneq.w	r2, #2
 800b02a:	d01d      	beq.n	800b068 <signal_poller+0x60>
	z_unpend_thread(thread);
 800b02c:	f7ff fe0d 	bl	800ac4a <z_unpend_thread>
	arch_thread_return_value_set(thread,
 800b030:	2d08      	cmp	r5, #8
 800b032:	d009      	beq.n	800b048 <signal_poller+0x40>
 800b034:	2300      	movs	r3, #0
 800b036:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
 800b038:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800b03a:	f013 0f1f 	tst.w	r3, #31
 800b03e:	d108      	bne.n	800b052 <signal_poller+0x4a>
 800b040:	69a3      	ldr	r3, [r4, #24]
 800b042:	b123      	cbz	r3, 800b04e <signal_poller+0x46>
 800b044:	2300      	movs	r3, #0
 800b046:	e005      	b.n	800b054 <signal_poller+0x4c>
 800b048:	f06f 0303 	mvn.w	r3, #3
 800b04c:	e7f3      	b.n	800b036 <signal_poller+0x2e>
 800b04e:	2301      	movs	r3, #1
 800b050:	e000      	b.n	800b054 <signal_poller+0x4c>
 800b052:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 800b054:	b90b      	cbnz	r3, 800b05a <signal_poller+0x52>
		return 0;
 800b056:	2000      	movs	r0, #0
 800b058:	e005      	b.n	800b066 <signal_poller+0x5e>
	z_ready_thread(thread);
 800b05a:	4620      	mov	r0, r4
 800b05c:	f7ff fe20 	bl	800aca0 <z_ready_thread>
	return 0;
 800b060:	2000      	movs	r0, #0
 800b062:	e000      	b.n	800b066 <signal_poller+0x5e>
		return 0;
 800b064:	2000      	movs	r0, #0
}
 800b066:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 800b068:	f06f 000a 	mvn.w	r0, #10
 800b06c:	e7fb      	b.n	800b066 <signal_poller+0x5e>

0800b06e <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 800b06e:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 800b070:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 800b072:	7823      	ldrb	r3, [r4, #0]
 800b074:	b173      	cbz	r3, 800b094 <signal_triggered_work+0x26>
 800b076:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800b07a:	b15d      	cbz	r5, 800b094 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 800b07c:	f1a4 0614 	sub.w	r6, r4, #20
 800b080:	f104 0014 	add.w	r0, r4, #20
 800b084:	f7ff ff50 	bl	800af28 <z_abort_timeout>
		twork->poll_result = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 800b08c:	4631      	mov	r1, r6
 800b08e:	4628      	mov	r0, r5
 800b090:	f7ff fd2e 	bl	800aaf0 <k_work_submit_to_queue>
	}

	return 0;
}
 800b094:	2000      	movs	r0, #0
 800b096:	bd70      	pop	{r4, r5, r6, pc}

0800b098 <signal_poll_event>:
{
 800b098:	b570      	push	{r4, r5, r6, lr}
 800b09a:	4604      	mov	r4, r0
 800b09c:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 800b09e:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 800b0a0:	b1d6      	cbz	r6, 800b0d8 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 800b0a2:	7873      	ldrb	r3, [r6, #1]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d00d      	beq.n	800b0c4 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d012      	beq.n	800b0d2 <signal_poll_event+0x3a>
		poller->is_polling = false;
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 800b0b4:	68e3      	ldr	r3, [r4, #12]
 800b0b6:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800b0ba:	430d      	orrs	r5, r1
 800b0bc:	f365 3352 	bfi	r3, r5, #13, #6
 800b0c0:	60e3      	str	r3, [r4, #12]
}
 800b0c2:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 800b0c4:	f7ff ffa0 	bl	800b008 <signal_poller>
		poller->is_polling = false;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 800b0cc:	4298      	cmp	r0, r3
 800b0ce:	daef      	bge.n	800b0b0 <signal_poll_event+0x18>
 800b0d0:	e7f7      	b.n	800b0c2 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 800b0d2:	f7ff ffcc 	bl	800b06e <signal_triggered_work>
 800b0d6:	e7f7      	b.n	800b0c8 <signal_poll_event+0x30>
	int retcode = 0;
 800b0d8:	2000      	movs	r0, #0
 800b0da:	e7e9      	b.n	800b0b0 <signal_poll_event+0x18>

0800b0dc <z_handle_obj_poll_events>:
{
 800b0dc:	b508      	push	{r3, lr}
 800b0de:	4603      	mov	r3, r0
	return list->head == list;
 800b0e0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 800b0e2:	4283      	cmp	r3, r0
 800b0e4:	d009      	beq.n	800b0fa <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 800b0e6:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800b0e8:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800b0ea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800b0ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800b0f2:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 800b0f4:	b108      	cbz	r0, 800b0fa <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 800b0f6:	f7ff ffcf 	bl	800b098 <signal_poll_event>
}
 800b0fa:	bd08      	pop	{r3, pc}

0800b0fc <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 800b0fc:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 800b0fe:	4770      	bx	lr

0800b100 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 800b100:	4770      	bx	lr

0800b102 <atoi>:
 800b102:	220a      	movs	r2, #10
 800b104:	2100      	movs	r1, #0
 800b106:	f7fc bc47 	b.w	8007998 <strtol>

0800b10a <memcpy>:
 800b10a:	440a      	add	r2, r1
 800b10c:	4291      	cmp	r1, r2
 800b10e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b112:	d100      	bne.n	800b116 <memcpy+0xc>
 800b114:	4770      	bx	lr
 800b116:	b510      	push	{r4, lr}
 800b118:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b11c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b120:	4291      	cmp	r1, r2
 800b122:	d1f9      	bne.n	800b118 <memcpy+0xe>
 800b124:	bd10      	pop	{r4, pc}

0800b126 <memset>:
 800b126:	4402      	add	r2, r0
 800b128:	4603      	mov	r3, r0
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d100      	bne.n	800b130 <memset+0xa>
 800b12e:	4770      	bx	lr
 800b130:	f803 1b01 	strb.w	r1, [r3], #1
 800b134:	e7f9      	b.n	800b12a <memset+0x4>

0800b136 <__sprintf_chk>:
 800b136:	b408      	push	{r3}
 800b138:	b517      	push	{r0, r1, r2, r4, lr}
 800b13a:	ab05      	add	r3, sp, #20
 800b13c:	1e14      	subs	r4, r2, #0
 800b13e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b142:	9301      	str	r3, [sp, #4]
 800b144:	da07      	bge.n	800b156 <__sprintf_chk+0x20>
 800b146:	461a      	mov	r2, r3
 800b148:	f7fc fc54 	bl	80079f4 <vsiprintf>
 800b14c:	b003      	add	sp, #12
 800b14e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b152:	b001      	add	sp, #4
 800b154:	4770      	bx	lr
 800b156:	460a      	mov	r2, r1
 800b158:	4621      	mov	r1, r4
 800b15a:	f7fc fc27 	bl	80079ac <vsniprintf>
 800b15e:	2800      	cmp	r0, #0
 800b160:	dbf4      	blt.n	800b14c <__sprintf_chk+0x16>
 800b162:	42a0      	cmp	r0, r4
 800b164:	d3f2      	bcc.n	800b14c <__sprintf_chk+0x16>
 800b166:	f7f6 feed 	bl	8001f44 <__chk_fail>

0800b16a <__strtok_r>:
 800b16a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b16c:	b908      	cbnz	r0, 800b172 <__strtok_r+0x8>
 800b16e:	6810      	ldr	r0, [r2, #0]
 800b170:	b188      	cbz	r0, 800b196 <__strtok_r+0x2c>
 800b172:	4604      	mov	r4, r0
 800b174:	4620      	mov	r0, r4
 800b176:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b17a:	460f      	mov	r7, r1
 800b17c:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b180:	b91e      	cbnz	r6, 800b18a <__strtok_r+0x20>
 800b182:	b965      	cbnz	r5, 800b19e <__strtok_r+0x34>
 800b184:	6015      	str	r5, [r2, #0]
 800b186:	4628      	mov	r0, r5
 800b188:	e005      	b.n	800b196 <__strtok_r+0x2c>
 800b18a:	42b5      	cmp	r5, r6
 800b18c:	d1f6      	bne.n	800b17c <__strtok_r+0x12>
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1f0      	bne.n	800b174 <__strtok_r+0xa>
 800b192:	6014      	str	r4, [r2, #0]
 800b194:	7003      	strb	r3, [r0, #0]
 800b196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b198:	461c      	mov	r4, r3
 800b19a:	e00c      	b.n	800b1b6 <__strtok_r+0x4c>
 800b19c:	b915      	cbnz	r5, 800b1a4 <__strtok_r+0x3a>
 800b19e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b1a2:	460e      	mov	r6, r1
 800b1a4:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b1a8:	42ab      	cmp	r3, r5
 800b1aa:	d1f7      	bne.n	800b19c <__strtok_r+0x32>
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d0f3      	beq.n	800b198 <__strtok_r+0x2e>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b1b6:	6014      	str	r4, [r2, #0]
 800b1b8:	e7ed      	b.n	800b196 <__strtok_r+0x2c>

0800b1ba <_vsniprintf_r>:
 800b1ba:	b530      	push	{r4, r5, lr}
 800b1bc:	4614      	mov	r4, r2
 800b1be:	2c00      	cmp	r4, #0
 800b1c0:	b09b      	sub	sp, #108	; 0x6c
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	da05      	bge.n	800b1d4 <_vsniprintf_r+0x1a>
 800b1c8:	238b      	movs	r3, #139	; 0x8b
 800b1ca:	6003      	str	r3, [r0, #0]
 800b1cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1d0:	b01b      	add	sp, #108	; 0x6c
 800b1d2:	bd30      	pop	{r4, r5, pc}
 800b1d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b1d8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b1dc:	bf14      	ite	ne
 800b1de:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b1e2:	4623      	moveq	r3, r4
 800b1e4:	9302      	str	r3, [sp, #8]
 800b1e6:	9305      	str	r3, [sp, #20]
 800b1e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1ec:	9100      	str	r1, [sp, #0]
 800b1ee:	9104      	str	r1, [sp, #16]
 800b1f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b1f4:	4669      	mov	r1, sp
 800b1f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b1f8:	f7fc fc42 	bl	8007a80 <_svfiprintf_r>
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	bfbc      	itt	lt
 800b200:	238b      	movlt	r3, #139	; 0x8b
 800b202:	602b      	strlt	r3, [r5, #0]
 800b204:	2c00      	cmp	r4, #0
 800b206:	d0e3      	beq.n	800b1d0 <_vsniprintf_r+0x16>
 800b208:	9b00      	ldr	r3, [sp, #0]
 800b20a:	2200      	movs	r2, #0
 800b20c:	701a      	strb	r2, [r3, #0]
 800b20e:	e7df      	b.n	800b1d0 <_vsniprintf_r+0x16>

0800b210 <__ssputs_r>:
 800b210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b214:	688e      	ldr	r6, [r1, #8]
 800b216:	429e      	cmp	r6, r3
 800b218:	4682      	mov	sl, r0
 800b21a:	460c      	mov	r4, r1
 800b21c:	4690      	mov	r8, r2
 800b21e:	461f      	mov	r7, r3
 800b220:	d838      	bhi.n	800b294 <__ssputs_r+0x84>
 800b222:	898a      	ldrh	r2, [r1, #12]
 800b224:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b228:	d032      	beq.n	800b290 <__ssputs_r+0x80>
 800b22a:	6825      	ldr	r5, [r4, #0]
 800b22c:	6909      	ldr	r1, [r1, #16]
 800b22e:	eba5 0901 	sub.w	r9, r5, r1
 800b232:	6965      	ldr	r5, [r4, #20]
 800b234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b23c:	3301      	adds	r3, #1
 800b23e:	444b      	add	r3, r9
 800b240:	106d      	asrs	r5, r5, #1
 800b242:	429d      	cmp	r5, r3
 800b244:	bf38      	it	cc
 800b246:	461d      	movcc	r5, r3
 800b248:	0553      	lsls	r3, r2, #21
 800b24a:	d531      	bpl.n	800b2b0 <__ssputs_r+0xa0>
 800b24c:	4629      	mov	r1, r5
 800b24e:	f7fc fa83 	bl	8007758 <_malloc_r>
 800b252:	4606      	mov	r6, r0
 800b254:	b950      	cbnz	r0, 800b26c <__ssputs_r+0x5c>
 800b256:	230c      	movs	r3, #12
 800b258:	f8ca 3000 	str.w	r3, [sl]
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b262:	81a3      	strh	r3, [r4, #12]
 800b264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b26c:	6921      	ldr	r1, [r4, #16]
 800b26e:	464a      	mov	r2, r9
 800b270:	f7ff ff4b 	bl	800b10a <memcpy>
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b27a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b27e:	81a3      	strh	r3, [r4, #12]
 800b280:	6126      	str	r6, [r4, #16]
 800b282:	6165      	str	r5, [r4, #20]
 800b284:	444e      	add	r6, r9
 800b286:	eba5 0509 	sub.w	r5, r5, r9
 800b28a:	6026      	str	r6, [r4, #0]
 800b28c:	60a5      	str	r5, [r4, #8]
 800b28e:	463e      	mov	r6, r7
 800b290:	42be      	cmp	r6, r7
 800b292:	d900      	bls.n	800b296 <__ssputs_r+0x86>
 800b294:	463e      	mov	r6, r7
 800b296:	6820      	ldr	r0, [r4, #0]
 800b298:	4632      	mov	r2, r6
 800b29a:	4641      	mov	r1, r8
 800b29c:	f000 f90a 	bl	800b4b4 <memmove>
 800b2a0:	68a3      	ldr	r3, [r4, #8]
 800b2a2:	1b9b      	subs	r3, r3, r6
 800b2a4:	60a3      	str	r3, [r4, #8]
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	4433      	add	r3, r6
 800b2aa:	6023      	str	r3, [r4, #0]
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	e7db      	b.n	800b268 <__ssputs_r+0x58>
 800b2b0:	462a      	mov	r2, r5
 800b2b2:	f000 f919 	bl	800b4e8 <_realloc_r>
 800b2b6:	4606      	mov	r6, r0
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d1e1      	bne.n	800b280 <__ssputs_r+0x70>
 800b2bc:	6921      	ldr	r1, [r4, #16]
 800b2be:	4650      	mov	r0, sl
 800b2c0:	f7fc f9fe 	bl	80076c0 <_free_r>
 800b2c4:	e7c7      	b.n	800b256 <__ssputs_r+0x46>

0800b2c6 <__sfputc_r>:
 800b2c6:	6893      	ldr	r3, [r2, #8]
 800b2c8:	3b01      	subs	r3, #1
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	b410      	push	{r4}
 800b2ce:	6093      	str	r3, [r2, #8]
 800b2d0:	da08      	bge.n	800b2e4 <__sfputc_r+0x1e>
 800b2d2:	6994      	ldr	r4, [r2, #24]
 800b2d4:	42a3      	cmp	r3, r4
 800b2d6:	db01      	blt.n	800b2dc <__sfputc_r+0x16>
 800b2d8:	290a      	cmp	r1, #10
 800b2da:	d103      	bne.n	800b2e4 <__sfputc_r+0x1e>
 800b2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2e0:	f7fc bf24 	b.w	800812c <__swbuf_r>
 800b2e4:	6813      	ldr	r3, [r2, #0]
 800b2e6:	1c58      	adds	r0, r3, #1
 800b2e8:	6010      	str	r0, [r2, #0]
 800b2ea:	7019      	strb	r1, [r3, #0]
 800b2ec:	4608      	mov	r0, r1
 800b2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <__sfputs_r>:
 800b2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	460f      	mov	r7, r1
 800b2fa:	4614      	mov	r4, r2
 800b2fc:	18d5      	adds	r5, r2, r3
 800b2fe:	42ac      	cmp	r4, r5
 800b300:	d101      	bne.n	800b306 <__sfputs_r+0x12>
 800b302:	2000      	movs	r0, #0
 800b304:	e007      	b.n	800b316 <__sfputs_r+0x22>
 800b306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30a:	463a      	mov	r2, r7
 800b30c:	4630      	mov	r0, r6
 800b30e:	f7ff ffda 	bl	800b2c6 <__sfputc_r>
 800b312:	1c43      	adds	r3, r0, #1
 800b314:	d1f3      	bne.n	800b2fe <__sfputs_r+0xa>
 800b316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b318 <_printf_common>:
 800b318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b31c:	4616      	mov	r6, r2
 800b31e:	4699      	mov	r9, r3
 800b320:	688a      	ldr	r2, [r1, #8]
 800b322:	690b      	ldr	r3, [r1, #16]
 800b324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b328:	4293      	cmp	r3, r2
 800b32a:	bfb8      	it	lt
 800b32c:	4613      	movlt	r3, r2
 800b32e:	6033      	str	r3, [r6, #0]
 800b330:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b334:	4607      	mov	r7, r0
 800b336:	460c      	mov	r4, r1
 800b338:	b10a      	cbz	r2, 800b33e <_printf_common+0x26>
 800b33a:	3301      	adds	r3, #1
 800b33c:	6033      	str	r3, [r6, #0]
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	0699      	lsls	r1, r3, #26
 800b342:	bf42      	ittt	mi
 800b344:	6833      	ldrmi	r3, [r6, #0]
 800b346:	3302      	addmi	r3, #2
 800b348:	6033      	strmi	r3, [r6, #0]
 800b34a:	6825      	ldr	r5, [r4, #0]
 800b34c:	f015 0506 	ands.w	r5, r5, #6
 800b350:	d106      	bne.n	800b360 <_printf_common+0x48>
 800b352:	f104 0a19 	add.w	sl, r4, #25
 800b356:	68e3      	ldr	r3, [r4, #12]
 800b358:	6832      	ldr	r2, [r6, #0]
 800b35a:	1a9b      	subs	r3, r3, r2
 800b35c:	42ab      	cmp	r3, r5
 800b35e:	dc26      	bgt.n	800b3ae <_printf_common+0x96>
 800b360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b364:	1e13      	subs	r3, r2, #0
 800b366:	6822      	ldr	r2, [r4, #0]
 800b368:	bf18      	it	ne
 800b36a:	2301      	movne	r3, #1
 800b36c:	0692      	lsls	r2, r2, #26
 800b36e:	d42b      	bmi.n	800b3c8 <_printf_common+0xb0>
 800b370:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b374:	4649      	mov	r1, r9
 800b376:	4638      	mov	r0, r7
 800b378:	47c0      	blx	r8
 800b37a:	3001      	adds	r0, #1
 800b37c:	d01e      	beq.n	800b3bc <_printf_common+0xa4>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	68e5      	ldr	r5, [r4, #12]
 800b382:	6832      	ldr	r2, [r6, #0]
 800b384:	f003 0306 	and.w	r3, r3, #6
 800b388:	2b04      	cmp	r3, #4
 800b38a:	bf08      	it	eq
 800b38c:	1aad      	subeq	r5, r5, r2
 800b38e:	68a3      	ldr	r3, [r4, #8]
 800b390:	6922      	ldr	r2, [r4, #16]
 800b392:	bf0c      	ite	eq
 800b394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b398:	2500      	movne	r5, #0
 800b39a:	4293      	cmp	r3, r2
 800b39c:	bfc4      	itt	gt
 800b39e:	1a9b      	subgt	r3, r3, r2
 800b3a0:	18ed      	addgt	r5, r5, r3
 800b3a2:	2600      	movs	r6, #0
 800b3a4:	341a      	adds	r4, #26
 800b3a6:	42b5      	cmp	r5, r6
 800b3a8:	d11a      	bne.n	800b3e0 <_printf_common+0xc8>
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	e008      	b.n	800b3c0 <_printf_common+0xa8>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	4652      	mov	r2, sl
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	4638      	mov	r0, r7
 800b3b6:	47c0      	blx	r8
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	d103      	bne.n	800b3c4 <_printf_common+0xac>
 800b3bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c4:	3501      	adds	r5, #1
 800b3c6:	e7c6      	b.n	800b356 <_printf_common+0x3e>
 800b3c8:	18e1      	adds	r1, r4, r3
 800b3ca:	1c5a      	adds	r2, r3, #1
 800b3cc:	2030      	movs	r0, #48	; 0x30
 800b3ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3d2:	4422      	add	r2, r4
 800b3d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3dc:	3302      	adds	r3, #2
 800b3de:	e7c7      	b.n	800b370 <_printf_common+0x58>
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	4649      	mov	r1, r9
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	47c0      	blx	r8
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	d0e6      	beq.n	800b3bc <_printf_common+0xa4>
 800b3ee:	3601      	adds	r6, #1
 800b3f0:	e7d9      	b.n	800b3a6 <_printf_common+0x8e>

0800b3f2 <abort>:
 800b3f2:	b508      	push	{r3, lr}
 800b3f4:	2006      	movs	r0, #6
 800b3f6:	f7fd f91b 	bl	8008630 <raise>
 800b3fa:	2001      	movs	r0, #1
 800b3fc:	f7f6 fd82 	bl	8001f04 <_exit>

0800b400 <__sfmoreglue>:
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	2268      	movs	r2, #104	; 0x68
 800b404:	1e4d      	subs	r5, r1, #1
 800b406:	4355      	muls	r5, r2
 800b408:	460e      	mov	r6, r1
 800b40a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b40e:	f7fc f9a3 	bl	8007758 <_malloc_r>
 800b412:	4604      	mov	r4, r0
 800b414:	b140      	cbz	r0, 800b428 <__sfmoreglue+0x28>
 800b416:	2100      	movs	r1, #0
 800b418:	e9c0 1600 	strd	r1, r6, [r0]
 800b41c:	300c      	adds	r0, #12
 800b41e:	60a0      	str	r0, [r4, #8]
 800b420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b424:	f7ff fe7f 	bl	800b126 <memset>
 800b428:	4620      	mov	r0, r4
 800b42a:	bd70      	pop	{r4, r5, r6, pc}

0800b42c <_fwalk_reent>:
 800b42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b430:	4606      	mov	r6, r0
 800b432:	4688      	mov	r8, r1
 800b434:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b438:	2700      	movs	r7, #0
 800b43a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b43e:	f1b9 0901 	subs.w	r9, r9, #1
 800b442:	d505      	bpl.n	800b450 <_fwalk_reent+0x24>
 800b444:	6824      	ldr	r4, [r4, #0]
 800b446:	2c00      	cmp	r4, #0
 800b448:	d1f7      	bne.n	800b43a <_fwalk_reent+0xe>
 800b44a:	4638      	mov	r0, r7
 800b44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b450:	89ab      	ldrh	r3, [r5, #12]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d907      	bls.n	800b466 <_fwalk_reent+0x3a>
 800b456:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b45a:	3301      	adds	r3, #1
 800b45c:	d003      	beq.n	800b466 <_fwalk_reent+0x3a>
 800b45e:	4629      	mov	r1, r5
 800b460:	4630      	mov	r0, r6
 800b462:	47c0      	blx	r8
 800b464:	4307      	orrs	r7, r0
 800b466:	3568      	adds	r5, #104	; 0x68
 800b468:	e7e9      	b.n	800b43e <_fwalk_reent+0x12>

0800b46a <__swhatbuf_r>:
 800b46a:	b570      	push	{r4, r5, r6, lr}
 800b46c:	460e      	mov	r6, r1
 800b46e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b472:	2900      	cmp	r1, #0
 800b474:	b096      	sub	sp, #88	; 0x58
 800b476:	4614      	mov	r4, r2
 800b478:	461d      	mov	r5, r3
 800b47a:	da08      	bge.n	800b48e <__swhatbuf_r+0x24>
 800b47c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	602a      	str	r2, [r5, #0]
 800b484:	061a      	lsls	r2, r3, #24
 800b486:	d410      	bmi.n	800b4aa <__swhatbuf_r+0x40>
 800b488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b48c:	e00e      	b.n	800b4ac <__swhatbuf_r+0x42>
 800b48e:	466a      	mov	r2, sp
 800b490:	f7fd f90a 	bl	80086a8 <_fstat_r>
 800b494:	2800      	cmp	r0, #0
 800b496:	dbf1      	blt.n	800b47c <__swhatbuf_r+0x12>
 800b498:	9a01      	ldr	r2, [sp, #4]
 800b49a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b49e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4a2:	425a      	negs	r2, r3
 800b4a4:	415a      	adcs	r2, r3
 800b4a6:	602a      	str	r2, [r5, #0]
 800b4a8:	e7ee      	b.n	800b488 <__swhatbuf_r+0x1e>
 800b4aa:	2340      	movs	r3, #64	; 0x40
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	6023      	str	r3, [r4, #0]
 800b4b0:	b016      	add	sp, #88	; 0x58
 800b4b2:	bd70      	pop	{r4, r5, r6, pc}

0800b4b4 <memmove>:
 800b4b4:	4288      	cmp	r0, r1
 800b4b6:	b510      	push	{r4, lr}
 800b4b8:	eb01 0402 	add.w	r4, r1, r2
 800b4bc:	d902      	bls.n	800b4c4 <memmove+0x10>
 800b4be:	4284      	cmp	r4, r0
 800b4c0:	4623      	mov	r3, r4
 800b4c2:	d807      	bhi.n	800b4d4 <memmove+0x20>
 800b4c4:	1e43      	subs	r3, r0, #1
 800b4c6:	42a1      	cmp	r1, r4
 800b4c8:	d008      	beq.n	800b4dc <memmove+0x28>
 800b4ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4d2:	e7f8      	b.n	800b4c6 <memmove+0x12>
 800b4d4:	4402      	add	r2, r0
 800b4d6:	4601      	mov	r1, r0
 800b4d8:	428a      	cmp	r2, r1
 800b4da:	d100      	bne.n	800b4de <memmove+0x2a>
 800b4dc:	bd10      	pop	{r4, pc}
 800b4de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4e6:	e7f7      	b.n	800b4d8 <memmove+0x24>

0800b4e8 <_realloc_r>:
 800b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ea:	4607      	mov	r7, r0
 800b4ec:	4614      	mov	r4, r2
 800b4ee:	460e      	mov	r6, r1
 800b4f0:	b921      	cbnz	r1, 800b4fc <_realloc_r+0x14>
 800b4f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b4f6:	4611      	mov	r1, r2
 800b4f8:	f7fc b92e 	b.w	8007758 <_malloc_r>
 800b4fc:	b922      	cbnz	r2, 800b508 <_realloc_r+0x20>
 800b4fe:	f7fc f8df 	bl	80076c0 <_free_r>
 800b502:	4625      	mov	r5, r4
 800b504:	4628      	mov	r0, r5
 800b506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b508:	f000 f881 	bl	800b60e <_malloc_usable_size_r>
 800b50c:	42a0      	cmp	r0, r4
 800b50e:	d20f      	bcs.n	800b530 <_realloc_r+0x48>
 800b510:	4621      	mov	r1, r4
 800b512:	4638      	mov	r0, r7
 800b514:	f7fc f920 	bl	8007758 <_malloc_r>
 800b518:	4605      	mov	r5, r0
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d0f2      	beq.n	800b504 <_realloc_r+0x1c>
 800b51e:	4631      	mov	r1, r6
 800b520:	4622      	mov	r2, r4
 800b522:	f7ff fdf2 	bl	800b10a <memcpy>
 800b526:	4631      	mov	r1, r6
 800b528:	4638      	mov	r0, r7
 800b52a:	f7fc f8c9 	bl	80076c0 <_free_r>
 800b52e:	e7e9      	b.n	800b504 <_realloc_r+0x1c>
 800b530:	4635      	mov	r5, r6
 800b532:	e7e7      	b.n	800b504 <_realloc_r+0x1c>

0800b534 <_raise_r>:
 800b534:	291f      	cmp	r1, #31
 800b536:	b538      	push	{r3, r4, r5, lr}
 800b538:	4604      	mov	r4, r0
 800b53a:	460d      	mov	r5, r1
 800b53c:	d904      	bls.n	800b548 <_raise_r+0x14>
 800b53e:	2316      	movs	r3, #22
 800b540:	6003      	str	r3, [r0, #0]
 800b542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b54a:	b112      	cbz	r2, 800b552 <_raise_r+0x1e>
 800b54c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b550:	b94b      	cbnz	r3, 800b566 <_raise_r+0x32>
 800b552:	4620      	mov	r0, r4
 800b554:	f000 f816 	bl	800b584 <_getpid_r>
 800b558:	462a      	mov	r2, r5
 800b55a:	4601      	mov	r1, r0
 800b55c:	4620      	mov	r0, r4
 800b55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b562:	f7fd b86d 	b.w	8008640 <_kill_r>
 800b566:	2b01      	cmp	r3, #1
 800b568:	d00a      	beq.n	800b580 <_raise_r+0x4c>
 800b56a:	1c59      	adds	r1, r3, #1
 800b56c:	d103      	bne.n	800b576 <_raise_r+0x42>
 800b56e:	2316      	movs	r3, #22
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	2001      	movs	r0, #1
 800b574:	e7e7      	b.n	800b546 <_raise_r+0x12>
 800b576:	2400      	movs	r4, #0
 800b578:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b57c:	4628      	mov	r0, r5
 800b57e:	4798      	blx	r3
 800b580:	2000      	movs	r0, #0
 800b582:	e7e0      	b.n	800b546 <_raise_r+0x12>

0800b584 <_getpid_r>:
 800b584:	f7fd b9c1 	b.w	800890a <_getpid>

0800b588 <__sread>:
 800b588:	b510      	push	{r4, lr}
 800b58a:	460c      	mov	r4, r1
 800b58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b590:	f7fd f8be 	bl	8008710 <_read_r>
 800b594:	2800      	cmp	r0, #0
 800b596:	bfab      	itete	ge
 800b598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b59a:	89a3      	ldrhlt	r3, [r4, #12]
 800b59c:	181b      	addge	r3, r3, r0
 800b59e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5a2:	bfac      	ite	ge
 800b5a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5a6:	81a3      	strhlt	r3, [r4, #12]
 800b5a8:	bd10      	pop	{r4, pc}

0800b5aa <__swrite>:
 800b5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ae:	461f      	mov	r7, r3
 800b5b0:	898b      	ldrh	r3, [r1, #12]
 800b5b2:	05db      	lsls	r3, r3, #23
 800b5b4:	4605      	mov	r5, r0
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	4616      	mov	r6, r2
 800b5ba:	d505      	bpl.n	800b5c8 <__swrite+0x1e>
 800b5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f7fd f892 	bl	80086ec <_lseek_r>
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5d2:	81a3      	strh	r3, [r4, #12]
 800b5d4:	4632      	mov	r2, r6
 800b5d6:	463b      	mov	r3, r7
 800b5d8:	4628      	mov	r0, r5
 800b5da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5de:	f7fd b841 	b.w	8008664 <_write_r>

0800b5e2 <__sseek>:
 800b5e2:	b510      	push	{r4, lr}
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ea:	f7fd f87f 	bl	80086ec <_lseek_r>
 800b5ee:	1c43      	adds	r3, r0, #1
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	bf15      	itete	ne
 800b5f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5fe:	81a3      	strheq	r3, [r4, #12]
 800b600:	bf18      	it	ne
 800b602:	81a3      	strhne	r3, [r4, #12]
 800b604:	bd10      	pop	{r4, pc}

0800b606 <__sclose>:
 800b606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60a:	f7fd b83d 	b.w	8008688 <_close_r>

0800b60e <_malloc_usable_size_r>:
 800b60e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b612:	1f18      	subs	r0, r3, #4
 800b614:	2b00      	cmp	r3, #0
 800b616:	bfbc      	itt	lt
 800b618:	580b      	ldrlt	r3, [r1, r0]
 800b61a:	18c0      	addlt	r0, r0, r3
 800b61c:	4770      	bx	lr
