
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	e0 2b 00 20 49 54 00 08 67 f4 00 08 01 54 00 08     .+. IT..g....T..
 8000010:	01 54 00 08 01 54 00 08 01 54 00 08 00 00 00 00     .T...T...T......
	...
 800002c:	4d 47 00 08 01 54 00 08 00 00 00 00 f9 46 00 08     MG...T.......F..
 800003c:	b1 af 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000050:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000060:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000070:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000080:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000090:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 80000a0:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 80000b0:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 80000c0:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 80000d0:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 80000e0:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 80000f0:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000100:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000110:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000120:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000130:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000140:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000150:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000160:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000170:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000180:	25 48 00 08 25 48 00 08 25 48 00 08 25 48 00 08     %H..%H..%H..%H..
 8000190:	25 48 00 08                                         %H..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009f0:	f000 b80c 	b.w	8000a0c <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f8ce 	bl	8000b9c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_idiv0>:
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__gedf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a14:	e006      	b.n	8000a24 <__cmpdf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__ledf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpdf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpdf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3a:	d01b      	beq.n	8000a74 <__cmpdf2+0x54>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a42:	bf0c      	ite	eq
 8000a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a48:	ea91 0f03 	teqne	r1, r3
 8000a4c:	bf02      	ittt	eq
 8000a4e:	ea90 0f02 	teqeq	r0, r2
 8000a52:	2000      	moveq	r0, #0
 8000a54:	4770      	bxeq	lr
 8000a56:	f110 0f00 	cmn.w	r0, #0
 8000a5a:	ea91 0f03 	teq	r1, r3
 8000a5e:	bf58      	it	pl
 8000a60:	4299      	cmppl	r1, r3
 8000a62:	bf08      	it	eq
 8000a64:	4290      	cmpeq	r0, r2
 8000a66:	bf2c      	ite	cs
 8000a68:	17d8      	asrcs	r0, r3, #31
 8000a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6e:	f040 0001 	orr.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__cmpdf2+0x64>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d107      	bne.n	8000a94 <__cmpdf2+0x74>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d1d6      	bne.n	8000a3c <__cmpdf2+0x1c>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d0d3      	beq.n	8000a3c <__cmpdf2+0x1c>
 8000a94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdrcmple>:
 8000a9c:	4684      	mov	ip, r0
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	e000      	b.n	8000aac <__aeabi_cdcmpeq>
 8000aaa:	bf00      	nop

08000aac <__aeabi_cdcmpeq>:
 8000aac:	b501      	push	{r0, lr}
 8000aae:	f7ff ffb7 	bl	8000a20 <__cmpdf2>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	bf48      	it	mi
 8000ab6:	f110 0f00 	cmnmi.w	r0, #0
 8000aba:	bd01      	pop	{r0, pc}

08000abc <__aeabi_dcmpeq>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff fff4 	bl	8000aac <__aeabi_cdcmpeq>
 8000ac4:	bf0c      	ite	eq
 8000ac6:	2001      	moveq	r0, #1
 8000ac8:	2000      	movne	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmplt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffea 	bl	8000aac <__aeabi_cdcmpeq>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmple>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffe0 	bl	8000aac <__aeabi_cdcmpeq>
 8000aec:	bf94      	ite	ls
 8000aee:	2001      	movls	r0, #1
 8000af0:	2000      	movhi	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpge>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffce 	bl	8000a9c <__aeabi_cdrcmple>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpgt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffc4 	bl	8000a9c <__aeabi_cdrcmple>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpun>:
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x10>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d10a      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__aeabi_dcmpun+0x20>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0001 	mov.w	r0, #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ba8:	4615      	mov	r5, r2
 8000baa:	463c      	mov	r4, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 80c6 	bne.w	8000d40 <__udivmoddi4+0x1a4>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	fab2 f782 	clz	r7, r2
 8000bba:	d946      	bls.n	8000c4a <__udivmoddi4+0xae>
 8000bbc:	b14f      	cbz	r7, 8000bd2 <__udivmoddi4+0x36>
 8000bbe:	f1c7 0e20 	rsb	lr, r7, #32
 8000bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000bc6:	fa00 f307 	lsl.w	r3, r0, r7
 8000bca:	40bd      	lsls	r5, r7
 8000bcc:	ea4e 0c03 	orr.w	ip, lr, r3
 8000bd0:	40bc      	lsls	r4, r7
 8000bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bd6:	fa1f fe85 	uxth.w	lr, r5
 8000bda:	fbbc f9f8 	udiv	r9, ip, r8
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb08 c319 	mls	r3, r8, r9, ip
 8000be4:	fb09 fa0e 	mul.w	sl, r9, lr
 8000be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000bec:	459a      	cmp	sl, r3
 8000bee:	d928      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf6:	d204      	bcs.n	8000c02 <__udivmoddi4+0x66>
 8000bf8:	459a      	cmp	sl, r3
 8000bfa:	d902      	bls.n	8000c02 <__udivmoddi4+0x66>
 8000bfc:	f1a9 0002 	sub.w	r0, r9, #2
 8000c00:	442b      	add	r3, r5
 8000c02:	eba3 030a 	sub.w	r3, r3, sl
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f2f8 	udiv	r2, r3, r8
 8000c0c:	fb08 3312 	mls	r3, r8, r2, r3
 8000c10:	fb02 fe0e 	mul.w	lr, r2, lr
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d914      	bls.n	8000c46 <__udivmoddi4+0xaa>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000c22:	d203      	bcs.n	8000c2c <__udivmoddi4+0x90>
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d901      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c28:	1e93      	subs	r3, r2, #2
 8000c2a:	442c      	add	r4, r5
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6034      	str	r4, [r6, #0]
 8000c3c:	6073      	str	r3, [r6, #4]
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c42:	4648      	mov	r0, r9
 8000c44:	e7dd      	b.n	8000c02 <__udivmoddi4+0x66>
 8000c46:	4613      	mov	r3, r2
 8000c48:	e7f0      	b.n	8000c2c <__udivmoddi4+0x90>
 8000c4a:	b902      	cbnz	r2, 8000c4e <__udivmoddi4+0xb2>
 8000c4c:	deff      	udf	#255	; 0xff
 8000c4e:	bb87      	cbnz	r7, 8000cb2 <__udivmoddi4+0x116>
 8000c50:	1a83      	subs	r3, r0, r2
 8000c52:	2101      	movs	r1, #1
 8000c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c58:	b2aa      	uxth	r2, r5
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	fb0c f802 	mul.w	r8, ip, r2
 8000c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c6c:	4598      	cmp	r8, r3
 8000c6e:	d963      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d204      	bcs.n	8000c82 <__udivmoddi4+0xe6>
 8000c78:	4598      	cmp	r8, r3
 8000c7a:	d902      	bls.n	8000c82 <__udivmoddi4+0xe6>
 8000c7c:	f1ac 0002 	sub.w	r0, ip, #2
 8000c80:	442b      	add	r3, r5
 8000c82:	eba3 0308 	sub.w	r3, r3, r8
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	fb0c f202 	mul.w	r2, ip, r2
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	d94f      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000c9c:	192c      	adds	r4, r5, r4
 8000c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000ca2:	d204      	bcs.n	8000cae <__udivmoddi4+0x112>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	d902      	bls.n	8000cae <__udivmoddi4+0x112>
 8000ca8:	f1ac 0302 	sub.w	r3, ip, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	1aa4      	subs	r4, r4, r2
 8000cb0:	e7be      	b.n	8000c30 <__udivmoddi4+0x94>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	fa20 f80c 	lsr.w	r8, r0, ip
 8000cba:	fa00 f307 	lsl.w	r3, r0, r7
 8000cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000cc2:	40bd      	lsls	r5, r7
 8000cc4:	ea4c 0203 	orr.w	r2, ip, r3
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	b2ab      	uxth	r3, r5
 8000cce:	fbb8 fcfe 	udiv	ip, r8, lr
 8000cd2:	0c11      	lsrs	r1, r2, #16
 8000cd4:	fb0e 801c 	mls	r0, lr, ip, r8
 8000cd8:	fb0c f903 	mul.w	r9, ip, r3
 8000cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000ce0:	4581      	cmp	r9, r0
 8000ce2:	fa04 f407 	lsl.w	r4, r4, r7
 8000ce6:	d923      	bls.n	8000d30 <__udivmoddi4+0x194>
 8000ce8:	1828      	adds	r0, r5, r0
 8000cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000cee:	d204      	bcs.n	8000cfa <__udivmoddi4+0x15e>
 8000cf0:	4581      	cmp	r9, r0
 8000cf2:	d902      	bls.n	8000cfa <__udivmoddi4+0x15e>
 8000cf4:	f1ac 0102 	sub.w	r1, ip, #2
 8000cf8:	4428      	add	r0, r5
 8000cfa:	eba0 0009 	sub.w	r0, r0, r9
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	fbb0 fcfe 	udiv	ip, r0, lr
 8000d04:	fb0e 001c 	mls	r0, lr, ip, r0
 8000d08:	fb0c f803 	mul.w	r8, ip, r3
 8000d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000d10:	4598      	cmp	r8, r3
 8000d12:	d90f      	bls.n	8000d34 <__udivmoddi4+0x198>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000d1a:	d204      	bcs.n	8000d26 <__udivmoddi4+0x18a>
 8000d1c:	4598      	cmp	r8, r3
 8000d1e:	d902      	bls.n	8000d26 <__udivmoddi4+0x18a>
 8000d20:	f1ac 0202 	sub.w	r2, ip, #2
 8000d24:	442b      	add	r3, r5
 8000d26:	eba3 0308 	sub.w	r3, r3, r8
 8000d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d2e:	e791      	b.n	8000c54 <__udivmoddi4+0xb8>
 8000d30:	4661      	mov	r1, ip
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0x15e>
 8000d34:	4662      	mov	r2, ip
 8000d36:	e7f6      	b.n	8000d26 <__udivmoddi4+0x18a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e7a2      	b.n	8000c82 <__udivmoddi4+0xe6>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	e7b6      	b.n	8000cae <__udivmoddi4+0x112>
 8000d40:	4283      	cmp	r3, r0
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0x1b4>
 8000d44:	b10e      	cbz	r6, 8000d4a <__udivmoddi4+0x1ae>
 8000d46:	e9c6 7000 	strd	r7, r0, [r6]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e776      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	b981      	cbnz	r1, 8000d78 <__udivmoddi4+0x1dc>
 8000d56:	4283      	cmp	r3, r0
 8000d58:	d301      	bcc.n	8000d5e <__udivmoddi4+0x1c2>
 8000d5a:	42ba      	cmp	r2, r7
 8000d5c:	d80a      	bhi.n	8000d74 <__udivmoddi4+0x1d8>
 8000d5e:	1abc      	subs	r4, r7, r2
 8000d60:	eb60 0303 	sbc.w	r3, r0, r3
 8000d64:	2001      	movs	r0, #1
 8000d66:	469c      	mov	ip, r3
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d068      	beq.n	8000e3e <__udivmoddi4+0x2a2>
 8000d6c:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e764      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e7f7      	b.n	8000d68 <__udivmoddi4+0x1cc>
 8000d78:	f1c1 0c20 	rsb	ip, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f40c 	lsr.w	r4, r2, ip
 8000d82:	431c      	orrs	r4, r3
 8000d84:	fa02 f501 	lsl.w	r5, r2, r1
 8000d88:	fa00 f301 	lsl.w	r3, r0, r1
 8000d8c:	fa27 f20c 	lsr.w	r2, r7, ip
 8000d90:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	fbbb f8f9 	udiv	r8, fp, r9
 8000d9e:	fa1f fe84 	uxth.w	lr, r4
 8000da2:	fb09 bb18 	mls	fp, r9, r8, fp
 8000da6:	0c1a      	lsrs	r2, r3, #16
 8000da8:	fb08 fa0e 	mul.w	sl, r8, lr
 8000dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000db0:	4592      	cmp	sl, r2
 8000db2:	fa07 f701 	lsl.w	r7, r7, r1
 8000db6:	d93e      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000db8:	18a2      	adds	r2, r4, r2
 8000dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dbe:	d204      	bcs.n	8000dca <__udivmoddi4+0x22e>
 8000dc0:	4592      	cmp	sl, r2
 8000dc2:	d902      	bls.n	8000dca <__udivmoddi4+0x22e>
 8000dc4:	f1a8 0002 	sub.w	r0, r8, #2
 8000dc8:	4422      	add	r2, r4
 8000dca:	eba2 020a 	sub.w	r2, r2, sl
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	fbb2 f8f9 	udiv	r8, r2, r9
 8000dd4:	fb09 2218 	mls	r2, r9, r8, r2
 8000dd8:	fb08 fe0e 	mul.w	lr, r8, lr
 8000ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000de0:	4596      	cmp	lr, r2
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	18a2      	adds	r2, r4, r2
 8000de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000dea:	d204      	bcs.n	8000df6 <__udivmoddi4+0x25a>
 8000dec:	4596      	cmp	lr, r2
 8000dee:	d902      	bls.n	8000df6 <__udivmoddi4+0x25a>
 8000df0:	f1a8 0302 	sub.w	r3, r8, #2
 8000df4:	4422      	add	r2, r4
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	fba0 9305 	umull	r9, r3, r0, r5
 8000dfe:	eba2 020e 	sub.w	r2, r2, lr
 8000e02:	429a      	cmp	r2, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	4698      	mov	r8, r3
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0x274>
 8000e0a:	d106      	bne.n	8000e1a <__udivmoddi4+0x27e>
 8000e0c:	454f      	cmp	r7, r9
 8000e0e:	d204      	bcs.n	8000e1a <__udivmoddi4+0x27e>
 8000e10:	ebb9 0e05 	subs.w	lr, r9, r5
 8000e14:	eb63 0804 	sbc.w	r8, r3, r4
 8000e18:	3801      	subs	r0, #1
 8000e1a:	b186      	cbz	r6, 8000e3e <__udivmoddi4+0x2a2>
 8000e1c:	ebb7 030e 	subs.w	r3, r7, lr
 8000e20:	eb62 0708 	sbc.w	r7, r2, r8
 8000e24:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e28:	40cb      	lsrs	r3, r1
 8000e2a:	ea4c 0303 	orr.w	r3, ip, r3
 8000e2e:	40cf      	lsrs	r7, r1
 8000e30:	e9c6 3700 	strd	r3, r7, [r6]
 8000e34:	e79c      	b.n	8000d70 <__udivmoddi4+0x1d4>
 8000e36:	4640      	mov	r0, r8
 8000e38:	e7c7      	b.n	8000dca <__udivmoddi4+0x22e>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	e7db      	b.n	8000df6 <__udivmoddi4+0x25a>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xa2>

08000e42 <strcmp>:
 8000e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e4a:	2a01      	cmp	r2, #1
 8000e4c:	bf28      	it	cs
 8000e4e:	429a      	cmpcs	r2, r3
 8000e50:	d0f7      	beq.n	8000e42 <strcmp>
 8000e52:	1ad0      	subs	r0, r2, r3
 8000e54:	4770      	bx	lr

08000e56 <strlen>:
 8000e56:	4603      	mov	r3, r0
 8000e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d1fb      	bne.n	8000e58 <strlen+0x2>
 8000e60:	1a18      	subs	r0, r3, r0
 8000e62:	3801      	subs	r0, #1
 8000e64:	4770      	bx	lr
	...

08000e68 <_dtoa_r>:
 8000e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e6c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000e6e:	b099      	sub	sp, #100	; 0x64
 8000e70:	4616      	mov	r6, r2
 8000e72:	461f      	mov	r7, r3
 8000e74:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000e78:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8000e7c:	4605      	mov	r5, r0
 8000e7e:	b974      	cbnz	r4, 8000e9e <_dtoa_r+0x36>
 8000e80:	2010      	movs	r0, #16
 8000e82:	f00c f949 	bl	800d118 <malloc>
 8000e86:	4602      	mov	r2, r0
 8000e88:	6268      	str	r0, [r5, #36]	; 0x24
 8000e8a:	b920      	cbnz	r0, 8000e96 <_dtoa_r+0x2e>
 8000e8c:	4ba8      	ldr	r3, [pc, #672]	; (8001130 <_dtoa_r+0x2c8>)
 8000e8e:	21ea      	movs	r1, #234	; 0xea
 8000e90:	48a8      	ldr	r0, [pc, #672]	; (8001134 <_dtoa_r+0x2cc>)
 8000e92:	f00c fe35 	bl	800db00 <__assert_func>
 8000e96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8000e9a:	6004      	str	r4, [r0, #0]
 8000e9c:	60c4      	str	r4, [r0, #12]
 8000e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000ea0:	6819      	ldr	r1, [r3, #0]
 8000ea2:	b151      	cbz	r1, 8000eba <_dtoa_r+0x52>
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	604a      	str	r2, [r1, #4]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4093      	lsls	r3, r2
 8000eac:	608b      	str	r3, [r1, #8]
 8000eae:	4628      	mov	r0, r5
 8000eb0:	f00c fea6 	bl	800dc00 <_Bfree>
 8000eb4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	1e3b      	subs	r3, r7, #0
 8000ebc:	bfb9      	ittee	lt
 8000ebe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000ec2:	9305      	strlt	r3, [sp, #20]
 8000ec4:	2300      	movge	r3, #0
 8000ec6:	f8c8 3000 	strge.w	r3, [r8]
 8000eca:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000ece:	4b9a      	ldr	r3, [pc, #616]	; (8001138 <_dtoa_r+0x2d0>)
 8000ed0:	bfbc      	itt	lt
 8000ed2:	2201      	movlt	r2, #1
 8000ed4:	f8c8 2000 	strlt.w	r2, [r8]
 8000ed8:	ea33 0309 	bics.w	r3, r3, r9
 8000edc:	d119      	bne.n	8000f12 <_dtoa_r+0xaa>
 8000ede:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000ee0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8000eea:	4333      	orrs	r3, r6
 8000eec:	f000 8580 	beq.w	80019f0 <_dtoa_r+0xb88>
 8000ef0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000ef2:	b953      	cbnz	r3, 8000f0a <_dtoa_r+0xa2>
 8000ef4:	4b91      	ldr	r3, [pc, #580]	; (800113c <_dtoa_r+0x2d4>)
 8000ef6:	e022      	b.n	8000f3e <_dtoa_r+0xd6>
 8000ef8:	4b91      	ldr	r3, [pc, #580]	; (8001140 <_dtoa_r+0x2d8>)
 8000efa:	9303      	str	r3, [sp, #12]
 8000efc:	3308      	adds	r3, #8
 8000efe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	9803      	ldr	r0, [sp, #12]
 8000f04:	b019      	add	sp, #100	; 0x64
 8000f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f0a:	4b8c      	ldr	r3, [pc, #560]	; (800113c <_dtoa_r+0x2d4>)
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	3303      	adds	r3, #3
 8000f10:	e7f5      	b.n	8000efe <_dtoa_r+0x96>
 8000f12:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8000f16:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8000f1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2300      	movs	r3, #0
 8000f22:	f7ff fdcb 	bl	8000abc <__aeabi_dcmpeq>
 8000f26:	4680      	mov	r8, r0
 8000f28:	b158      	cbz	r0, 8000f42 <_dtoa_r+0xda>
 8000f2a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8559 	beq.w	80019ea <_dtoa_r+0xb82>
 8000f38:	4882      	ldr	r0, [pc, #520]	; (8001144 <_dtoa_r+0x2dc>)
 8000f3a:	6018      	str	r0, [r3, #0]
 8000f3c:	1e43      	subs	r3, r0, #1
 8000f3e:	9303      	str	r3, [sp, #12]
 8000f40:	e7df      	b.n	8000f02 <_dtoa_r+0x9a>
 8000f42:	ab16      	add	r3, sp, #88	; 0x58
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	ab17      	add	r3, sp, #92	; 0x5c
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8000f50:	f00d f8ce 	bl	800e0f0 <__d2b>
 8000f54:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8000f58:	4683      	mov	fp, r0
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	d07e      	beq.n	800105c <_dtoa_r+0x1f4>
 8000f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000f60:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8000f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000f6c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8000f70:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8000f74:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8000f78:	4b73      	ldr	r3, [pc, #460]	; (8001148 <_dtoa_r+0x2e0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f7ff f964 	bl	8000248 <__aeabi_dsub>
 8000f80:	a365      	add	r3, pc, #404	; (adr r3, 8001118 <_dtoa_r+0x2b0>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f7ff fb17 	bl	80005b8 <__aeabi_dmul>
 8000f8a:	a365      	add	r3, pc, #404	; (adr r3, 8001120 <_dtoa_r+0x2b8>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff f95c 	bl	800024c <__adddf3>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4620      	mov	r0, r4
 8000f98:	460f      	mov	r7, r1
 8000f9a:	f7ff faa3 	bl	80004e4 <__aeabi_i2d>
 8000f9e:	a362      	add	r3, pc, #392	; (adr r3, 8001128 <_dtoa_r+0x2c0>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	f7ff fb08 	bl	80005b8 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4630      	mov	r0, r6
 8000fae:	4639      	mov	r1, r7
 8000fb0:	f7ff f94c 	bl	800024c <__adddf3>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	460f      	mov	r7, r1
 8000fb8:	f7ff fdc8 	bl	8000b4c <__aeabi_d2iz>
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4682      	mov	sl, r0
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	f7ff fd83 	bl	8000ad0 <__aeabi_dcmplt>
 8000fca:	b148      	cbz	r0, 8000fe0 <_dtoa_r+0x178>
 8000fcc:	4650      	mov	r0, sl
 8000fce:	f7ff fa89 	bl	80004e4 <__aeabi_i2d>
 8000fd2:	4632      	mov	r2, r6
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	f7ff fd71 	bl	8000abc <__aeabi_dcmpeq>
 8000fda:	b908      	cbnz	r0, 8000fe0 <_dtoa_r+0x178>
 8000fdc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000fe0:	f1ba 0f16 	cmp.w	sl, #22
 8000fe4:	d857      	bhi.n	8001096 <_dtoa_r+0x22e>
 8000fe6:	4b59      	ldr	r3, [pc, #356]	; (800114c <_dtoa_r+0x2e4>)
 8000fe8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000ff4:	f7ff fd6c 	bl	8000ad0 <__aeabi_dcmplt>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d04e      	beq.n	800109a <_dtoa_r+0x232>
 8000ffc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8001000:	2300      	movs	r3, #0
 8001002:	930f      	str	r3, [sp, #60]	; 0x3c
 8001004:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001006:	1b1c      	subs	r4, r3, r4
 8001008:	1e63      	subs	r3, r4, #1
 800100a:	9309      	str	r3, [sp, #36]	; 0x24
 800100c:	bf45      	ittet	mi
 800100e:	f1c4 0301 	rsbmi	r3, r4, #1
 8001012:	9306      	strmi	r3, [sp, #24]
 8001014:	2300      	movpl	r3, #0
 8001016:	2300      	movmi	r3, #0
 8001018:	bf4c      	ite	mi
 800101a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800101c:	9306      	strpl	r3, [sp, #24]
 800101e:	f1ba 0f00 	cmp.w	sl, #0
 8001022:	db3c      	blt.n	800109e <_dtoa_r+0x236>
 8001024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001026:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800102a:	4453      	add	r3, sl
 800102c:	9309      	str	r3, [sp, #36]	; 0x24
 800102e:	2300      	movs	r3, #0
 8001030:	930a      	str	r3, [sp, #40]	; 0x28
 8001032:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001034:	2b09      	cmp	r3, #9
 8001036:	f200 808d 	bhi.w	8001154 <_dtoa_r+0x2ec>
 800103a:	2b05      	cmp	r3, #5
 800103c:	bfc4      	itt	gt
 800103e:	3b04      	subgt	r3, #4
 8001040:	9322      	strgt	r3, [sp, #136]	; 0x88
 8001042:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001044:	f1a3 0302 	sub.w	r3, r3, #2
 8001048:	bfcc      	ite	gt
 800104a:	2400      	movgt	r4, #0
 800104c:	2401      	movle	r4, #1
 800104e:	2b03      	cmp	r3, #3
 8001050:	f200 808c 	bhi.w	800116c <_dtoa_r+0x304>
 8001054:	e8df f003 	tbb	[pc, r3]
 8001058:	5b4d4f2d 	.word	0x5b4d4f2d
 800105c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8001060:	441c      	add	r4, r3
 8001062:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8001066:	2b20      	cmp	r3, #32
 8001068:	bfc3      	ittte	gt
 800106a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800106e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8001072:	fa09 f303 	lslgt.w	r3, r9, r3
 8001076:	f1c3 0320 	rsble	r3, r3, #32
 800107a:	bfc6      	itte	gt
 800107c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8001080:	4318      	orrgt	r0, r3
 8001082:	fa06 f003 	lslle.w	r0, r6, r3
 8001086:	f7ff fa1d 	bl	80004c4 <__aeabi_ui2d>
 800108a:	2301      	movs	r3, #1
 800108c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001090:	3c01      	subs	r4, #1
 8001092:	9313      	str	r3, [sp, #76]	; 0x4c
 8001094:	e770      	b.n	8000f78 <_dtoa_r+0x110>
 8001096:	2301      	movs	r3, #1
 8001098:	e7b3      	b.n	8001002 <_dtoa_r+0x19a>
 800109a:	900f      	str	r0, [sp, #60]	; 0x3c
 800109c:	e7b2      	b.n	8001004 <_dtoa_r+0x19c>
 800109e:	9b06      	ldr	r3, [sp, #24]
 80010a0:	eba3 030a 	sub.w	r3, r3, sl
 80010a4:	9306      	str	r3, [sp, #24]
 80010a6:	f1ca 0300 	rsb	r3, sl, #0
 80010aa:	930a      	str	r3, [sp, #40]	; 0x28
 80010ac:	2300      	movs	r3, #0
 80010ae:	930e      	str	r3, [sp, #56]	; 0x38
 80010b0:	e7bf      	b.n	8001032 <_dtoa_r+0x1ca>
 80010b2:	2300      	movs	r3, #0
 80010b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80010b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dc5a      	bgt.n	8001172 <_dtoa_r+0x30a>
 80010bc:	f04f 0901 	mov.w	r9, #1
 80010c0:	f8cd 9020 	str.w	r9, [sp, #32]
 80010c4:	464b      	mov	r3, r9
 80010c6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80010ca:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80010cc:	2200      	movs	r2, #0
 80010ce:	6042      	str	r2, [r0, #4]
 80010d0:	2204      	movs	r2, #4
 80010d2:	f102 0614 	add.w	r6, r2, #20
 80010d6:	429e      	cmp	r6, r3
 80010d8:	6841      	ldr	r1, [r0, #4]
 80010da:	d950      	bls.n	800117e <_dtoa_r+0x316>
 80010dc:	4628      	mov	r0, r5
 80010de:	f00c fd4f 	bl	800db80 <_Balloc>
 80010e2:	9003      	str	r0, [sp, #12]
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d14e      	bne.n	8001186 <_dtoa_r+0x31e>
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <_dtoa_r+0x2e8>)
 80010ea:	4602      	mov	r2, r0
 80010ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010f0:	e6ce      	b.n	8000e90 <_dtoa_r+0x28>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e7de      	b.n	80010b4 <_dtoa_r+0x24c>
 80010f6:	2300      	movs	r3, #0
 80010f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80010fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80010fc:	eb0a 0903 	add.w	r9, sl, r3
 8001100:	f109 0301 	add.w	r3, r9, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	9308      	str	r3, [sp, #32]
 8001108:	bfb8      	it	lt
 800110a:	2301      	movlt	r3, #1
 800110c:	e7dd      	b.n	80010ca <_dtoa_r+0x262>
 800110e:	2301      	movs	r3, #1
 8001110:	e7f2      	b.n	80010f8 <_dtoa_r+0x290>
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	636f4361 	.word	0x636f4361
 800111c:	3fd287a7 	.word	0x3fd287a7
 8001120:	8b60c8b3 	.word	0x8b60c8b3
 8001124:	3fc68a28 	.word	0x3fc68a28
 8001128:	509f79fb 	.word	0x509f79fb
 800112c:	3fd34413 	.word	0x3fd34413
 8001130:	08013c79 	.word	0x08013c79
 8001134:	08013d35 	.word	0x08013d35
 8001138:	7ff00000 	.word	0x7ff00000
 800113c:	08013d31 	.word	0x08013d31
 8001140:	08013d28 	.word	0x08013d28
 8001144:	08013c56 	.word	0x08013c56
 8001148:	3ff80000 	.word	0x3ff80000
 800114c:	08012148 	.word	0x08012148
 8001150:	08013d8f 	.word	0x08013d8f
 8001154:	2401      	movs	r4, #1
 8001156:	2300      	movs	r3, #0
 8001158:	9322      	str	r3, [sp, #136]	; 0x88
 800115a:	940b      	str	r4, [sp, #44]	; 0x2c
 800115c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001160:	2200      	movs	r2, #0
 8001162:	f8cd 9020 	str.w	r9, [sp, #32]
 8001166:	2312      	movs	r3, #18
 8001168:	9223      	str	r2, [sp, #140]	; 0x8c
 800116a:	e7ae      	b.n	80010ca <_dtoa_r+0x262>
 800116c:	2301      	movs	r3, #1
 800116e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001170:	e7f4      	b.n	800115c <_dtoa_r+0x2f4>
 8001172:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001176:	f8cd 9020 	str.w	r9, [sp, #32]
 800117a:	464b      	mov	r3, r9
 800117c:	e7a5      	b.n	80010ca <_dtoa_r+0x262>
 800117e:	3101      	adds	r1, #1
 8001180:	6041      	str	r1, [r0, #4]
 8001182:	0052      	lsls	r2, r2, #1
 8001184:	e7a5      	b.n	80010d2 <_dtoa_r+0x26a>
 8001186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001188:	9a03      	ldr	r2, [sp, #12]
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	9b08      	ldr	r3, [sp, #32]
 800118e:	2b0e      	cmp	r3, #14
 8001190:	f200 80a8 	bhi.w	80012e4 <_dtoa_r+0x47c>
 8001194:	2c00      	cmp	r4, #0
 8001196:	f000 80a5 	beq.w	80012e4 <_dtoa_r+0x47c>
 800119a:	f1ba 0f00 	cmp.w	sl, #0
 800119e:	dd34      	ble.n	800120a <_dtoa_r+0x3a2>
 80011a0:	4a9a      	ldr	r2, [pc, #616]	; (800140c <_dtoa_r+0x5a4>)
 80011a2:	f00a 030f 	and.w	r3, sl, #15
 80011a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80011aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011ae:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80011b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80011b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80011ba:	d016      	beq.n	80011ea <_dtoa_r+0x382>
 80011bc:	4b94      	ldr	r3, [pc, #592]	; (8001410 <_dtoa_r+0x5a8>)
 80011be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80011c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80011c6:	f7ff fb21 	bl	800080c <__aeabi_ddiv>
 80011ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011ce:	f004 040f 	and.w	r4, r4, #15
 80011d2:	2703      	movs	r7, #3
 80011d4:	4e8e      	ldr	r6, [pc, #568]	; (8001410 <_dtoa_r+0x5a8>)
 80011d6:	b954      	cbnz	r4, 80011ee <_dtoa_r+0x386>
 80011d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80011dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80011e0:	f7ff fb14 	bl	800080c <__aeabi_ddiv>
 80011e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011e8:	e029      	b.n	800123e <_dtoa_r+0x3d6>
 80011ea:	2702      	movs	r7, #2
 80011ec:	e7f2      	b.n	80011d4 <_dtoa_r+0x36c>
 80011ee:	07e1      	lsls	r1, r4, #31
 80011f0:	d508      	bpl.n	8001204 <_dtoa_r+0x39c>
 80011f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80011f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80011fa:	f7ff f9dd 	bl	80005b8 <__aeabi_dmul>
 80011fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001202:	3701      	adds	r7, #1
 8001204:	1064      	asrs	r4, r4, #1
 8001206:	3608      	adds	r6, #8
 8001208:	e7e5      	b.n	80011d6 <_dtoa_r+0x36e>
 800120a:	f000 80a5 	beq.w	8001358 <_dtoa_r+0x4f0>
 800120e:	f1ca 0400 	rsb	r4, sl, #0
 8001212:	4b7e      	ldr	r3, [pc, #504]	; (800140c <_dtoa_r+0x5a4>)
 8001214:	4e7e      	ldr	r6, [pc, #504]	; (8001410 <_dtoa_r+0x5a8>)
 8001216:	f004 020f 	and.w	r2, r4, #15
 800121a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001226:	f7ff f9c7 	bl	80005b8 <__aeabi_dmul>
 800122a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800122e:	1124      	asrs	r4, r4, #4
 8001230:	2300      	movs	r3, #0
 8001232:	2702      	movs	r7, #2
 8001234:	2c00      	cmp	r4, #0
 8001236:	f040 8084 	bne.w	8001342 <_dtoa_r+0x4da>
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1d2      	bne.n	80011e4 <_dtoa_r+0x37c>
 800123e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 808b 	beq.w	800135c <_dtoa_r+0x4f4>
 8001246:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800124a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800124e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001252:	4b70      	ldr	r3, [pc, #448]	; (8001414 <_dtoa_r+0x5ac>)
 8001254:	2200      	movs	r2, #0
 8001256:	f7ff fc3b 	bl	8000ad0 <__aeabi_dcmplt>
 800125a:	2800      	cmp	r0, #0
 800125c:	d07e      	beq.n	800135c <_dtoa_r+0x4f4>
 800125e:	9b08      	ldr	r3, [sp, #32]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d07b      	beq.n	800135c <_dtoa_r+0x4f4>
 8001264:	f1b9 0f00 	cmp.w	r9, #0
 8001268:	dd38      	ble.n	80012dc <_dtoa_r+0x474>
 800126a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800126e:	4b6a      	ldr	r3, [pc, #424]	; (8001418 <_dtoa_r+0x5b0>)
 8001270:	2200      	movs	r2, #0
 8001272:	f7ff f9a1 	bl	80005b8 <__aeabi_dmul>
 8001276:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800127a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800127e:	3701      	adds	r7, #1
 8001280:	464c      	mov	r4, r9
 8001282:	4638      	mov	r0, r7
 8001284:	f7ff f92e 	bl	80004e4 <__aeabi_i2d>
 8001288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800128c:	f7ff f994 	bl	80005b8 <__aeabi_dmul>
 8001290:	4b62      	ldr	r3, [pc, #392]	; (800141c <_dtoa_r+0x5b4>)
 8001292:	2200      	movs	r2, #0
 8001294:	f7fe ffda 	bl	800024c <__adddf3>
 8001298:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800129c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80012a0:	9611      	str	r6, [sp, #68]	; 0x44
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d15d      	bne.n	8001362 <_dtoa_r+0x4fa>
 80012a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012aa:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <_dtoa_r+0x5b8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f7fe ffcb 	bl	8000248 <__aeabi_dsub>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80012bc:	4633      	mov	r3, r6
 80012be:	f7ff fc25 	bl	8000b0c <__aeabi_dcmpgt>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	f040 829c 	bne.w	8001800 <_dtoa_r+0x998>
 80012c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80012ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80012d2:	f7ff fbfd 	bl	8000ad0 <__aeabi_dcmplt>
 80012d6:	2800      	cmp	r0, #0
 80012d8:	f040 8290 	bne.w	80017fc <_dtoa_r+0x994>
 80012dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80012e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80012e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f2c0 8152 	blt.w	8001590 <_dtoa_r+0x728>
 80012ec:	f1ba 0f0e 	cmp.w	sl, #14
 80012f0:	f300 814e 	bgt.w	8001590 <_dtoa_r+0x728>
 80012f4:	4b45      	ldr	r3, [pc, #276]	; (800140c <_dtoa_r+0x5a4>)
 80012f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80012fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8001302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001304:	2b00      	cmp	r3, #0
 8001306:	f280 80db 	bge.w	80014c0 <_dtoa_r+0x658>
 800130a:	9b08      	ldr	r3, [sp, #32]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f300 80d7 	bgt.w	80014c0 <_dtoa_r+0x658>
 8001312:	f040 8272 	bne.w	80017fa <_dtoa_r+0x992>
 8001316:	4b42      	ldr	r3, [pc, #264]	; (8001420 <_dtoa_r+0x5b8>)
 8001318:	2200      	movs	r2, #0
 800131a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800131e:	f7ff f94b 	bl	80005b8 <__aeabi_dmul>
 8001322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001326:	f7ff fbe7 	bl	8000af8 <__aeabi_dcmpge>
 800132a:	9c08      	ldr	r4, [sp, #32]
 800132c:	4626      	mov	r6, r4
 800132e:	2800      	cmp	r0, #0
 8001330:	f040 8248 	bne.w	80017c4 <_dtoa_r+0x95c>
 8001334:	9f03      	ldr	r7, [sp, #12]
 8001336:	2331      	movs	r3, #49	; 0x31
 8001338:	f807 3b01 	strb.w	r3, [r7], #1
 800133c:	f10a 0a01 	add.w	sl, sl, #1
 8001340:	e244      	b.n	80017cc <_dtoa_r+0x964>
 8001342:	07e2      	lsls	r2, r4, #31
 8001344:	d505      	bpl.n	8001352 <_dtoa_r+0x4ea>
 8001346:	e9d6 2300 	ldrd	r2, r3, [r6]
 800134a:	f7ff f935 	bl	80005b8 <__aeabi_dmul>
 800134e:	3701      	adds	r7, #1
 8001350:	2301      	movs	r3, #1
 8001352:	1064      	asrs	r4, r4, #1
 8001354:	3608      	adds	r6, #8
 8001356:	e76d      	b.n	8001234 <_dtoa_r+0x3cc>
 8001358:	2702      	movs	r7, #2
 800135a:	e770      	b.n	800123e <_dtoa_r+0x3d6>
 800135c:	9c08      	ldr	r4, [sp, #32]
 800135e:	46d0      	mov	r8, sl
 8001360:	e78f      	b.n	8001282 <_dtoa_r+0x41a>
 8001362:	9903      	ldr	r1, [sp, #12]
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <_dtoa_r+0x5a4>)
 8001366:	4421      	add	r1, r4
 8001368:	9112      	str	r1, [sp, #72]	; 0x48
 800136a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800136c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001370:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8001374:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001378:	2900      	cmp	r1, #0
 800137a:	d055      	beq.n	8001428 <_dtoa_r+0x5c0>
 800137c:	4929      	ldr	r1, [pc, #164]	; (8001424 <_dtoa_r+0x5bc>)
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff fa44 	bl	800080c <__aeabi_ddiv>
 8001384:	463b      	mov	r3, r7
 8001386:	4632      	mov	r2, r6
 8001388:	f7fe ff5e 	bl	8000248 <__aeabi_dsub>
 800138c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001390:	9f03      	ldr	r7, [sp, #12]
 8001392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001396:	f7ff fbd9 	bl	8000b4c <__aeabi_d2iz>
 800139a:	4604      	mov	r4, r0
 800139c:	f7ff f8a2 	bl	80004e4 <__aeabi_i2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80013a8:	f7fe ff4e 	bl	8000248 <__aeabi_dsub>
 80013ac:	3430      	adds	r4, #48	; 0x30
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013b6:	f807 4b01 	strb.w	r4, [r7], #1
 80013ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80013be:	f7ff fb87 	bl	8000ad0 <__aeabi_dcmplt>
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d174      	bne.n	80014b0 <_dtoa_r+0x648>
 80013c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80013ca:	4912      	ldr	r1, [pc, #72]	; (8001414 <_dtoa_r+0x5ac>)
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7fe ff3b 	bl	8000248 <__aeabi_dsub>
 80013d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80013d6:	f7ff fb7b 	bl	8000ad0 <__aeabi_dcmplt>
 80013da:	2800      	cmp	r0, #0
 80013dc:	f040 80b7 	bne.w	800154e <_dtoa_r+0x6e6>
 80013e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80013e2:	429f      	cmp	r7, r3
 80013e4:	f43f af7a 	beq.w	80012dc <_dtoa_r+0x474>
 80013e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <_dtoa_r+0x5b0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	f7ff f8e2 	bl	80005b8 <__aeabi_dmul>
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_dtoa_r+0x5b0>)
 80013f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80013fa:	2200      	movs	r2, #0
 80013fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001400:	f7ff f8da 	bl	80005b8 <__aeabi_dmul>
 8001404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001408:	e7c3      	b.n	8001392 <_dtoa_r+0x52a>
 800140a:	bf00      	nop
 800140c:	08012148 	.word	0x08012148
 8001410:	08012120 	.word	0x08012120
 8001414:	3ff00000 	.word	0x3ff00000
 8001418:	40240000 	.word	0x40240000
 800141c:	401c0000 	.word	0x401c0000
 8001420:	40140000 	.word	0x40140000
 8001424:	3fe00000 	.word	0x3fe00000
 8001428:	4630      	mov	r0, r6
 800142a:	4639      	mov	r1, r7
 800142c:	f7ff f8c4 	bl	80005b8 <__aeabi_dmul>
 8001430:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001434:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001436:	9c03      	ldr	r4, [sp, #12]
 8001438:	9314      	str	r3, [sp, #80]	; 0x50
 800143a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800143e:	f7ff fb85 	bl	8000b4c <__aeabi_d2iz>
 8001442:	9015      	str	r0, [sp, #84]	; 0x54
 8001444:	f7ff f84e 	bl	80004e4 <__aeabi_i2d>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001450:	f7fe fefa 	bl	8000248 <__aeabi_dsub>
 8001454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001456:	3330      	adds	r3, #48	; 0x30
 8001458:	f804 3b01 	strb.w	r3, [r4], #1
 800145c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800145e:	429c      	cmp	r4, r3
 8001460:	4606      	mov	r6, r0
 8001462:	460f      	mov	r7, r1
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	d124      	bne.n	80014b4 <_dtoa_r+0x64c>
 800146a:	4ba4      	ldr	r3, [pc, #656]	; (80016fc <_dtoa_r+0x894>)
 800146c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001470:	f7fe feec 	bl	800024c <__adddf3>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4630      	mov	r0, r6
 800147a:	4639      	mov	r1, r7
 800147c:	f7ff fb46 	bl	8000b0c <__aeabi_dcmpgt>
 8001480:	2800      	cmp	r0, #0
 8001482:	d163      	bne.n	800154c <_dtoa_r+0x6e4>
 8001484:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001488:	499c      	ldr	r1, [pc, #624]	; (80016fc <_dtoa_r+0x894>)
 800148a:	2000      	movs	r0, #0
 800148c:	f7fe fedc 	bl	8000248 <__aeabi_dsub>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4630      	mov	r0, r6
 8001496:	4639      	mov	r1, r7
 8001498:	f7ff fb1a 	bl	8000ad0 <__aeabi_dcmplt>
 800149c:	2800      	cmp	r0, #0
 800149e:	f43f af1d 	beq.w	80012dc <_dtoa_r+0x474>
 80014a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80014a4:	1e7b      	subs	r3, r7, #1
 80014a6:	9314      	str	r3, [sp, #80]	; 0x50
 80014a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80014ac:	2b30      	cmp	r3, #48	; 0x30
 80014ae:	d0f8      	beq.n	80014a2 <_dtoa_r+0x63a>
 80014b0:	46c2      	mov	sl, r8
 80014b2:	e03b      	b.n	800152c <_dtoa_r+0x6c4>
 80014b4:	4b92      	ldr	r3, [pc, #584]	; (8001700 <_dtoa_r+0x898>)
 80014b6:	f7ff f87f 	bl	80005b8 <__aeabi_dmul>
 80014ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014be:	e7bc      	b.n	800143a <_dtoa_r+0x5d2>
 80014c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80014c4:	9f03      	ldr	r7, [sp, #12]
 80014c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80014ca:	4640      	mov	r0, r8
 80014cc:	4649      	mov	r1, r9
 80014ce:	f7ff f99d 	bl	800080c <__aeabi_ddiv>
 80014d2:	f7ff fb3b 	bl	8000b4c <__aeabi_d2iz>
 80014d6:	4604      	mov	r4, r0
 80014d8:	f7ff f804 	bl	80004e4 <__aeabi_i2d>
 80014dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80014e0:	f7ff f86a 	bl	80005b8 <__aeabi_dmul>
 80014e4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4640      	mov	r0, r8
 80014ee:	4649      	mov	r1, r9
 80014f0:	f7fe feaa 	bl	8000248 <__aeabi_dsub>
 80014f4:	f807 6b01 	strb.w	r6, [r7], #1
 80014f8:	9e03      	ldr	r6, [sp, #12]
 80014fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80014fe:	1bbe      	subs	r6, r7, r6
 8001500:	45b4      	cmp	ip, r6
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	d136      	bne.n	8001576 <_dtoa_r+0x70e>
 8001508:	f7fe fea0 	bl	800024c <__adddf3>
 800150c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001510:	4680      	mov	r8, r0
 8001512:	4689      	mov	r9, r1
 8001514:	f7ff fafa 	bl	8000b0c <__aeabi_dcmpgt>
 8001518:	bb58      	cbnz	r0, 8001572 <_dtoa_r+0x70a>
 800151a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800151e:	4640      	mov	r0, r8
 8001520:	4649      	mov	r1, r9
 8001522:	f7ff facb 	bl	8000abc <__aeabi_dcmpeq>
 8001526:	b108      	cbz	r0, 800152c <_dtoa_r+0x6c4>
 8001528:	07e1      	lsls	r1, r4, #31
 800152a:	d422      	bmi.n	8001572 <_dtoa_r+0x70a>
 800152c:	4628      	mov	r0, r5
 800152e:	4659      	mov	r1, fp
 8001530:	f00c fb66 	bl	800dc00 <_Bfree>
 8001534:	2300      	movs	r3, #0
 8001536:	703b      	strb	r3, [r7, #0]
 8001538:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800153a:	f10a 0001 	add.w	r0, sl, #1
 800153e:	6018      	str	r0, [r3, #0]
 8001540:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001542:	2b00      	cmp	r3, #0
 8001544:	f43f acdd 	beq.w	8000f02 <_dtoa_r+0x9a>
 8001548:	601f      	str	r7, [r3, #0]
 800154a:	e4da      	b.n	8000f02 <_dtoa_r+0x9a>
 800154c:	4627      	mov	r7, r4
 800154e:	463b      	mov	r3, r7
 8001550:	461f      	mov	r7, r3
 8001552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001556:	2a39      	cmp	r2, #57	; 0x39
 8001558:	d107      	bne.n	800156a <_dtoa_r+0x702>
 800155a:	9a03      	ldr	r2, [sp, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	d1f7      	bne.n	8001550 <_dtoa_r+0x6e8>
 8001560:	9903      	ldr	r1, [sp, #12]
 8001562:	2230      	movs	r2, #48	; 0x30
 8001564:	f108 0801 	add.w	r8, r8, #1
 8001568:	700a      	strb	r2, [r1, #0]
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	3201      	adds	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	e79e      	b.n	80014b0 <_dtoa_r+0x648>
 8001572:	46d0      	mov	r8, sl
 8001574:	e7eb      	b.n	800154e <_dtoa_r+0x6e6>
 8001576:	4b62      	ldr	r3, [pc, #392]	; (8001700 <_dtoa_r+0x898>)
 8001578:	2200      	movs	r2, #0
 800157a:	f7ff f81d 	bl	80005b8 <__aeabi_dmul>
 800157e:	2200      	movs	r2, #0
 8001580:	2300      	movs	r3, #0
 8001582:	4680      	mov	r8, r0
 8001584:	4689      	mov	r9, r1
 8001586:	f7ff fa99 	bl	8000abc <__aeabi_dcmpeq>
 800158a:	2800      	cmp	r0, #0
 800158c:	d09b      	beq.n	80014c6 <_dtoa_r+0x65e>
 800158e:	e7cd      	b.n	800152c <_dtoa_r+0x6c4>
 8001590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001592:	2a00      	cmp	r2, #0
 8001594:	f000 80d0 	beq.w	8001738 <_dtoa_r+0x8d0>
 8001598:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800159a:	2a01      	cmp	r2, #1
 800159c:	f300 80b2 	bgt.w	8001704 <_dtoa_r+0x89c>
 80015a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <_dtoa_r+0x88c>
 80015a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80015ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80015ae:	9f06      	ldr	r7, [sp, #24]
 80015b0:	9a06      	ldr	r2, [sp, #24]
 80015b2:	441a      	add	r2, r3
 80015b4:	9206      	str	r2, [sp, #24]
 80015b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015b8:	2101      	movs	r1, #1
 80015ba:	441a      	add	r2, r3
 80015bc:	4628      	mov	r0, r5
 80015be:	9209      	str	r2, [sp, #36]	; 0x24
 80015c0:	f00c fb86 	bl	800dcd0 <__i2b>
 80015c4:	4606      	mov	r6, r0
 80015c6:	2f00      	cmp	r7, #0
 80015c8:	dd0c      	ble.n	80015e4 <_dtoa_r+0x77c>
 80015ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	dd09      	ble.n	80015e4 <_dtoa_r+0x77c>
 80015d0:	42bb      	cmp	r3, r7
 80015d2:	9a06      	ldr	r2, [sp, #24]
 80015d4:	bfa8      	it	ge
 80015d6:	463b      	movge	r3, r7
 80015d8:	1ad2      	subs	r2, r2, r3
 80015da:	9206      	str	r2, [sp, #24]
 80015dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015de:	1aff      	subs	r7, r7, r3
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	9309      	str	r3, [sp, #36]	; 0x24
 80015e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015e6:	b1f3      	cbz	r3, 8001626 <_dtoa_r+0x7be>
 80015e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80a8 	beq.w	8001740 <_dtoa_r+0x8d8>
 80015f0:	2c00      	cmp	r4, #0
 80015f2:	dd10      	ble.n	8001616 <_dtoa_r+0x7ae>
 80015f4:	4631      	mov	r1, r6
 80015f6:	4622      	mov	r2, r4
 80015f8:	4628      	mov	r0, r5
 80015fa:	f00c fc27 	bl	800de4c <__pow5mult>
 80015fe:	465a      	mov	r2, fp
 8001600:	4601      	mov	r1, r0
 8001602:	4606      	mov	r6, r0
 8001604:	4628      	mov	r0, r5
 8001606:	f00c fb79 	bl	800dcfc <__multiply>
 800160a:	4659      	mov	r1, fp
 800160c:	4680      	mov	r8, r0
 800160e:	4628      	mov	r0, r5
 8001610:	f00c faf6 	bl	800dc00 <_Bfree>
 8001614:	46c3      	mov	fp, r8
 8001616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001618:	1b1a      	subs	r2, r3, r4
 800161a:	d004      	beq.n	8001626 <_dtoa_r+0x7be>
 800161c:	4659      	mov	r1, fp
 800161e:	4628      	mov	r0, r5
 8001620:	f00c fc14 	bl	800de4c <__pow5mult>
 8001624:	4683      	mov	fp, r0
 8001626:	2101      	movs	r1, #1
 8001628:	4628      	mov	r0, r5
 800162a:	f00c fb51 	bl	800dcd0 <__i2b>
 800162e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001630:	2b00      	cmp	r3, #0
 8001632:	4604      	mov	r4, r0
 8001634:	f340 8086 	ble.w	8001744 <_dtoa_r+0x8dc>
 8001638:	461a      	mov	r2, r3
 800163a:	4601      	mov	r1, r0
 800163c:	4628      	mov	r0, r5
 800163e:	f00c fc05 	bl	800de4c <__pow5mult>
 8001642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001644:	2b01      	cmp	r3, #1
 8001646:	4604      	mov	r4, r0
 8001648:	dd7f      	ble.n	800174a <_dtoa_r+0x8e2>
 800164a:	f04f 0800 	mov.w	r8, #0
 800164e:	6923      	ldr	r3, [r4, #16]
 8001650:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001654:	6918      	ldr	r0, [r3, #16]
 8001656:	f010 f843 	bl	80116e0 <__hi0bits>
 800165a:	f1c0 0020 	rsb	r0, r0, #32
 800165e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001660:	4418      	add	r0, r3
 8001662:	f010 001f 	ands.w	r0, r0, #31
 8001666:	f000 8092 	beq.w	800178e <_dtoa_r+0x926>
 800166a:	f1c0 0320 	rsb	r3, r0, #32
 800166e:	2b04      	cmp	r3, #4
 8001670:	f340 808a 	ble.w	8001788 <_dtoa_r+0x920>
 8001674:	f1c0 001c 	rsb	r0, r0, #28
 8001678:	9b06      	ldr	r3, [sp, #24]
 800167a:	4403      	add	r3, r0
 800167c:	9306      	str	r3, [sp, #24]
 800167e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001680:	4403      	add	r3, r0
 8001682:	4407      	add	r7, r0
 8001684:	9309      	str	r3, [sp, #36]	; 0x24
 8001686:	9b06      	ldr	r3, [sp, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	dd05      	ble.n	8001698 <_dtoa_r+0x830>
 800168c:	4659      	mov	r1, fp
 800168e:	461a      	mov	r2, r3
 8001690:	4628      	mov	r0, r5
 8001692:	f00c fc35 	bl	800df00 <__lshift>
 8001696:	4683      	mov	fp, r0
 8001698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800169a:	2b00      	cmp	r3, #0
 800169c:	dd05      	ble.n	80016aa <_dtoa_r+0x842>
 800169e:	4621      	mov	r1, r4
 80016a0:	461a      	mov	r2, r3
 80016a2:	4628      	mov	r0, r5
 80016a4:	f00c fc2c 	bl	800df00 <__lshift>
 80016a8:	4604      	mov	r4, r0
 80016aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d070      	beq.n	8001792 <_dtoa_r+0x92a>
 80016b0:	4621      	mov	r1, r4
 80016b2:	4658      	mov	r0, fp
 80016b4:	f010 f861 	bl	801177a <__mcmp>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	da6a      	bge.n	8001792 <_dtoa_r+0x92a>
 80016bc:	2300      	movs	r3, #0
 80016be:	4659      	mov	r1, fp
 80016c0:	220a      	movs	r2, #10
 80016c2:	4628      	mov	r0, r5
 80016c4:	f00c fabe 	bl	800dc44 <__multadd>
 80016c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80016ce:	4683      	mov	fp, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8194 	beq.w	80019fe <_dtoa_r+0xb96>
 80016d6:	4631      	mov	r1, r6
 80016d8:	2300      	movs	r3, #0
 80016da:	220a      	movs	r2, #10
 80016dc:	4628      	mov	r0, r5
 80016de:	f00c fab1 	bl	800dc44 <__multadd>
 80016e2:	f1b9 0f00 	cmp.w	r9, #0
 80016e6:	4606      	mov	r6, r0
 80016e8:	f300 8093 	bgt.w	8001812 <_dtoa_r+0x9aa>
 80016ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	dc57      	bgt.n	80017a2 <_dtoa_r+0x93a>
 80016f2:	e08e      	b.n	8001812 <_dtoa_r+0x9aa>
 80016f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80016f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80016fa:	e757      	b.n	80015ac <_dtoa_r+0x744>
 80016fc:	3fe00000 	.word	0x3fe00000
 8001700:	40240000 	.word	0x40240000
 8001704:	9b08      	ldr	r3, [sp, #32]
 8001706:	1e5c      	subs	r4, r3, #1
 8001708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800170a:	42a3      	cmp	r3, r4
 800170c:	bfbf      	itttt	lt
 800170e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8001710:	940a      	strlt	r4, [sp, #40]	; 0x28
 8001712:	1ae2      	sublt	r2, r4, r3
 8001714:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8001716:	bfb6      	itet	lt
 8001718:	189b      	addlt	r3, r3, r2
 800171a:	1b1c      	subge	r4, r3, r4
 800171c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800171e:	9b08      	ldr	r3, [sp, #32]
 8001720:	bfb8      	it	lt
 8001722:	2400      	movlt	r4, #0
 8001724:	2b00      	cmp	r3, #0
 8001726:	bfb9      	ittee	lt
 8001728:	9b06      	ldrlt	r3, [sp, #24]
 800172a:	9a08      	ldrlt	r2, [sp, #32]
 800172c:	9f06      	ldrge	r7, [sp, #24]
 800172e:	9b08      	ldrge	r3, [sp, #32]
 8001730:	bfbc      	itt	lt
 8001732:	1a9f      	sublt	r7, r3, r2
 8001734:	2300      	movlt	r3, #0
 8001736:	e73b      	b.n	80015b0 <_dtoa_r+0x748>
 8001738:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800173a:	9f06      	ldr	r7, [sp, #24]
 800173c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800173e:	e742      	b.n	80015c6 <_dtoa_r+0x75e>
 8001740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001742:	e76b      	b.n	800161c <_dtoa_r+0x7b4>
 8001744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001746:	2b01      	cmp	r3, #1
 8001748:	dc19      	bgt.n	800177e <_dtoa_r+0x916>
 800174a:	9b04      	ldr	r3, [sp, #16]
 800174c:	b9bb      	cbnz	r3, 800177e <_dtoa_r+0x916>
 800174e:	9b05      	ldr	r3, [sp, #20]
 8001750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001754:	b99b      	cbnz	r3, 800177e <_dtoa_r+0x916>
 8001756:	9b05      	ldr	r3, [sp, #20]
 8001758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800175c:	0d1b      	lsrs	r3, r3, #20
 800175e:	051b      	lsls	r3, r3, #20
 8001760:	b183      	cbz	r3, 8001784 <_dtoa_r+0x91c>
 8001762:	9b06      	ldr	r3, [sp, #24]
 8001764:	3301      	adds	r3, #1
 8001766:	9306      	str	r3, [sp, #24]
 8001768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800176a:	3301      	adds	r3, #1
 800176c:	9309      	str	r3, [sp, #36]	; 0x24
 800176e:	f04f 0801 	mov.w	r8, #1
 8001772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001774:	2b00      	cmp	r3, #0
 8001776:	f47f af6a 	bne.w	800164e <_dtoa_r+0x7e6>
 800177a:	2001      	movs	r0, #1
 800177c:	e76f      	b.n	800165e <_dtoa_r+0x7f6>
 800177e:	f04f 0800 	mov.w	r8, #0
 8001782:	e7f6      	b.n	8001772 <_dtoa_r+0x90a>
 8001784:	4698      	mov	r8, r3
 8001786:	e7f4      	b.n	8001772 <_dtoa_r+0x90a>
 8001788:	f43f af7d 	beq.w	8001686 <_dtoa_r+0x81e>
 800178c:	4618      	mov	r0, r3
 800178e:	301c      	adds	r0, #28
 8001790:	e772      	b.n	8001678 <_dtoa_r+0x810>
 8001792:	9b08      	ldr	r3, [sp, #32]
 8001794:	2b00      	cmp	r3, #0
 8001796:	dc36      	bgt.n	8001806 <_dtoa_r+0x99e>
 8001798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800179a:	2b02      	cmp	r3, #2
 800179c:	dd33      	ble.n	8001806 <_dtoa_r+0x99e>
 800179e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80017a2:	f1b9 0f00 	cmp.w	r9, #0
 80017a6:	d10d      	bne.n	80017c4 <_dtoa_r+0x95c>
 80017a8:	4621      	mov	r1, r4
 80017aa:	464b      	mov	r3, r9
 80017ac:	2205      	movs	r2, #5
 80017ae:	4628      	mov	r0, r5
 80017b0:	f00c fa48 	bl	800dc44 <__multadd>
 80017b4:	4601      	mov	r1, r0
 80017b6:	4604      	mov	r4, r0
 80017b8:	4658      	mov	r0, fp
 80017ba:	f00f ffde 	bl	801177a <__mcmp>
 80017be:	2800      	cmp	r0, #0
 80017c0:	f73f adb8 	bgt.w	8001334 <_dtoa_r+0x4cc>
 80017c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80017c6:	9f03      	ldr	r7, [sp, #12]
 80017c8:	ea6f 0a03 	mvn.w	sl, r3
 80017cc:	f04f 0800 	mov.w	r8, #0
 80017d0:	4621      	mov	r1, r4
 80017d2:	4628      	mov	r0, r5
 80017d4:	f00c fa14 	bl	800dc00 <_Bfree>
 80017d8:	2e00      	cmp	r6, #0
 80017da:	f43f aea7 	beq.w	800152c <_dtoa_r+0x6c4>
 80017de:	f1b8 0f00 	cmp.w	r8, #0
 80017e2:	d005      	beq.n	80017f0 <_dtoa_r+0x988>
 80017e4:	45b0      	cmp	r8, r6
 80017e6:	d003      	beq.n	80017f0 <_dtoa_r+0x988>
 80017e8:	4641      	mov	r1, r8
 80017ea:	4628      	mov	r0, r5
 80017ec:	f00c fa08 	bl	800dc00 <_Bfree>
 80017f0:	4631      	mov	r1, r6
 80017f2:	4628      	mov	r0, r5
 80017f4:	f00c fa04 	bl	800dc00 <_Bfree>
 80017f8:	e698      	b.n	800152c <_dtoa_r+0x6c4>
 80017fa:	2400      	movs	r4, #0
 80017fc:	4626      	mov	r6, r4
 80017fe:	e7e1      	b.n	80017c4 <_dtoa_r+0x95c>
 8001800:	46c2      	mov	sl, r8
 8001802:	4626      	mov	r6, r4
 8001804:	e596      	b.n	8001334 <_dtoa_r+0x4cc>
 8001806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80fd 	beq.w	8001a0c <_dtoa_r+0xba4>
 8001812:	2f00      	cmp	r7, #0
 8001814:	dd05      	ble.n	8001822 <_dtoa_r+0x9ba>
 8001816:	4631      	mov	r1, r6
 8001818:	463a      	mov	r2, r7
 800181a:	4628      	mov	r0, r5
 800181c:	f00c fb70 	bl	800df00 <__lshift>
 8001820:	4606      	mov	r6, r0
 8001822:	f1b8 0f00 	cmp.w	r8, #0
 8001826:	d05c      	beq.n	80018e2 <_dtoa_r+0xa7a>
 8001828:	6871      	ldr	r1, [r6, #4]
 800182a:	4628      	mov	r0, r5
 800182c:	f00c f9a8 	bl	800db80 <_Balloc>
 8001830:	4607      	mov	r7, r0
 8001832:	b928      	cbnz	r0, 8001840 <_dtoa_r+0x9d8>
 8001834:	4b80      	ldr	r3, [pc, #512]	; (8001a38 <_dtoa_r+0xbd0>)
 8001836:	4602      	mov	r2, r0
 8001838:	f240 21ea 	movw	r1, #746	; 0x2ea
 800183c:	f7ff bb28 	b.w	8000e90 <_dtoa_r+0x28>
 8001840:	6932      	ldr	r2, [r6, #16]
 8001842:	3202      	adds	r2, #2
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	f106 010c 	add.w	r1, r6, #12
 800184a:	300c      	adds	r0, #12
 800184c:	f00f fd27 	bl	801129e <memcpy>
 8001850:	2201      	movs	r2, #1
 8001852:	4639      	mov	r1, r7
 8001854:	4628      	mov	r0, r5
 8001856:	f00c fb53 	bl	800df00 <__lshift>
 800185a:	9b03      	ldr	r3, [sp, #12]
 800185c:	3301      	adds	r3, #1
 800185e:	9308      	str	r3, [sp, #32]
 8001860:	9b03      	ldr	r3, [sp, #12]
 8001862:	444b      	add	r3, r9
 8001864:	930a      	str	r3, [sp, #40]	; 0x28
 8001866:	9b04      	ldr	r3, [sp, #16]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	46b0      	mov	r8, r6
 800186e:	9309      	str	r3, [sp, #36]	; 0x24
 8001870:	4606      	mov	r6, r0
 8001872:	9b08      	ldr	r3, [sp, #32]
 8001874:	4621      	mov	r1, r4
 8001876:	3b01      	subs	r3, #1
 8001878:	4658      	mov	r0, fp
 800187a:	9304      	str	r3, [sp, #16]
 800187c:	f00f fea9 	bl	80115d2 <quorem>
 8001880:	4603      	mov	r3, r0
 8001882:	3330      	adds	r3, #48	; 0x30
 8001884:	9006      	str	r0, [sp, #24]
 8001886:	4641      	mov	r1, r8
 8001888:	4658      	mov	r0, fp
 800188a:	930b      	str	r3, [sp, #44]	; 0x2c
 800188c:	f00f ff75 	bl	801177a <__mcmp>
 8001890:	4632      	mov	r2, r6
 8001892:	4681      	mov	r9, r0
 8001894:	4621      	mov	r1, r4
 8001896:	4628      	mov	r0, r5
 8001898:	f00c fba2 	bl	800dfe0 <__mdiff>
 800189c:	68c2      	ldr	r2, [r0, #12]
 800189e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018a0:	4607      	mov	r7, r0
 80018a2:	bb02      	cbnz	r2, 80018e6 <_dtoa_r+0xa7e>
 80018a4:	4601      	mov	r1, r0
 80018a6:	4658      	mov	r0, fp
 80018a8:	f00f ff67 	bl	801177a <__mcmp>
 80018ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018ae:	4602      	mov	r2, r0
 80018b0:	4639      	mov	r1, r7
 80018b2:	4628      	mov	r0, r5
 80018b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80018b8:	f00c f9a2 	bl	800dc00 <_Bfree>
 80018bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80018be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80018c0:	9f08      	ldr	r7, [sp, #32]
 80018c2:	ea43 0102 	orr.w	r1, r3, r2
 80018c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018c8:	430b      	orrs	r3, r1
 80018ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018cc:	d10d      	bne.n	80018ea <_dtoa_r+0xa82>
 80018ce:	2b39      	cmp	r3, #57	; 0x39
 80018d0:	d029      	beq.n	8001926 <_dtoa_r+0xabe>
 80018d2:	f1b9 0f00 	cmp.w	r9, #0
 80018d6:	dd01      	ble.n	80018dc <_dtoa_r+0xa74>
 80018d8:	9b06      	ldr	r3, [sp, #24]
 80018da:	3331      	adds	r3, #49	; 0x31
 80018dc:	9a04      	ldr	r2, [sp, #16]
 80018de:	7013      	strb	r3, [r2, #0]
 80018e0:	e776      	b.n	80017d0 <_dtoa_r+0x968>
 80018e2:	4630      	mov	r0, r6
 80018e4:	e7b9      	b.n	800185a <_dtoa_r+0x9f2>
 80018e6:	2201      	movs	r2, #1
 80018e8:	e7e2      	b.n	80018b0 <_dtoa_r+0xa48>
 80018ea:	f1b9 0f00 	cmp.w	r9, #0
 80018ee:	db06      	blt.n	80018fe <_dtoa_r+0xa96>
 80018f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80018f2:	ea41 0909 	orr.w	r9, r1, r9
 80018f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80018f8:	ea59 0101 	orrs.w	r1, r9, r1
 80018fc:	d120      	bne.n	8001940 <_dtoa_r+0xad8>
 80018fe:	2a00      	cmp	r2, #0
 8001900:	ddec      	ble.n	80018dc <_dtoa_r+0xa74>
 8001902:	4659      	mov	r1, fp
 8001904:	2201      	movs	r2, #1
 8001906:	4628      	mov	r0, r5
 8001908:	9308      	str	r3, [sp, #32]
 800190a:	f00c faf9 	bl	800df00 <__lshift>
 800190e:	4621      	mov	r1, r4
 8001910:	4683      	mov	fp, r0
 8001912:	f00f ff32 	bl	801177a <__mcmp>
 8001916:	2800      	cmp	r0, #0
 8001918:	9b08      	ldr	r3, [sp, #32]
 800191a:	dc02      	bgt.n	8001922 <_dtoa_r+0xaba>
 800191c:	d1de      	bne.n	80018dc <_dtoa_r+0xa74>
 800191e:	07da      	lsls	r2, r3, #31
 8001920:	d5dc      	bpl.n	80018dc <_dtoa_r+0xa74>
 8001922:	2b39      	cmp	r3, #57	; 0x39
 8001924:	d1d8      	bne.n	80018d8 <_dtoa_r+0xa70>
 8001926:	9a04      	ldr	r2, [sp, #16]
 8001928:	2339      	movs	r3, #57	; 0x39
 800192a:	7013      	strb	r3, [r2, #0]
 800192c:	463b      	mov	r3, r7
 800192e:	461f      	mov	r7, r3
 8001930:	3b01      	subs	r3, #1
 8001932:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8001936:	2a39      	cmp	r2, #57	; 0x39
 8001938:	d050      	beq.n	80019dc <_dtoa_r+0xb74>
 800193a:	3201      	adds	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	e747      	b.n	80017d0 <_dtoa_r+0x968>
 8001940:	2a00      	cmp	r2, #0
 8001942:	dd03      	ble.n	800194c <_dtoa_r+0xae4>
 8001944:	2b39      	cmp	r3, #57	; 0x39
 8001946:	d0ee      	beq.n	8001926 <_dtoa_r+0xabe>
 8001948:	3301      	adds	r3, #1
 800194a:	e7c7      	b.n	80018dc <_dtoa_r+0xa74>
 800194c:	9a08      	ldr	r2, [sp, #32]
 800194e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001950:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001954:	428a      	cmp	r2, r1
 8001956:	d02a      	beq.n	80019ae <_dtoa_r+0xb46>
 8001958:	4659      	mov	r1, fp
 800195a:	2300      	movs	r3, #0
 800195c:	220a      	movs	r2, #10
 800195e:	4628      	mov	r0, r5
 8001960:	f00c f970 	bl	800dc44 <__multadd>
 8001964:	45b0      	cmp	r8, r6
 8001966:	4683      	mov	fp, r0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	f04f 020a 	mov.w	r2, #10
 8001970:	4641      	mov	r1, r8
 8001972:	4628      	mov	r0, r5
 8001974:	d107      	bne.n	8001986 <_dtoa_r+0xb1e>
 8001976:	f00c f965 	bl	800dc44 <__multadd>
 800197a:	4680      	mov	r8, r0
 800197c:	4606      	mov	r6, r0
 800197e:	9b08      	ldr	r3, [sp, #32]
 8001980:	3301      	adds	r3, #1
 8001982:	9308      	str	r3, [sp, #32]
 8001984:	e775      	b.n	8001872 <_dtoa_r+0xa0a>
 8001986:	f00c f95d 	bl	800dc44 <__multadd>
 800198a:	4631      	mov	r1, r6
 800198c:	4680      	mov	r8, r0
 800198e:	2300      	movs	r3, #0
 8001990:	220a      	movs	r2, #10
 8001992:	4628      	mov	r0, r5
 8001994:	f00c f956 	bl	800dc44 <__multadd>
 8001998:	4606      	mov	r6, r0
 800199a:	e7f0      	b.n	800197e <_dtoa_r+0xb16>
 800199c:	f1b9 0f00 	cmp.w	r9, #0
 80019a0:	9a03      	ldr	r2, [sp, #12]
 80019a2:	bfcc      	ite	gt
 80019a4:	464f      	movgt	r7, r9
 80019a6:	2701      	movle	r7, #1
 80019a8:	4417      	add	r7, r2
 80019aa:	f04f 0800 	mov.w	r8, #0
 80019ae:	4659      	mov	r1, fp
 80019b0:	2201      	movs	r2, #1
 80019b2:	4628      	mov	r0, r5
 80019b4:	9308      	str	r3, [sp, #32]
 80019b6:	f00c faa3 	bl	800df00 <__lshift>
 80019ba:	4621      	mov	r1, r4
 80019bc:	4683      	mov	fp, r0
 80019be:	f00f fedc 	bl	801177a <__mcmp>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	dcb2      	bgt.n	800192c <_dtoa_r+0xac4>
 80019c6:	d102      	bne.n	80019ce <_dtoa_r+0xb66>
 80019c8:	9b08      	ldr	r3, [sp, #32]
 80019ca:	07db      	lsls	r3, r3, #31
 80019cc:	d4ae      	bmi.n	800192c <_dtoa_r+0xac4>
 80019ce:	463b      	mov	r3, r7
 80019d0:	461f      	mov	r7, r3
 80019d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80019d6:	2a30      	cmp	r2, #48	; 0x30
 80019d8:	d0fa      	beq.n	80019d0 <_dtoa_r+0xb68>
 80019da:	e6f9      	b.n	80017d0 <_dtoa_r+0x968>
 80019dc:	9a03      	ldr	r2, [sp, #12]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d1a5      	bne.n	800192e <_dtoa_r+0xac6>
 80019e2:	f10a 0a01 	add.w	sl, sl, #1
 80019e6:	2331      	movs	r3, #49	; 0x31
 80019e8:	e779      	b.n	80018de <_dtoa_r+0xa76>
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <_dtoa_r+0xbd4>)
 80019ec:	f7ff baa7 	b.w	8000f3e <_dtoa_r+0xd6>
 80019f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f47f aa80 	bne.w	8000ef8 <_dtoa_r+0x90>
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <_dtoa_r+0xbd8>)
 80019fa:	f7ff baa0 	b.w	8000f3e <_dtoa_r+0xd6>
 80019fe:	f1b9 0f00 	cmp.w	r9, #0
 8001a02:	dc03      	bgt.n	8001a0c <_dtoa_r+0xba4>
 8001a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	f73f aecb 	bgt.w	80017a2 <_dtoa_r+0x93a>
 8001a0c:	9f03      	ldr	r7, [sp, #12]
 8001a0e:	4621      	mov	r1, r4
 8001a10:	4658      	mov	r0, fp
 8001a12:	f00f fdde 	bl	80115d2 <quorem>
 8001a16:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001a1a:	f807 3b01 	strb.w	r3, [r7], #1
 8001a1e:	9a03      	ldr	r2, [sp, #12]
 8001a20:	1aba      	subs	r2, r7, r2
 8001a22:	4591      	cmp	r9, r2
 8001a24:	ddba      	ble.n	800199c <_dtoa_r+0xb34>
 8001a26:	4659      	mov	r1, fp
 8001a28:	2300      	movs	r3, #0
 8001a2a:	220a      	movs	r2, #10
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f00c f909 	bl	800dc44 <__multadd>
 8001a32:	4683      	mov	fp, r0
 8001a34:	e7eb      	b.n	8001a0e <_dtoa_r+0xba6>
 8001a36:	bf00      	nop
 8001a38:	08013d8f 	.word	0x08013d8f
 8001a3c:	08013c55 	.word	0x08013c55
 8001a40:	08013d28 	.word	0x08013d28

08001a44 <lora_receive_cb>:
        }
    }
}

void lora_receive_cb(const struct device *dev, uint8_t *data, uint16_t size, int16_t rssi, int8_t snr)
{
 8001a44:	b510      	push	{r4, lr}
 8001a46:	4604      	mov	r4, r0
 8001a48:	4608      	mov	r0, r1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8001a4a:	490b      	ldr	r1, [pc, #44]	; (8001a78 <lora_receive_cb+0x34>)
 8001a4c:	f00f fc27 	bl	801129e <memcpy>
 * @return 0 when reception successfully setup, negative on error
 */
static inline int lora_recv_async(const struct device *dev, lora_recv_cb cb,
  lora_recv_error_timeout_cb error_timeout_cb)
{
	const struct lora_driver_api *api =
 8001a50:	68a3      	ldr	r3, [r4, #8]
		(const struct lora_driver_api *)dev->api;

	return api->recv_async(dev, cb, error_timeout_cb);
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	2200      	movs	r2, #0
 8001a56:	4611      	mov	r1, r2
 8001a58:	4620      	mov	r0, r4
 8001a5a:	4798      	blx	r3
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <lora_receive_cb+0x38>)
 8001a5e:	2204      	movs	r2, #4
 8001a60:	f3bf 8f5b 	dmb	ish
 8001a64:	e853 1f00 	ldrex	r1, [r3]
 8001a68:	e843 2000 	strex	r0, r2, [r3]
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d1f9      	bne.n	8001a64 <lora_receive_cb+0x20>
 8001a70:	f3bf 8f5b 	dmb	ish
    memcpy(data, radio_buf_tx, size);
    lora_recv_async(dev, NULL, NULL);
    atomic_set(&atomic_cur_state, STATE_TRANSMIT);
}
 8001a74:	bd10      	pop	{r4, pc}
 8001a76:	bf00      	nop
 8001a78:	20000e08 	.word	0x20000e08
 8001a7c:	200002a0 	.word	0x200002a0

08001a80 <print_modem_cfg>:
    }
}


void print_modem_cfg(const struct device *dev, struct lora_modem_config *cfg)
{
 8001a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a82:	b083      	sub	sp, #12
 8001a84:	4604      	mov	r4, r0
 8001a86:	460d      	mov	r5, r1
    static uint8_t cfg_buf[UART_TX_BUF_LEN] = {0};

    sprintf(cfg_buf, "Current modem configuration:\n");
 8001a88:	4e9d      	ldr	r6, [pc, #628]	; (8001d00 <print_modem_cfg+0x280>)
 8001a8a:	4f9e      	ldr	r7, [pc, #632]	; (8001d04 <print_modem_cfg+0x284>)
 8001a8c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001a8e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001a90:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8001a94:	c607      	stmia	r6!, {r0, r1, r2}
 8001a96:	8033      	strh	r3, [r6, #0]
void lora_rx_error_timeout_cb(void);

static inline void send_to_terminal(const struct device *dev, uint8_t *buf_tx)
{
    /* Set atomic_uart_tx_done in false */
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001a98:	e006      	b.n	8001aa8 <print_modem_cfg+0x28>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001a9a:	f3bf 8f5b 	dmb	ish
 8001a9e:	d111      	bne.n	8001ac4 <print_modem_cfg+0x44>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8001aa0:	200a      	movs	r0, #10
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	f00a fdac 	bl	800c600 <z_impl_k_sleep>
 8001aa8:	4b97      	ldr	r3, [pc, #604]	; (8001d08 <print_modem_cfg+0x288>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f3bf 8f5b 	dmb	ish
 8001ab0:	e853 cf00 	ldrex	ip, [r3]
 8001ab4:	f1bc 0f01 	cmp.w	ip, #1
 8001ab8:	d1ef      	bne.n	8001a9a <print_modem_cfg+0x1a>
 8001aba:	e843 2100 	strex	r1, r2, [r3]
 8001abe:	2900      	cmp	r1, #0
 8001ac0:	d0eb      	beq.n	8001a9a <print_modem_cfg+0x1a>
 8001ac2:	e7f5      	b.n	8001ab0 <print_modem_cfg+0x30>
        k_sleep(K_MSEC(1));
    }
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001ac4:	4e8e      	ldr	r6, [pc, #568]	; (8001d00 <print_modem_cfg+0x280>)
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f7ff f9c5 	bl	8000e56 <strlen>
 8001acc:	4602      	mov	r2, r0
static inline int z_impl_uart_tx(const struct device *dev, const uint8_t *buf,
				 size_t len, int32_t timeout)

{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
 8001ace:	68a3      	ldr	r3, [r4, #8]
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
 8001ad0:	685f      	ldr	r7, [r3, #4]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	4631      	mov	r1, r6
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	47b8      	blx	r7
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001ada:	f3bf 8f5b 	dmb	ish
 8001ade:	4b8a      	ldr	r3, [pc, #552]	; (8001d08 <print_modem_cfg+0x288>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8001ae6:	b923      	cbnz	r3, 8001af2 <print_modem_cfg+0x72>
 8001ae8:	2064      	movs	r0, #100	; 0x64
 8001aea:	2100      	movs	r1, #0
 8001aec:	f00a fd88 	bl	800c600 <z_impl_k_sleep>
 8001af0:	e7f3      	b.n	8001ada <print_modem_cfg+0x5a>
    send_to_terminal(dev, cfg_buf);

    sprintf(cfg_buf, "Frequency: %lu kHz\n", (cfg->frequency)/1000);
 8001af2:	682b      	ldr	r3, [r5, #0]
 8001af4:	4a85      	ldr	r2, [pc, #532]	; (8001d0c <print_modem_cfg+0x28c>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	099b      	lsrs	r3, r3, #6
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	4b84      	ldr	r3, [pc, #528]	; (8001d10 <print_modem_cfg+0x290>)
 8001b00:	2240      	movs	r2, #64	; 0x40
 8001b02:	2100      	movs	r1, #0
 8001b04:	487e      	ldr	r0, [pc, #504]	; (8001d00 <print_modem_cfg+0x280>)
 8001b06:	f00f fceb 	bl	80114e0 <__sprintf_chk>
static inline void send_to_terminal(const struct device *dev, uint8_t *buf_tx)
 8001b0a:	e006      	b.n	8001b1a <print_modem_cfg+0x9a>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001b0c:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001b10:	d110      	bne.n	8001b34 <print_modem_cfg+0xb4>
 8001b12:	200a      	movs	r0, #10
 8001b14:	2100      	movs	r1, #0
 8001b16:	f00a fd73 	bl	800c600 <z_impl_k_sleep>
 8001b1a:	4b7b      	ldr	r3, [pc, #492]	; (8001d08 <print_modem_cfg+0x288>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f3bf 8f5b 	dmb	ish
 8001b22:	e853 1f00 	ldrex	r1, [r3]
 8001b26:	2901      	cmp	r1, #1
 8001b28:	d1f0      	bne.n	8001b0c <print_modem_cfg+0x8c>
 8001b2a:	e843 2000 	strex	r0, r2, [r3]
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	d0ec      	beq.n	8001b0c <print_modem_cfg+0x8c>
 8001b32:	e7f6      	b.n	8001b22 <print_modem_cfg+0xa2>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001b34:	4e72      	ldr	r6, [pc, #456]	; (8001d00 <print_modem_cfg+0x280>)
 8001b36:	4630      	mov	r0, r6
 8001b38:	f7ff f98d 	bl	8000e56 <strlen>
 8001b3c:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8001b3e:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8001b40:	685f      	ldr	r7, [r3, #4]
 8001b42:	2300      	movs	r3, #0
 8001b44:	4631      	mov	r1, r6
 8001b46:	4620      	mov	r0, r4
 8001b48:	47b8      	blx	r7
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001b4a:	f3bf 8f5b 	dmb	ish
 8001b4e:	4b6e      	ldr	r3, [pc, #440]	; (8001d08 <print_modem_cfg+0x288>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8001b56:	b923      	cbnz	r3, 8001b62 <print_modem_cfg+0xe2>
 8001b58:	2064      	movs	r0, #100	; 0x64
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f00a fd50 	bl	800c600 <z_impl_k_sleep>
 8001b60:	e7f3      	b.n	8001b4a <print_modem_cfg+0xca>
    send_to_terminal(dev, cfg_buf);

    switch (cfg->bandwidth) {
 8001b62:	792b      	ldrb	r3, [r5, #4]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d00b      	beq.n	8001b80 <print_modem_cfg+0x100>
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d012      	beq.n	8001b92 <print_modem_cfg+0x112>
 8001b6c:	bb13      	cbnz	r3, 8001bb4 <print_modem_cfg+0x134>
        case BW_125_KHZ:
            sprintf(cfg_buf, "Bandwidth: %u kHz\n", 125);
 8001b6e:	237d      	movs	r3, #125	; 0x7d
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	4b68      	ldr	r3, [pc, #416]	; (8001d14 <print_modem_cfg+0x294>)
 8001b74:	2240      	movs	r2, #64	; 0x40
 8001b76:	2100      	movs	r1, #0
 8001b78:	4861      	ldr	r0, [pc, #388]	; (8001d00 <print_modem_cfg+0x280>)
 8001b7a:	f00f fcb1 	bl	80114e0 <__sprintf_chk>
            break;
 8001b7e:	e019      	b.n	8001bb4 <print_modem_cfg+0x134>
        case BW_250_KHZ:
            sprintf(cfg_buf, "Bandwidth: %u kHz\n", 250);
 8001b80:	23fa      	movs	r3, #250	; 0xfa
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <print_modem_cfg+0x294>)
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	2100      	movs	r1, #0
 8001b8a:	485d      	ldr	r0, [pc, #372]	; (8001d00 <print_modem_cfg+0x280>)
 8001b8c:	f00f fca8 	bl	80114e0 <__sprintf_chk>
            break;
 8001b90:	e010      	b.n	8001bb4 <print_modem_cfg+0x134>
        case BW_500_KHZ:
            sprintf(cfg_buf, "Bandwidth: %u kHz\n", 500);
 8001b92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	4b5e      	ldr	r3, [pc, #376]	; (8001d14 <print_modem_cfg+0x294>)
 8001b9a:	2240      	movs	r2, #64	; 0x40
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4858      	ldr	r0, [pc, #352]	; (8001d00 <print_modem_cfg+0x280>)
 8001ba0:	f00f fc9e 	bl	80114e0 <__sprintf_chk>
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001ba4:	e006      	b.n	8001bb4 <print_modem_cfg+0x134>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001ba6:	f3bf 8f5b 	dmb	ish
 8001baa:	d110      	bne.n	8001bce <print_modem_cfg+0x14e>
 8001bac:	200a      	movs	r0, #10
 8001bae:	2100      	movs	r1, #0
 8001bb0:	f00a fd26 	bl	800c600 <z_impl_k_sleep>
 8001bb4:	4b54      	ldr	r3, [pc, #336]	; (8001d08 <print_modem_cfg+0x288>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f3bf 8f5b 	dmb	ish
 8001bbc:	e853 1f00 	ldrex	r1, [r3]
 8001bc0:	2901      	cmp	r1, #1
 8001bc2:	d1f0      	bne.n	8001ba6 <print_modem_cfg+0x126>
 8001bc4:	e843 2000 	strex	r0, r2, [r3]
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d0ec      	beq.n	8001ba6 <print_modem_cfg+0x126>
 8001bcc:	e7f6      	b.n	8001bbc <print_modem_cfg+0x13c>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001bce:	4e4c      	ldr	r6, [pc, #304]	; (8001d00 <print_modem_cfg+0x280>)
 8001bd0:	4630      	mov	r0, r6
 8001bd2:	f7ff f940 	bl	8000e56 <strlen>
 8001bd6:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8001bd8:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8001bda:	685f      	ldr	r7, [r3, #4]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4631      	mov	r1, r6
 8001be0:	4620      	mov	r0, r4
 8001be2:	47b8      	blx	r7
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&timeout, K_SYSCALL_UART_TX);
	}
#endif
	compiler_barrier();
	return z_impl_uart_tx(dev, buf, len, timeout);
 8001be4:	e003      	b.n	8001bee <print_modem_cfg+0x16e>
 8001be6:	2064      	movs	r0, #100	; 0x64
 8001be8:	2100      	movs	r1, #0
 8001bea:	f00a fd09 	bl	800c600 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001bee:	f3bf 8f5b 	dmb	ish
 8001bf2:	4b45      	ldr	r3, [pc, #276]	; (8001d08 <print_modem_cfg+0x288>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f3      	beq.n	8001be6 <print_modem_cfg+0x166>
            break;
    }
    send_to_terminal(dev, cfg_buf);

    switch (cfg->datarate) {
 8001bfe:	796b      	ldrb	r3, [r5, #5]
 8001c00:	3b06      	subs	r3, #6
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d839      	bhi.n	8001c7a <print_modem_cfg+0x1fa>
 8001c06:	e8df f003 	tbb	[pc, r3]
 8001c0a:	0a04      	.short	0x0a04
 8001c0c:	231c1610 	.word	0x231c1610
 8001c10:	2a          	.byte	0x2a
 8001c11:	00          	.byte	0x00
        case SF_6:
            sprintf(cfg_buf, "Datarate: SF_6\n");
 8001c12:	4e3b      	ldr	r6, [pc, #236]	; (8001d00 <print_modem_cfg+0x280>)
 8001c14:	4b40      	ldr	r3, [pc, #256]	; (8001d18 <print_modem_cfg+0x298>)
 8001c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c18:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            break;
 8001c1c:	e02d      	b.n	8001c7a <print_modem_cfg+0x1fa>
        case SF_7:
            sprintf(cfg_buf, "Datarate: SF_7\n");
 8001c1e:	4e38      	ldr	r6, [pc, #224]	; (8001d00 <print_modem_cfg+0x280>)
 8001c20:	4b3e      	ldr	r3, [pc, #248]	; (8001d1c <print_modem_cfg+0x29c>)
 8001c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c24:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            break;
 8001c28:	e027      	b.n	8001c7a <print_modem_cfg+0x1fa>
        case SF_8:
            sprintf(cfg_buf, "Datarate: SF_8\n");
 8001c2a:	4e35      	ldr	r6, [pc, #212]	; (8001d00 <print_modem_cfg+0x280>)
 8001c2c:	4b3c      	ldr	r3, [pc, #240]	; (8001d20 <print_modem_cfg+0x2a0>)
 8001c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c30:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            break;
 8001c34:	e021      	b.n	8001c7a <print_modem_cfg+0x1fa>
        case SF_9:
            sprintf(cfg_buf, "Datarate: SF_9\n");
 8001c36:	4e32      	ldr	r6, [pc, #200]	; (8001d00 <print_modem_cfg+0x280>)
 8001c38:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <print_modem_cfg+0x2a4>)
 8001c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c3c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            break;
 8001c40:	e01b      	b.n	8001c7a <print_modem_cfg+0x1fa>
        case SF_10:
            sprintf(cfg_buf, "Datarate: SF_10\n");
 8001c42:	4e2f      	ldr	r6, [pc, #188]	; (8001d00 <print_modem_cfg+0x280>)
 8001c44:	4f38      	ldr	r7, [pc, #224]	; (8001d28 <print_modem_cfg+0x2a8>)
 8001c46:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001c48:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	7033      	strb	r3, [r6, #0]
            break;
 8001c4e:	e014      	b.n	8001c7a <print_modem_cfg+0x1fa>
        case SF_11:
            sprintf(cfg_buf, "Datarate: SF_11\n");
 8001c50:	4e2b      	ldr	r6, [pc, #172]	; (8001d00 <print_modem_cfg+0x280>)
 8001c52:	4f36      	ldr	r7, [pc, #216]	; (8001d2c <print_modem_cfg+0x2ac>)
 8001c54:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001c56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	7033      	strb	r3, [r6, #0]
            break;
 8001c5c:	e00d      	b.n	8001c7a <print_modem_cfg+0x1fa>
        case SF_12:
            sprintf(cfg_buf, "Datarate: SF_12\n");
 8001c5e:	4e28      	ldr	r6, [pc, #160]	; (8001d00 <print_modem_cfg+0x280>)
 8001c60:	4f33      	ldr	r7, [pc, #204]	; (8001d30 <print_modem_cfg+0x2b0>)
 8001c62:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001c64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	7033      	strb	r3, [r6, #0]
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001c6a:	e006      	b.n	8001c7a <print_modem_cfg+0x1fa>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001c6c:	f3bf 8f5b 	dmb	ish
 8001c70:	d110      	bne.n	8001c94 <print_modem_cfg+0x214>
 8001c72:	200a      	movs	r0, #10
 8001c74:	2100      	movs	r1, #0
 8001c76:	f00a fcc3 	bl	800c600 <z_impl_k_sleep>
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <print_modem_cfg+0x288>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f3bf 8f5b 	dmb	ish
 8001c82:	e853 1f00 	ldrex	r1, [r3]
 8001c86:	2901      	cmp	r1, #1
 8001c88:	d1f0      	bne.n	8001c6c <print_modem_cfg+0x1ec>
 8001c8a:	e843 2000 	strex	r0, r2, [r3]
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d0ec      	beq.n	8001c6c <print_modem_cfg+0x1ec>
 8001c92:	e7f6      	b.n	8001c82 <print_modem_cfg+0x202>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001c94:	4e1a      	ldr	r6, [pc, #104]	; (8001d00 <print_modem_cfg+0x280>)
 8001c96:	4630      	mov	r0, r6
 8001c98:	f7ff f8dd 	bl	8000e56 <strlen>
 8001c9c:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8001c9e:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8001ca0:	685f      	ldr	r7, [r3, #4]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	4631      	mov	r1, r6
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	47b8      	blx	r7
 8001caa:	e003      	b.n	8001cb4 <print_modem_cfg+0x234>
 8001cac:	2064      	movs	r0, #100	; 0x64
 8001cae:	2100      	movs	r1, #0
 8001cb0:	f00a fca6 	bl	800c600 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001cb4:	f3bf 8f5b 	dmb	ish
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <print_modem_cfg+0x288>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f3      	beq.n	8001cac <print_modem_cfg+0x22c>
            break;
    }
    send_to_terminal(dev, cfg_buf);

    switch (cfg->coding_rate) {
 8001cc4:	79ab      	ldrb	r3, [r5, #6]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d847      	bhi.n	8001d5c <print_modem_cfg+0x2dc>
 8001ccc:	e8df f003 	tbb	[pc, r3]
 8001cd0:	38100902 	.word	0x38100902
        case CR_4_5:
            sprintf(cfg_buf, "Coding rate: 4/5\n");
 8001cd4:	4e0a      	ldr	r6, [pc, #40]	; (8001d00 <print_modem_cfg+0x280>)
 8001cd6:	4f17      	ldr	r7, [pc, #92]	; (8001d34 <print_modem_cfg+0x2b4>)
 8001cd8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001cda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	8033      	strh	r3, [r6, #0]
            break;
 8001ce0:	e03c      	b.n	8001d5c <print_modem_cfg+0x2dc>
        case CR_4_6:
            sprintf(cfg_buf, "Coding rate: 4/6\n");
 8001ce2:	4e07      	ldr	r6, [pc, #28]	; (8001d00 <print_modem_cfg+0x280>)
 8001ce4:	4f14      	ldr	r7, [pc, #80]	; (8001d38 <print_modem_cfg+0x2b8>)
 8001ce6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001ce8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	8033      	strh	r3, [r6, #0]
            break;
 8001cee:	e035      	b.n	8001d5c <print_modem_cfg+0x2dc>
        case CR_4_7:
            sprintf(cfg_buf, "Coding rate: 4/7\n");
 8001cf0:	4e03      	ldr	r6, [pc, #12]	; (8001d00 <print_modem_cfg+0x280>)
 8001cf2:	4f12      	ldr	r7, [pc, #72]	; (8001d3c <print_modem_cfg+0x2bc>)
 8001cf4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001cf6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	8033      	strh	r3, [r6, #0]
            break;
 8001cfc:	e02e      	b.n	8001d5c <print_modem_cfg+0x2dc>
 8001cfe:	bf00      	nop
 8001d00:	20000d84 	.word	0x20000d84
 8001d04:	08012210 	.word	0x08012210
 8001d08:	200002a4 	.word	0x200002a4
 8001d0c:	10624dd3 	.word	0x10624dd3
 8001d10:	08012230 	.word	0x08012230
 8001d14:	08012244 	.word	0x08012244
 8001d18:	08012258 	.word	0x08012258
 8001d1c:	08012268 	.word	0x08012268
 8001d20:	08012278 	.word	0x08012278
 8001d24:	08012288 	.word	0x08012288
 8001d28:	08012298 	.word	0x08012298
 8001d2c:	080122ac 	.word	0x080122ac
 8001d30:	080122c0 	.word	0x080122c0
 8001d34:	080122d4 	.word	0x080122d4
 8001d38:	080122e8 	.word	0x080122e8
 8001d3c:	080122fc 	.word	0x080122fc
        case CR_4_8:
            sprintf(cfg_buf, "Coding rate: 4/8\n");
 8001d40:	4e9e      	ldr	r6, [pc, #632]	; (8001fbc <print_modem_cfg+0x53c>)
 8001d42:	4f9f      	ldr	r7, [pc, #636]	; (8001fc0 <print_modem_cfg+0x540>)
 8001d44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001d46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	8033      	strh	r3, [r6, #0]
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001d4c:	e006      	b.n	8001d5c <print_modem_cfg+0x2dc>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001d4e:	f3bf 8f5b 	dmb	ish
 8001d52:	d110      	bne.n	8001d76 <print_modem_cfg+0x2f6>
 8001d54:	200a      	movs	r0, #10
 8001d56:	2100      	movs	r1, #0
 8001d58:	f00a fc52 	bl	800c600 <z_impl_k_sleep>
 8001d5c:	4b99      	ldr	r3, [pc, #612]	; (8001fc4 <print_modem_cfg+0x544>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f3bf 8f5b 	dmb	ish
 8001d64:	e853 1f00 	ldrex	r1, [r3]
 8001d68:	2901      	cmp	r1, #1
 8001d6a:	d1f0      	bne.n	8001d4e <print_modem_cfg+0x2ce>
 8001d6c:	e843 2000 	strex	r0, r2, [r3]
 8001d70:	2800      	cmp	r0, #0
 8001d72:	d0ec      	beq.n	8001d4e <print_modem_cfg+0x2ce>
 8001d74:	e7f6      	b.n	8001d64 <print_modem_cfg+0x2e4>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001d76:	4e91      	ldr	r6, [pc, #580]	; (8001fbc <print_modem_cfg+0x53c>)
 8001d78:	4630      	mov	r0, r6
 8001d7a:	f7ff f86c 	bl	8000e56 <strlen>
 8001d7e:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8001d80:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8001d82:	685f      	ldr	r7, [r3, #4]
 8001d84:	2300      	movs	r3, #0
 8001d86:	4631      	mov	r1, r6
 8001d88:	4620      	mov	r0, r4
 8001d8a:	47b8      	blx	r7
 8001d8c:	e003      	b.n	8001d96 <print_modem_cfg+0x316>
 8001d8e:	2064      	movs	r0, #100	; 0x64
 8001d90:	2100      	movs	r1, #0
 8001d92:	f00a fc35 	bl	800c600 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001d96:	f3bf 8f5b 	dmb	ish
 8001d9a:	4b8a      	ldr	r3, [pc, #552]	; (8001fc4 <print_modem_cfg+0x544>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f3      	beq.n	8001d8e <print_modem_cfg+0x30e>
            break;
    }
    send_to_terminal(dev, cfg_buf);

    sprintf(cfg_buf, "Preamble length: %u symb\n", cfg->preamble_len);
 8001da6:	892b      	ldrh	r3, [r5, #8]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	4b87      	ldr	r3, [pc, #540]	; (8001fc8 <print_modem_cfg+0x548>)
 8001dac:	2240      	movs	r2, #64	; 0x40
 8001dae:	2100      	movs	r1, #0
 8001db0:	4882      	ldr	r0, [pc, #520]	; (8001fbc <print_modem_cfg+0x53c>)
 8001db2:	f00f fb95 	bl	80114e0 <__sprintf_chk>
static inline void send_to_terminal(const struct device *dev, uint8_t *buf_tx)
 8001db6:	e006      	b.n	8001dc6 <print_modem_cfg+0x346>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001db8:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001dbc:	d110      	bne.n	8001de0 <print_modem_cfg+0x360>
 8001dbe:	200a      	movs	r0, #10
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	f00a fc1d 	bl	800c600 <z_impl_k_sleep>
 8001dc6:	4b7f      	ldr	r3, [pc, #508]	; (8001fc4 <print_modem_cfg+0x544>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f3bf 8f5b 	dmb	ish
 8001dce:	e853 1f00 	ldrex	r1, [r3]
 8001dd2:	2901      	cmp	r1, #1
 8001dd4:	d1f0      	bne.n	8001db8 <print_modem_cfg+0x338>
 8001dd6:	e843 2000 	strex	r0, r2, [r3]
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d0ec      	beq.n	8001db8 <print_modem_cfg+0x338>
 8001dde:	e7f6      	b.n	8001dce <print_modem_cfg+0x34e>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001de0:	4e76      	ldr	r6, [pc, #472]	; (8001fbc <print_modem_cfg+0x53c>)
 8001de2:	4630      	mov	r0, r6
 8001de4:	f7ff f837 	bl	8000e56 <strlen>
 8001de8:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8001dea:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8001dec:	685f      	ldr	r7, [r3, #4]
 8001dee:	2300      	movs	r3, #0
 8001df0:	4631      	mov	r1, r6
 8001df2:	4620      	mov	r0, r4
 8001df4:	47b8      	blx	r7
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001df6:	f3bf 8f5b 	dmb	ish
 8001dfa:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <print_modem_cfg+0x544>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8001e02:	b153      	cbz	r3, 8001e1a <print_modem_cfg+0x39a>
    send_to_terminal(dev, cfg_buf);

    if (cfg->fixed_len) {
 8001e04:	7aeb      	ldrb	r3, [r5, #11]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8098 	beq.w	8001f3c <print_modem_cfg+0x4bc>
        sprintf(cfg_buf, "Fixed length: true\n");
 8001e0c:	4e6b      	ldr	r6, [pc, #428]	; (8001fbc <print_modem_cfg+0x53c>)
 8001e0e:	4f6f      	ldr	r7, [pc, #444]	; (8001fcc <print_modem_cfg+0x54c>)
 8001e10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001e12:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6033      	str	r3, [r6, #0]
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001e18:	e008      	b.n	8001e2c <print_modem_cfg+0x3ac>
 8001e1a:	2064      	movs	r0, #100	; 0x64
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f00a fbef 	bl	800c600 <z_impl_k_sleep>
 8001e22:	e7e8      	b.n	8001df6 <print_modem_cfg+0x376>
 8001e24:	200a      	movs	r0, #10
 8001e26:	2100      	movs	r1, #0
 8001e28:	f00a fbea 	bl	800c600 <z_impl_k_sleep>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001e2c:	4b65      	ldr	r3, [pc, #404]	; (8001fc4 <print_modem_cfg+0x544>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f3bf 8f5b 	dmb	ish
 8001e34:	e853 1f00 	ldrex	r1, [r3]
 8001e38:	2901      	cmp	r1, #1
 8001e3a:	d103      	bne.n	8001e44 <print_modem_cfg+0x3c4>
 8001e3c:	e843 2000 	strex	r0, r2, [r3]
 8001e40:	2800      	cmp	r0, #0
 8001e42:	d1f7      	bne.n	8001e34 <print_modem_cfg+0x3b4>
 8001e44:	f3bf 8f5b 	dmb	ish
 8001e48:	d0ec      	beq.n	8001e24 <print_modem_cfg+0x3a4>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001e4a:	4e5c      	ldr	r6, [pc, #368]	; (8001fbc <print_modem_cfg+0x53c>)
 8001e4c:	4630      	mov	r0, r6
 8001e4e:	f7ff f802 	bl	8000e56 <strlen>
 8001e52:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8001e54:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8001e56:	685f      	ldr	r7, [r3, #4]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	4631      	mov	r1, r6
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	47b8      	blx	r7
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001e60:	f3bf 8f5b 	dmb	ish
 8001e64:	4b57      	ldr	r3, [pc, #348]	; (8001fc4 <print_modem_cfg+0x544>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d056      	beq.n	8001f1e <print_modem_cfg+0x49e>
        send_to_terminal(dev, cfg_buf);

        sprintf(cfg_buf, "Payload length: %u\n", cfg->payload_len);
 8001e70:	7aab      	ldrb	r3, [r5, #10]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <print_modem_cfg+0x550>)
 8001e76:	2240      	movs	r2, #64	; 0x40
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4850      	ldr	r0, [pc, #320]	; (8001fbc <print_modem_cfg+0x53c>)
 8001e7c:	f00f fb30 	bl	80114e0 <__sprintf_chk>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <print_modem_cfg+0x544>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	f3bf 8f5b 	dmb	ish
 8001e88:	e853 1f00 	ldrex	r1, [r3]
 8001e8c:	2901      	cmp	r1, #1
 8001e8e:	d103      	bne.n	8001e98 <print_modem_cfg+0x418>
 8001e90:	e843 2000 	strex	r0, r2, [r3]
 8001e94:	2800      	cmp	r0, #0
 8001e96:	d1f7      	bne.n	8001e88 <print_modem_cfg+0x408>
 8001e98:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001e9c:	d044      	beq.n	8001f28 <print_modem_cfg+0x4a8>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001e9e:	4e47      	ldr	r6, [pc, #284]	; (8001fbc <print_modem_cfg+0x53c>)
 8001ea0:	4630      	mov	r0, r6
 8001ea2:	f7fe ffd8 	bl	8000e56 <strlen>
 8001ea6:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8001ea8:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8001eaa:	685f      	ldr	r7, [r3, #4]
 8001eac:	2300      	movs	r3, #0
 8001eae:	4631      	mov	r1, r6
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	47b8      	blx	r7
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001eb4:	f3bf 8f5b 	dmb	ish
 8001eb8:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <print_modem_cfg+0x544>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d036      	beq.n	8001f32 <print_modem_cfg+0x4b2>
    } else {
        sprintf(cfg_buf, "Fixed length: false\n");
        send_to_terminal(dev, cfg_buf);
    }

    sprintf(cfg_buf, "TX power: %d dBm\n", cfg->tx_power);
 8001ec4:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <print_modem_cfg+0x554>)
 8001ecc:	2240      	movs	r2, #64	; 0x40
 8001ece:	2100      	movs	r1, #0
 8001ed0:	483a      	ldr	r0, [pc, #232]	; (8001fbc <print_modem_cfg+0x53c>)
 8001ed2:	f00f fb05 	bl	80114e0 <__sprintf_chk>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <print_modem_cfg+0x544>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f3bf 8f5b 	dmb	ish
 8001ede:	e853 1f00 	ldrex	r1, [r3]
 8001ee2:	2901      	cmp	r1, #1
 8001ee4:	d103      	bne.n	8001eee <print_modem_cfg+0x46e>
 8001ee6:	e843 2000 	strex	r0, r2, [r3]
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d1f7      	bne.n	8001ede <print_modem_cfg+0x45e>
 8001eee:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001ef2:	d058      	beq.n	8001fa6 <print_modem_cfg+0x526>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001ef4:	4d31      	ldr	r5, [pc, #196]	; (8001fbc <print_modem_cfg+0x53c>)
 8001ef6:	4628      	mov	r0, r5
 8001ef8:	f7fe ffad 	bl	8000e56 <strlen>
 8001efc:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8001efe:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8001f00:	685e      	ldr	r6, [r3, #4]
 8001f02:	2300      	movs	r3, #0
 8001f04:	4629      	mov	r1, r5
 8001f06:	4620      	mov	r0, r4
 8001f08:	47b0      	blx	r6
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001f0a:	f3bf 8f5b 	dmb	ish
 8001f0e:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <print_modem_cfg+0x544>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d04a      	beq.n	8001fb0 <print_modem_cfg+0x530>
    send_to_terminal(dev, cfg_buf);
}
 8001f1a:	b003      	add	sp, #12
 8001f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1e:	2064      	movs	r0, #100	; 0x64
 8001f20:	2100      	movs	r1, #0
 8001f22:	f00a fb6d 	bl	800c600 <z_impl_k_sleep>
 8001f26:	e79b      	b.n	8001e60 <print_modem_cfg+0x3e0>
 8001f28:	200a      	movs	r0, #10
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	f00a fb68 	bl	800c600 <z_impl_k_sleep>
 8001f30:	e7a6      	b.n	8001e80 <print_modem_cfg+0x400>
 8001f32:	2064      	movs	r0, #100	; 0x64
 8001f34:	2100      	movs	r1, #0
 8001f36:	f00a fb63 	bl	800c600 <z_impl_k_sleep>
 8001f3a:	e7bb      	b.n	8001eb4 <print_modem_cfg+0x434>
        sprintf(cfg_buf, "Fixed length: false\n");
 8001f3c:	4e1f      	ldr	r6, [pc, #124]	; (8001fbc <print_modem_cfg+0x53c>)
 8001f3e:	4f26      	ldr	r7, [pc, #152]	; (8001fd8 <print_modem_cfg+0x558>)
 8001f40:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001f42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001f44:	e897 0003 	ldmia.w	r7, {r0, r1}
 8001f48:	f846 0b04 	str.w	r0, [r6], #4
 8001f4c:	7031      	strb	r1, [r6, #0]
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001f4e:	e003      	b.n	8001f58 <print_modem_cfg+0x4d8>
 8001f50:	200a      	movs	r0, #10
 8001f52:	2100      	movs	r1, #0
 8001f54:	f00a fb54 	bl	800c600 <z_impl_k_sleep>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <print_modem_cfg+0x544>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f3bf 8f5b 	dmb	ish
 8001f60:	e853 1f00 	ldrex	r1, [r3]
 8001f64:	2901      	cmp	r1, #1
 8001f66:	d103      	bne.n	8001f70 <print_modem_cfg+0x4f0>
 8001f68:	e843 2000 	strex	r0, r2, [r3]
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	d1f7      	bne.n	8001f60 <print_modem_cfg+0x4e0>
 8001f70:	f3bf 8f5b 	dmb	ish
 8001f74:	d0ec      	beq.n	8001f50 <print_modem_cfg+0x4d0>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001f76:	4e11      	ldr	r6, [pc, #68]	; (8001fbc <print_modem_cfg+0x53c>)
 8001f78:	4630      	mov	r0, r6
 8001f7a:	f7fe ff6c 	bl	8000e56 <strlen>
 8001f7e:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8001f80:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8001f82:	685f      	ldr	r7, [r3, #4]
 8001f84:	2300      	movs	r3, #0
 8001f86:	4631      	mov	r1, r6
 8001f88:	4620      	mov	r0, r4
 8001f8a:	47b8      	blx	r7
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001f8c:	f3bf 8f5b 	dmb	ish
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <print_modem_cfg+0x544>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d193      	bne.n	8001ec4 <print_modem_cfg+0x444>
 8001f9c:	2064      	movs	r0, #100	; 0x64
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	f00a fb2e 	bl	800c600 <z_impl_k_sleep>
 8001fa4:	e7f2      	b.n	8001f8c <print_modem_cfg+0x50c>
 8001fa6:	200a      	movs	r0, #10
 8001fa8:	2100      	movs	r1, #0
 8001faa:	f00a fb29 	bl	800c600 <z_impl_k_sleep>
 8001fae:	e792      	b.n	8001ed6 <print_modem_cfg+0x456>
 8001fb0:	2064      	movs	r0, #100	; 0x64
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	f00a fb24 	bl	800c600 <z_impl_k_sleep>
 8001fb8:	e7a7      	b.n	8001f0a <print_modem_cfg+0x48a>
 8001fba:	bf00      	nop
 8001fbc:	20000d84 	.word	0x20000d84
 8001fc0:	08012310 	.word	0x08012310
 8001fc4:	200002a4 	.word	0x200002a4
 8001fc8:	08012324 	.word	0x08012324
 8001fcc:	08012340 	.word	0x08012340
 8001fd0:	08012354 	.word	0x08012354
 8001fd4:	08012380 	.word	0x08012380
 8001fd8:	08012368 	.word	0x08012368

08001fdc <change_modem_datarate>:
{
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	4604      	mov	r4, r0
 8001fe0:	460d      	mov	r5, r1
 8001fe2:	4616      	mov	r6, r2
 8001fe4:	461f      	mov	r7, r3
	const struct lora_driver_api *api =
 8001fe6:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2200      	movs	r2, #0
 8001fec:	4611      	mov	r1, r2
 8001fee:	4798      	blx	r3
    lora_cfg->datarate = new_dr;
 8001ff0:	716e      	strb	r6, [r5, #5]
	const struct lora_driver_api *api =
 8001ff2:	68a3      	ldr	r3, [r4, #8]
	return api->config(dev, config);
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	4798      	blx	r3
    if (!lora_config(lora_dev, lora_cfg)) {
 8001ffc:	b958      	cbnz	r0, 8002016 <change_modem_datarate+0x3a>
        print_modem_cfg(uart_dev, lora_cfg);
 8001ffe:	4629      	mov	r1, r5
 8002000:	4638      	mov	r0, r7
 8002002:	f7ff fd3d 	bl	8001a80 <print_modem_cfg>
}
 8002006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8002008:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 800200c:	d111      	bne.n	8002032 <change_modem_datarate+0x56>
 800200e:	200a      	movs	r0, #10
 8002010:	2100      	movs	r1, #0
 8002012:	f00a faf5 	bl	800c600 <z_impl_k_sleep>
 8002016:	4a13      	ldr	r2, [pc, #76]	; (8002064 <change_modem_datarate+0x88>)
 8002018:	2100      	movs	r1, #0
 800201a:	f3bf 8f5b 	dmb	ish
 800201e:	e852 cf00 	ldrex	ip, [r2]
 8002022:	f1bc 0f01 	cmp.w	ip, #1
 8002026:	d1ef      	bne.n	8002008 <change_modem_datarate+0x2c>
 8002028:	e842 1300 	strex	r3, r1, [r2]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0eb      	beq.n	8002008 <change_modem_datarate+0x2c>
 8002030:	e7f5      	b.n	800201e <change_modem_datarate+0x42>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8002032:	4c0d      	ldr	r4, [pc, #52]	; (8002068 <change_modem_datarate+0x8c>)
 8002034:	4620      	mov	r0, r4
 8002036:	f7fe ff0e 	bl	8000e56 <strlen>
 800203a:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 800203c:	68bb      	ldr	r3, [r7, #8]
	return api->tx(dev, buf, len, timeout);
 800203e:	685d      	ldr	r5, [r3, #4]
 8002040:	2300      	movs	r3, #0
 8002042:	4621      	mov	r1, r4
 8002044:	4638      	mov	r0, r7
 8002046:	47a8      	blx	r5
 8002048:	e003      	b.n	8002052 <change_modem_datarate+0x76>
 800204a:	2064      	movs	r0, #100	; 0x64
 800204c:	2100      	movs	r1, #0
 800204e:	f00a fad7 	bl	800c600 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8002052:	f3bf 8f5b 	dmb	ish
 8002056:	4b03      	ldr	r3, [pc, #12]	; (8002064 <change_modem_datarate+0x88>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f3      	beq.n	800204a <change_modem_datarate+0x6e>
 8002062:	e7d0      	b.n	8002006 <change_modem_datarate+0x2a>
 8002064:	200002a4 	.word	0x200002a4
 8002068:	08012394 	.word	0x08012394

0800206c <change_modem_frequency>:
{
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	4604      	mov	r4, r0
 8002070:	460e      	mov	r6, r1
 8002072:	4615      	mov	r5, r2
 8002074:	461f      	mov	r7, r3
	const struct lora_driver_api *api =
 8002076:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2200      	movs	r2, #0
 800207c:	4611      	mov	r1, r2
 800207e:	4798      	blx	r3
    lora_cfg->frequency = (new_freq_khz*1000);
 8002080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002084:	fb03 f505 	mul.w	r5, r3, r5
 8002088:	6035      	str	r5, [r6, #0]
	const struct lora_driver_api *api =
 800208a:	68a3      	ldr	r3, [r4, #8]
	return api->config(dev, config);
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4631      	mov	r1, r6
 8002090:	4620      	mov	r0, r4
 8002092:	4798      	blx	r3
    if (!lora_config(lora_dev, lora_cfg)) {
 8002094:	b958      	cbnz	r0, 80020ae <change_modem_frequency+0x42>
        print_modem_cfg(uart_dev, lora_cfg);
 8002096:	4631      	mov	r1, r6
 8002098:	4638      	mov	r0, r7
 800209a:	f7ff fcf1 	bl	8001a80 <print_modem_cfg>
}
 800209e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80020a0:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 80020a4:	d111      	bne.n	80020ca <change_modem_frequency+0x5e>
 80020a6:	200a      	movs	r0, #10
 80020a8:	2100      	movs	r1, #0
 80020aa:	f00a faa9 	bl	800c600 <z_impl_k_sleep>
 80020ae:	4a13      	ldr	r2, [pc, #76]	; (80020fc <change_modem_frequency+0x90>)
 80020b0:	2100      	movs	r1, #0
 80020b2:	f3bf 8f5b 	dmb	ish
 80020b6:	e852 cf00 	ldrex	ip, [r2]
 80020ba:	f1bc 0f01 	cmp.w	ip, #1
 80020be:	d1ef      	bne.n	80020a0 <change_modem_frequency+0x34>
 80020c0:	e842 1300 	strex	r3, r1, [r2]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0eb      	beq.n	80020a0 <change_modem_frequency+0x34>
 80020c8:	e7f5      	b.n	80020b6 <change_modem_frequency+0x4a>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 80020ca:	4c0d      	ldr	r4, [pc, #52]	; (8002100 <change_modem_frequency+0x94>)
 80020cc:	4620      	mov	r0, r4
 80020ce:	f7fe fec2 	bl	8000e56 <strlen>
 80020d2:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 80020d4:	68bb      	ldr	r3, [r7, #8]
	return api->tx(dev, buf, len, timeout);
 80020d6:	685d      	ldr	r5, [r3, #4]
 80020d8:	2300      	movs	r3, #0
 80020da:	4621      	mov	r1, r4
 80020dc:	4638      	mov	r0, r7
 80020de:	47a8      	blx	r5
 80020e0:	e003      	b.n	80020ea <change_modem_frequency+0x7e>
 80020e2:	2064      	movs	r0, #100	; 0x64
 80020e4:	2100      	movs	r1, #0
 80020e6:	f00a fa8b 	bl	800c600 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80020ea:	f3bf 8f5b 	dmb	ish
 80020ee:	4b03      	ldr	r3, [pc, #12]	; (80020fc <change_modem_frequency+0x90>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f3      	beq.n	80020e2 <change_modem_frequency+0x76>
 80020fa:	e7d0      	b.n	800209e <change_modem_frequency+0x32>
 80020fc:	200002a4 	.word	0x200002a4
 8002100:	080123b8 	.word	0x080123b8

08002104 <incr_decr_modem_frequency>:
{
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	4605      	mov	r5, r0
 8002108:	460c      	mov	r4, r1
 800210a:	4616      	mov	r6, r2
 800210c:	461f      	mov	r7, r3
	const struct lora_driver_api *api =
 800210e:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2200      	movs	r2, #0
 8002114:	4611      	mov	r1, r2
 8002116:	4798      	blx	r3
    if (incr) {
 8002118:	b17e      	cbz	r6, 800213a <incr_decr_modem_frequency+0x36>
        lora_cfg->frequency += FREQUENCY_STEP_HZ;
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8002120:	33a0      	adds	r3, #160	; 0xa0
 8002122:	6023      	str	r3, [r4, #0]
	const struct lora_driver_api *api =
 8002124:	68ab      	ldr	r3, [r5, #8]
	return api->config(dev, config);
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4621      	mov	r1, r4
 800212a:	4628      	mov	r0, r5
 800212c:	4798      	blx	r3
    if (!lora_config(lora_dev, lora_cfg)) {
 800212e:	b988      	cbnz	r0, 8002154 <incr_decr_modem_frequency+0x50>
        print_modem_cfg(uart_dev, lora_cfg);
 8002130:	4621      	mov	r1, r4
 8002132:	4638      	mov	r0, r7
 8002134:	f7ff fca4 	bl	8001a80 <print_modem_cfg>
}
 8002138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lora_cfg->frequency -= FREQUENCY_STEP_HZ;
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8002140:	3ba0      	subs	r3, #160	; 0xa0
 8002142:	6023      	str	r3, [r4, #0]
 8002144:	e7ee      	b.n	8002124 <incr_decr_modem_frequency+0x20>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8002146:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 800214a:	d111      	bne.n	8002170 <incr_decr_modem_frequency+0x6c>
 800214c:	200a      	movs	r0, #10
 800214e:	2100      	movs	r1, #0
 8002150:	f00a fa56 	bl	800c600 <z_impl_k_sleep>
 8002154:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <incr_decr_modem_frequency+0xa0>)
 8002156:	2100      	movs	r1, #0
 8002158:	f3bf 8f5b 	dmb	ish
 800215c:	e852 cf00 	ldrex	ip, [r2]
 8002160:	f1bc 0f01 	cmp.w	ip, #1
 8002164:	d1ef      	bne.n	8002146 <incr_decr_modem_frequency+0x42>
 8002166:	e842 1300 	strex	r3, r1, [r2]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0eb      	beq.n	8002146 <incr_decr_modem_frequency+0x42>
 800216e:	e7f5      	b.n	800215c <incr_decr_modem_frequency+0x58>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8002170:	4c0d      	ldr	r4, [pc, #52]	; (80021a8 <incr_decr_modem_frequency+0xa4>)
 8002172:	4620      	mov	r0, r4
 8002174:	f7fe fe6f 	bl	8000e56 <strlen>
 8002178:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 800217a:	68bb      	ldr	r3, [r7, #8]
	return api->tx(dev, buf, len, timeout);
 800217c:	685d      	ldr	r5, [r3, #4]
 800217e:	2300      	movs	r3, #0
 8002180:	4621      	mov	r1, r4
 8002182:	4638      	mov	r0, r7
 8002184:	47a8      	blx	r5
 8002186:	e003      	b.n	8002190 <incr_decr_modem_frequency+0x8c>
 8002188:	2064      	movs	r0, #100	; 0x64
 800218a:	2100      	movs	r1, #0
 800218c:	f00a fa38 	bl	800c600 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8002190:	f3bf 8f5b 	dmb	ish
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <incr_decr_modem_frequency+0xa0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f3      	beq.n	8002188 <incr_decr_modem_frequency+0x84>
 80021a0:	e7ca      	b.n	8002138 <incr_decr_modem_frequency+0x34>
 80021a2:	bf00      	nop
 80021a4:	200002a4 	.word	0x200002a4
 80021a8:	080123b8 	.word	0x080123b8

080021ac <print_per_status>:


void print_per_status(const struct device *uart_dev, uint8_t *buf_tx, int ret, struct print_data_elem_s *print_data)
{
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	4604      	mov	r4, r0
    static uint8_t per_buf[UART_TX_BUF_LEN] = {0};
    if (ret) {
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	d039      	beq.n	800222a <print_per_status+0x7e>
        sprintf(per_buf, "Packet %lu/%lu is missing!!!\n", print_data->packet_num, atomic_per_num);
 80021b6:	4a3c      	ldr	r2, [pc, #240]	; (80022a8 <print_per_status+0xfc>)
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	9201      	str	r2, [sp, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	4b3a      	ldr	r3, [pc, #232]	; (80022ac <print_per_status+0x100>)
 80021c2:	2240      	movs	r2, #64	; 0x40
 80021c4:	2100      	movs	r1, #0
 80021c6:	483a      	ldr	r0, [pc, #232]	; (80022b0 <print_per_status+0x104>)
 80021c8:	f00f f98a 	bl	80114e0 <__sprintf_chk>
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 80021cc:	e006      	b.n	80021dc <print_per_status+0x30>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80021ce:	f3bf 8f5b 	dmb	ish
 80021d2:	d110      	bne.n	80021f6 <print_per_status+0x4a>
 80021d4:	200a      	movs	r0, #10
 80021d6:	2100      	movs	r1, #0
 80021d8:	f00a fa12 	bl	800c600 <z_impl_k_sleep>
 80021dc:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <print_per_status+0x108>)
 80021de:	2200      	movs	r2, #0
 80021e0:	f3bf 8f5b 	dmb	ish
 80021e4:	e853 1f00 	ldrex	r1, [r3]
 80021e8:	2901      	cmp	r1, #1
 80021ea:	d1f0      	bne.n	80021ce <print_per_status+0x22>
 80021ec:	e843 2000 	strex	r0, r2, [r3]
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d0ec      	beq.n	80021ce <print_per_status+0x22>
 80021f4:	e7f6      	b.n	80021e4 <print_per_status+0x38>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 80021f6:	4d2e      	ldr	r5, [pc, #184]	; (80022b0 <print_per_status+0x104>)
 80021f8:	4628      	mov	r0, r5
 80021fa:	f7fe fe2c 	bl	8000e56 <strlen>
 80021fe:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8002200:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8002202:	685e      	ldr	r6, [r3, #4]
 8002204:	2300      	movs	r3, #0
 8002206:	4629      	mov	r1, r5
 8002208:	4620      	mov	r0, r4
 800220a:	47b0      	blx	r6
 800220c:	e003      	b.n	8002216 <print_per_status+0x6a>
 800220e:	2064      	movs	r0, #100	; 0x64
 8002210:	2100      	movs	r1, #0
 8002212:	f00a f9f5 	bl	800c600 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8002216:	f3bf 8f5b 	dmb	ish
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <print_per_status+0x108>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f3      	beq.n	800220e <print_per_status+0x62>
    } else {
        sprintf(per_buf, "Packet %lu/%lu is received\n rssi: %d\n snr: %d\n", print_data->packet_num,
                atomic_per_num, print_data->rssi, print_data->snr);
        send_to_terminal(uart_dev, per_buf);
    }
}
 8002226:	b004      	add	sp, #16
 8002228:	bd70      	pop	{r4, r5, r6, pc}
        sprintf(per_buf, "Packet %lu/%lu is received\n rssi: %d\n snr: %d\n", print_data->packet_num,
 800222a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800222e:	f993 1000 	ldrsb.w	r1, [r3]
 8002232:	9103      	str	r1, [sp, #12]
 8002234:	9202      	str	r2, [sp, #8]
 8002236:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <print_per_status+0xfc>)
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	9201      	str	r2, [sp, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <print_per_status+0x10c>)
 8002242:	2240      	movs	r2, #64	; 0x40
 8002244:	2100      	movs	r1, #0
 8002246:	481a      	ldr	r0, [pc, #104]	; (80022b0 <print_per_status+0x104>)
 8002248:	f00f f94a 	bl	80114e0 <__sprintf_chk>
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 800224c:	e006      	b.n	800225c <print_per_status+0xb0>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800224e:	f3bf 8f5b 	dmb	ish
 8002252:	d110      	bne.n	8002276 <print_per_status+0xca>
 8002254:	200a      	movs	r0, #10
 8002256:	2100      	movs	r1, #0
 8002258:	f00a f9d2 	bl	800c600 <z_impl_k_sleep>
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <print_per_status+0x108>)
 800225e:	2200      	movs	r2, #0
 8002260:	f3bf 8f5b 	dmb	ish
 8002264:	e853 1f00 	ldrex	r1, [r3]
 8002268:	2901      	cmp	r1, #1
 800226a:	d1f0      	bne.n	800224e <print_per_status+0xa2>
 800226c:	e843 2000 	strex	r0, r2, [r3]
 8002270:	2800      	cmp	r0, #0
 8002272:	d0ec      	beq.n	800224e <print_per_status+0xa2>
 8002274:	e7f6      	b.n	8002264 <print_per_status+0xb8>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8002276:	4d0e      	ldr	r5, [pc, #56]	; (80022b0 <print_per_status+0x104>)
 8002278:	4628      	mov	r0, r5
 800227a:	f7fe fdec 	bl	8000e56 <strlen>
 800227e:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8002280:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 8002282:	685e      	ldr	r6, [r3, #4]
 8002284:	2300      	movs	r3, #0
 8002286:	4629      	mov	r1, r5
 8002288:	4620      	mov	r0, r4
 800228a:	47b0      	blx	r6
 800228c:	e003      	b.n	8002296 <print_per_status+0xea>
 800228e:	2064      	movs	r0, #100	; 0x64
 8002290:	2100      	movs	r1, #0
 8002292:	f00a f9b5 	bl	800c600 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8002296:	f3bf 8f5b 	dmb	ish
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <print_per_status+0x108>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f3      	beq.n	800228e <print_per_status+0xe2>
 80022a6:	e7be      	b.n	8002226 <print_per_status+0x7a>
 80022a8:	20000d80 	.word	0x20000d80
 80022ac:	080123e0 	.word	0x080123e0
 80022b0:	20000dc4 	.word	0x20000dc4
 80022b4:	200002a4 	.word	0x200002a4
 80022b8:	08012400 	.word	0x08012400

080022bc <per_meas>:
{
 80022bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022c0:	b088      	sub	sp, #32
 80022c2:	4605      	mov	r5, r0
 80022c4:	460e      	mov	r6, r1
 80022c6:	4617      	mov	r7, r2
 80022c8:	461c      	mov	r4, r3
    int8_t snr = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f88d 301f 	strb.w	r3, [sp, #31]
 80022d0:	f3bf 8f5b 	dmb	ish
 80022d4:	4a5a      	ldr	r2, [pc, #360]	; (8002440 <per_meas+0x184>)
 80022d6:	f8d2 8000 	ldr.w	r8, [r2]
 80022da:	f3bf 8f5b 	dmb	ish
    atomic_t atomic_packet_count = ATOMIC_INIT(0);
 80022de:	9306      	str	r3, [sp, #24]
    struct print_data_elem_s print_data = {0};
 80022e0:	9304      	str	r3, [sp, #16]
 80022e2:	9305      	str	r3, [sp, #20]
    sprintf(buf_tx, "Start PER measurement...\n");
 80022e4:	f8df c15c 	ldr.w	ip, [pc, #348]	; 8002444 <per_meas+0x188>
 80022e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80022ec:	6020      	str	r0, [r4, #0]
 80022ee:	6061      	str	r1, [r4, #4]
 80022f0:	60a2      	str	r2, [r4, #8]
 80022f2:	60e3      	str	r3, [r4, #12]
 80022f4:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80022f8:	6120      	str	r0, [r4, #16]
 80022fa:	6161      	str	r1, [r4, #20]
 80022fc:	f8bc 3000 	ldrh.w	r3, [ip]
 8002300:	8323      	strh	r3, [r4, #24]
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8002302:	e006      	b.n	8002312 <per_meas+0x56>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8002304:	f3bf 8f5b 	dmb	ish
 8002308:	d112      	bne.n	8002330 <per_meas+0x74>
 800230a:	200a      	movs	r0, #10
 800230c:	2100      	movs	r1, #0
 800230e:	f00a f977 	bl	800c600 <z_impl_k_sleep>
 8002312:	4b4d      	ldr	r3, [pc, #308]	; (8002448 <per_meas+0x18c>)
 8002314:	f04f 0c00 	mov.w	ip, #0
 8002318:	f3bf 8f5b 	dmb	ish
 800231c:	e853 ef00 	ldrex	lr, [r3]
 8002320:	f1be 0f01 	cmp.w	lr, #1
 8002324:	d1ee      	bne.n	8002304 <per_meas+0x48>
 8002326:	e843 c200 	strex	r2, ip, [r3]
 800232a:	2a00      	cmp	r2, #0
 800232c:	d0ea      	beq.n	8002304 <per_meas+0x48>
 800232e:	e7f5      	b.n	800231c <per_meas+0x60>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8002330:	4620      	mov	r0, r4
 8002332:	f7fe fd90 	bl	8000e56 <strlen>
 8002336:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 8002338:	68bb      	ldr	r3, [r7, #8]
	return api->tx(dev, buf, len, timeout);
 800233a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800233e:	2300      	movs	r3, #0
 8002340:	4621      	mov	r1, r4
 8002342:	4638      	mov	r0, r7
 8002344:	47c8      	blx	r9
 8002346:	e003      	b.n	8002350 <per_meas+0x94>
 8002348:	2064      	movs	r0, #100	; 0x64
 800234a:	2100      	movs	r1, #0
 800234c:	f00a f958 	bl	800c600 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8002350:	f3bf 8f5b 	dmb	ish
 8002354:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <per_meas+0x18c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f3      	beq.n	8002348 <per_meas+0x8c>
	const struct lora_driver_api *api =
 8002360:	68ab      	ldr	r3, [r5, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2200      	movs	r2, #0
 8002366:	4611      	mov	r1, r2
 8002368:	4628      	mov	r0, r5
 800236a:	4798      	blx	r3
    uint32_t i = 0;
 800236c:	f04f 0900 	mov.w	r9, #0
 8002370:	e053      	b.n	800241a <per_meas+0x15e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8002372:	f3bf 8f5b 	dmb	ish
        if (atomic_cas(&atomic_cur_state, STATE_PER_MEAS_RUN, STATE_PER_MEAS_RUN)) {
 8002376:	d15f      	bne.n	8002438 <per_meas+0x17c>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002378:	ab06      	add	r3, sp, #24
 800237a:	f3bf 8f5b 	dmb	ish
 800237e:	e853 2f00 	ldrex	r2, [r3]
 8002382:	3201      	adds	r2, #1
 8002384:	e843 2100 	strex	r1, r2, [r3]
 8002388:	2900      	cmp	r1, #0
 800238a:	d1f8      	bne.n	800237e <per_meas+0xc2>
 800238c:	f3bf 8f5b 	dmb	ish
		arch_syscall_invoke2(*(uintptr_t *)&dst, *(uintptr_t *)&len, K_SYSCALL_SYS_RAND_GET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_sys_rand_get(dst, len);
 8002390:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800244c <per_meas+0x190>
 8002394:	2104      	movs	r1, #4
 8002396:	4650      	mov	r0, sl
 8002398:	f00d f916 	bl	800f5c8 <z_impl_sys_rand_get>
            lora_cfg->tx = true;
 800239c:	2301      	movs	r3, #1
 800239e:	7373      	strb	r3, [r6, #13]
	const struct lora_driver_api *api =
 80023a0:	68ab      	ldr	r3, [r5, #8]
	return api->config(dev, config);
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4631      	mov	r1, r6
 80023a6:	4628      	mov	r0, r5
 80023a8:	4798      	blx	r3
 80023aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80023ae:	2100      	movs	r1, #0
 80023b0:	f00a f926 	bl	800c600 <z_impl_k_sleep>
	const struct lora_driver_api *api =
 80023b4:	68ab      	ldr	r3, [r5, #8]
	return api->send(dev, data, data_len);
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2204      	movs	r2, #4
 80023ba:	4651      	mov	r1, sl
 80023bc:	4628      	mov	r0, r5
 80023be:	4798      	blx	r3
            lora_cfg->tx = false;
 80023c0:	2300      	movs	r3, #0
 80023c2:	7373      	strb	r3, [r6, #13]
	const struct lora_driver_api *api =
 80023c4:	68ab      	ldr	r3, [r5, #8]
	return api->config(dev, config);
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4631      	mov	r1, r6
 80023ca:	4628      	mov	r0, r5
 80023cc:	4798      	blx	r3
	const struct lora_driver_api *api =
 80023ce:	68ab      	ldr	r3, [r5, #8]
	return api->recv(dev, data, size, timeout, rssi, snr);
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f10d 021f 	add.w	r2, sp, #31
 80023d6:	9203      	str	r2, [sp, #12]
 80023d8:	aa07      	add	r2, sp, #28
 80023da:	9202      	str	r2, [sp, #8]
 80023dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023e0:	2100      	movs	r1, #0
 80023e2:	e9cd 0100 	strd	r0, r1, [sp]
 80023e6:	2204      	movs	r2, #4
 80023e8:	4919      	ldr	r1, [pc, #100]	; (8002450 <per_meas+0x194>)
 80023ea:	4628      	mov	r0, r5
 80023ec:	4798      	blx	r3
 80023ee:	4602      	mov	r2, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80023f0:	f3bf 8f5b 	dmb	ish
 80023f4:	9b06      	ldr	r3, [sp, #24]
 80023f6:	f3bf 8f5b 	dmb	ish
            print_data.packet_num = atomic_get(&atomic_packet_count);
 80023fa:	9305      	str	r3, [sp, #20]
            print_data.rssi = rssi;
 80023fc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8002400:	f8ad 3012 	strh.w	r3, [sp, #18]
            print_data.snr = snr;
 8002404:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8002408:	f88d 3010 	strb.w	r3, [sp, #16]
            print_per_status(uart_dev, buf_tx, ret, &print_data);
 800240c:	ab04      	add	r3, sp, #16
 800240e:	4621      	mov	r1, r4
 8002410:	4638      	mov	r0, r7
 8002412:	f7ff fecb 	bl	80021ac <print_per_status>
            i++;
 8002416:	f109 0901 	add.w	r9, r9, #1
    while (i < per_num) {
 800241a:	45c1      	cmp	r9, r8
 800241c:	d20c      	bcs.n	8002438 <per_meas+0x17c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <per_meas+0x198>)
 8002420:	2202      	movs	r2, #2
 8002422:	f3bf 8f5b 	dmb	ish
 8002426:	e853 1f00 	ldrex	r1, [r3]
 800242a:	4291      	cmp	r1, r2
 800242c:	d1a1      	bne.n	8002372 <per_meas+0xb6>
 800242e:	e843 2000 	strex	r0, r2, [r3]
 8002432:	2800      	cmp	r0, #0
 8002434:	d09d      	beq.n	8002372 <per_meas+0xb6>
 8002436:	e7f6      	b.n	8002426 <per_meas+0x16a>
}
 8002438:	b008      	add	sp, #32
 800243a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800243e:	bf00      	nop
 8002440:	20000d80 	.word	0x20000d80
 8002444:	08012430 	.word	0x08012430
 8002448:	200002a4 	.word	0x200002a4
 800244c:	20000e08 	.word	0x20000e08
 8002450:	20000e04 	.word	0x20000e04
 8002454:	200002a0 	.word	0x200002a0

08002458 <stop_session>:


void stop_session(const struct device *lora_dev, const struct device *uart_dev, uint8_t *buf_tx) {
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	460c      	mov	r4, r1
	const struct lora_driver_api *api =
 800245c:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	2200      	movs	r2, #0
 8002462:	4611      	mov	r1, r2
 8002464:	4798      	blx	r3
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8002466:	e006      	b.n	8002476 <stop_session+0x1e>
 8002468:	f3bf 8f5b 	dmb	ish
 800246c:	d110      	bne.n	8002490 <stop_session+0x38>
 800246e:	200a      	movs	r0, #10
 8002470:	2100      	movs	r1, #0
 8002472:	f00a f8c5 	bl	800c600 <z_impl_k_sleep>
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <stop_session+0x68>)
 8002478:	2200      	movs	r2, #0
 800247a:	f3bf 8f5b 	dmb	ish
 800247e:	e853 0f00 	ldrex	r0, [r3]
 8002482:	2801      	cmp	r0, #1
 8002484:	d1f0      	bne.n	8002468 <stop_session+0x10>
 8002486:	e843 2100 	strex	r1, r2, [r3]
 800248a:	2900      	cmp	r1, #0
 800248c:	d0ec      	beq.n	8002468 <stop_session+0x10>
 800248e:	e7f6      	b.n	800247e <stop_session+0x26>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8002490:	4d0c      	ldr	r5, [pc, #48]	; (80024c4 <stop_session+0x6c>)
 8002492:	4628      	mov	r0, r5
 8002494:	f7fe fcdf 	bl	8000e56 <strlen>
 8002498:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 800249a:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 800249c:	685e      	ldr	r6, [r3, #4]
 800249e:	2300      	movs	r3, #0
 80024a0:	4629      	mov	r1, r5
 80024a2:	4620      	mov	r0, r4
 80024a4:	47b0      	blx	r6
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80024a6:	f3bf 8f5b 	dmb	ish
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <stop_session+0x68>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 80024b2:	b923      	cbnz	r3, 80024be <stop_session+0x66>
 80024b4:	2064      	movs	r0, #100	; 0x64
 80024b6:	2100      	movs	r1, #0
 80024b8:	f00a f8a2 	bl	800c600 <z_impl_k_sleep>
 80024bc:	e7f3      	b.n	80024a6 <stop_session+0x4e>
    lora_recv_async(lora_dev, NULL, NULL);
    send_to_terminal(uart_dev, "Session stopped, modem released.\n");
}
 80024be:	bd70      	pop	{r4, r5, r6, pc}
 80024c0:	200002a4 	.word	0x200002a4
 80024c4:	0801244c 	.word	0x0801244c

080024c8 <event_cb>:

/**
 * Structs and enums area end
 * */

void event_cb(const struct device* dev, struct uart_event* evt, void* user_data) {
 80024c8:	b508      	push	{r3, lr}
    switch (evt->type) {
 80024ca:	780b      	ldrb	r3, [r1, #0]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d013      	beq.n	80024f8 <event_cb+0x30>
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d00d      	beq.n	80024f0 <event_cb+0x28>
 80024d4:	b95b      	cbnz	r3, 80024ee <event_cb+0x26>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <event_cb+0x38>)
 80024d8:	2201      	movs	r2, #1
 80024da:	f3bf 8f5b 	dmb	ish
 80024de:	e853 1f00 	ldrex	r1, [r3]
 80024e2:	e843 2000 	strex	r0, r2, [r3]
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d1f9      	bne.n	80024de <event_cb+0x16>
 80024ea:	f3bf 8f5b 	dmb	ish
            uart_rx_disable(dev);
            break;
        case UART_RX_STOPPED:
            break;
    }
}
 80024ee:	bd08      	pop	{r3, pc}
            k_work_submit(&work_uart_data_proc);
 80024f0:	4804      	ldr	r0, [pc, #16]	; (8002504 <event_cb+0x3c>)
 80024f2:	f009 fcaf 	bl	800be54 <k_work_submit>
            break;
 80024f6:	e7fa      	b.n	80024ee <event_cb+0x26>
__syscall int uart_rx_disable(const struct device *dev);

static inline int z_impl_uart_rx_disable(const struct device *dev)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
 80024f8:	6883      	ldr	r3, [r0, #8]
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	4798      	blx	r3
}
 80024fe:	e7f6      	b.n	80024ee <event_cb+0x26>
 8002500:	200002a4 	.word	0x200002a4
 8002504:	20000e60 	.word	0x20000e60

08002508 <work_uart_data_proc_handler>:


void work_uart_data_proc_handler(struct k_work *item)
{
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	b082      	sub	sp, #8
    static const struct device* uart_dev;
    struct parsed_frame_s parsed_frame = {0};
 800250c:	2300      	movs	r3, #0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	9301      	str	r3, [sp, #4]
    /* Select current command */
    parsed_frame.cmd_ptr = strtok((char*)(&uart_buf_rx), "=");
 8002512:	4da5      	ldr	r5, [pc, #660]	; (80027a8 <work_uart_data_proc_handler+0x2a0>)
 8002514:	49a5      	ldr	r1, [pc, #660]	; (80027ac <work_uart_data_proc_handler+0x2a4>)
 8002516:	4628      	mov	r0, r5
 8002518:	f00b fa0a 	bl	800d930 <strtok>
 800251c:	4604      	mov	r4, r0
 800251e:	9000      	str	r0, [sp, #0]
    /* Select command argument */
    parsed_frame.arg = atoi(strtok((char*)(&uart_buf_rx[strlen(parsed_frame.cmd_ptr) + 1]), "\n"));
 8002520:	f7fe fc99 	bl	8000e56 <strlen>
 8002524:	3001      	adds	r0, #1
 8002526:	49a2      	ldr	r1, [pc, #648]	; (80027b0 <work_uart_data_proc_handler+0x2a8>)
 8002528:	4428      	add	r0, r5
 800252a:	f00b fa01 	bl	800d930 <strtok>
 800252e:	f00e feb2 	bl	8011296 <atoi>
 8002532:	4605      	mov	r5, r0
 8002534:	9001      	str	r0, [sp, #4]

    if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_PER)) { /* Set PER measurement */
 8002536:	499f      	ldr	r1, [pc, #636]	; (80027b4 <work_uart_data_proc_handler+0x2ac>)
 8002538:	4620      	mov	r0, r4
 800253a:	f7fe fc82 	bl	8000e42 <strcmp>
 800253e:	b9c0      	cbnz	r0, 8002572 <work_uart_data_proc_handler+0x6a>
 8002540:	4b9d      	ldr	r3, [pc, #628]	; (80027b8 <work_uart_data_proc_handler+0x2b0>)
 8002542:	2201      	movs	r2, #1
 8002544:	f3bf 8f5b 	dmb	ish
 8002548:	e853 1f00 	ldrex	r1, [r3]
 800254c:	e843 2000 	strex	r0, r2, [r3]
 8002550:	2800      	cmp	r0, #0
 8002552:	d1f9      	bne.n	8002548 <work_uart_data_proc_handler+0x40>
 8002554:	f3bf 8f5b 	dmb	ish
 8002558:	4b98      	ldr	r3, [pc, #608]	; (80027bc <work_uart_data_proc_handler+0x2b4>)
 800255a:	f3bf 8f5b 	dmb	ish
 800255e:	e853 2f00 	ldrex	r2, [r3]
 8002562:	e843 5100 	strex	r1, r5, [r3]
 8002566:	2900      	cmp	r1, #0
 8002568:	d1f9      	bne.n	800255e <work_uart_data_proc_handler+0x56>
 800256a:	f3bf 8f5b 	dmb	ish
        atomic_set(&atomic_cur_state, STATE_SET_SF);

    } else {
        atomic_set(&atomic_cur_state, STATE_IDLE);
    }
}
 800256e:	b002      	add	sp, #8
 8002570:	bd70      	pop	{r4, r5, r6, pc}
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_STOP_RECEIVE_SESSION)) { /* Stop receive */
 8002572:	4993      	ldr	r1, [pc, #588]	; (80027c0 <work_uart_data_proc_handler+0x2b8>)
 8002574:	4620      	mov	r0, r4
 8002576:	f7fe fc64 	bl	8000e42 <strcmp>
 800257a:	2800      	cmp	r0, #0
 800257c:	d13e      	bne.n	80025fc <work_uart_data_proc_handler+0xf4>
 800257e:	4b8e      	ldr	r3, [pc, #568]	; (80027b8 <work_uart_data_proc_handler+0x2b0>)
 8002580:	220a      	movs	r2, #10
 8002582:	f3bf 8f5b 	dmb	ish
 8002586:	e853 1f00 	ldrex	r1, [r3]
 800258a:	e843 2000 	strex	r0, r2, [r3]
 800258e:	2800      	cmp	r0, #0
 8002590:	d1f9      	bne.n	8002586 <work_uart_data_proc_handler+0x7e>
 8002592:	f3bf 8f5b 	dmb	ish
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8002596:	488b      	ldr	r0, [pc, #556]	; (80027c4 <work_uart_data_proc_handler+0x2bc>)
 8002598:	f008 ff86 	bl	800b4a8 <z_impl_device_get_binding>
 800259c:	4604      	mov	r4, r0
        uart_dev = device_get_binding(CURRENT_UART_DEVICE);
 800259e:	4b8a      	ldr	r3, [pc, #552]	; (80027c8 <work_uart_data_proc_handler+0x2c0>)
 80025a0:	6018      	str	r0, [r3, #0]
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 80025a2:	e006      	b.n	80025b2 <work_uart_data_proc_handler+0xaa>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80025a4:	f3bf 8f5b 	dmb	ish
 80025a8:	d110      	bne.n	80025cc <work_uart_data_proc_handler+0xc4>
 80025aa:	200a      	movs	r0, #10
 80025ac:	2100      	movs	r1, #0
 80025ae:	f00a f827 	bl	800c600 <z_impl_k_sleep>
 80025b2:	4b86      	ldr	r3, [pc, #536]	; (80027cc <work_uart_data_proc_handler+0x2c4>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	f3bf 8f5b 	dmb	ish
 80025ba:	e853 1f00 	ldrex	r1, [r3]
 80025be:	2901      	cmp	r1, #1
 80025c0:	d1f0      	bne.n	80025a4 <work_uart_data_proc_handler+0x9c>
 80025c2:	e843 2000 	strex	r0, r2, [r3]
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d0ec      	beq.n	80025a4 <work_uart_data_proc_handler+0x9c>
 80025ca:	e7f6      	b.n	80025ba <work_uart_data_proc_handler+0xb2>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 80025cc:	4d80      	ldr	r5, [pc, #512]	; (80027d0 <work_uart_data_proc_handler+0x2c8>)
 80025ce:	4628      	mov	r0, r5
 80025d0:	f7fe fc41 	bl	8000e56 <strlen>
 80025d4:	4602      	mov	r2, r0
	const struct uart_driver_api *api =
 80025d6:	68a3      	ldr	r3, [r4, #8]
	return api->tx(dev, buf, len, timeout);
 80025d8:	685e      	ldr	r6, [r3, #4]
 80025da:	2300      	movs	r3, #0
 80025dc:	4629      	mov	r1, r5
 80025de:	4620      	mov	r0, r4
 80025e0:	47b0      	blx	r6
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80025e2:	f3bf 8f5b 	dmb	ish
 80025e6:	4b79      	ldr	r3, [pc, #484]	; (80027cc <work_uart_data_proc_handler+0x2c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1bd      	bne.n	800256e <work_uart_data_proc_handler+0x66>
 80025f2:	2064      	movs	r0, #100	; 0x64
 80025f4:	2100      	movs	r1, #0
 80025f6:	f00a f803 	bl	800c600 <z_impl_k_sleep>
 80025fa:	e7f2      	b.n	80025e2 <work_uart_data_proc_handler+0xda>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_GET_CFG)) { /* Get lora modem configuration parameters */
 80025fc:	4975      	ldr	r1, [pc, #468]	; (80027d4 <work_uart_data_proc_handler+0x2cc>)
 80025fe:	4620      	mov	r0, r4
 8002600:	f7fe fc1f 	bl	8000e42 <strcmp>
 8002604:	b960      	cbnz	r0, 8002620 <work_uart_data_proc_handler+0x118>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8002606:	4b6c      	ldr	r3, [pc, #432]	; (80027b8 <work_uart_data_proc_handler+0x2b0>)
 8002608:	2205      	movs	r2, #5
 800260a:	f3bf 8f5b 	dmb	ish
 800260e:	e853 1f00 	ldrex	r1, [r3]
 8002612:	e843 2000 	strex	r0, r2, [r3]
 8002616:	2800      	cmp	r0, #0
 8002618:	d1f9      	bne.n	800260e <work_uart_data_proc_handler+0x106>
 800261a:	f3bf 8f5b 	dmb	ish
 800261e:	e7a6      	b.n	800256e <work_uart_data_proc_handler+0x66>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_INCR_FREQ)) { /* Increment current frequency on 100 kHz */
 8002620:	496d      	ldr	r1, [pc, #436]	; (80027d8 <work_uart_data_proc_handler+0x2d0>)
 8002622:	4620      	mov	r0, r4
 8002624:	f7fe fc0d 	bl	8000e42 <strcmp>
 8002628:	b960      	cbnz	r0, 8002644 <work_uart_data_proc_handler+0x13c>
 800262a:	4b63      	ldr	r3, [pc, #396]	; (80027b8 <work_uart_data_proc_handler+0x2b0>)
 800262c:	2207      	movs	r2, #7
 800262e:	f3bf 8f5b 	dmb	ish
 8002632:	e853 1f00 	ldrex	r1, [r3]
 8002636:	e843 2000 	strex	r0, r2, [r3]
 800263a:	2800      	cmp	r0, #0
 800263c:	d1f9      	bne.n	8002632 <work_uart_data_proc_handler+0x12a>
 800263e:	f3bf 8f5b 	dmb	ish
 8002642:	e794      	b.n	800256e <work_uart_data_proc_handler+0x66>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_DECR_FREQ)) { /* Decrement current frequency on 100 kHz */
 8002644:	4965      	ldr	r1, [pc, #404]	; (80027dc <work_uart_data_proc_handler+0x2d4>)
 8002646:	4620      	mov	r0, r4
 8002648:	f7fe fbfb 	bl	8000e42 <strcmp>
 800264c:	b960      	cbnz	r0, 8002668 <work_uart_data_proc_handler+0x160>
 800264e:	4b5a      	ldr	r3, [pc, #360]	; (80027b8 <work_uart_data_proc_handler+0x2b0>)
 8002650:	2208      	movs	r2, #8
 8002652:	f3bf 8f5b 	dmb	ish
 8002656:	e853 1f00 	ldrex	r1, [r3]
 800265a:	e843 2000 	strex	r0, r2, [r3]
 800265e:	2800      	cmp	r0, #0
 8002660:	d1f9      	bne.n	8002656 <work_uart_data_proc_handler+0x14e>
 8002662:	f3bf 8f5b 	dmb	ish
 8002666:	e782      	b.n	800256e <work_uart_data_proc_handler+0x66>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_SET_FREQ)) { /* Change frequency value in lora configuration param */
 8002668:	495d      	ldr	r1, [pc, #372]	; (80027e0 <work_uart_data_proc_handler+0x2d8>)
 800266a:	4620      	mov	r0, r4
 800266c:	f7fe fbe9 	bl	8000e42 <strcmp>
 8002670:	b9b8      	cbnz	r0, 80026a2 <work_uart_data_proc_handler+0x19a>
 8002672:	4b5c      	ldr	r3, [pc, #368]	; (80027e4 <work_uart_data_proc_handler+0x2dc>)
 8002674:	f3bf 8f5b 	dmb	ish
 8002678:	e853 2f00 	ldrex	r2, [r3]
 800267c:	e843 5100 	strex	r1, r5, [r3]
 8002680:	2900      	cmp	r1, #0
 8002682:	d1f9      	bne.n	8002678 <work_uart_data_proc_handler+0x170>
 8002684:	f3bf 8f5b 	dmb	ish
 8002688:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <work_uart_data_proc_handler+0x2b0>)
 800268a:	2206      	movs	r2, #6
 800268c:	f3bf 8f5b 	dmb	ish
 8002690:	e853 1f00 	ldrex	r1, [r3]
 8002694:	e843 2000 	strex	r0, r2, [r3]
 8002698:	2800      	cmp	r0, #0
 800269a:	d1f9      	bne.n	8002690 <work_uart_data_proc_handler+0x188>
 800269c:	f3bf 8f5b 	dmb	ish
 80026a0:	e765      	b.n	800256e <work_uart_data_proc_handler+0x66>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_SET_SF)) { /* Change SF value in lora configuration param */
 80026a2:	4951      	ldr	r1, [pc, #324]	; (80027e8 <work_uart_data_proc_handler+0x2e0>)
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7fe fbcc 	bl	8000e42 <strcmp>
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d16f      	bne.n	800278e <work_uart_data_proc_handler+0x286>
        switch (parsed_frame.arg) {
 80026ae:	1fab      	subs	r3, r5, #6
 80026b0:	2b06      	cmp	r3, #6
 80026b2:	d811      	bhi.n	80026d8 <work_uart_data_proc_handler+0x1d0>
 80026b4:	e8df f003 	tbb	[pc, r3]
 80026b8:	3744515e 	.word	0x3744515e
 80026bc:	1d2a      	.short	0x1d2a
 80026be:	04          	.byte	0x04
 80026bf:	00          	.byte	0x00
 80026c0:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <work_uart_data_proc_handler+0x2e4>)
 80026c2:	220c      	movs	r2, #12
 80026c4:	f3bf 8f5b 	dmb	ish
 80026c8:	e853 1f00 	ldrex	r1, [r3]
 80026cc:	e843 2000 	strex	r0, r2, [r3]
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d1f9      	bne.n	80026c8 <work_uart_data_proc_handler+0x1c0>
 80026d4:	f3bf 8f5b 	dmb	ish
 80026d8:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <work_uart_data_proc_handler+0x2b0>)
 80026da:	2209      	movs	r2, #9
 80026dc:	f3bf 8f5b 	dmb	ish
 80026e0:	e853 1f00 	ldrex	r1, [r3]
 80026e4:	e843 2000 	strex	r0, r2, [r3]
 80026e8:	2800      	cmp	r0, #0
 80026ea:	d1f9      	bne.n	80026e0 <work_uart_data_proc_handler+0x1d8>
 80026ec:	f3bf 8f5b 	dmb	ish
 80026f0:	e73d      	b.n	800256e <work_uart_data_proc_handler+0x66>
 80026f2:	4b3e      	ldr	r3, [pc, #248]	; (80027ec <work_uart_data_proc_handler+0x2e4>)
 80026f4:	220b      	movs	r2, #11
 80026f6:	f3bf 8f5b 	dmb	ish
 80026fa:	e853 1f00 	ldrex	r1, [r3]
 80026fe:	e843 2000 	strex	r0, r2, [r3]
 8002702:	2800      	cmp	r0, #0
 8002704:	d1f9      	bne.n	80026fa <work_uart_data_proc_handler+0x1f2>
 8002706:	f3bf 8f5b 	dmb	ish
 800270a:	e7e5      	b.n	80026d8 <work_uart_data_proc_handler+0x1d0>
 800270c:	4b37      	ldr	r3, [pc, #220]	; (80027ec <work_uart_data_proc_handler+0x2e4>)
 800270e:	220a      	movs	r2, #10
 8002710:	f3bf 8f5b 	dmb	ish
 8002714:	e853 1f00 	ldrex	r1, [r3]
 8002718:	e843 2000 	strex	r0, r2, [r3]
 800271c:	2800      	cmp	r0, #0
 800271e:	d1f9      	bne.n	8002714 <work_uart_data_proc_handler+0x20c>
 8002720:	f3bf 8f5b 	dmb	ish
 8002724:	e7d8      	b.n	80026d8 <work_uart_data_proc_handler+0x1d0>
 8002726:	4b31      	ldr	r3, [pc, #196]	; (80027ec <work_uart_data_proc_handler+0x2e4>)
 8002728:	2209      	movs	r2, #9
 800272a:	f3bf 8f5b 	dmb	ish
 800272e:	e853 1f00 	ldrex	r1, [r3]
 8002732:	e843 2000 	strex	r0, r2, [r3]
 8002736:	2800      	cmp	r0, #0
 8002738:	d1f9      	bne.n	800272e <work_uart_data_proc_handler+0x226>
 800273a:	f3bf 8f5b 	dmb	ish
 800273e:	e7cb      	b.n	80026d8 <work_uart_data_proc_handler+0x1d0>
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <work_uart_data_proc_handler+0x2e4>)
 8002742:	2208      	movs	r2, #8
 8002744:	f3bf 8f5b 	dmb	ish
 8002748:	e853 1f00 	ldrex	r1, [r3]
 800274c:	e843 2000 	strex	r0, r2, [r3]
 8002750:	2800      	cmp	r0, #0
 8002752:	d1f9      	bne.n	8002748 <work_uart_data_proc_handler+0x240>
 8002754:	f3bf 8f5b 	dmb	ish
 8002758:	e7be      	b.n	80026d8 <work_uart_data_proc_handler+0x1d0>
 800275a:	4b24      	ldr	r3, [pc, #144]	; (80027ec <work_uart_data_proc_handler+0x2e4>)
 800275c:	2207      	movs	r2, #7
 800275e:	f3bf 8f5b 	dmb	ish
 8002762:	e853 1f00 	ldrex	r1, [r3]
 8002766:	e843 2000 	strex	r0, r2, [r3]
 800276a:	2800      	cmp	r0, #0
 800276c:	d1f9      	bne.n	8002762 <work_uart_data_proc_handler+0x25a>
 800276e:	f3bf 8f5b 	dmb	ish
 8002772:	e7b1      	b.n	80026d8 <work_uart_data_proc_handler+0x1d0>
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <work_uart_data_proc_handler+0x2e4>)
 8002776:	2206      	movs	r2, #6
 8002778:	f3bf 8f5b 	dmb	ish
 800277c:	e853 1f00 	ldrex	r1, [r3]
 8002780:	e843 2000 	strex	r0, r2, [r3]
 8002784:	2800      	cmp	r0, #0
 8002786:	d1f9      	bne.n	800277c <work_uart_data_proc_handler+0x274>
 8002788:	f3bf 8f5b 	dmb	ish
 800278c:	e7a4      	b.n	80026d8 <work_uart_data_proc_handler+0x1d0>
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <work_uart_data_proc_handler+0x2b0>)
 8002790:	2200      	movs	r2, #0
 8002792:	f3bf 8f5b 	dmb	ish
 8002796:	e853 1f00 	ldrex	r1, [r3]
 800279a:	e843 2000 	strex	r0, r2, [r3]
 800279e:	2800      	cmp	r0, #0
 80027a0:	d1f9      	bne.n	8002796 <work_uart_data_proc_handler+0x28e>
 80027a2:	f3bf 8f5b 	dmb	ish
}
 80027a6:	e6e2      	b.n	800256e <work_uart_data_proc_handler+0x66>
 80027a8:	20000e0c 	.word	0x20000e0c
 80027ac:	08012470 	.word	0x08012470
 80027b0:	080123fc 	.word	0x080123fc
 80027b4:	08012474 	.word	0x08012474
 80027b8:	200002a0 	.word	0x200002a0
 80027bc:	20000d80 	.word	0x20000d80
 80027c0:	08012478 	.word	0x08012478
 80027c4:	08012480 	.word	0x08012480
 80027c8:	20000e5c 	.word	0x20000e5c
 80027cc:	200002a4 	.word	0x200002a4
 80027d0:	08012488 	.word	0x08012488
 80027d4:	080124b8 	.word	0x080124b8
 80027d8:	080124c0 	.word	0x080124c0
 80027dc:	080124c8 	.word	0x080124c8
 80027e0:	080124d0 	.word	0x080124d0
 80027e4:	200002a8 	.word	0x200002a8
 80027e8:	080124dc 	.word	0x080124dc
 80027ec:	200002ac 	.word	0x200002ac

080027f0 <common_task>:


_Noreturn void common_task(void)
{
 80027f0:	b500      	push	{lr}
 80027f2:	b08d      	sub	sp, #52	; 0x34
    volatile int32_t ret = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	930b      	str	r3, [sp, #44]	; 0x2c
    struct print_data_elem_s print_data = {0};
 80027f8:	9309      	str	r3, [sp, #36]	; 0x24
 80027fa:	930a      	str	r3, [sp, #40]	; 0x28

    struct lora_modem_config lora_cfg = {
 80027fc:	9305      	str	r3, [sp, #20]
 80027fe:	9306      	str	r3, [sp, #24]
 8002800:	9307      	str	r3, [sp, #28]
 8002802:	9308      	str	r3, [sp, #32]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8002804:	f3bf 8f5b 	dmb	ish
 8002808:	4ba1      	ldr	r3, [pc, #644]	; (8002a90 <common_task+0x2a0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f3bf 8f5b 	dmb	ish
 8002810:	9305      	str	r3, [sp, #20]
 8002812:	f3bf 8f5b 	dmb	ish
 8002816:	4b9f      	ldr	r3, [pc, #636]	; (8002a94 <common_task+0x2a4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f3bf 8f5b 	dmb	ish
 800281e:	f88d 3019 	strb.w	r3, [sp, #25]
 8002822:	2301      	movs	r3, #1
 8002824:	f88d 301a 	strb.w	r3, [sp, #26]
 8002828:	2308      	movs	r3, #8
 800282a:	f8ad 301c 	strh.w	r3, [sp, #28]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 800282e:	489a      	ldr	r0, [pc, #616]	; (8002a98 <common_task+0x2a8>)
 8002830:	f00e f8e8 	bl	8010a04 <z_device_is_ready>
    /**
     * Radio initialization area begin
     * */
    /* Init radio */
    lora_dev = DEVICE_DT_GET(DEFAULT_RADIO_NODE);
    if (!device_is_ready(lora_dev)) {
 8002834:	b1e8      	cbz	r0, 8002872 <common_task+0x82>
	const struct lora_driver_api *api =
 8002836:	4898      	ldr	r0, [pc, #608]	; (8002a98 <common_task+0x2a8>)
 8002838:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	a905      	add	r1, sp, #20
 800283e:	4798      	blx	r3
        LOG_DBG("Device not ready: %s", lora_dev->name);
        k_sleep(K_FOREVER);
    }

    ret = lora_config(lora_dev, &lora_cfg);
 8002840:	900b      	str	r0, [sp, #44]	; 0x2c
    if (ret < 0) {
 8002842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002844:	2b00      	cmp	r3, #0
 8002846:	db28      	blt.n	800289a <common_task+0xaa>
    * */

    /**
     * UART initialization area begin
     * */
    k_work_init(&work_uart_data_proc, work_uart_data_proc_handler);
 8002848:	4994      	ldr	r1, [pc, #592]	; (8002a9c <common_task+0x2ac>)
 800284a:	4895      	ldr	r0, [pc, #596]	; (8002aa0 <common_task+0x2b0>)
 800284c:	f00e fa08 	bl	8010c60 <k_work_init>
 8002850:	4894      	ldr	r0, [pc, #592]	; (8002aa4 <common_task+0x2b4>)
 8002852:	f008 fe29 	bl	800b4a8 <z_impl_device_get_binding>
 8002856:	4604      	mov	r4, r0
 8002858:	f00e f8d4 	bl	8010a04 <z_device_is_ready>

    /* Init UART*/
    uart_dev = device_get_binding(CURRENT_UART_DEVICE);
    if (!device_is_ready(uart_dev)) {
 800285c:	2800      	cmp	r0, #0
 800285e:	d031      	beq.n	80028c4 <common_task+0xd4>
	const struct uart_driver_api *api =
 8002860:	68a3      	ldr	r3, [r4, #8]
	if (api->callback_set == NULL) {
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d050      	beq.n	800290a <common_task+0x11a>
	return api->callback_set(dev, callback, user_data);
 8002868:	2200      	movs	r2, #0
 800286a:	498f      	ldr	r1, [pc, #572]	; (8002aa8 <common_task+0x2b8>)
 800286c:	4620      	mov	r0, r4
 800286e:	4798      	blx	r3
 8002870:	e04b      	b.n	800290a <common_task+0x11a>
        LOG_DBG("Device not ready: %s", lora_dev->name);
 8002872:	4b89      	ldr	r3, [pc, #548]	; (8002a98 <common_task+0x2a8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	9303      	str	r3, [sp, #12]
 8002878:	4b8c      	ldr	r3, [pc, #560]	; (8002aac <common_task+0x2bc>)
 800287a:	9302      	str	r3, [sp, #8]
 800287c:	4b8c      	ldr	r3, [pc, #560]	; (8002ab0 <common_task+0x2c0>)
 800287e:	9301      	str	r3, [sp, #4]
 8002880:	9000      	str	r0, [sp, #0]
 8002882:	4603      	mov	r3, r0
 8002884:	2204      	movs	r2, #4
 8002886:	498b      	ldr	r1, [pc, #556]	; (8002ab4 <common_task+0x2c4>)
 8002888:	f00c f9c0 	bl	800ec0c <z_log_msg2_runtime_create>
 800288c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002894:	f009 feb4 	bl	800c600 <z_impl_k_sleep>
 8002898:	e7cd      	b.n	8002836 <common_task+0x46>
        LOG_DBG("Device not configure: %s", lora_dev->name);
 800289a:	4b7f      	ldr	r3, [pc, #508]	; (8002a98 <common_task+0x2a8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	9303      	str	r3, [sp, #12]
 80028a0:	4b82      	ldr	r3, [pc, #520]	; (8002aac <common_task+0x2bc>)
 80028a2:	9302      	str	r3, [sp, #8]
 80028a4:	4b84      	ldr	r3, [pc, #528]	; (8002ab8 <common_task+0x2c8>)
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	2000      	movs	r0, #0
 80028aa:	9000      	str	r0, [sp, #0]
 80028ac:	4603      	mov	r3, r0
 80028ae:	2204      	movs	r2, #4
 80028b0:	4980      	ldr	r1, [pc, #512]	; (8002ab4 <common_task+0x2c4>)
 80028b2:	f00c f9ab 	bl	800ec0c <z_log_msg2_runtime_create>
 80028b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028be:	f009 fe9f 	bl	800c600 <z_impl_k_sleep>
 80028c2:	e7c1      	b.n	8002848 <common_task+0x58>
        LOG_DBG("Device not ready: %s", uart_dev->name);
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	9303      	str	r3, [sp, #12]
 80028c8:	4b78      	ldr	r3, [pc, #480]	; (8002aac <common_task+0x2bc>)
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	4b78      	ldr	r3, [pc, #480]	; (8002ab0 <common_task+0x2c0>)
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	9000      	str	r0, [sp, #0]
 80028d2:	4603      	mov	r3, r0
 80028d4:	2204      	movs	r2, #4
 80028d6:	4977      	ldr	r1, [pc, #476]	; (8002ab4 <common_task+0x2c4>)
 80028d8:	f00c f998 	bl	800ec0c <z_log_msg2_runtime_create>
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028e4:	f009 fe8c 	bl	800c600 <z_impl_k_sleep>
 80028e8:	e7ba      	b.n	8002860 <common_task+0x70>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80028ea:	f3bf 8f5b 	dmb	ish
    * UART initialization area end
    * */


    while(1) {
        if (atomic_cas(&atomic_cur_state, STATE_RECV, STATE_IDLE)) { /* This is start state */
 80028ee:	d119      	bne.n	8002924 <common_task+0x134>
	const struct uart_driver_api *api =
 80028f0:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 80028f2:	68dd      	ldr	r5, [r3, #12]
 80028f4:	4613      	mov	r3, r2
 80028f6:	2210      	movs	r2, #16
 80028f8:	4970      	ldr	r1, [pc, #448]	; (8002abc <common_task+0x2cc>)
 80028fa:	4620      	mov	r0, r4
 80028fc:	47a8      	blx	r5
	const struct lora_driver_api *api =
 80028fe:	4866      	ldr	r0, [pc, #408]	; (8002a98 <common_task+0x2a8>)
 8002900:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	4a6e      	ldr	r2, [pc, #440]	; (8002ac0 <common_task+0x2d0>)
 8002906:	496f      	ldr	r1, [pc, #444]	; (8002ac4 <common_task+0x2d4>)
 8002908:	4798      	blx	r3
 800290a:	4b6f      	ldr	r3, [pc, #444]	; (8002ac8 <common_task+0x2d8>)
 800290c:	2200      	movs	r2, #0
 800290e:	f3bf 8f5b 	dmb	ish
 8002912:	e853 1f00 	ldrex	r1, [r3]
 8002916:	2903      	cmp	r1, #3
 8002918:	d1e7      	bne.n	80028ea <common_task+0xfa>
 800291a:	e843 2000 	strex	r0, r2, [r3]
 800291e:	2800      	cmp	r0, #0
 8002920:	d0e3      	beq.n	80028ea <common_task+0xfa>
 8002922:	e7f6      	b.n	8002912 <common_task+0x122>
 8002924:	4b68      	ldr	r3, [pc, #416]	; (8002ac8 <common_task+0x2d8>)
 8002926:	2200      	movs	r2, #0
 8002928:	f3bf 8f5b 	dmb	ish
 800292c:	e853 1f00 	ldrex	r1, [r3]
 8002930:	2904      	cmp	r1, #4
 8002932:	d103      	bne.n	800293c <common_task+0x14c>
 8002934:	e843 2000 	strex	r0, r2, [r3]
 8002938:	2800      	cmp	r0, #0
 800293a:	d1f7      	bne.n	800292c <common_task+0x13c>
 800293c:	f3bf 8f5b 	dmb	ish

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            lora_recv_async(lora_dev, lora_receive_cb, lora_rx_error_timeout_cb);

        } else if (atomic_cas(&atomic_cur_state, STATE_TRANSMIT, STATE_IDLE)) {
 8002940:	d121      	bne.n	8002986 <common_task+0x196>

            /* Receive stopped into callback function */
            lora_cfg.tx = true;
 8002942:	2301      	movs	r3, #1
 8002944:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	const struct lora_driver_api *api =
 8002948:	4d53      	ldr	r5, [pc, #332]	; (8002a98 <common_task+0x2a8>)
 800294a:	68ae      	ldr	r6, [r5, #8]
	return api->config(dev, config);
 800294c:	6833      	ldr	r3, [r6, #0]
 800294e:	a905      	add	r1, sp, #20
 8002950:	4628      	mov	r0, r5
 8002952:	4798      	blx	r3
	return api->send(dev, data, data_len);
 8002954:	6873      	ldr	r3, [r6, #4]
 8002956:	2204      	movs	r2, #4
 8002958:	495c      	ldr	r1, [pc, #368]	; (8002acc <common_task+0x2dc>)
 800295a:	4628      	mov	r0, r5
 800295c:	4798      	blx	r3
	return api->recv_async(dev, cb, error_timeout_cb);
 800295e:	6933      	ldr	r3, [r6, #16]
 8002960:	4a57      	ldr	r2, [pc, #348]	; (8002ac0 <common_task+0x2d0>)
 8002962:	4958      	ldr	r1, [pc, #352]	; (8002ac4 <common_task+0x2d4>)
 8002964:	4628      	mov	r0, r5
 8002966:	4798      	blx	r3
 8002968:	4b57      	ldr	r3, [pc, #348]	; (8002ac8 <common_task+0x2d8>)
 800296a:	2203      	movs	r2, #3
 800296c:	f3bf 8f5b 	dmb	ish
 8002970:	e853 1f00 	ldrex	r1, [r3]
 8002974:	2904      	cmp	r1, #4
 8002976:	d103      	bne.n	8002980 <common_task+0x190>
 8002978:	e843 2000 	strex	r0, r2, [r3]
 800297c:	2800      	cmp	r0, #0
 800297e:	d1f7      	bne.n	8002970 <common_task+0x180>
 8002980:	f3bf 8f5b 	dmb	ish
 8002984:	e7c1      	b.n	800290a <common_task+0x11a>
 8002986:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <common_task+0x2d8>)
 8002988:	2202      	movs	r2, #2
 800298a:	f3bf 8f5b 	dmb	ish
 800298e:	e853 1f00 	ldrex	r1, [r3]
 8002992:	2901      	cmp	r1, #1
 8002994:	d103      	bne.n	800299e <common_task+0x1ae>
 8002996:	e843 2000 	strex	r0, r2, [r3]
 800299a:	2800      	cmp	r0, #0
 800299c:	d1f7      	bne.n	800298e <common_task+0x19e>
 800299e:	f3bf 8f5b 	dmb	ish
            lora_config(lora_dev, &lora_cfg);
            lora_send(lora_dev, radio_buf_tx, RADIO_BUF_LEN);
            lora_recv_async(lora_dev, lora_receive_cb, lora_rx_error_timeout_cb); /* Restart receive */
            atomic_cas(&atomic_cur_state, STATE_TRANSMIT, STATE_RECV);

        } else if (atomic_cas(&atomic_cur_state, STATE_START_PER_MEAS, STATE_PER_MEAS_RUN)) {
 80029a2:	d11b      	bne.n	80029dc <common_task+0x1ec>
	const struct uart_driver_api *api =
 80029a4:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 80029a6:	68dd      	ldr	r5, [r3, #12]
 80029a8:	2300      	movs	r3, #0
 80029aa:	2210      	movs	r2, #16
 80029ac:	4943      	ldr	r1, [pc, #268]	; (8002abc <common_task+0x2cc>)
 80029ae:	4620      	mov	r0, r4
 80029b0:	47a8      	blx	r5

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            per_meas(lora_dev, &lora_cfg, uart_dev, uart_buf_tx);
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <common_task+0x2e0>)
 80029b4:	4622      	mov	r2, r4
 80029b6:	a905      	add	r1, sp, #20
 80029b8:	4837      	ldr	r0, [pc, #220]	; (8002a98 <common_task+0x2a8>)
 80029ba:	f7ff fc7f 	bl	80022bc <per_meas>
 80029be:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <common_task+0x2d8>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	f3bf 8f5b 	dmb	ish
 80029c6:	e853 1f00 	ldrex	r1, [r3]
 80029ca:	2902      	cmp	r1, #2
 80029cc:	d103      	bne.n	80029d6 <common_task+0x1e6>
 80029ce:	e843 2000 	strex	r0, r2, [r3]
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d1f7      	bne.n	80029c6 <common_task+0x1d6>
 80029d6:	f3bf 8f5b 	dmb	ish
 80029da:	e796      	b.n	800290a <common_task+0x11a>
 80029dc:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <common_task+0x2d8>)
 80029de:	2200      	movs	r2, #0
 80029e0:	f3bf 8f5b 	dmb	ish
 80029e4:	e853 1f00 	ldrex	r1, [r3]
 80029e8:	2905      	cmp	r1, #5
 80029ea:	d103      	bne.n	80029f4 <common_task+0x204>
 80029ec:	e843 2000 	strex	r0, r2, [r3]
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d1f7      	bne.n	80029e4 <common_task+0x1f4>
 80029f4:	f3bf 8f5b 	dmb	ish
            /* Change currently state on STATE_IDLE if it still equals STATE_PER_MEAS_RUN
             * Else do nothing*/
            atomic_cas(&atomic_cur_state, STATE_PER_MEAS_RUN, STATE_IDLE);

        } else if (atomic_cas(&atomic_cur_state, STATE_GET_CFG, STATE_IDLE)) {
 80029f8:	d10b      	bne.n	8002a12 <common_task+0x222>
	const struct uart_driver_api *api =
 80029fa:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 80029fc:	68dd      	ldr	r5, [r3, #12]
 80029fe:	4613      	mov	r3, r2
 8002a00:	2210      	movs	r2, #16
 8002a02:	492e      	ldr	r1, [pc, #184]	; (8002abc <common_task+0x2cc>)
 8002a04:	4620      	mov	r0, r4
 8002a06:	47a8      	blx	r5

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            print_modem_cfg(uart_dev, &lora_cfg);
 8002a08:	a905      	add	r1, sp, #20
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	f7ff f838 	bl	8001a80 <print_modem_cfg>
 8002a10:	e77b      	b.n	800290a <common_task+0x11a>
 8002a12:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <common_task+0x2d8>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	f3bf 8f5b 	dmb	ish
 8002a1a:	e853 1f00 	ldrex	r1, [r3]
 8002a1e:	2907      	cmp	r1, #7
 8002a20:	d103      	bne.n	8002a2a <common_task+0x23a>
 8002a22:	e843 2000 	strex	r0, r2, [r3]
 8002a26:	2800      	cmp	r0, #0
 8002a28:	d1f7      	bne.n	8002a1a <common_task+0x22a>
 8002a2a:	f3bf 8f5b 	dmb	ish

        } else if (atomic_cas(&atomic_cur_state, STATE_INCR_FREQ, STATE_IDLE)) {
 8002a2e:	d10f      	bne.n	8002a50 <common_task+0x260>
	const struct uart_driver_api *api =
 8002a30:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 8002a32:	68dd      	ldr	r5, [r3, #12]
 8002a34:	4613      	mov	r3, r2
 8002a36:	2210      	movs	r2, #16
 8002a38:	4920      	ldr	r1, [pc, #128]	; (8002abc <common_task+0x2cc>)
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	47a8      	blx	r5

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            incr_decr_modem_frequency(lora_dev, &lora_cfg, true, uart_dev, uart_buf_tx);
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <common_task+0x2e0>)
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	4623      	mov	r3, r4
 8002a44:	2201      	movs	r2, #1
 8002a46:	a905      	add	r1, sp, #20
 8002a48:	4813      	ldr	r0, [pc, #76]	; (8002a98 <common_task+0x2a8>)
 8002a4a:	f7ff fb5b 	bl	8002104 <incr_decr_modem_frequency>
 8002a4e:	e75c      	b.n	800290a <common_task+0x11a>
 8002a50:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <common_task+0x2d8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	f3bf 8f5b 	dmb	ish
 8002a58:	e853 1f00 	ldrex	r1, [r3]
 8002a5c:	2908      	cmp	r1, #8
 8002a5e:	d103      	bne.n	8002a68 <common_task+0x278>
 8002a60:	e843 2000 	strex	r0, r2, [r3]
 8002a64:	2800      	cmp	r0, #0
 8002a66:	d1f7      	bne.n	8002a58 <common_task+0x268>
 8002a68:	f3bf 8f5b 	dmb	ish

        } else if (atomic_cas(&atomic_cur_state, STATE_DECR_FREQ, STATE_IDLE)) {
 8002a6c:	d132      	bne.n	8002ad4 <common_task+0x2e4>
	const struct uart_driver_api *api =
 8002a6e:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 8002a70:	68dd      	ldr	r5, [r3, #12]
 8002a72:	4613      	mov	r3, r2
 8002a74:	2210      	movs	r2, #16
 8002a76:	4911      	ldr	r1, [pc, #68]	; (8002abc <common_task+0x2cc>)
 8002a78:	4620      	mov	r0, r4
 8002a7a:	47a8      	blx	r5

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            incr_decr_modem_frequency(lora_dev, &lora_cfg, false, uart_dev, uart_buf_tx);
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <common_task+0x2e0>)
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4623      	mov	r3, r4
 8002a82:	2200      	movs	r2, #0
 8002a84:	a905      	add	r1, sp, #20
 8002a86:	4804      	ldr	r0, [pc, #16]	; (8002a98 <common_task+0x2a8>)
 8002a88:	f7ff fb3c 	bl	8002104 <incr_decr_modem_frequency>
 8002a8c:	e73d      	b.n	800290a <common_task+0x11a>
 8002a8e:	bf00      	nop
 8002a90:	200002a8 	.word	0x200002a8
 8002a94:	200002ac 	.word	0x200002ac
 8002a98:	08011d2c 	.word	0x08011d2c
 8002a9c:	08002509 	.word	0x08002509
 8002aa0:	20000e60 	.word	0x20000e60
 8002aa4:	08012480 	.word	0x08012480
 8002aa8:	080024c9 	.word	0x080024c9
 8002aac:	08012540 	.word	0x08012540
 8002ab0:	080124e4 	.word	0x080124e4
 8002ab4:	08012024 	.word	0x08012024
 8002ab8:	08012500 	.word	0x08012500
 8002abc:	20000e0c 	.word	0x20000e0c
 8002ac0:	0800ec0b 	.word	0x0800ec0b
 8002ac4:	08001a45 	.word	0x08001a45
 8002ac8:	200002a0 	.word	0x200002a0
 8002acc:	20000e08 	.word	0x20000e08
 8002ad0:	20000e1c 	.word	0x20000e1c
 8002ad4:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <common_task+0x3b8>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f3bf 8f5b 	dmb	ish
 8002adc:	e853 1f00 	ldrex	r1, [r3]
 8002ae0:	2906      	cmp	r1, #6
 8002ae2:	d103      	bne.n	8002aec <common_task+0x2fc>
 8002ae4:	e843 2000 	strex	r0, r2, [r3]
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	d1f7      	bne.n	8002adc <common_task+0x2ec>
 8002aec:	f3bf 8f5b 	dmb	ish

        } else if (atomic_cas(&atomic_cur_state, STATE_SET_FREQ, STATE_IDLE)) {
 8002af0:	d114      	bne.n	8002b1c <common_task+0x32c>
	const struct uart_driver_api *api =
 8002af2:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 8002af4:	68dd      	ldr	r5, [r3, #12]
 8002af6:	4613      	mov	r3, r2
 8002af8:	2210      	movs	r2, #16
 8002afa:	492c      	ldr	r1, [pc, #176]	; (8002bac <common_task+0x3bc>)
 8002afc:	4620      	mov	r0, r4
 8002afe:	47a8      	blx	r5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8002b00:	f3bf 8f5b 	dmb	ish
 8002b04:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <common_task+0x3c0>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	f3bf 8f5b 	dmb	ish

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            change_modem_frequency(lora_dev, &lora_cfg, atomic_get(&atomic_freq), uart_dev, uart_buf_tx);
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <common_task+0x3c4>)
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	4623      	mov	r3, r4
 8002b12:	a905      	add	r1, sp, #20
 8002b14:	4828      	ldr	r0, [pc, #160]	; (8002bb8 <common_task+0x3c8>)
 8002b16:	f7ff faa9 	bl	800206c <change_modem_frequency>
 8002b1a:	e6f6      	b.n	800290a <common_task+0x11a>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8002b1c:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <common_task+0x3b8>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f3bf 8f5b 	dmb	ish
 8002b24:	e853 1f00 	ldrex	r1, [r3]
 8002b28:	2909      	cmp	r1, #9
 8002b2a:	d103      	bne.n	8002b34 <common_task+0x344>
 8002b2c:	e843 2000 	strex	r0, r2, [r3]
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d1f7      	bne.n	8002b24 <common_task+0x334>
 8002b34:	f3bf 8f5b 	dmb	ish

        } else if (atomic_cas(&atomic_cur_state, STATE_SET_SF, STATE_IDLE)) {
 8002b38:	d115      	bne.n	8002b66 <common_task+0x376>
	const struct uart_driver_api *api =
 8002b3a:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 8002b3c:	68dd      	ldr	r5, [r3, #12]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	2210      	movs	r2, #16
 8002b42:	491a      	ldr	r1, [pc, #104]	; (8002bac <common_task+0x3bc>)
 8002b44:	4620      	mov	r0, r4
 8002b46:	47a8      	blx	r5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8002b48:	f3bf 8f5b 	dmb	ish
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <common_task+0x3cc>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	f3bf 8f5b 	dmb	ish

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            change_modem_datarate(lora_dev, &lora_cfg, atomic_get(&atomic_sf), uart_dev, uart_buf_tx);
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <common_task+0x3c4>)
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	4623      	mov	r3, r4
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	a905      	add	r1, sp, #20
 8002b5e:	4816      	ldr	r0, [pc, #88]	; (8002bb8 <common_task+0x3c8>)
 8002b60:	f7ff fa3c 	bl	8001fdc <change_modem_datarate>
 8002b64:	e6d1      	b.n	800290a <common_task+0x11a>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8002b66:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <common_task+0x3b8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f3bf 8f5b 	dmb	ish
 8002b6e:	e853 1f00 	ldrex	r1, [r3]
 8002b72:	290a      	cmp	r1, #10
 8002b74:	d103      	bne.n	8002b7e <common_task+0x38e>
 8002b76:	e843 2000 	strex	r0, r2, [r3]
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	d1f7      	bne.n	8002b6e <common_task+0x37e>
 8002b7e:	f3bf 8f5b 	dmb	ish

        } else if (atomic_cas(&atomic_cur_state, STATE_STOP, STATE_IDLE)) {
 8002b82:	d10c      	bne.n	8002b9e <common_task+0x3ae>
	const struct uart_driver_api *api =
 8002b84:	68a3      	ldr	r3, [r4, #8]
	return api->rx_enable(dev, buf, len, timeout);
 8002b86:	68dd      	ldr	r5, [r3, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	2210      	movs	r2, #16
 8002b8c:	4907      	ldr	r1, [pc, #28]	; (8002bac <common_task+0x3bc>)
 8002b8e:	4620      	mov	r0, r4
 8002b90:	47a8      	blx	r5

            /* Start UART receive */
            uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
            stop_session(lora_dev, uart_dev, uart_buf_tx);
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <common_task+0x3c4>)
 8002b94:	4621      	mov	r1, r4
 8002b96:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <common_task+0x3c8>)
 8002b98:	f7ff fc5e 	bl	8002458 <stop_session>
 8002b9c:	e6b5      	b.n	800290a <common_task+0x11a>
 8002b9e:	2064      	movs	r0, #100	; 0x64
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	f009 fd2d 	bl	800c600 <z_impl_k_sleep>
 8002ba6:	e6b0      	b.n	800290a <common_task+0x11a>
 8002ba8:	200002a0 	.word	0x200002a0
 8002bac:	20000e0c 	.word	0x20000e0c
 8002bb0:	200002a8 	.word	0x200002a8
 8002bb4:	20000e1c 	.word	0x20000e1c
 8002bb8:	08011d2c 	.word	0x08011d2c
 8002bbc:	200002ac 	.word	0x200002ac

08002bc0 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 8002bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bc4:	b089      	sub	sp, #36	; 0x24
 8002bc6:	9202      	str	r2, [sp, #8]
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 8002bc8:	f010 0a03 	ands.w	sl, r0, #3
 8002bcc:	f040 8215 	bne.w	8002ffa <cbvprintf_package+0x43a>
 8002bd0:	4607      	mov	r7, r0
 8002bd2:	468b      	mov	fp, r1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
 8002bd4:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 8002bd6:	b1e0      	cbz	r0, 8002c12 <cbvprintf_package+0x52>

	/*
	 * Otherwise we must ensure we can store at least
	 * thepointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 8002bd8:	b127      	cbz	r7, 8002be4 <cbvprintf_package+0x24>
 8002bda:	1be2      	subs	r2, r4, r7
 8002bdc:	3204      	adds	r2, #4
 8002bde:	455a      	cmp	r2, fp
 8002be0:	f200 820e 	bhi.w	8003000 <cbvprintf_package+0x440>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
 8002be4:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 8002be6:	f8cd a000 	str.w	sl, [sp]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 8002bea:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 8002bee:	f8cd a004 	str.w	sl, [sp, #4]
	bool parsing = false;
 8002bf2:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
 8002bf4:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
 8002bf8:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
 8002bfa:	b107      	cbz	r7, 8002bfe <cbvprintf_package+0x3e>
				*(const char **)buf = s;
 8002bfc:	6023      	str	r3, [r4, #0]
	return ((addr >= (const char *)RO_START) &&
 8002bfe:	4ac6      	ldr	r2, [pc, #792]	; (8002f18 <cbvprintf_package+0x358>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	f0c0 815a 	bcc.w	8002eba <cbvprintf_package+0x2fa>
 8002c06:	4ac5      	ldr	r2, [pc, #788]	; (8002f1c <cbvprintf_package+0x35c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	f0c0 817f 	bcc.w	8002f0c <cbvprintf_package+0x34c>
 8002c0e:	2200      	movs	r2, #0
 8002c10:	e154      	b.n	8002ebc <cbvprintf_package+0x2fc>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 8002c12:	f001 0b07 	and.w	fp, r1, #7
 8002c16:	445c      	add	r4, fp
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 8002c18:	f1cb 0b08 	rsb	fp, fp, #8
 8002c1c:	e7dc      	b.n	8002bd8 <cbvprintf_package+0x18>
			if (*fmt == '%') {
 8002c1e:	2b25      	cmp	r3, #37	; 0x25
 8002c20:	d105      	bne.n	8002c2e <cbvprintf_package+0x6e>
				parsing = true;
 8002c22:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
 8002c24:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
 8002c28:	46c1      	mov	r9, r8
			continue;
 8002c2a:	e000      	b.n	8002c2e <cbvprintf_package+0x6e>
		switch (*fmt) {
 8002c2c:	2600      	movs	r6, #0
 8002c2e:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
 8002c30:	f105 0c01 	add.w	ip, r5, #1
 8002c34:	786b      	ldrb	r3, [r5, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8184 	beq.w	8002f44 <cbvprintf_package+0x384>
		if (!parsing) {
 8002c3c:	2e00      	cmp	r6, #0
 8002c3e:	d0ee      	beq.n	8002c1e <cbvprintf_package+0x5e>
		switch (*fmt) {
 8002c40:	f1a3 0120 	sub.w	r1, r3, #32
 8002c44:	295a      	cmp	r1, #90	; 0x5a
 8002c46:	d8f1      	bhi.n	8002c2c <cbvprintf_package+0x6c>
 8002c48:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <cbvprintf_package+0x90>)
 8002c4a:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8002c4e:	bf00      	nop
 8002c50:	08002c2f 	.word	0x08002c2f
 8002c54:	08002c2d 	.word	0x08002c2d
 8002c58:	08002c2d 	.word	0x08002c2d
 8002c5c:	08002c2f 	.word	0x08002c2f
 8002c60:	08002c2d 	.word	0x08002c2d
 8002c64:	08002c2d 	.word	0x08002c2d
 8002c68:	08002c2d 	.word	0x08002c2d
 8002c6c:	08002c2d 	.word	0x08002c2d
 8002c70:	08002c2d 	.word	0x08002c2d
 8002c74:	08002c2d 	.word	0x08002c2d
 8002c78:	08002ddd 	.word	0x08002ddd
 8002c7c:	08002c2f 	.word	0x08002c2f
 8002c80:	08002c2d 	.word	0x08002c2d
 8002c84:	08002c2f 	.word	0x08002c2f
 8002c88:	08002c2f 	.word	0x08002c2f
 8002c8c:	08002c2d 	.word	0x08002c2d
 8002c90:	08002c2f 	.word	0x08002c2f
 8002c94:	08002c2f 	.word	0x08002c2f
 8002c98:	08002c2f 	.word	0x08002c2f
 8002c9c:	08002c2f 	.word	0x08002c2f
 8002ca0:	08002c2f 	.word	0x08002c2f
 8002ca4:	08002c2f 	.word	0x08002c2f
 8002ca8:	08002c2f 	.word	0x08002c2f
 8002cac:	08002c2f 	.word	0x08002c2f
 8002cb0:	08002c2f 	.word	0x08002c2f
 8002cb4:	08002c2f 	.word	0x08002c2f
 8002cb8:	08002c2d 	.word	0x08002c2d
 8002cbc:	08002c2d 	.word	0x08002c2d
 8002cc0:	08002c2d 	.word	0x08002c2d
 8002cc4:	08002c2d 	.word	0x08002c2d
 8002cc8:	08002c2d 	.word	0x08002c2d
 8002ccc:	08002c2d 	.word	0x08002c2d
 8002cd0:	08002c2d 	.word	0x08002c2d
 8002cd4:	08002e45 	.word	0x08002e45
 8002cd8:	08002c2d 	.word	0x08002c2d
 8002cdc:	08002c2d 	.word	0x08002c2d
 8002ce0:	08002c2d 	.word	0x08002c2d
 8002ce4:	08002e45 	.word	0x08002e45
 8002ce8:	08002e45 	.word	0x08002e45
 8002cec:	08002e45 	.word	0x08002e45
 8002cf0:	08002c2d 	.word	0x08002c2d
 8002cf4:	08002c2d 	.word	0x08002c2d
 8002cf8:	08002c2d 	.word	0x08002c2d
 8002cfc:	08002c2d 	.word	0x08002c2d
 8002d00:	08002c2f 	.word	0x08002c2f
 8002d04:	08002c2d 	.word	0x08002c2d
 8002d08:	08002c2d 	.word	0x08002c2d
 8002d0c:	08002c2d 	.word	0x08002c2d
 8002d10:	08002c2d 	.word	0x08002c2d
 8002d14:	08002c2d 	.word	0x08002c2d
 8002d18:	08002c2d 	.word	0x08002c2d
 8002d1c:	08002c2d 	.word	0x08002c2d
 8002d20:	08002c2d 	.word	0x08002c2d
 8002d24:	08002c2d 	.word	0x08002c2d
 8002d28:	08002c2d 	.word	0x08002c2d
 8002d2c:	08002c2d 	.word	0x08002c2d
 8002d30:	08002dd5 	.word	0x08002dd5
 8002d34:	08002c2d 	.word	0x08002c2d
 8002d38:	08002c2d 	.word	0x08002c2d
 8002d3c:	08002c2d 	.word	0x08002c2d
 8002d40:	08002c2d 	.word	0x08002c2d
 8002d44:	08002c2d 	.word	0x08002c2d
 8002d48:	08002c2d 	.word	0x08002c2d
 8002d4c:	08002c2d 	.word	0x08002c2d
 8002d50:	08002c2d 	.word	0x08002c2d
 8002d54:	08002e45 	.word	0x08002e45
 8002d58:	08002c2d 	.word	0x08002c2d
 8002d5c:	08002dd5 	.word	0x08002dd5
 8002d60:	08002dd5 	.word	0x08002dd5
 8002d64:	08002e45 	.word	0x08002e45
 8002d68:	08002e45 	.word	0x08002e45
 8002d6c:	08002e45 	.word	0x08002e45
 8002d70:	08002c2f 	.word	0x08002c2f
 8002d74:	08002dd5 	.word	0x08002dd5
 8002d78:	08002dbd 	.word	0x08002dbd
 8002d7c:	08002c2d 	.word	0x08002c2d
 8002d80:	08002c2f 	.word	0x08002c2f
 8002d84:	08002c2d 	.word	0x08002c2d
 8002d88:	08002ea5 	.word	0x08002ea5
 8002d8c:	08002dd5 	.word	0x08002dd5
 8002d90:	08002ea5 	.word	0x08002ea5
 8002d94:	08002c2d 	.word	0x08002c2d
 8002d98:	08002c2d 	.word	0x08002c2d
 8002d9c:	08002ea5 	.word	0x08002ea5
 8002da0:	08002dcd 	.word	0x08002dcd
 8002da4:	08002dd5 	.word	0x08002dd5
 8002da8:	08002c2d 	.word	0x08002c2d
 8002dac:	08002c2d 	.word	0x08002c2d
 8002db0:	08002dd5 	.word	0x08002dd5
 8002db4:	08002c2d 	.word	0x08002c2d
 8002db8:	08002dc5 	.word	0x08002dc5
			align = VA_STACK_ALIGN(intmax_t);
 8002dbc:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
 8002dc0:	46c1      	mov	r9, r8
			continue;
 8002dc2:	e734      	b.n	8002c2e <cbvprintf_package+0x6e>
			align = VA_STACK_ALIGN(size_t);
 8002dc4:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
 8002dc8:	46c1      	mov	r9, r8
			continue;
 8002dca:	e730      	b.n	8002c2e <cbvprintf_package+0x6e>
			align = VA_STACK_ALIGN(ptrdiff_t);
 8002dcc:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
 8002dd0:	46c1      	mov	r9, r8
			continue;
 8002dd2:	e72c      	b.n	8002c2e <cbvprintf_package+0x6e>
			if (fmt[-1] == 'l') {
 8002dd4:	782a      	ldrb	r2, [r5, #0]
 8002dd6:	2a6c      	cmp	r2, #108	; 0x6c
 8002dd8:	d026      	beq.n	8002e28 <cbvprintf_package+0x268>
			parsing = false;
 8002dda:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
 8002ddc:	eb04 0208 	add.w	r2, r4, r8
 8002de0:	3a01      	subs	r2, #1
 8002de2:	f1c8 0100 	rsb	r1, r8, #0
 8002de6:	400a      	ands	r2, r1
 8002de8:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 8002dea:	b127      	cbz	r7, 8002df6 <cbvprintf_package+0x236>
 8002dec:	1bd1      	subs	r1, r2, r7
 8002dee:	4449      	add	r1, r9
 8002df0:	458b      	cmp	fp, r1
 8002df2:	f0c0 8108 	bcc.w	8003006 <cbvprintf_package+0x446>
		if (*fmt == 's') {
 8002df6:	2b73      	cmp	r3, #115	; 0x73
 8002df8:	d059      	beq.n	8002eae <cbvprintf_package+0x2ee>
				}

				s_idx++;
			}
			buf += sizeof(char *);
		} else if (size == sizeof(int)) {
 8002dfa:	f1b9 0f04 	cmp.w	r9, #4
 8002dfe:	f000 8099 	beq.w	8002f34 <cbvprintf_package+0x374>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
 8002e02:	f1b9 0f08 	cmp.w	r9, #8
 8002e06:	f040 8107 	bne.w	8003018 <cbvprintf_package+0x458>
			long long v = va_arg(ap, long long);
 8002e0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e0c:	3307      	adds	r3, #7
 8002e0e:	f023 0307 	bic.w	r3, r3, #7
 8002e12:	f103 0108 	add.w	r1, r3, #8
 8002e16:	9112      	str	r1, [sp, #72]	; 0x48
 8002e18:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
 8002e1c:	b10f      	cbz	r7, 8002e22 <cbvprintf_package+0x262>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
 8002e1e:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
 8002e22:	f102 0408 	add.w	r4, r2, #8
 8002e26:	e702      	b.n	8002c2e <cbvprintf_package+0x6e>
				if (fmt[-2] == 'l') {
 8002e28:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8002e2c:	2a6c      	cmp	r2, #108	; 0x6c
 8002e2e:	d004      	beq.n	8002e3a <cbvprintf_package+0x27a>
			parsing = false;
 8002e30:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
 8002e32:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
 8002e36:	46c1      	mov	r9, r8
 8002e38:	e7d0      	b.n	8002ddc <cbvprintf_package+0x21c>
			parsing = false;
 8002e3a:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
 8002e3c:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
 8002e40:	46c1      	mov	r9, r8
 8002e42:	e7cb      	b.n	8002ddc <cbvprintf_package+0x21c>
			if (fmt[-1] == 'L') {
 8002e44:	782b      	ldrb	r3, [r5, #0]
 8002e46:	2b4c      	cmp	r3, #76	; 0x4c
 8002e48:	d01c      	beq.n	8002e84 <cbvprintf_package+0x2c4>
				v.d = va_arg(ap, double);
 8002e4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e4c:	3307      	adds	r3, #7
 8002e4e:	f023 0307 	bic.w	r3, r3, #7
 8002e52:	f103 0208 	add.w	r2, r3, #8
 8002e56:	9212      	str	r2, [sp, #72]	; 0x48
 8002e58:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
 8002e5c:	1de2      	adds	r2, r4, #7
 8002e5e:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
 8002e62:	b147      	cbz	r7, 8002e76 <cbvprintf_package+0x2b6>
				if (BUF_OFFSET + size > len) {
 8002e64:	1bd3      	subs	r3, r2, r7
 8002e66:	3308      	adds	r3, #8
 8002e68:	455b      	cmp	r3, fp
 8002e6a:	d815      	bhi.n	8002e98 <cbvprintf_package+0x2d8>
				} else if (fmt[-1] == 'L') {
 8002e6c:	782b      	ldrb	r3, [r5, #0]
 8002e6e:	2b4c      	cmp	r3, #76	; 0x4c
 8002e70:	d015      	beq.n	8002e9e <cbvprintf_package+0x2de>
					*(double *)buf = v.d;
 8002e72:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
 8002e76:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
 8002e7a:	2600      	movs	r6, #0
			continue;
 8002e7c:	f04f 0808 	mov.w	r8, #8
 8002e80:	46c1      	mov	r9, r8
 8002e82:	e6d4      	b.n	8002c2e <cbvprintf_package+0x6e>
				v.ld = va_arg(ap, long double);
 8002e84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e86:	3307      	adds	r3, #7
 8002e88:	f023 0307 	bic.w	r3, r3, #7
 8002e8c:	f103 0208 	add.w	r2, r3, #8
 8002e90:	9212      	str	r2, [sp, #72]	; 0x48
 8002e92:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
 8002e96:	e7e1      	b.n	8002e5c <cbvprintf_package+0x29c>
					return -ENOSPC;
 8002e98:	f06f 001b 	mvn.w	r0, #27
 8002e9c:	e0aa      	b.n	8002ff4 <cbvprintf_package+0x434>
					*(long double *)buf = v.ld;
 8002e9e:	e9c2 0100 	strd	r0, r1, [r2]
 8002ea2:	e7e8      	b.n	8002e76 <cbvprintf_package+0x2b6>
			parsing = false;
 8002ea4:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
 8002ea6:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
 8002eaa:	46c1      	mov	r9, r8
 8002eac:	e796      	b.n	8002ddc <cbvprintf_package+0x21c>
			s = va_arg(ap, char *);
 8002eae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002eb0:	1d1a      	adds	r2, r3, #4
 8002eb2:	9212      	str	r2, [sp, #72]	; 0x48
 8002eb4:	681b      	ldr	r3, [r3, #0]
	while (*++fmt != '\0') {
 8002eb6:	4665      	mov	r5, ip
 8002eb8:	e69f      	b.n	8002bfa <cbvprintf_package+0x3a>
	return ((addr >= (const char *)RO_START) &&
 8002eba:	2200      	movs	r2, #0
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
 8002ebc:	9902      	ldr	r1, [sp, #8]
 8002ebe:	f001 0101 	and.w	r1, r1, #1
			if (is_ro && !do_all) {
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	b102      	cbz	r2, 8002ec8 <cbvprintf_package+0x308>
 8002ec6:	b1f9      	cbz	r1, 8002f08 <cbvprintf_package+0x348>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 8002ec8:	eba4 0c07 	sub.w	ip, r4, r7
 8002ecc:	ea4f 029c 	mov.w	r2, ip, lsr #2
				if (do_all && s_ptr_idx > STR_POS_MASK) {
 8002ed0:	b119      	cbz	r1, 8002eda <cbvprintf_package+0x31a>
 8002ed2:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8002ed6:	f080 8099 	bcs.w	800300c <cbvprintf_package+0x44c>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 8002eda:	9901      	ldr	r1, [sp, #4]
 8002edc:	290f      	cmp	r1, #15
 8002ede:	f200 8098 	bhi.w	8003012 <cbvprintf_package+0x452>
				if (buf0 != NULL) {
 8002ee2:	b1ef      	cbz	r7, 8002f20 <cbvprintf_package+0x360>
					str_ptr_pos[s_idx] = s_ptr_idx;
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	ab08      	add	r3, sp, #32
 8002ee8:	440b      	add	r3, r1
 8002eea:	f803 2c10 	strb.w	r2, [r3, #-16]
					if (is_ro) {
 8002eee:	b178      	cbz	r0, 8002f10 <cbvprintf_package+0x350>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 8002ef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ef4:	ab08      	add	r3, sp, #32
 8002ef6:	440b      	add	r3, r1
 8002ef8:	f803 2c10 	strb.w	r2, [r3, #-16]
						s_ro_cnt++;
 8002efc:	9b00      	ldr	r3, [sp, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	9300      	str	r3, [sp, #0]
				s_idx++;
 8002f02:	9b01      	ldr	r3, [sp, #4]
 8002f04:	3301      	adds	r3, #1
 8002f06:	9301      	str	r3, [sp, #4]
			buf += sizeof(char *);
 8002f08:	3404      	adds	r4, #4
 8002f0a:	e691      	b.n	8002c30 <cbvprintf_package+0x70>
	return ((addr >= (const char *)RO_START) &&
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	e7d5      	b.n	8002ebc <cbvprintf_package+0x2fc>
						s_rw_cnt++;
 8002f10:	9b03      	ldr	r3, [sp, #12]
 8002f12:	3301      	adds	r3, #1
 8002f14:	9303      	str	r3, [sp, #12]
 8002f16:	e7f4      	b.n	8002f02 <cbvprintf_package+0x342>
 8002f18:	08011b44 	.word	0x08011b44
 8002f1c:	08013e18 	.word	0x08013e18
				} else if (is_ro) {
 8002f20:	b110      	cbz	r0, 8002f28 <cbvprintf_package+0x368>
					len += 1;
 8002f22:	f10b 0b01 	add.w	fp, fp, #1
 8002f26:	e7ec      	b.n	8002f02 <cbvprintf_package+0x342>
					len += strlen(s) + 1 + 1;
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd ff94 	bl	8000e56 <strlen>
 8002f2e:	1c83      	adds	r3, r0, #2
 8002f30:	449b      	add	fp, r3
 8002f32:	e7e6      	b.n	8002f02 <cbvprintf_package+0x342>
			int v = va_arg(ap, int);
 8002f34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002f36:	1d19      	adds	r1, r3, #4
 8002f38:	9112      	str	r1, [sp, #72]	; 0x48
 8002f3a:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
 8002f3c:	b107      	cbz	r7, 8002f40 <cbvprintf_package+0x380>
				*(int *)buf = v;
 8002f3e:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
 8002f40:	1d14      	adds	r4, r2, #4
 8002f42:	e674      	b.n	8002c2e <cbvprintf_package+0x6e>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
 8002f44:	1be3      	subs	r3, r4, r7
 8002f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4a:	d268      	bcs.n	800301e <cbvprintf_package+0x45e>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
 8002f4c:	b15f      	cbz	r7, 8002f66 <cbvprintf_package+0x3a6>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
 8002f4e:	2200      	movs	r2, #0
 8002f50:	603a      	str	r2, [r7, #0]

	/* Record end of argument list and number of appended strings. */
	buf0[0] = BUF_OFFSET / sizeof(int);
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	703b      	strb	r3, [r7, #0]
	buf0[1] = s_rw_cnt;
 8002f56:	9b03      	ldr	r3, [sp, #12]
 8002f58:	707b      	strb	r3, [r7, #1]
	buf0[2] = s_ro_cnt;
 8002f5a:	9b00      	ldr	r3, [sp, #0]
 8002f5c:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
 8002f5e:	b9d3      	cbnz	r3, 8002f96 <cbvprintf_package+0x3d6>
 8002f60:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002f64:	e039      	b.n	8002fda <cbvprintf_package+0x41a>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 8002f66:	445b      	add	r3, fp
 8002f68:	f1a3 0008 	sub.w	r0, r3, #8
 8002f6c:	e042      	b.n	8002ff4 <cbvprintf_package+0x434>
		for (i = 0; i < s_idx; i++) {
 8002f6e:	3301      	adds	r3, #1
 8002f70:	4298      	cmp	r0, r3
 8002f72:	d913      	bls.n	8002f9c <cbvprintf_package+0x3dc>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 8002f74:	aa08      	add	r2, sp, #32
 8002f76:	441a      	add	r2, r3
 8002f78:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8002f7c:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
 8002f80:	2a00      	cmp	r2, #0
 8002f82:	daf4      	bge.n	8002f6e <cbvprintf_package+0x3ae>
				continue;
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 8002f84:	f001 017f 	and.w	r1, r1, #127	; 0x7f

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
 8002f88:	1be2      	subs	r2, r4, r7
 8002f8a:	3201      	adds	r2, #1
 8002f8c:	4593      	cmp	fp, r2
 8002f8e:	d349      	bcc.n	8003024 <cbvprintf_package+0x464>
				return -ENOSPC;
			}
			/* store the pointer position prefix */
			*buf++ = pos;
 8002f90:	f804 1b01 	strb.w	r1, [r4], #1
 8002f94:	e7eb      	b.n	8002f6e <cbvprintf_package+0x3ae>
		for (i = 0; i < s_idx; i++) {
 8002f96:	4653      	mov	r3, sl
 8002f98:	9801      	ldr	r0, [sp, #4]
 8002f9a:	e7e9      	b.n	8002f70 <cbvprintf_package+0x3b0>
 8002f9c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002fa0:	e01b      	b.n	8002fda <cbvprintf_package+0x41a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		/* retrieve the string pointer */
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 8002fa2:	ab08      	add	r3, sp, #32
 8002fa4:	4453      	add	r3, sl
 8002fa6:	f813 6c10 	ldrb.w	r6, [r3, #-16]
 8002faa:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
		/* clear the in-buffer pointer (less entropy if compressed) */
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
		/* find the string length including terminating '\0' */
		size = strlen(s) + 1;
 8002fb4:	4640      	mov	r0, r8
 8002fb6:	f7fd ff4e 	bl	8000e56 <strlen>
 8002fba:	1c45      	adds	r5, r0, #1
		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
 8002fbc:	1be3      	subs	r3, r4, r7
 8002fbe:	442b      	add	r3, r5
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	459b      	cmp	fp, r3
 8002fc4:	d331      	bcc.n	800302a <cbvprintf_package+0x46a>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
 8002fc6:	f804 6b01 	strb.w	r6, [r4], #1
 8002fca:	462a      	mov	r2, r5
 8002fcc:	4641      	mov	r1, r8
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f00e f965 	bl	801129e <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
 8002fd4:	442c      	add	r4, r5
	for (i = 0; i < s_idx; i++) {
 8002fd6:	f10a 0a01 	add.w	sl, sl, #1
 8002fda:	45d1      	cmp	r9, sl
 8002fdc:	d909      	bls.n	8002ff2 <cbvprintf_package+0x432>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 8002fde:	9b00      	ldr	r3, [sp, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0de      	beq.n	8002fa2 <cbvprintf_package+0x3e2>
 8002fe4:	ab08      	add	r3, sp, #32
 8002fe6:	4453      	add	r3, sl
 8002fe8:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	dad8      	bge.n	8002fa2 <cbvprintf_package+0x3e2>
 8002ff0:	e7f1      	b.n	8002fd6 <cbvprintf_package+0x416>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
 8002ff2:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 8002ff4:	b009      	add	sp, #36	; 0x24
 8002ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
 8002ffa:	f06f 000d 	mvn.w	r0, #13
 8002ffe:	e7f9      	b.n	8002ff4 <cbvprintf_package+0x434>
		return -ENOSPC;
 8003000:	f06f 001b 	mvn.w	r0, #27
 8003004:	e7f6      	b.n	8002ff4 <cbvprintf_package+0x434>
			return -ENOSPC;
 8003006:	f06f 001b 	mvn.w	r0, #27
 800300a:	e7f3      	b.n	8002ff4 <cbvprintf_package+0x434>
					return -EINVAL;
 800300c:	f06f 0015 	mvn.w	r0, #21
 8003010:	e7f0      	b.n	8002ff4 <cbvprintf_package+0x434>
					return -EINVAL;
 8003012:	f06f 0015 	mvn.w	r0, #21
 8003016:	e7ed      	b.n	8002ff4 <cbvprintf_package+0x434>
			return -EINVAL;
 8003018:	f06f 0015 	mvn.w	r0, #21
 800301c:	e7ea      	b.n	8002ff4 <cbvprintf_package+0x434>
		return -EINVAL;
 800301e:	f06f 0015 	mvn.w	r0, #21
 8003022:	e7e7      	b.n	8002ff4 <cbvprintf_package+0x434>
				return -ENOSPC;
 8003024:	f06f 001b 	mvn.w	r0, #27
 8003028:	e7e4      	b.n	8002ff4 <cbvprintf_package+0x434>
			return -ENOSPC;
 800302a:	f06f 001b 	mvn.w	r0, #27
 800302e:	e7e1      	b.n	8002ff4 <cbvprintf_package+0x434>

08003030 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 8003030:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8003032:	680b      	ldr	r3, [r1, #0]
 8003034:	3301      	adds	r3, #1
 8003036:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8003038:	4b01      	ldr	r3, [pc, #4]	; (8003040 <char_out+0x10>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4798      	blx	r3
}
 800303e:	bd08      	pop	{r3, pc}
 8003040:	200002b0 	.word	0x200002b0

08003044 <__printk_hook_install>:
	_char_out = fn;
 8003044:	4b01      	ldr	r3, [pc, #4]	; (800304c <__printk_hook_install+0x8>)
 8003046:	6018      	str	r0, [r3, #0]
}
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	200002b0 	.word	0x200002b0

08003050 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
 8003050:	b500      	push	{lr}
 8003052:	b083      	sub	sp, #12
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 8003058:	2100      	movs	r1, #0
 800305a:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 800305c:	a901      	add	r1, sp, #4
 800305e:	4803      	ldr	r0, [pc, #12]	; (800306c <vprintk+0x1c>)
 8003060:	f000 fa2c 	bl	80034bc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 8003064:	b003      	add	sp, #12
 8003066:	f85d fb04 	ldr.w	pc, [sp], #4
 800306a:	bf00      	nop
 800306c:	08003031 	.word	0x08003031

08003070 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8003070:	b510      	push	{r4, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8003076:	9001      	str	r0, [sp, #4]
 8003078:	9102      	str	r1, [sp, #8]
 800307a:	2100      	movs	r1, #0
 800307c:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
 800307e:	a901      	add	r1, sp, #4
 8003080:	4805      	ldr	r0, [pc, #20]	; (8003098 <vsnprintk+0x28>)
 8003082:	f000 fa1b 	bl	80034bc <cbvprintf>

	if (ctx.count < ctx.max) {
 8003086:	9b03      	ldr	r3, [sp, #12]
 8003088:	9a02      	ldr	r2, [sp, #8]
 800308a:	4293      	cmp	r3, r2
 800308c:	da01      	bge.n	8003092 <vsnprintk+0x22>
		str[ctx.count] = '\0';
 800308e:	2200      	movs	r2, #0
 8003090:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 8003092:	9803      	ldr	r0, [sp, #12]
 8003094:	b004      	add	sp, #16
 8003096:	bd10      	pop	{r4, pc}
 8003098:	0800ec93 	.word	0x0800ec93

0800309c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 800309c:	4684      	mov	ip, r0
	const char *sp = *str;
 800309e:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 80030a0:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 80030a2:	e005      	b.n	80030b0 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 80030a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80030a8:	3201      	adds	r2, #1
 80030aa:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80030ae:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80030b0:	7813      	ldrb	r3, [r2, #0]
 80030b2:	4904      	ldr	r1, [pc, #16]	; (80030c4 <extract_decimal+0x28>)
 80030b4:	5c59      	ldrb	r1, [r3, r1]
 80030b6:	f011 0f04 	tst.w	r1, #4
 80030ba:	d1f3      	bne.n	80030a4 <extract_decimal+0x8>
	}
	*str = sp;
 80030bc:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	08013b45 	.word	0x08013b45

080030c8 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 80030ce:	2300      	movs	r3, #0
 80030d0:	6003      	str	r3, [r0, #0]
 80030d2:	6043      	str	r3, [r0, #4]
 80030d4:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 80030d6:	784b      	ldrb	r3, [r1, #1]
 80030d8:	2b25      	cmp	r3, #37	; 0x25
 80030da:	d002      	beq.n	80030e2 <extract_conversion+0x1a>
 80030dc:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 80030de:	2501      	movs	r5, #1
 80030e0:	e01f      	b.n	8003122 <extract_conversion+0x5a>
		conv->specifier = *sp++;
 80030e2:	1c88      	adds	r0, r1, #2
 80030e4:	70e3      	strb	r3, [r4, #3]
		return sp;
 80030e6:	e145      	b.n	8003374 <extract_conversion+0x2ac>
			conv->flag_dash = true;
 80030e8:	7823      	ldrb	r3, [r4, #0]
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	7023      	strb	r3, [r4, #0]
		if (loop) {
 80030f0:	b1b5      	cbz	r5, 8003120 <extract_conversion+0x58>
			++sp;
 80030f2:	3601      	adds	r6, #1
 80030f4:	e014      	b.n	8003120 <extract_conversion+0x58>
			conv->flag_plus = true;
 80030f6:	7823      	ldrb	r3, [r4, #0]
 80030f8:	f043 0308 	orr.w	r3, r3, #8
 80030fc:	7023      	strb	r3, [r4, #0]
			break;
 80030fe:	e7f7      	b.n	80030f0 <extract_conversion+0x28>
			conv->flag_space = true;
 8003100:	7823      	ldrb	r3, [r4, #0]
 8003102:	f043 0310 	orr.w	r3, r3, #16
 8003106:	7023      	strb	r3, [r4, #0]
			break;
 8003108:	e7f2      	b.n	80030f0 <extract_conversion+0x28>
			conv->flag_hash = true;
 800310a:	7823      	ldrb	r3, [r4, #0]
 800310c:	f043 0320 	orr.w	r3, r3, #32
 8003110:	7023      	strb	r3, [r4, #0]
			break;
 8003112:	e7ed      	b.n	80030f0 <extract_conversion+0x28>
			conv->flag_zero = true;
 8003114:	7823      	ldrb	r3, [r4, #0]
 8003116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800311a:	7023      	strb	r3, [r4, #0]
			break;
 800311c:	e7e8      	b.n	80030f0 <extract_conversion+0x28>
		switch (*sp) {
 800311e:	2500      	movs	r5, #0
	} while (loop);
 8003120:	b345      	cbz	r5, 8003174 <extract_conversion+0xac>
		switch (*sp) {
 8003122:	7833      	ldrb	r3, [r6, #0]
 8003124:	3b20      	subs	r3, #32
 8003126:	2b10      	cmp	r3, #16
 8003128:	d8f9      	bhi.n	800311e <extract_conversion+0x56>
 800312a:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <extract_conversion+0x68>)
 800312c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003130:	08003101 	.word	0x08003101
 8003134:	0800311f 	.word	0x0800311f
 8003138:	0800311f 	.word	0x0800311f
 800313c:	0800310b 	.word	0x0800310b
 8003140:	0800311f 	.word	0x0800311f
 8003144:	0800311f 	.word	0x0800311f
 8003148:	0800311f 	.word	0x0800311f
 800314c:	0800311f 	.word	0x0800311f
 8003150:	0800311f 	.word	0x0800311f
 8003154:	0800311f 	.word	0x0800311f
 8003158:	0800311f 	.word	0x0800311f
 800315c:	080030f7 	.word	0x080030f7
 8003160:	0800311f 	.word	0x0800311f
 8003164:	080030e9 	.word	0x080030e9
 8003168:	0800311f 	.word	0x0800311f
 800316c:	0800311f 	.word	0x0800311f
 8003170:	08003115 	.word	0x08003115
	if (conv->flag_zero && conv->flag_dash) {
 8003174:	7823      	ldrb	r3, [r4, #0]
 8003176:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800317a:	2b44      	cmp	r3, #68	; 0x44
 800317c:	d05f      	beq.n	800323e <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 800317e:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 8003180:	7823      	ldrb	r3, [r4, #0]
 8003182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003186:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 8003188:	7833      	ldrb	r3, [r6, #0]
 800318a:	2b2a      	cmp	r3, #42	; 0x2a
 800318c:	d05c      	beq.n	8003248 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 800318e:	a801      	add	r0, sp, #4
 8003190:	f7ff ff84 	bl	800309c <extract_decimal>
	if (sp != wp) {
 8003194:	9b01      	ldr	r3, [sp, #4]
 8003196:	429e      	cmp	r6, r3
 8003198:	d00f      	beq.n	80031ba <extract_conversion+0xf2>
		conv->width_present = true;
 800319a:	7823      	ldrb	r3, [r4, #0]
 800319c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a0:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 80031a2:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 80031aa:	2800      	cmp	r0, #0
 80031ac:	db54      	blt.n	8003258 <extract_conversion+0x190>
 80031ae:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	7822      	ldrb	r2, [r4, #0]
 80031b4:	f363 0241 	bfi	r2, r3, #1, #1
 80031b8:	7022      	strb	r2, [r4, #0]
	return sp;
 80031ba:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 80031bc:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b2e      	cmp	r3, #46	; 0x2e
 80031c2:	bf14      	ite	ne
 80031c4:	2300      	movne	r3, #0
 80031c6:	2301      	moveq	r3, #1
 80031c8:	7862      	ldrb	r2, [r4, #1]
 80031ca:	f363 0241 	bfi	r2, r3, #1, #1
 80031ce:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d043      	beq.n	800325c <extract_conversion+0x194>
	++sp;
 80031d4:	9b01      	ldr	r3, [sp, #4]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 80031da:	785b      	ldrb	r3, [r3, #1]
 80031dc:	2b2a      	cmp	r3, #42	; 0x2a
 80031de:	d03f      	beq.n	8003260 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 80031e0:	a801      	add	r0, sp, #4
 80031e2:	f7ff ff5b 	bl	800309c <extract_decimal>
	conv->prec_value = prec;
 80031e6:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 80031e8:	7823      	ldrb	r3, [r4, #0]
 80031ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 80031ee:	2800      	cmp	r0, #0
 80031f0:	db3e      	blt.n	8003270 <extract_conversion+0x1a8>
 80031f2:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	7822      	ldrb	r2, [r4, #0]
 80031f8:	f363 0241 	bfi	r2, r3, #1, #1
 80031fc:	7022      	strb	r2, [r4, #0]
	return sp;
 80031fe:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 8003200:	7803      	ldrb	r3, [r0, #0]
 8003202:	3b4c      	subs	r3, #76	; 0x4c
 8003204:	2b2e      	cmp	r3, #46	; 0x2e
 8003206:	f200 809d 	bhi.w	8003344 <extract_conversion+0x27c>
 800320a:	e8df f003 	tbb	[pc, r3]
 800320e:	9b90      	.short	0x9b90
 8003210:	9b9b9b9b 	.word	0x9b9b9b9b
 8003214:	9b9b9b9b 	.word	0x9b9b9b9b
 8003218:	9b9b9b9b 	.word	0x9b9b9b9b
 800321c:	9b9b9b9b 	.word	0x9b9b9b9b
 8003220:	9b9b9b9b 	.word	0x9b9b9b9b
 8003224:	9b9b9b9b 	.word	0x9b9b9b9b
 8003228:	9b339b9b 	.word	0x9b339b9b
 800322c:	9b459b57 	.word	0x9b459b57
 8003230:	9b9b9b9b 	.word	0x9b9b9b9b
 8003234:	9b899b9b 	.word	0x9b899b9b
 8003238:	9b9b9b9b 	.word	0x9b9b9b9b
 800323c:	82          	.byte	0x82
 800323d:	00          	.byte	0x00
		conv->flag_zero = false;
 800323e:	7823      	ldrb	r3, [r4, #0]
 8003240:	f36f 1386 	bfc	r3, #6, #1
 8003244:	7023      	strb	r3, [r4, #0]
 8003246:	e79a      	b.n	800317e <extract_conversion+0xb6>
		conv->width_star = true;
 8003248:	7863      	ldrb	r3, [r4, #1]
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8003250:	4633      	mov	r3, r6
 8003252:	3301      	adds	r3, #1
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	e7b1      	b.n	80031bc <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 8003258:	2201      	movs	r2, #1
 800325a:	e7a9      	b.n	80031b0 <extract_conversion+0xe8>
		return sp;
 800325c:	9801      	ldr	r0, [sp, #4]
 800325e:	e7cf      	b.n	8003200 <extract_conversion+0x138>
		conv->prec_star = true;
 8003260:	7863      	ldrb	r3, [r4, #1]
 8003262:	f043 0304 	orr.w	r3, r3, #4
 8003266:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8003268:	4610      	mov	r0, r2
 800326a:	3001      	adds	r0, #1
 800326c:	9001      	str	r0, [sp, #4]
 800326e:	e7c7      	b.n	8003200 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 8003270:	2201      	movs	r2, #1
 8003272:	e7bf      	b.n	80031f4 <extract_conversion+0x12c>
		if (*++sp == 'h') {
 8003274:	1c42      	adds	r2, r0, #1
 8003276:	7843      	ldrb	r3, [r0, #1]
 8003278:	2b68      	cmp	r3, #104	; 0x68
 800327a:	d006      	beq.n	800328a <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 800327c:	7863      	ldrb	r3, [r4, #1]
 800327e:	2102      	movs	r1, #2
 8003280:	f361 03c6 	bfi	r3, r1, #3, #4
 8003284:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 8003286:	4610      	mov	r0, r2
 8003288:	e01e      	b.n	80032c8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 800328a:	7863      	ldrb	r3, [r4, #1]
 800328c:	2201      	movs	r2, #1
 800328e:	f362 03c6 	bfi	r3, r2, #3, #4
 8003292:	7063      	strb	r3, [r4, #1]
			++sp;
 8003294:	3002      	adds	r0, #2
 8003296:	e017      	b.n	80032c8 <extract_conversion+0x200>
		if (*++sp == 'l') {
 8003298:	1c42      	adds	r2, r0, #1
 800329a:	7843      	ldrb	r3, [r0, #1]
 800329c:	2b6c      	cmp	r3, #108	; 0x6c
 800329e:	d006      	beq.n	80032ae <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 80032a0:	7863      	ldrb	r3, [r4, #1]
 80032a2:	2103      	movs	r1, #3
 80032a4:	f361 03c6 	bfi	r3, r1, #3, #4
 80032a8:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 80032aa:	4610      	mov	r0, r2
 80032ac:	e00c      	b.n	80032c8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 80032ae:	7863      	ldrb	r3, [r4, #1]
 80032b0:	2204      	movs	r2, #4
 80032b2:	f362 03c6 	bfi	r3, r2, #3, #4
 80032b6:	7063      	strb	r3, [r4, #1]
			++sp;
 80032b8:	3002      	adds	r0, #2
 80032ba:	e005      	b.n	80032c8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 80032bc:	7863      	ldrb	r3, [r4, #1]
 80032be:	2205      	movs	r2, #5
 80032c0:	f362 03c6 	bfi	r3, r2, #3, #4
 80032c4:	7063      	strb	r3, [r4, #1]
		++sp;
 80032c6:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 80032c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80032cc:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 80032ce:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80032d2:	2a37      	cmp	r2, #55	; 0x37
 80032d4:	d87d      	bhi.n	80033d2 <extract_conversion+0x30a>
 80032d6:	e8df f002 	tbb	[pc, r2]
 80032da:	7c5e      	.short	0x7c5e
 80032dc:	5e5e7c7c 	.word	0x5e5e7c7c
 80032e0:	7c7c7c5e 	.word	0x7c7c7c5e
 80032e4:	7c7c7c7c 	.word	0x7c7c7c7c
 80032e8:	7c7c7c7c 	.word	0x7c7c7c7c
 80032ec:	7c7c7c7c 	.word	0x7c7c7c7c
 80032f0:	7c7c4f7c 	.word	0x7c7c4f7c
 80032f4:	7c7c7c7c 	.word	0x7c7c7c7c
 80032f8:	7c5e7c7c 	.word	0x7c5e7c7c
 80032fc:	5e5e3a4f 	.word	0x5e5e3a4f
 8003300:	7c3a7c5e 	.word	0x7c3a7c5e
 8003304:	657c7c7c 	.word	0x657c7c7c
 8003308:	7c7c714f 	.word	0x7c7c714f
 800330c:	7c4f7c71 	.word	0x7c4f7c71
 8003310:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 8003312:	7863      	ldrb	r3, [r4, #1]
 8003314:	2206      	movs	r2, #6
 8003316:	f362 03c6 	bfi	r3, r2, #3, #4
 800331a:	7063      	strb	r3, [r4, #1]
		++sp;
 800331c:	3001      	adds	r0, #1
		break;
 800331e:	e7d3      	b.n	80032c8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 8003320:	7863      	ldrb	r3, [r4, #1]
 8003322:	2207      	movs	r2, #7
 8003324:	f362 03c6 	bfi	r3, r2, #3, #4
 8003328:	7063      	strb	r3, [r4, #1]
		++sp;
 800332a:	3001      	adds	r0, #1
		break;
 800332c:	e7cc      	b.n	80032c8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 800332e:	7863      	ldrb	r3, [r4, #1]
 8003330:	2208      	movs	r2, #8
 8003332:	f362 03c6 	bfi	r3, r2, #3, #4
 8003336:	7063      	strb	r3, [r4, #1]
		++sp;
 8003338:	3001      	adds	r0, #1
		conv->unsupported = true;
 800333a:	7823      	ldrb	r3, [r4, #0]
 800333c:	f043 0302 	orr.w	r3, r3, #2
 8003340:	7023      	strb	r3, [r4, #0]
		break;
 8003342:	e7c1      	b.n	80032c8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 8003344:	7863      	ldrb	r3, [r4, #1]
 8003346:	f36f 03c6 	bfc	r3, #3, #4
 800334a:	7063      	strb	r3, [r4, #1]
		break;
 800334c:	e7bc      	b.n	80032c8 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 800334e:	78a2      	ldrb	r2, [r4, #2]
 8003350:	2101      	movs	r1, #1
 8003352:	f361 0202 	bfi	r2, r1, #0, #3
 8003356:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8003358:	7862      	ldrb	r2, [r4, #1]
 800335a:	f002 0278 	and.w	r2, r2, #120	; 0x78
 800335e:	2a40      	cmp	r2, #64	; 0x40
 8003360:	d010      	beq.n	8003384 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 8003362:	2b63      	cmp	r3, #99	; 0x63
 8003364:	d013      	beq.n	800338e <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 8003366:	7823      	ldrb	r3, [r4, #0]
 8003368:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800336c:	4315      	orrs	r5, r2
 800336e:	f365 0341 	bfi	r3, r5, #1, #1
 8003372:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 8003374:	b002      	add	sp, #8
 8003376:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 8003378:	78a2      	ldrb	r2, [r4, #2]
 800337a:	2102      	movs	r1, #2
 800337c:	f361 0202 	bfi	r2, r1, #0, #3
 8003380:	70a2      	strb	r2, [r4, #2]
 8003382:	e7e9      	b.n	8003358 <extract_conversion+0x290>
			conv->invalid = true;
 8003384:	7821      	ldrb	r1, [r4, #0]
 8003386:	f041 0101 	orr.w	r1, r1, #1
 800338a:	7021      	strb	r1, [r4, #0]
 800338c:	e7e9      	b.n	8003362 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 800338e:	1e15      	subs	r5, r2, #0
 8003390:	bf18      	it	ne
 8003392:	2501      	movne	r5, #1
 8003394:	e7e7      	b.n	8003366 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 8003396:	78a3      	ldrb	r3, [r4, #2]
 8003398:	2204      	movs	r2, #4
 800339a:	f362 0302 	bfi	r3, r2, #0, #3
 800339e:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 80033a0:	2501      	movs	r5, #1
			break;
 80033a2:	e7e0      	b.n	8003366 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 80033a4:	78a3      	ldrb	r3, [r4, #2]
 80033a6:	2203      	movs	r2, #3
 80033a8:	f362 0302 	bfi	r3, r2, #0, #3
 80033ac:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 80033ae:	7863      	ldrb	r3, [r4, #1]
 80033b0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	d1d6      	bne.n	8003366 <extract_conversion+0x29e>
			unsupported = true;
 80033b8:	2501      	movs	r5, #1
 80033ba:	e7d4      	b.n	8003366 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 80033bc:	78a3      	ldrb	r3, [r4, #2]
 80033be:	2203      	movs	r2, #3
 80033c0:	f362 0302 	bfi	r3, r2, #0, #3
 80033c4:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 80033c6:	7863      	ldrb	r3, [r4, #1]
 80033c8:	f013 0f78 	tst.w	r3, #120	; 0x78
 80033cc:	d0cb      	beq.n	8003366 <extract_conversion+0x29e>
			unsupported = true;
 80033ce:	2501      	movs	r5, #1
 80033d0:	e7c9      	b.n	8003366 <extract_conversion+0x29e>
		conv->invalid = true;
 80033d2:	7823      	ldrb	r3, [r4, #0]
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	7023      	strb	r3, [r4, #0]
		break;
 80033da:	e7c4      	b.n	8003366 <extract_conversion+0x29e>

080033dc <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 80033dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e0:	b083      	sub	sp, #12
 80033e2:	4604      	mov	r4, r0
 80033e4:	460d      	mov	r5, r1
 80033e6:	9201      	str	r2, [sp, #4]
 80033e8:	469a      	mov	sl, r3
 80033ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 80033ec:	78d3      	ldrb	r3, [r2, #3]
 80033ee:	4a32      	ldr	r2, [pc, #200]	; (80034b8 <encode_uint+0xdc>)
 80033f0:	f813 b002 	ldrb.w	fp, [r3, r2]
 80033f4:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 80033f8:	2b6f      	cmp	r3, #111	; 0x6f
 80033fa:	d00f      	beq.n	800341c <encode_uint+0x40>
 80033fc:	d906      	bls.n	800340c <encode_uint+0x30>
 80033fe:	2b70      	cmp	r3, #112	; 0x70
 8003400:	d00f      	beq.n	8003422 <encode_uint+0x46>
 8003402:	2b78      	cmp	r3, #120	; 0x78
 8003404:	d110      	bne.n	8003428 <encode_uint+0x4c>
		return 16;
 8003406:	f04f 0910 	mov.w	r9, #16
 800340a:	e023      	b.n	8003454 <encode_uint+0x78>
	switch (specifier) {
 800340c:	2b58      	cmp	r3, #88	; 0x58
 800340e:	d002      	beq.n	8003416 <encode_uint+0x3a>
 8003410:	f04f 090a 	mov.w	r9, #10
 8003414:	e01e      	b.n	8003454 <encode_uint+0x78>
		return 16;
 8003416:	f04f 0910 	mov.w	r9, #16
 800341a:	e01b      	b.n	8003454 <encode_uint+0x78>
		return 8;
 800341c:	f04f 0908 	mov.w	r9, #8
 8003420:	e018      	b.n	8003454 <encode_uint+0x78>
		return 16;
 8003422:	f04f 0910 	mov.w	r9, #16
 8003426:	e015      	b.n	8003454 <encode_uint+0x78>
	switch (specifier) {
 8003428:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 800342c:	e012      	b.n	8003454 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	3230      	adds	r2, #48	; 0x30
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 8003438:	463a      	mov	r2, r7
 800343a:	4643      	mov	r3, r8
 800343c:	4620      	mov	r0, r4
 800343e:	4629      	mov	r1, r5
 8003440:	f7fd facc 	bl	80009dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 8003444:	42bc      	cmp	r4, r7
 8003446:	f175 0300 	sbcs.w	r3, r5, #0
 800344a:	d319      	bcc.n	8003480 <encode_uint+0xa4>
 800344c:	4556      	cmp	r6, sl
 800344e:	d917      	bls.n	8003480 <encode_uint+0xa4>
		value /= radix;
 8003450:	4604      	mov	r4, r0
 8003452:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 8003454:	f04f 0800 	mov.w	r8, #0
 8003458:	464f      	mov	r7, r9
 800345a:	464a      	mov	r2, r9
 800345c:	4643      	mov	r3, r8
 800345e:	4620      	mov	r0, r4
 8003460:	4629      	mov	r1, r5
 8003462:	f7fd fabb 	bl	80009dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003466:	2a09      	cmp	r2, #9
 8003468:	d9e1      	bls.n	800342e <encode_uint+0x52>
 800346a:	f1bb 0f01 	cmp.w	fp, #1
 800346e:	d003      	beq.n	8003478 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8003470:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003472:	3257      	adds	r2, #87	; 0x57
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	e7dd      	b.n	8003434 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8003478:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800347a:	3237      	adds	r2, #55	; 0x37
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	e7d9      	b.n	8003434 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 8003480:	9b01      	ldr	r3, [sp, #4]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	f013 0f20 	tst.w	r3, #32
 8003488:	d005      	beq.n	8003496 <encode_uint+0xba>
		if (radix == 8) {
 800348a:	f1b9 0f08 	cmp.w	r9, #8
 800348e:	d006      	beq.n	800349e <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 8003490:	f1b9 0f10 	cmp.w	r9, #16
 8003494:	d009      	beq.n	80034aa <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 8003496:	4630      	mov	r0, r6
 8003498:	b003      	add	sp, #12
 800349a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 800349e:	9a01      	ldr	r2, [sp, #4]
 80034a0:	7893      	ldrb	r3, [r2, #2]
 80034a2:	f043 0308 	orr.w	r3, r3, #8
 80034a6:	7093      	strb	r3, [r2, #2]
 80034a8:	e7f5      	b.n	8003496 <encode_uint+0xba>
			conv->altform_0c = true;
 80034aa:	9a01      	ldr	r2, [sp, #4]
 80034ac:	7893      	ldrb	r3, [r2, #2]
 80034ae:	f043 0310 	orr.w	r3, r3, #16
 80034b2:	7093      	strb	r3, [r2, #2]
 80034b4:	e7ef      	b.n	8003496 <encode_uint+0xba>
 80034b6:	bf00      	nop
 80034b8:	08013b45 	.word	0x08013b45

080034bc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 80034bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c0:	b091      	sub	sp, #68	; 0x44
 80034c2:	4606      	mov	r6, r0
 80034c4:	460d      	mov	r5, r1
 80034c6:	4691      	mov	r9, r2
 80034c8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80034ca:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80034cc:	f899 0000 	ldrb.w	r0, [r9]
 80034d0:	2800      	cmp	r0, #0
 80034d2:	f000 82d5 	beq.w	8003a80 <cbvprintf+0x5c4>
		if (*fp != '%') {
 80034d6:	2825      	cmp	r0, #37	; 0x25
 80034d8:	d008      	beq.n	80034ec <cbvprintf+0x30>
			OUTC(*fp++);
 80034da:	f109 0901 	add.w	r9, r9, #1
 80034de:	4629      	mov	r1, r5
 80034e0:	47b0      	blx	r6
 80034e2:	2800      	cmp	r0, #0
 80034e4:	f2c0 82cd 	blt.w	8003a82 <cbvprintf+0x5c6>
 80034e8:	3401      	adds	r4, #1
			continue;
 80034ea:	e7ef      	b.n	80034cc <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 80034ec:	2300      	movs	r3, #0
 80034ee:	9304      	str	r3, [sp, #16]
 80034f0:	9305      	str	r3, [sp, #20]
 80034f2:	9306      	str	r3, [sp, #24]
 80034f4:	9307      	str	r3, [sp, #28]
 80034f6:	9308      	str	r3, [sp, #32]
 80034f8:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 80034fa:	4649      	mov	r1, r9
 80034fc:	a806      	add	r0, sp, #24
 80034fe:	f7ff fde3 	bl	80030c8 <extract_conversion>
 8003502:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 8003504:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003508:	f013 0f01 	tst.w	r3, #1
 800350c:	f000 8097 	beq.w	800363e <cbvprintf+0x182>
			width = va_arg(ap, int);
 8003510:	9b03      	ldr	r3, [sp, #12]
 8003512:	1d1a      	adds	r2, r3, #4
 8003514:	9203      	str	r2, [sp, #12]
 8003516:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 8003518:	2f00      	cmp	r7, #0
 800351a:	f2c0 8088 	blt.w	800362e <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 800351e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003522:	f013 0f04 	tst.w	r3, #4
 8003526:	f000 809c 	beq.w	8003662 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 800352a:	9b03      	ldr	r3, [sp, #12]
 800352c:	1d1a      	adds	r2, r3, #4
 800352e:	9203      	str	r2, [sp, #12]
 8003530:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 8003534:	f1ba 0f00 	cmp.w	sl, #0
 8003538:	f2c0 808a 	blt.w	8003650 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 8003540:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 8003542:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003546:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 800354a:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800354e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 8003552:	2b01      	cmp	r3, #1
 8003554:	f000 808e 	beq.w	8003674 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 8003558:	2b02      	cmp	r3, #2
 800355a:	f000 80d3 	beq.w	8003704 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 800355e:	2b04      	cmp	r3, #4
 8003560:	f000 8124 	beq.w	80037ac <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 8003564:	2b03      	cmp	r3, #3
 8003566:	f000 813b 	beq.w	80037e0 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 800356a:	f89d 8018 	ldrb.w	r8, [sp, #24]
 800356e:	f018 0b03 	ands.w	fp, r8, #3
 8003572:	f040 813b 	bne.w	80037ec <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 8003576:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800357a:	3b25      	subs	r3, #37	; 0x25
 800357c:	2b53      	cmp	r3, #83	; 0x53
 800357e:	f200 81e6 	bhi.w	800394e <cbvprintf+0x492>
 8003582:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003586:	0140      	.short	0x0140
 8003588:	01e401e4 	.word	0x01e401e4
 800358c:	01e401e4 	.word	0x01e401e4
 8003590:	01e401e4 	.word	0x01e401e4
 8003594:	01e401e4 	.word	0x01e401e4
 8003598:	01e401e4 	.word	0x01e401e4
 800359c:	01e401e4 	.word	0x01e401e4
 80035a0:	01e401e4 	.word	0x01e401e4
 80035a4:	01e401e4 	.word	0x01e401e4
 80035a8:	01e401e4 	.word	0x01e401e4
 80035ac:	01e401e4 	.word	0x01e401e4
 80035b0:	01e401e4 	.word	0x01e401e4
 80035b4:	01e401e4 	.word	0x01e401e4
 80035b8:	01e401e4 	.word	0x01e401e4
 80035bc:	01e401e4 	.word	0x01e401e4
 80035c0:	01e401e4 	.word	0x01e401e4
 80035c4:	01e401e4 	.word	0x01e401e4
 80035c8:	01e401e4 	.word	0x01e401e4
 80035cc:	01e401e4 	.word	0x01e401e4
 80035d0:	01e401e4 	.word	0x01e401e4
 80035d4:	01e401e4 	.word	0x01e401e4
 80035d8:	01e401e4 	.word	0x01e401e4
 80035dc:	01e401e4 	.word	0x01e401e4
 80035e0:	01e401e4 	.word	0x01e401e4
 80035e4:	01e401e4 	.word	0x01e401e4
 80035e8:	01e401e4 	.word	0x01e401e4
 80035ec:	01e40181 	.word	0x01e40181
 80035f0:	01e401e4 	.word	0x01e401e4
 80035f4:	01e401e4 	.word	0x01e401e4
 80035f8:	01e401e4 	.word	0x01e401e4
 80035fc:	01e401e4 	.word	0x01e401e4
 8003600:	015e01e4 	.word	0x015e01e4
 8003604:	01e40167 	.word	0x01e40167
 8003608:	01e401e4 	.word	0x01e401e4
 800360c:	016701e4 	.word	0x016701e4
 8003610:	01e401e4 	.word	0x01e401e4
 8003614:	01e401e4 	.word	0x01e401e4
 8003618:	018101be 	.word	0x018101be
 800361c:	01e401a2 	.word	0x01e401a2
 8003620:	014d01e4 	.word	0x014d01e4
 8003624:	018101e4 	.word	0x018101e4
 8003628:	01e401e4 	.word	0x01e401e4
 800362c:	0181      	.short	0x0181
				conv->flag_dash = true;
 800362e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003632:	f043 0304 	orr.w	r3, r3, #4
 8003636:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 800363a:	427f      	negs	r7, r7
 800363c:	e76f      	b.n	800351e <cbvprintf+0x62>
		} else if (conv->width_present) {
 800363e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	db02      	blt.n	800364c <cbvprintf+0x190>
		int width = -1;
 8003646:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800364a:	e768      	b.n	800351e <cbvprintf+0x62>
			width = conv->width_value;
 800364c:	9f07      	ldr	r7, [sp, #28]
 800364e:	e766      	b.n	800351e <cbvprintf+0x62>
				conv->prec_present = false;
 8003650:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003654:	f36f 0341 	bfc	r3, #1, #1
 8003658:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 800365c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003660:	e76c      	b.n	800353c <cbvprintf+0x80>
		} else if (conv->prec_present) {
 8003662:	f013 0f02 	tst.w	r3, #2
 8003666:	d002      	beq.n	800366e <cbvprintf+0x1b2>
			precision = conv->prec_value;
 8003668:	f8dd a020 	ldr.w	sl, [sp, #32]
 800366c:	e766      	b.n	800353c <cbvprintf+0x80>
		int precision = -1;
 800366e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003672:	e763      	b.n	800353c <cbvprintf+0x80>
			switch (length_mod) {
 8003674:	1ecb      	subs	r3, r1, #3
 8003676:	2b04      	cmp	r3, #4
 8003678:	d804      	bhi.n	8003684 <cbvprintf+0x1c8>
 800367a:	e8df f003 	tbb	[pc, r3]
 800367e:	1d0b      	.short	0x1d0b
 8003680:	3529      	.short	0x3529
 8003682:	35          	.byte	0x35
 8003683:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8003684:	9b03      	ldr	r3, [sp, #12]
 8003686:	1d1a      	adds	r2, r3, #4
 8003688:	9203      	str	r2, [sp, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	17da      	asrs	r2, r3, #31
 800368e:	9304      	str	r3, [sp, #16]
 8003690:	9205      	str	r2, [sp, #20]
				break;
 8003692:	e006      	b.n	80036a2 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 8003694:	9b03      	ldr	r3, [sp, #12]
 8003696:	1d1a      	adds	r2, r3, #4
 8003698:	9203      	str	r2, [sp, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	17da      	asrs	r2, r3, #31
 800369e:	9304      	str	r3, [sp, #16]
 80036a0:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 80036a2:	2901      	cmp	r1, #1
 80036a4:	d028      	beq.n	80036f8 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 80036a6:	2902      	cmp	r1, #2
 80036a8:	f47f af5f 	bne.w	800356a <cbvprintf+0xae>
				value->sint = (short)value->sint;
 80036ac:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80036b0:	17da      	asrs	r2, r3, #31
 80036b2:	9304      	str	r3, [sp, #16]
 80036b4:	9205      	str	r2, [sp, #20]
 80036b6:	e758      	b.n	800356a <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 80036b8:	9b03      	ldr	r3, [sp, #12]
 80036ba:	3307      	adds	r3, #7
 80036bc:	f023 0307 	bic.w	r3, r3, #7
 80036c0:	f103 0208 	add.w	r2, r3, #8
 80036c4:	9203      	str	r2, [sp, #12]
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 80036ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 80036ce:	e7e8      	b.n	80036a2 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 80036d0:	9b03      	ldr	r3, [sp, #12]
 80036d2:	3307      	adds	r3, #7
 80036d4:	f023 0307 	bic.w	r3, r3, #7
 80036d8:	f103 0208 	add.w	r2, r3, #8
 80036dc:	9203      	str	r2, [sp, #12]
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 80036e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 80036e6:	e7dc      	b.n	80036a2 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80036e8:	9b03      	ldr	r3, [sp, #12]
 80036ea:	1d1a      	adds	r2, r3, #4
 80036ec:	9203      	str	r2, [sp, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	17da      	asrs	r2, r3, #31
				value->sint =
 80036f2:	9304      	str	r3, [sp, #16]
 80036f4:	9205      	str	r2, [sp, #20]
				break;
 80036f6:	e7d4      	b.n	80036a2 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 80036f8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80036fc:	9304      	str	r3, [sp, #16]
 80036fe:	2300      	movs	r3, #0
 8003700:	9305      	str	r3, [sp, #20]
 8003702:	e732      	b.n	800356a <cbvprintf+0xae>
			switch (length_mod) {
 8003704:	1ecb      	subs	r3, r1, #3
 8003706:	2b04      	cmp	r3, #4
 8003708:	d804      	bhi.n	8003714 <cbvprintf+0x258>
 800370a:	e8df f003 	tbb	[pc, r3]
 800370e:	1f0b      	.short	0x1f0b
 8003710:	4135      	.short	0x4135
 8003712:	41          	.byte	0x41
 8003713:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 8003714:	9b03      	ldr	r3, [sp, #12]
 8003716:	1d1a      	adds	r2, r3, #4
 8003718:	9203      	str	r2, [sp, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	9304      	str	r3, [sp, #16]
 800371e:	2300      	movs	r3, #0
 8003720:	9305      	str	r3, [sp, #20]
				break;
 8003722:	e01e      	b.n	8003762 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 8003724:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 8003728:	2b63      	cmp	r3, #99	; 0x63
 800372a:	d007      	beq.n	800373c <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	9203      	str	r2, [sp, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	9304      	str	r3, [sp, #16]
 8003736:	2300      	movs	r3, #0
 8003738:	9305      	str	r3, [sp, #20]
 800373a:	e012      	b.n	8003762 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 800373c:	9b03      	ldr	r3, [sp, #12]
 800373e:	1d1a      	adds	r2, r3, #4
 8003740:	9203      	str	r2, [sp, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	9304      	str	r3, [sp, #16]
 8003746:	2300      	movs	r3, #0
 8003748:	9305      	str	r3, [sp, #20]
 800374a:	e00a      	b.n	8003762 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 800374c:	9b03      	ldr	r3, [sp, #12]
 800374e:	3307      	adds	r3, #7
 8003750:	f023 0307 	bic.w	r3, r3, #7
 8003754:	f103 0208 	add.w	r2, r3, #8
 8003758:	9203      	str	r2, [sp, #12]
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 800375e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 8003762:	2901      	cmp	r1, #1
 8003764:	d01c      	beq.n	80037a0 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 8003766:	2902      	cmp	r1, #2
 8003768:	f47f aeff 	bne.w	800356a <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 800376c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8003770:	9304      	str	r3, [sp, #16]
 8003772:	2300      	movs	r3, #0
 8003774:	9305      	str	r3, [sp, #20]
 8003776:	e6f8      	b.n	800356a <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 8003778:	9b03      	ldr	r3, [sp, #12]
 800377a:	3307      	adds	r3, #7
 800377c:	f023 0307 	bic.w	r3, r3, #7
 8003780:	f103 0208 	add.w	r2, r3, #8
 8003784:	9203      	str	r2, [sp, #12]
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 800378a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 800378e:	e7e8      	b.n	8003762 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 8003790:	9b03      	ldr	r3, [sp, #12]
 8003792:	1d1a      	adds	r2, r3, #4
 8003794:	9203      	str	r2, [sp, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
				value->uint =
 8003798:	9304      	str	r3, [sp, #16]
 800379a:	2300      	movs	r3, #0
 800379c:	9305      	str	r3, [sp, #20]
				break;
 800379e:	e7e0      	b.n	8003762 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 80037a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80037a4:	9304      	str	r3, [sp, #16]
 80037a6:	2300      	movs	r3, #0
 80037a8:	9305      	str	r3, [sp, #20]
 80037aa:	e6de      	b.n	800356a <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 80037ac:	2908      	cmp	r1, #8
 80037ae:	d00b      	beq.n	80037c8 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 80037b0:	9b03      	ldr	r3, [sp, #12]
 80037b2:	3307      	adds	r3, #7
 80037b4:	f023 0307 	bic.w	r3, r3, #7
 80037b8:	f103 0208 	add.w	r2, r3, #8
 80037bc:	9203      	str	r2, [sp, #12]
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80037c6:	e6d0      	b.n	800356a <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 80037c8:	9b03      	ldr	r3, [sp, #12]
 80037ca:	3307      	adds	r3, #7
 80037cc:	f023 0307 	bic.w	r3, r3, #7
 80037d0:	f103 0208 	add.w	r2, r3, #8
 80037d4:	9203      	str	r2, [sp, #12]
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80037de:	e6c4      	b.n	800356a <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 80037e0:	9b03      	ldr	r3, [sp, #12]
 80037e2:	1d1a      	adds	r2, r3, #4
 80037e4:	9203      	str	r2, [sp, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	9304      	str	r3, [sp, #16]
 80037ea:	e6be      	b.n	800356a <cbvprintf+0xae>
			OUTS(sp, fp);
 80037ec:	9f02      	ldr	r7, [sp, #8]
 80037ee:	463b      	mov	r3, r7
 80037f0:	464a      	mov	r2, r9
 80037f2:	4629      	mov	r1, r5
 80037f4:	4630      	mov	r0, r6
 80037f6:	f00b fa8a 	bl	800ed0e <outs>
 80037fa:	2800      	cmp	r0, #0
 80037fc:	f2c0 8141 	blt.w	8003a82 <cbvprintf+0x5c6>
 8003800:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 8003802:	46b9      	mov	r9, r7
			continue;
 8003804:	e662      	b.n	80034cc <cbvprintf+0x10>
		case '%':
			OUTC('%');
 8003806:	4629      	mov	r1, r5
 8003808:	2025      	movs	r0, #37	; 0x25
 800380a:	47b0      	blx	r6
 800380c:	2800      	cmp	r0, #0
 800380e:	f2c0 8138 	blt.w	8003a82 <cbvprintf+0x5c6>
 8003812:	3401      	adds	r4, #1
		char sign = 0;
 8003814:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8003816:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 800381a:	f04f 0900 	mov.w	r9, #0
			break;
 800381e:	e09b      	b.n	8003958 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 8003820:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 8003824:	f1ba 0f00 	cmp.w	sl, #0
 8003828:	db07      	blt.n	800383a <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 800382a:	4651      	mov	r1, sl
 800382c:	4648      	mov	r0, r9
 800382e:	f00d fe71 	bl	8011514 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 8003832:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 8003836:	46d8      	mov	r8, fp
			precision = -1;

			break;
 8003838:	e08e      	b.n	8003958 <cbvprintf+0x49c>
				len = strlen(bps);
 800383a:	4648      	mov	r0, r9
 800383c:	f7fd fb0b 	bl	8000e56 <strlen>
 8003840:	e7f7      	b.n	8003832 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8003842:	9b04      	ldr	r3, [sp, #16]
 8003844:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 8003848:	46d8      	mov	r8, fp
			bpe = buf + 1;
 800384a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 800384e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 8003852:	e081      	b.n	8003958 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 8003854:	f018 0f08 	tst.w	r8, #8
 8003858:	d105      	bne.n	8003866 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 800385a:	f018 0810 	ands.w	r8, r8, #16
 800385e:	d004      	beq.n	800386a <cbvprintf+0x3ae>
				sign = ' ';
 8003860:	f04f 0820 	mov.w	r8, #32
 8003864:	e001      	b.n	800386a <cbvprintf+0x3ae>
				sign = '+';
 8003866:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 800386a:	9a04      	ldr	r2, [sp, #16]
 800386c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 800386e:	2b00      	cmp	r3, #0
 8003870:	db02      	blt.n	8003878 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 8003872:	9204      	str	r2, [sp, #16]
 8003874:	9305      	str	r3, [sp, #20]
 8003876:	e008      	b.n	800388a <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 8003878:	4252      	negs	r2, r2
 800387a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800387e:	9204      	str	r2, [sp, #16]
 8003880:	9305      	str	r3, [sp, #20]
				sign = '-';
 8003882:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8003886:	e000      	b.n	800388a <cbvprintf+0x3ce>
		switch (conv->specifier) {
 8003888:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 800388a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	ab0a      	add	r3, sp, #40	; 0x28
 8003892:	aa06      	add	r2, sp, #24
 8003894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003898:	f7ff fda0 	bl	80033dc <encode_uint>
 800389c:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 800389e:	f1ba 0f00 	cmp.w	sl, #0
 80038a2:	f2c0 8088 	blt.w	80039b6 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 80038a6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80038aa:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 80038ae:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80038b2:	f36f 1286 	bfc	r2, #6, #1
 80038b6:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 80038ba:	459a      	cmp	sl, r3
 80038bc:	d97e      	bls.n	80039bc <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 80038be:	ebaa 0303 	sub.w	r3, sl, r3
 80038c2:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 80038c4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 80038c8:	e046      	b.n	8003958 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 80038ca:	9804      	ldr	r0, [sp, #16]
 80038cc:	b928      	cbnz	r0, 80038da <cbvprintf+0x41e>
		char sign = 0;
 80038ce:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 80038d0:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8003a88 <cbvprintf+0x5cc>
			bps = "(nil)";
 80038d4:	f1aa 0905 	sub.w	r9, sl, #5
 80038d8:	e03e      	b.n	8003958 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80038da:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	ab0a      	add	r3, sp, #40	; 0x28
 80038e2:	aa06      	add	r2, sp, #24
 80038e4:	2100      	movs	r1, #0
 80038e6:	f7ff fd79 	bl	80033dc <encode_uint>
 80038ea:	4681      	mov	r9, r0
				conv->altform_0c = true;
 80038ec:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80038f0:	f043 0310 	orr.w	r3, r3, #16
 80038f4:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 80038f8:	2378      	movs	r3, #120	; 0x78
 80038fa:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 80038fe:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 8003900:	e7cd      	b.n	800389e <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 8003902:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 8003904:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003908:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 800390c:	2b07      	cmp	r3, #7
 800390e:	d806      	bhi.n	800391e <cbvprintf+0x462>
 8003910:	e8df f003 	tbb	[pc, r3]
 8003914:	0f0d0b04 	.word	0x0f0d0b04
 8003918:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 800391c:	6014      	str	r4, [r2, #0]
		char sign = 0;
 800391e:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8003920:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8003924:	f04f 0900 	mov.w	r9, #0
}
 8003928:	e016      	b.n	8003958 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 800392a:	7014      	strb	r4, [r2, #0]
		break;
 800392c:	e7f7      	b.n	800391e <cbvprintf+0x462>
		*(short *)dp = (short)count;
 800392e:	8014      	strh	r4, [r2, #0]
		break;
 8003930:	e7f5      	b.n	800391e <cbvprintf+0x462>
		*(long *)dp = (long)count;
 8003932:	6014      	str	r4, [r2, #0]
		break;
 8003934:	e7f3      	b.n	800391e <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 8003936:	17e3      	asrs	r3, r4, #31
 8003938:	6014      	str	r4, [r2, #0]
 800393a:	6053      	str	r3, [r2, #4]
		break;
 800393c:	e7ef      	b.n	800391e <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 800393e:	17e3      	asrs	r3, r4, #31
 8003940:	6014      	str	r4, [r2, #0]
 8003942:	6053      	str	r3, [r2, #4]
		break;
 8003944:	e7eb      	b.n	800391e <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 8003946:	6014      	str	r4, [r2, #0]
		break;
 8003948:	e7e9      	b.n	800391e <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 800394a:	6014      	str	r4, [r2, #0]
		break;
 800394c:	e7e7      	b.n	800391e <cbvprintf+0x462>
		switch (conv->specifier) {
 800394e:	46d8      	mov	r8, fp
 8003950:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8003954:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 8003958:	f1b9 0f00 	cmp.w	r9, #0
 800395c:	f000 808d 	beq.w	8003a7a <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 8003960:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 8003964:	f1b8 0f00 	cmp.w	r8, #0
 8003968:	d000      	beq.n	800396c <cbvprintf+0x4b0>
			nj_len += 1U;
 800396a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
 800396c:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8003970:	f011 0f10 	tst.w	r1, #16
 8003974:	d025      	beq.n	80039c2 <cbvprintf+0x506>
			nj_len += 2U;
 8003976:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 8003978:	9b07      	ldr	r3, [sp, #28]
 800397a:	4413      	add	r3, r2
		if (conv->pad_fp) {
 800397c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003980:	d001      	beq.n	8003986 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 8003982:	9a08      	ldr	r2, [sp, #32]
 8003984:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 8003986:	2f00      	cmp	r7, #0
 8003988:	dd31      	ble.n	80039ee <cbvprintf+0x532>
			width -= (int)nj_len;
 800398a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 800398c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003990:	f013 0f04 	tst.w	r3, #4
 8003994:	d12b      	bne.n	80039ee <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 8003996:	f013 0f40 	tst.w	r3, #64	; 0x40
 800399a:	d017      	beq.n	80039cc <cbvprintf+0x510>
					if (sign != 0) {
 800399c:	f1b8 0f00 	cmp.w	r8, #0
 80039a0:	d017      	beq.n	80039d2 <cbvprintf+0x516>
						OUTC(sign);
 80039a2:	4629      	mov	r1, r5
 80039a4:	4640      	mov	r0, r8
 80039a6:	47b0      	blx	r6
 80039a8:	2800      	cmp	r0, #0
 80039aa:	db6a      	blt.n	8003a82 <cbvprintf+0x5c6>
 80039ac:	3401      	adds	r4, #1
						sign = 0;
 80039ae:	46d8      	mov	r8, fp
					}
					pad = '0';
 80039b0:	f04f 0b30 	mov.w	fp, #48	; 0x30
 80039b4:	e00f      	b.n	80039d6 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 80039b6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 80039ba:	e7cd      	b.n	8003958 <cbvprintf+0x49c>
 80039bc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 80039c0:	e7ca      	b.n	8003958 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 80039c2:	f011 0f08 	tst.w	r1, #8
 80039c6:	d0d7      	beq.n	8003978 <cbvprintf+0x4bc>
			nj_len += 1U;
 80039c8:	3201      	adds	r2, #1
 80039ca:	e7d5      	b.n	8003978 <cbvprintf+0x4bc>
				char pad = ' ';
 80039cc:	f04f 0b20 	mov.w	fp, #32
 80039d0:	e001      	b.n	80039d6 <cbvprintf+0x51a>
					pad = '0';
 80039d2:	f04f 0b30 	mov.w	fp, #48	; 0x30
 80039d6:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 80039d8:	1e5f      	subs	r7, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	dd07      	ble.n	80039ee <cbvprintf+0x532>
					OUTC(pad);
 80039de:	4629      	mov	r1, r5
 80039e0:	4658      	mov	r0, fp
 80039e2:	47b0      	blx	r6
 80039e4:	2800      	cmp	r0, #0
 80039e6:	db4c      	blt.n	8003a82 <cbvprintf+0x5c6>
 80039e8:	3401      	adds	r4, #1
				while (width-- > 0) {
 80039ea:	463b      	mov	r3, r7
 80039ec:	e7f4      	b.n	80039d8 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 80039ee:	f1b8 0f00 	cmp.w	r8, #0
 80039f2:	d005      	beq.n	8003a00 <cbvprintf+0x544>
			OUTC(sign);
 80039f4:	4629      	mov	r1, r5
 80039f6:	4640      	mov	r0, r8
 80039f8:	47b0      	blx	r6
 80039fa:	2800      	cmp	r0, #0
 80039fc:	db41      	blt.n	8003a82 <cbvprintf+0x5c6>
 80039fe:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 8003a00:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003a04:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8003a08:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	d005      	beq.n	8003a1c <cbvprintf+0x560>
				OUTC('0');
 8003a10:	4629      	mov	r1, r5
 8003a12:	2030      	movs	r0, #48	; 0x30
 8003a14:	47b0      	blx	r6
 8003a16:	2800      	cmp	r0, #0
 8003a18:	db33      	blt.n	8003a82 <cbvprintf+0x5c6>
 8003a1a:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 8003a1c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003a20:	f013 0f10 	tst.w	r3, #16
 8003a24:	d006      	beq.n	8003a34 <cbvprintf+0x578>
				OUTC(conv->specifier);
 8003a26:	4629      	mov	r1, r5
 8003a28:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8003a2c:	47b0      	blx	r6
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	db27      	blt.n	8003a82 <cbvprintf+0x5c6>
 8003a32:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 8003a34:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 8003a36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	dd07      	ble.n	8003a4e <cbvprintf+0x592>
				OUTC('0');
 8003a3e:	4629      	mov	r1, r5
 8003a40:	2030      	movs	r0, #48	; 0x30
 8003a42:	47b0      	blx	r6
 8003a44:	2800      	cmp	r0, #0
 8003a46:	db1c      	blt.n	8003a82 <cbvprintf+0x5c6>
 8003a48:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 8003a4a:	4643      	mov	r3, r8
 8003a4c:	e7f3      	b.n	8003a36 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 8003a4e:	4653      	mov	r3, sl
 8003a50:	464a      	mov	r2, r9
 8003a52:	4629      	mov	r1, r5
 8003a54:	4630      	mov	r0, r6
 8003a56:	f00b f95a 	bl	800ed0e <outs>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	db11      	blt.n	8003a82 <cbvprintf+0x5c6>
 8003a5e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 8003a60:	2f00      	cmp	r7, #0
 8003a62:	dd07      	ble.n	8003a74 <cbvprintf+0x5b8>
			OUTC(' ');
 8003a64:	4629      	mov	r1, r5
 8003a66:	2020      	movs	r0, #32
 8003a68:	47b0      	blx	r6
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	db09      	blt.n	8003a82 <cbvprintf+0x5c6>
 8003a6e:	3401      	adds	r4, #1
			--width;
 8003a70:	3f01      	subs	r7, #1
 8003a72:	e7f5      	b.n	8003a60 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 8003a74:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003a78:	e528      	b.n	80034cc <cbvprintf+0x10>
 8003a7a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003a7e:	e525      	b.n	80034cc <cbvprintf+0x10>
		}
	}

	return count;
 8003a80:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 8003a82:	b011      	add	sp, #68	; 0x44
 8003a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a88:	08012551 	.word	0x08012551

08003a8c <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8003a8c:	f04f 0210 	mov.w	r2, #16
 8003a90:	f3ef 8311 	mrs	r3, BASEPRI
 8003a94:	f382 8812 	msr	BASEPRI_MAX, r2
 8003a98:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8003aa4:	4b02      	ldr	r3, [pc, #8]	; (8003ab0 <stm32l4_init+0x24>)
 8003aa6:	4a03      	ldr	r2, [pc, #12]	; (8003ab4 <stm32l4_init+0x28>)
 8003aa8:	601a      	str	r2, [r3, #0]

	return 0;
}
 8003aaa:	2000      	movs	r0, #0
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	200003c0 	.word	0x200003c0
 8003ab4:	003d0900 	.word	0x003d0900

08003ab8 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
 8003ab8:	b508      	push	{r3, lr}
	proc_tid = process_tid;
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <thread_set+0x1c>)
 8003abc:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8003abe:	b118      	cbz	r0, 8003ac8 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <thread_set+0x20>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
 8003ac4:	2b09      	cmp	r3, #9
 8003ac6:	dc00      	bgt.n	8003aca <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
 8003ac8:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8003aca:	4804      	ldr	r0, [pc, #16]	; (8003adc <thread_set+0x24>)
 8003acc:	f008 f836 	bl	800bb3c <z_impl_k_sem_give>
}
 8003ad0:	e7fa      	b.n	8003ac8 <thread_set+0x10>
 8003ad2:	bf00      	nop
 8003ad4:	20000ebc 	.word	0x20000ebc
 8003ad8:	20000e70 	.word	0x20000e70
 8003adc:	20000684 	.word	0x20000684

08003ae0 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
 8003ae0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 8003ae2:	4802      	ldr	r0, [pc, #8]	; (8003aec <log_process_thread_timer_expiry_fn+0xc>)
 8003ae4:	f008 f82a 	bl	800bb3c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
 8003ae8:	bd08      	pop	{r3, pc}
 8003aea:	bf00      	nop
 8003aec:	20000684 	.word	0x20000684

08003af0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8003af0:	b530      	push	{r4, r5, lr}
 8003af2:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8003af4:	2200      	movs	r2, #0
 8003af6:	490f      	ldr	r1, [pc, #60]	; (8003b34 <enable_logger+0x44>)
 8003af8:	480f      	ldr	r0, [pc, #60]	; (8003b38 <enable_logger+0x48>)
 8003afa:	f00d fb25 	bl	8011148 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8003afe:	4d0f      	ldr	r5, [pc, #60]	; (8003b3c <enable_logger+0x4c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	2300      	movs	r3, #0
 8003b04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b08:	2400      	movs	r4, #0
 8003b0a:	9404      	str	r4, [sp, #16]
 8003b0c:	230e      	movs	r3, #14
 8003b0e:	9303      	str	r3, [sp, #12]
 8003b10:	9402      	str	r4, [sp, #8]
 8003b12:	9401      	str	r4, [sp, #4]
 8003b14:	9400      	str	r4, [sp, #0]
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <enable_logger+0x50>)
 8003b18:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003b1c:	4909      	ldr	r1, [pc, #36]	; (8003b44 <enable_logger+0x54>)
 8003b1e:	4628      	mov	r0, r5
 8003b20:	f00c ffd3 	bl	8010aca <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8003b24:	4908      	ldr	r1, [pc, #32]	; (8003b48 <enable_logger+0x58>)
 8003b26:	4628      	mov	r0, r5
 8003b28:	f00c ffbb 	bl	8010aa2 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	b009      	add	sp, #36	; 0x24
 8003b30:	bd30      	pop	{r4, r5, pc}
 8003b32:	bf00      	nop
 8003b34:	08003ae1 	.word	0x08003ae1
 8003b38:	20000b20 	.word	0x20000b20
 8003b3c:	20000b58 	.word	0x20000b58
 8003b40:	08003ee5 	.word	0x08003ee5
 8003b44:	200018c0 	.word	0x200018c0
 8003b48:	08012558 	.word	0x08012558

08003b4c <log_init>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8003b4c:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <log_init+0x64>)
 8003b4e:	f3bf 8f5b 	dmb	ish
 8003b52:	e853 2f00 	ldrex	r2, [r3]
 8003b56:	1c51      	adds	r1, r2, #1
 8003b58:	e843 1000 	strex	r0, r1, [r3]
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d1f8      	bne.n	8003b52 <log_init+0x6>
 8003b60:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8003b64:	bb1a      	cbnz	r2, 8003bae <log_init+0x62>
{
 8003b66:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
 8003b68:	2400      	movs	r4, #0
 8003b6a:	e009      	b.n	8003b80 <log_init+0x34>
					   backend->cb->ctx,
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <log_init+0x68>)
 8003b6e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8003b72:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
 8003b74:	2204      	movs	r2, #4
 8003b76:	6819      	ldr	r1, [r3, #0]
 8003b78:	4628      	mov	r0, r5
 8003b7a:	f000 f9d9 	bl	8003f30 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8003b7e:	3401      	adds	r4, #1
 8003b80:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <log_init+0x6c>)
 8003b82:	4a0c      	ldr	r2, [pc, #48]	; (8003bb4 <log_init+0x68>)
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8003b8a:	da0f      	bge.n	8003bac <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
 8003b8c:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 8003b8e:	4d09      	ldr	r5, [pc, #36]	; (8003bb4 <log_init+0x68>)
 8003b90:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 8003b94:	7b2b      	ldrb	r3, [r5, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f1      	beq.n	8003b7e <log_init+0x32>
			if (backend->api->init != NULL) {
 8003b9a:	0123      	lsls	r3, r4, #4
 8003b9c:	4a05      	ldr	r2, [pc, #20]	; (8003bb4 <log_init+0x68>)
 8003b9e:	58d3      	ldr	r3, [r2, r3]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0e2      	beq.n	8003b6c <log_init+0x20>
				backend->api->init(backend);
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	4798      	blx	r3
 8003baa:	e7df      	b.n	8003b6c <log_init+0x20>
}
 8003bac:	bd70      	pop	{r4, r5, r6, pc}
 8003bae:	4770      	bx	lr
 8003bb0:	20000e78 	.word	0x20000e78
 8003bb4:	08012054 	.word	0x08012054
 8003bb8:	08012064 	.word	0x08012064

08003bbc <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
 8003bbc:	b138      	cbz	r0, 8003bce <log_set_timestamp_func+0x12>
{
 8003bbe:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
 8003bc0:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <log_set_timestamp_func+0x18>)
 8003bc2:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	f000 fba3 	bl	8004310 <log_output_timestamp_freq_set>
	return 0;
 8003bca:	2000      	movs	r0, #0
}
 8003bcc:	bd08      	pop	{r3, pc}
		return -EINVAL;
 8003bce:	f06f 0015 	mvn.w	r0, #21
}
 8003bd2:	4770      	bx	lr
 8003bd4:	200002b4 	.word	0x200002b4

08003bd8 <z_log_notify_backend_enabled>:
{
 8003bd8:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <z_log_notify_backend_enabled+0x18>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	b11b      	cbz	r3, 8003be8 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <z_log_notify_backend_enabled+0x18>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	701a      	strb	r2, [r3, #0]
}
 8003be6:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8003be8:	4802      	ldr	r0, [pc, #8]	; (8003bf4 <z_log_notify_backend_enabled+0x1c>)
 8003bea:	f007 ffa7 	bl	800bb3c <z_impl_k_sem_give>
}
 8003bee:	e7f7      	b.n	8003be0 <z_log_notify_backend_enabled+0x8>
 8003bf0:	2000148c 	.word	0x2000148c
 8003bf4:	20000684 	.word	0x20000684

08003bf8 <z_log_dropped>:
 8003bf8:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <z_log_dropped+0x38>)
 8003bfa:	f3bf 8f5b 	dmb	ish
 8003bfe:	e853 2f00 	ldrex	r2, [r3]
 8003c02:	3201      	adds	r2, #1
 8003c04:	e843 2100 	strex	r1, r2, [r3]
 8003c08:	2900      	cmp	r1, #0
 8003c0a:	d1f8      	bne.n	8003bfe <z_log_dropped+0x6>
 8003c0c:	f3bf 8f5b 	dmb	ish
	if (buffered) {
 8003c10:	b900      	cbnz	r0, 8003c14 <z_log_dropped+0x1c>
}
 8003c12:	4770      	bx	lr
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003c14:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <z_log_dropped+0x3c>)
 8003c16:	f3bf 8f5b 	dmb	ish
 8003c1a:	e853 2f00 	ldrex	r2, [r3]
 8003c1e:	3a01      	subs	r2, #1
 8003c20:	e843 2100 	strex	r1, r2, [r3]
 8003c24:	2900      	cmp	r1, #0
 8003c26:	d1f8      	bne.n	8003c1a <z_log_dropped+0x22>
 8003c28:	f3bf 8f5b 	dmb	ish
 8003c2c:	e7f1      	b.n	8003c12 <z_log_dropped+0x1a>
 8003c2e:	bf00      	nop
 8003c30:	20000e74 	.word	0x20000e74
 8003c34:	20000e70 	.word	0x20000e70

08003c38 <z_log_dropped_read_and_clear>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <z_log_dropped_read_and_clear+0x1c>)
}
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	f3bf 8f5b 	dmb	ish
 8003c42:	e853 0f00 	ldrex	r0, [r3]
 8003c46:	e843 2100 	strex	r1, r2, [r3]
 8003c4a:	2900      	cmp	r1, #0
 8003c4c:	d1f9      	bne.n	8003c42 <z_log_dropped_read_and_clear+0xa>
 8003c4e:	f3bf 8f5b 	dmb	ish
 8003c52:	4770      	bx	lr
 8003c54:	20000e74 	.word	0x20000e74

08003c58 <dropped_notify>:
{
 8003c58:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 8003c5a:	f7ff ffed 	bl	8003c38 <z_log_dropped_read_and_clear>
 8003c5e:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003c60:	2400      	movs	r4, #0
 8003c62:	e000      	b.n	8003c66 <dropped_notify+0xe>
 8003c64:	3401      	adds	r4, #1
 8003c66:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <dropped_notify+0x3c>)
 8003c68:	4a0b      	ldr	r2, [pc, #44]	; (8003c98 <dropped_notify+0x40>)
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8003c70:	da0f      	bge.n	8003c92 <dropped_notify+0x3a>
 8003c72:	4809      	ldr	r0, [pc, #36]	; (8003c98 <dropped_notify+0x40>)
 8003c74:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8003c78:	6843      	ldr	r3, [r0, #4]
 8003c7a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f1      	beq.n	8003c64 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
 8003c80:	0123      	lsls	r3, r4, #4
 8003c82:	4a05      	ldr	r2, [pc, #20]	; (8003c98 <dropped_notify+0x40>)
 8003c84:	58d3      	ldr	r3, [r2, r3]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0eb      	beq.n	8003c64 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	4798      	blx	r3
 8003c90:	e7e8      	b.n	8003c64 <dropped_notify+0xc>
}
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
 8003c94:	08012064 	.word	0x08012064
 8003c98:	08012054 	.word	0x08012054

08003c9c <z_log_dropped_pending>:
	return dropped_cnt > 0;
 8003c9c:	4b03      	ldr	r3, [pc, #12]	; (8003cac <z_log_dropped_pending+0x10>)
 8003c9e:	6818      	ldr	r0, [r3, #0]
}
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	bfd4      	ite	le
 8003ca4:	2000      	movle	r0, #0
 8003ca6:	2001      	movgt	r0, #1
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000e74 	.word	0x20000e74

08003cb0 <z_log_msg2_init>:
{
 8003cb0:	b508      	push	{r3, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 8003cb2:	4902      	ldr	r1, [pc, #8]	; (8003cbc <z_log_msg2_init+0xc>)
 8003cb4:	4802      	ldr	r0, [pc, #8]	; (8003cc0 <z_log_msg2_init+0x10>)
 8003cb6:	f00b f8f6 	bl	800eea6 <mpsc_pbuf_init>
}
 8003cba:	bd08      	pop	{r3, pc}
 8003cbc:	08012564 	.word	0x08012564
 8003cc0:	20000e7c 	.word	0x20000e7c

08003cc4 <log_core_init>:
{
 8003cc4:	b508      	push	{r3, lr}
	panic_mode = false;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	4a05      	ldr	r2, [pc, #20]	; (8003ce0 <log_core_init+0x1c>)
 8003cca:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 8003ccc:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <log_core_init+0x20>)
 8003cce:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
 8003cd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cd4:	4804      	ldr	r0, [pc, #16]	; (8003ce8 <log_core_init+0x24>)
 8003cd6:	f7ff ff71 	bl	8003bbc <log_set_timestamp_func>
		z_log_msg2_init();
 8003cda:	f7ff ffe9 	bl	8003cb0 <z_log_msg2_init>
}
 8003cde:	bd08      	pop	{r3, pc}
 8003ce0:	2000148d 	.word	0x2000148d
 8003ce4:	20000e74 	.word	0x20000e74
 8003ce8:	0800f20f 	.word	0x0800f20f

08003cec <z_log_msg2_alloc>:
{
 8003cec:	b508      	push	{r3, lr}
 8003cee:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	4801      	ldr	r0, [pc, #4]	; (8003cfc <z_log_msg2_alloc+0x10>)
 8003cf6:	f00b f8fb 	bl	800eef0 <mpsc_pbuf_alloc>
}
 8003cfa:	bd08      	pop	{r3, pc}
 8003cfc:	20000e7c 	.word	0x20000e7c

08003d00 <z_log_msg2_claim>:
{
 8003d00:	b508      	push	{r3, lr}
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
 8003d02:	4802      	ldr	r0, [pc, #8]	; (8003d0c <z_log_msg2_claim+0xc>)
 8003d04:	f00b f9b1 	bl	800f06a <mpsc_pbuf_claim>
}
 8003d08:	bd08      	pop	{r3, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000e7c 	.word	0x20000e7c

08003d10 <z_log_msg2_free>:
{
 8003d10:	b508      	push	{r3, lr}
 8003d12:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8003d14:	4801      	ldr	r0, [pc, #4]	; (8003d1c <z_log_msg2_free+0xc>)
 8003d16:	f00b fa19 	bl	800f14c <mpsc_pbuf_free>
}
 8003d1a:	bd08      	pop	{r3, pc}
 8003d1c:	20000e7c 	.word	0x20000e7c

08003d20 <msg_process>:
{
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	4606      	mov	r6, r0
	if (!bypass) {
 8003d24:	b9e9      	cbnz	r1, 8003d62 <msg_process+0x42>
		for (int i = 0; i < log_backend_count_get(); i++) {
 8003d26:	2400      	movs	r4, #0
 8003d28:	e000      	b.n	8003d2c <msg_process+0xc>
 8003d2a:	3401      	adds	r4, #1
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <msg_process+0x4c>)
 8003d2e:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <msg_process+0x50>)
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8003d36:	da14      	bge.n	8003d62 <msg_process+0x42>
	return &__log_backends_start[idx];
 8003d38:	4d0d      	ldr	r5, [pc, #52]	; (8003d70 <msg_process+0x50>)
 8003d3a:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
 8003d3e:	686b      	ldr	r3, [r5, #4]
 8003d40:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f1      	beq.n	8003d2a <msg_process+0xa>
			    msg_filter_check(backend, msg)) {
 8003d46:	4631      	mov	r1, r6
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f00b fa5e 	bl	800f20a <msg_filter_check>
			if (log_backend_is_active(backend) &&
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d0eb      	beq.n	8003d2a <msg_process+0xa>
	backend->api->process(backend, msg);
 8003d52:	0127      	lsls	r7, r4, #4
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <msg_process+0x50>)
 8003d56:	59db      	ldr	r3, [r3, r7]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4631      	mov	r1, r6
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	4798      	blx	r3
}
 8003d60:	e7e3      	b.n	8003d2a <msg_process+0xa>
		z_log_msg2_free(msg.msg2);
 8003d62:	4630      	mov	r0, r6
 8003d64:	f7ff ffd4 	bl	8003d10 <z_log_msg2_free>
}
 8003d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	08012064 	.word	0x08012064
 8003d70:	08012054 	.word	0x08012054

08003d74 <z_log_msg2_pending>:
{
 8003d74:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(&log_buffer);
 8003d76:	4802      	ldr	r0, [pc, #8]	; (8003d80 <z_log_msg2_pending+0xc>)
 8003d78:	f00b fa25 	bl	800f1c6 <mpsc_pbuf_is_pending>
}
 8003d7c:	bd08      	pop	{r3, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000e7c 	.word	0x20000e7c

08003d84 <z_impl_log_process>:
{
 8003d84:	b510      	push	{r4, lr}
 8003d86:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <z_impl_log_process+0x4c>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b903      	cbnz	r3, 8003d90 <z_impl_log_process+0xc>
 8003d8e:	b1d0      	cbz	r0, 8003dc6 <z_impl_log_process+0x42>
	msg = get_msg();
 8003d90:	f00b fa4a 	bl	800f228 <get_msg>
	if (msg.msg) {
 8003d94:	4603      	mov	r3, r0
 8003d96:	b180      	cbz	r0, 8003dba <z_impl_log_process+0x36>
		if (!bypass) {
 8003d98:	b95c      	cbnz	r4, 8003db2 <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003d9a:	4a0e      	ldr	r2, [pc, #56]	; (8003dd4 <z_impl_log_process+0x50>)
 8003d9c:	f3bf 8f5b 	dmb	ish
 8003da0:	e852 1f00 	ldrex	r1, [r2]
 8003da4:	3901      	subs	r1, #1
 8003da6:	e842 1000 	strex	r0, r1, [r2]
 8003daa:	2800      	cmp	r0, #0
 8003dac:	d1f8      	bne.n	8003da0 <z_impl_log_process+0x1c>
 8003dae:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
 8003db2:	4621      	mov	r1, r4
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ffb3 	bl	8003d20 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
 8003dba:	b914      	cbnz	r4, 8003dc2 <z_impl_log_process+0x3e>
 8003dbc:	f7ff ff6e 	bl	8003c9c <z_log_dropped_pending>
 8003dc0:	b910      	cbnz	r0, 8003dc8 <z_impl_log_process+0x44>
	return next_pending();
 8003dc2:	f00b fa35 	bl	800f230 <next_pending>
}
 8003dc6:	bd10      	pop	{r4, pc}
		dropped_notify();
 8003dc8:	f7ff ff46 	bl	8003c58 <dropped_notify>
 8003dcc:	e7f9      	b.n	8003dc2 <z_impl_log_process+0x3e>
 8003dce:	bf00      	nop
 8003dd0:	2000148c 	.word	0x2000148c
 8003dd4:	20000e70 	.word	0x20000e70

08003dd8 <z_log_msg_post_finalize>:
{
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <z_log_msg_post_finalize+0x7c>)
 8003dde:	f3bf 8f5b 	dmb	ish
 8003de2:	e853 2f00 	ldrex	r2, [r3]
 8003de6:	1c51      	adds	r1, r2, #1
 8003de8:	e843 1000 	strex	r0, r1, [r3]
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d1f8      	bne.n	8003de2 <z_log_msg_post_finalize+0xa>
 8003df0:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8003df4:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <z_log_msg_post_finalize+0x80>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b93b      	cbnz	r3, 8003e0a <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
 8003dfa:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <z_log_msg_post_finalize+0x84>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	b103      	cbz	r3, 8003e02 <z_log_msg_post_finalize+0x2a>
 8003e00:	b19a      	cbz	r2, 8003e2a <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8003e02:	2a0a      	cmp	r2, #10
 8003e04:	d01c      	beq.n	8003e40 <z_log_msg_post_finalize+0x68>
}
 8003e06:	b002      	add	sp, #8
 8003e08:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 8003e0a:	f04f 0310 	mov.w	r3, #16
 8003e0e:	f3ef 8411 	mrs	r4, BASEPRI
 8003e12:	f383 8812 	msr	BASEPRI_MAX, r3
 8003e16:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f7ff ffb2 	bl	8003d84 <z_impl_log_process>
	__asm__ volatile(
 8003e20:	f384 8811 	msr	BASEPRI, r4
 8003e24:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8003e28:	e7ed      	b.n	8003e06 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e9cd 2300 	strd	r2, r3, [sp]
 8003e32:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e36:	2300      	movs	r3, #0
 8003e38:	4809      	ldr	r0, [pc, #36]	; (8003e60 <z_log_msg_post_finalize+0x88>)
 8003e3a:	f008 fe1f 	bl	800ca7c <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
 8003e3e:	e7e2      	b.n	8003e06 <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0e0      	beq.n	8003e06 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
 8003e44:	4806      	ldr	r0, [pc, #24]	; (8003e60 <z_log_msg_post_finalize+0x88>)
 8003e46:	f00d f98b 	bl	8011160 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8003e4a:	4806      	ldr	r0, [pc, #24]	; (8003e64 <z_log_msg_post_finalize+0x8c>)
 8003e4c:	f007 fe76 	bl	800bb3c <z_impl_k_sem_give>
}
 8003e50:	e7d9      	b.n	8003e06 <z_log_msg_post_finalize+0x2e>
 8003e52:	bf00      	nop
 8003e54:	20000e70 	.word	0x20000e70
 8003e58:	2000148d 	.word	0x2000148d
 8003e5c:	20000ebc 	.word	0x20000ebc
 8003e60:	20000b20 	.word	0x20000b20
 8003e64:	20000684 	.word	0x20000684

08003e68 <z_log_msg2_commit>:
{
 8003e68:	b510      	push	{r4, lr}
 8003e6a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <z_log_msg2_commit+0x1c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4798      	blx	r3
 8003e72:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8003e74:	4621      	mov	r1, r4
 8003e76:	4804      	ldr	r0, [pc, #16]	; (8003e88 <z_log_msg2_commit+0x20>)
 8003e78:	f00b f8d1 	bl	800f01e <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
 8003e7c:	f7ff ffac 	bl	8003dd8 <z_log_msg_post_finalize>
}
 8003e80:	bd10      	pop	{r4, pc}
 8003e82:	bf00      	nop
 8003e84:	200002b4 	.word	0x200002b4
 8003e88:	20000e7c 	.word	0x20000e7c

08003e8c <z_impl_log_panic>:
	if (panic_mode) {
 8003e8c:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <z_impl_log_panic+0x4c>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	b103      	cbz	r3, 8003e94 <z_impl_log_panic+0x8>
 8003e92:	4770      	bx	lr
{
 8003e94:	b510      	push	{r4, lr}
	log_init();
 8003e96:	f7ff fe59 	bl	8003b4c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003e9a:	2400      	movs	r4, #0
 8003e9c:	e000      	b.n	8003ea0 <z_impl_log_panic+0x14>
 8003e9e:	3401      	adds	r4, #1
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <z_impl_log_panic+0x50>)
 8003ea2:	4a0f      	ldr	r2, [pc, #60]	; (8003ee0 <z_impl_log_panic+0x54>)
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8003eaa:	da0c      	bge.n	8003ec6 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
 8003eac:	480c      	ldr	r0, [pc, #48]	; (8003ee0 <z_impl_log_panic+0x54>)
 8003eae:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 8003eb2:	6843      	ldr	r3, [r0, #4]
 8003eb4:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f1      	beq.n	8003e9e <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 8003eba:	0123      	lsls	r3, r4, #4
 8003ebc:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <z_impl_log_panic+0x54>)
 8003ebe:	58d3      	ldr	r3, [r2, r3]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4798      	blx	r3
}
 8003ec4:	e7eb      	b.n	8003e9e <z_impl_log_panic+0x12>
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f7ff ff5c 	bl	8003d84 <z_impl_log_process>
		while (log_process(false) == true) {
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d1fa      	bne.n	8003ec6 <z_impl_log_panic+0x3a>
	panic_mode = true;
 8003ed0:	4b01      	ldr	r3, [pc, #4]	; (8003ed8 <z_impl_log_panic+0x4c>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]
}
 8003ed6:	bd10      	pop	{r4, pc}
 8003ed8:	2000148d 	.word	0x2000148d
 8003edc:	08012064 	.word	0x08012064
 8003ee0:	08012054 	.word	0x08012054

08003ee4 <log_process_thread_func>:
{
 8003ee4:	b508      	push	{r3, lr}
	log_init();
 8003ee6:	f7ff fe31 	bl	8003b4c <log_init>
	return z_impl_z_current_get();
 8003eea:	f008 fba1 	bl	800c630 <z_impl_z_current_get>
	thread_set(k_current_get());
 8003eee:	f7ff fde3 	bl	8003ab8 <thread_set>
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	f7ff ff46 	bl	8003d84 <z_impl_log_process>
		if (log_process(false) == false) {
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d1fa      	bne.n	8003ef2 <log_process_thread_func+0xe>
	return z_impl_k_sem_take(sem, timeout);
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f04:	4801      	ldr	r0, [pc, #4]	; (8003f0c <log_process_thread_func+0x28>)
 8003f06:	f007 fe41 	bl	800bb8c <z_impl_k_sem_take>
 8003f0a:	e7f2      	b.n	8003ef2 <log_process_thread_func+0xe>
 8003f0c:	20000684 	.word	0x20000684

08003f10 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <log_source_name_get+0x18>)
 8003f12:	4a06      	ldr	r2, [pc, #24]	; (8003f2c <log_source_name_get+0x1c>)
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 8003f1a:	d202      	bcs.n	8003f22 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
 8003f1c:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 8003f20:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 8003f22:	2000      	movs	r0, #0
}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	08012054 	.word	0x08012054
 8003f2c:	08011ff4 	.word	0x08011ff4

08003f30 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 8003f30:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <log_backend_enable+0x20>)
 8003f34:	1ac3      	subs	r3, r0, r3
 8003f36:	111b      	asrs	r3, r3, #4
 8003f38:	3301      	adds	r3, #1
	backend->cb->id = id;
 8003f3a:	6842      	ldr	r2, [r0, #4]
 8003f3c:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 8003f3e:	6843      	ldr	r3, [r0, #4]
 8003f40:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8003f42:	6843      	ldr	r3, [r0, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 8003f48:	f7ff fe46 	bl	8003bd8 <z_log_notify_backend_enabled>
}
 8003f4c:	bd08      	pop	{r3, pc}
 8003f4e:	bf00      	nop
 8003f50:	08012054 	.word	0x08012054

08003f54 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8003f54:	b40e      	push	{r1, r2, r3}
 8003f56:	b500      	push	{lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	4601      	mov	r1, r0
 8003f5c:	ab03      	add	r3, sp, #12
 8003f5e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 8003f62:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8003f64:	4803      	ldr	r0, [pc, #12]	; (8003f74 <print_formatted+0x20>)
 8003f66:	f7ff faa9 	bl	80034bc <cbvprintf>
	va_end(args);

	return length;
}
 8003f6a:	b002      	add	sp, #8
 8003f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f70:	b003      	add	sp, #12
 8003f72:	4770      	bx	lr
 8003f74:	0800f2d7 	.word	0x0800f2d7

08003f78 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
 8003f78:	b530      	push	{r4, r5, lr}
 8003f7a:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 8003f7c:	f011 0f44 	tst.w	r1, #68	; 0x44
 8003f80:	d005      	beq.n	8003f8e <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 8003f82:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <timestamp_print+0x74>)
 8003f84:	681c      	ldr	r4, [r3, #0]
 8003f86:	b934      	cbnz	r4, 8003f96 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 8003f88:	2000      	movs	r0, #0
	}

	return length;
}
 8003f8a:	b005      	add	sp, #20
 8003f8c:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
 8003f8e:	4918      	ldr	r1, [pc, #96]	; (8003ff0 <timestamp_print+0x78>)
 8003f90:	f7ff ffe0 	bl	8003f54 <print_formatted>
 8003f94:	e7f9      	b.n	8003f8a <timestamp_print+0x12>
		timestamp /= timestamp_div;
 8003f96:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <timestamp_print+0x7c>)
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 8003f9e:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
 8003fa2:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <timestamp_print+0x80>)
 8003fa4:	fba2 320c 	umull	r3, r2, r2, ip
 8003fa8:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 8003faa:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 8003fae:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <timestamp_print+0x84>)
 8003fb4:	fba3 530e 	umull	r5, r3, r3, lr
 8003fb8:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 8003fba:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
 8003fbe:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8003fc2:	fb0c f101 	mul.w	r1, ip, r1
 8003fc6:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8003fca:	fb05 1114 	mls	r1, r5, r4, r1
 8003fce:	fb0c f101 	mul.w	r1, ip, r1
 8003fd2:	fbb1 f1f4 	udiv	r1, r1, r4
			length = print_formatted(output,
 8003fd6:	9102      	str	r1, [sp, #8]
 8003fd8:	9501      	str	r5, [sp, #4]
 8003fda:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 8003fde:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
 8003fe2:	9100      	str	r1, [sp, #0]
 8003fe4:	4906      	ldr	r1, [pc, #24]	; (8004000 <timestamp_print+0x88>)
 8003fe6:	f7ff ffb5 	bl	8003f54 <print_formatted>
 8003fea:	e7ce      	b.n	8003f8a <timestamp_print+0x12>
 8003fec:	20000ec0 	.word	0x20000ec0
 8003ff0:	08012578 	.word	0x08012578
 8003ff4:	20000ec4 	.word	0x20000ec4
 8003ff8:	91a2b3c5 	.word	0x91a2b3c5
 8003ffc:	88888889 	.word	0x88888889
 8004000:	08012584 	.word	0x08012584

08004004 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 8004004:	b161      	cbz	r1, 8004020 <color_print+0x1c>
{
 8004006:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8004008:	b12a      	cbz	r2, 8004016 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 800400a:	4a06      	ldr	r2, [pc, #24]	; (8004024 <color_print+0x20>)
 800400c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004010:	b912      	cbnz	r2, 8004018 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8004012:	4a05      	ldr	r2, [pc, #20]	; (8004028 <color_print+0x24>)
 8004014:	e000      	b.n	8004018 <color_print+0x14>
 8004016:	4a04      	ldr	r2, [pc, #16]	; (8004028 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
 8004018:	4904      	ldr	r1, [pc, #16]	; (800402c <color_print+0x28>)
 800401a:	f7ff ff9b 	bl	8003f54 <print_formatted>
	}
}
 800401e:	bd08      	pop	{r3, pc}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	080125fc 	.word	0x080125fc
 8004028:	080125a0 	.word	0x080125a0
 800402c:	080125a8 	.word	0x080125a8

08004030 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8004030:	f011 0f10 	tst.w	r1, #16
 8004034:	d10b      	bne.n	800404e <newline_print+0x1e>
{
 8004036:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8004038:	f011 0f20 	tst.w	r1, #32
 800403c:	d003      	beq.n	8004046 <newline_print+0x16>
		print_formatted(ctx, "\n");
 800403e:	4904      	ldr	r1, [pc, #16]	; (8004050 <newline_print+0x20>)
 8004040:	f7ff ff88 	bl	8003f54 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 8004044:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 8004046:	4903      	ldr	r1, [pc, #12]	; (8004054 <newline_print+0x24>)
 8004048:	f7ff ff84 	bl	8003f54 <print_formatted>
 800404c:	e7fa      	b.n	8004044 <newline_print+0x14>
 800404e:	4770      	bx	lr
 8004050:	080123fc 	.word	0x080123fc
 8004054:	080125ac 	.word	0x080125ac

08004058 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 8004058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800405c:	4605      	mov	r5, r0
 800405e:	460f      	mov	r7, r1
 8004060:	4616      	mov	r6, r2
 8004062:	4698      	mov	r8, r3
	newline_print(output, flags);
 8004064:	9906      	ldr	r1, [sp, #24]
 8004066:	f7ff ffe3 	bl	8004030 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 800406a:	2400      	movs	r4, #0
 800406c:	4544      	cmp	r4, r8
 800406e:	da05      	bge.n	800407c <hexdump_line_print+0x24>
		print_formatted(output, " ");
 8004070:	4924      	ldr	r1, [pc, #144]	; (8004104 <hexdump_line_print+0xac>)
 8004072:	4628      	mov	r0, r5
 8004074:	f7ff ff6e 	bl	8003f54 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8004078:	3401      	adds	r4, #1
 800407a:	e7f7      	b.n	800406c <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800407c:	2400      	movs	r4, #0
 800407e:	e009      	b.n	8004094 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 8004080:	4920      	ldr	r1, [pc, #128]	; (8004104 <hexdump_line_print+0xac>)
 8004082:	4628      	mov	r0, r5
 8004084:	f7ff ff66 	bl	8003f54 <print_formatted>
 8004088:	e00b      	b.n	80040a2 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 800408a:	491f      	ldr	r1, [pc, #124]	; (8004108 <hexdump_line_print+0xb0>)
 800408c:	4628      	mov	r0, r5
 800408e:	f7ff ff61 	bl	8003f54 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004092:	3401      	adds	r4, #1
 8004094:	2c0f      	cmp	r4, #15
 8004096:	dc0c      	bgt.n	80040b2 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 8004098:	2c00      	cmp	r4, #0
 800409a:	dd02      	ble.n	80040a2 <hexdump_line_print+0x4a>
 800409c:	f014 0f07 	tst.w	r4, #7
 80040a0:	d0ee      	beq.n	8004080 <hexdump_line_print+0x28>
		if (i < length) {
 80040a2:	42b4      	cmp	r4, r6
 80040a4:	d2f1      	bcs.n	800408a <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
 80040a6:	5d3a      	ldrb	r2, [r7, r4]
 80040a8:	4918      	ldr	r1, [pc, #96]	; (800410c <hexdump_line_print+0xb4>)
 80040aa:	4628      	mov	r0, r5
 80040ac:	f7ff ff52 	bl	8003f54 <print_formatted>
 80040b0:	e7ef      	b.n	8004092 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
 80040b2:	4917      	ldr	r1, [pc, #92]	; (8004110 <hexdump_line_print+0xb8>)
 80040b4:	4628      	mov	r0, r5
 80040b6:	f7ff ff4d 	bl	8003f54 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80040ba:	2400      	movs	r4, #0
 80040bc:	e009      	b.n	80040d2 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 80040be:	4911      	ldr	r1, [pc, #68]	; (8004104 <hexdump_line_print+0xac>)
 80040c0:	4628      	mov	r0, r5
 80040c2:	f7ff ff47 	bl	8003f54 <print_formatted>
 80040c6:	e00b      	b.n	80040e0 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
 80040c8:	4912      	ldr	r1, [pc, #72]	; (8004114 <hexdump_line_print+0xbc>)
 80040ca:	4628      	mov	r0, r5
 80040cc:	f7ff ff42 	bl	8003f54 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80040d0:	3401      	adds	r4, #1
 80040d2:	2c0f      	cmp	r4, #15
 80040d4:	dc13      	bgt.n	80040fe <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
 80040d6:	2c00      	cmp	r4, #0
 80040d8:	dd02      	ble.n	80040e0 <hexdump_line_print+0x88>
 80040da:	f014 0f07 	tst.w	r4, #7
 80040de:	d0ee      	beq.n	80040be <hexdump_line_print+0x66>
		if (i < length) {
 80040e0:	42b4      	cmp	r4, r6
 80040e2:	d207      	bcs.n	80040f4 <hexdump_line_print+0x9c>
			char c = (char)data[i];
 80040e4:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
 80040e6:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <hexdump_line_print+0xc0>)
 80040e8:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
 80040ea:	f013 0f97 	tst.w	r3, #151	; 0x97
 80040ee:	d1eb      	bne.n	80040c8 <hexdump_line_print+0x70>
 80040f0:	222e      	movs	r2, #46	; 0x2e
 80040f2:	e7e9      	b.n	80040c8 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
 80040f4:	4903      	ldr	r1, [pc, #12]	; (8004104 <hexdump_line_print+0xac>)
 80040f6:	4628      	mov	r0, r5
 80040f8:	f7ff ff2c 	bl	8003f54 <print_formatted>
 80040fc:	e7e8      	b.n	80040d0 <hexdump_line_print+0x78>
		}
	}
}
 80040fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004102:	bf00      	nop
 8004104:	080125d4 	.word	0x080125d4
 8004108:	080125b8 	.word	0x080125b8
 800410c:	080125b0 	.word	0x080125b0
 8004110:	080125bc 	.word	0x080125bc
 8004114:	080125c0 	.word	0x080125c0
 8004118:	08013b45 	.word	0x08013b45

0800411c <ids_print>:
{
 800411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004120:	4680      	mov	r8, r0
 8004122:	4616      	mov	r6, r2
 8004124:	461d      	mov	r5, r3
 8004126:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
 800412a:	b959      	cbnz	r1, 8004144 <ids_print+0x28>
	int total = 0;
 800412c:	2400      	movs	r4, #0
	if (source_id >= 0) {
 800412e:	2f00      	cmp	r7, #0
 8004130:	db1c      	blt.n	800416c <ids_print+0x50>
		total += print_formatted(output,
 8004132:	b186      	cbz	r6, 8004156 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8004134:	2301      	movs	r3, #1
 8004136:	9a07      	ldr	r2, [sp, #28]
 8004138:	4093      	lsls	r3, r2
				(func_on &&
 800413a:	f013 0f10 	tst.w	r3, #16
 800413e:	d118      	bne.n	8004172 <ids_print+0x56>
		total += print_formatted(output,
 8004140:	4e0d      	ldr	r6, [pc, #52]	; (8004178 <ids_print+0x5c>)
 8004142:	e009      	b.n	8004158 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
 8004144:	4b0d      	ldr	r3, [pc, #52]	; (800417c <ids_print+0x60>)
 8004146:	9a07      	ldr	r2, [sp, #28]
 8004148:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800414c:	490c      	ldr	r1, [pc, #48]	; (8004180 <ids_print+0x64>)
 800414e:	f7ff ff01 	bl	8003f54 <print_formatted>
 8004152:	4604      	mov	r4, r0
 8004154:	e7eb      	b.n	800412e <ids_print+0x12>
		total += print_formatted(output,
 8004156:	4e08      	ldr	r6, [pc, #32]	; (8004178 <ids_print+0x5c>)
 8004158:	4639      	mov	r1, r7
 800415a:	4628      	mov	r0, r5
 800415c:	f7ff fed8 	bl	8003f10 <log_source_name_get>
 8004160:	4602      	mov	r2, r0
 8004162:	4631      	mov	r1, r6
 8004164:	4640      	mov	r0, r8
 8004166:	f7ff fef5 	bl	8003f54 <print_formatted>
 800416a:	4404      	add	r4, r0
}
 800416c:	4620      	mov	r0, r4
 800416e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
 8004172:	4e04      	ldr	r6, [pc, #16]	; (8004184 <ids_print+0x68>)
 8004174:	e7f0      	b.n	8004158 <ids_print+0x3c>
 8004176:	bf00      	nop
 8004178:	080125c4 	.word	0x080125c4
 800417c:	08012638 	.word	0x08012638
 8004180:	080125d0 	.word	0x080125d0
 8004184:	080125cc 	.word	0x080125cc

08004188 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 8004188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418c:	b085      	sub	sp, #20
 800418e:	4605      	mov	r5, r0
 8004190:	460c      	mov	r4, r1
 8004192:	4616      	mov	r6, r2
 8004194:	9303      	str	r3, [sp, #12]
 8004196:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 800419a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 800419e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 80041a2:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
 80041a6:	f00b f847 	bl	800f238 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
 80041aa:	b1e8      	cbz	r0, 80041e8 <prefix_print+0x60>
 80041ac:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
 80041ae:	4913      	ldr	r1, [pc, #76]	; (80041fc <prefix_print+0x74>)
 80041b0:	4628      	mov	r0, r5
 80041b2:	f7ff fecf 	bl	8003f54 <print_formatted>
 80041b6:	4607      	mov	r7, r0
	}

	if (stamp) {
 80041b8:	f1bb 0f00 	cmp.w	fp, #0
 80041bc:	d116      	bne.n	80041ec <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
 80041be:	4642      	mov	r2, r8
 80041c0:	4651      	mov	r1, sl
 80041c2:	4628      	mov	r0, r5
 80041c4:	f00b f847 	bl	800f256 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
 80041c8:	f8cd 8004 	str.w	r8, [sp, #4]
 80041cc:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80041d6:	4632      	mov	r2, r6
 80041d8:	4649      	mov	r1, r9
 80041da:	4628      	mov	r0, r5
 80041dc:	f7ff ff9e 	bl	800411c <ids_print>
			domain_id, source_id, level);


	return length;
}
 80041e0:	4438      	add	r0, r7
 80041e2:	b005      	add	sp, #20
 80041e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
 80041e8:	2700      	movs	r7, #0
 80041ea:	e7e5      	b.n	80041b8 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
 80041ec:	9a03      	ldr	r2, [sp, #12]
 80041ee:	4621      	mov	r1, r4
 80041f0:	4628      	mov	r0, r5
 80041f2:	f7ff fec1 	bl	8003f78 <timestamp_print>
 80041f6:	4407      	add	r7, r0
 80041f8:	e7e1      	b.n	80041be <prefix_print+0x36>
 80041fa:	bf00      	nop
 80041fc:	080125d8 	.word	0x080125d8

08004200 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
 8004200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004204:	b085      	sub	sp, #20
 8004206:	4606      	mov	r6, r0
 8004208:	460c      	mov	r4, r1
 800420a:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
 800420c:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
 800420e:	880a      	ldrh	r2, [r1, #0]
 8004210:	f3c2 1882 	ubfx	r8, r2, #6, #3
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
 8004214:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
 8004218:	d035      	beq.n	8004286 <log_output_msg2_process+0x86>
	return msg->hdr.source;
 800421a:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
 800421c:	7809      	ldrb	r1, [r1, #0]
 800421e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
 8004222:	b36a      	cbz	r2, 8004280 <log_output_msg2_process+0x80>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 8004224:	4820      	ldr	r0, [pc, #128]	; (80042a8 <log_output_msg2_process+0xa8>)
 8004226:	1a12      	subs	r2, r2, r0
 8004228:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
 800422c:	9202      	str	r2, [sp, #8]
 800422e:	9101      	str	r1, [sp, #4]
 8004230:	f8cd 8000 	str.w	r8, [sp]
 8004234:	2200      	movs	r2, #0
 8004236:	4639      	mov	r1, r7
 8004238:	4630      	mov	r0, r6
 800423a:	f7ff ffa5 	bl	8004188 <prefix_print>
 800423e:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 8004240:	4625      	mov	r5, r4
 8004242:	f855 3b0c 	ldr.w	r3, [r5], #12
 8004246:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
 800424a:	b143      	cbz	r3, 800425e <log_output_msg2_process+0x5e>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 800424c:	f1b8 0f00 	cmp.w	r8, #0
 8004250:	d11c      	bne.n	800428c <log_output_msg2_process+0x8c>
 8004252:	4816      	ldr	r0, [pc, #88]	; (80042ac <log_output_msg2_process+0xac>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 8004254:	462b      	mov	r3, r5
 8004256:	4632      	mov	r2, r6
 8004258:	4915      	ldr	r1, [pc, #84]	; (80042b0 <log_output_msg2_process+0xb0>)
 800425a:	f00a fceb 	bl	800ec34 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
 800425e:	8862      	ldrh	r2, [r4, #2]
 8004260:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
 8004264:	6821      	ldr	r1, [r4, #0]
 8004266:	f3c1 2149 	ubfx	r1, r1, #9, #10
 800426a:	4429      	add	r1, r5
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
 800426c:	b982      	cbnz	r2, 8004290 <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
 800426e:	f1b8 0f00 	cmp.w	r8, #0
 8004272:	d113      	bne.n	800429c <log_output_msg2_process+0x9c>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 8004274:	4630      	mov	r0, r6
 8004276:	f00b f821 	bl	800f2bc <log_output_flush>
}
 800427a:	b005      	add	sp, #20
 800427c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		int16_t source_id = source ?
 8004280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004284:	e7d2      	b.n	800422c <log_output_msg2_process+0x2c>
		prefix_offset = 0;
 8004286:	f04f 0900 	mov.w	r9, #0
 800428a:	e7d9      	b.n	8004240 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 800428c:	4809      	ldr	r0, [pc, #36]	; (80042b4 <log_output_msg2_process+0xb4>)
 800428e:	e7e1      	b.n	8004254 <log_output_msg2_process+0x54>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
 8004290:	9700      	str	r7, [sp, #0]
 8004292:	464b      	mov	r3, r9
 8004294:	4630      	mov	r0, r6
 8004296:	f00a fff6 	bl	800f286 <log_msg2_hexdump>
 800429a:	e7e8      	b.n	800426e <log_output_msg2_process+0x6e>
		postfix_print(output, flags, level);
 800429c:	4642      	mov	r2, r8
 800429e:	4639      	mov	r1, r7
 80042a0:	4630      	mov	r0, r6
 80042a2:	f00a ffe4 	bl	800f26e <postfix_print>
 80042a6:	e7e5      	b.n	8004274 <log_output_msg2_process+0x74>
 80042a8:	08011ff4 	.word	0x08011ff4
 80042ac:	0800f30f 	.word	0x0800f30f
 80042b0:	080034bd 	.word	0x080034bd
 80042b4:	0800f2d7 	.word	0x0800f2d7

080042b8 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
 80042be:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80042c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80042c4:	428b      	cmp	r3, r1
 80042c6:	bf28      	it	cs
 80042c8:	460b      	movcs	r3, r1
 80042ca:	4a0e      	ldr	r2, [pc, #56]	; (8004304 <log_output_dropped_process+0x4c>)
 80042cc:	2105      	movs	r1, #5
 80042ce:	4668      	mov	r0, sp
 80042d0:	f00a fd05 	bl	800ecde <snprintk>
 80042d4:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
 80042d6:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	220b      	movs	r2, #11
 80042dc:	490a      	ldr	r1, [pc, #40]	; (8004308 <log_output_dropped_process+0x50>)
 80042de:	4628      	mov	r0, r5
 80042e0:	f00a ffac 	bl	800f23c <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
 80042e4:	6863      	ldr	r3, [r4, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4632      	mov	r2, r6
 80042ea:	4669      	mov	r1, sp
 80042ec:	4628      	mov	r0, r5
 80042ee:	f00a ffa5 	bl	800f23c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
 80042f2:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	221b      	movs	r2, #27
 80042f8:	4904      	ldr	r1, [pc, #16]	; (800430c <log_output_dropped_process+0x54>)
 80042fa:	4628      	mov	r0, r5
 80042fc:	f00a ff9e 	bl	800f23c <buffer_write>
}
 8004300:	b002      	add	sp, #8
 8004302:	bd70      	pop	{r4, r5, r6, pc}
 8004304:	08012bf8 	.word	0x08012bf8
 8004308:	0801262c 	.word	0x0801262c
 800430c:	08012610 	.word	0x08012610

08004310 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <log_output_timestamp_freq_set+0x20>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8004316:	e004      	b.n	8004322 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
 8004318:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 800431a:	4a05      	ldr	r2, [pc, #20]	; (8004330 <log_output_timestamp_freq_set+0x20>)
 800431c:	6813      	ldr	r3, [r2, #0]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8004322:	4b04      	ldr	r3, [pc, #16]	; (8004334 <log_output_timestamp_freq_set+0x24>)
 8004324:	4298      	cmp	r0, r3
 8004326:	d8f7      	bhi.n	8004318 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <log_output_timestamp_freq_set+0x28>)
 800432a:	6018      	str	r0, [r3, #0]
}
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000ec4 	.word	0x20000ec4
 8004334:	000f4240 	.word	0x000f4240
 8004338:	20000ec0 	.word	0x20000ec0

0800433c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 800433c:	b570      	push	{r4, r5, r6, lr}
 800433e:	4606      	mov	r6, r0
 8004340:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
 8004342:	2400      	movs	r4, #0
 8004344:	e006      	b.n	8004354 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <char_out+0x20>)
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
 800434c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 8004352:	3401      	adds	r4, #1
 8004354:	42ac      	cmp	r4, r5
 8004356:	d3f6      	bcc.n	8004346 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
 8004358:	4628      	mov	r0, r5
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	20000edc 	.word	0x20000edc

08004360 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8004360:	4b01      	ldr	r3, [pc, #4]	; (8004368 <log_backend_uart_init+0x8>)
 8004362:	4a02      	ldr	r2, [pc, #8]	; (800436c <log_backend_uart_init+0xc>)
 8004364:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
 8004366:	4770      	bx	lr
 8004368:	20000edc 	.word	0x20000edc
 800436c:	08011ce4 	.word	0x08011ce4

08004370 <panic>:

static void panic(struct log_backend const *const backend)
{
 8004370:	b508      	push	{r3, lr}
	in_panic = true;
 8004372:	4b03      	ldr	r3, [pc, #12]	; (8004380 <panic+0x10>)
 8004374:	2201      	movs	r2, #1
 8004376:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8004378:	4802      	ldr	r0, [pc, #8]	; (8004384 <panic+0x14>)
 800437a:	f00a ff9f 	bl	800f2bc <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 800437e:	bd08      	pop	{r3, pc}
 8004380:	2000148e 	.word	0x2000148e
 8004384:	08012688 	.word	0x08012688

08004388 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 8004388:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 800438a:	4802      	ldr	r0, [pc, #8]	; (8004394 <dropped+0xc>)
 800438c:	f7ff ff94 	bl	80042b8 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
 8004390:	bd08      	pop	{r3, pc}
 8004392:	bf00      	nop
 8004394:	08012688 	.word	0x08012688

08004398 <process>:
{
 8004398:	b508      	push	{r3, lr}
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
 800439a:	220f      	movs	r2, #15
 800439c:	4801      	ldr	r0, [pc, #4]	; (80043a4 <process+0xc>)
 800439e:	f7ff ff2f 	bl	8004200 <log_output_msg2_process>
}
 80043a2:	bd08      	pop	{r3, pc}
 80043a4:	08012688 	.word	0x08012688

080043a8 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
 80043a8:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 80043aa:	4c04      	ldr	r4, [pc, #16]	; (80043bc <__do_init_array_aux+0x14>)
 80043ac:	e002      	b.n	80043b4 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 80043ae:	f854 3b04 	ldr.w	r3, [r4], #4
 80043b2:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 80043b4:	4b02      	ldr	r3, [pc, #8]	; (80043c0 <__do_init_array_aux+0x18>)
 80043b6:	429c      	cmp	r4, r3
 80043b8:	d3f9      	bcc.n	80043ae <__do_init_array_aux+0x6>
	}
}
 80043ba:	bd10      	pop	{r4, pc}
 80043bc:	08011ff4 	.word	0x08011ff4
 80043c0:	08011ff4 	.word	0x08011ff4

080043c4 <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <__do_global_ctors_aux+0x1c>)
 80043c6:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 80043c8:	b14b      	cbz	r3, 80043de <__do_global_ctors_aux+0x1a>
{
 80043ca:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 80043cc:	1e5c      	subs	r4, r3, #1
 80043ce:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <__do_global_ctors_aux+0x1c>)
 80043d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d4:	4798      	blx	r3
 80043d6:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 80043d8:	2c00      	cmp	r4, #0
 80043da:	d1f7      	bne.n	80043cc <__do_global_ctors_aux+0x8>
	}
}
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	4770      	bx	lr
 80043e0:	08011fec 	.word	0x08011fec

080043e4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 80043e4:	4901      	ldr	r1, [pc, #4]	; (80043ec <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 80043e6:	2210      	movs	r2, #16
	str	r2, [r1]
 80043e8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 80043ea:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 80043ec:	e000ed10 	.word	0xe000ed10

080043f0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 80043f0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 80043f2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 80043f4:	f380 8811 	msr	BASEPRI, r0
	isb
 80043f8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 80043fc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8004400:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8004402:	b662      	cpsie	i
	isb
 8004404:	f3bf 8f6f 	isb	sy

	bx	lr
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop

0800440c <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
 800440c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004410:	b096      	sub	sp, #88	; 0x58
 8004412:	af00      	add	r7, sp, #0
 8004414:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8004416:	2301      	movs	r3, #1
 8004418:	813b      	strh	r3, [r7, #8]
 800441a:	466c      	mov	r4, sp
 800441c:	b088      	sub	sp, #32
 800441e:	466b      	mov	r3, sp
 8004420:	f113 020c 	adds.w	r2, r3, #12
 8004424:	f000 80ca 	beq.w	80045bc <esf_dump+0x1b0>
 8004428:	2114      	movs	r1, #20
 800442a:	2001      	movs	r0, #1
 800442c:	8138      	strh	r0, [r7, #8]
 800442e:	b11a      	cbz	r2, 8004438 <esf_dump+0x2c>
 8004430:	2904      	cmp	r1, #4
 8004432:	dd01      	ble.n	8004438 <esf_dump+0x2c>
 8004434:	4867      	ldr	r0, [pc, #412]	; (80045d4 <esf_dump+0x1c8>)
 8004436:	6118      	str	r0, [r3, #16]
 8004438:	6828      	ldr	r0, [r5, #0]
 800443a:	b112      	cbz	r2, 8004442 <esf_dump+0x36>
 800443c:	2908      	cmp	r1, #8
 800443e:	dd00      	ble.n	8004442 <esf_dump+0x36>
 8004440:	6158      	str	r0, [r3, #20]
 8004442:	6868      	ldr	r0, [r5, #4]
 8004444:	b112      	cbz	r2, 800444c <esf_dump+0x40>
 8004446:	290c      	cmp	r1, #12
 8004448:	dd00      	ble.n	800444c <esf_dump+0x40>
 800444a:	6198      	str	r0, [r3, #24]
 800444c:	68a8      	ldr	r0, [r5, #8]
 800444e:	b112      	cbz	r2, 8004456 <esf_dump+0x4a>
 8004450:	2910      	cmp	r1, #16
 8004452:	dd00      	ble.n	8004456 <esf_dump+0x4a>
 8004454:	61d8      	str	r0, [r3, #28]
 8004456:	2913      	cmp	r1, #19
 8004458:	f340 80b3 	ble.w	80045c2 <esf_dump+0x1b6>
 800445c:	2014      	movs	r0, #20
 800445e:	b12a      	cbz	r2, 800446c <esf_dump+0x60>
 8004460:	2100      	movs	r1, #0
 8004462:	6079      	str	r1, [r7, #4]
 8004464:	2105      	movs	r1, #5
 8004466:	7139      	strb	r1, [r7, #4]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	60d9      	str	r1, [r3, #12]
 800446c:	2100      	movs	r1, #0
 800446e:	f36f 0100 	bfc	r1, #0, #1
 8004472:	f36f 0141 	bfc	r1, #1, #1
 8004476:	f36f 0182 	bfc	r1, #2, #1
 800447a:	f36f 01c5 	bfc	r1, #3, #3
 800447e:	2601      	movs	r6, #1
 8004480:	f366 1188 	bfi	r1, r6, #6, #3
 8004484:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8004488:	f363 2152 	bfi	r1, r3, #9, #10
 800448c:	f36f 41de 	bfc	r1, #19, #12
 8004490:	f36f 71df 	bfc	r1, #31, #1
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8004494:	2300      	movs	r3, #0
 8004496:	4850      	ldr	r0, [pc, #320]	; (80045d8 <esf_dump+0x1cc>)
 8004498:	f00a ff60 	bl	800f35c <z_impl_z_log_msg2_static_create>
 800449c:	46a5      	mov	sp, r4
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 800449e:	813e      	strh	r6, [r7, #8]
 80044a0:	466c      	mov	r4, sp
 80044a2:	b088      	sub	sp, #32
 80044a4:	466b      	mov	r3, sp
 80044a6:	f113 020c 	adds.w	r2, r3, #12
 80044aa:	f000 808d 	beq.w	80045c8 <esf_dump+0x1bc>
 80044ae:	2114      	movs	r1, #20
 80044b0:	2001      	movs	r0, #1
 80044b2:	8138      	strh	r0, [r7, #8]
 80044b4:	b11a      	cbz	r2, 80044be <esf_dump+0xb2>
 80044b6:	2904      	cmp	r1, #4
 80044b8:	dd01      	ble.n	80044be <esf_dump+0xb2>
 80044ba:	4848      	ldr	r0, [pc, #288]	; (80045dc <esf_dump+0x1d0>)
 80044bc:	6118      	str	r0, [r3, #16]
 80044be:	68e8      	ldr	r0, [r5, #12]
 80044c0:	b112      	cbz	r2, 80044c8 <esf_dump+0xbc>
 80044c2:	2908      	cmp	r1, #8
 80044c4:	dd00      	ble.n	80044c8 <esf_dump+0xbc>
 80044c6:	6158      	str	r0, [r3, #20]
 80044c8:	6928      	ldr	r0, [r5, #16]
 80044ca:	b112      	cbz	r2, 80044d2 <esf_dump+0xc6>
 80044cc:	290c      	cmp	r1, #12
 80044ce:	dd00      	ble.n	80044d2 <esf_dump+0xc6>
 80044d0:	6198      	str	r0, [r3, #24]
 80044d2:	6968      	ldr	r0, [r5, #20]
 80044d4:	b112      	cbz	r2, 80044dc <esf_dump+0xd0>
 80044d6:	2910      	cmp	r1, #16
 80044d8:	dd00      	ble.n	80044dc <esf_dump+0xd0>
 80044da:	61d8      	str	r0, [r3, #28]
 80044dc:	2913      	cmp	r1, #19
 80044de:	dd76      	ble.n	80045ce <esf_dump+0x1c2>
 80044e0:	2014      	movs	r0, #20
 80044e2:	b12a      	cbz	r2, 80044f0 <esf_dump+0xe4>
 80044e4:	2100      	movs	r1, #0
 80044e6:	6079      	str	r1, [r7, #4]
 80044e8:	2105      	movs	r1, #5
 80044ea:	7139      	strb	r1, [r7, #4]
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	60d9      	str	r1, [r3, #12]
 80044f0:	2100      	movs	r1, #0
 80044f2:	f36f 0100 	bfc	r1, #0, #1
 80044f6:	f36f 0141 	bfc	r1, #1, #1
 80044fa:	f36f 0182 	bfc	r1, #2, #1
 80044fe:	f36f 01c5 	bfc	r1, #3, #3
 8004502:	2601      	movs	r6, #1
 8004504:	f366 1188 	bfi	r1, r6, #6, #3
 8004508:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 800450c:	f363 2152 	bfi	r1, r3, #9, #10
 8004510:	f36f 41de 	bfc	r1, #19, #12
 8004514:	f36f 71df 	bfc	r1, #31, #1
 8004518:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80045d8 <esf_dump+0x1cc>
 800451c:	2300      	movs	r3, #0
 800451e:	4640      	mov	r0, r8
 8004520:	f00a ff1c 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8004524:	46a5      	mov	sp, r4
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8004526:	813e      	strh	r6, [r7, #8]
 8004528:	69eb      	ldr	r3, [r5, #28]
 800452a:	4a2d      	ldr	r2, [pc, #180]	; (80045e0 <esf_dump+0x1d4>)
 800452c:	63ba      	str	r2, [r7, #56]	; 0x38
 800452e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004530:	2400      	movs	r4, #0
 8004532:	607c      	str	r4, [r7, #4]
 8004534:	f04f 0a03 	mov.w	sl, #3
 8004538:	f887 a004 	strb.w	sl, [r7, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
 8004540:	4621      	mov	r1, r4
 8004542:	f364 0100 	bfi	r1, r4, #0, #1
 8004546:	f364 0141 	bfi	r1, r4, #1, #1
 800454a:	f364 0182 	bfi	r1, r4, #2, #1
 800454e:	f364 01c5 	bfi	r1, r4, #3, #3
 8004552:	f366 1188 	bfi	r1, r6, #6, #3
 8004556:	f04f 090c 	mov.w	r9, #12
 800455a:	f369 2152 	bfi	r1, r9, #9, #10
 800455e:	f364 41de 	bfi	r1, r4, #19, #12
 8004562:	f364 71df 	bfi	r1, r4, #31, #1
 8004566:	4623      	mov	r3, r4
 8004568:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800456c:	4640      	mov	r0, r8
 800456e:	f00a fef5 	bl	800f35c <z_impl_z_log_msg2_static_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8004572:	813e      	strh	r6, [r7, #8]
 8004574:	69ab      	ldr	r3, [r5, #24]
 8004576:	4a1b      	ldr	r2, [pc, #108]	; (80045e4 <esf_dump+0x1d8>)
 8004578:	653a      	str	r2, [r7, #80]	; 0x50
 800457a:	657b      	str	r3, [r7, #84]	; 0x54
 800457c:	607c      	str	r4, [r7, #4]
 800457e:	f887 a004 	strb.w	sl, [r7, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004586:	4621      	mov	r1, r4
 8004588:	f364 0100 	bfi	r1, r4, #0, #1
 800458c:	f364 0141 	bfi	r1, r4, #1, #1
 8004590:	f364 0182 	bfi	r1, r4, #2, #1
 8004594:	f364 01c5 	bfi	r1, r4, #3, #3
 8004598:	f366 1188 	bfi	r1, r6, #6, #3
 800459c:	f369 2152 	bfi	r1, r9, #9, #10
 80045a0:	f364 41de 	bfi	r1, r4, #19, #12
 80045a4:	f364 71df 	bfi	r1, r4, #31, #1
 80045a8:	4623      	mov	r3, r4
 80045aa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80045ae:	4640      	mov	r0, r8
 80045b0:	f00a fed4 	bl	800f35c <z_impl_z_log_msg2_static_create>
		esf->basic.pc);
}
 80045b4:	3758      	adds	r7, #88	; 0x58
 80045b6:	46bd      	mov	sp, r7
 80045b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 80045bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045c0:	e733      	b.n	800442a <esf_dump+0x1e>
 80045c2:	f06f 001b 	mvn.w	r0, #27
 80045c6:	e74a      	b.n	800445e <esf_dump+0x52>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 80045c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045cc:	e770      	b.n	80044b0 <esf_dump+0xa4>
 80045ce:	f06f 001b 	mvn.w	r0, #27
 80045d2:	e786      	b.n	80044e2 <esf_dump+0xd6>
 80045d4:	08012698 	.word	0x08012698
 80045d8:	0801201c 	.word	0x0801201c
 80045dc:	080126c8 	.word	0x080126c8
 80045e0:	080126f8 	.word	0x080126f8
 80045e4:	08012708 	.word	0x08012708

080045e8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80045e8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80045ea:	2800      	cmp	r0, #0
 80045ec:	db07      	blt.n	80045fe <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ee:	f000 021f 	and.w	r2, r0, #31
 80045f2:	0940      	lsrs	r0, r0, #5
 80045f4:	2301      	movs	r3, #1
 80045f6:	4093      	lsls	r3, r2
 80045f8:	4a01      	ldr	r2, [pc, #4]	; (8004600 <arch_irq_enable+0x18>)
 80045fa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 80045fe:	4770      	bx	lr
 8004600:	e000e100 	.word	0xe000e100

08004604 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 8004604:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004606:	2800      	cmp	r0, #0
 8004608:	db0c      	blt.n	8004624 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800460a:	f000 021f 	and.w	r2, r0, #31
 800460e:	0940      	lsrs	r0, r0, #5
 8004610:	2301      	movs	r3, #1
 8004612:	4093      	lsls	r3, r2
 8004614:	3020      	adds	r0, #32
 8004616:	4a04      	ldr	r2, [pc, #16]	; (8004628 <arch_irq_disable+0x24>)
 8004618:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800461c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004620:	f3bf 8f6f 	isb	sy
}
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	e000e100 	.word	0xe000e100

0800462c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 800462c:	0942      	lsrs	r2, r0, #5
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <arch_irq_is_enabled+0x18>)
 8004630:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004634:	f000 001f 	and.w	r0, r0, #31
 8004638:	2301      	movs	r3, #1
 800463a:	fa03 f000 	lsl.w	r0, r3, r0
}
 800463e:	4010      	ands	r0, r2
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	e000e100 	.word	0xe000e100

08004648 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8004648:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 800464a:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800464c:	2800      	cmp	r0, #0
 800464e:	db08      	blt.n	8004662 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004650:	0109      	lsls	r1, r1, #4
 8004652:	b2c9      	uxtb	r1, r1
 8004654:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004658:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800465c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8004660:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004662:	f000 000f 	and.w	r0, r0, #15
 8004666:	0109      	lsls	r1, r1, #4
 8004668:	b2c9      	uxtb	r1, r1
 800466a:	4b01      	ldr	r3, [pc, #4]	; (8004670 <z_arm_irq_priority_set+0x28>)
 800466c:	5419      	strb	r1, [r3, r0]
}
 800466e:	4770      	bx	lr
 8004670:	e000ed14 	.word	0xe000ed14

08004674 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8004674:	bf30      	wfi
    b z_SysNmiOnReset
 8004676:	f7ff bffd 	b.w	8004674 <z_SysNmiOnReset>
 800467a:	bf00      	nop

0800467c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 800467c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <z_arm_prep_c+0x40>)
 8004680:	4a0f      	ldr	r2, [pc, #60]	; (80046c0 <z_arm_prep_c+0x44>)
 8004682:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004686:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8004688:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800468c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8004690:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004694:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800469c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 80046a0:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80046a4:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80046a8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 80046ac:	f007 f898 	bl	800b7e0 <z_bss_zero>
	z_data_copy();
 80046b0:	f008 f810 	bl	800c6d4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 80046b4:	f000 feae 	bl	8005414 <z_arm_interrupt_init>
	z_cstart();
 80046b8:	f007 f89e 	bl	800b7f8 <z_cstart>
 80046bc:	e000ed00 	.word	0xe000ed00
 80046c0:	08000000 	.word	0x08000000

080046c4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 80046c4:	4a09      	ldr	r2, [pc, #36]	; (80046ec <arch_swap+0x28>)
 80046c6:	6893      	ldr	r3, [r2, #8]
 80046c8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 80046ca:	4909      	ldr	r1, [pc, #36]	; (80046f0 <arch_swap+0x2c>)
 80046cc:	6809      	ldr	r1, [r1, #0]
 80046ce:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80046d0:	4908      	ldr	r1, [pc, #32]	; (80046f4 <arch_swap+0x30>)
 80046d2:	684b      	ldr	r3, [r1, #4]
 80046d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d8:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
 80046da:	2300      	movs	r3, #0
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 80046e4:	6893      	ldr	r3, [r2, #8]
}
 80046e6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20001430 	.word	0x20001430
 80046f0:	08013994 	.word	0x08013994
 80046f4:	e000ed00 	.word	0xe000ed00

080046f8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 80046f8:	4912      	ldr	r1, [pc, #72]	; (8004744 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 80046fa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 80046fc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8004700:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8004702:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8004706:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800470a:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 800470c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8004710:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8004714:	4f0c      	ldr	r7, [pc, #48]	; (8004748 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8004716:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 800471a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 800471c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800471e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8004720:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8004722:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8004724:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8004726:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 800472a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 800472c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 800472e:	f000 fec5 	bl	80054bc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8004732:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8004736:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 800473a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 800473e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8004742:	4770      	bx	lr
    ldr r1, =_kernel
 8004744:	20001430 	.word	0x20001430
    ldr v4, =_SCS_ICSR
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 800474c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8004750:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8004752:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8004756:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 800475a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 800475c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8004760:	2902      	cmp	r1, #2
    beq _oops
 8004762:	d0ff      	beq.n	8004764 <_oops>

08004764 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8004764:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8004766:	f00a fe72 	bl	800f44e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 800476a:	bd01      	pop	{r0, pc}

0800476c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 800476c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 800476e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 8004772:	490d      	ldr	r1, [pc, #52]	; (80047a8 <arch_new_thread+0x3c>)
 8004774:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8004778:	f021 0101 	bic.w	r1, r1, #1
 800477c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 8004780:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8004784:	9b01      	ldr	r3, [sp, #4]
 8004786:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 800478a:	9b02      	ldr	r3, [sp, #8]
 800478c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8004790:	9b03      	ldr	r3, [sp, #12]
 8004792:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8004796:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800479a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 800479e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 80047a4:	bc10      	pop	{r4}
 80047a6:	4770      	bx	lr
 80047a8:	0800ecfb 	.word	0x0800ecfb

080047ac <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 80047ac:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <z_check_thread_stack_fail+0x48>)
 80047ae:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 80047b0:	b1ea      	cbz	r2, 80047ee <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80047b2:	f110 0f16 	cmn.w	r0, #22
 80047b6:	d010      	beq.n	80047da <z_check_thread_stack_fail+0x2e>
 80047b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80047ba:	f1a3 0c20 	sub.w	ip, r3, #32
 80047be:	4584      	cmp	ip, r0
 80047c0:	d805      	bhi.n	80047ce <z_check_thread_stack_fail+0x22>
 80047c2:	4283      	cmp	r3, r0
 80047c4:	d905      	bls.n	80047d2 <z_check_thread_stack_fail+0x26>
 80047c6:	428b      	cmp	r3, r1
 80047c8:	d805      	bhi.n	80047d6 <z_check_thread_stack_fail+0x2a>
 80047ca:	2100      	movs	r1, #0
 80047cc:	e00a      	b.n	80047e4 <z_check_thread_stack_fail+0x38>
 80047ce:	2100      	movs	r1, #0
 80047d0:	e008      	b.n	80047e4 <z_check_thread_stack_fail+0x38>
 80047d2:	2100      	movs	r1, #0
 80047d4:	e006      	b.n	80047e4 <z_check_thread_stack_fail+0x38>
 80047d6:	2101      	movs	r1, #1
 80047d8:	e004      	b.n	80047e4 <z_check_thread_stack_fail+0x38>
 80047da:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80047dc:	428b      	cmp	r3, r1
 80047de:	bf94      	ite	ls
 80047e0:	2100      	movls	r1, #0
 80047e2:	2101      	movhi	r1, #1
 80047e4:	b909      	cbnz	r1, 80047ea <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 80047e6:	2000      	movs	r0, #0
}
 80047e8:	4770      	bx	lr
		return thread->stack_info.start;
 80047ea:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80047ec:	4770      	bx	lr
		return 0;
 80047ee:	2000      	movs	r0, #0
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20001430 	.word	0x20001430

080047f8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 80047f8:	b508      	push	{r3, lr}
 80047fa:	460d      	mov	r5, r1
 80047fc:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80047fe:	4b08      	ldr	r3, [pc, #32]	; (8004820 <arch_switch_to_main_thread+0x28>)
 8004800:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8004802:	f000 fe5b 	bl	80054bc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8004806:	4620      	mov	r0, r4
 8004808:	f385 8809 	msr	PSP, r5
 800480c:	2100      	movs	r1, #0
 800480e:	b663      	cpsie	if
 8004810:	f381 8811 	msr	BASEPRI, r1
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	2200      	movs	r2, #0
 800481a:	2300      	movs	r3, #0
 800481c:	f00a fa6d 	bl	800ecfa <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8004820:	20001430 	.word	0x20001430

08004824 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8004824:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8004826:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 800482a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 800482e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8004832:	4904      	ldr	r1, [pc, #16]	; (8004844 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8004834:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8004836:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8004838:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 800483a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 800483e:	4902      	ldr	r1, [pc, #8]	; (8004848 <_isr_wrapper+0x24>)
	bx r1
 8004840:	4708      	bx	r1
 8004842:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8004844:	08011d44 	.word	0x08011d44
	ldr r1, =z_arm_int_exit
 8004848:	0800484d 	.word	0x0800484d

0800484c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 800484c:	4b04      	ldr	r3, [pc, #16]	; (8004860 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800484e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8004850:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8004852:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8004854:	d003      	beq.n	800485e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8004856:	4903      	ldr	r1, [pc, #12]	; (8004864 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8004858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 800485c:	600a      	str	r2, [r1, #0]

0800485e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800485e:	4770      	bx	lr
	ldr r3, =_kernel
 8004860:	20001430 	.word	0x20001430
	ldr r1, =_SCS_ICSR
 8004864:	e000ed04 	.word	0xe000ed04

08004868 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 8004868:	b500      	push	{lr}
 800486a:	b085      	sub	sp, #20
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 800486c:	290f      	cmp	r1, #15
 800486e:	dc0f      	bgt.n	8004890 <reserved_exception+0x28>
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <reserved_exception+0x2c>)
 8004872:	3910      	subs	r1, #16
 8004874:	9103      	str	r1, [sp, #12]
 8004876:	9302      	str	r3, [sp, #8]
 8004878:	4b07      	ldr	r3, [pc, #28]	; (8004898 <reserved_exception+0x30>)
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	2000      	movs	r0, #0
 800487e:	9000      	str	r0, [sp, #0]
 8004880:	4603      	mov	r3, r0
 8004882:	2201      	movs	r2, #1
 8004884:	4905      	ldr	r1, [pc, #20]	; (800489c <reserved_exception+0x34>)
 8004886:	f00a fdf6 	bl	800f476 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 800488a:	b005      	add	sp, #20
 800488c:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <reserved_exception+0x38>)
 8004892:	e7ee      	b.n	8004872 <reserved_exception+0xa>
 8004894:	08012754 	.word	0x08012754
 8004898:	0801276c 	.word	0x0801276c
 800489c:	0801201c 	.word	0x0801201c
 80048a0:	08012738 	.word	0x08012738

080048a4 <bus_fault>:
{
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	b0ba      	sub	sp, #232	; 0xe8
 80048a8:	4605      	mov	r5, r0
 80048aa:	460e      	mov	r6, r1
 80048ac:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
 80048ae:	2201      	movs	r2, #1
 80048b0:	f8ad 2008 	strh.w	r2, [sp, #8]
 80048b4:	4ba8      	ldr	r3, [pc, #672]	; (8004b58 <bus_fault+0x2b4>)
 80048b6:	930e      	str	r3, [sp, #56]	; 0x38
 80048b8:	2300      	movs	r3, #0
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	2102      	movs	r1, #2
 80048be:	f88d 1004 	strb.w	r1, [sp, #4]
 80048c2:	9901      	ldr	r1, [sp, #4]
 80048c4:	910d      	str	r1, [sp, #52]	; 0x34
 80048c6:	4619      	mov	r1, r3
 80048c8:	f363 0100 	bfi	r1, r3, #0, #1
 80048cc:	f363 0141 	bfi	r1, r3, #1, #1
 80048d0:	f363 0182 	bfi	r1, r3, #2, #1
 80048d4:	f363 01c5 	bfi	r1, r3, #3, #3
 80048d8:	f362 1188 	bfi	r1, r2, #6, #3
 80048dc:	2208      	movs	r2, #8
 80048de:	f362 2152 	bfi	r1, r2, #9, #10
 80048e2:	f363 41de 	bfi	r1, r3, #19, #12
 80048e6:	f363 71df 	bfi	r1, r3, #31, #1
 80048ea:	aa0d      	add	r2, sp, #52	; 0x34
 80048ec:	489b      	ldr	r0, [pc, #620]	; (8004b5c <bus_fault+0x2b8>)
 80048ee:	f00a fd35 	bl	800f35c <z_impl_z_log_msg2_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80048f2:	4b9b      	ldr	r3, [pc, #620]	; (8004b60 <bus_fault+0x2bc>)
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80048fa:	d128      	bne.n	800494e <bus_fault+0xaa>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80048fc:	4b98      	ldr	r3, [pc, #608]	; (8004b60 <bus_fault+0x2bc>)
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004904:	d146      	bne.n	8004994 <bus_fault+0xf0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8004906:	4b96      	ldr	r3, [pc, #600]	; (8004b60 <bus_fault+0x2bc>)
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800490e:	d164      	bne.n	80049da <bus_fault+0x136>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8004910:	4b93      	ldr	r3, [pc, #588]	; (8004b60 <bus_fault+0x2bc>)
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004918:	f040 80b4 	bne.w	8004a84 <bus_fault+0x1e0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800491c:	4b90      	ldr	r3, [pc, #576]	; (8004b60 <bus_fault+0x2bc>)
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004924:	f040 80d1 	bne.w	8004aca <bus_fault+0x226>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8004928:	4b8d      	ldr	r3, [pc, #564]	; (8004b60 <bus_fault+0x2bc>)
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004930:	f040 80ee 	bne.w	8004b10 <bus_fault+0x26c>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004934:	4a8a      	ldr	r2, [pc, #552]	; (8004b60 <bus_fault+0x2bc>)
 8004936:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004938:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800493c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800493e:	2101      	movs	r1, #1
 8004940:	4628      	mov	r0, r5
 8004942:	f00a fd96 	bl	800f472 <memory_fault_recoverable>
 8004946:	7020      	strb	r0, [r4, #0]
}
 8004948:	2000      	movs	r0, #0
 800494a:	b03a      	add	sp, #232	; 0xe8
 800494c:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
 800494e:	2201      	movs	r2, #1
 8004950:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004954:	4b83      	ldr	r3, [pc, #524]	; (8004b64 <bus_fault+0x2c0>)
 8004956:	9314      	str	r3, [sp, #80]	; 0x50
 8004958:	2300      	movs	r3, #0
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	2102      	movs	r1, #2
 800495e:	f88d 1004 	strb.w	r1, [sp, #4]
 8004962:	9901      	ldr	r1, [sp, #4]
 8004964:	9113      	str	r1, [sp, #76]	; 0x4c
 8004966:	4619      	mov	r1, r3
 8004968:	f363 0100 	bfi	r1, r3, #0, #1
 800496c:	f363 0141 	bfi	r1, r3, #1, #1
 8004970:	f363 0182 	bfi	r1, r3, #2, #1
 8004974:	f363 01c5 	bfi	r1, r3, #3, #3
 8004978:	f362 1188 	bfi	r1, r2, #6, #3
 800497c:	2208      	movs	r2, #8
 800497e:	f362 2152 	bfi	r1, r2, #9, #10
 8004982:	f363 41de 	bfi	r1, r3, #19, #12
 8004986:	f363 71df 	bfi	r1, r3, #31, #1
 800498a:	aa13      	add	r2, sp, #76	; 0x4c
 800498c:	4873      	ldr	r0, [pc, #460]	; (8004b5c <bus_fault+0x2b8>)
 800498e:	f00a fce5 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8004992:	e7b3      	b.n	80048fc <bus_fault+0x58>
		PR_FAULT_INFO("  Unstacking error");
 8004994:	2201      	movs	r2, #1
 8004996:	f8ad 2008 	strh.w	r2, [sp, #8]
 800499a:	4b73      	ldr	r3, [pc, #460]	; (8004b68 <bus_fault+0x2c4>)
 800499c:	931a      	str	r3, [sp, #104]	; 0x68
 800499e:	2300      	movs	r3, #0
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	2102      	movs	r1, #2
 80049a4:	f88d 1004 	strb.w	r1, [sp, #4]
 80049a8:	9901      	ldr	r1, [sp, #4]
 80049aa:	9119      	str	r1, [sp, #100]	; 0x64
 80049ac:	4619      	mov	r1, r3
 80049ae:	f363 0100 	bfi	r1, r3, #0, #1
 80049b2:	f363 0141 	bfi	r1, r3, #1, #1
 80049b6:	f363 0182 	bfi	r1, r3, #2, #1
 80049ba:	f363 01c5 	bfi	r1, r3, #3, #3
 80049be:	f362 1188 	bfi	r1, r2, #6, #3
 80049c2:	2208      	movs	r2, #8
 80049c4:	f362 2152 	bfi	r1, r2, #9, #10
 80049c8:	f363 41de 	bfi	r1, r3, #19, #12
 80049cc:	f363 71df 	bfi	r1, r3, #31, #1
 80049d0:	aa19      	add	r2, sp, #100	; 0x64
 80049d2:	4862      	ldr	r0, [pc, #392]	; (8004b5c <bus_fault+0x2b8>)
 80049d4:	f00a fcc2 	bl	800f35c <z_impl_z_log_msg2_static_create>
 80049d8:	e795      	b.n	8004906 <bus_fault+0x62>
		PR_FAULT_INFO("  Precise data bus error");
 80049da:	2201      	movs	r2, #1
 80049dc:	f8ad 2008 	strh.w	r2, [sp, #8]
 80049e0:	4b62      	ldr	r3, [pc, #392]	; (8004b6c <bus_fault+0x2c8>)
 80049e2:	9320      	str	r3, [sp, #128]	; 0x80
 80049e4:	2300      	movs	r3, #0
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	2102      	movs	r1, #2
 80049ea:	f88d 1004 	strb.w	r1, [sp, #4]
 80049ee:	9901      	ldr	r1, [sp, #4]
 80049f0:	911f      	str	r1, [sp, #124]	; 0x7c
 80049f2:	4619      	mov	r1, r3
 80049f4:	f363 0100 	bfi	r1, r3, #0, #1
 80049f8:	f363 0141 	bfi	r1, r3, #1, #1
 80049fc:	f363 0182 	bfi	r1, r3, #2, #1
 8004a00:	f363 01c5 	bfi	r1, r3, #3, #3
 8004a04:	f362 1188 	bfi	r1, r2, #6, #3
 8004a08:	2208      	movs	r2, #8
 8004a0a:	f362 2152 	bfi	r1, r2, #9, #10
 8004a0e:	f363 41de 	bfi	r1, r3, #19, #12
 8004a12:	f363 71df 	bfi	r1, r3, #31, #1
 8004a16:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a18:	4850      	ldr	r0, [pc, #320]	; (8004b5c <bus_fault+0x2b8>)
 8004a1a:	f00a fc9f 	bl	800f35c <z_impl_z_log_msg2_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
 8004a1e:	4b50      	ldr	r3, [pc, #320]	; (8004b60 <bus_fault+0x2bc>)
 8004a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004a28:	f43f af72 	beq.w	8004910 <bus_fault+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	f8ad 0008 	strh.w	r0, [sp, #8]
 8004a32:	4b4f      	ldr	r3, [pc, #316]	; (8004b70 <bus_fault+0x2cc>)
 8004a34:	9326      	str	r3, [sp, #152]	; 0x98
 8004a36:	9227      	str	r2, [sp, #156]	; 0x9c
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	f88d 2004 	strb.w	r2, [sp, #4]
 8004a42:	9a01      	ldr	r2, [sp, #4]
 8004a44:	9225      	str	r2, [sp, #148]	; 0x94
 8004a46:	4619      	mov	r1, r3
 8004a48:	f363 0100 	bfi	r1, r3, #0, #1
 8004a4c:	f363 0141 	bfi	r1, r3, #1, #1
 8004a50:	f363 0182 	bfi	r1, r3, #2, #1
 8004a54:	f363 01c5 	bfi	r1, r3, #3, #3
 8004a58:	f360 1188 	bfi	r1, r0, #6, #3
 8004a5c:	220c      	movs	r2, #12
 8004a5e:	f362 2152 	bfi	r1, r2, #9, #10
 8004a62:	f363 41de 	bfi	r1, r3, #19, #12
 8004a66:	f363 71df 	bfi	r1, r3, #31, #1
 8004a6a:	aa25      	add	r2, sp, #148	; 0x94
 8004a6c:	483b      	ldr	r0, [pc, #236]	; (8004b5c <bus_fault+0x2b8>)
 8004a6e:	f00a fc75 	bl	800f35c <z_impl_z_log_msg2_static_create>
			if (from_hard_fault != 0) {
 8004a72:	2e00      	cmp	r6, #0
 8004a74:	f43f af4c 	beq.w	8004910 <bus_fault+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8004a78:	4a39      	ldr	r2, [pc, #228]	; (8004b60 <bus_fault+0x2bc>)
 8004a7a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004a7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a80:	6293      	str	r3, [r2, #40]	; 0x28
 8004a82:	e745      	b.n	8004910 <bus_fault+0x6c>
		PR_FAULT_INFO("  Imprecise data bus error");
 8004a84:	2201      	movs	r2, #1
 8004a86:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004a8a:	4b3a      	ldr	r3, [pc, #232]	; (8004b74 <bus_fault+0x2d0>)
 8004a8c:	932c      	str	r3, [sp, #176]	; 0xb0
 8004a8e:	2300      	movs	r3, #0
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	2102      	movs	r1, #2
 8004a94:	f88d 1004 	strb.w	r1, [sp, #4]
 8004a98:	9901      	ldr	r1, [sp, #4]
 8004a9a:	912b      	str	r1, [sp, #172]	; 0xac
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f363 0100 	bfi	r1, r3, #0, #1
 8004aa2:	f363 0141 	bfi	r1, r3, #1, #1
 8004aa6:	f363 0182 	bfi	r1, r3, #2, #1
 8004aaa:	f363 01c5 	bfi	r1, r3, #3, #3
 8004aae:	f362 1188 	bfi	r1, r2, #6, #3
 8004ab2:	2208      	movs	r2, #8
 8004ab4:	f362 2152 	bfi	r1, r2, #9, #10
 8004ab8:	f363 41de 	bfi	r1, r3, #19, #12
 8004abc:	f363 71df 	bfi	r1, r3, #31, #1
 8004ac0:	aa2b      	add	r2, sp, #172	; 0xac
 8004ac2:	4826      	ldr	r0, [pc, #152]	; (8004b5c <bus_fault+0x2b8>)
 8004ac4:	f00a fc4a 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8004ac8:	e728      	b.n	800491c <bus_fault+0x78>
		PR_FAULT_INFO("  Instruction bus error");
 8004aca:	2201      	movs	r2, #1
 8004acc:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004ad0:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <bus_fault+0x2d4>)
 8004ad2:	9338      	str	r3, [sp, #224]	; 0xe0
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	2102      	movs	r1, #2
 8004ada:	f88d 1004 	strb.w	r1, [sp, #4]
 8004ade:	9901      	ldr	r1, [sp, #4]
 8004ae0:	9137      	str	r1, [sp, #220]	; 0xdc
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	f363 0100 	bfi	r1, r3, #0, #1
 8004ae8:	f363 0141 	bfi	r1, r3, #1, #1
 8004aec:	f363 0182 	bfi	r1, r3, #2, #1
 8004af0:	f363 01c5 	bfi	r1, r3, #3, #3
 8004af4:	f362 1188 	bfi	r1, r2, #6, #3
 8004af8:	2208      	movs	r2, #8
 8004afa:	f362 2152 	bfi	r1, r2, #9, #10
 8004afe:	f363 41de 	bfi	r1, r3, #19, #12
 8004b02:	f363 71df 	bfi	r1, r3, #31, #1
 8004b06:	aa37      	add	r2, sp, #220	; 0xdc
 8004b08:	4814      	ldr	r0, [pc, #80]	; (8004b5c <bus_fault+0x2b8>)
 8004b0a:	f00a fc27 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8004b0e:	e711      	b.n	8004934 <bus_fault+0x90>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8004b10:	2201      	movs	r2, #1
 8004b12:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004b16:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <bus_fault+0x2d8>)
 8004b18:	9332      	str	r3, [sp, #200]	; 0xc8
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	2102      	movs	r1, #2
 8004b20:	f88d 1004 	strb.w	r1, [sp, #4]
 8004b24:	9901      	ldr	r1, [sp, #4]
 8004b26:	9131      	str	r1, [sp, #196]	; 0xc4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f363 0100 	bfi	r1, r3, #0, #1
 8004b2e:	f363 0141 	bfi	r1, r3, #1, #1
 8004b32:	f363 0182 	bfi	r1, r3, #2, #1
 8004b36:	f363 01c5 	bfi	r1, r3, #3, #3
 8004b3a:	f362 1188 	bfi	r1, r2, #6, #3
 8004b3e:	2208      	movs	r2, #8
 8004b40:	f362 2152 	bfi	r1, r2, #9, #10
 8004b44:	f363 41de 	bfi	r1, r3, #19, #12
 8004b48:	f363 71df 	bfi	r1, r3, #31, #1
 8004b4c:	aa31      	add	r2, sp, #196	; 0xc4
 8004b4e:	4803      	ldr	r0, [pc, #12]	; (8004b5c <bus_fault+0x2b8>)
 8004b50:	f00a fc04 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8004b54:	e6ee      	b.n	8004934 <bus_fault+0x90>
 8004b56:	bf00      	nop
 8004b58:	08012780 	.word	0x08012780
 8004b5c:	0801201c 	.word	0x0801201c
 8004b60:	e000ed00 	.word	0xe000ed00
 8004b64:	08012798 	.word	0x08012798
 8004b68:	080127ac 	.word	0x080127ac
 8004b6c:	080127c0 	.word	0x080127c0
 8004b70:	080127dc 	.word	0x080127dc
 8004b74:	080127f4 	.word	0x080127f4
 8004b78:	08012810 	.word	0x08012810
 8004b7c:	08012828 	.word	0x08012828

08004b80 <usage_fault>:
{
 8004b80:	b500      	push	{lr}
 8004b82:	b0b5      	sub	sp, #212	; 0xd4
	PR_FAULT_INFO("***** USAGE FAULT *****");
 8004b84:	2201      	movs	r2, #1
 8004b86:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004b8a:	4b8e      	ldr	r3, [pc, #568]	; (8004dc4 <usage_fault+0x244>)
 8004b8c:	930e      	str	r3, [sp, #56]	; 0x38
 8004b8e:	2300      	movs	r3, #0
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	2102      	movs	r1, #2
 8004b94:	f88d 1004 	strb.w	r1, [sp, #4]
 8004b98:	9901      	ldr	r1, [sp, #4]
 8004b9a:	910d      	str	r1, [sp, #52]	; 0x34
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f363 0100 	bfi	r1, r3, #0, #1
 8004ba2:	f363 0141 	bfi	r1, r3, #1, #1
 8004ba6:	f363 0182 	bfi	r1, r3, #2, #1
 8004baa:	f363 01c5 	bfi	r1, r3, #3, #3
 8004bae:	f362 1188 	bfi	r1, r2, #6, #3
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	f362 2152 	bfi	r1, r2, #9, #10
 8004bb8:	f363 41de 	bfi	r1, r3, #19, #12
 8004bbc:	f363 71df 	bfi	r1, r3, #31, #1
 8004bc0:	aa0d      	add	r2, sp, #52	; 0x34
 8004bc2:	4881      	ldr	r0, [pc, #516]	; (8004dc8 <usage_fault+0x248>)
 8004bc4:	f00a fbca 	bl	800f35c <z_impl_z_log_msg2_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8004bc8:	4b80      	ldr	r3, [pc, #512]	; (8004dcc <usage_fault+0x24c>)
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004bd0:	d125      	bne.n	8004c1e <usage_fault+0x9e>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8004bd2:	4b7e      	ldr	r3, [pc, #504]	; (8004dcc <usage_fault+0x24c>)
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004bda:	d143      	bne.n	8004c64 <usage_fault+0xe4>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8004bdc:	4b7b      	ldr	r3, [pc, #492]	; (8004dcc <usage_fault+0x24c>)
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004be4:	d161      	bne.n	8004caa <usage_fault+0x12a>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8004be6:	4b79      	ldr	r3, [pc, #484]	; (8004dcc <usage_fault+0x24c>)
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004bee:	d17f      	bne.n	8004cf0 <usage_fault+0x170>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8004bf0:	4b76      	ldr	r3, [pc, #472]	; (8004dcc <usage_fault+0x24c>)
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004bf8:	f040 809d 	bne.w	8004d36 <usage_fault+0x1b6>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8004bfc:	4b73      	ldr	r3, [pc, #460]	; (8004dcc <usage_fault+0x24c>)
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004c04:	f040 80ba 	bne.w	8004d7c <usage_fault+0x1fc>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8004c08:	4a70      	ldr	r2, [pc, #448]	; (8004dcc <usage_fault+0x24c>)
 8004c0a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004c0c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004c10:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004c14:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004c16:	2000      	movs	r0, #0
 8004c18:	b035      	add	sp, #212	; 0xd4
 8004c1a:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004c24:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <usage_fault+0x250>)
 8004c26:	9314      	str	r3, [sp, #80]	; 0x50
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9301      	str	r3, [sp, #4]
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	f88d 1004 	strb.w	r1, [sp, #4]
 8004c32:	9901      	ldr	r1, [sp, #4]
 8004c34:	9113      	str	r1, [sp, #76]	; 0x4c
 8004c36:	4619      	mov	r1, r3
 8004c38:	f363 0100 	bfi	r1, r3, #0, #1
 8004c3c:	f363 0141 	bfi	r1, r3, #1, #1
 8004c40:	f363 0182 	bfi	r1, r3, #2, #1
 8004c44:	f363 01c5 	bfi	r1, r3, #3, #3
 8004c48:	f362 1188 	bfi	r1, r2, #6, #3
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	f362 2152 	bfi	r1, r2, #9, #10
 8004c52:	f363 41de 	bfi	r1, r3, #19, #12
 8004c56:	f363 71df 	bfi	r1, r3, #31, #1
 8004c5a:	aa13      	add	r2, sp, #76	; 0x4c
 8004c5c:	485a      	ldr	r0, [pc, #360]	; (8004dc8 <usage_fault+0x248>)
 8004c5e:	f00a fb7d 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8004c62:	e7b6      	b.n	8004bd2 <usage_fault+0x52>
		PR_FAULT_INFO("  Unaligned memory access");
 8004c64:	2201      	movs	r2, #1
 8004c66:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004c6a:	4b5a      	ldr	r3, [pc, #360]	; (8004dd4 <usage_fault+0x254>)
 8004c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8004c6e:	2300      	movs	r3, #0
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	2102      	movs	r1, #2
 8004c74:	f88d 1004 	strb.w	r1, [sp, #4]
 8004c78:	9901      	ldr	r1, [sp, #4]
 8004c7a:	9119      	str	r1, [sp, #100]	; 0x64
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f363 0100 	bfi	r1, r3, #0, #1
 8004c82:	f363 0141 	bfi	r1, r3, #1, #1
 8004c86:	f363 0182 	bfi	r1, r3, #2, #1
 8004c8a:	f363 01c5 	bfi	r1, r3, #3, #3
 8004c8e:	f362 1188 	bfi	r1, r2, #6, #3
 8004c92:	2208      	movs	r2, #8
 8004c94:	f362 2152 	bfi	r1, r2, #9, #10
 8004c98:	f363 41de 	bfi	r1, r3, #19, #12
 8004c9c:	f363 71df 	bfi	r1, r3, #31, #1
 8004ca0:	aa19      	add	r2, sp, #100	; 0x64
 8004ca2:	4849      	ldr	r0, [pc, #292]	; (8004dc8 <usage_fault+0x248>)
 8004ca4:	f00a fb5a 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8004ca8:	e798      	b.n	8004bdc <usage_fault+0x5c>
		PR_FAULT_INFO("  No coprocessor instructions");
 8004caa:	2201      	movs	r2, #1
 8004cac:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004cb0:	4b49      	ldr	r3, [pc, #292]	; (8004dd8 <usage_fault+0x258>)
 8004cb2:	9320      	str	r3, [sp, #128]	; 0x80
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	2102      	movs	r1, #2
 8004cba:	f88d 1004 	strb.w	r1, [sp, #4]
 8004cbe:	9901      	ldr	r1, [sp, #4]
 8004cc0:	911f      	str	r1, [sp, #124]	; 0x7c
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f363 0100 	bfi	r1, r3, #0, #1
 8004cc8:	f363 0141 	bfi	r1, r3, #1, #1
 8004ccc:	f363 0182 	bfi	r1, r3, #2, #1
 8004cd0:	f363 01c5 	bfi	r1, r3, #3, #3
 8004cd4:	f362 1188 	bfi	r1, r2, #6, #3
 8004cd8:	2208      	movs	r2, #8
 8004cda:	f362 2152 	bfi	r1, r2, #9, #10
 8004cde:	f363 41de 	bfi	r1, r3, #19, #12
 8004ce2:	f363 71df 	bfi	r1, r3, #31, #1
 8004ce6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ce8:	4837      	ldr	r0, [pc, #220]	; (8004dc8 <usage_fault+0x248>)
 8004cea:	f00a fb37 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8004cee:	e77a      	b.n	8004be6 <usage_fault+0x66>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004cf6:	4b39      	ldr	r3, [pc, #228]	; (8004ddc <usage_fault+0x25c>)
 8004cf8:	9326      	str	r3, [sp, #152]	; 0x98
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	2102      	movs	r1, #2
 8004d00:	f88d 1004 	strb.w	r1, [sp, #4]
 8004d04:	9901      	ldr	r1, [sp, #4]
 8004d06:	9125      	str	r1, [sp, #148]	; 0x94
 8004d08:	4619      	mov	r1, r3
 8004d0a:	f363 0100 	bfi	r1, r3, #0, #1
 8004d0e:	f363 0141 	bfi	r1, r3, #1, #1
 8004d12:	f363 0182 	bfi	r1, r3, #2, #1
 8004d16:	f363 01c5 	bfi	r1, r3, #3, #3
 8004d1a:	f362 1188 	bfi	r1, r2, #6, #3
 8004d1e:	2208      	movs	r2, #8
 8004d20:	f362 2152 	bfi	r1, r2, #9, #10
 8004d24:	f363 41de 	bfi	r1, r3, #19, #12
 8004d28:	f363 71df 	bfi	r1, r3, #31, #1
 8004d2c:	aa25      	add	r2, sp, #148	; 0x94
 8004d2e:	4826      	ldr	r0, [pc, #152]	; (8004dc8 <usage_fault+0x248>)
 8004d30:	f00a fb14 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8004d34:	e75c      	b.n	8004bf0 <usage_fault+0x70>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8004d36:	2201      	movs	r2, #1
 8004d38:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004d3c:	4b28      	ldr	r3, [pc, #160]	; (8004de0 <usage_fault+0x260>)
 8004d3e:	932c      	str	r3, [sp, #176]	; 0xb0
 8004d40:	2300      	movs	r3, #0
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	2102      	movs	r1, #2
 8004d46:	f88d 1004 	strb.w	r1, [sp, #4]
 8004d4a:	9901      	ldr	r1, [sp, #4]
 8004d4c:	912b      	str	r1, [sp, #172]	; 0xac
 8004d4e:	4619      	mov	r1, r3
 8004d50:	f363 0100 	bfi	r1, r3, #0, #1
 8004d54:	f363 0141 	bfi	r1, r3, #1, #1
 8004d58:	f363 0182 	bfi	r1, r3, #2, #1
 8004d5c:	f363 01c5 	bfi	r1, r3, #3, #3
 8004d60:	f362 1188 	bfi	r1, r2, #6, #3
 8004d64:	2208      	movs	r2, #8
 8004d66:	f362 2152 	bfi	r1, r2, #9, #10
 8004d6a:	f363 41de 	bfi	r1, r3, #19, #12
 8004d6e:	f363 71df 	bfi	r1, r3, #31, #1
 8004d72:	aa2b      	add	r2, sp, #172	; 0xac
 8004d74:	4814      	ldr	r0, [pc, #80]	; (8004dc8 <usage_fault+0x248>)
 8004d76:	f00a faf1 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8004d7a:	e73f      	b.n	8004bfc <usage_fault+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004d82:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <usage_fault+0x264>)
 8004d84:	9332      	str	r3, [sp, #200]	; 0xc8
 8004d86:	2300      	movs	r3, #0
 8004d88:	9301      	str	r3, [sp, #4]
 8004d8a:	2102      	movs	r1, #2
 8004d8c:	f88d 1004 	strb.w	r1, [sp, #4]
 8004d90:	9901      	ldr	r1, [sp, #4]
 8004d92:	9131      	str	r1, [sp, #196]	; 0xc4
 8004d94:	4619      	mov	r1, r3
 8004d96:	f363 0100 	bfi	r1, r3, #0, #1
 8004d9a:	f363 0141 	bfi	r1, r3, #1, #1
 8004d9e:	f363 0182 	bfi	r1, r3, #2, #1
 8004da2:	f363 01c5 	bfi	r1, r3, #3, #3
 8004da6:	f362 1188 	bfi	r1, r2, #6, #3
 8004daa:	2208      	movs	r2, #8
 8004dac:	f362 2152 	bfi	r1, r2, #9, #10
 8004db0:	f363 41de 	bfi	r1, r3, #19, #12
 8004db4:	f363 71df 	bfi	r1, r3, #31, #1
 8004db8:	aa31      	add	r2, sp, #196	; 0xc4
 8004dba:	4803      	ldr	r0, [pc, #12]	; (8004dc8 <usage_fault+0x248>)
 8004dbc:	f00a face 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8004dc0:	e722      	b.n	8004c08 <usage_fault+0x88>
 8004dc2:	bf00      	nop
 8004dc4:	08012858 	.word	0x08012858
 8004dc8:	0801201c 	.word	0x0801201c
 8004dcc:	e000ed00 	.word	0xe000ed00
 8004dd0:	08012870 	.word	0x08012870
 8004dd4:	08012884 	.word	0x08012884
 8004dd8:	080128a0 	.word	0x080128a0
 8004ddc:	080128c0 	.word	0x080128c0
 8004de0:	080128e8 	.word	0x080128e8
 8004de4:	08012904 	.word	0x08012904

08004de8 <debug_monitor>:
{
 8004de8:	b500      	push	{lr}
 8004dea:	b091      	sub	sp, #68	; 0x44
	*recoverable = false;
 8004dec:	2300      	movs	r3, #0
 8004dee:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
 8004df0:	2201      	movs	r2, #1
 8004df2:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004df6:	4910      	ldr	r1, [pc, #64]	; (8004e38 <debug_monitor+0x50>)
 8004df8:	910e      	str	r1, [sp, #56]	; 0x38
 8004dfa:	9301      	str	r3, [sp, #4]
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	f88d 1004 	strb.w	r1, [sp, #4]
 8004e02:	9901      	ldr	r1, [sp, #4]
 8004e04:	910d      	str	r1, [sp, #52]	; 0x34
 8004e06:	4619      	mov	r1, r3
 8004e08:	f363 0100 	bfi	r1, r3, #0, #1
 8004e0c:	f363 0141 	bfi	r1, r3, #1, #1
 8004e10:	f363 0182 	bfi	r1, r3, #2, #1
 8004e14:	f363 01c5 	bfi	r1, r3, #3, #3
 8004e18:	f362 1188 	bfi	r1, r2, #6, #3
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	f362 2152 	bfi	r1, r2, #9, #10
 8004e22:	f363 41de 	bfi	r1, r3, #19, #12
 8004e26:	f363 71df 	bfi	r1, r3, #31, #1
 8004e2a:	aa0d      	add	r2, sp, #52	; 0x34
 8004e2c:	4803      	ldr	r0, [pc, #12]	; (8004e3c <debug_monitor+0x54>)
 8004e2e:	f00a fa95 	bl	800f35c <z_impl_z_log_msg2_static_create>
}
 8004e32:	b011      	add	sp, #68	; 0x44
 8004e34:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e38:	08012930 	.word	0x08012930
 8004e3c:	0801201c 	.word	0x0801201c

08004e40 <mem_manage_fault>:
{
 8004e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e42:	b0b5      	sub	sp, #212	; 0xd4
 8004e44:	4605      	mov	r5, r0
 8004e46:	460c      	mov	r4, r1
 8004e48:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004e50:	4ba3      	ldr	r3, [pc, #652]	; (80050e0 <mem_manage_fault+0x2a0>)
 8004e52:	930e      	str	r3, [sp, #56]	; 0x38
 8004e54:	2300      	movs	r3, #0
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	2102      	movs	r1, #2
 8004e5a:	f88d 1004 	strb.w	r1, [sp, #4]
 8004e5e:	9901      	ldr	r1, [sp, #4]
 8004e60:	910d      	str	r1, [sp, #52]	; 0x34
 8004e62:	4619      	mov	r1, r3
 8004e64:	f363 0100 	bfi	r1, r3, #0, #1
 8004e68:	f363 0141 	bfi	r1, r3, #1, #1
 8004e6c:	f363 0182 	bfi	r1, r3, #2, #1
 8004e70:	f363 01c5 	bfi	r1, r3, #3, #3
 8004e74:	f362 1188 	bfi	r1, r2, #6, #3
 8004e78:	2208      	movs	r2, #8
 8004e7a:	f362 2152 	bfi	r1, r2, #9, #10
 8004e7e:	f363 41de 	bfi	r1, r3, #19, #12
 8004e82:	f363 71df 	bfi	r1, r3, #31, #1
 8004e86:	aa0d      	add	r2, sp, #52	; 0x34
 8004e88:	4896      	ldr	r0, [pc, #600]	; (80050e4 <mem_manage_fault+0x2a4>)
 8004e8a:	f00a fa67 	bl	800f35c <z_impl_z_log_msg2_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8004e8e:	4b96      	ldr	r3, [pc, #600]	; (80050e8 <mem_manage_fault+0x2a8>)
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	f013 0f10 	tst.w	r3, #16
 8004e96:	d134      	bne.n	8004f02 <mem_manage_fault+0xc2>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8004e98:	4b93      	ldr	r3, [pc, #588]	; (80050e8 <mem_manage_fault+0x2a8>)
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	f013 0f08 	tst.w	r3, #8
 8004ea0:	d152      	bne.n	8004f48 <mem_manage_fault+0x108>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8004ea2:	4b91      	ldr	r3, [pc, #580]	; (80050e8 <mem_manage_fault+0x2a8>)
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	f013 0f02 	tst.w	r3, #2
 8004eaa:	d170      	bne.n	8004f8e <mem_manage_fault+0x14e>
	uint32_t mmfar = -EINVAL;
 8004eac:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8004eb0:	4b8d      	ldr	r3, [pc, #564]	; (80050e8 <mem_manage_fault+0x2a8>)
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	f013 0f01 	tst.w	r3, #1
 8004eb8:	f040 80c0 	bne.w	800503c <mem_manage_fault+0x1fc>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8004ebc:	4b8a      	ldr	r3, [pc, #552]	; (80050e8 <mem_manage_fault+0x2a8>)
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	f013 0f20 	tst.w	r3, #32
 8004ec4:	f040 80dd 	bne.w	8005082 <mem_manage_fault+0x242>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8004ec8:	4b87      	ldr	r3, [pc, #540]	; (80050e8 <mem_manage_fault+0x2a8>)
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	f013 0f10 	tst.w	r3, #16
 8004ed0:	d104      	bne.n	8004edc <mem_manage_fault+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8004ed2:	4b85      	ldr	r3, [pc, #532]	; (80050e8 <mem_manage_fault+0x2a8>)
 8004ed4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8004ed6:	f014 0402 	ands.w	r4, r4, #2
 8004eda:	d005      	beq.n	8004ee8 <mem_manage_fault+0xa8>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8004edc:	4b82      	ldr	r3, [pc, #520]	; (80050e8 <mem_manage_fault+0x2a8>)
 8004ede:	685c      	ldr	r4, [r3, #4]
 8004ee0:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8004ee4:	f040 80f0 	bne.w	80050c8 <mem_manage_fault+0x288>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8004ee8:	4a7f      	ldr	r2, [pc, #508]	; (80050e8 <mem_manage_fault+0x2a8>)
 8004eea:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004eec:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8004ef0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f00a fabc 	bl	800f472 <memory_fault_recoverable>
 8004efa:	7030      	strb	r0, [r6, #0]
}
 8004efc:	4620      	mov	r0, r4
 8004efe:	b035      	add	sp, #212	; 0xd4
 8004f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
 8004f02:	2201      	movs	r2, #1
 8004f04:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004f08:	4b78      	ldr	r3, [pc, #480]	; (80050ec <mem_manage_fault+0x2ac>)
 8004f0a:	9314      	str	r3, [sp, #80]	; 0x50
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	2102      	movs	r1, #2
 8004f12:	f88d 1004 	strb.w	r1, [sp, #4]
 8004f16:	9901      	ldr	r1, [sp, #4]
 8004f18:	9113      	str	r1, [sp, #76]	; 0x4c
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f363 0100 	bfi	r1, r3, #0, #1
 8004f20:	f363 0141 	bfi	r1, r3, #1, #1
 8004f24:	f363 0182 	bfi	r1, r3, #2, #1
 8004f28:	f363 01c5 	bfi	r1, r3, #3, #3
 8004f2c:	f362 1188 	bfi	r1, r2, #6, #3
 8004f30:	2208      	movs	r2, #8
 8004f32:	f362 2152 	bfi	r1, r2, #9, #10
 8004f36:	f363 41de 	bfi	r1, r3, #19, #12
 8004f3a:	f363 71df 	bfi	r1, r3, #31, #1
 8004f3e:	aa13      	add	r2, sp, #76	; 0x4c
 8004f40:	4868      	ldr	r0, [pc, #416]	; (80050e4 <mem_manage_fault+0x2a4>)
 8004f42:	f00a fa0b 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8004f46:	e7a7      	b.n	8004e98 <mem_manage_fault+0x58>
		PR_FAULT_INFO("  Unstacking error");
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004f4e:	4b68      	ldr	r3, [pc, #416]	; (80050f0 <mem_manage_fault+0x2b0>)
 8004f50:	931a      	str	r3, [sp, #104]	; 0x68
 8004f52:	2300      	movs	r3, #0
 8004f54:	9301      	str	r3, [sp, #4]
 8004f56:	2102      	movs	r1, #2
 8004f58:	f88d 1004 	strb.w	r1, [sp, #4]
 8004f5c:	9901      	ldr	r1, [sp, #4]
 8004f5e:	9119      	str	r1, [sp, #100]	; 0x64
 8004f60:	4619      	mov	r1, r3
 8004f62:	f363 0100 	bfi	r1, r3, #0, #1
 8004f66:	f363 0141 	bfi	r1, r3, #1, #1
 8004f6a:	f363 0182 	bfi	r1, r3, #2, #1
 8004f6e:	f363 01c5 	bfi	r1, r3, #3, #3
 8004f72:	f362 1188 	bfi	r1, r2, #6, #3
 8004f76:	2208      	movs	r2, #8
 8004f78:	f362 2152 	bfi	r1, r2, #9, #10
 8004f7c:	f363 41de 	bfi	r1, r3, #19, #12
 8004f80:	f363 71df 	bfi	r1, r3, #31, #1
 8004f84:	aa19      	add	r2, sp, #100	; 0x64
 8004f86:	4857      	ldr	r0, [pc, #348]	; (80050e4 <mem_manage_fault+0x2a4>)
 8004f88:	f00a f9e8 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8004f8c:	e789      	b.n	8004ea2 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Data Access Violation");
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004f94:	4b57      	ldr	r3, [pc, #348]	; (80050f4 <mem_manage_fault+0x2b4>)
 8004f96:	9320      	str	r3, [sp, #128]	; 0x80
 8004f98:	2300      	movs	r3, #0
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	f88d 1004 	strb.w	r1, [sp, #4]
 8004fa2:	9901      	ldr	r1, [sp, #4]
 8004fa4:	911f      	str	r1, [sp, #124]	; 0x7c
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	f363 0100 	bfi	r1, r3, #0, #1
 8004fac:	f363 0141 	bfi	r1, r3, #1, #1
 8004fb0:	f363 0182 	bfi	r1, r3, #2, #1
 8004fb4:	f363 01c5 	bfi	r1, r3, #3, #3
 8004fb8:	f362 1188 	bfi	r1, r2, #6, #3
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	f362 2152 	bfi	r1, r2, #9, #10
 8004fc2:	f363 41de 	bfi	r1, r3, #19, #12
 8004fc6:	f363 71df 	bfi	r1, r3, #31, #1
 8004fca:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fcc:	4845      	ldr	r0, [pc, #276]	; (80050e4 <mem_manage_fault+0x2a4>)
 8004fce:	f00a f9c5 	bl	800f35c <z_impl_z_log_msg2_static_create>
		uint32_t temp = SCB->MMFAR;
 8004fd2:	4b45      	ldr	r3, [pc, #276]	; (80050e8 <mem_manage_fault+0x2a8>)
 8004fd4:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004fdc:	d102      	bne.n	8004fe4 <mem_manage_fault+0x1a4>
	uint32_t mmfar = -EINVAL;
 8004fde:	f06f 0715 	mvn.w	r7, #21
 8004fe2:	e765      	b.n	8004eb0 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004fea:	4b43      	ldr	r3, [pc, #268]	; (80050f8 <mem_manage_fault+0x2b8>)
 8004fec:	9326      	str	r3, [sp, #152]	; 0x98
 8004fee:	9727      	str	r7, [sp, #156]	; 0x9c
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	2103      	movs	r1, #3
 8004ff6:	f88d 1004 	strb.w	r1, [sp, #4]
 8004ffa:	9901      	ldr	r1, [sp, #4]
 8004ffc:	9125      	str	r1, [sp, #148]	; 0x94
 8004ffe:	4619      	mov	r1, r3
 8005000:	f363 0100 	bfi	r1, r3, #0, #1
 8005004:	f363 0141 	bfi	r1, r3, #1, #1
 8005008:	f363 0182 	bfi	r1, r3, #2, #1
 800500c:	f363 01c5 	bfi	r1, r3, #3, #3
 8005010:	f362 1188 	bfi	r1, r2, #6, #3
 8005014:	220c      	movs	r2, #12
 8005016:	f362 2152 	bfi	r1, r2, #9, #10
 800501a:	f363 41de 	bfi	r1, r3, #19, #12
 800501e:	f363 71df 	bfi	r1, r3, #31, #1
 8005022:	aa25      	add	r2, sp, #148	; 0x94
 8005024:	482f      	ldr	r0, [pc, #188]	; (80050e4 <mem_manage_fault+0x2a4>)
 8005026:	f00a f999 	bl	800f35c <z_impl_z_log_msg2_static_create>
			if (from_hard_fault != 0) {
 800502a:	2c00      	cmp	r4, #0
 800502c:	f43f af40 	beq.w	8004eb0 <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8005030:	4a2d      	ldr	r2, [pc, #180]	; (80050e8 <mem_manage_fault+0x2a8>)
 8005032:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005038:	6293      	str	r3, [r2, #40]	; 0x28
 800503a:	e739      	b.n	8004eb0 <mem_manage_fault+0x70>
		PR_FAULT_INFO("  Instruction Access Violation");
 800503c:	2201      	movs	r2, #1
 800503e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005042:	4b2e      	ldr	r3, [pc, #184]	; (80050fc <mem_manage_fault+0x2bc>)
 8005044:	932c      	str	r3, [sp, #176]	; 0xb0
 8005046:	2300      	movs	r3, #0
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	2102      	movs	r1, #2
 800504c:	f88d 1004 	strb.w	r1, [sp, #4]
 8005050:	9901      	ldr	r1, [sp, #4]
 8005052:	912b      	str	r1, [sp, #172]	; 0xac
 8005054:	4619      	mov	r1, r3
 8005056:	f363 0100 	bfi	r1, r3, #0, #1
 800505a:	f363 0141 	bfi	r1, r3, #1, #1
 800505e:	f363 0182 	bfi	r1, r3, #2, #1
 8005062:	f363 01c5 	bfi	r1, r3, #3, #3
 8005066:	f362 1188 	bfi	r1, r2, #6, #3
 800506a:	2208      	movs	r2, #8
 800506c:	f362 2152 	bfi	r1, r2, #9, #10
 8005070:	f363 41de 	bfi	r1, r3, #19, #12
 8005074:	f363 71df 	bfi	r1, r3, #31, #1
 8005078:	aa2b      	add	r2, sp, #172	; 0xac
 800507a:	481a      	ldr	r0, [pc, #104]	; (80050e4 <mem_manage_fault+0x2a4>)
 800507c:	f00a f96e 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8005080:	e71c      	b.n	8004ebc <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
 8005082:	2201      	movs	r2, #1
 8005084:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005088:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <mem_manage_fault+0x2c0>)
 800508a:	9332      	str	r3, [sp, #200]	; 0xc8
 800508c:	2300      	movs	r3, #0
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	2102      	movs	r1, #2
 8005092:	f88d 1004 	strb.w	r1, [sp, #4]
 8005096:	9901      	ldr	r1, [sp, #4]
 8005098:	9131      	str	r1, [sp, #196]	; 0xc4
 800509a:	4619      	mov	r1, r3
 800509c:	f363 0100 	bfi	r1, r3, #0, #1
 80050a0:	f363 0141 	bfi	r1, r3, #1, #1
 80050a4:	f363 0182 	bfi	r1, r3, #2, #1
 80050a8:	f363 01c5 	bfi	r1, r3, #3, #3
 80050ac:	f362 1188 	bfi	r1, r2, #6, #3
 80050b0:	2208      	movs	r2, #8
 80050b2:	f362 2152 	bfi	r1, r2, #9, #10
 80050b6:	f363 41de 	bfi	r1, r3, #19, #12
 80050ba:	f363 71df 	bfi	r1, r3, #31, #1
 80050be:	aa31      	add	r2, sp, #196	; 0xc4
 80050c0:	4808      	ldr	r0, [pc, #32]	; (80050e4 <mem_manage_fault+0x2a4>)
 80050c2:	f00a f94b 	bl	800f35c <z_impl_z_log_msg2_static_create>
 80050c6:	e6ff      	b.n	8004ec8 <mem_manage_fault+0x88>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 80050c8:	4629      	mov	r1, r5
 80050ca:	4638      	mov	r0, r7
 80050cc:	f7ff fb6e 	bl	80047ac <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 80050d0:	4604      	mov	r4, r0
 80050d2:	2800      	cmp	r0, #0
 80050d4:	f43f af08 	beq.w	8004ee8 <mem_manage_fault+0xa8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80050d8:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 80050dc:	2402      	movs	r4, #2
 80050de:	e703      	b.n	8004ee8 <mem_manage_fault+0xa8>
 80050e0:	08012954 	.word	0x08012954
 80050e4:	0801201c 	.word	0x0801201c
 80050e8:	e000ed00 	.word	0xe000ed00
 80050ec:	0801296c 	.word	0x0801296c
 80050f0:	080127ac 	.word	0x080127ac
 80050f4:	080129a0 	.word	0x080129a0
 80050f8:	080129b8 	.word	0x080129b8
 80050fc:	080129d0 	.word	0x080129d0
 8005100:	08012828 	.word	0x08012828

08005104 <hard_fault>:
{
 8005104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005106:	b0a9      	sub	sp, #164	; 0xa4
 8005108:	4607      	mov	r7, r0
 800510a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
 800510c:	2301      	movs	r3, #1
 800510e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8005112:	4a73      	ldr	r2, [pc, #460]	; (80052e0 <hard_fault+0x1dc>)
 8005114:	920e      	str	r2, [sp, #56]	; 0x38
 8005116:	2400      	movs	r4, #0
 8005118:	9401      	str	r4, [sp, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f88d 2004 	strb.w	r2, [sp, #4]
 8005120:	9a01      	ldr	r2, [sp, #4]
 8005122:	920d      	str	r2, [sp, #52]	; 0x34
 8005124:	4621      	mov	r1, r4
 8005126:	f364 0100 	bfi	r1, r4, #0, #1
 800512a:	f364 0141 	bfi	r1, r4, #1, #1
 800512e:	f364 0182 	bfi	r1, r4, #2, #1
 8005132:	f364 01c5 	bfi	r1, r4, #3, #3
 8005136:	f363 1188 	bfi	r1, r3, #6, #3
 800513a:	2308      	movs	r3, #8
 800513c:	f363 2152 	bfi	r1, r3, #9, #10
 8005140:	f364 41de 	bfi	r1, r4, #19, #12
 8005144:	f364 71df 	bfi	r1, r4, #31, #1
 8005148:	4623      	mov	r3, r4
 800514a:	aa0d      	add	r2, sp, #52	; 0x34
 800514c:	4865      	ldr	r0, [pc, #404]	; (80052e4 <hard_fault+0x1e0>)
 800514e:	f00a f905 	bl	800f35c <z_impl_z_log_msg2_static_create>
	*recoverable = false;
 8005152:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8005154:	4b64      	ldr	r3, [pc, #400]	; (80052e8 <hard_fault+0x1e4>)
 8005156:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8005158:	f015 0502 	ands.w	r5, r5, #2
 800515c:	d10a      	bne.n	8005174 <hard_fault+0x70>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 800515e:	4b62      	ldr	r3, [pc, #392]	; (80052e8 <hard_fault+0x1e4>)
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	2b00      	cmp	r3, #0
 8005164:	db2a      	blt.n	80051bc <hard_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8005166:	4b60      	ldr	r3, [pc, #384]	; (80052e8 <hard_fault+0x1e4>)
 8005168:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800516a:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 800516e:	d149      	bne.n	8005204 <hard_fault+0x100>
}
 8005170:	b029      	add	sp, #164	; 0xa4
 8005172:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
 8005174:	2301      	movs	r3, #1
 8005176:	f8ad 3008 	strh.w	r3, [sp, #8]
 800517a:	4a5c      	ldr	r2, [pc, #368]	; (80052ec <hard_fault+0x1e8>)
 800517c:	9226      	str	r2, [sp, #152]	; 0x98
 800517e:	9401      	str	r4, [sp, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f88d 2004 	strb.w	r2, [sp, #4]
 8005186:	9a01      	ldr	r2, [sp, #4]
 8005188:	9225      	str	r2, [sp, #148]	; 0x94
 800518a:	4621      	mov	r1, r4
 800518c:	f364 0100 	bfi	r1, r4, #0, #1
 8005190:	f364 0141 	bfi	r1, r4, #1, #1
 8005194:	f364 0182 	bfi	r1, r4, #2, #1
 8005198:	f364 01c5 	bfi	r1, r4, #3, #3
 800519c:	f363 1188 	bfi	r1, r3, #6, #3
 80051a0:	2308      	movs	r3, #8
 80051a2:	f363 2152 	bfi	r1, r3, #9, #10
 80051a6:	f364 41de 	bfi	r1, r4, #19, #12
 80051aa:	f364 71df 	bfi	r1, r4, #31, #1
 80051ae:	4623      	mov	r3, r4
 80051b0:	aa25      	add	r2, sp, #148	; 0x94
 80051b2:	484c      	ldr	r0, [pc, #304]	; (80052e4 <hard_fault+0x1e0>)
 80051b4:	f00a f8d2 	bl	800f35c <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80051b8:	4620      	mov	r0, r4
 80051ba:	e7d9      	b.n	8005170 <hard_fault+0x6c>
		PR_EXC("  Debug event");
 80051bc:	2201      	movs	r2, #1
 80051be:	f8ad 2008 	strh.w	r2, [sp, #8]
 80051c2:	4b4b      	ldr	r3, [pc, #300]	; (80052f0 <hard_fault+0x1ec>)
 80051c4:	9320      	str	r3, [sp, #128]	; 0x80
 80051c6:	2300      	movs	r3, #0
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	2102      	movs	r1, #2
 80051cc:	f88d 1004 	strb.w	r1, [sp, #4]
 80051d0:	9901      	ldr	r1, [sp, #4]
 80051d2:	911f      	str	r1, [sp, #124]	; 0x7c
 80051d4:	4619      	mov	r1, r3
 80051d6:	f363 0100 	bfi	r1, r3, #0, #1
 80051da:	f363 0141 	bfi	r1, r3, #1, #1
 80051de:	f363 0182 	bfi	r1, r3, #2, #1
 80051e2:	f363 01c5 	bfi	r1, r3, #3, #3
 80051e6:	f362 1188 	bfi	r1, r2, #6, #3
 80051ea:	2208      	movs	r2, #8
 80051ec:	f362 2152 	bfi	r1, r2, #9, #10
 80051f0:	f363 41de 	bfi	r1, r3, #19, #12
 80051f4:	f363 71df 	bfi	r1, r3, #31, #1
 80051f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80051fa:	483a      	ldr	r0, [pc, #232]	; (80052e4 <hard_fault+0x1e0>)
 80051fc:	f00a f8ae 	bl	800f35c <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8005200:	4628      	mov	r0, r5
 8005202:	e7b5      	b.n	8005170 <hard_fault+0x6c>
		PR_EXC("  Fault escalation (see below)");
 8005204:	2201      	movs	r2, #1
 8005206:	f8ad 2008 	strh.w	r2, [sp, #8]
 800520a:	4b3a      	ldr	r3, [pc, #232]	; (80052f4 <hard_fault+0x1f0>)
 800520c:	9314      	str	r3, [sp, #80]	; 0x50
 800520e:	2300      	movs	r3, #0
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	2102      	movs	r1, #2
 8005214:	f88d 1004 	strb.w	r1, [sp, #4]
 8005218:	9901      	ldr	r1, [sp, #4]
 800521a:	9113      	str	r1, [sp, #76]	; 0x4c
 800521c:	4619      	mov	r1, r3
 800521e:	f363 0100 	bfi	r1, r3, #0, #1
 8005222:	f363 0141 	bfi	r1, r3, #1, #1
 8005226:	f363 0182 	bfi	r1, r3, #2, #1
 800522a:	f363 01c5 	bfi	r1, r3, #3, #3
 800522e:	f362 1188 	bfi	r1, r2, #6, #3
 8005232:	2208      	movs	r2, #8
 8005234:	f362 2152 	bfi	r1, r2, #9, #10
 8005238:	f363 41de 	bfi	r1, r3, #19, #12
 800523c:	f363 71df 	bfi	r1, r3, #31, #1
 8005240:	aa13      	add	r2, sp, #76	; 0x4c
 8005242:	4828      	ldr	r0, [pc, #160]	; (80052e4 <hard_fault+0x1e0>)
 8005244:	f00a f88a 	bl	800f35c <z_impl_z_log_msg2_static_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8005248:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 800524a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 800524e:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8005252:	429a      	cmp	r2, r3
 8005254:	d00d      	beq.n	8005272 <hard_fault+0x16e>
		} else if (SCB_MMFSR != 0) {
 8005256:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <hard_fault+0x1e4>)
 8005258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800525c:	bb7b      	cbnz	r3, 80052be <hard_fault+0x1ba>
		} else if (SCB_BFSR != 0) {
 800525e:	4b22      	ldr	r3, [pc, #136]	; (80052e8 <hard_fault+0x1e4>)
 8005260:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005264:	bb8b      	cbnz	r3, 80052ca <hard_fault+0x1c6>
		} else if (SCB_UFSR != 0) {
 8005266:	4b20      	ldr	r3, [pc, #128]	; (80052e8 <hard_fault+0x1e4>)
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	bb9b      	cbnz	r3, 80052d6 <hard_fault+0x1d2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800526e:	4628      	mov	r0, r5
	return reason;
 8005270:	e77e      	b.n	8005170 <hard_fault+0x6c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8005272:	2201      	movs	r2, #1
 8005274:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005278:	4b1f      	ldr	r3, [pc, #124]	; (80052f8 <hard_fault+0x1f4>)
 800527a:	931a      	str	r3, [sp, #104]	; 0x68
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005280:	2300      	movs	r3, #0
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	2103      	movs	r1, #3
 8005286:	f88d 1004 	strb.w	r1, [sp, #4]
 800528a:	9901      	ldr	r1, [sp, #4]
 800528c:	9119      	str	r1, [sp, #100]	; 0x64
 800528e:	4619      	mov	r1, r3
 8005290:	f363 0100 	bfi	r1, r3, #0, #1
 8005294:	f363 0141 	bfi	r1, r3, #1, #1
 8005298:	f363 0182 	bfi	r1, r3, #2, #1
 800529c:	f363 01c5 	bfi	r1, r3, #3, #3
 80052a0:	f362 1188 	bfi	r1, r2, #6, #3
 80052a4:	220c      	movs	r2, #12
 80052a6:	f362 2152 	bfi	r1, r2, #9, #10
 80052aa:	f363 41de 	bfi	r1, r3, #19, #12
 80052ae:	f363 71df 	bfi	r1, r3, #31, #1
 80052b2:	aa19      	add	r2, sp, #100	; 0x64
 80052b4:	480b      	ldr	r0, [pc, #44]	; (80052e4 <hard_fault+0x1e0>)
 80052b6:	f00a f851 	bl	800f35c <z_impl_z_log_msg2_static_create>
			reason = esf->basic.r0;
 80052ba:	6838      	ldr	r0, [r7, #0]
 80052bc:	e758      	b.n	8005170 <hard_fault+0x6c>
			reason = mem_manage_fault(esf, 1, recoverable);
 80052be:	4632      	mov	r2, r6
 80052c0:	2101      	movs	r1, #1
 80052c2:	4638      	mov	r0, r7
 80052c4:	f7ff fdbc 	bl	8004e40 <mem_manage_fault>
 80052c8:	e752      	b.n	8005170 <hard_fault+0x6c>
			reason = bus_fault(esf, 1, recoverable);
 80052ca:	4632      	mov	r2, r6
 80052cc:	2101      	movs	r1, #1
 80052ce:	4638      	mov	r0, r7
 80052d0:	f7ff fae8 	bl	80048a4 <bus_fault>
 80052d4:	e74c      	b.n	8005170 <hard_fault+0x6c>
			reason = usage_fault(esf);
 80052d6:	4638      	mov	r0, r7
 80052d8:	f7ff fc52 	bl	8004b80 <usage_fault>
 80052dc:	e748      	b.n	8005170 <hard_fault+0x6c>
 80052de:	bf00      	nop
 80052e0:	080129f0 	.word	0x080129f0
 80052e4:	0801201c 	.word	0x0801201c
 80052e8:	e000ed00 	.word	0xe000ed00
 80052ec:	08012a08 	.word	0x08012a08
 80052f0:	08012a2c 	.word	0x08012a2c
 80052f4:	08012a3c 	.word	0x08012a3c
 80052f8:	08012a5c 	.word	0x08012a5c

080052fc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	b098      	sub	sp, #96	; 0x60
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8005300:	4b38      	ldr	r3, [pc, #224]	; (80053e4 <z_arm_fault+0xe8>)
 8005302:	685d      	ldr	r5, [r3, #4]
 8005304:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8005308:	2300      	movs	r3, #0
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8005312:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8005316:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800531a:	d13c      	bne.n	8005396 <z_arm_fault+0x9a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800531c:	f002 030c 	and.w	r3, r2, #12
 8005320:	2b08      	cmp	r3, #8
 8005322:	d010      	beq.n	8005346 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8005324:	f012 0f08 	tst.w	r2, #8
 8005328:	d032      	beq.n	8005390 <z_arm_fault+0x94>
			ptr_esf =  (z_arch_esf_t *)psp;
 800532a:	460c      	mov	r4, r1
	*nested_exc = false;
 800532c:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 800532e:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8005332:	4629      	mov	r1, r5
 8005334:	4620      	mov	r0, r4
 8005336:	f00a f8ab 	bl	800f490 <fault_handle>
 800533a:	4605      	mov	r5, r0
	if (recoverable) {
 800533c:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8005340:	b363      	cbz	r3, 800539c <z_arm_fault+0xa0>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 8005342:	b018      	add	sp, #96	; 0x60
 8005344:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8005346:	2301      	movs	r3, #1
 8005348:	f8ad 3004 	strh.w	r3, [sp, #4]
 800534c:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <z_arm_fault+0xec>)
 800534e:	9216      	str	r2, [sp, #88]	; 0x58
 8005350:	2400      	movs	r4, #0
 8005352:	9400      	str	r4, [sp, #0]
 8005354:	2202      	movs	r2, #2
 8005356:	f88d 2000 	strb.w	r2, [sp]
 800535a:	9a00      	ldr	r2, [sp, #0]
 800535c:	9215      	str	r2, [sp, #84]	; 0x54
 800535e:	4621      	mov	r1, r4
 8005360:	f364 0100 	bfi	r1, r4, #0, #1
 8005364:	f364 0141 	bfi	r1, r4, #1, #1
 8005368:	f364 0182 	bfi	r1, r4, #2, #1
 800536c:	f364 01c5 	bfi	r1, r4, #3, #3
 8005370:	f363 1188 	bfi	r1, r3, #6, #3
 8005374:	2308      	movs	r3, #8
 8005376:	f363 2152 	bfi	r1, r3, #9, #10
 800537a:	f364 41de 	bfi	r1, r4, #19, #12
 800537e:	f364 71df 	bfi	r1, r4, #31, #1
 8005382:	4623      	mov	r3, r4
 8005384:	aa15      	add	r2, sp, #84	; 0x54
 8005386:	4819      	ldr	r0, [pc, #100]	; (80053ec <z_arm_fault+0xf0>)
 8005388:	f009 ffe8 	bl	800f35c <z_impl_z_log_msg2_static_create>
	*nested_exc = false;
 800538c:	4626      	mov	r6, r4
		return NULL;
 800538e:	e7ce      	b.n	800532e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8005390:	4604      	mov	r4, r0
			*nested_exc = true;
 8005392:	2601      	movs	r6, #1
 8005394:	e7cb      	b.n	800532e <z_arm_fault+0x32>
	*nested_exc = false;
 8005396:	2600      	movs	r6, #0
		return NULL;
 8005398:	4634      	mov	r4, r6
 800539a:	e7c8      	b.n	800532e <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800539c:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 80053a0:	6820      	ldr	r0, [r4, #0]
 80053a2:	6861      	ldr	r1, [r4, #4]
 80053a4:	68a2      	ldr	r2, [r4, #8]
 80053a6:	68e3      	ldr	r3, [r4, #12]
 80053a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80053ac:	6920      	ldr	r0, [r4, #16]
 80053ae:	6961      	ldr	r1, [r4, #20]
 80053b0:	69a2      	ldr	r2, [r4, #24]
 80053b2:	69e3      	ldr	r3, [r4, #28]
 80053b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
 80053b8:	b146      	cbz	r6, 80053cc <z_arm_fault+0xd0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80053ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053be:	b95a      	cbnz	r2, 80053d8 <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80053c0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80053c4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 80053c8:	9310      	str	r3, [sp, #64]	; 0x40
 80053ca:	e005      	b.n	80053d8 <z_arm_fault+0xdc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80053cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053ce:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	9310      	str	r3, [sp, #64]	; 0x40
	z_arm_fatal_error(reason, &esf_copy);
 80053d8:	a909      	add	r1, sp, #36	; 0x24
 80053da:	4628      	mov	r0, r5
 80053dc:	f00a f82b 	bl	800f436 <z_arm_fatal_error>
 80053e0:	e7af      	b.n	8005342 <z_arm_fault+0x46>
 80053e2:	bf00      	nop
 80053e4:	e000ed00 	.word	0xe000ed00
 80053e8:	08012a78 	.word	0x08012a78
 80053ec:	0801201c 	.word	0x0801201c

080053f0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80053f0:	4a02      	ldr	r2, [pc, #8]	; (80053fc <z_arm_fault_init+0xc>)
 80053f2:	6953      	ldr	r3, [r2, #20]
 80053f4:	f043 0310 	orr.w	r3, r3, #16
 80053f8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80053fa:	4770      	bx	lr
 80053fc:	e000ed00 	.word	0xe000ed00

08005400 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8005400:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8005404:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8005408:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800540a:	4672      	mov	r2, lr
	bl z_arm_fault
 800540c:	f7ff ff76 	bl	80052fc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8005410:	bd01      	pop	{r0, pc}
 8005412:	bf00      	nop

08005414 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8005414:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8005416:	e006      	b.n	8005426 <z_arm_interrupt_init+0x12>
 8005418:	f002 010f 	and.w	r1, r2, #15
 800541c:	4b09      	ldr	r3, [pc, #36]	; (8005444 <z_arm_interrupt_init+0x30>)
 800541e:	440b      	add	r3, r1
 8005420:	2110      	movs	r1, #16
 8005422:	7619      	strb	r1, [r3, #24]
 8005424:	3201      	adds	r2, #1
 8005426:	2a54      	cmp	r2, #84	; 0x54
 8005428:	dc0a      	bgt.n	8005440 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 800542a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 800542c:	2b00      	cmp	r3, #0
 800542e:	dbf3      	blt.n	8005418 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005430:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8005434:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8005438:	2110      	movs	r1, #16
 800543a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 800543e:	e7f1      	b.n	8005424 <z_arm_interrupt_init+0x10>
	}
}
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	e000ecfc 	.word	0xe000ecfc

08005448 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8005448:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800544a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800544e:	4808      	ldr	r0, [pc, #32]	; (8005470 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8005450:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8005454:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8005456:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800545a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800545e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8005460:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8005462:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8005466:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800546a:	f7ff f907 	bl	800467c <z_arm_prep_c>
 800546e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8005470:	20002d60 	.word	0x20002d60

08005474 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8005474:	b508      	push	{r3, lr}
	if (_current == thread) {
 8005476:	4b08      	ldr	r3, [pc, #32]	; (8005498 <z_impl_k_thread_abort+0x24>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	4283      	cmp	r3, r0
 800547c:	d002      	beq.n	8005484 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 800547e:	f007 f8ed 	bl	800c65c <z_thread_abort>
}
 8005482:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005484:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0f8      	beq.n	800547e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800548c:	4a03      	ldr	r2, [pc, #12]	; (800549c <z_impl_k_thread_abort+0x28>)
 800548e:	6853      	ldr	r3, [r2, #4]
 8005490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005494:	6053      	str	r3, [r2, #4]
 8005496:	e7f2      	b.n	800547e <z_impl_k_thread_abort+0xa>
 8005498:	20001430 	.word	0x20001430
 800549c:	e000ed00 	.word	0xe000ed00

080054a0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 80054a0:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80054a2:	4b03      	ldr	r3, [pc, #12]	; (80054b0 <z_arm_configure_static_mpu_regions+0x10>)
 80054a4:	4a03      	ldr	r2, [pc, #12]	; (80054b4 <z_arm_configure_static_mpu_regions+0x14>)
 80054a6:	2101      	movs	r1, #1
 80054a8:	4803      	ldr	r0, [pc, #12]	; (80054b8 <z_arm_configure_static_mpu_regions+0x18>)
 80054aa:	f00a f846 	bl	800f53a <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 80054ae:	bd08      	pop	{r3, pc}
 80054b0:	20028000 	.word	0x20028000
 80054b4:	20000000 	.word	0x20000000
 80054b8:	08012aa8 	.word	0x08012aa8

080054bc <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 80054bc:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80054be:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80054c0:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 80054c2:	4805      	ldr	r0, [pc, #20]	; (80054d8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 80054c4:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 80054c6:	2320      	movs	r3, #32
 80054c8:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80054ca:	4b04      	ldr	r3, [pc, #16]	; (80054dc <z_arm_configure_dynamic_mpu_regions+0x20>)
 80054cc:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80054ce:	2101      	movs	r1, #1
 80054d0:	f00a f837 	bl	800f542 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 80054d4:	bd08      	pop	{r3, pc}
 80054d6:	bf00      	nop
 80054d8:	20000ee4 	.word	0x20000ee4
 80054dc:	150b0000 	.word	0x150b0000

080054e0 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 80054e0:	4a08      	ldr	r2, [pc, #32]	; (8005504 <region_init+0x24>)
 80054e2:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80054e6:	680b      	ldr	r3, [r1, #0]
 80054e8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80054ec:	4303      	orrs	r3, r0
 80054ee:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80054f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80054f6:	688b      	ldr	r3, [r1, #8]
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	e000ed00 	.word	0xe000ed00

08005508 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
 8005508:	b510      	push	{r4, lr}
 800550a:	b090      	sub	sp, #64	; 0x40
 800550c:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 800550e:	2807      	cmp	r0, #7
 8005510:	d804      	bhi.n	800551c <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 8005512:	f7ff ffe5 	bl	80054e0 <region_init>

	return index;
 8005516:	4620      	mov	r0, r4
}
 8005518:	b010      	add	sp, #64	; 0x40
 800551a:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 800551c:	2201      	movs	r2, #1
 800551e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005522:	4b11      	ldr	r3, [pc, #68]	; (8005568 <region_allocate_and_init+0x60>)
 8005524:	930e      	str	r3, [sp, #56]	; 0x38
 8005526:	900f      	str	r0, [sp, #60]	; 0x3c
 8005528:	2300      	movs	r3, #0
 800552a:	9301      	str	r3, [sp, #4]
 800552c:	2103      	movs	r1, #3
 800552e:	f88d 1004 	strb.w	r1, [sp, #4]
 8005532:	9901      	ldr	r1, [sp, #4]
 8005534:	910d      	str	r1, [sp, #52]	; 0x34
 8005536:	4619      	mov	r1, r3
 8005538:	f363 0100 	bfi	r1, r3, #0, #1
 800553c:	f363 0141 	bfi	r1, r3, #1, #1
 8005540:	f363 0182 	bfi	r1, r3, #2, #1
 8005544:	f363 01c5 	bfi	r1, r3, #3, #3
 8005548:	f362 1188 	bfi	r1, r2, #6, #3
 800554c:	220c      	movs	r2, #12
 800554e:	f362 2152 	bfi	r1, r2, #9, #10
 8005552:	f363 41de 	bfi	r1, r3, #19, #12
 8005556:	f363 71df 	bfi	r1, r3, #31, #1
 800555a:	aa0d      	add	r2, sp, #52	; 0x34
 800555c:	4803      	ldr	r0, [pc, #12]	; (800556c <region_allocate_and_init+0x64>)
 800555e:	f009 fefd 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005562:	f06f 0015 	mvn.w	r0, #21
 8005566:	e7d7      	b.n	8005518 <region_allocate_and_init+0x10>
 8005568:	08012ab4 	.word	0x08012ab4
 800556c:	08012014 	.word	0x08012014

08005570 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8005570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005574:	b091      	sub	sp, #68	; 0x44
 8005576:	4680      	mov	r8, r0
 8005578:	460f      	mov	r7, r1
 800557a:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
 800557c:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
 800557e:	2500      	movs	r5, #0
 8005580:	e009      	b.n	8005596 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8005582:	4621      	mov	r1, r4
 8005584:	b2f0      	uxtb	r0, r6
 8005586:	f009 ffb9 	bl	800f4fc <mpu_configure_region>
 800558a:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
 800558c:	f110 0f16 	cmn.w	r0, #22
 8005590:	d037      	beq.n	8005602 <mpu_configure_regions+0x92>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 8005592:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 8005594:	3501      	adds	r5, #1
 8005596:	42bd      	cmp	r5, r7
 8005598:	da33      	bge.n	8005602 <mpu_configure_regions+0x92>
		if (regions[i].size == 0U) {
 800559a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800559e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 80055a2:	6862      	ldr	r2, [r4, #4]
 80055a4:	2a00      	cmp	r2, #0
 80055a6:	d0f5      	beq.n	8005594 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
 80055a8:	f1b9 0f00 	cmp.w	r9, #0
 80055ac:	d0e9      	beq.n	8005582 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
 80055ae:	4620      	mov	r0, r4
 80055b0:	f009 ff93 	bl	800f4da <mpu_partition_is_valid>
		if (do_sanity_check &&
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d1e4      	bne.n	8005582 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
 80055b8:	2201      	movs	r2, #1
 80055ba:	f8ad 2008 	strh.w	r2, [sp, #8]
 80055be:	4b13      	ldr	r3, [pc, #76]	; (800560c <mpu_configure_regions+0x9c>)
 80055c0:	930e      	str	r3, [sp, #56]	; 0x38
 80055c2:	950f      	str	r5, [sp, #60]	; 0x3c
 80055c4:	2300      	movs	r3, #0
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	2103      	movs	r1, #3
 80055ca:	f88d 1004 	strb.w	r1, [sp, #4]
 80055ce:	9901      	ldr	r1, [sp, #4]
 80055d0:	910d      	str	r1, [sp, #52]	; 0x34
 80055d2:	4619      	mov	r1, r3
 80055d4:	f363 0100 	bfi	r1, r3, #0, #1
 80055d8:	f363 0141 	bfi	r1, r3, #1, #1
 80055dc:	f363 0182 	bfi	r1, r3, #2, #1
 80055e0:	f363 01c5 	bfi	r1, r3, #3, #3
 80055e4:	f362 1188 	bfi	r1, r2, #6, #3
 80055e8:	220c      	movs	r2, #12
 80055ea:	f362 2152 	bfi	r1, r2, #9, #10
 80055ee:	f363 41de 	bfi	r1, r3, #19, #12
 80055f2:	f363 71df 	bfi	r1, r3, #31, #1
 80055f6:	aa0d      	add	r2, sp, #52	; 0x34
 80055f8:	4805      	ldr	r0, [pc, #20]	; (8005610 <mpu_configure_regions+0xa0>)
 80055fa:	f009 feaf 	bl	800f35c <z_impl_z_log_msg2_static_create>
			return -EINVAL;
 80055fe:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
 8005602:	4630      	mov	r0, r6
 8005604:	b011      	add	sp, #68	; 0x44
 8005606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800560a:	bf00      	nop
 800560c:	08012adc 	.word	0x08012adc
 8005610:	08012014 	.word	0x08012014

08005614 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 8005614:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 8005616:	4c03      	ldr	r4, [pc, #12]	; (8005624 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8005618:	2301      	movs	r3, #1
 800561a:	7822      	ldrb	r2, [r4, #0]
 800561c:	f7ff ffa8 	bl	8005570 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8005620:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 8005622:	bd10      	pop	{r4, pc}
 8005624:	2000148f 	.word	0x2000148f

08005628 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8005628:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800562a:	2300      	movs	r3, #0
 800562c:	4a09      	ldr	r2, [pc, #36]	; (8005654 <mpu_configure_dynamic_mpu_regions+0x2c>)
 800562e:	7812      	ldrb	r2, [r2, #0]
 8005630:	f7ff ff9e 	bl	8005570 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8005634:	f110 0f16 	cmn.w	r0, #22
 8005638:	d00a      	beq.n	8005650 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800563a:	4603      	mov	r3, r0
 800563c:	e006      	b.n	800564c <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800563e:	4a06      	ldr	r2, [pc, #24]	; (8005658 <mpu_configure_dynamic_mpu_regions+0x30>)
 8005640:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8005644:	2100      	movs	r1, #0
 8005646:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 800564a:	3301      	adds	r3, #1
 800564c:	2b07      	cmp	r3, #7
 800564e:	ddf6      	ble.n	800563e <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 8005650:	bd08      	pop	{r3, pc}
 8005652:	bf00      	nop
 8005654:	2000148f 	.word	0x2000148f
 8005658:	e000ed00 	.word	0xe000ed00

0800565c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <arm_core_mpu_enable+0x14>)
 800565e:	2205      	movs	r2, #5
 8005660:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8005664:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005668:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	e000ed00 	.word	0xe000ed00

08005674 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005674:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8005678:	4b02      	ldr	r3, [pc, #8]	; (8005684 <arm_core_mpu_disable+0x10>)
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	e000ed00 	.word	0xe000ed00

08005688 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 8005688:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800568a:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <z_arm_mpu_init+0x3c>)
 800568c:	681d      	ldr	r5, [r3, #0]
 800568e:	2d08      	cmp	r5, #8
 8005690:	d815      	bhi.n	80056be <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8005692:	f7ff ffef 	bl	8005674 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8005696:	2400      	movs	r4, #0
 8005698:	e009      	b.n	80056ae <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 800569a:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <z_arm_mpu_init+0x3c>)
 800569c:	6859      	ldr	r1, [r3, #4]
 800569e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80056a2:	0093      	lsls	r3, r2, #2
 80056a4:	4419      	add	r1, r3
 80056a6:	4620      	mov	r0, r4
 80056a8:	f7ff ff1a 	bl	80054e0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80056ac:	3401      	adds	r4, #1
 80056ae:	42a5      	cmp	r5, r4
 80056b0:	d8f3      	bhi.n	800569a <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <z_arm_mpu_init+0x40>)
 80056b4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 80056b6:	f7ff ffd1 	bl	800565c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80056ba:	2000      	movs	r0, #0
}
 80056bc:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 80056be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056c2:	e7fb      	b.n	80056bc <z_arm_mpu_init+0x34>
 80056c4:	08012b38 	.word	0x08012b38
 80056c8:	2000148f 	.word	0x2000148f

080056cc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 80056cc:	4b01      	ldr	r3, [pc, #4]	; (80056d4 <__stdout_hook_install+0x8>)
 80056ce:	6018      	str	r0, [r3, #0]
}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	200002bc 	.word	0x200002bc

080056d8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	4606      	mov	r6, r0
 80056dc:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 80056de:	2400      	movs	r4, #0
 80056e0:	e000      	b.n	80056e4 <z_impl_zephyr_read_stdin+0xc>
 80056e2:	3401      	adds	r4, #1
 80056e4:	42ac      	cmp	r4, r5
 80056e6:	da08      	bge.n	80056fa <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <z_impl_zephyr_read_stdin+0x28>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4798      	blx	r3
 80056ee:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80056f0:	280a      	cmp	r0, #10
 80056f2:	d001      	beq.n	80056f8 <z_impl_zephyr_read_stdin+0x20>
 80056f4:	280d      	cmp	r0, #13
 80056f6:	d1f4      	bne.n	80056e2 <z_impl_zephyr_read_stdin+0xa>
			i++;
 80056f8:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 80056fa:	4620      	mov	r0, r4
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
 80056fe:	bf00      	nop
 8005700:	200002b8 	.word	0x200002b8

08005704 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	4605      	mov	r5, r0
 8005708:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 800570a:	2400      	movs	r4, #0
 800570c:	e004      	b.n	8005718 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 800570e:	4b09      	ldr	r3, [pc, #36]	; (8005734 <z_impl_zephyr_write_stdout+0x30>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	7830      	ldrb	r0, [r6, #0]
 8005714:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8005716:	3401      	adds	r4, #1
 8005718:	42bc      	cmp	r4, r7
 800571a:	da08      	bge.n	800572e <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 800571c:	192e      	adds	r6, r5, r4
 800571e:	5d2b      	ldrb	r3, [r5, r4]
 8005720:	2b0a      	cmp	r3, #10
 8005722:	d1f4      	bne.n	800570e <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 8005724:	4b03      	ldr	r3, [pc, #12]	; (8005734 <z_impl_zephyr_write_stdout+0x30>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	200d      	movs	r0, #13
 800572a:	4798      	blx	r3
 800572c:	e7ef      	b.n	800570e <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 800572e:	4638      	mov	r0, r7
 8005730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005732:	bf00      	nop
 8005734:	200002bc 	.word	0x200002bc

08005738 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8005738:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 800573a:	2205      	movs	r2, #5
 800573c:	4902      	ldr	r1, [pc, #8]	; (8005748 <_exit+0x10>)
 800573e:	2001      	movs	r0, #1
 8005740:	f009 ff10 	bl	800f564 <_write>
	while (1) {
 8005744:	e7fe      	b.n	8005744 <_exit+0xc>
 8005746:	bf00      	nop
 8005748:	08012b00 	.word	0x08012b00

0800574c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 800574c:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 800574e:	4b08      	ldr	r3, [pc, #32]	; (8005770 <_sbrk+0x24>)
 8005750:	6819      	ldr	r1, [r3, #0]
 8005752:	4b08      	ldr	r3, [pc, #32]	; (8005774 <_sbrk+0x28>)
 8005754:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8005756:	440a      	add	r2, r1
 8005758:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 800575c:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
 8005760:	429a      	cmp	r2, r3
 8005762:	d202      	bcs.n	800576a <_sbrk+0x1e>
		heap_sz += count;
 8005764:	4b02      	ldr	r3, [pc, #8]	; (8005770 <_sbrk+0x24>)
 8005766:	601a      	str	r2, [r3, #0]
		ret = ptr;
 8005768:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 800576a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 800576e:	4770      	bx	lr
 8005770:	20000ef0 	.word	0x20000ef0
 8005774:	200039a0 	.word	0x200039a0

08005778 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
 8005778:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
 800577a:	221d      	movs	r2, #29
 800577c:	4904      	ldr	r1, [pc, #16]	; (8005790 <__chk_fail+0x18>)
 800577e:	2002      	movs	r0, #2
 8005780:	f009 fef0 	bl	800f564 <_write>
	k_oops();
 8005784:	4040      	eors	r0, r0
 8005786:	f380 8811 	msr	BASEPRI, r0
 800578a:	f04f 0003 	mov.w	r0, #3
 800578e:	df02      	svc	2
	CODE_UNREACHABLE;
 8005790:	08012b08 	.word	0x08012b08

08005794 <rand_get>:
	return random_num;
}
#endif /* CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR */

static int rand_get(uint8_t *dst, size_t outlen, bool csrand)
{
 8005794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005796:	b083      	sub	sp, #12
 8005798:	4605      	mov	r5, r0
 800579a:	460c      	mov	r4, r1
 800579c:	4616      	mov	r6, r2
	const struct device *dev = entropy_driver;
 800579e:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <rand_get+0x5c>)
 80057a0:	6818      	ldr	r0, [r3, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
 80057a2:	b148      	cbz	r0, 80057b8 <rand_get+0x24>
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
	}

	ret = entropy_get_entropy(dev, dst, outlen);
 80057a4:	b2a2      	uxth	r2, r4

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
 80057a6:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4629      	mov	r1, r5
 80057ac:	4798      	blx	r3
 80057ae:	4603      	mov	r3, r0

	if (unlikely(ret < 0)) {
 80057b0:	0fc0      	lsrs	r0, r0, #31
 80057b2:	d107      	bne.n	80057c4 <rand_get+0x30>
			len += copylen;
		}
	}

	return 0;
}
 80057b4:	b003      	add	sp, #12
 80057b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057b8:	480e      	ldr	r0, [pc, #56]	; (80057f4 <rand_get+0x60>)
 80057ba:	f005 fe75 	bl	800b4a8 <z_impl_device_get_binding>
		entropy_driver = dev;
 80057be:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <rand_get+0x5c>)
 80057c0:	6018      	str	r0, [r3, #0]
 80057c2:	e7ef      	b.n	80057a4 <rand_get+0x10>
		if (csrand) {
 80057c4:	b156      	cbz	r6, 80057dc <rand_get+0x48>
			return ret;
 80057c6:	4618      	mov	r0, r3
 80057c8:	e7f4      	b.n	80057b4 <rand_get+0x20>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 80057ca:	f005 fcb7 	bl	800b13c <sys_clock_cycle_get_32>
			random_num = k_cycle_get_32();
 80057ce:	9001      	str	r0, [sp, #4]
 80057d0:	463a      	mov	r2, r7
 80057d2:	a901      	add	r1, sp, #4
 80057d4:	19a8      	adds	r0, r5, r6
 80057d6:	f00b fd62 	bl	801129e <memcpy>
			len += copylen;
 80057da:	443e      	add	r6, r7
		while (len < outlen) {
 80057dc:	42a6      	cmp	r6, r4
 80057de:	d204      	bcs.n	80057ea <rand_get+0x56>
			size_t copylen = outlen - len;
 80057e0:	1ba7      	subs	r7, r4, r6
			if (copylen > blocksize) {
 80057e2:	2f04      	cmp	r7, #4
 80057e4:	d9f1      	bls.n	80057ca <rand_get+0x36>
				copylen = blocksize;
 80057e6:	2704      	movs	r7, #4
 80057e8:	e7ef      	b.n	80057ca <rand_get+0x36>
	return 0;
 80057ea:	2000      	movs	r0, #0
 80057ec:	e7e2      	b.n	80057b4 <rand_get+0x20>
 80057ee:	bf00      	nop
 80057f0:	20000ef4 	.word	0x20000ef4
 80057f4:	08012b58 	.word	0x08012b58

080057f8 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	4604      	mov	r4, r0
 80057fc:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 80057fe:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8005800:	e002      	b.n	8005808 <__stm32_exti_isr+0x10>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005802:	2201      	movs	r2, #1
 8005804:	e00c      	b.n	8005820 <__stm32_exti_isr+0x28>
 8005806:	3401      	adds	r4, #1
 8005808:	42ac      	cmp	r4, r5
 800580a:	da17      	bge.n	800583c <__stm32_exti_isr+0x44>
	if (line < 32) {
 800580c:	2c1f      	cmp	r4, #31
 800580e:	dcfa      	bgt.n	8005806 <__stm32_exti_isr+0xe>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8005810:	2301      	movs	r3, #1
 8005812:	40a3      	lsls	r3, r4
 8005814:	4a0a      	ldr	r2, [pc, #40]	; (8005840 <__stm32_exti_isr+0x48>)
 8005816:	6952      	ldr	r2, [r2, #20]
 8005818:	ea33 0202 	bics.w	r2, r3, r2
 800581c:	d0f1      	beq.n	8005802 <__stm32_exti_isr+0xa>
 800581e:	2200      	movs	r2, #0
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8005820:	2a00      	cmp	r2, #0
 8005822:	d0f0      	beq.n	8005806 <__stm32_exti_isr+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005824:	4a06      	ldr	r2, [pc, #24]	; (8005840 <__stm32_exti_isr+0x48>)
 8005826:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8005828:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0ea      	beq.n	8005806 <__stm32_exti_isr+0xe>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8005830:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8005834:	6851      	ldr	r1, [r2, #4]
 8005836:	4620      	mov	r0, r4
 8005838:	4798      	blx	r3
 800583a:	e7e4      	b.n	8005806 <__stm32_exti_isr+0xe>
		}
	}
}
 800583c:	bd70      	pop	{r4, r5, r6, pc}
 800583e:	bf00      	nop
 8005840:	40010400 	.word	0x40010400

08005844 <stm32_exti_enable>:
{
 8005844:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8005846:	2301      	movs	r3, #1
 8005848:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 800584a:	4a04      	ldr	r2, [pc, #16]	; (800585c <stm32_exti_enable+0x18>)
 800584c:	6811      	ldr	r1, [r2, #0]
 800584e:	430b      	orrs	r3, r1
 8005850:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8005852:	4b03      	ldr	r3, [pc, #12]	; (8005860 <stm32_exti_enable+0x1c>)
 8005854:	5618      	ldrsb	r0, [r3, r0]
 8005856:	f7fe fec7 	bl	80045e8 <arch_irq_enable>
}
 800585a:	bd08      	pop	{r3, pc}
 800585c:	40010400 	.word	0x40010400
 8005860:	08012b7c 	.word	0x08012b7c

08005864 <stm32_exti_disable>:
	if (line < 32) {
 8005864:	281f      	cmp	r0, #31
 8005866:	dc06      	bgt.n	8005876 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8005868:	2301      	movs	r3, #1
 800586a:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800586c:	4a02      	ldr	r2, [pc, #8]	; (8005878 <stm32_exti_disable+0x14>)
 800586e:	6810      	ldr	r0, [r2, #0]
 8005870:	ea20 0003 	bic.w	r0, r0, r3
 8005874:	6010      	str	r0, [r2, #0]
}
 8005876:	4770      	bx	lr
 8005878:	40010400 	.word	0x40010400

0800587c <stm32_exti_trigger>:
	switch (trigger) {
 800587c:	2903      	cmp	r1, #3
 800587e:	d832      	bhi.n	80058e6 <stm32_exti_trigger+0x6a>
 8005880:	e8df f001 	tbb	[pc, r1]
 8005884:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8005888:	2301      	movs	r3, #1
 800588a:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800588e:	4b16      	ldr	r3, [pc, #88]	; (80058e8 <stm32_exti_trigger+0x6c>)
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	ea22 0200 	bic.w	r2, r2, r0
 8005896:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	ea22 0000 	bic.w	r0, r2, r0
 800589e:	60d8      	str	r0, [r3, #12]
}
 80058a0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80058a2:	2301      	movs	r3, #1
 80058a4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80058a8:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <stm32_exti_trigger+0x6c>)
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	4302      	orrs	r2, r0
 80058ae:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	ea22 0000 	bic.w	r0, r2, r0
 80058b6:	60d8      	str	r0, [r3, #12]
}
 80058b8:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80058ba:	2301      	movs	r3, #1
 80058bc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80058c0:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <stm32_exti_trigger+0x6c>)
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	4302      	orrs	r2, r0
 80058c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	ea22 0000 	bic.w	r0, r2, r0
 80058ce:	6098      	str	r0, [r3, #8]
}
 80058d0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80058d2:	2301      	movs	r3, #1
 80058d4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80058d8:	4b03      	ldr	r3, [pc, #12]	; (80058e8 <stm32_exti_trigger+0x6c>)
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	4302      	orrs	r2, r0
 80058de:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	4310      	orrs	r0, r2
 80058e4:	60d8      	str	r0, [r3, #12]
}
 80058e6:	4770      	bx	lr
 80058e8:	40010400 	.word	0x40010400

080058ec <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80058ec:	4b07      	ldr	r3, [pc, #28]	; (800590c <stm32_exti_set_callback+0x20>)
 80058ee:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80058f2:	b93b      	cbnz	r3, 8005904 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <stm32_exti_set_callback+0x20>)
 80058f6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 80058fa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80058fe:	6042      	str	r2, [r0, #4]

	return 0;
 8005900:	2000      	movs	r0, #0
 8005902:	4770      	bx	lr
		return -EBUSY;
 8005904:	f06f 000f 	mvn.w	r0, #15
}
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	20000ef8 	.word	0x20000ef8

08005910 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8005910:	4b03      	ldr	r3, [pc, #12]	; (8005920 <stm32_exti_unset_callback+0x10>)
 8005912:	2200      	movs	r2, #0
 8005914:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8005918:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800591c:	605a      	str	r2, [r3, #4]
}
 800591e:	4770      	bx	lr
 8005920:	20000ef8 	.word	0x20000ef8

08005924 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 8005924:	b086      	sub	sp, #24
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8005926:	680b      	ldr	r3, [r1, #0]
 8005928:	2b06      	cmp	r3, #6
 800592a:	d848      	bhi.n	80059be <stm32_clock_control_on+0x9a>
 800592c:	e8df f003 	tbb	[pc, r3]
 8005930:	3c261004 	.word	0x3c261004
 8005934:	4731      	.short	0x4731
 8005936:	1b          	.byte	0x1b
 8005937:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8005938:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800593a:	4a22      	ldr	r2, [pc, #136]	; (80059c4 <stm32_clock_control_on+0xa0>)
 800593c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800593e:	4319      	orrs	r1, r3
 8005940:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005942:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005944:	4013      	ands	r3, r2
 8005946:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8005948:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800594a:	2000      	movs	r0, #0
}
 800594c:	b006      	add	sp, #24
 800594e:	4770      	bx	lr
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8005950:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005952:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <stm32_clock_control_on+0xa0>)
 8005954:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8005956:	4319      	orrs	r1, r3
 8005958:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800595a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800595c:	4013      	ands	r3, r2
 800595e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005960:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8005962:	2000      	movs	r0, #0
}
 8005964:	e7f2      	b.n	800594c <stm32_clock_control_on+0x28>
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8005966:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005968:	4a16      	ldr	r2, [pc, #88]	; (80059c4 <stm32_clock_control_on+0xa0>)
 800596a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800596c:	4319      	orrs	r1, r3
 800596e:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005970:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005972:	4013      	ands	r3, r2
 8005974:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8005976:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8005978:	2000      	movs	r0, #0
}
 800597a:	e7e7      	b.n	800594c <stm32_clock_control_on+0x28>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 800597c:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800597e:	4a11      	ldr	r2, [pc, #68]	; (80059c4 <stm32_clock_control_on+0xa0>)
 8005980:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8005982:	4319      	orrs	r1, r3
 8005984:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005986:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005988:	4013      	ands	r3, r2
 800598a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800598c:	9b03      	ldr	r3, [sp, #12]
	return 0;
 800598e:	2000      	movs	r0, #0
}
 8005990:	e7dc      	b.n	800594c <stm32_clock_control_on+0x28>
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8005992:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8005994:	4a0b      	ldr	r2, [pc, #44]	; (80059c4 <stm32_clock_control_on+0xa0>)
 8005996:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8005998:	4319      	orrs	r1, r3
 800599a:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800599c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800599e:	4013      	ands	r3, r2
 80059a0:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 80059a2:	9b04      	ldr	r3, [sp, #16]
	return 0;
 80059a4:	2000      	movs	r0, #0
}
 80059a6:	e7d1      	b.n	800594c <stm32_clock_control_on+0x28>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80059a8:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80059aa:	4a06      	ldr	r2, [pc, #24]	; (80059c4 <stm32_clock_control_on+0xa0>)
 80059ac:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80059ae:	4319      	orrs	r1, r3
 80059b0:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80059b2:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80059b4:	4013      	ands	r3, r2
 80059b6:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 80059b8:	9b05      	ldr	r3, [sp, #20]
	return 0;
 80059ba:	2000      	movs	r0, #0
}
 80059bc:	e7c6      	b.n	800594c <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 80059be:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80059c2:	e7c3      	b.n	800594c <stm32_clock_control_on+0x28>
 80059c4:	40021000 	.word	0x40021000

080059c8 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80059c8:	680b      	ldr	r3, [r1, #0]
 80059ca:	2b06      	cmp	r3, #6
 80059cc:	d835      	bhi.n	8005a3a <stm32_clock_control_off+0x72>
 80059ce:	e8df f003 	tbb	[pc, r3]
 80059d2:	0c04      	.short	0x0c04
 80059d4:	34242c1c 	.word	0x34242c1c
 80059d8:	14          	.byte	0x14
 80059d9:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 80059da:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80059dc:	4a18      	ldr	r2, [pc, #96]	; (8005a40 <stm32_clock_control_off+0x78>)
 80059de:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80059e0:	ea23 0301 	bic.w	r3, r3, r1
 80059e4:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80059e6:	2000      	movs	r0, #0
}
 80059e8:	4770      	bx	lr
		LL_AHB2_GRP1_DisableClock(pclken->enr);
 80059ea:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80059ec:	4a14      	ldr	r2, [pc, #80]	; (8005a40 <stm32_clock_control_off+0x78>)
 80059ee:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80059f0:	ea23 0301 	bic.w	r3, r3, r1
 80059f4:	64d3      	str	r3, [r2, #76]	; 0x4c
	return 0;
 80059f6:	2000      	movs	r0, #0
}
 80059f8:	4770      	bx	lr
		LL_AHB3_GRP1_DisableClock(pclken->enr);
 80059fa:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 80059fc:	4a10      	ldr	r2, [pc, #64]	; (8005a40 <stm32_clock_control_off+0x78>)
 80059fe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005a00:	ea23 0301 	bic.w	r3, r3, r1
 8005a04:	6513      	str	r3, [r2, #80]	; 0x50
	return 0;
 8005a06:	2000      	movs	r0, #0
}
 8005a08:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 8005a0a:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8005a0c:	4a0c      	ldr	r2, [pc, #48]	; (8005a40 <stm32_clock_control_off+0x78>)
 8005a0e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005a10:	ea23 0301 	bic.w	r3, r3, r1
 8005a14:	6593      	str	r3, [r2, #88]	; 0x58
	return 0;
 8005a16:	2000      	movs	r0, #0
}
 8005a18:	4770      	bx	lr
		LL_APB1_GRP2_DisableClock(pclken->enr);
 8005a1a:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8005a1c:	4a08      	ldr	r2, [pc, #32]	; (8005a40 <stm32_clock_control_off+0x78>)
 8005a1e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8005a20:	ea23 0301 	bic.w	r3, r3, r1
 8005a24:	65d3      	str	r3, [r2, #92]	; 0x5c
	return 0;
 8005a26:	2000      	movs	r0, #0
}
 8005a28:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 8005a2a:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8005a2c:	4a04      	ldr	r2, [pc, #16]	; (8005a40 <stm32_clock_control_off+0x78>)
 8005a2e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8005a30:	ea23 0301 	bic.w	r3, r3, r1
 8005a34:	6613      	str	r3, [r2, #96]	; 0x60
	return 0;
 8005a36:	2000      	movs	r0, #0
}
 8005a38:	4770      	bx	lr
	switch (pclken->bus) {
 8005a3a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8005a3e:	4770      	bx	lr
 8005a40:	40021000 	.word	0x40021000

08005a44 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	460c      	mov	r4, r1
 8005a48:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	; (8005a80 <stm32_clock_control_get_subsys_rate+0x3c>)
 8005a4c:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 8005a4e:	2101      	movs	r1, #1
 8005a50:	4630      	mov	r0, r6
 8005a52:	f009 fe1e 	bl	800f692 <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	2b06      	cmp	r3, #6
 8005a5a:	d80e      	bhi.n	8005a7a <stm32_clock_control_get_subsys_rate+0x36>
 8005a5c:	e8df f003 	tbb	[pc, r3]
 8005a60:	0a070404 	.word	0x0a070404
 8005a64:	0d07      	.short	0x0d07
 8005a66:	04          	.byte	0x04
 8005a67:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 8005a68:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8005a6a:	2000      	movs	r0, #0
}
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 8005a6e:	6028      	str	r0, [r5, #0]
	return 0;
 8005a70:	2000      	movs	r0, #0
		break;
 8005a72:	e7fb      	b.n	8005a6c <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 8005a74:	6028      	str	r0, [r5, #0]
	return 0;
 8005a76:	2000      	movs	r0, #0
		break;
 8005a78:	e7f8      	b.n	8005a6c <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 8005a7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005a7e:	e7f5      	b.n	8005a6c <stm32_clock_control_get_subsys_rate+0x28>
 8005a80:	200003c0 	.word	0x200003c0

08005a84 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005a84:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <stm32_clock_switch_to_hsi+0x44>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005a8c:	d109      	bne.n	8005aa2 <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005a8e:	4a0e      	ldr	r2, [pc, #56]	; (8005ac8 <stm32_clock_switch_to_hsi+0x44>)
 8005a90:	6813      	ldr	r3, [r2, #0]
 8005a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a96:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <stm32_clock_switch_to_hsi+0x44>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005aa0:	d0fa      	beq.n	8005a98 <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005aa2:	4a09      	ldr	r2, [pc, #36]	; (8005ac8 <stm32_clock_switch_to_hsi+0x44>)
 8005aa4:	6893      	ldr	r3, [r2, #8]
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005ab0:	6893      	ldr	r3, [r2, #8]
 8005ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ab6:	4318      	orrs	r0, r3
 8005ab8:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005aba:	4b03      	ldr	r3, [pc, #12]	; (8005ac8 <stm32_clock_switch_to_hsi+0x44>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d1f9      	bne.n	8005aba <stm32_clock_switch_to_hsi+0x36>
	}
}
 8005ac6:	4770      	bx	lr
 8005ac8:	40021000 	.word	0x40021000

08005acc <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8005acc:	b510      	push	{r4, lr}
 8005ace:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 8005ad0:	a803      	add	r0, sp, #12
 8005ad2:	f009 fdd9 	bl	800f688 <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8005ad6:	f000 f823 	bl	8005b20 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8005ada:	4668      	mov	r0, sp
 8005adc:	f009 fddc 	bl	800f698 <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	f7ff ffcf 	bl	8005a84 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005ae6:	4c0d      	ldr	r4, [pc, #52]	; (8005b1c <stm32_clock_control_init+0x50>)
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aee:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8005af0:	68e3      	ldr	r3, [r4, #12]
 8005af2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005af6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005afa:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8005afc:	a903      	add	r1, sp, #12
 8005afe:	4668      	mov	r0, sp
 8005b00:	f005 fc6a 	bl	800b3d8 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b0a:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	f023 0301 	bic.w	r3, r3, #1
 8005b12:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8005b14:	2000      	movs	r0, #0
 8005b16:	b006      	add	sp, #24
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40021000 	.word	0x40021000

08005b20 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8005b20:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <config_enable_default_clocks+0x1c>)
 8005b24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b2a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b32:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005b34:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 8005b36:	b002      	add	sp, #8
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40021000 	.word	0x40021000

08005b40 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 8005b40:	b510      	push	{r4, lr}
 8005b42:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8005b44:	280a      	cmp	r0, #10
 8005b46:	d007      	beq.n	8005b58 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8005b48:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <console_out+0x28>)
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 8005b4e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	4798      	blx	r3

	return c;
}
 8005b54:	4620      	mov	r0, r4
 8005b56:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 8005b58:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <console_out+0x28>)
 8005b5a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8005b5c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	210d      	movs	r1, #13
 8005b62:	4798      	blx	r3
}
 8005b64:	e7f0      	b.n	8005b48 <console_out+0x8>
 8005b66:	bf00      	nop
 8005b68:	20000f78 	.word	0x20000f78

08005b6c <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
 8005b6c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
 8005b6e:	4c04      	ldr	r4, [pc, #16]	; (8005b80 <uart_console_hook_install+0x14>)
 8005b70:	4620      	mov	r0, r4
 8005b72:	f7ff fdab 	bl	80056cc <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
 8005b76:	4620      	mov	r0, r4
 8005b78:	f7fd fa64 	bl	8003044 <__printk_hook_install>
#endif
}
 8005b7c:	bd10      	pop	{r4, pc}
 8005b7e:	bf00      	nop
 8005b80:	08005b41 	.word	0x08005b41

08005b84 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8005b84:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8005b86:	4806      	ldr	r0, [pc, #24]	; (8005ba0 <uart_console_init+0x1c>)
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <uart_console_init+0x20>)
 8005b8a:	6018      	str	r0, [r3, #0]
 8005b8c:	f00a ff3a 	bl	8010a04 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 8005b90:	b118      	cbz	r0, 8005b9a <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
 8005b92:	f7ff ffeb 	bl	8005b6c <uart_console_hook_install>

	return 0;
 8005b96:	2000      	movs	r0, #0
}
 8005b98:	bd08      	pop	{r3, pc}
		return -ENODEV;
 8005b9a:	f06f 0012 	mvn.w	r0, #18
 8005b9e:	e7fb      	b.n	8005b98 <uart_console_init+0x14>
 8005ba0:	08011ce4 	.word	0x08011ce4
 8005ba4:	20000f78 	.word	0x20000f78

08005ba8 <dma_stm32_get_priority>:

#endif /* CONFIG_DMA_STM32_SHARED_IRQS */

static int dma_stm32_get_priority(uint8_t priority, uint32_t *ll_priority)
{
	switch (priority) {
 8005ba8:	2803      	cmp	r0, #3
 8005baa:	d815      	bhi.n	8005bd8 <dma_stm32_get_priority+0x30>
 8005bac:	e8df f000 	tbb	[pc, r0]
 8005bb0:	0f0a0502 	.word	0x0f0a0502
	case 0x0:
		*ll_priority = LL_DMA_PRIORITY_LOW;
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	6008      	str	r0, [r1, #0]
		break;
 8005bb8:	4770      	bx	lr
	case 0x1:
		*ll_priority = LL_DMA_PRIORITY_MEDIUM;
 8005bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bbe:	600b      	str	r3, [r1, #0]
	default:
		LOG_ERR("Priority error. %d", priority);
		return -EINVAL;
	}

	return 0;
 8005bc0:	2000      	movs	r0, #0
		break;
 8005bc2:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_HIGH;
 8005bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bc8:	600b      	str	r3, [r1, #0]
	return 0;
 8005bca:	2000      	movs	r0, #0
		break;
 8005bcc:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_VERYHIGH;
 8005bce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005bd2:	600b      	str	r3, [r1, #0]
	return 0;
 8005bd4:	2000      	movs	r0, #0
}
 8005bd6:	4770      	bx	lr
{
 8005bd8:	b500      	push	{lr}
 8005bda:	b091      	sub	sp, #68	; 0x44
		LOG_ERR("Priority error. %d", priority);
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005be2:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <dma_stm32_get_priority+0x84>)
 8005be4:	930e      	str	r3, [sp, #56]	; 0x38
 8005be6:	900f      	str	r0, [sp, #60]	; 0x3c
 8005be8:	2300      	movs	r3, #0
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	2103      	movs	r1, #3
 8005bee:	f88d 1004 	strb.w	r1, [sp, #4]
 8005bf2:	9901      	ldr	r1, [sp, #4]
 8005bf4:	910d      	str	r1, [sp, #52]	; 0x34
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	f363 0100 	bfi	r1, r3, #0, #1
 8005bfc:	f363 0141 	bfi	r1, r3, #1, #1
 8005c00:	f363 0182 	bfi	r1, r3, #2, #1
 8005c04:	f363 01c5 	bfi	r1, r3, #3, #3
 8005c08:	f362 1188 	bfi	r1, r2, #6, #3
 8005c0c:	220c      	movs	r2, #12
 8005c0e:	f362 2152 	bfi	r1, r2, #9, #10
 8005c12:	f363 41de 	bfi	r1, r3, #19, #12
 8005c16:	f363 71df 	bfi	r1, r3, #31, #1
 8005c1a:	aa0d      	add	r2, sp, #52	; 0x34
 8005c1c:	4804      	ldr	r0, [pc, #16]	; (8005c30 <dma_stm32_get_priority+0x88>)
 8005c1e:	f009 fb9d 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005c22:	f06f 0015 	mvn.w	r0, #21
}
 8005c26:	b011      	add	sp, #68	; 0x44
 8005c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c2c:	08012b9c 	.word	0x08012b9c
 8005c30:	08011ff4 	.word	0x08011ff4

08005c34 <dma_stm32_get_direction>:

static int dma_stm32_get_direction(enum dma_channel_direction direction,
				   uint32_t *ll_direction)
{
	switch (direction) {
 8005c34:	2801      	cmp	r0, #1
 8005c36:	d030      	beq.n	8005c9a <dma_stm32_get_direction+0x66>
 8005c38:	2802      	cmp	r0, #2
 8005c3a:	d032      	beq.n	8005ca2 <dma_stm32_get_direction+0x6e>
 8005c3c:	b348      	cbz	r0, 8005c92 <dma_stm32_get_direction+0x5e>
{
 8005c3e:	b500      	push	{lr}
 8005c40:	b091      	sub	sp, #68	; 0x44
		break;
	case PERIPHERAL_TO_MEMORY:
		*ll_direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
		break;
	default:
		LOG_ERR("Direction error. %d", direction);
 8005c42:	2201      	movs	r2, #1
 8005c44:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005c48:	4b17      	ldr	r3, [pc, #92]	; (8005ca8 <dma_stm32_get_direction+0x74>)
 8005c4a:	930e      	str	r3, [sp, #56]	; 0x38
 8005c4c:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	2103      	movs	r1, #3
 8005c54:	f88d 1004 	strb.w	r1, [sp, #4]
 8005c58:	9901      	ldr	r1, [sp, #4]
 8005c5a:	910d      	str	r1, [sp, #52]	; 0x34
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	f363 0100 	bfi	r1, r3, #0, #1
 8005c62:	f363 0141 	bfi	r1, r3, #1, #1
 8005c66:	f363 0182 	bfi	r1, r3, #2, #1
 8005c6a:	f363 01c5 	bfi	r1, r3, #3, #3
 8005c6e:	f362 1188 	bfi	r1, r2, #6, #3
 8005c72:	220c      	movs	r2, #12
 8005c74:	f362 2152 	bfi	r1, r2, #9, #10
 8005c78:	f363 41de 	bfi	r1, r3, #19, #12
 8005c7c:	f363 71df 	bfi	r1, r3, #31, #1
 8005c80:	aa0d      	add	r2, sp, #52	; 0x34
 8005c82:	480a      	ldr	r0, [pc, #40]	; (8005cac <dma_stm32_get_direction+0x78>)
 8005c84:	f009 fb6a 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005c88:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 8005c8c:	b011      	add	sp, #68	; 0x44
 8005c8e:	f85d fb04 	ldr.w	pc, [sp], #4
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_MEMORY;
 8005c92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c96:	600b      	str	r3, [r1, #0]
		break;
 8005c98:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8005c9a:	2310      	movs	r3, #16
 8005c9c:	600b      	str	r3, [r1, #0]
	return 0;
 8005c9e:	2000      	movs	r0, #0
		break;
 8005ca0:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	6008      	str	r0, [r1, #0]
}
 8005ca6:	4770      	bx	lr
 8005ca8:	08012bb0 	.word	0x08012bb0
 8005cac:	08011ff4 	.word	0x08011ff4

08005cb0 <dma_stm32_get_memory_increment>:

static int dma_stm32_get_memory_increment(enum dma_addr_adj increment,
					  uint32_t *ll_increment)
{
	switch (increment) {
 8005cb0:	2801      	cmp	r0, #1
 8005cb2:	d032      	beq.n	8005d1a <dma_stm32_get_memory_increment+0x6a>
 8005cb4:	2802      	cmp	r0, #2
 8005cb6:	d02d      	beq.n	8005d14 <dma_stm32_get_memory_increment+0x64>
 8005cb8:	b348      	cbz	r0, 8005d0e <dma_stm32_get_memory_increment+0x5e>
{
 8005cba:	b500      	push	{lr}
 8005cbc:	b091      	sub	sp, #68	; 0x44
		*ll_increment = LL_DMA_MEMORY_NOINCREMENT;
		break;
	case DMA_ADDR_ADJ_DECREMENT:
		return -ENOTSUP;
	default:
		LOG_ERR("Memory increment error. %d", increment);
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005cc4:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <dma_stm32_get_memory_increment+0x70>)
 8005cc6:	930e      	str	r3, [sp, #56]	; 0x38
 8005cc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	2103      	movs	r1, #3
 8005cd0:	f88d 1004 	strb.w	r1, [sp, #4]
 8005cd4:	9901      	ldr	r1, [sp, #4]
 8005cd6:	910d      	str	r1, [sp, #52]	; 0x34
 8005cd8:	4619      	mov	r1, r3
 8005cda:	f363 0100 	bfi	r1, r3, #0, #1
 8005cde:	f363 0141 	bfi	r1, r3, #1, #1
 8005ce2:	f363 0182 	bfi	r1, r3, #2, #1
 8005ce6:	f363 01c5 	bfi	r1, r3, #3, #3
 8005cea:	f362 1188 	bfi	r1, r2, #6, #3
 8005cee:	220c      	movs	r2, #12
 8005cf0:	f362 2152 	bfi	r1, r2, #9, #10
 8005cf4:	f363 41de 	bfi	r1, r3, #19, #12
 8005cf8:	f363 71df 	bfi	r1, r3, #31, #1
 8005cfc:	aa0d      	add	r2, sp, #52	; 0x34
 8005cfe:	4809      	ldr	r0, [pc, #36]	; (8005d24 <dma_stm32_get_memory_increment+0x74>)
 8005d00:	f009 fb2c 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005d04:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 8005d08:	b011      	add	sp, #68	; 0x44
 8005d0a:	f85d fb04 	ldr.w	pc, [sp], #4
		*ll_increment = LL_DMA_MEMORY_INCREMENT;
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	600b      	str	r3, [r1, #0]
		break;
 8005d12:	4770      	bx	lr
		*ll_increment = LL_DMA_MEMORY_NOINCREMENT;
 8005d14:	2000      	movs	r0, #0
 8005d16:	6008      	str	r0, [r1, #0]
		break;
 8005d18:	4770      	bx	lr
	switch (increment) {
 8005d1a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8005d1e:	4770      	bx	lr
 8005d20:	08012bc4 	.word	0x08012bc4
 8005d24:	08011ff4 	.word	0x08011ff4

08005d28 <dma_stm32_get_periph_increment>:

static int dma_stm32_get_periph_increment(enum dma_addr_adj increment,
					  uint32_t *ll_increment)
{
	switch (increment) {
 8005d28:	2801      	cmp	r0, #1
 8005d2a:	d032      	beq.n	8005d92 <dma_stm32_get_periph_increment+0x6a>
 8005d2c:	2802      	cmp	r0, #2
 8005d2e:	d02d      	beq.n	8005d8c <dma_stm32_get_periph_increment+0x64>
 8005d30:	b348      	cbz	r0, 8005d86 <dma_stm32_get_periph_increment+0x5e>
{
 8005d32:	b500      	push	{lr}
 8005d34:	b091      	sub	sp, #68	; 0x44
		*ll_increment = LL_DMA_PERIPH_NOINCREMENT;
		break;
	case DMA_ADDR_ADJ_DECREMENT:
		return -ENOTSUP;
	default:
		LOG_ERR("Periph increment error. %d", increment);
 8005d36:	2201      	movs	r2, #1
 8005d38:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005d3c:	4b16      	ldr	r3, [pc, #88]	; (8005d98 <dma_stm32_get_periph_increment+0x70>)
 8005d3e:	930e      	str	r3, [sp, #56]	; 0x38
 8005d40:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d42:	2300      	movs	r3, #0
 8005d44:	9301      	str	r3, [sp, #4]
 8005d46:	2103      	movs	r1, #3
 8005d48:	f88d 1004 	strb.w	r1, [sp, #4]
 8005d4c:	9901      	ldr	r1, [sp, #4]
 8005d4e:	910d      	str	r1, [sp, #52]	; 0x34
 8005d50:	4619      	mov	r1, r3
 8005d52:	f363 0100 	bfi	r1, r3, #0, #1
 8005d56:	f363 0141 	bfi	r1, r3, #1, #1
 8005d5a:	f363 0182 	bfi	r1, r3, #2, #1
 8005d5e:	f363 01c5 	bfi	r1, r3, #3, #3
 8005d62:	f362 1188 	bfi	r1, r2, #6, #3
 8005d66:	220c      	movs	r2, #12
 8005d68:	f362 2152 	bfi	r1, r2, #9, #10
 8005d6c:	f363 41de 	bfi	r1, r3, #19, #12
 8005d70:	f363 71df 	bfi	r1, r3, #31, #1
 8005d74:	aa0d      	add	r2, sp, #52	; 0x34
 8005d76:	4809      	ldr	r0, [pc, #36]	; (8005d9c <dma_stm32_get_periph_increment+0x74>)
 8005d78:	f009 faf0 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005d7c:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 8005d80:	b011      	add	sp, #68	; 0x44
 8005d82:	f85d fb04 	ldr.w	pc, [sp], #4
		*ll_increment = LL_DMA_PERIPH_INCREMENT;
 8005d86:	2340      	movs	r3, #64	; 0x40
 8005d88:	600b      	str	r3, [r1, #0]
		break;
 8005d8a:	4770      	bx	lr
		*ll_increment = LL_DMA_PERIPH_NOINCREMENT;
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	6008      	str	r0, [r1, #0]
		break;
 8005d90:	4770      	bx	lr
	switch (increment) {
 8005d92:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8005d96:	4770      	bx	lr
 8005d98:	08012be0 	.word	0x08012be0
 8005d9c:	08011ff4 	.word	0x08011ff4

08005da0 <dma_stm32_irq_handler>:
{
 8005da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da4:	b096      	sub	sp, #88	; 0x58
 8005da6:	4606      	mov	r6, r0
 8005da8:	460d      	mov	r5, r1
	const struct dma_stm32_config *config = dev->config;
 8005daa:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8005dac:	691f      	ldr	r7, [r3, #16]
	stream = &config->streams[id];
 8005dae:	699c      	ldr	r4, [r3, #24]
 8005db0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8005db4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	callback_arg = id + STREAM_OFFSET;
 8005db8:	f101 0801 	add.w	r8, r1, #1
		stream->busy = false;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	71a3      	strb	r3, [r4, #6]
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 8005dc0:	4638      	mov	r0, r7
 8005dc2:	f000 fd61 	bl	8006888 <stm32_dma_is_ht_irq_active>
 8005dc6:	b178      	cbz	r0, 8005de8 <dma_stm32_irq_handler+0x48>
		if (!stream->hal_override) {
 8005dc8:	7963      	ldrb	r3, [r4, #5]
 8005dca:	b143      	cbz	r3, 8005dde <dma_stm32_irq_handler+0x3e>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 8005dcc:	6965      	ldr	r5, [r4, #20]
 8005dce:	2300      	movs	r3, #0
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	6921      	ldr	r1, [r4, #16]
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	47a8      	blx	r5
}
 8005dd8:	b016      	add	sp, #88	; 0x58
 8005dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			dma_stm32_clear_ht(dma, id);
 8005dde:	4629      	mov	r1, r5
 8005de0:	4638      	mov	r0, r7
 8005de2:	f000 fc59 	bl	8006698 <dma_stm32_clear_ht>
 8005de6:	e7f1      	b.n	8005dcc <dma_stm32_irq_handler+0x2c>
	} else if (stm32_dma_is_tc_irq_active(dma, id)) {
 8005de8:	4629      	mov	r1, r5
 8005dea:	4638      	mov	r0, r7
 8005dec:	f000 fd32 	bl	8006854 <stm32_dma_is_tc_irq_active>
 8005df0:	b168      	cbz	r0, 8005e0e <dma_stm32_irq_handler+0x6e>
		if (!stream->hal_override) {
 8005df2:	7963      	ldrb	r3, [r4, #5]
 8005df4:	b133      	cbz	r3, 8005e04 <dma_stm32_irq_handler+0x64>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 8005df6:	6965      	ldr	r5, [r4, #20]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	4642      	mov	r2, r8
 8005dfc:	6921      	ldr	r1, [r4, #16]
 8005dfe:	4630      	mov	r0, r6
 8005e00:	47a8      	blx	r5
 8005e02:	e7e9      	b.n	8005dd8 <dma_stm32_irq_handler+0x38>
			dma_stm32_clear_tc(dma, id);
 8005e04:	4629      	mov	r1, r5
 8005e06:	4638      	mov	r0, r7
 8005e08:	f000 fc4e 	bl	80066a8 <dma_stm32_clear_tc>
 8005e0c:	e7f3      	b.n	8005df6 <dma_stm32_irq_handler+0x56>
	} else if (stm32_dma_is_unexpected_irq_happened(dma, id)) {
 8005e0e:	4629      	mov	r1, r5
 8005e10:	4638      	mov	r0, r7
 8005e12:	f009 fde2 	bl	800f9da <stm32_dma_is_unexpected_irq_happened>
 8005e16:	b348      	cbz	r0, 8005e6c <dma_stm32_irq_handler+0xcc>
		LOG_ERR("Unexpected irq happened.");
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005e1e:	4b2c      	ldr	r3, [pc, #176]	; (8005ed0 <dma_stm32_irq_handler+0x130>)
 8005e20:	9314      	str	r3, [sp, #80]	; 0x50
 8005e22:	2300      	movs	r3, #0
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	2102      	movs	r1, #2
 8005e28:	f88d 1004 	strb.w	r1, [sp, #4]
 8005e2c:	9901      	ldr	r1, [sp, #4]
 8005e2e:	9113      	str	r1, [sp, #76]	; 0x4c
 8005e30:	4619      	mov	r1, r3
 8005e32:	f363 0100 	bfi	r1, r3, #0, #1
 8005e36:	f363 0141 	bfi	r1, r3, #1, #1
 8005e3a:	f363 0182 	bfi	r1, r3, #2, #1
 8005e3e:	f363 01c5 	bfi	r1, r3, #3, #3
 8005e42:	f362 1188 	bfi	r1, r2, #6, #3
 8005e46:	2208      	movs	r2, #8
 8005e48:	f362 2152 	bfi	r1, r2, #9, #10
 8005e4c:	f363 41de 	bfi	r1, r3, #19, #12
 8005e50:	f363 71df 	bfi	r1, r3, #31, #1
 8005e54:	aa13      	add	r2, sp, #76	; 0x4c
 8005e56:	481f      	ldr	r0, [pc, #124]	; (8005ed4 <dma_stm32_irq_handler+0x134>)
 8005e58:	f009 fa80 	bl	800f35c <z_impl_z_log_msg2_static_create>
		stream->dma_callback(dev, stream->user_data,
 8005e5c:	6965      	ldr	r5, [r4, #20]
 8005e5e:	f06f 0304 	mvn.w	r3, #4
 8005e62:	4642      	mov	r2, r8
 8005e64:	6921      	ldr	r1, [r4, #16]
 8005e66:	4630      	mov	r0, r6
 8005e68:	47a8      	blx	r5
 8005e6a:	e7b5      	b.n	8005dd8 <dma_stm32_irq_handler+0x38>
		LOG_ERR("Transfer Error.");
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005e72:	4b19      	ldr	r3, [pc, #100]	; (8005ed8 <dma_stm32_irq_handler+0x138>)
 8005e74:	930e      	str	r3, [sp, #56]	; 0x38
 8005e76:	2300      	movs	r3, #0
 8005e78:	9301      	str	r3, [sp, #4]
 8005e7a:	2102      	movs	r1, #2
 8005e7c:	f88d 1004 	strb.w	r1, [sp, #4]
 8005e80:	9901      	ldr	r1, [sp, #4]
 8005e82:	910d      	str	r1, [sp, #52]	; 0x34
 8005e84:	4619      	mov	r1, r3
 8005e86:	f363 0100 	bfi	r1, r3, #0, #1
 8005e8a:	f363 0141 	bfi	r1, r3, #1, #1
 8005e8e:	f363 0182 	bfi	r1, r3, #2, #1
 8005e92:	f363 01c5 	bfi	r1, r3, #3, #3
 8005e96:	f362 1188 	bfi	r1, r2, #6, #3
 8005e9a:	2208      	movs	r2, #8
 8005e9c:	f362 2152 	bfi	r1, r2, #9, #10
 8005ea0:	f363 41de 	bfi	r1, r3, #19, #12
 8005ea4:	f363 71df 	bfi	r1, r3, #31, #1
 8005ea8:	aa0d      	add	r2, sp, #52	; 0x34
 8005eaa:	480a      	ldr	r0, [pc, #40]	; (8005ed4 <dma_stm32_irq_handler+0x134>)
 8005eac:	f009 fa56 	bl	800f35c <z_impl_z_log_msg2_static_create>
		dma_stm32_dump_stream_irq(dev, id);
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f009 fc32 	bl	800f71c <dma_stm32_dump_stream_irq>
		dma_stm32_clear_stream_irq(dev, id);
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f009 fc34 	bl	800f728 <dma_stm32_clear_stream_irq>
		stream->dma_callback(dev, stream->user_data,
 8005ec0:	6965      	ldr	r5, [r4, #20]
 8005ec2:	f06f 0304 	mvn.w	r3, #4
 8005ec6:	4642      	mov	r2, r8
 8005ec8:	6921      	ldr	r1, [r4, #16]
 8005eca:	4630      	mov	r0, r6
 8005ecc:	47a8      	blx	r5
}
 8005ece:	e783      	b.n	8005dd8 <dma_stm32_irq_handler+0x38>
 8005ed0:	08012bfc 	.word	0x08012bfc
 8005ed4:	08011ff4 	.word	0x08011ff4
 8005ed8:	08012c18 	.word	0x08012c18

08005edc <dma_stm32_get_status>:
	return 0;
}

DMA_STM32_EXPORT_API int dma_stm32_get_status(const struct device *dev,
				uint32_t id, struct dma_status *stat)
{
 8005edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee0:	4614      	mov	r4, r2
	const struct dma_stm32_config *config = dev->config;
 8005ee2:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8005ee4:	691e      	ldr	r6, [r3, #16]
	struct dma_stm32_stream *stream;

	/* give channel from index 0 */
	id = id - STREAM_OFFSET;
 8005ee6:	1e48      	subs	r0, r1, #1
	if (id >= config->max_streams) {
 8005ee8:	695a      	ldr	r2, [r3, #20]
 8005eea:	4282      	cmp	r2, r0
 8005eec:	d916      	bls.n	8005f1c <dma_stm32_get_status+0x40>
		return -EINVAL;
	}

	stream = &config->streams[id];
 8005eee:	699f      	ldr	r7, [r3, #24]
 8005ef0:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8005ef4:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8005ef8:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
	stat->pending_length = LL_DMA_GetDataLength(dma, dma_stm32_id_to_stream(id));
 8005efc:	f000 fbc6 	bl	800668c <dma_stm32_id_to_stream>
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8005f00:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <dma_stm32_get_status+0x48>)
 8005f02:	5c1b      	ldrb	r3, [r3, r0]
 8005f04:	441e      	add	r6, r3
 8005f06:	6873      	ldr	r3, [r6, #4]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	6063      	str	r3, [r4, #4]
	stat->dir = stream->direction;
 8005f0c:	f817 3008 	ldrb.w	r3, [r7, r8]
 8005f10:	7063      	strb	r3, [r4, #1]
	stat->busy = stream->busy;
 8005f12:	79ab      	ldrb	r3, [r5, #6]
 8005f14:	7023      	strb	r3, [r4, #0]

	return 0;
 8005f16:	2000      	movs	r0, #0
}
 8005f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
 8005f1c:	f06f 0015 	mvn.w	r0, #21
 8005f20:	e7fa      	b.n	8005f18 <dma_stm32_get_status+0x3c>
 8005f22:	bf00      	nop
 8005f24:	08012da8 	.word	0x08012da8

08005f28 <dma_stm32_stop>:
{
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct dma_stm32_config *config = dev->config;
 8005f2a:	6842      	ldr	r2, [r0, #4]
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 8005f2c:	6996      	ldr	r6, [r2, #24]
 8005f2e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	3b18      	subs	r3, #24
 8005f36:	441e      	add	r6, r3
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8005f38:	6917      	ldr	r7, [r2, #16]
	id = id - STREAM_OFFSET;
 8005f3a:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 8005f3c:	6953      	ldr	r3, [r2, #20]
 8005f3e:	42a3      	cmp	r3, r4
 8005f40:	d914      	bls.n	8005f6c <dma_stm32_stop+0x44>
 8005f42:	4605      	mov	r5, r0
	LL_DMA_DisableIT_TC(dma, dma_stm32_id_to_stream(id));
 8005f44:	4620      	mov	r0, r4
 8005f46:	f000 fba1 	bl	800668c <dma_stm32_id_to_stream>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <dma_stm32_stop+0x4c>)
 8005f4c:	5c1a      	ldrb	r2, [r3, r0]
 8005f4e:	58bb      	ldr	r3, [r7, r2]
 8005f50:	f023 0302 	bic.w	r3, r3, #2
 8005f54:	50bb      	str	r3, [r7, r2]
	dma_stm32_disable_stream(dma, id);
 8005f56:	4621      	mov	r1, r4
 8005f58:	4638      	mov	r0, r7
 8005f5a:	f009 fc18 	bl	800f78e <dma_stm32_disable_stream>
	dma_stm32_clear_stream_irq(dev, id);
 8005f5e:	4621      	mov	r1, r4
 8005f60:	4628      	mov	r0, r5
 8005f62:	f009 fbe1 	bl	800f728 <dma_stm32_clear_stream_irq>
	stream->busy = false;
 8005f66:	2000      	movs	r0, #0
 8005f68:	71b0      	strb	r0, [r6, #6]
}
 8005f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
 8005f6c:	f06f 0015 	mvn.w	r0, #21
 8005f70:	e7fb      	b.n	8005f6a <dma_stm32_stop+0x42>
 8005f72:	bf00      	nop
 8005f74:	08012da8 	.word	0x08012da8

08005f78 <dma_stm32_reload>:
{
 8005f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	461f      	mov	r7, r3
	const struct dma_stm32_config *config = dev->config;
 8005f7e:	6840      	ldr	r0, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8005f80:	6906      	ldr	r6, [r0, #16]
	id = id - STREAM_OFFSET;
 8005f82:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 8005f84:	6943      	ldr	r3, [r0, #20]
 8005f86:	42a3      	cmp	r3, r4
 8005f88:	d964      	bls.n	8006054 <dma_stm32_reload+0xdc>
 8005f8a:	4690      	mov	r8, r2
	stream = &config->streams[id];
 8005f8c:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8005f90:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8005f94:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 8005f98:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
	if (dma_stm32_disable_stream(dma, id) != 0) {
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f009 fbf5 	bl	800f78e <dma_stm32_disable_stream>
 8005fa4:	4681      	mov	r9, r0
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d157      	bne.n	800605a <dma_stm32_reload+0xe2>
	switch (stream->direction) {
 8005faa:	f85a 100b 	ldr.w	r1, [sl, fp]
 8005fae:	2901      	cmp	r1, #1
 8005fb0:	d007      	beq.n	8005fc2 <dma_stm32_reload+0x4a>
 8005fb2:	2902      	cmp	r1, #2
 8005fb4:	d02c      	beq.n	8006010 <dma_stm32_reload+0x98>
 8005fb6:	b359      	cbz	r1, 8006010 <dma_stm32_reload+0x98>
 8005fb8:	f06f 0915 	mvn.w	r9, #21
}
 8005fbc:	4648      	mov	r0, r9
 8005fbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), src);
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 fb62 	bl	800668c <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8005fc8:	f8df a094 	ldr.w	sl, [pc, #148]	; 8006060 <dma_stm32_reload+0xe8>
 8005fcc:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8005fd0:	4433      	add	r3, r6
 8005fd2:	f8c3 800c 	str.w	r8, [r3, #12]
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), dst);
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f000 fb58 	bl	800668c <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8005fdc:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8005fe0:	4433      	add	r3, r6
 8005fe2:	609f      	str	r7, [r3, #8]
	if (stream->source_periph) {
 8005fe4:	792b      	ldrb	r3, [r5, #4]
 8005fe6:	b32b      	cbz	r3, 8006034 <dma_stm32_reload+0xbc>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 fb4f 	bl	800668c <dma_stm32_id_to_stream>
				     size / stream->src_size);
 8005fee:	68ab      	ldr	r3, [r5, #8]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8005ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ff2:	fbb2 f3f3 	udiv	r3, r2, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8005ff6:	4a1a      	ldr	r2, [pc, #104]	; (8006060 <dma_stm32_reload+0xe8>)
 8005ff8:	5c11      	ldrb	r1, [r2, r0]
 8005ffa:	4431      	add	r1, r6
 8005ffc:	684a      	ldr	r2, [r1, #4]
 8005ffe:	0c12      	lsrs	r2, r2, #16
 8006000:	0412      	lsls	r2, r2, #16
 8006002:	4313      	orrs	r3, r2
 8006004:	604b      	str	r3, [r1, #4]
	stm32_dma_enable_stream(dma, id);
 8006006:	4621      	mov	r1, r4
 8006008:	4630      	mov	r0, r6
 800600a:	f000 fc57 	bl	80068bc <stm32_dma_enable_stream>
	return 0;
 800600e:	e7d5      	b.n	8005fbc <dma_stm32_reload+0x44>
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), src);
 8006010:	4620      	mov	r0, r4
 8006012:	f000 fb3b 	bl	800668c <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8006016:	f8df a048 	ldr.w	sl, [pc, #72]	; 8006060 <dma_stm32_reload+0xe8>
 800601a:	f81a 3000 	ldrb.w	r3, [sl, r0]
 800601e:	4433      	add	r3, r6
 8006020:	f8c3 8008 	str.w	r8, [r3, #8]
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), dst);
 8006024:	4620      	mov	r0, r4
 8006026:	f000 fb31 	bl	800668c <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800602a:	f81a 3000 	ldrb.w	r3, [sl, r0]
 800602e:	4433      	add	r3, r6
 8006030:	60df      	str	r7, [r3, #12]
}
 8006032:	e7d7      	b.n	8005fe4 <dma_stm32_reload+0x6c>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8006034:	4620      	mov	r0, r4
 8006036:	f000 fb29 	bl	800668c <dma_stm32_id_to_stream>
				     size / stream->dst_size);
 800603a:	68eb      	ldr	r3, [r5, #12]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 800603c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800603e:	fbb2 f3f3 	udiv	r3, r2, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8006042:	4a07      	ldr	r2, [pc, #28]	; (8006060 <dma_stm32_reload+0xe8>)
 8006044:	5c11      	ldrb	r1, [r2, r0]
 8006046:	4431      	add	r1, r6
 8006048:	684a      	ldr	r2, [r1, #4]
 800604a:	0c12      	lsrs	r2, r2, #16
 800604c:	0412      	lsls	r2, r2, #16
 800604e:	4313      	orrs	r3, r2
 8006050:	604b      	str	r3, [r1, #4]
}
 8006052:	e7d8      	b.n	8006006 <dma_stm32_reload+0x8e>
		return -EINVAL;
 8006054:	f06f 0915 	mvn.w	r9, #21
 8006058:	e7b0      	b.n	8005fbc <dma_stm32_reload+0x44>
		return -EBUSY;
 800605a:	f06f 090f 	mvn.w	r9, #15
 800605e:	e7ad      	b.n	8005fbc <dma_stm32_reload+0x44>
 8006060:	08012da8 	.word	0x08012da8

08006064 <dma_stm32_configure>:
{
 8006064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006068:	b0d1      	sub	sp, #324	; 0x144
 800606a:	4607      	mov	r7, r0
 800606c:	460d      	mov	r5, r1
 800606e:	4614      	mov	r4, r2
	const struct dma_stm32_config *dev_config = dev->config;
 8006070:	f8d0 b004 	ldr.w	fp, [r0, #4]
				&dev_config->streams[id - STREAM_OFFSET];
 8006074:	f8db 9018 	ldr.w	r9, [fp, #24]
 8006078:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 800607c:	00f6      	lsls	r6, r6, #3
 800607e:	3e18      	subs	r6, #24
	struct dma_stm32_stream *stream =
 8006080:	eb09 0806 	add.w	r8, r9, r6
	DMA_TypeDef *dma = (DMA_TypeDef *)dev_config->base;
 8006084:	f8db a010 	ldr.w	sl, [fp, #16]
	LL_DMA_StructInit(&DMA_InitStruct);
 8006088:	a809      	add	r0, sp, #36	; 0x24
 800608a:	f00a fc9d 	bl	80109c8 <LL_DMA_StructInit>
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 800608e:	8863      	ldrh	r3, [r4, #2]
 8006090:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006094:	f5b3 6ffe 	cmp.w	r3, #2032	; 0x7f0
 8006098:	f000 809c 	beq.w	80061d4 <dma_stm32_configure+0x170>
 800609c:	3d01      	subs	r5, #1
	if (id >= dev_config->max_streams) {
 800609e:	f8db 3014 	ldr.w	r3, [fp, #20]
 80060a2:	42ab      	cmp	r3, r5
 80060a4:	f240 80a6 	bls.w	80061f4 <dma_stm32_configure+0x190>
	if (stream->busy) {
 80060a8:	f898 3006 	ldrb.w	r3, [r8, #6]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f040 80c7 	bne.w	8006240 <dma_stm32_configure+0x1dc>
	if (dma_stm32_disable_stream(dma, id) != 0) {
 80060b2:	4629      	mov	r1, r5
 80060b4:	4650      	mov	r0, sl
 80060b6:	f009 fb6a 	bl	800f78e <dma_stm32_disable_stream>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	f040 80e6 	bne.w	800628c <dma_stm32_configure+0x228>
	dma_stm32_clear_stream_irq(dev, id);
 80060c0:	4629      	mov	r1, r5
 80060c2:	4638      	mov	r0, r7
 80060c4:	f009 fb30 	bl	800f728 <dma_stm32_clear_stream_irq>
	if (config->head_block->block_size > DMA_STM32_MAX_DATA_ITEMS) {
 80060c8:	6922      	ldr	r2, [r4, #16]
 80060ca:	6953      	ldr	r3, [r2, #20]
 80060cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d0:	f080 8102 	bcs.w	80062d8 <dma_stm32_configure+0x274>
	if ((config->dest_data_size != config->source_data_size)) {
 80060d4:	88e1      	ldrh	r1, [r4, #6]
 80060d6:	88a3      	ldrh	r3, [r4, #4]
 80060d8:	4299      	cmp	r1, r3
 80060da:	f040 8125 	bne.w	8006328 <dma_stm32_configure+0x2c4>
	if (config->source_data_size != 4U &&
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d004      	beq.n	80060ec <dma_stm32_configure+0x88>
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d002      	beq.n	80060ec <dma_stm32_configure+0x88>
	    config->source_data_size != 2U &&
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	f040 8143 	bne.w	8006372 <dma_stm32_configure+0x30e>
	if (config->head_block->source_reload_en !=
 80060ec:	7f13      	ldrb	r3, [r2, #28]
 80060ee:	f3c3 1280 	ubfx	r2, r3, #6, #1
 80060f2:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
 80060f6:	f040 8163 	bne.w	80063c0 <dma_stm32_configure+0x35c>
	stream->busy		= true;
 80060fa:	2301      	movs	r3, #1
 80060fc:	f888 3006 	strb.w	r3, [r8, #6]
	stream->dma_callback	= config->dma_callback;
 8006100:	69a3      	ldr	r3, [r4, #24]
 8006102:	f8c8 3014 	str.w	r3, [r8, #20]
	stream->direction	= config->channel_direction;
 8006106:	8823      	ldrh	r3, [r4, #0]
 8006108:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 800610c:	f849 3006 	str.w	r3, [r9, r6]
	stream->user_data       = config->user_data;
 8006110:	6963      	ldr	r3, [r4, #20]
 8006112:	f8c8 3010 	str.w	r3, [r8, #16]
	stream->src_size	= config->source_data_size;
 8006116:	88a3      	ldrh	r3, [r4, #4]
 8006118:	f8c8 3008 	str.w	r3, [r8, #8]
	stream->dst_size	= config->dest_data_size;
 800611c:	88e3      	ldrh	r3, [r4, #6]
 800611e:	f8c8 300c 	str.w	r3, [r8, #12]
	if ((config->head_block->source_address == 0)) {
 8006122:	6923      	ldr	r3, [r4, #16]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 816f 	beq.w	800640a <dma_stm32_configure+0x3a6>
	if ((config->head_block->dest_address == 0)) {
 800612c:	6923      	ldr	r3, [r4, #16]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 818d 	beq.w	8006450 <dma_stm32_configure+0x3ec>
	if (stream->direction == MEMORY_TO_PERIPHERAL) {
 8006136:	f859 3006 	ldr.w	r3, [r9, r6]
 800613a:	2b01      	cmp	r3, #1
 800613c:	f000 81ab 	beq.w	8006496 <dma_stm32_configure+0x432>
					config->head_block->source_address;
 8006140:	6923      	ldr	r3, [r4, #16]
 8006142:	681a      	ldr	r2, [r3, #0]
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 8006144:	9209      	str	r2, [sp, #36]	; 0x24
					config->head_block->dest_address;
 8006146:	685b      	ldr	r3, [r3, #4]
		DMA_InitStruct.MemoryOrM2MDstAddress =
 8006148:	930a      	str	r3, [sp, #40]	; 0x28
	ret = dma_stm32_get_priority(config->channel_priority,
 800614a:	6820      	ldr	r0, [r4, #0]
 800614c:	a913      	add	r1, sp, #76	; 0x4c
 800614e:	f3c0 3083 	ubfx	r0, r0, #14, #4
 8006152:	f7ff fd29 	bl	8005ba8 <dma_stm32_get_priority>
	if (ret < 0) {
 8006156:	1e07      	subs	r7, r0, #0
 8006158:	db48      	blt.n	80061ec <dma_stm32_configure+0x188>
	ret = dma_stm32_get_direction(config->channel_direction,
 800615a:	8820      	ldrh	r0, [r4, #0]
 800615c:	a90b      	add	r1, sp, #44	; 0x2c
 800615e:	f3c0 10c2 	ubfx	r0, r0, #7, #3
 8006162:	f7ff fd67 	bl	8005c34 <dma_stm32_get_direction>
	if (ret < 0) {
 8006166:	1e07      	subs	r7, r0, #0
 8006168:	db40      	blt.n	80061ec <dma_stm32_configure+0x188>
	switch (config->channel_direction) {
 800616a:	8823      	ldrh	r3, [r4, #0]
 800616c:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8006170:	2b01      	cmp	r3, #1
 8006172:	f000 821b 	beq.w	80065ac <dma_stm32_configure+0x548>
 8006176:	2b02      	cmp	r3, #2
 8006178:	f000 81aa 	beq.w	80064d0 <dma_stm32_configure+0x46c>
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 81a7 	beq.w	80064d0 <dma_stm32_configure+0x46c>
		LOG_ERR("Channel direction error (%d).",
 8006182:	2201      	movs	r2, #1
 8006184:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006188:	4bc6      	ldr	r3, [pc, #792]	; (80064a4 <dma_stm32_configure+0x440>)
 800618a:	932a      	str	r3, [sp, #168]	; 0xa8
 800618c:	8823      	ldrh	r3, [r4, #0]
 800618e:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8006192:	932b      	str	r3, [sp, #172]	; 0xac
 8006194:	2300      	movs	r3, #0
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	2103      	movs	r1, #3
 800619a:	f88d 1000 	strb.w	r1, [sp]
 800619e:	9900      	ldr	r1, [sp, #0]
 80061a0:	9129      	str	r1, [sp, #164]	; 0xa4
 80061a2:	4619      	mov	r1, r3
 80061a4:	f363 0100 	bfi	r1, r3, #0, #1
 80061a8:	f363 0141 	bfi	r1, r3, #1, #1
 80061ac:	f363 0182 	bfi	r1, r3, #2, #1
 80061b0:	f363 01c5 	bfi	r1, r3, #3, #3
 80061b4:	f362 1188 	bfi	r1, r2, #6, #3
 80061b8:	220c      	movs	r2, #12
 80061ba:	f362 2152 	bfi	r1, r2, #9, #10
 80061be:	f363 41de 	bfi	r1, r3, #19, #12
 80061c2:	f363 71df 	bfi	r1, r3, #31, #1
 80061c6:	aa29      	add	r2, sp, #164	; 0xa4
 80061c8:	48b7      	ldr	r0, [pc, #732]	; (80064a8 <dma_stm32_configure+0x444>)
 80061ca:	f009 f8c7 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80061ce:	f06f 0715 	mvn.w	r7, #21
 80061d2:	e00b      	b.n	80061ec <dma_stm32_configure+0x188>
		stream->busy = true;
 80061d4:	2301      	movs	r3, #1
 80061d6:	f888 3006 	strb.w	r3, [r8, #6]
		stream->hal_override = true;
 80061da:	f888 3005 	strb.w	r3, [r8, #5]
		stream->dma_callback = config->dma_callback;
 80061de:	69a3      	ldr	r3, [r4, #24]
 80061e0:	f8c8 3014 	str.w	r3, [r8, #20]
		stream->user_data = config->user_data;
 80061e4:	6963      	ldr	r3, [r4, #20]
 80061e6:	f8c8 3010 	str.w	r3, [r8, #16]
		return 0;
 80061ea:	2700      	movs	r7, #0
}
 80061ec:	4638      	mov	r0, r7
 80061ee:	b051      	add	sp, #324	; 0x144
 80061f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("cannot configure the dma stream %d.", id);
 80061f4:	2201      	movs	r2, #1
 80061f6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80061fa:	4bac      	ldr	r3, [pc, #688]	; (80064ac <dma_stm32_configure+0x448>)
 80061fc:	934e      	str	r3, [sp, #312]	; 0x138
 80061fe:	954f      	str	r5, [sp, #316]	; 0x13c
 8006200:	2300      	movs	r3, #0
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	2103      	movs	r1, #3
 8006206:	f88d 1000 	strb.w	r1, [sp]
 800620a:	9900      	ldr	r1, [sp, #0]
 800620c:	914d      	str	r1, [sp, #308]	; 0x134
 800620e:	4619      	mov	r1, r3
 8006210:	f363 0100 	bfi	r1, r3, #0, #1
 8006214:	f363 0141 	bfi	r1, r3, #1, #1
 8006218:	f363 0182 	bfi	r1, r3, #2, #1
 800621c:	f363 01c5 	bfi	r1, r3, #3, #3
 8006220:	f362 1188 	bfi	r1, r2, #6, #3
 8006224:	220c      	movs	r2, #12
 8006226:	f362 2152 	bfi	r1, r2, #9, #10
 800622a:	f363 41de 	bfi	r1, r3, #19, #12
 800622e:	f363 71df 	bfi	r1, r3, #31, #1
 8006232:	aa4d      	add	r2, sp, #308	; 0x134
 8006234:	489c      	ldr	r0, [pc, #624]	; (80064a8 <dma_stm32_configure+0x444>)
 8006236:	f009 f891 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800623a:	f06f 0715 	mvn.w	r7, #21
 800623e:	e7d5      	b.n	80061ec <dma_stm32_configure+0x188>
		LOG_ERR("dma stream %d is busy.", id);
 8006240:	2201      	movs	r2, #1
 8006242:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006246:	4b9a      	ldr	r3, [pc, #616]	; (80064b0 <dma_stm32_configure+0x44c>)
 8006248:	9348      	str	r3, [sp, #288]	; 0x120
 800624a:	9549      	str	r5, [sp, #292]	; 0x124
 800624c:	2300      	movs	r3, #0
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	2103      	movs	r1, #3
 8006252:	f88d 1000 	strb.w	r1, [sp]
 8006256:	9900      	ldr	r1, [sp, #0]
 8006258:	9147      	str	r1, [sp, #284]	; 0x11c
 800625a:	4619      	mov	r1, r3
 800625c:	f363 0100 	bfi	r1, r3, #0, #1
 8006260:	f363 0141 	bfi	r1, r3, #1, #1
 8006264:	f363 0182 	bfi	r1, r3, #2, #1
 8006268:	f363 01c5 	bfi	r1, r3, #3, #3
 800626c:	f362 1188 	bfi	r1, r2, #6, #3
 8006270:	220c      	movs	r2, #12
 8006272:	f362 2152 	bfi	r1, r2, #9, #10
 8006276:	f363 41de 	bfi	r1, r3, #19, #12
 800627a:	f363 71df 	bfi	r1, r3, #31, #1
 800627e:	aa47      	add	r2, sp, #284	; 0x11c
 8006280:	4889      	ldr	r0, [pc, #548]	; (80064a8 <dma_stm32_configure+0x444>)
 8006282:	f009 f86b 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EBUSY;
 8006286:	f06f 070f 	mvn.w	r7, #15
 800628a:	e7af      	b.n	80061ec <dma_stm32_configure+0x188>
		LOG_ERR("could not disable dma stream %d.", id);
 800628c:	2201      	movs	r2, #1
 800628e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006292:	4b88      	ldr	r3, [pc, #544]	; (80064b4 <dma_stm32_configure+0x450>)
 8006294:	9342      	str	r3, [sp, #264]	; 0x108
 8006296:	9543      	str	r5, [sp, #268]	; 0x10c
 8006298:	2300      	movs	r3, #0
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	2103      	movs	r1, #3
 800629e:	f88d 1000 	strb.w	r1, [sp]
 80062a2:	9900      	ldr	r1, [sp, #0]
 80062a4:	9141      	str	r1, [sp, #260]	; 0x104
 80062a6:	4619      	mov	r1, r3
 80062a8:	f363 0100 	bfi	r1, r3, #0, #1
 80062ac:	f363 0141 	bfi	r1, r3, #1, #1
 80062b0:	f363 0182 	bfi	r1, r3, #2, #1
 80062b4:	f363 01c5 	bfi	r1, r3, #3, #3
 80062b8:	f362 1188 	bfi	r1, r2, #6, #3
 80062bc:	220c      	movs	r2, #12
 80062be:	f362 2152 	bfi	r1, r2, #9, #10
 80062c2:	f363 41de 	bfi	r1, r3, #19, #12
 80062c6:	f363 71df 	bfi	r1, r3, #31, #1
 80062ca:	aa41      	add	r2, sp, #260	; 0x104
 80062cc:	4876      	ldr	r0, [pc, #472]	; (80064a8 <dma_stm32_configure+0x444>)
 80062ce:	f009 f845 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EBUSY;
 80062d2:	f06f 070f 	mvn.w	r7, #15
 80062d6:	e789      	b.n	80061ec <dma_stm32_configure+0x188>
		LOG_ERR("Data size too big: %d\n",
 80062d8:	2201      	movs	r2, #1
 80062da:	f8ad 2004 	strh.w	r2, [sp, #4]
 80062de:	4b76      	ldr	r3, [pc, #472]	; (80064b8 <dma_stm32_configure+0x454>)
 80062e0:	933c      	str	r3, [sp, #240]	; 0xf0
 80062e2:	6923      	ldr	r3, [r4, #16]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	933d      	str	r3, [sp, #244]	; 0xf4
 80062e8:	2300      	movs	r3, #0
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	2103      	movs	r1, #3
 80062ee:	f88d 1000 	strb.w	r1, [sp]
 80062f2:	9900      	ldr	r1, [sp, #0]
 80062f4:	913b      	str	r1, [sp, #236]	; 0xec
 80062f6:	4619      	mov	r1, r3
 80062f8:	f363 0100 	bfi	r1, r3, #0, #1
 80062fc:	f363 0141 	bfi	r1, r3, #1, #1
 8006300:	f363 0182 	bfi	r1, r3, #2, #1
 8006304:	f363 01c5 	bfi	r1, r3, #3, #3
 8006308:	f362 1188 	bfi	r1, r2, #6, #3
 800630c:	220c      	movs	r2, #12
 800630e:	f362 2152 	bfi	r1, r2, #9, #10
 8006312:	f363 41de 	bfi	r1, r3, #19, #12
 8006316:	f363 71df 	bfi	r1, r3, #31, #1
 800631a:	aa3b      	add	r2, sp, #236	; 0xec
 800631c:	4862      	ldr	r0, [pc, #392]	; (80064a8 <dma_stm32_configure+0x444>)
 800631e:	f009 f81d 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8006322:	f06f 0715 	mvn.w	r7, #21
 8006326:	e761      	b.n	80061ec <dma_stm32_configure+0x188>
		LOG_ERR("source and dest data size differ.");
 8006328:	2201      	movs	r2, #1
 800632a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800632e:	4b63      	ldr	r3, [pc, #396]	; (80064bc <dma_stm32_configure+0x458>)
 8006330:	9336      	str	r3, [sp, #216]	; 0xd8
 8006332:	2300      	movs	r3, #0
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2102      	movs	r1, #2
 8006338:	f88d 1000 	strb.w	r1, [sp]
 800633c:	9900      	ldr	r1, [sp, #0]
 800633e:	9135      	str	r1, [sp, #212]	; 0xd4
 8006340:	4619      	mov	r1, r3
 8006342:	f363 0100 	bfi	r1, r3, #0, #1
 8006346:	f363 0141 	bfi	r1, r3, #1, #1
 800634a:	f363 0182 	bfi	r1, r3, #2, #1
 800634e:	f363 01c5 	bfi	r1, r3, #3, #3
 8006352:	f362 1188 	bfi	r1, r2, #6, #3
 8006356:	2208      	movs	r2, #8
 8006358:	f362 2152 	bfi	r1, r2, #9, #10
 800635c:	f363 41de 	bfi	r1, r3, #19, #12
 8006360:	f363 71df 	bfi	r1, r3, #31, #1
 8006364:	aa35      	add	r2, sp, #212	; 0xd4
 8006366:	4850      	ldr	r0, [pc, #320]	; (80064a8 <dma_stm32_configure+0x444>)
 8006368:	f008 fff8 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800636c:	f06f 0715 	mvn.w	r7, #21
 8006370:	e73c      	b.n	80061ec <dma_stm32_configure+0x188>
		LOG_ERR("source and dest unit size error, %d",
 8006372:	2201      	movs	r2, #1
 8006374:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006378:	4b51      	ldr	r3, [pc, #324]	; (80064c0 <dma_stm32_configure+0x45c>)
 800637a:	9318      	str	r3, [sp, #96]	; 0x60
 800637c:	88a3      	ldrh	r3, [r4, #4]
 800637e:	9319      	str	r3, [sp, #100]	; 0x64
 8006380:	2300      	movs	r3, #0
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	2103      	movs	r1, #3
 8006386:	f88d 1000 	strb.w	r1, [sp]
 800638a:	9900      	ldr	r1, [sp, #0]
 800638c:	9117      	str	r1, [sp, #92]	; 0x5c
 800638e:	4619      	mov	r1, r3
 8006390:	f363 0100 	bfi	r1, r3, #0, #1
 8006394:	f363 0141 	bfi	r1, r3, #1, #1
 8006398:	f363 0182 	bfi	r1, r3, #2, #1
 800639c:	f363 01c5 	bfi	r1, r3, #3, #3
 80063a0:	f362 1188 	bfi	r1, r2, #6, #3
 80063a4:	220c      	movs	r2, #12
 80063a6:	f362 2152 	bfi	r1, r2, #9, #10
 80063aa:	f363 41de 	bfi	r1, r3, #19, #12
 80063ae:	f363 71df 	bfi	r1, r3, #31, #1
 80063b2:	aa17      	add	r2, sp, #92	; 0x5c
 80063b4:	483c      	ldr	r0, [pc, #240]	; (80064a8 <dma_stm32_configure+0x444>)
 80063b6:	f008 ffd1 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80063ba:	f06f 0715 	mvn.w	r7, #21
 80063be:	e715      	b.n	80061ec <dma_stm32_configure+0x188>
		LOG_ERR("source_reload_en and dest_reload_en must "
 80063c0:	2201      	movs	r2, #1
 80063c2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80063c6:	4b3f      	ldr	r3, [pc, #252]	; (80064c4 <dma_stm32_configure+0x460>)
 80063c8:	9330      	str	r3, [sp, #192]	; 0xc0
 80063ca:	2300      	movs	r3, #0
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	2102      	movs	r1, #2
 80063d0:	f88d 1000 	strb.w	r1, [sp]
 80063d4:	9900      	ldr	r1, [sp, #0]
 80063d6:	912f      	str	r1, [sp, #188]	; 0xbc
 80063d8:	4619      	mov	r1, r3
 80063da:	f363 0100 	bfi	r1, r3, #0, #1
 80063de:	f363 0141 	bfi	r1, r3, #1, #1
 80063e2:	f363 0182 	bfi	r1, r3, #2, #1
 80063e6:	f363 01c5 	bfi	r1, r3, #3, #3
 80063ea:	f362 1188 	bfi	r1, r2, #6, #3
 80063ee:	2208      	movs	r2, #8
 80063f0:	f362 2152 	bfi	r1, r2, #9, #10
 80063f4:	f363 41de 	bfi	r1, r3, #19, #12
 80063f8:	f363 71df 	bfi	r1, r3, #31, #1
 80063fc:	aa2f      	add	r2, sp, #188	; 0xbc
 80063fe:	482a      	ldr	r0, [pc, #168]	; (80064a8 <dma_stm32_configure+0x444>)
 8006400:	f008 ffac 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8006404:	f06f 0715 	mvn.w	r7, #21
 8006408:	e6f0      	b.n	80061ec <dma_stm32_configure+0x188>
		LOG_WRN("source_buffer address is null.");
 800640a:	2301      	movs	r3, #1
 800640c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006410:	4b2d      	ldr	r3, [pc, #180]	; (80064c8 <dma_stm32_configure+0x464>)
 8006412:	931e      	str	r3, [sp, #120]	; 0x78
 8006414:	2300      	movs	r3, #0
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	2202      	movs	r2, #2
 800641a:	f88d 2000 	strb.w	r2, [sp]
 800641e:	9900      	ldr	r1, [sp, #0]
 8006420:	911d      	str	r1, [sp, #116]	; 0x74
 8006422:	4619      	mov	r1, r3
 8006424:	f363 0100 	bfi	r1, r3, #0, #1
 8006428:	f363 0141 	bfi	r1, r3, #1, #1
 800642c:	f363 0182 	bfi	r1, r3, #2, #1
 8006430:	f363 01c5 	bfi	r1, r3, #3, #3
 8006434:	f362 1188 	bfi	r1, r2, #6, #3
 8006438:	2208      	movs	r2, #8
 800643a:	f362 2152 	bfi	r1, r2, #9, #10
 800643e:	f363 41de 	bfi	r1, r3, #19, #12
 8006442:	f363 71df 	bfi	r1, r3, #31, #1
 8006446:	aa1d      	add	r2, sp, #116	; 0x74
 8006448:	4817      	ldr	r0, [pc, #92]	; (80064a8 <dma_stm32_configure+0x444>)
 800644a:	f008 ff87 	bl	800f35c <z_impl_z_log_msg2_static_create>
 800644e:	e66d      	b.n	800612c <dma_stm32_configure+0xc8>
		LOG_WRN("dest_buffer address is null.");
 8006450:	2301      	movs	r3, #1
 8006452:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006456:	4b1d      	ldr	r3, [pc, #116]	; (80064cc <dma_stm32_configure+0x468>)
 8006458:	9324      	str	r3, [sp, #144]	; 0x90
 800645a:	2300      	movs	r3, #0
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	2202      	movs	r2, #2
 8006460:	f88d 2000 	strb.w	r2, [sp]
 8006464:	9900      	ldr	r1, [sp, #0]
 8006466:	9123      	str	r1, [sp, #140]	; 0x8c
 8006468:	4619      	mov	r1, r3
 800646a:	f363 0100 	bfi	r1, r3, #0, #1
 800646e:	f363 0141 	bfi	r1, r3, #1, #1
 8006472:	f363 0182 	bfi	r1, r3, #2, #1
 8006476:	f363 01c5 	bfi	r1, r3, #3, #3
 800647a:	f362 1188 	bfi	r1, r2, #6, #3
 800647e:	2208      	movs	r2, #8
 8006480:	f362 2152 	bfi	r1, r2, #9, #10
 8006484:	f363 41de 	bfi	r1, r3, #19, #12
 8006488:	f363 71df 	bfi	r1, r3, #31, #1
 800648c:	aa23      	add	r2, sp, #140	; 0x8c
 800648e:	4806      	ldr	r0, [pc, #24]	; (80064a8 <dma_stm32_configure+0x444>)
 8006490:	f008 ff64 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8006494:	e64f      	b.n	8006136 <dma_stm32_configure+0xd2>
					config->head_block->source_address;
 8006496:	6923      	ldr	r3, [r4, #16]
 8006498:	681a      	ldr	r2, [r3, #0]
		DMA_InitStruct.MemoryOrM2MDstAddress =
 800649a:	920a      	str	r2, [sp, #40]	; 0x28
					config->head_block->dest_address;
 800649c:	685b      	ldr	r3, [r3, #4]
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 800649e:	9309      	str	r3, [sp, #36]	; 0x24
 80064a0:	e653      	b.n	800614a <dma_stm32_configure+0xe6>
 80064a2:	bf00      	nop
 80064a4:	08012d60 	.word	0x08012d60
 80064a8:	08011ff4 	.word	0x08011ff4
 80064ac:	08012c28 	.word	0x08012c28
 80064b0:	08012c4c 	.word	0x08012c4c
 80064b4:	08012c64 	.word	0x08012c64
 80064b8:	08012c88 	.word	0x08012c88
 80064bc:	08012ca0 	.word	0x08012ca0
 80064c0:	08012cc4 	.word	0x08012cc4
 80064c4:	08012ce8 	.word	0x08012ce8
 80064c8:	08012d20 	.word	0x08012d20
 80064cc:	08012d40 	.word	0x08012d40
		memory_addr_adj = config->head_block->dest_addr_adj;
 80064d0:	6923      	ldr	r3, [r4, #16]
 80064d2:	f893 b01c 	ldrb.w	fp, [r3, #28]
 80064d6:	f3cb 1001 	ubfx	r0, fp, #4, #2
		periph_addr_adj = config->head_block->source_addr_adj;
 80064da:	f3cb 0b81 	ubfx	fp, fp, #2, #2
	ret = dma_stm32_get_memory_increment(memory_addr_adj,
 80064de:	a90e      	add	r1, sp, #56	; 0x38
 80064e0:	f7ff fbe6 	bl	8005cb0 <dma_stm32_get_memory_increment>
	if (ret < 0) {
 80064e4:	1e07      	subs	r7, r0, #0
 80064e6:	f6ff ae81 	blt.w	80061ec <dma_stm32_configure+0x188>
	ret = dma_stm32_get_periph_increment(periph_addr_adj,
 80064ea:	a90d      	add	r1, sp, #52	; 0x34
 80064ec:	4658      	mov	r0, fp
 80064ee:	f7ff fc1b 	bl	8005d28 <dma_stm32_get_periph_increment>
	if (ret < 0) {
 80064f2:	1e07      	subs	r7, r0, #0
 80064f4:	f6ff ae7a 	blt.w	80061ec <dma_stm32_configure+0x188>
	if (config->head_block->source_reload_en) {
 80064f8:	6923      	ldr	r3, [r4, #16]
 80064fa:	7f1b      	ldrb	r3, [r3, #28]
 80064fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006500:	d05c      	beq.n	80065bc <dma_stm32_configure+0x558>
		DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 8006502:	2320      	movs	r3, #32
 8006504:	930c      	str	r3, [sp, #48]	; 0x30
	stream->source_periph = (stream->direction == PERIPHERAL_TO_MEMORY);
 8006506:	f859 3006 	ldr.w	r3, [r9, r6]
 800650a:	2b02      	cmp	r3, #2
 800650c:	bf14      	ite	ne
 800650e:	2300      	movne	r3, #0
 8006510:	2301      	moveq	r3, #1
 8006512:	f888 3004 	strb.w	r3, [r8, #4]
	int index = find_lsb_set(config->source_data_size) - 1;
 8006516:	88a3      	ldrh	r3, [r4, #4]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8006518:	fa93 f2a3 	rbit	r2, r3
 800651c:	fab2 f282 	clz	r2, r2
 8006520:	b90b      	cbnz	r3, 8006526 <dma_stm32_configure+0x4c2>
 8006522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	DMA_InitStruct.PeriphOrM2MSrcDataSize = table_p_size[index];
 8006526:	4b2a      	ldr	r3, [pc, #168]	; (80065d0 <dma_stm32_configure+0x56c>)
 8006528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652c:	930f      	str	r3, [sp, #60]	; 0x3c
	index = find_lsb_set(config->dest_data_size) - 1;
 800652e:	88e3      	ldrh	r3, [r4, #6]
 8006530:	fa93 f2a3 	rbit	r2, r3
 8006534:	fab2 f282 	clz	r2, r2
 8006538:	b90b      	cbnz	r3, 800653e <dma_stm32_configure+0x4da>
 800653a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	DMA_InitStruct.MemoryOrM2MDstDataSize = table_m_size[index];
 800653e:	4b25      	ldr	r3, [pc, #148]	; (80065d4 <dma_stm32_configure+0x570>)
 8006540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006544:	9310      	str	r3, [sp, #64]	; 0x40
	if (stream->source_periph) {
 8006546:	f898 3004 	ldrb.w	r3, [r8, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d039      	beq.n	80065c2 <dma_stm32_configure+0x55e>
		DMA_InitStruct.NbData = config->head_block->block_size /
 800654e:	6923      	ldr	r3, [r4, #16]
 8006550:	695b      	ldr	r3, [r3, #20]
					config->source_data_size;
 8006552:	88a2      	ldrh	r2, [r4, #4]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8006554:	fbb3 f3f2 	udiv	r3, r3, r2
 8006558:	9311      	str	r3, [sp, #68]	; 0x44
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 800655a:	7823      	ldrb	r3, [r4, #0]
 800655c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006560:	9312      	str	r3, [sp, #72]	; 0x48
	LL_DMA_Init(dma, dma_stm32_id_to_stream(id), &DMA_InitStruct);
 8006562:	4628      	mov	r0, r5
 8006564:	f000 f892 	bl	800668c <dma_stm32_id_to_stream>
 8006568:	4601      	mov	r1, r0
 800656a:	aa09      	add	r2, sp, #36	; 0x24
 800656c:	4650      	mov	r0, sl
 800656e:	f004 fe1b 	bl	800b1a8 <LL_DMA_Init>
	LL_DMA_EnableIT_TC(dma, dma_stm32_id_to_stream(id));
 8006572:	4628      	mov	r0, r5
 8006574:	f000 f88a 	bl	800668c <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8006578:	4b17      	ldr	r3, [pc, #92]	; (80065d8 <dma_stm32_configure+0x574>)
 800657a:	5c1a      	ldrb	r2, [r3, r0]
 800657c:	f85a 3002 	ldr.w	r3, [sl, r2]
 8006580:	f043 0302 	orr.w	r3, r3, #2
 8006584:	f84a 3002 	str.w	r3, [sl, r2]
	if (config->head_block->source_reload_en) {
 8006588:	6923      	ldr	r3, [r4, #16]
 800658a:	7f1b      	ldrb	r3, [r3, #28]
 800658c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006590:	f43f ae2c 	beq.w	80061ec <dma_stm32_configure+0x188>
		LL_DMA_EnableIT_HT(dma, dma_stm32_id_to_stream(id));
 8006594:	4628      	mov	r0, r5
 8006596:	f000 f879 	bl	800668c <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 800659a:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <dma_stm32_configure+0x574>)
 800659c:	5c1a      	ldrb	r2, [r3, r0]
 800659e:	f85a 3002 	ldr.w	r3, [sl, r2]
 80065a2:	f043 0304 	orr.w	r3, r3, #4
 80065a6:	f84a 3002 	str.w	r3, [sl, r2]
}
 80065aa:	e61f      	b.n	80061ec <dma_stm32_configure+0x188>
		memory_addr_adj = config->head_block->source_addr_adj;
 80065ac:	6923      	ldr	r3, [r4, #16]
 80065ae:	f893 b01c 	ldrb.w	fp, [r3, #28]
 80065b2:	f3cb 0081 	ubfx	r0, fp, #2, #2
		periph_addr_adj = config->head_block->dest_addr_adj;
 80065b6:	f3cb 1b01 	ubfx	fp, fp, #4, #2
		break;
 80065ba:	e790      	b.n	80064de <dma_stm32_configure+0x47a>
		DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80065bc:	2300      	movs	r3, #0
 80065be:	930c      	str	r3, [sp, #48]	; 0x30
 80065c0:	e7a1      	b.n	8006506 <dma_stm32_configure+0x4a2>
		DMA_InitStruct.NbData = config->head_block->block_size /
 80065c2:	6923      	ldr	r3, [r4, #16]
 80065c4:	695b      	ldr	r3, [r3, #20]
					config->dest_data_size;
 80065c6:	88e2      	ldrh	r2, [r4, #6]
		DMA_InitStruct.NbData = config->head_block->block_size /
 80065c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80065cc:	9311      	str	r3, [sp, #68]	; 0x44
 80065ce:	e7c4      	b.n	800655a <dma_stm32_configure+0x4f6>
 80065d0:	08012df8 	.word	0x08012df8
 80065d4:	08012dec 	.word	0x08012dec
 80065d8:	08012da8 	.word	0x08012da8

080065dc <dma_stm32_init>:
{
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	b090      	sub	sp, #64	; 0x40
 80065e0:	4605      	mov	r5, r0
	const struct dma_stm32_config *config = dev->config;
 80065e2:	6844      	ldr	r4, [r0, #4]
 80065e4:	4826      	ldr	r0, [pc, #152]	; (8006680 <dma_stm32_init+0xa4>)
 80065e6:	f00a fa0d 	bl	8010a04 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 80065ea:	b158      	cbz	r0, 8006604 <dma_stm32_init+0x28>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 80065ec:	4824      	ldr	r0, [pc, #144]	; (8006680 <dma_stm32_init+0xa4>)
 80065ee:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4621      	mov	r1, r4
 80065f4:	4798      	blx	r3
 80065f6:	4606      	mov	r6, r0
	if (clock_control_on(clk,
 80065f8:	b93e      	cbnz	r6, 800660a <dma_stm32_init+0x2e>
	config->config_irq(dev);
 80065fa:	68a3      	ldr	r3, [r4, #8]
 80065fc:	4628      	mov	r0, r5
 80065fe:	4798      	blx	r3
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8006600:	2300      	movs	r3, #0
 8006602:	e02f      	b.n	8006664 <dma_stm32_init+0x88>
		return -ENODEV;
 8006604:	f06f 0612 	mvn.w	r6, #18
 8006608:	e7f6      	b.n	80065f8 <dma_stm32_init+0x1c>
		LOG_ERR("clock op failed\n");
 800660a:	2201      	movs	r2, #1
 800660c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8006610:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <dma_stm32_init+0xa8>)
 8006612:	930e      	str	r3, [sp, #56]	; 0x38
 8006614:	2300      	movs	r3, #0
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	2102      	movs	r1, #2
 800661a:	f88d 1004 	strb.w	r1, [sp, #4]
 800661e:	9901      	ldr	r1, [sp, #4]
 8006620:	910d      	str	r1, [sp, #52]	; 0x34
 8006622:	4619      	mov	r1, r3
 8006624:	f363 0100 	bfi	r1, r3, #0, #1
 8006628:	f363 0141 	bfi	r1, r3, #1, #1
 800662c:	f363 0182 	bfi	r1, r3, #2, #1
 8006630:	f363 01c5 	bfi	r1, r3, #3, #3
 8006634:	f362 1188 	bfi	r1, r2, #6, #3
 8006638:	2208      	movs	r2, #8
 800663a:	f362 2152 	bfi	r1, r2, #9, #10
 800663e:	f363 41de 	bfi	r1, r3, #19, #12
 8006642:	f363 71df 	bfi	r1, r3, #31, #1
 8006646:	aa0d      	add	r2, sp, #52	; 0x34
 8006648:	480f      	ldr	r0, [pc, #60]	; (8006688 <dma_stm32_init+0xac>)
 800664a:	f008 fe87 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EIO;
 800664e:	f06f 0604 	mvn.w	r6, #4
 8006652:	e011      	b.n	8006678 <dma_stm32_init+0x9c>
		config->streams[i].busy = false;
 8006654:	69a2      	ldr	r2, [r4, #24]
 8006656:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800665a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800665e:	2100      	movs	r1, #0
 8006660:	7191      	strb	r1, [r2, #6]
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8006662:	3301      	adds	r3, #1
 8006664:	6962      	ldr	r2, [r4, #20]
 8006666:	4293      	cmp	r3, r2
 8006668:	d3f4      	bcc.n	8006654 <dma_stm32_init+0x78>
	((struct dma_stm32_data *)dev->data)->dma_ctx.magic = 0;
 800666a:	692a      	ldr	r2, [r5, #16]
 800666c:	2300      	movs	r3, #0
 800666e:	6013      	str	r3, [r2, #0]
	((struct dma_stm32_data *)dev->data)->dma_ctx.dma_channels = 0;
 8006670:	692a      	ldr	r2, [r5, #16]
 8006672:	6053      	str	r3, [r2, #4]
	((struct dma_stm32_data *)dev->data)->dma_ctx.atomic = 0;
 8006674:	692a      	ldr	r2, [r5, #16]
 8006676:	6093      	str	r3, [r2, #8]
}
 8006678:	4630      	mov	r0, r6
 800667a:	b010      	add	sp, #64	; 0x40
 800667c:	bd70      	pop	{r4, r5, r6, pc}
 800667e:	bf00      	nop
 8006680:	08011bf4 	.word	0x08011bf4
 8006684:	08012d80 	.word	0x08012d80
 8006688:	08011ff4 	.word	0x08011ff4

0800668c <dma_stm32_id_to_stream>:
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(stream_nr));

	return stream_nr[id];
}
 800668c:	4b01      	ldr	r3, [pc, #4]	; (8006694 <dma_stm32_id_to_stream+0x8>)
 800668e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006692:	4770      	bx	lr
 8006694:	08012f00 	.word	0x08012f00

08006698 <dma_stm32_clear_ht>:

void dma_stm32_clear_ht(DMA_TypeDef *DMAx, uint32_t id)
{
 8006698:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 800669a:	4b02      	ldr	r3, [pc, #8]	; (80066a4 <dma_stm32_clear_ht+0xc>)
 800669c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066a0:	4798      	blx	r3
}
 80066a2:	bd08      	pop	{r3, pc}
 80066a4:	08012ee4 	.word	0x08012ee4

080066a8 <dma_stm32_clear_tc>:

void dma_stm32_clear_tc(DMA_TypeDef *DMAx, uint32_t id)
{
 80066a8:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 80066aa:	4b02      	ldr	r3, [pc, #8]	; (80066b4 <dma_stm32_clear_tc+0xc>)
 80066ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066b0:	4798      	blx	r3
}
 80066b2:	bd08      	pop	{r3, pc}
 80066b4:	08012ec8 	.word	0x08012ec8

080066b8 <dma_stm32_is_ht_active>:

bool dma_stm32_is_ht_active(DMA_TypeDef *DMAx, uint32_t id)
{
 80066b8:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 80066ba:	4b04      	ldr	r3, [pc, #16]	; (80066cc <dma_stm32_is_ht_active+0x14>)
 80066bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066c0:	4798      	blx	r3
}
 80066c2:	3800      	subs	r0, #0
 80066c4:	bf18      	it	ne
 80066c6:	2001      	movne	r0, #1
 80066c8:	bd08      	pop	{r3, pc}
 80066ca:	bf00      	nop
 80066cc:	08012eac 	.word	0x08012eac

080066d0 <dma_stm32_is_tc_active>:

bool dma_stm32_is_tc_active(DMA_TypeDef *DMAx, uint32_t id)
{
 80066d0:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 80066d2:	4b04      	ldr	r3, [pc, #16]	; (80066e4 <dma_stm32_is_tc_active+0x14>)
 80066d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066d8:	4798      	blx	r3
}
 80066da:	3800      	subs	r0, #0
 80066dc:	bf18      	it	ne
 80066de:	2001      	movne	r0, #1
 80066e0:	bd08      	pop	{r3, pc}
 80066e2:	bf00      	nop
 80066e4:	08012e90 	.word	0x08012e90

080066e8 <dma_stm32_clear_te>:


void dma_stm32_clear_te(DMA_TypeDef *DMAx, uint32_t id)
{
 80066e8:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTEIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 80066ea:	4b02      	ldr	r3, [pc, #8]	; (80066f4 <dma_stm32_clear_te+0xc>)
 80066ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066f0:	4798      	blx	r3
}
 80066f2:	bd08      	pop	{r3, pc}
 80066f4:	08012e74 	.word	0x08012e74

080066f8 <dma_stm32_is_te_active>:

	func[id](DMAx);
}

bool dma_stm32_is_te_active(DMA_TypeDef *DMAx, uint32_t id)
{
 80066f8:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTEIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 80066fa:	4b04      	ldr	r3, [pc, #16]	; (800670c <dma_stm32_is_te_active+0x14>)
 80066fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006700:	4798      	blx	r3
}
 8006702:	3800      	subs	r0, #0
 8006704:	bf18      	it	ne
 8006706:	2001      	movne	r0, #1
 8006708:	bd08      	pop	{r3, pc}
 800670a:	bf00      	nop
 800670c:	08012e58 	.word	0x08012e58

08006710 <dma_stm32_is_gi_active>:

bool dma_stm32_is_gi_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8006710:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CGIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 8006712:	4b04      	ldr	r3, [pc, #16]	; (8006724 <dma_stm32_is_gi_active+0x14>)
 8006714:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006718:	4798      	blx	r3
}
 800671a:	3800      	subs	r0, #0
 800671c:	bf18      	it	ne
 800671e:	2001      	movne	r0, #1
 8006720:	bd08      	pop	{r3, pc}
 8006722:	bf00      	nop
 8006724:	08012e3c 	.word	0x08012e3c

08006728 <stm32_dma_dump_stream_irq>:

void stm32_dma_dump_stream_irq(DMA_TypeDef *dma, uint32_t id)
{
 8006728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800672c:	b08b      	sub	sp, #44	; 0x2c
 800672e:	af00      	add	r7, sp, #0
 8006730:	4604      	mov	r4, r0
 8006732:	460d      	mov	r5, r1
	LOG_INF("tc: %d, ht: %d, te: %d, gi: %d",
 8006734:	2301      	movs	r3, #1
 8006736:	813b      	strh	r3, [r7, #8]
 8006738:	f7ff ffca 	bl	80066d0 <dma_stm32_is_tc_active>
 800673c:	4629      	mov	r1, r5
 800673e:	4620      	mov	r0, r4
 8006740:	f7ff ffba 	bl	80066b8 <dma_stm32_is_ht_active>
 8006744:	4629      	mov	r1, r5
 8006746:	4620      	mov	r0, r4
 8006748:	f7ff ffd6 	bl	80066f8 <dma_stm32_is_te_active>
 800674c:	4629      	mov	r1, r5
 800674e:	4620      	mov	r0, r4
 8006750:	f7ff ffde 	bl	8006710 <dma_stm32_is_gi_active>
 8006754:	b08a      	sub	sp, #40	; 0x28
 8006756:	46e9      	mov	r9, sp
 8006758:	f119 060c 	adds.w	r6, r9, #12
 800675c:	d053      	beq.n	8006806 <stm32_dma_dump_stream_irq+0xde>
 800675e:	f04f 0818 	mov.w	r8, #24
 8006762:	2301      	movs	r3, #1
 8006764:	813b      	strh	r3, [r7, #8]
 8006766:	b12e      	cbz	r6, 8006774 <stm32_dma_dump_stream_irq+0x4c>
 8006768:	f1b8 0f04 	cmp.w	r8, #4
 800676c:	dd02      	ble.n	8006774 <stm32_dma_dump_stream_irq+0x4c>
 800676e:	4b37      	ldr	r3, [pc, #220]	; (800684c <stm32_dma_dump_stream_irq+0x124>)
 8006770:	f8c9 3010 	str.w	r3, [r9, #16]
 8006774:	4629      	mov	r1, r5
 8006776:	4620      	mov	r0, r4
 8006778:	f7ff ffaa 	bl	80066d0 <dma_stm32_is_tc_active>
 800677c:	b116      	cbz	r6, 8006784 <stm32_dma_dump_stream_irq+0x5c>
 800677e:	f1b8 0f08 	cmp.w	r8, #8
 8006782:	dc43      	bgt.n	800680c <stm32_dma_dump_stream_irq+0xe4>
 8006784:	4629      	mov	r1, r5
 8006786:	4620      	mov	r0, r4
 8006788:	f7ff ff96 	bl	80066b8 <dma_stm32_is_ht_active>
 800678c:	b116      	cbz	r6, 8006794 <stm32_dma_dump_stream_irq+0x6c>
 800678e:	f1b8 0f0c 	cmp.w	r8, #12
 8006792:	dc42      	bgt.n	800681a <stm32_dma_dump_stream_irq+0xf2>
 8006794:	4629      	mov	r1, r5
 8006796:	4620      	mov	r0, r4
 8006798:	f7ff ffae 	bl	80066f8 <dma_stm32_is_te_active>
 800679c:	b116      	cbz	r6, 80067a4 <stm32_dma_dump_stream_irq+0x7c>
 800679e:	f1b8 0f10 	cmp.w	r8, #16
 80067a2:	dc41      	bgt.n	8006828 <stm32_dma_dump_stream_irq+0x100>
 80067a4:	4629      	mov	r1, r5
 80067a6:	4620      	mov	r0, r4
 80067a8:	f7ff ffb2 	bl	8006710 <dma_stm32_is_gi_active>
 80067ac:	b116      	cbz	r6, 80067b4 <stm32_dma_dump_stream_irq+0x8c>
 80067ae:	f1b8 0f14 	cmp.w	r8, #20
 80067b2:	dc40      	bgt.n	8006836 <stm32_dma_dump_stream_irq+0x10e>
 80067b4:	f1b8 0f17 	cmp.w	r8, #23
 80067b8:	dd44      	ble.n	8006844 <stm32_dma_dump_stream_irq+0x11c>
 80067ba:	2318      	movs	r3, #24
 80067bc:	b136      	cbz	r6, 80067cc <stm32_dma_dump_stream_irq+0xa4>
 80067be:	2200      	movs	r2, #0
 80067c0:	607a      	str	r2, [r7, #4]
 80067c2:	2206      	movs	r2, #6
 80067c4:	713a      	strb	r2, [r7, #4]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	f8c9 200c 	str.w	r2, [r9, #12]
 80067cc:	2100      	movs	r1, #0
 80067ce:	f36f 0100 	bfc	r1, #0, #1
 80067d2:	f36f 0141 	bfc	r1, #1, #1
 80067d6:	f36f 0182 	bfc	r1, #2, #1
 80067da:	f36f 01c5 	bfc	r1, #3, #3
 80067de:	2203      	movs	r2, #3
 80067e0:	f362 1188 	bfi	r1, r2, #6, #3
 80067e4:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80067e8:	f363 2152 	bfi	r1, r3, #9, #10
 80067ec:	f36f 41de 	bfc	r1, #19, #12
 80067f0:	f36f 71df 	bfc	r1, #31, #1
 80067f4:	2300      	movs	r3, #0
 80067f6:	4632      	mov	r2, r6
 80067f8:	4815      	ldr	r0, [pc, #84]	; (8006850 <stm32_dma_dump_stream_irq+0x128>)
 80067fa:	f008 fdaf 	bl	800f35c <z_impl_z_log_msg2_static_create>
		dma_stm32_is_tc_active(dma, id),
		dma_stm32_is_ht_active(dma, id),
		dma_stm32_is_te_active(dma, id),
		dma_stm32_is_gi_active(dma, id));
}
 80067fe:	372c      	adds	r7, #44	; 0x2c
 8006800:	46bd      	mov	sp, r7
 8006802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_INF("tc: %d, ht: %d, te: %d, gi: %d",
 8006806:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 800680a:	e7aa      	b.n	8006762 <stm32_dma_dump_stream_irq+0x3a>
 800680c:	4629      	mov	r1, r5
 800680e:	4620      	mov	r0, r4
 8006810:	f7ff ff5e 	bl	80066d0 <dma_stm32_is_tc_active>
 8006814:	f8c9 0014 	str.w	r0, [r9, #20]
 8006818:	e7b4      	b.n	8006784 <stm32_dma_dump_stream_irq+0x5c>
 800681a:	4629      	mov	r1, r5
 800681c:	4620      	mov	r0, r4
 800681e:	f7ff ff4b 	bl	80066b8 <dma_stm32_is_ht_active>
 8006822:	f8c9 0018 	str.w	r0, [r9, #24]
 8006826:	e7b5      	b.n	8006794 <stm32_dma_dump_stream_irq+0x6c>
 8006828:	4629      	mov	r1, r5
 800682a:	4620      	mov	r0, r4
 800682c:	f7ff ff64 	bl	80066f8 <dma_stm32_is_te_active>
 8006830:	f8c9 001c 	str.w	r0, [r9, #28]
 8006834:	e7b6      	b.n	80067a4 <stm32_dma_dump_stream_irq+0x7c>
 8006836:	4629      	mov	r1, r5
 8006838:	4620      	mov	r0, r4
 800683a:	f7ff ff69 	bl	8006710 <dma_stm32_is_gi_active>
 800683e:	f8c9 0020 	str.w	r0, [r9, #32]
 8006842:	e7b7      	b.n	80067b4 <stm32_dma_dump_stream_irq+0x8c>
 8006844:	f06f 031b 	mvn.w	r3, #27
 8006848:	e7b8      	b.n	80067bc <stm32_dma_dump_stream_irq+0x94>
 800684a:	bf00      	nop
 800684c:	08012e04 	.word	0x08012e04
 8006850:	08011ffc 	.word	0x08011ffc

08006854 <stm32_dma_is_tc_irq_active>:

bool stm32_dma_is_tc_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4604      	mov	r4, r0
 8006858:	460d      	mov	r5, r1
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 800685a:	4608      	mov	r0, r1
 800685c:	f7ff ff16 	bl	800668c <dma_stm32_id_to_stream>
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8006860:	4b08      	ldr	r3, [pc, #32]	; (8006884 <stm32_dma_is_tc_irq_active+0x30>)
 8006862:	5c1b      	ldrb	r3, [r3, r0]
 8006864:	58e3      	ldr	r3, [r4, r3]
                   DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 8006866:	f013 0f02 	tst.w	r3, #2
 800686a:	d006      	beq.n	800687a <stm32_dma_is_tc_irq_active+0x26>
	       dma_stm32_is_tc_active(dma, id);
 800686c:	4629      	mov	r1, r5
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff ff2e 	bl	80066d0 <dma_stm32_is_tc_active>
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 8006874:	b118      	cbz	r0, 800687e <stm32_dma_is_tc_irq_active+0x2a>
 8006876:	2001      	movs	r0, #1
 8006878:	e000      	b.n	800687c <stm32_dma_is_tc_irq_active+0x28>
 800687a:	2000      	movs	r0, #0
}
 800687c:	bd38      	pop	{r3, r4, r5, pc}
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 800687e:	2000      	movs	r0, #0
 8006880:	e7fc      	b.n	800687c <stm32_dma_is_tc_irq_active+0x28>
 8006882:	bf00      	nop
 8006884:	08012e34 	.word	0x08012e34

08006888 <stm32_dma_is_ht_irq_active>:

bool stm32_dma_is_ht_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	4604      	mov	r4, r0
 800688c:	460d      	mov	r5, r1
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 800688e:	4608      	mov	r0, r1
 8006890:	f7ff fefc 	bl	800668c <dma_stm32_id_to_stream>
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8006894:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <stm32_dma_is_ht_irq_active+0x30>)
 8006896:	5c1b      	ldrb	r3, [r3, r0]
 8006898:	58e3      	ldr	r3, [r4, r3]
                   DMA_CCR_HTIE) == (DMA_CCR_HTIE)) ? 1UL : 0UL);
 800689a:	f013 0f04 	tst.w	r3, #4
 800689e:	d006      	beq.n	80068ae <stm32_dma_is_ht_irq_active+0x26>
	       dma_stm32_is_ht_active(dma, id);
 80068a0:	4629      	mov	r1, r5
 80068a2:	4620      	mov	r0, r4
 80068a4:	f7ff ff08 	bl	80066b8 <dma_stm32_is_ht_active>
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 80068a8:	b118      	cbz	r0, 80068b2 <stm32_dma_is_ht_irq_active+0x2a>
 80068aa:	2001      	movs	r0, #1
 80068ac:	e000      	b.n	80068b0 <stm32_dma_is_ht_irq_active+0x28>
 80068ae:	2000      	movs	r0, #0
}
 80068b0:	bd38      	pop	{r3, r4, r5, pc}
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 80068b2:	2000      	movs	r0, #0
 80068b4:	e7fc      	b.n	80068b0 <stm32_dma_is_ht_irq_active+0x28>
 80068b6:	bf00      	nop
 80068b8:	08012e34 	.word	0x08012e34

080068bc <stm32_dma_enable_stream>:
	/* Preserve for future amending. */
	return false;
}

void stm32_dma_enable_stream(DMA_TypeDef *dma, uint32_t id)
{
 80068bc:	b510      	push	{r4, lr}
 80068be:	4604      	mov	r4, r0
	LL_DMA_EnableChannel(dma, dma_stm32_id_to_stream(id));
 80068c0:	4608      	mov	r0, r1
 80068c2:	f7ff fee3 	bl	800668c <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80068c6:	4b03      	ldr	r3, [pc, #12]	; (80068d4 <stm32_dma_enable_stream+0x18>)
 80068c8:	5c1a      	ldrb	r2, [r3, r0]
 80068ca:	58a3      	ldr	r3, [r4, r2]
 80068cc:	f043 0301 	orr.w	r3, r3, #1
 80068d0:	50a3      	str	r3, [r4, r2]
}
 80068d2:	bd10      	pop	{r4, pc}
 80068d4:	08012e34 	.word	0x08012e34

080068d8 <stm32_dma_disable_stream>:

int stm32_dma_disable_stream(DMA_TypeDef *dma, uint32_t id)
{
 80068d8:	b510      	push	{r4, lr}
 80068da:	4604      	mov	r4, r0
	LL_DMA_DisableChannel(dma, dma_stm32_id_to_stream(id));
 80068dc:	4608      	mov	r0, r1
 80068de:	f7ff fed5 	bl	800668c <dma_stm32_id_to_stream>
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80068e2:	4b07      	ldr	r3, [pc, #28]	; (8006900 <stm32_dma_disable_stream+0x28>)
 80068e4:	5c1b      	ldrb	r3, [r3, r0]
 80068e6:	58e2      	ldr	r2, [r4, r3]
 80068e8:	f022 0201 	bic.w	r2, r2, #1
 80068ec:	50e2      	str	r2, [r4, r3]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80068ee:	58e3      	ldr	r3, [r4, r3]
                  DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80068f0:	f013 0f01 	tst.w	r3, #1
 80068f4:	d002      	beq.n	80068fc <stm32_dma_disable_stream+0x24>

	if (!LL_DMA_IsEnabledChannel(dma, dma_stm32_id_to_stream(id))) {
		return 0;
	}

	return -EAGAIN;
 80068f6:	f06f 000a 	mvn.w	r0, #10
}
 80068fa:	bd10      	pop	{r4, pc}
		return 0;
 80068fc:	2000      	movs	r0, #0
 80068fe:	e7fc      	b.n	80068fa <stm32_dma_disable_stream+0x22>
 8006900:	08012e34 	.word	0x08012e34

08006904 <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006904:	424a      	negs	r2, r1
 8006906:	f001 0303 	and.w	r3, r1, #3
 800690a:	f002 0203 	and.w	r2, r2, #3
 800690e:	bf58      	it	pl
 8006910:	4253      	negpl	r3, r2
 8006912:	3304      	adds	r3, #4
 8006914:	009a      	lsls	r2, r3, #2
 8006916:	230f      	movs	r3, #15
 8006918:	4093      	lsls	r3, r2
 800691a:	460a      	mov	r2, r1
 800691c:	2900      	cmp	r1, #0
 800691e:	db19      	blt.n	8006954 <gpio_stm32_set_exti_source+0x50>
 8006920:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8006924:	fa5f fc83 	uxtb.w	ip, r3
 8006928:	f10c 0102 	add.w	r1, ip, #2
 800692c:	4a0b      	ldr	r2, [pc, #44]	; (800695c <gpio_stm32_set_exti_source+0x58>)
 800692e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8006932:	0c1a      	lsrs	r2, r3, #16
 8006934:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006938:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800693c:	b162      	cbz	r2, 8006958 <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 800693e:	fab2 f282 	clz	r2, r2
 8006942:	fa00 f202 	lsl.w	r2, r0, r2
 8006946:	431a      	orrs	r2, r3
 8006948:	f10c 0c02 	add.w	ip, ip, #2
 800694c:	4b03      	ldr	r3, [pc, #12]	; (800695c <gpio_stm32_set_exti_source+0x58>)
 800694e:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 8006952:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006954:	1cca      	adds	r2, r1, #3
 8006956:	e7e3      	b.n	8006920 <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 8006958:	2220      	movs	r2, #32
 800695a:	e7f2      	b.n	8006942 <gpio_stm32_set_exti_source+0x3e>
 800695c:	40010000 	.word	0x40010000

08006960 <gpio_stm32_get_exti_source>:
 8006960:	4242      	negs	r2, r0
 8006962:	f000 0303 	and.w	r3, r0, #3
 8006966:	f002 0203 	and.w	r2, r2, #3
 800696a:	bf58      	it	pl
 800696c:	4253      	negpl	r3, r2
 800696e:	3304      	adds	r3, #4
 8006970:	009a      	lsls	r2, r3, #2
 8006972:	230f      	movs	r3, #15
 8006974:	4093      	lsls	r3, r2
 8006976:	4602      	mov	r2, r0
 8006978:	2800      	cmp	r0, #0
 800697a:	db10      	blt.n	800699e <gpio_stm32_get_exti_source+0x3e>
 800697c:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8006980:	b2c3      	uxtb	r3, r0
 8006982:	3302      	adds	r3, #2
 8006984:	4a08      	ldr	r2, [pc, #32]	; (80069a8 <gpio_stm32_get_exti_source+0x48>)
 8006986:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800698a:	0c03      	lsrs	r3, r0, #16
 800698c:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006990:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8006994:	b12b      	cbz	r3, 80069a2 <gpio_stm32_get_exti_source+0x42>
  return __builtin_clz(value);
 8006996:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 800699a:	40d8      	lsrs	r0, r3
 800699c:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800699e:	1cc2      	adds	r2, r0, #3
 80069a0:	e7ec      	b.n	800697c <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 80069a2:	2320      	movs	r3, #32
 80069a4:	e7f9      	b.n	800699a <gpio_stm32_get_exti_source+0x3a>
 80069a6:	bf00      	nop
 80069a8:	40010000 	.word	0x40010000

080069ac <gpio_stm32_clock_request>:
{
 80069ac:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 80069ae:	6844      	ldr	r4, [r0, #4]
	if (on) {
 80069b0:	b169      	cbz	r1, 80069ce <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 80069b2:	340c      	adds	r4, #12
 80069b4:	480d      	ldr	r0, [pc, #52]	; (80069ec <gpio_stm32_clock_request+0x40>)
 80069b6:	f00a f825 	bl	8010a04 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80069ba:	b128      	cbz	r0, 80069c8 <gpio_stm32_clock_request+0x1c>
	const struct clock_control_driver_api *api =
 80069bc:	480b      	ldr	r0, [pc, #44]	; (80069ec <gpio_stm32_clock_request+0x40>)
 80069be:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4621      	mov	r1, r4
 80069c4:	4798      	blx	r3
}
 80069c6:	bd10      	pop	{r4, pc}
		return -ENODEV;
 80069c8:	f06f 0012 	mvn.w	r0, #18
 80069cc:	e7fb      	b.n	80069c6 <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 80069ce:	340c      	adds	r4, #12
 80069d0:	4806      	ldr	r0, [pc, #24]	; (80069ec <gpio_stm32_clock_request+0x40>)
 80069d2:	f00a f817 	bl	8010a04 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_off(const struct device *dev,
				    clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 80069d6:	b128      	cbz	r0, 80069e4 <gpio_stm32_clock_request+0x38>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 80069d8:	4804      	ldr	r0, [pc, #16]	; (80069ec <gpio_stm32_clock_request+0x40>)
 80069da:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	4621      	mov	r1, r4
 80069e0:	4798      	blx	r3
 80069e2:	e7f0      	b.n	80069c6 <gpio_stm32_clock_request+0x1a>
		return -ENODEV;
 80069e4:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 80069e8:	e7ed      	b.n	80069c6 <gpio_stm32_clock_request+0x1a>
 80069ea:	bf00      	nop
 80069ec:	08011bf4 	.word	0x08011bf4

080069f0 <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	4606      	mov	r6, r0
 80069f6:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 80069f8:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <gpio_stm32_enable_int+0x40>)
 80069fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80069fe:	ab02      	add	r3, sp, #8
 8006a00:	e903 0003 	stmdb	r3, {r0, r1}
 8006a04:	480b      	ldr	r0, [pc, #44]	; (8006a34 <gpio_stm32_enable_int+0x44>)
 8006a06:	f009 fffd 	bl	8010a04 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8006a0a:	b148      	cbz	r0, 8006a20 <gpio_stm32_enable_int+0x30>
	const struct clock_control_driver_api *api =
 8006a0c:	4809      	ldr	r0, [pc, #36]	; (8006a34 <gpio_stm32_enable_int+0x44>)
 8006a0e:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4669      	mov	r1, sp
 8006a14:	4798      	blx	r3
 8006a16:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 8006a18:	b12c      	cbz	r4, 8006a26 <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	b002      	add	sp, #8
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
 8006a20:	f06f 0412 	mvn.w	r4, #18
 8006a24:	e7f8      	b.n	8006a18 <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 8006a26:	4629      	mov	r1, r5
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f7ff ff6b 	bl	8006904 <gpio_stm32_set_exti_source>
	return 0;
 8006a2e:	e7f4      	b.n	8006a1a <gpio_stm32_enable_int+0x2a>
 8006a30:	080120f8 	.word	0x080120f8
 8006a34:	08011bf4 	.word	0x08011bf4

08006a38 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 8006a3e:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8006a40:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8006a42:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006a46:	d01f      	beq.n	8006a88 <gpio_stm32_pin_interrupt_configure+0x50>
 8006a48:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8006a4a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006a4e:	d034      	beq.n	8006aba <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8006a50:	491d      	ldr	r1, [pc, #116]	; (8006ac8 <gpio_stm32_pin_interrupt_configure+0x90>)
 8006a52:	4620      	mov	r0, r4
 8006a54:	f7fe ff4a 	bl	80058ec <stm32_exti_set_callback>
 8006a58:	4606      	mov	r6, r0
 8006a5a:	bb88      	cbnz	r0, 8006ac0 <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	68b8      	ldr	r0, [r7, #8]
 8006a60:	f7ff ffc6 	bl	80069f0 <gpio_stm32_enable_int>

	switch (trig) {
 8006a64:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8006a68:	d023      	beq.n	8006ab2 <gpio_stm32_pin_interrupt_configure+0x7a>
 8006a6a:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 8006a6e:	d022      	beq.n	8006ab6 <gpio_stm32_pin_interrupt_configure+0x7e>
 8006a70:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8006a74:	d01b      	beq.n	8006aae <gpio_stm32_pin_interrupt_configure+0x76>
 8006a76:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7fe feff 	bl	800587c <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f7fe fee0 	bl	8005844 <stm32_exti_enable>

exit:
	return err;
}
 8006a84:	4630      	mov	r0, r6
 8006a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f7ff ff69 	bl	8006960 <gpio_stm32_get_exti_source>
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	4298      	cmp	r0, r3
 8006a92:	d001      	beq.n	8006a98 <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 8006a94:	2600      	movs	r6, #0
		goto exit;
 8006a96:	e7f5      	b.n	8006a84 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f7fe fee3 	bl	8005864 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f7fe ff36 	bl	8005910 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f7fe fee8 	bl	800587c <stm32_exti_trigger>
 8006aac:	e7f2      	b.n	8006a94 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 8006aae:	2102      	movs	r1, #2
 8006ab0:	e7e2      	b.n	8006a78 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	e7e0      	b.n	8006a78 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 8006ab6:	2103      	movs	r1, #3
 8006ab8:	e7de      	b.n	8006a78 <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 8006aba:	f06f 0685 	mvn.w	r6, #133	; 0x85
 8006abe:	e7e1      	b.n	8006a84 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 8006ac0:	f06f 060f 	mvn.w	r6, #15
	return err;
 8006ac4:	e7de      	b.n	8006a84 <gpio_stm32_pin_interrupt_configure+0x4c>
 8006ac6:	bf00      	nop
 8006ac8:	0800f9df 	.word	0x0800f9df

08006acc <spi_stm32_get_err>:
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
}

static int spi_stm32_get_err(SPI_TypeDef *spi)
{
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8006acc:	6883      	ldr	r3, [r0, #8]

	if (sr & SPI_STM32_ERR_MSK) {
 8006ace:	f413 73b8 	ands.w	r3, r3, #368	; 0x170
 8006ad2:	d101      	bne.n	8006ad8 <spi_stm32_get_err+0xc>
		}

		return -EIO;
	}

	return 0;
 8006ad4:	2000      	movs	r0, #0
}
 8006ad6:	4770      	bx	lr
{
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	4604      	mov	r4, r0
		LOG_ERR("%s: err=%d", __func__,
 8006ade:	9303      	str	r3, [sp, #12]
 8006ae0:	4b0c      	ldr	r3, [pc, #48]	; (8006b14 <spi_stm32_get_err+0x48>)
 8006ae2:	9302      	str	r3, [sp, #8]
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <spi_stm32_get_err+0x4c>)
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	2000      	movs	r0, #0
 8006aea:	9000      	str	r0, [sp, #0]
 8006aec:	4603      	mov	r3, r0
 8006aee:	2201      	movs	r2, #1
 8006af0:	490a      	ldr	r1, [pc, #40]	; (8006b1c <spi_stm32_get_err+0x50>)
 8006af2:	f009 f90b 	bl	800fd0c <z_log_msg2_runtime_create>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8006af6:	68a3      	ldr	r3, [r4, #8]
 8006af8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006afc:	d005      	beq.n	8006b0a <spi_stm32_get_err+0x3e>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8006afe:	68e3      	ldr	r3, [r4, #12]
 8006b00:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 8006b02:	9b05      	ldr	r3, [sp, #20]
  tmpreg = SPIx->SR;
 8006b04:	68a3      	ldr	r3, [r4, #8]
 8006b06:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 8006b08:	9b05      	ldr	r3, [sp, #20]
		return -EIO;
 8006b0a:	f06f 0004 	mvn.w	r0, #4
}
 8006b0e:	b006      	add	sp, #24
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	bf00      	nop
 8006b14:	080130f0 	.word	0x080130f0
 8006b18:	08012fe8 	.word	0x08012fe8
 8006b1c:	08012034 	.word	0x08012034

08006b20 <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 8006b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b24:	b098      	sub	sp, #96	; 0x60
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = dev->config;
 8006b2a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8006b2e:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 8006b30:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006b34:	f8df c298 	ldr.w	ip, [pc, #664]	; 8006dd0 <spi_stm32_configure+0x2b0>
 8006b38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b3e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8006b42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 8006b46:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 8006b4a:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 8006b4c:	42ab      	cmp	r3, r5
 8006b4e:	f000 8139 	beq.w	8006dc4 <spi_stm32_configure+0x2a4>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8006b52:	88ab      	ldrh	r3, [r5, #4]
 8006b54:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8006b58:	2a08      	cmp	r2, #8
 8006b5a:	d002      	beq.n	8006b62 <spi_stm32_configure+0x42>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8006b5c:	2a10      	cmp	r2, #16
 8006b5e:	f040 8133 	bne.w	8006dc8 <spi_stm32_configure+0x2a8>
		return -ENOTSUP;
	}

	/* configure the frame format Motorola (default) or TI */
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 8006b62:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006b66:	d11c      	bne.n	8006ba2 <spi_stm32_configure+0x82>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8006b68:	6863      	ldr	r3, [r4, #4]
 8006b6a:	f023 0310 	bic.w	r3, r3, #16
 8006b6e:	6063      	str	r3, [r4, #4]
 8006b70:	4898      	ldr	r0, [pc, #608]	; (8006dd4 <spi_stm32_configure+0x2b4>)
 8006b72:	f009 ff47 	bl	8010a04 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 8006b76:	b1c8      	cbz	r0, 8006bac <spi_stm32_configure+0x8c>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8006b78:	4b96      	ldr	r3, [pc, #600]	; (8006dd4 <spi_stm32_configure+0x2b4>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	b1c3      	cbz	r3, 8006bb2 <spi_stm32_configure+0x92>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8006b80:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006b84:	4641      	mov	r1, r8
 8006b86:	4893      	ldr	r0, [pc, #588]	; (8006dd4 <spi_stm32_configure+0x2b4>)
 8006b88:	4798      	blx	r3
	} else {
		LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif
}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	db14      	blt.n	8006bb8 <spi_stm32_configure+0x98>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8006b8e:	2301      	movs	r3, #1
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	dc35      	bgt.n	8006c00 <spi_stm32_configure+0xe0>
		uint32_t clk = clock >> br;
 8006b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b96:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 8006b98:	6829      	ldr	r1, [r5, #0]
 8006b9a:	4291      	cmp	r1, r2
 8006b9c:	d230      	bcs.n	8006c00 <spi_stm32_configure+0xe0>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	e7f6      	b.n	8006b90 <spi_stm32_configure+0x70>
 8006ba2:	6863      	ldr	r3, [r4, #4]
 8006ba4:	f043 0310 	orr.w	r3, r3, #16
 8006ba8:	6063      	str	r3, [r4, #4]
}
 8006baa:	e7e1      	b.n	8006b70 <spi_stm32_configure+0x50>
		return -ENODEV;
 8006bac:	f06f 0012 	mvn.w	r0, #18
 8006bb0:	e7eb      	b.n	8006b8a <spi_stm32_configure+0x6a>
		return -ENOSYS;
 8006bb2:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8006bb6:	e7e8      	b.n	8006b8a <spi_stm32_configure+0x6a>
		LOG_ERR("Failed call clock_control_get_rate");
 8006bb8:	2201      	movs	r2, #1
 8006bba:	80ba      	strh	r2, [r7, #4]
 8006bbc:	4b86      	ldr	r3, [pc, #536]	; (8006dd8 <spi_stm32_configure+0x2b8>)
 8006bbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	2102      	movs	r1, #2
 8006bc6:	7039      	strb	r1, [r7, #0]
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6579      	str	r1, [r7, #84]	; 0x54
 8006bcc:	4619      	mov	r1, r3
 8006bce:	f363 0100 	bfi	r1, r3, #0, #1
 8006bd2:	f363 0141 	bfi	r1, r3, #1, #1
 8006bd6:	f363 0182 	bfi	r1, r3, #2, #1
 8006bda:	f363 01c5 	bfi	r1, r3, #3, #3
 8006bde:	f362 1188 	bfi	r1, r2, #6, #3
 8006be2:	2208      	movs	r2, #8
 8006be4:	f362 2152 	bfi	r1, r2, #9, #10
 8006be8:	f363 41de 	bfi	r1, r3, #19, #12
 8006bec:	f363 71df 	bfi	r1, r3, #31, #1
 8006bf0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006bf4:	4879      	ldr	r0, [pc, #484]	; (8006ddc <spi_stm32_configure+0x2bc>)
 8006bf6:	f008 fbb1 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EIO;
 8006bfa:	f06f 0004 	mvn.w	r0, #4
 8006bfe:	e059      	b.n	8006cb4 <spi_stm32_configure+0x194>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	dc5b      	bgt.n	8006cbc <spi_stm32_configure+0x19c>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006c04:	6822      	ldr	r2, [r4, #0]
 8006c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0a:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006c12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c16:	f853 3c38 	ldr.w	r3, [r3, #-56]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8006c1a:	6822      	ldr	r2, [r4, #0]
 8006c1c:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8006c20:	4313      	orrs	r3, r2
 8006c22:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8006c24:	88ab      	ldrh	r3, [r5, #4]
 8006c26:	f013 0f02 	tst.w	r3, #2
 8006c2a:	f000 8098 	beq.w	8006d5e <spi_stm32_configure+0x23e>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	f043 0302 	orr.w	r3, r3, #2
 8006c34:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8006c36:	88ab      	ldrh	r3, [r5, #4]
 8006c38:	f013 0f04 	tst.w	r3, #4
 8006c3c:	f000 8094 	beq.w	8006d68 <spi_stm32_configure+0x248>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	f043 0301 	orr.w	r3, r3, #1
 8006c46:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 8006c4e:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 8006c50:	88ab      	ldrh	r3, [r5, #4]
 8006c52:	f013 0f10 	tst.w	r3, #16
 8006c56:	f000 808c 	beq.w	8006d72 <spi_stm32_configure+0x252>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c60:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c68:	6023      	str	r3, [r4, #0]
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
	}

	LL_SPI_DisableCRC(spi);

	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8006c6a:	68ab      	ldr	r3, [r5, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 8085 	beq.w	8006d7c <spi_stm32_configure+0x25c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c78:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8006c7a:	6863      	ldr	r3, [r4, #4]
 8006c7c:	f023 0304 	bic.w	r3, r3, #4
 8006c80:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 8006c82:	88ab      	ldrh	r3, [r5, #4]
 8006c84:	f013 0f01 	tst.w	r3, #1
 8006c88:	f000 8090 	beq.w	8006dac <spi_stm32_configure+0x28c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 8006c92:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8006c94:	88ab      	ldrh	r3, [r5, #4]
 8006c96:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8006c9a:	2b08      	cmp	r3, #8
 8006c9c:	f000 808b 	beq.w	8006db6 <spi_stm32_configure+0x296>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8006ca0:	6863      	ldr	r3, [r4, #4]
 8006ca2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8006ca6:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cae:	6063      	str	r3, [r4, #4]
#if DT_HAS_COMPAT_STATUS_OKAY(st_stm32_spi_fifo)
	ll_func_set_fifo_threshold_8bit(spi);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 8006cb0:	6035      	str	r5, [r6, #0]
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 8006cb2:	2000      	movs	r0, #0
}
 8006cb4:	3760      	adds	r7, #96	; 0x60
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	80bb      	strh	r3, [r7, #4]
 8006cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cc2:	fa20 f603 	lsr.w	r6, r0, r3
 8006cc6:	0a00      	lsrs	r0, r0, #8
 8006cc8:	466c      	mov	r4, sp
 8006cca:	b088      	sub	sp, #32
 8006ccc:	466b      	mov	r3, sp
 8006cce:	f113 020c 	adds.w	r2, r3, #12
 8006cd2:	d03e      	beq.n	8006d52 <spi_stm32_configure+0x232>
 8006cd4:	2114      	movs	r1, #20
 8006cd6:	f04f 0c01 	mov.w	ip, #1
 8006cda:	f8a7 c004 	strh.w	ip, [r7, #4]
 8006cde:	b12a      	cbz	r2, 8006cec <spi_stm32_configure+0x1cc>
 8006ce0:	2904      	cmp	r1, #4
 8006ce2:	dd03      	ble.n	8006cec <spi_stm32_configure+0x1cc>
 8006ce4:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8006de0 <spi_stm32_configure+0x2c0>
 8006ce8:	f8c3 c010 	str.w	ip, [r3, #16]
 8006cec:	682d      	ldr	r5, [r5, #0]
 8006cee:	b112      	cbz	r2, 8006cf6 <spi_stm32_configure+0x1d6>
 8006cf0:	2908      	cmp	r1, #8
 8006cf2:	dd00      	ble.n	8006cf6 <spi_stm32_configure+0x1d6>
 8006cf4:	615d      	str	r5, [r3, #20]
 8006cf6:	b112      	cbz	r2, 8006cfe <spi_stm32_configure+0x1de>
 8006cf8:	290c      	cmp	r1, #12
 8006cfa:	dd00      	ble.n	8006cfe <spi_stm32_configure+0x1de>
 8006cfc:	619e      	str	r6, [r3, #24]
 8006cfe:	b112      	cbz	r2, 8006d06 <spi_stm32_configure+0x1e6>
 8006d00:	2910      	cmp	r1, #16
 8006d02:	dd00      	ble.n	8006d06 <spi_stm32_configure+0x1e6>
 8006d04:	61d8      	str	r0, [r3, #28]
 8006d06:	2913      	cmp	r1, #19
 8006d08:	dd26      	ble.n	8006d58 <spi_stm32_configure+0x238>
 8006d0a:	2014      	movs	r0, #20
 8006d0c:	b12a      	cbz	r2, 8006d1a <spi_stm32_configure+0x1fa>
 8006d0e:	2100      	movs	r1, #0
 8006d10:	6039      	str	r1, [r7, #0]
 8006d12:	2105      	movs	r1, #5
 8006d14:	7039      	strb	r1, [r7, #0]
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	60d9      	str	r1, [r3, #12]
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	f36f 0100 	bfc	r1, #0, #1
 8006d20:	f36f 0141 	bfc	r1, #1, #1
 8006d24:	f36f 0182 	bfc	r1, #2, #1
 8006d28:	f36f 01c5 	bfc	r1, #3, #3
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f363 1188 	bfi	r1, r3, #6, #3
 8006d32:	f400 707d 	and.w	r0, r0, #1012	; 0x3f4
 8006d36:	f360 2152 	bfi	r1, r0, #9, #10
 8006d3a:	f36f 41de 	bfc	r1, #19, #12
 8006d3e:	f36f 71df 	bfc	r1, #31, #1
 8006d42:	2300      	movs	r3, #0
 8006d44:	4825      	ldr	r0, [pc, #148]	; (8006ddc <spi_stm32_configure+0x2bc>)
 8006d46:	f008 fb09 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8006d4a:	46a5      	mov	sp, r4
		return -EINVAL;
 8006d4c:	f06f 0015 	mvn.w	r0, #21
 8006d50:	e7b0      	b.n	8006cb4 <spi_stm32_configure+0x194>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8006d52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d56:	e7be      	b.n	8006cd6 <spi_stm32_configure+0x1b6>
 8006d58:	f06f 001b 	mvn.w	r0, #27
 8006d5c:	e7d6      	b.n	8006d0c <spi_stm32_configure+0x1ec>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	f023 0302 	bic.w	r3, r3, #2
 8006d64:	6023      	str	r3, [r4, #0]
}
 8006d66:	e766      	b.n	8006c36 <spi_stm32_configure+0x116>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	f023 0301 	bic.w	r3, r3, #1
 8006d6e:	6023      	str	r3, [r4, #0]
}
 8006d70:	e76a      	b.n	8006c48 <spi_stm32_configure+0x128>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d78:	6023      	str	r3, [r4, #0]
}
 8006d7a:	e772      	b.n	8006c62 <spi_stm32_configure+0x142>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8006d7c:	88ab      	ldrh	r3, [r5, #4]
 8006d7e:	f013 0f01 	tst.w	r3, #1
 8006d82:	d008      	beq.n	8006d96 <spi_stm32_configure+0x276>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d8a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8006d8c:	6863      	ldr	r3, [r4, #4]
 8006d8e:	f023 0304 	bic.w	r3, r3, #4
 8006d92:	6063      	str	r3, [r4, #4]
}
 8006d94:	e775      	b.n	8006c82 <spi_stm32_configure+0x162>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006da0:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8006da2:	6863      	ldr	r3, [r4, #4]
 8006da4:	f043 0304 	orr.w	r3, r3, #4
 8006da8:	6063      	str	r3, [r4, #4]
}
 8006daa:	e76a      	b.n	8006c82 <spi_stm32_configure+0x162>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8006db2:	6023      	str	r3, [r4, #0]
}
 8006db4:	e76e      	b.n	8006c94 <spi_stm32_configure+0x174>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8006db6:	6863      	ldr	r3, [r4, #4]
 8006db8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006dbc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006dc0:	6063      	str	r3, [r4, #4]
}
 8006dc2:	e771      	b.n	8006ca8 <spi_stm32_configure+0x188>
		return 0;
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	e775      	b.n	8006cb4 <spi_stm32_configure+0x194>
		return -ENOTSUP;
 8006dc8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8006dcc:	e772      	b.n	8006cb4 <spi_stm32_configure+0x194>
 8006dce:	bf00      	nop
 8006dd0:	08012100 	.word	0x08012100
 8006dd4:	08011bf4 	.word	0x08011bf4
 8006dd8:	08012ff4 	.word	0x08012ff4
 8006ddc:	08012034 	.word	0x08012034
 8006de0:	08013018 	.word	0x08013018

08006de4 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8006de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006de8:	b09b      	sub	sp, #108	; 0x6c
 8006dea:	4604      	mov	r4, r0
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8006dec:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8006dee:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8006df2:	4873      	ldr	r0, [pc, #460]	; (8006fc0 <spi_stm32_init+0x1dc>)
 8006df4:	f009 fe06 	bl	8010a04 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8006df8:	b1f8      	cbz	r0, 8006e3a <spi_stm32_init+0x56>
	const struct clock_control_driver_api *api =
 8006dfa:	4871      	ldr	r0, [pc, #452]	; (8006fc0 <spi_stm32_init+0x1dc>)
 8006dfc:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4641      	mov	r1, r8
 8006e02:	4798      	blx	r3
 8006e04:	4681      	mov	r9, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8006e06:	f1b9 0f00 	cmp.w	r9, #0
 8006e0a:	d119      	bne.n	8006e40 <spi_stm32_init+0x5c>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8006e0c:	aa06      	add	r2, sp, #24
 8006e0e:	2100      	movs	r1, #0
 8006e10:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8006e14:	f009 fd94 	bl	8010940 <pinctrl_lookup_state>
	if (ret < 0) {
 8006e18:	1e07      	subs	r7, r0, #0
 8006e1a:	db06      	blt.n	8006e2a <spi_stm32_init+0x46>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8006e1c:	9b06      	ldr	r3, [sp, #24]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8006e1e:	2200      	movs	r2, #0
 8006e20:	7919      	ldrb	r1, [r3, #4]
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	f009 fda6 	bl	8010974 <pinctrl_configure_pins>
 8006e28:	4607      	mov	r7, r0
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 8006e2a:	2f00      	cmp	r7, #0
 8006e2c:	db2d      	blt.n	8006e8a <spi_stm32_init+0xa6>
			return err;
		}
	}

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
 8006e2e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006e32:	4620      	mov	r0, r4
 8006e34:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8006e36:	68ac      	ldr	r4, [r5, #8]
 8006e38:	e06c      	b.n	8006f14 <spi_stm32_init+0x130>
		return -ENODEV;
 8006e3a:	f06f 0912 	mvn.w	r9, #18
 8006e3e:	e7e2      	b.n	8006e06 <spi_stm32_init+0x22>
		LOG_ERR("Could not enable SPI clock");
 8006e40:	2201      	movs	r2, #1
 8006e42:	f8ad 2018 	strh.w	r2, [sp, #24]
 8006e46:	4b5f      	ldr	r3, [pc, #380]	; (8006fc4 <spi_stm32_init+0x1e0>)
 8006e48:	9318      	str	r3, [sp, #96]	; 0x60
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	2102      	movs	r1, #2
 8006e50:	f88d 1014 	strb.w	r1, [sp, #20]
 8006e54:	9905      	ldr	r1, [sp, #20]
 8006e56:	9117      	str	r1, [sp, #92]	; 0x5c
 8006e58:	4619      	mov	r1, r3
 8006e5a:	f363 0100 	bfi	r1, r3, #0, #1
 8006e5e:	f363 0141 	bfi	r1, r3, #1, #1
 8006e62:	f363 0182 	bfi	r1, r3, #2, #1
 8006e66:	f363 01c5 	bfi	r1, r3, #3, #3
 8006e6a:	f362 1188 	bfi	r1, r2, #6, #3
 8006e6e:	2208      	movs	r2, #8
 8006e70:	f362 2152 	bfi	r1, r2, #9, #10
 8006e74:	f363 41de 	bfi	r1, r3, #19, #12
 8006e78:	f363 71df 	bfi	r1, r3, #31, #1
 8006e7c:	aa17      	add	r2, sp, #92	; 0x5c
 8006e7e:	4852      	ldr	r0, [pc, #328]	; (8006fc8 <spi_stm32_init+0x1e4>)
 8006e80:	f008 fa6c 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EIO;
 8006e84:	f06f 0704 	mvn.w	r7, #4
 8006e88:	e087      	b.n	8006f9a <spi_stm32_init+0x1b6>
			LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8006e90:	4b4e      	ldr	r3, [pc, #312]	; (8006fcc <spi_stm32_init+0x1e8>)
 8006e92:	9312      	str	r3, [sp, #72]	; 0x48
 8006e94:	9713      	str	r7, [sp, #76]	; 0x4c
 8006e96:	2300      	movs	r3, #0
 8006e98:	9305      	str	r3, [sp, #20]
 8006e9a:	2103      	movs	r1, #3
 8006e9c:	f88d 1014 	strb.w	r1, [sp, #20]
 8006ea0:	9905      	ldr	r1, [sp, #20]
 8006ea2:	9111      	str	r1, [sp, #68]	; 0x44
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f363 0100 	bfi	r1, r3, #0, #1
 8006eaa:	f363 0141 	bfi	r1, r3, #1, #1
 8006eae:	f363 0182 	bfi	r1, r3, #2, #1
 8006eb2:	f363 01c5 	bfi	r1, r3, #3, #3
 8006eb6:	f362 1188 	bfi	r1, r2, #6, #3
 8006eba:	220c      	movs	r2, #12
 8006ebc:	f362 2152 	bfi	r1, r2, #9, #10
 8006ec0:	f363 41de 	bfi	r1, r3, #19, #12
 8006ec4:	f363 71df 	bfi	r1, r3, #31, #1
 8006ec8:	aa11      	add	r2, sp, #68	; 0x44
 8006eca:	483f      	ldr	r0, [pc, #252]	; (8006fc8 <spi_stm32_init+0x1e4>)
 8006ecc:	f008 fa46 	bl	800f35c <z_impl_z_log_msg2_static_create>
			return err;
 8006ed0:	e063      	b.n	8006f9a <spi_stm32_init+0x1b6>
		if (!device_is_ready(cs_gpio->port)) {
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	7922      	ldrb	r2, [r4, #4]
 8006ed6:	9203      	str	r2, [sp, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	9302      	str	r3, [sp, #8]
 8006edc:	4b3c      	ldr	r3, [pc, #240]	; (8006fd0 <spi_stm32_init+0x1ec>)
 8006ede:	9301      	str	r3, [sp, #4]
 8006ee0:	9000      	str	r0, [sp, #0]
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	4938      	ldr	r1, [pc, #224]	; (8006fc8 <spi_stm32_init+0x1e4>)
 8006ee8:	f008 ff10 	bl	800fd0c <z_log_msg2_runtime_create>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
 8006eec:	f06f 0712 	mvn.w	r7, #18
 8006ef0:	e034      	b.n	8006f5c <spi_stm32_init+0x178>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8006ef2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8006ef6:	f013 0f01 	tst.w	r3, #1
 8006efa:	d026      	beq.n	8006f4a <spi_stm32_init+0x166>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006efc:	2301      	movs	r3, #1
 8006efe:	fa03 fe01 	lsl.w	lr, r3, r1
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	ea43 030e 	orr.w	r3, r3, lr
 8006f08:	603b      	str	r3, [r7, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
 8006f0a:	6833      	ldr	r3, [r6, #0]
 8006f0c:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
 8006f0e:	1e07      	subs	r7, r0, #0
 8006f10:	db24      	blt.n	8006f5c <spi_stm32_init+0x178>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8006f12:	3408      	adds	r4, #8
 8006f14:	68ab      	ldr	r3, [r5, #8]
 8006f16:	68ea      	ldr	r2, [r5, #12]
 8006f18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f1c:	429c      	cmp	r4, r3
 8006f1e:	d21c      	bcs.n	8006f5a <spi_stm32_init+0x176>
		if (!device_is_ready(cs_gpio->port)) {
 8006f20:	6820      	ldr	r0, [r4, #0]
 8006f22:	f009 fd6f 	bl	8010a04 <z_device_is_ready>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d0d3      	beq.n	8006ed2 <spi_stm32_init+0xee>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
 8006f2a:	6820      	ldr	r0, [r4, #0]
 8006f2c:	7921      	ldrb	r1, [r4, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
 8006f2e:	7963      	ldrb	r3, [r4, #5]
	return gpio_pin_configure(spec->port,
 8006f30:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600
	const struct gpio_driver_api *api =
 8006f34:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
 8006f36:	6907      	ldr	r7, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8006f38:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8006f3c:	d0d9      	beq.n	8006ef2 <spi_stm32_init+0x10e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8006f3e:	f013 0f01 	tst.w	r3, #1
 8006f42:	d0d6      	beq.n	8006ef2 <spi_stm32_init+0x10e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8006f44:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8006f48:	e7d3      	b.n	8006ef2 <spi_stm32_init+0x10e>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	fa03 fe01 	lsl.w	lr, r3, r1
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	ea23 030e 	bic.w	r3, r3, lr
 8006f56:	603b      	str	r3, [r7, #0]
 8006f58:	e7d7      	b.n	8006f0a <spi_stm32_init+0x126>
			return ret;
		}
	}

	return 0;
 8006f5a:	464f      	mov	r7, r9
		return -ENODEV;
	}
#endif /* CONFIG_SPI_STM32_DMA */

	err = spi_context_cs_configure_all(&data->ctx);
	if (err < 0) {
 8006f5c:	2f00      	cmp	r7, #0
 8006f5e:	db1c      	blt.n	8006f9a <spi_stm32_init+0x1b6>
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b1bb      	cbz	r3, 8006f94 <spi_stm32_init+0x1b0>
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	b1ab      	cbz	r3, 8006f94 <spi_stm32_init+0x1b0>
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	b19a      	cbz	r2, 8006f94 <spi_stm32_init+0x1b0>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 8006f6c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8006f6e:	f005 fd21 	bl	800c9b4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8006f72:	682b      	ldr	r3, [r5, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	791a      	ldrb	r2, [r3, #4]
	const struct gpio_driver_data *const data =
 8006f7a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8006f7c:	6819      	ldr	r1, [r3, #0]
 8006f7e:	2301      	movs	r3, #1
 8006f80:	4093      	lsls	r3, r2
 8006f82:	4219      	tst	r1, r3
 8006f84:	d10d      	bne.n	8006fa2 <spi_stm32_init+0x1be>
 8006f86:	464b      	mov	r3, r9
	if (value != 0)	{
 8006f88:	b16b      	cbz	r3, 8006fa6 <spi_stm32_init+0x1c2>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 8006f8e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	4798      	blx	r3
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
 8006f94:	69ab      	ldr	r3, [r5, #24]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 8006f96:	b163      	cbz	r3, 8006fb2 <spi_stm32_init+0x1ce>
		return err;
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
 8006f98:	464f      	mov	r7, r9
}
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	b01b      	add	sp, #108	; 0x6c
 8006f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = (value != 0) ? 0 : 1;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e7f0      	b.n	8006f88 <spi_stm32_init+0x1a4>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 8006faa:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 8006fb0:	e7f0      	b.n	8006f94 <spi_stm32_init+0x1b0>
		ctx->owner = NULL;
 8006fb2:	606b      	str	r3, [r5, #4]
		k_sem_give(&ctx->lock);
 8006fb4:	f105 0010 	add.w	r0, r5, #16
	z_impl_k_sem_give(sem);
 8006fb8:	f004 fdc0 	bl	800bb3c <z_impl_k_sem_give>
}
 8006fbc:	e7ec      	b.n	8006f98 <spi_stm32_init+0x1b4>
 8006fbe:	bf00      	nop
 8006fc0:	08011bf4 	.word	0x08011bf4
 8006fc4:	08013048 	.word	0x08013048
 8006fc8:	08012034 	.word	0x08012034
 8006fcc:	08013064 	.word	0x08013064
 8006fd0:	08013084 	.word	0x08013084

08006fd4 <transceive>:
{
 8006fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fd8:	b091      	sub	sp, #68	; 0x44
 8006fda:	4605      	mov	r5, r0
 8006fdc:	4688      	mov	r8, r1
 8006fde:	461f      	mov	r7, r3
	const struct spi_stm32_config *cfg = dev->config;
 8006fe0:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8006fe2:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8006fe4:	689e      	ldr	r6, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 8006fe6:	4691      	mov	r9, r2
 8006fe8:	b31a      	cbz	r2, 8007032 <transceive+0x5e>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8006fea:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006fee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006ff2:	d004      	beq.n	8006ffe <transceive+0x2a>
 8006ff4:	69a3      	ldr	r3, [r4, #24]
 8006ff6:	b913      	cbnz	r3, 8006ffe <transceive+0x2a>
		(ctx->owner == spi_cfg)) {
 8006ff8:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 8006ffa:	4598      	cmp	r8, r3
 8006ffc:	d009      	beq.n	8007012 <transceive+0x3e>
	k_sem_take(&ctx->lock, K_FOREVER);
 8006ffe:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
 8007002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800700a:	f004 fdbf 	bl	800bb8c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 800700e:	f8c4 8004 	str.w	r8, [r4, #4]
	ret = spi_stm32_configure(dev, config);
 8007012:	4641      	mov	r1, r8
 8007014:	4628      	mov	r0, r5
 8007016:	f7ff fd83 	bl	8006b20 <spi_stm32_configure>
	if (ret) {
 800701a:	4680      	mov	r8, r0
 800701c:	b170      	cbz	r0, 800703c <transceive+0x68>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	889b      	ldrh	r3, [r3, #4]
 8007022:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007026:	f000 80ab 	beq.w	8007180 <transceive+0x1ac>
}
 800702a:	4640      	mov	r0, r8
 800702c:	b011      	add	sp, #68	; 0x44
 800702e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 8007032:	2f00      	cmp	r7, #0
 8007034:	d1d9      	bne.n	8006fea <transceive+0x16>
		return 0;
 8007036:	f04f 0800 	mov.w	r8, #0
 800703a:	e7f6      	b.n	800702a <transceive+0x56>
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800703c:	f1b9 0f00 	cmp.w	r9, #0
 8007040:	d00b      	beq.n	800705a <transceive+0x86>
 8007042:	f8d9 3000 	ldr.w	r3, [r9]
 8007046:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8007048:	b14b      	cbz	r3, 800705e <transceive+0x8a>
 800704a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800704e:	64a3      	str	r3, [r4, #72]	; 0x48
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 8007050:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8007054:	f104 0148 	add.w	r1, r4, #72	; 0x48
	while (*count) {
 8007058:	e008      	b.n	800706c <transceive+0x98>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800705a:	464b      	mov	r3, r9
 800705c:	e7f3      	b.n	8007046 <transceive+0x72>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800705e:	2300      	movs	r3, #0
 8007060:	e7f5      	b.n	800704e <transceive+0x7a>
		++(*current);
 8007062:	3208      	adds	r2, #8
 8007064:	6002      	str	r2, [r0, #0]
		--(*count);
 8007066:	680b      	ldr	r3, [r1, #0]
 8007068:	3b01      	subs	r3, #1
 800706a:	600b      	str	r3, [r1, #0]
	while (*count) {
 800706c:	680b      	ldr	r3, [r1, #0]
 800706e:	b13b      	cbz	r3, 8007080 <transceive+0xac>
		if (((*current)->len / dfs) != 0) {
 8007070:	6802      	ldr	r2, [r0, #0]
 8007072:	6853      	ldr	r3, [r2, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0f4      	beq.n	8007062 <transceive+0x8e>
			*buf_len = (*current)->len / dfs;
 8007078:	65a3      	str	r3, [r4, #88]	; 0x58
			return (*current)->buf;
 800707a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	e000      	b.n	8007082 <transceive+0xae>
	*buf_len = 0;
 8007080:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 8007082:	6563      	str	r3, [r4, #84]	; 0x54
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8007084:	b19f      	cbz	r7, 80070ae <transceive+0xda>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800708a:	b193      	cbz	r3, 80070b2 <transceive+0xde>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 8007090:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8007094:	f104 0150 	add.w	r1, r4, #80	; 0x50
	while (*count) {
 8007098:	680b      	ldr	r3, [r1, #0]
 800709a:	b183      	cbz	r3, 80070be <transceive+0xea>
		if (((*current)->len / dfs) != 0) {
 800709c:	6802      	ldr	r2, [r0, #0]
 800709e:	6853      	ldr	r3, [r2, #4]
 80070a0:	b94b      	cbnz	r3, 80070b6 <transceive+0xe2>
		++(*current);
 80070a2:	3208      	adds	r2, #8
 80070a4:	6002      	str	r2, [r0, #0]
		--(*count);
 80070a6:	680b      	ldr	r3, [r1, #0]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	600b      	str	r3, [r1, #0]
 80070ac:	e7f4      	b.n	8007098 <transceive+0xc4>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 80070ae:	463b      	mov	r3, r7
 80070b0:	e7ea      	b.n	8007088 <transceive+0xb4>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e7eb      	b.n	800708e <transceive+0xba>
			*buf_len = (*current)->len / dfs;
 80070b6:	6623      	str	r3, [r4, #96]	; 0x60
			return (*current)->buf;
 80070b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	e000      	b.n	80070c0 <transceive+0xec>
	*buf_len = 0;
 80070be:	6623      	str	r3, [r4, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
 80070c0:	65e3      	str	r3, [r4, #92]	; 0x5c
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	6423      	str	r3, [r4, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80070c6:	68b3      	ldr	r3, [r6, #8]
 80070c8:	f013 0f01 	tst.w	r3, #1
 80070cc:	d001      	beq.n	80070d2 <transceive+0xfe>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 80070ce:	68f3      	ldr	r3, [r6, #12]
 80070d0:	e7f9      	b.n	80070c6 <transceive+0xf2>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80070d2:	6833      	ldr	r3, [r6, #0]
 80070d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d8:	6033      	str	r3, [r6, #0]
	spi_stm32_cs_control(dev, true);
 80070da:	2101      	movs	r1, #1
 80070dc:	4628      	mov	r0, r5
 80070de:	f008 fe5c 	bl	800fd9a <spi_stm32_cs_control>
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 80070e2:	6873      	ldr	r3, [r6, #4]
 80070e4:	f043 0320 	orr.w	r3, r3, #32
 80070e8:	6073      	str	r3, [r6, #4]
	if (rx_bufs) {
 80070ea:	b11f      	cbz	r7, 80070f4 <transceive+0x120>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 80070ec:	6873      	ldr	r3, [r6, #4]
 80070ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f2:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80070f4:	6873      	ldr	r3, [r6, #4]
 80070f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fa:	6073      	str	r3, [r6, #4]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 80070fc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80070fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007100:	429a      	cmp	r2, r3
 8007102:	bf38      	it	cc
 8007104:	461a      	movcc	r2, r3
 8007106:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800710a:	fb03 f202 	mul.w	r2, r3, r2
			     ctx->config->frequency;
 800710e:	4620      	mov	r0, r4
 8007110:	f850 3b28 	ldr.w	r3, [r0], #40
 8007114:	681b      	ldr	r3, [r3, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8007116:	fbb2 f2f3 	udiv	r2, r2, r3
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
 800711a:	32c8      	adds	r2, #200	; 0xc8
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 800711c:	0f91      	lsrs	r1, r2, #30
 800711e:	0093      	lsls	r3, r2, #2
 8007120:	189a      	adds	r2, r3, r2
 8007122:	f141 0300 	adc.w	r3, r1, #0
 8007126:	1892      	adds	r2, r2, r2
 8007128:	415b      	adcs	r3, r3
 800712a:	f004 fd2f 	bl	800bb8c <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
 800712e:	b910      	cbnz	r0, 8007136 <transceive+0x162>
	status = ctx->sync_status;
 8007130:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
	return status;
 8007134:	e773      	b.n	800701e <transceive+0x4a>
		LOG_ERR("Timeout waiting for transfer complete");
 8007136:	2201      	movs	r2, #1
 8007138:	f8ad 2008 	strh.w	r2, [sp, #8]
 800713c:	4b14      	ldr	r3, [pc, #80]	; (8007190 <transceive+0x1bc>)
 800713e:	930e      	str	r3, [sp, #56]	; 0x38
 8007140:	2300      	movs	r3, #0
 8007142:	9301      	str	r3, [sp, #4]
 8007144:	2102      	movs	r1, #2
 8007146:	f88d 1004 	strb.w	r1, [sp, #4]
 800714a:	9901      	ldr	r1, [sp, #4]
 800714c:	910d      	str	r1, [sp, #52]	; 0x34
 800714e:	4619      	mov	r1, r3
 8007150:	f363 0100 	bfi	r1, r3, #0, #1
 8007154:	f363 0141 	bfi	r1, r3, #1, #1
 8007158:	f363 0182 	bfi	r1, r3, #2, #1
 800715c:	f363 01c5 	bfi	r1, r3, #3, #3
 8007160:	f362 1188 	bfi	r1, r2, #6, #3
 8007164:	2208      	movs	r2, #8
 8007166:	f362 2152 	bfi	r1, r2, #9, #10
 800716a:	f363 41de 	bfi	r1, r3, #19, #12
 800716e:	f363 71df 	bfi	r1, r3, #31, #1
 8007172:	aa0d      	add	r2, sp, #52	; 0x34
 8007174:	4807      	ldr	r0, [pc, #28]	; (8007194 <transceive+0x1c0>)
 8007176:	f008 f8f1 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -ETIMEDOUT;
 800717a:	f06f 0873 	mvn.w	r8, #115	; 0x73
 800717e:	e74e      	b.n	800701e <transceive+0x4a>
		ctx->owner = NULL;
 8007180:	2300      	movs	r3, #0
 8007182:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 8007184:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 8007188:	f004 fcd8 	bl	800bb3c <z_impl_k_sem_give>
}
 800718c:	e74d      	b.n	800702a <transceive+0x56>
 800718e:	bf00      	nop
 8007190:	080130a8 	.word	0x080130a8
 8007194:	08012034 	.word	0x08012034

08007198 <timer_callback>:
{
	TimerIrqHandler();
}

static void timer_callback(struct k_timer *_timer)
{
 8007198:	b508      	push	{r3, lr}
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 800719a:	4802      	ldr	r0, [pc, #8]	; (80071a4 <timer_callback+0xc>)
 800719c:	f004 fe5a 	bl	800be54 <k_work_submit>
}
 80071a0:	bd08      	pop	{r3, pc}
 80071a2:	bf00      	nop
 80071a4:	2000033c 	.word	0x2000033c

080071a8 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 80071a8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80071aa:	f009 ffc9 	bl	8011140 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 80071ae:	220a      	movs	r2, #10
 80071b0:	2300      	movs	r3, #0
 80071b2:	f7f9 fc13 	bl	80009dc <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 80071b6:	4b02      	ldr	r3, [pc, #8]	; (80071c0 <RtcGetTimerElapsedTime+0x18>)
 80071b8:	681b      	ldr	r3, [r3, #0]
}
 80071ba:	1ac0      	subs	r0, r0, r3
 80071bc:	bd08      	pop	{r3, pc}
 80071be:	bf00      	nop
 80071c0:	20001090 	.word	0x20001090

080071c4 <RtcStopAlarm>:
{
	return 1;
}

void RtcStopAlarm(void)
{
 80071c4:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
 80071c6:	4802      	ldr	r0, [pc, #8]	; (80071d0 <RtcStopAlarm+0xc>)
 80071c8:	f009 ffca 	bl	8011160 <z_impl_k_timer_stop>
	k_timer_stop(&lora_timer);
}
 80071cc:	bd08      	pop	{r3, pc}
 80071ce:	bf00      	nop
 80071d0:	20000610 	.word	0x20000610

080071d4 <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout)
{
 80071d4:	b500      	push	{lr}
 80071d6:	b083      	sub	sp, #12
			return t * ((uint64_t)to_hz / from_hz);
 80071d8:	0f83      	lsrs	r3, r0, #30
 80071da:	0082      	lsls	r2, r0, #2
 80071dc:	1812      	adds	r2, r2, r0
 80071de:	f143 0300 	adc.w	r3, r3, #0
 80071e2:	1892      	adds	r2, r2, r2
 80071e4:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 80071e6:	2000      	movs	r0, #0
 80071e8:	2100      	movs	r1, #0
 80071ea:	e9cd 0100 	strd	r0, r1, [sp]
 80071ee:	4803      	ldr	r0, [pc, #12]	; (80071fc <RtcSetAlarm+0x28>)
 80071f0:	f005 fc44 	bl	800ca7c <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 80071f4:	b003      	add	sp, #12
 80071f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80071fa:	bf00      	nop
 80071fc:	20000610 	.word	0x20000610

08007200 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 8007200:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8007202:	f009 ff9d 	bl	8011140 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8007206:	220a      	movs	r2, #10
 8007208:	2300      	movs	r3, #0
 800720a:	f7f9 fbe7 	bl	80009dc <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 800720e:	4b01      	ldr	r3, [pc, #4]	; (8007214 <RtcSetTimerContext+0x14>)
 8007210:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 8007212:	bd08      	pop	{r3, pc}
 8007214:	20001090 	.word	0x20001090

08007218 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 8007218:	4b01      	ldr	r3, [pc, #4]	; (8007220 <RtcGetTimerContext+0x8>)
 800721a:	6818      	ldr	r0, [r3, #0]
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	20001090 	.word	0x20001090

08007224 <modem_release>:
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
{
 8007224:	b570      	push	{r4, r5, r6, lr}
 8007226:	4604      	mov	r4, r0
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8007228:	f100 0544 	add.w	r5, r0, #68	; 0x44
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800722c:	2302      	movs	r3, #2
 800722e:	f3bf 8f5b 	dmb	ish
 8007232:	e855 2f00 	ldrex	r2, [r5]
 8007236:	2a01      	cmp	r2, #1
 8007238:	d103      	bne.n	8007242 <modem_release+0x1e>
 800723a:	e845 3100 	strex	r1, r3, [r5]
 800723e:	2900      	cmp	r1, #0
 8007240:	d1f7      	bne.n	8007232 <modem_release+0xe>
 8007242:	f3bf 8f5b 	dmb	ish
 8007246:	bf0c      	ite	eq
 8007248:	2601      	moveq	r6, #1
 800724a:	2600      	movne	r6, #0
 800724c:	d10e      	bne.n	800726c <modem_release+0x48>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 800724e:	4b08      	ldr	r3, [pc, #32]	; (8007270 <modem_release+0x4c>)
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
 8007254:	2300      	movs	r3, #0
 8007256:	6063      	str	r3, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8007258:	f3bf 8f5b 	dmb	ish
 800725c:	e855 2f00 	ldrex	r2, [r5]
 8007260:	e845 3100 	strex	r1, r3, [r5]
 8007264:	2900      	cmp	r1, #0
 8007266:	d1f9      	bne.n	800725c <modem_release+0x38>
 8007268:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
}
 800726c:	4630      	mov	r0, r6
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	080133bc 	.word	0x080133bc

08007274 <sx12xx_ev_tx_timed_out>:
		}
	}
}

static void sx12xx_ev_tx_timed_out(void)
{
 8007274:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8007276:	4806      	ldr	r0, [pc, #24]	; (8007290 <sx12xx_ev_tx_timed_out+0x1c>)
 8007278:	6844      	ldr	r4, [r0, #4]

    /* Clean up TX timeout event callback */
    dev_data.events.TxTimeout = NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	6143      	str	r3, [r0, #20]

    if (modem_release(&dev_data)) {
 800727e:	f7ff ffd1 	bl	8007224 <modem_release>
 8007282:	b120      	cbz	r0, 800728e <sx12xx_ev_tx_timed_out+0x1a>
		/* Raise signal if provided */
		if (sig) {
 8007284:	b11c      	cbz	r4, 800728e <sx12xx_ev_tx_timed_out+0x1a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8007286:	2100      	movs	r1, #0
 8007288:	4620      	mov	r0, r4
 800728a:	f005 fef3 	bl	800d074 <z_impl_k_poll_signal_raise>
			k_poll_signal_raise(sig, 0);
		}
	}
}
 800728e:	bd10      	pop	{r4, pc}
 8007290:	20001094 	.word	0x20001094

08007294 <sx12xx_ev_rx_error_timeout>:

static void sx12xx_ev_rx_error_timeout(void)
{
 8007294:	b510      	push	{r4, lr}
 8007296:	b090      	sub	sp, #64	; 0x40
    LOG_DBG("Receive timeout/error");
 8007298:	2301      	movs	r3, #1
 800729a:	f8ad 3008 	strh.w	r3, [sp, #8]
 800729e:	2302      	movs	r3, #2
 80072a0:	f8ad 300a 	strh.w	r3, [sp, #10]
 80072a4:	4b16      	ldr	r3, [pc, #88]	; (8007300 <sx12xx_ev_rx_error_timeout+0x6c>)
 80072a6:	930e      	str	r3, [sp, #56]	; 0x38
 80072a8:	4b16      	ldr	r3, [pc, #88]	; (8007304 <sx12xx_ev_rx_error_timeout+0x70>)
 80072aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80072ac:	2300      	movs	r3, #0
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	2203      	movs	r2, #3
 80072b2:	f88d 2004 	strb.w	r2, [sp, #4]
 80072b6:	9a01      	ldr	r2, [sp, #4]
 80072b8:	920d      	str	r2, [sp, #52]	; 0x34
 80072ba:	4619      	mov	r1, r3
 80072bc:	f363 0100 	bfi	r1, r3, #0, #1
 80072c0:	f363 0141 	bfi	r1, r3, #1, #1
 80072c4:	f363 0182 	bfi	r1, r3, #2, #1
 80072c8:	f363 01c5 	bfi	r1, r3, #3, #3
 80072cc:	2204      	movs	r2, #4
 80072ce:	f362 1188 	bfi	r1, r2, #6, #3
 80072d2:	220c      	movs	r2, #12
 80072d4:	f362 2152 	bfi	r1, r2, #9, #10
 80072d8:	f363 41de 	bfi	r1, r3, #19, #12
 80072dc:	f363 71df 	bfi	r1, r3, #31, #1
 80072e0:	aa0d      	add	r2, sp, #52	; 0x34
 80072e2:	4809      	ldr	r0, [pc, #36]	; (8007308 <sx12xx_ev_rx_error_timeout+0x74>)
 80072e4:	f008 f83a 	bl	800f35c <z_impl_z_log_msg2_static_create>
    struct k_poll_signal *sig = dev_data.operation_done;
 80072e8:	4b08      	ldr	r3, [pc, #32]	; (800730c <sx12xx_ev_rx_error_timeout+0x78>)
 80072ea:	685c      	ldr	r4, [r3, #4]

    /* Receiving in asynchronous mode */
    if (dev_data.async_rx_error_timeout_cb) {
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	b103      	cbz	r3, 80072f2 <sx12xx_ev_rx_error_timeout+0x5e>
        /* Run the callback */
        dev_data.async_rx_error_timeout_cb();
 80072f0:	4798      	blx	r3
    }

    /* Raise signal if provided */
    if (sig) {
 80072f2:	b11c      	cbz	r4, 80072fc <sx12xx_ev_rx_error_timeout+0x68>
 80072f4:	2100      	movs	r1, #0
 80072f6:	4620      	mov	r0, r4
 80072f8:	f005 febc 	bl	800d074 <z_impl_k_poll_signal_raise>
        k_poll_signal_raise(sig, 0);
    }
}
 80072fc:	b010      	add	sp, #64	; 0x40
 80072fe:	bd10      	pop	{r4, pc}
 8007300:	08013148 	.word	0x08013148
 8007304:	0801324c 	.word	0x0801324c
 8007308:	08012044 	.word	0x08012044
 800730c:	20001094 	.word	0x20001094

08007310 <sx12xx_ev_tx_done>:
{
 8007310:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8007312:	4805      	ldr	r0, [pc, #20]	; (8007328 <sx12xx_ev_tx_done+0x18>)
 8007314:	6844      	ldr	r4, [r0, #4]
	if (modem_release(&dev_data)) {
 8007316:	f7ff ff85 	bl	8007224 <modem_release>
 800731a:	b120      	cbz	r0, 8007326 <sx12xx_ev_tx_done+0x16>
		if (sig) {
 800731c:	b11c      	cbz	r4, 8007326 <sx12xx_ev_tx_done+0x16>
 800731e:	2100      	movs	r1, #0
 8007320:	4620      	mov	r0, r4
 8007322:	f005 fea7 	bl	800d074 <z_impl_k_poll_signal_raise>
}
 8007326:	bd10      	pop	{r4, pc}
 8007328:	20001094 	.word	0x20001094

0800732c <sx12xx_ev_rx_done>:
{
 800732c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800732e:	b083      	sub	sp, #12
 8007330:	4617      	mov	r7, r2
 8007332:	461d      	mov	r5, r3
	struct k_poll_signal *sig = dev_data.operation_done;
 8007334:	4c24      	ldr	r4, [pc, #144]	; (80073c8 <sx12xx_ev_rx_done+0x9c>)
 8007336:	6866      	ldr	r6, [r4, #4]
	if (dev_data.async_rx_cb) {
 8007338:	68a4      	ldr	r4, [r4, #8]
 800733a:	b15c      	cbz	r4, 8007354 <sx12xx_ev_rx_done+0x28>
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	4613      	mov	r3, r2
 8007340:	460a      	mov	r2, r1
 8007342:	4601      	mov	r1, r0
 8007344:	4820      	ldr	r0, [pc, #128]	; (80073c8 <sx12xx_ev_rx_done+0x9c>)
 8007346:	6800      	ldr	r0, [r0, #0]
 8007348:	47a0      	blx	r4
		Radio.Rx(0);
 800734a:	4b20      	ldr	r3, [pc, #128]	; (80073cc <sx12xx_ev_rx_done+0xa0>)
 800734c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734e:	2000      	movs	r0, #0
 8007350:	4798      	blx	r3
		return;
 8007352:	e037      	b.n	80073c4 <sx12xx_ev_rx_done+0x98>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8007354:	4b1e      	ldr	r3, [pc, #120]	; (80073d0 <sx12xx_ev_rx_done+0xa4>)
 8007356:	2202      	movs	r2, #2
 8007358:	f3bf 8f5b 	dmb	ish
 800735c:	e853 4f00 	ldrex	r4, [r3]
 8007360:	2c01      	cmp	r4, #1
 8007362:	d104      	bne.n	800736e <sx12xx_ev_rx_done+0x42>
 8007364:	e843 2c00 	strex	ip, r2, [r3]
 8007368:	f1bc 0f00 	cmp.w	ip, #0
 800736c:	d1f6      	bne.n	800735c <sx12xx_ev_rx_done+0x30>
 800736e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8007372:	d127      	bne.n	80073c4 <sx12xx_ev_rx_done+0x98>
	if (size < *dev_data.rx_params.size) {
 8007374:	3b44      	subs	r3, #68	; 0x44
 8007376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007378:	781a      	ldrb	r2, [r3, #0]
 800737a:	428a      	cmp	r2, r1
 800737c:	d900      	bls.n	8007380 <sx12xx_ev_rx_done+0x54>
		*dev_data.rx_params.size = size;
 800737e:	7019      	strb	r1, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
 8007380:	4c11      	ldr	r4, [pc, #68]	; (80073c8 <sx12xx_ev_rx_done+0x9c>)
 8007382:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007384:	781a      	ldrb	r2, [r3, #0]
 8007386:	4601      	mov	r1, r0
 8007388:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800738a:	f009 ff88 	bl	801129e <memcpy>
	if (dev_data.rx_params.rssi) {
 800738e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007390:	b103      	cbz	r3, 8007394 <sx12xx_ev_rx_done+0x68>
		*dev_data.rx_params.rssi = rssi;
 8007392:	801f      	strh	r7, [r3, #0]
	if (dev_data.rx_params.snr) {
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <sx12xx_ev_rx_done+0x9c>)
 8007396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007398:	b103      	cbz	r3, 800739c <sx12xx_ev_rx_done+0x70>
		*dev_data.rx_params.snr = snr;
 800739a:	701d      	strb	r5, [r3, #0]
	Radio.Sleep();
 800739c:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <sx12xx_ev_rx_done+0xa0>)
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	4798      	blx	r3
	dev_data.operation_done = NULL;
 80073a2:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <sx12xx_ev_rx_done+0x9c>)
 80073a4:	2100      	movs	r1, #0
 80073a6:	6059      	str	r1, [r3, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80073a8:	3344      	adds	r3, #68	; 0x44
 80073aa:	f3bf 8f5b 	dmb	ish
 80073ae:	e853 2f00 	ldrex	r2, [r3]
 80073b2:	e843 1000 	strex	r0, r1, [r3]
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d1f9      	bne.n	80073ae <sx12xx_ev_rx_done+0x82>
 80073ba:	f3bf 8f5b 	dmb	ish
 80073be:	4630      	mov	r0, r6
 80073c0:	f005 fe58 	bl	800d074 <z_impl_k_poll_signal_raise>
}
 80073c4:	b003      	add	sp, #12
 80073c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073c8:	20001094 	.word	0x20001094
 80073cc:	080133bc 	.word	0x080133bc
 80073d0:	200010d8 	.word	0x200010d8

080073d4 <__sx12xx_configure_pin>:
{
 80073d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073d6:	b087      	sub	sp, #28
 80073d8:	4604      	mov	r4, r0
 80073da:	460f      	mov	r7, r1
 80073dc:	4616      	mov	r6, r2
 80073de:	461d      	mov	r5, r3
 80073e0:	4608      	mov	r0, r1
 80073e2:	f004 f861 	bl	800b4a8 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 80073e6:	6020      	str	r0, [r4, #0]
	if (!(*dev)) {
 80073e8:	b1f8      	cbz	r0, 800742a <__sx12xx_configure_pin+0x56>
	const struct gpio_driver_api *api =
 80073ea:	6883      	ldr	r3, [r0, #8]
	struct gpio_driver_data *data =
 80073ec:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80073ee:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 80073f2:	d007      	beq.n	8007404 <__sx12xx_configure_pin+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 80073f4:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 80073f8:	d004      	beq.n	8007404 <__sx12xx_configure_pin+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80073fa:	f015 0f01 	tst.w	r5, #1
 80073fe:	d001      	beq.n	8007404 <__sx12xx_configure_pin+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8007400:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8007404:	f425 5280 	bic.w	r2, r5, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8007408:	f015 0f01 	tst.w	r5, #1
 800740c:	d019      	beq.n	8007442 <__sx12xx_configure_pin+0x6e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800740e:	2101      	movs	r1, #1
 8007410:	fa01 f506 	lsl.w	r5, r1, r6
 8007414:	6821      	ldr	r1, [r4, #0]
 8007416:	4329      	orrs	r1, r5
 8007418:	6021      	str	r1, [r4, #0]
	return api->pin_configure(port, pin, flags);
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4631      	mov	r1, r6
 800741e:	4798      	blx	r3
	if (err) {
 8007420:	4604      	mov	r4, r0
 8007422:	b9b0      	cbnz	r0, 8007452 <__sx12xx_configure_pin+0x7e>
}
 8007424:	4620      	mov	r0, r4
 8007426:	b007      	add	sp, #28
 8007428:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Cannot get pointer to %s device", controller);
 800742a:	9702      	str	r7, [sp, #8]
 800742c:	4b0f      	ldr	r3, [pc, #60]	; (800746c <__sx12xx_configure_pin+0x98>)
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	9000      	str	r0, [sp, #0]
 8007432:	4603      	mov	r3, r0
 8007434:	2201      	movs	r2, #1
 8007436:	490e      	ldr	r1, [pc, #56]	; (8007470 <__sx12xx_configure_pin+0x9c>)
 8007438:	f008 ff69 	bl	801030e <z_log_msg2_runtime_create>
		return -EIO;
 800743c:	f06f 0404 	mvn.w	r4, #4
 8007440:	e7f0      	b.n	8007424 <__sx12xx_configure_pin+0x50>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8007442:	2101      	movs	r1, #1
 8007444:	fa01 f506 	lsl.w	r5, r1, r6
 8007448:	6821      	ldr	r1, [r4, #0]
 800744a:	ea21 0105 	bic.w	r1, r1, r5
 800744e:	6021      	str	r1, [r4, #0]
 8007450:	e7e3      	b.n	800741a <__sx12xx_configure_pin+0x46>
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
 8007452:	9004      	str	r0, [sp, #16]
 8007454:	9603      	str	r6, [sp, #12]
 8007456:	9702      	str	r7, [sp, #8]
 8007458:	4b06      	ldr	r3, [pc, #24]	; (8007474 <__sx12xx_configure_pin+0xa0>)
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	2000      	movs	r0, #0
 800745e:	9000      	str	r0, [sp, #0]
 8007460:	4603      	mov	r3, r0
 8007462:	2201      	movs	r2, #1
 8007464:	4902      	ldr	r1, [pc, #8]	; (8007470 <__sx12xx_configure_pin+0x9c>)
 8007466:	f008 ff52 	bl	801030e <z_log_msg2_runtime_create>
		return err;
 800746a:	e7db      	b.n	8007424 <__sx12xx_configure_pin+0x50>
 800746c:	08013164 	.word	0x08013164
 8007470:	08012044 	.word	0x08012044
 8007474:	08013184 	.word	0x08013184

08007478 <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800747c:	490f      	ldr	r1, [pc, #60]	; (80074bc <sx12xx_lora_send_async+0x44>)
 800747e:	2001      	movs	r0, #1
 8007480:	f3bf 8f5b 	dmb	ish
 8007484:	e851 4f00 	ldrex	r4, [r1]
 8007488:	2c00      	cmp	r4, #0
 800748a:	d103      	bne.n	8007494 <sx12xx_lora_send_async+0x1c>
 800748c:	e841 0600 	strex	r6, r0, [r1]
 8007490:	2e00      	cmp	r6, #0
 8007492:	d1f7      	bne.n	8007484 <sx12xx_lora_send_async+0xc>
 8007494:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8007498:	d10c      	bne.n	80074b4 <sx12xx_lora_send_async+0x3c>
		return -EBUSY;
	}

	/* Store signal */
	dev_data.operation_done = async;
 800749a:	3944      	subs	r1, #68	; 0x44
 800749c:	604b      	str	r3, [r1, #4]

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 800749e:	4e08      	ldr	r6, [pc, #32]	; (80074c0 <sx12xx_lora_send_async+0x48>)
 80074a0:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80074a2:	b2d4      	uxtb	r4, r2
 80074a4:	4621      	mov	r1, r4
 80074a6:	4798      	blx	r3

	Radio.Send(data, data_len);
 80074a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80074aa:	4621      	mov	r1, r4
 80074ac:	4628      	mov	r0, r5
 80074ae:	4798      	blx	r3

	return 0;
 80074b0:	2000      	movs	r0, #0
}
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 80074b4:	f06f 000f 	mvn.w	r0, #15
 80074b8:	e7fb      	b.n	80074b2 <sx12xx_lora_send_async+0x3a>
 80074ba:	bf00      	nop
 80074bc:	200010d8 	.word	0x200010d8
 80074c0:	080133bc 	.word	0x080133bc

080074c4 <sx12xx_lora_send>:
{
 80074c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074c6:	b09d      	sub	sp, #116	; 0x74
 80074c8:	af04      	add	r7, sp, #16
 80074ca:	4615      	mov	r5, r2
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 80074cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80074d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80074d2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80074d4:	2300      	movs	r3, #0
 80074d6:	643b      	str	r3, [r7, #64]	; 0x40
 80074d8:	647b      	str	r3, [r7, #68]	; 0x44
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 80074da:	627b      	str	r3, [r7, #36]	; 0x24
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074e0:	633b      	str	r3, [r7, #48]	; 0x30
 80074e2:	637b      	str	r3, [r7, #52]	; 0x34
 80074e4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80074e8:	2401      	movs	r4, #1
 80074ea:	f364 0304 	bfi	r3, r4, #0, #5
 80074ee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80074f2:	637a      	str	r2, [r7, #52]	; 0x34
	if (!dev_data.tx_cfg.frequency) {
 80074f4:	4b5a      	ldr	r3, [pc, #360]	; (8007660 <sx12xx_lora_send+0x19c>)
 80074f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 80ae 	beq.w	800765a <sx12xx_lora_send+0x196>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 80074fe:	4613      	mov	r3, r2
 8007500:	462a      	mov	r2, r5
 8007502:	f7ff ffb9 	bl	8007478 <sx12xx_lora_send_async>
	if (ret < 0) {
 8007506:	2800      	cmp	r0, #0
 8007508:	db6c      	blt.n	80075e4 <sx12xx_lora_send+0x120>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 800750a:	4b56      	ldr	r3, [pc, #344]	; (8007664 <sx12xx_lora_send+0x1a0>)
 800750c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
				   dev_data.tx_cfg.bandwidth,
 800750e:	4854      	ldr	r0, [pc, #336]	; (8007660 <sx12xx_lora_send+0x19c>)
 8007510:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
				   dev_data.tx_cfg.datarate,
 8007514:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
				   dev_data.tx_cfg.coding_rate,
 8007518:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
	air_time = Radio.TimeOnAir(MODEM_LORA,
 800751c:	2601      	movs	r6, #1
 800751e:	9603      	str	r6, [sp, #12]
 8007520:	fa5f fc85 	uxtb.w	ip, r5
 8007524:	f8cd c008 	str.w	ip, [sp, #8]
 8007528:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
 800752c:	f8cd c004 	str.w	ip, [sp, #4]
 8007530:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8007532:	9000      	str	r0, [sp, #0]
 8007534:	4630      	mov	r0, r6
 8007536:	47a0      	blx	r4
 8007538:	4604      	mov	r4, r0
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
 800753a:	80be      	strh	r6, [r7, #4]
 800753c:	2302      	movs	r3, #2
 800753e:	80fb      	strh	r3, [r7, #6]
 8007540:	466e      	mov	r6, sp
 8007542:	b088      	sub	sp, #32
 8007544:	a904      	add	r1, sp, #16
 8007546:	466b      	mov	r3, sp
 8007548:	f113 021c 	adds.w	r2, r3, #28
 800754c:	d04d      	beq.n	80075ea <sx12xx_lora_send+0x126>
 800754e:	2314      	movs	r3, #20
 8007550:	2001      	movs	r0, #1
 8007552:	80b8      	strh	r0, [r7, #4]
 8007554:	b11a      	cbz	r2, 800755e <sx12xx_lora_send+0x9a>
 8007556:	2b04      	cmp	r3, #4
 8007558:	dd01      	ble.n	800755e <sx12xx_lora_send+0x9a>
 800755a:	4843      	ldr	r0, [pc, #268]	; (8007668 <sx12xx_lora_send+0x1a4>)
 800755c:	6108      	str	r0, [r1, #16]
 800755e:	2002      	movs	r0, #2
 8007560:	80f8      	strh	r0, [r7, #6]
 8007562:	b11a      	cbz	r2, 800756c <sx12xx_lora_send+0xa8>
 8007564:	2b08      	cmp	r3, #8
 8007566:	dd01      	ble.n	800756c <sx12xx_lora_send+0xa8>
 8007568:	4840      	ldr	r0, [pc, #256]	; (800766c <sx12xx_lora_send+0x1a8>)
 800756a:	6148      	str	r0, [r1, #20]
 800756c:	b112      	cbz	r2, 8007574 <sx12xx_lora_send+0xb0>
 800756e:	2b0c      	cmp	r3, #12
 8007570:	dd00      	ble.n	8007574 <sx12xx_lora_send+0xb0>
 8007572:	618d      	str	r5, [r1, #24]
 8007574:	b112      	cbz	r2, 800757c <sx12xx_lora_send+0xb8>
 8007576:	2b10      	cmp	r3, #16
 8007578:	dd00      	ble.n	800757c <sx12xx_lora_send+0xb8>
 800757a:	61cc      	str	r4, [r1, #28]
 800757c:	2b13      	cmp	r3, #19
 800757e:	dd37      	ble.n	80075f0 <sx12xx_lora_send+0x12c>
 8007580:	2314      	movs	r3, #20
 8007582:	b12a      	cbz	r2, 8007590 <sx12xx_lora_send+0xcc>
 8007584:	2000      	movs	r0, #0
 8007586:	6038      	str	r0, [r7, #0]
 8007588:	2005      	movs	r0, #5
 800758a:	7038      	strb	r0, [r7, #0]
 800758c:	6838      	ldr	r0, [r7, #0]
 800758e:	60c8      	str	r0, [r1, #12]
 8007590:	2100      	movs	r1, #0
 8007592:	f36f 0100 	bfc	r1, #0, #1
 8007596:	f36f 0141 	bfc	r1, #1, #1
 800759a:	f36f 0182 	bfc	r1, #2, #1
 800759e:	f36f 01c5 	bfc	r1, #3, #3
 80075a2:	2004      	movs	r0, #4
 80075a4:	f360 1188 	bfi	r1, r0, #6, #3
 80075a8:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 80075ac:	f363 2152 	bfi	r1, r3, #9, #10
 80075b0:	f36f 41de 	bfc	r1, #19, #12
 80075b4:	f36f 71df 	bfc	r1, #31, #1
 80075b8:	2300      	movs	r3, #0
 80075ba:	482d      	ldr	r0, [pc, #180]	; (8007670 <sx12xx_lora_send+0x1ac>)
 80075bc:	f007 fece 	bl	800f35c <z_impl_z_log_msg2_static_create>
 80075c0:	46b5      	mov	sp, r6
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 80075c2:	0060      	lsls	r0, r4, #1
			return t * ((uint64_t)to_hz / from_hz);
 80075c4:	f3c4 7341 	ubfx	r3, r4, #29, #2
 80075c8:	00e2      	lsls	r2, r4, #3
 80075ca:	1812      	adds	r2, r2, r0
 80075cc:	f143 0300 	adc.w	r3, r3, #0
 80075d0:	1892      	adds	r2, r2, r2
 80075d2:	415b      	adcs	r3, r3
	return z_impl_k_poll(events, num_events, timeout);
 80075d4:	2101      	movs	r1, #1
 80075d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80075da:	f005 fc9f 	bl	800cf1c <z_impl_k_poll>
	if (ret < 0) {
 80075de:	2800      	cmp	r0, #0
 80075e0:	db09      	blt.n	80075f6 <sx12xx_lora_send+0x132>
	return 0;
 80075e2:	2000      	movs	r0, #0
}
 80075e4:	3764      	adds	r7, #100	; 0x64
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
 80075ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80075ee:	e7af      	b.n	8007550 <sx12xx_lora_send+0x8c>
 80075f0:	f06f 031b 	mvn.w	r3, #27
 80075f4:	e7c5      	b.n	8007582 <sx12xx_lora_send+0xbe>
		LOG_ERR("Packet transmission failed!");
 80075f6:	2201      	movs	r2, #1
 80075f8:	80ba      	strh	r2, [r7, #4]
 80075fa:	4b1e      	ldr	r3, [pc, #120]	; (8007674 <sx12xx_lora_send+0x1b0>)
 80075fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80075fe:	2300      	movs	r3, #0
 8007600:	603b      	str	r3, [r7, #0]
 8007602:	2102      	movs	r1, #2
 8007604:	7039      	strb	r1, [r7, #0]
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6579      	str	r1, [r7, #84]	; 0x54
 800760a:	4619      	mov	r1, r3
 800760c:	f363 0100 	bfi	r1, r3, #0, #1
 8007610:	f363 0141 	bfi	r1, r3, #1, #1
 8007614:	f363 0182 	bfi	r1, r3, #2, #1
 8007618:	f363 01c5 	bfi	r1, r3, #3, #3
 800761c:	f362 1188 	bfi	r1, r2, #6, #3
 8007620:	2208      	movs	r2, #8
 8007622:	f362 2152 	bfi	r1, r2, #9, #10
 8007626:	f363 41de 	bfi	r1, r3, #19, #12
 800762a:	f363 71df 	bfi	r1, r3, #31, #1
 800762e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8007632:	480f      	ldr	r0, [pc, #60]	; (8007670 <sx12xx_lora_send+0x1ac>)
 8007634:	f007 fe92 	bl	800f35c <z_impl_z_log_msg2_static_create>
		if (!modem_release(&dev_data)) {
 8007638:	4809      	ldr	r0, [pc, #36]	; (8007660 <sx12xx_lora_send+0x19c>)
 800763a:	f7ff fdf3 	bl	8007224 <modem_release>
 800763e:	b108      	cbz	r0, 8007644 <sx12xx_lora_send+0x180>
	return 0;
 8007640:	2000      	movs	r0, #0
 8007642:	e7cf      	b.n	80075e4 <sx12xx_lora_send+0x120>
 8007644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800764c:	2101      	movs	r1, #1
 800764e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007652:	f005 fc63 	bl	800cf1c <z_impl_k_poll>
 8007656:	2000      	movs	r0, #0
 8007658:	e7c4      	b.n	80075e4 <sx12xx_lora_send+0x120>
		return -EINVAL;
 800765a:	f06f 0015 	mvn.w	r0, #21
 800765e:	e7c1      	b.n	80075e4 <sx12xx_lora_send+0x120>
 8007660:	20001094 	.word	0x20001094
 8007664:	080133bc 	.word	0x080133bc
 8007668:	080131a4 	.word	0x080131a4
 800766c:	08013268 	.word	0x08013268
 8007670:	08012044 	.word	0x08012044
 8007674:	080131d0 	.word	0x080131d0

08007678 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8007678:	b530      	push	{r4, r5, lr}
 800767a:	b09b      	sub	sp, #108	; 0x6c
 800767c:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8007680:	aa10      	add	r2, sp, #64	; 0x40
 8007682:	9210      	str	r2, [sp, #64]	; 0x40
 8007684:	9211      	str	r2, [sp, #68]	; 0x44
 8007686:	2300      	movs	r3, #0
 8007688:	9312      	str	r3, [sp, #72]	; 0x48
 800768a:	9313      	str	r3, [sp, #76]	; 0x4c
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800768c:	930b      	str	r3, [sp, #44]	; 0x2c
 800768e:	930c      	str	r3, [sp, #48]	; 0x30
 8007690:	930d      	str	r3, [sp, #52]	; 0x34
 8007692:	930e      	str	r3, [sp, #56]	; 0x38
 8007694:	930f      	str	r3, [sp, #60]	; 0x3c
 8007696:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800769a:	2001      	movs	r0, #1
 800769c:	f360 0304 	bfi	r3, r0, #0, #5
 80076a0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 80076a4:	920f      	str	r2, [sp, #60]	; 0x3c
 80076a6:	4b32      	ldr	r3, [pc, #200]	; (8007770 <sx12xx_lora_recv+0xf8>)
 80076a8:	f3bf 8f5b 	dmb	ish
 80076ac:	e853 2f00 	ldrex	r2, [r3]
 80076b0:	2a00      	cmp	r2, #0
 80076b2:	d103      	bne.n	80076bc <sx12xx_lora_recv+0x44>
 80076b4:	e843 0400 	strex	r4, r0, [r3]
 80076b8:	2c00      	cmp	r4, #0
 80076ba:	d1f7      	bne.n	80076ac <sx12xx_lora_recv+0x34>
 80076bc:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 80076c0:	d153      	bne.n	800776a <sx12xx_lora_recv+0xf2>
		return -EBUSY;
	}

	dev_data.async_rx_cb = NULL;
 80076c2:	3b44      	subs	r3, #68	; 0x44
 80076c4:	2400      	movs	r4, #0
 80076c6:	609c      	str	r4, [r3, #8]
	/* Store operation signal */
	dev_data.operation_done = &done;
 80076c8:	aa10      	add	r2, sp, #64	; 0x40
 80076ca:	605a      	str	r2, [r3, #4]
	/* Set data output location */
	dev_data.rx_params.buf = data;
 80076cc:	6499      	str	r1, [r3, #72]	; 0x48
	dev_data.rx_params.size = &size;
 80076ce:	f10d 0207 	add.w	r2, sp, #7
 80076d2:	64da      	str	r2, [r3, #76]	; 0x4c
	dev_data.rx_params.rssi = rssi;
 80076d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076d6:	651a      	str	r2, [r3, #80]	; 0x50
	dev_data.rx_params.snr = snr;
 80076d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076da:	655a      	str	r2, [r3, #84]	; 0x54

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 80076dc:	4d25      	ldr	r5, [pc, #148]	; (8007774 <sx12xx_lora_recv+0xfc>)
 80076de:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80076e0:	21ff      	movs	r1, #255	; 0xff
 80076e2:	4798      	blx	r3
	Radio.Rx(0);
 80076e4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80076e6:	4620      	mov	r0, r4
 80076e8:	4798      	blx	r3
 80076ea:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 80076ee:	2101      	movs	r1, #1
 80076f0:	a80b      	add	r0, sp, #44	; 0x2c
 80076f2:	f005 fc13 	bl	800cf1c <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 80076f6:	1e04      	subs	r4, r0, #0
 80076f8:	db04      	blt.n	8007704 <sx12xx_lora_recv+0x8c>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 80076fa:	f89d 4007 	ldrb.w	r4, [sp, #7]
}
 80076fe:	4620      	mov	r0, r4
 8007700:	b01b      	add	sp, #108	; 0x6c
 8007702:	bd30      	pop	{r4, r5, pc}
		if (!modem_release(&dev_data)) {
 8007704:	481c      	ldr	r0, [pc, #112]	; (8007778 <sx12xx_lora_recv+0x100>)
 8007706:	f7ff fd8d 	bl	8007224 <modem_release>
 800770a:	b950      	cbnz	r0, 8007722 <sx12xx_lora_recv+0xaa>
 800770c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007714:	2101      	movs	r1, #1
 8007716:	a80b      	add	r0, sp, #44	; 0x2c
 8007718:	f005 fc00 	bl	800cf1c <z_impl_k_poll>
			return size;
 800771c:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8007720:	e7ed      	b.n	80076fe <sx12xx_lora_recv+0x86>
		LOG_INF("Receive timeout");
 8007722:	2301      	movs	r3, #1
 8007724:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007728:	4b14      	ldr	r3, [pc, #80]	; (800777c <sx12xx_lora_recv+0x104>)
 800772a:	9318      	str	r3, [sp, #96]	; 0x60
 800772c:	2300      	movs	r3, #0
 800772e:	9302      	str	r3, [sp, #8]
 8007730:	2202      	movs	r2, #2
 8007732:	f88d 2008 	strb.w	r2, [sp, #8]
 8007736:	9a02      	ldr	r2, [sp, #8]
 8007738:	9217      	str	r2, [sp, #92]	; 0x5c
 800773a:	4619      	mov	r1, r3
 800773c:	f363 0100 	bfi	r1, r3, #0, #1
 8007740:	f363 0141 	bfi	r1, r3, #1, #1
 8007744:	f363 0182 	bfi	r1, r3, #2, #1
 8007748:	f363 01c5 	bfi	r1, r3, #3, #3
 800774c:	2203      	movs	r2, #3
 800774e:	f362 1188 	bfi	r1, r2, #6, #3
 8007752:	2208      	movs	r2, #8
 8007754:	f362 2152 	bfi	r1, r2, #9, #10
 8007758:	f363 41de 	bfi	r1, r3, #19, #12
 800775c:	f363 71df 	bfi	r1, r3, #31, #1
 8007760:	aa17      	add	r2, sp, #92	; 0x5c
 8007762:	4807      	ldr	r0, [pc, #28]	; (8007780 <sx12xx_lora_recv+0x108>)
 8007764:	f007 fdfa 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return ret;
 8007768:	e7c9      	b.n	80076fe <sx12xx_lora_recv+0x86>
		return -EBUSY;
 800776a:	f06f 040f 	mvn.w	r4, #15
 800776e:	e7c6      	b.n	80076fe <sx12xx_lora_recv+0x86>
 8007770:	200010d8 	.word	0x200010d8
 8007774:	080133bc 	.word	0x080133bc
 8007778:	20001094 	.word	0x20001094
 800777c:	080131ec 	.word	0x080131ec
 8007780:	08012044 	.word	0x08012044

08007784 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb,
  lora_recv_error_timeout_cb error_timeout_cb)
{
 8007784:	b510      	push	{r4, lr}
 8007786:	b090      	sub	sp, #64	; 0x40
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 8007788:	4613      	mov	r3, r2
 800778a:	b302      	cbz	r2, 80077ce <sx12xx_lora_recv_async+0x4a>
 800778c:	b103      	cbz	r3, 8007790 <sx12xx_lora_recv_async+0xc>
 800778e:	b301      	cbz	r1, 80077d2 <sx12xx_lora_recv_async+0x4e>
      LOG_ERR("One of callback functions cannot be equal NULL");
      return -EINVAL;
  }

	/* Cancel ongoing reception */
	if (cb == NULL) {
 8007790:	2900      	cmp	r1, #0
 8007792:	d043      	beq.n	800781c <sx12xx_lora_recv_async+0x98>
 8007794:	4a27      	ldr	r2, [pc, #156]	; (8007834 <sx12xx_lora_recv_async+0xb0>)
 8007796:	2001      	movs	r0, #1
 8007798:	f3bf 8f5b 	dmb	ish
 800779c:	e852 4f00 	ldrex	r4, [r2]
 80077a0:	2c00      	cmp	r4, #0
 80077a2:	d104      	bne.n	80077ae <sx12xx_lora_recv_async+0x2a>
 80077a4:	e842 0c00 	strex	ip, r0, [r2]
 80077a8:	f1bc 0f00 	cmp.w	ip, #0
 80077ac:	d1f6      	bne.n	800779c <sx12xx_lora_recv_async+0x18>
 80077ae:	f3bf 8f5b 	dmb	ish
		}
		return 0;
	}

	/* Ensure available */
	if (!modem_acquire(&dev_data)) {
 80077b2:	d13c      	bne.n	800782e <sx12xx_lora_recv_async+0xaa>
		return -EBUSY;
	}

	/* Store parameters */
	dev_data.async_rx_cb = cb;
 80077b4:	3a44      	subs	r2, #68	; 0x44
 80077b6:	6091      	str	r1, [r2, #8]
   dev_data.async_rx_error_timeout_cb = error_timeout_cb;
 80077b8:	60d3      	str	r3, [r2, #12]

	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 80077ba:	4c1f      	ldr	r4, [pc, #124]	; (8007838 <sx12xx_lora_recv_async+0xb4>)
 80077bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80077be:	21ff      	movs	r1, #255	; 0xff
 80077c0:	4798      	blx	r3
	Radio.Rx(0);
 80077c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077c4:	2000      	movs	r0, #0
 80077c6:	4798      	blx	r3

	return 0;
 80077c8:	2000      	movs	r0, #0
}
 80077ca:	b010      	add	sp, #64	; 0x40
 80077cc:	bd10      	pop	{r4, pc}
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 80077ce:	2900      	cmp	r1, #0
 80077d0:	d0dc      	beq.n	800778c <sx12xx_lora_recv_async+0x8>
      LOG_ERR("One of callback functions cannot be equal NULL");
 80077d2:	2201      	movs	r2, #1
 80077d4:	f8ad 2008 	strh.w	r2, [sp, #8]
 80077d8:	4b18      	ldr	r3, [pc, #96]	; (800783c <sx12xx_lora_recv_async+0xb8>)
 80077da:	930e      	str	r3, [sp, #56]	; 0x38
 80077dc:	2300      	movs	r3, #0
 80077de:	9301      	str	r3, [sp, #4]
 80077e0:	2102      	movs	r1, #2
 80077e2:	f88d 1004 	strb.w	r1, [sp, #4]
 80077e6:	9901      	ldr	r1, [sp, #4]
 80077e8:	910d      	str	r1, [sp, #52]	; 0x34
 80077ea:	4619      	mov	r1, r3
 80077ec:	f363 0100 	bfi	r1, r3, #0, #1
 80077f0:	f363 0141 	bfi	r1, r3, #1, #1
 80077f4:	f363 0182 	bfi	r1, r3, #2, #1
 80077f8:	f363 01c5 	bfi	r1, r3, #3, #3
 80077fc:	f362 1188 	bfi	r1, r2, #6, #3
 8007800:	2208      	movs	r2, #8
 8007802:	f362 2152 	bfi	r1, r2, #9, #10
 8007806:	f363 41de 	bfi	r1, r3, #19, #12
 800780a:	f363 71df 	bfi	r1, r3, #31, #1
 800780e:	aa0d      	add	r2, sp, #52	; 0x34
 8007810:	480b      	ldr	r0, [pc, #44]	; (8007840 <sx12xx_lora_recv_async+0xbc>)
 8007812:	f007 fda3 	bl	800f35c <z_impl_z_log_msg2_static_create>
      return -EINVAL;
 8007816:	f06f 0015 	mvn.w	r0, #21
 800781a:	e7d6      	b.n	80077ca <sx12xx_lora_recv_async+0x46>
		if (!modem_release(&dev_data)) {
 800781c:	4809      	ldr	r0, [pc, #36]	; (8007844 <sx12xx_lora_recv_async+0xc0>)
 800781e:	f7ff fd01 	bl	8007224 <modem_release>
 8007822:	b108      	cbz	r0, 8007828 <sx12xx_lora_recv_async+0xa4>
		return 0;
 8007824:	2000      	movs	r0, #0
 8007826:	e7d0      	b.n	80077ca <sx12xx_lora_recv_async+0x46>
			return -EINVAL;
 8007828:	f06f 0015 	mvn.w	r0, #21
 800782c:	e7cd      	b.n	80077ca <sx12xx_lora_recv_async+0x46>
		return -EBUSY;
 800782e:	f06f 000f 	mvn.w	r0, #15
 8007832:	e7ca      	b.n	80077ca <sx12xx_lora_recv_async+0x46>
 8007834:	200010d8 	.word	0x200010d8
 8007838:	080133bc 	.word	0x080133bc
 800783c:	080131fc 	.word	0x080131fc
 8007840:	08012044 	.word	0x08012044
 8007844:	20001094 	.word	0x20001094

08007848 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8007848:	b570      	push	{r4, r5, r6, lr}
 800784a:	b08a      	sub	sp, #40	; 0x28
 800784c:	460c      	mov	r4, r1
 800784e:	4b2b      	ldr	r3, [pc, #172]	; (80078fc <sx12xx_lora_config+0xb4>)
 8007850:	2201      	movs	r2, #1
 8007852:	f3bf 8f5b 	dmb	ish
 8007856:	e853 1f00 	ldrex	r1, [r3]
 800785a:	2900      	cmp	r1, #0
 800785c:	d103      	bne.n	8007866 <sx12xx_lora_config+0x1e>
 800785e:	e843 2000 	strex	r0, r2, [r3]
 8007862:	2800      	cmp	r0, #0
 8007864:	d1f7      	bne.n	8007856 <sx12xx_lora_config+0xe>
 8007866:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 800786a:	d143      	bne.n	80078f4 <sx12xx_lora_config+0xac>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 800786c:	4b24      	ldr	r3, [pc, #144]	; (8007900 <sx12xx_lora_config+0xb8>)
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	6820      	ldr	r0, [r4, #0]
 8007872:	4798      	blx	r3

	if (config->tx) {
 8007874:	7b63      	ldrb	r3, [r4, #13]
 8007876:	b9eb      	cbnz	r3, 80078b4 <sx12xx_lora_config+0x6c>
				  config->coding_rate, config->preamble_len,
				  config->fixed_len, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */

        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 8007878:	7ae2      	ldrb	r2, [r4, #11]
 800787a:	2a00      	cmp	r2, #0
 800787c:	d038      	beq.n	80078f0 <sx12xx_lora_config+0xa8>
 800787e:	7aa1      	ldrb	r1, [r4, #10]

		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 8007880:	4b1f      	ldr	r3, [pc, #124]	; (8007900 <sx12xx_lora_config+0xb8>)
 8007882:	699d      	ldr	r5, [r3, #24]
 8007884:	2001      	movs	r0, #1
 8007886:	9009      	str	r0, [sp, #36]	; 0x24
 8007888:	2300      	movs	r3, #0
 800788a:	9308      	str	r3, [sp, #32]
 800788c:	9307      	str	r3, [sp, #28]
 800788e:	9306      	str	r3, [sp, #24]
 8007890:	9305      	str	r3, [sp, #20]
 8007892:	9104      	str	r1, [sp, #16]
 8007894:	9203      	str	r2, [sp, #12]
 8007896:	220a      	movs	r2, #10
 8007898:	9202      	str	r2, [sp, #8]
 800789a:	8922      	ldrh	r2, [r4, #8]
 800789c:	9201      	str	r2, [sp, #4]
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	79a3      	ldrb	r3, [r4, #6]
 80078a2:	7962      	ldrb	r2, [r4, #5]
 80078a4:	7921      	ldrb	r1, [r4, #4]
 80078a6:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, config->fixed_len, payload_len,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 80078a8:	4816      	ldr	r0, [pc, #88]	; (8007904 <sx12xx_lora_config+0xbc>)
 80078aa:	f7ff fcbb 	bl	8007224 <modem_release>
	return 0;
 80078ae:	2000      	movs	r0, #0
}
 80078b0:	b00a      	add	sp, #40	; 0x28
 80078b2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 80078b4:	4d14      	ldr	r5, [pc, #80]	; (8007908 <sx12xx_lora_config+0xc0>)
 80078b6:	6820      	ldr	r0, [r4, #0]
 80078b8:	6861      	ldr	r1, [r4, #4]
 80078ba:	68a2      	ldr	r2, [r4, #8]
 80078bc:	68e3      	ldr	r3, [r4, #12]
 80078be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 80078c0:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <sx12xx_lora_config+0xb8>)
 80078c2:	69dd      	ldr	r5, [r3, #28]
				  config->bandwidth, config->datarate,
 80078c4:	7963      	ldrb	r3, [r4, #5]
				  config->coding_rate, config->preamble_len,
 80078c6:	79a1      	ldrb	r1, [r4, #6]
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 80078c8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80078cc:	9208      	str	r2, [sp, #32]
 80078ce:	2200      	movs	r2, #0
 80078d0:	9207      	str	r2, [sp, #28]
 80078d2:	9206      	str	r2, [sp, #24]
 80078d4:	9205      	str	r2, [sp, #20]
 80078d6:	2001      	movs	r0, #1
 80078d8:	9004      	str	r0, [sp, #16]
 80078da:	7ae6      	ldrb	r6, [r4, #11]
 80078dc:	9603      	str	r6, [sp, #12]
 80078de:	8926      	ldrh	r6, [r4, #8]
 80078e0:	9602      	str	r6, [sp, #8]
 80078e2:	9101      	str	r1, [sp, #4]
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	7923      	ldrb	r3, [r4, #4]
 80078e8:	f994 100c 	ldrsb.w	r1, [r4, #12]
 80078ec:	47a8      	blx	r5
 80078ee:	e7db      	b.n	80078a8 <sx12xx_lora_config+0x60>
        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 80078f0:	2100      	movs	r1, #0
 80078f2:	e7c5      	b.n	8007880 <sx12xx_lora_config+0x38>
		return -EBUSY;
 80078f4:	f06f 000f 	mvn.w	r0, #15
 80078f8:	e7da      	b.n	80078b0 <sx12xx_lora_config+0x68>
 80078fa:	bf00      	nop
 80078fc:	200010d8 	.word	0x200010d8
 8007900:	080133bc 	.word	0x080133bc
 8007904:	20001094 	.word	0x20001094
 8007908:	200010c8 	.word	0x200010c8

0800790c <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 800790c:	b530      	push	{r4, r5, lr}
 800790e:	b099      	sub	sp, #100	; 0x64
 8007910:	4608      	mov	r0, r1
 8007912:	4611      	mov	r1, r2
 8007914:	461d      	mov	r5, r3
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8007916:	ab0e      	add	r3, sp, #56	; 0x38
 8007918:	930e      	str	r3, [sp, #56]	; 0x38
 800791a:	930f      	str	r3, [sp, #60]	; 0x3c
 800791c:	2400      	movs	r4, #0
 800791e:	9410      	str	r4, [sp, #64]	; 0x40
 8007920:	9411      	str	r4, [sp, #68]	; 0x44
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8007922:	9409      	str	r4, [sp, #36]	; 0x24
 8007924:	940a      	str	r4, [sp, #40]	; 0x28
 8007926:	940b      	str	r4, [sp, #44]	; 0x2c
 8007928:	940c      	str	r4, [sp, #48]	; 0x30
 800792a:	940d      	str	r4, [sp, #52]	; 0x34
 800792c:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 8007930:	2401      	movs	r4, #1
 8007932:	f364 0c04 	bfi	ip, r4, #0, #5
 8007936:	f88d c031 	strb.w	ip, [sp, #49]	; 0x31
 800793a:	930d      	str	r3, [sp, #52]	; 0x34
 800793c:	4b32      	ldr	r3, [pc, #200]	; (8007a08 <sx12xx_lora_test_cw+0xfc>)
 800793e:	f3bf 8f5b 	dmb	ish
 8007942:	e853 2f00 	ldrex	r2, [r3]
 8007946:	2a00      	cmp	r2, #0
 8007948:	d104      	bne.n	8007954 <sx12xx_lora_test_cw+0x48>
 800794a:	e843 4c00 	strex	ip, r4, [r3]
 800794e:	f1bc 0f00 	cmp.w	ip, #0
 8007952:	d1f6      	bne.n	8007942 <sx12xx_lora_test_cw+0x36>
 8007954:	f3bf 8f5b 	dmb	ish
        K_POLL_TYPE_SIGNAL,
        K_POLL_MODE_NOTIFY_ONLY,
        &done);
    int ret;
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8007958:	d153      	bne.n	8007a02 <sx12xx_lora_test_cw+0xf6>
		return -EBUSY;
	}

    /* Store signal */
    dev_data.operation_done = &done;
 800795a:	3b44      	subs	r3, #68	; 0x44
 800795c:	aa0e      	add	r2, sp, #56	; 0x38
 800795e:	605a      	str	r2, [r3, #4]

    /* Act TX timeout event as successfully end of CW transmission */
    dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;
 8007960:	4a2a      	ldr	r2, [pc, #168]	; (8007a0c <sx12xx_lora_test_cw+0x100>)
 8007962:	615a      	str	r2, [r3, #20]

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8007964:	4b2a      	ldr	r3, [pc, #168]	; (8007a10 <sx12xx_lora_test_cw+0x104>)
 8007966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007968:	462a      	mov	r2, r5
 800796a:	4798      	blx	r3

    ret = k_poll(&evt, 1, K_MSEC(2000 * duration));
 800796c:	b12d      	cbz	r5, 800797a <sx12xx_lora_test_cw+0x6e>
 800796e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007972:	fb02 f105 	mul.w	r1, r2, r5
 8007976:	2300      	movs	r3, #0
 8007978:	e001      	b.n	800797e <sx12xx_lora_test_cw+0x72>
 800797a:	2100      	movs	r1, #0
 800797c:	460b      	mov	r3, r1
 800797e:	008a      	lsls	r2, r1, #2
 8007980:	1852      	adds	r2, r2, r1
 8007982:	eb43 0383 	adc.w	r3, r3, r3, lsl #2
 8007986:	1892      	adds	r2, r2, r2
 8007988:	415b      	adcs	r3, r3
 800798a:	2101      	movs	r1, #1
 800798c:	a809      	add	r0, sp, #36	; 0x24
 800798e:	f005 fac5 	bl	800cf1c <z_impl_k_poll>
    if (ret < 0) {
 8007992:	2800      	cmp	r0, #0
 8007994:	db02      	blt.n	800799c <sx12xx_lora_test_cw+0x90>
            k_poll(&evt, 1, K_FOREVER);
        }
        /* Clean up TX timeout event callback */
        dev_data.events.TxTimeout = NULL;
    }
	return 0;
 8007996:	2000      	movs	r0, #0
}
 8007998:	b019      	add	sp, #100	; 0x64
 800799a:	bd30      	pop	{r4, r5, pc}
        LOG_ERR("CW test failed!");
 800799c:	2201      	movs	r2, #1
 800799e:	f8ad 2004 	strh.w	r2, [sp, #4]
 80079a2:	4b1c      	ldr	r3, [pc, #112]	; (8007a14 <sx12xx_lora_test_cw+0x108>)
 80079a4:	9316      	str	r3, [sp, #88]	; 0x58
 80079a6:	2300      	movs	r3, #0
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	2102      	movs	r1, #2
 80079ac:	f88d 1000 	strb.w	r1, [sp]
 80079b0:	9900      	ldr	r1, [sp, #0]
 80079b2:	9115      	str	r1, [sp, #84]	; 0x54
 80079b4:	4619      	mov	r1, r3
 80079b6:	f363 0100 	bfi	r1, r3, #0, #1
 80079ba:	f363 0141 	bfi	r1, r3, #1, #1
 80079be:	f363 0182 	bfi	r1, r3, #2, #1
 80079c2:	f363 01c5 	bfi	r1, r3, #3, #3
 80079c6:	f362 1188 	bfi	r1, r2, #6, #3
 80079ca:	2208      	movs	r2, #8
 80079cc:	f362 2152 	bfi	r1, r2, #9, #10
 80079d0:	f363 41de 	bfi	r1, r3, #19, #12
 80079d4:	f363 71df 	bfi	r1, r3, #31, #1
 80079d8:	aa15      	add	r2, sp, #84	; 0x54
 80079da:	480f      	ldr	r0, [pc, #60]	; (8007a18 <sx12xx_lora_test_cw+0x10c>)
 80079dc:	f007 fcbe 	bl	800f35c <z_impl_z_log_msg2_static_create>
        if (!modem_release(&dev_data)) {
 80079e0:	480e      	ldr	r0, [pc, #56]	; (8007a1c <sx12xx_lora_test_cw+0x110>)
 80079e2:	f7ff fc1f 	bl	8007224 <modem_release>
 80079e6:	b118      	cbz	r0, 80079f0 <sx12xx_lora_test_cw+0xe4>
        dev_data.events.TxTimeout = NULL;
 80079e8:	2000      	movs	r0, #0
 80079ea:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <sx12xx_lora_test_cw+0x110>)
 80079ec:	6158      	str	r0, [r3, #20]
 80079ee:	e7d3      	b.n	8007998 <sx12xx_lora_test_cw+0x8c>
 80079f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079f8:	2101      	movs	r1, #1
 80079fa:	a809      	add	r0, sp, #36	; 0x24
 80079fc:	f005 fa8e 	bl	800cf1c <z_impl_k_poll>
 8007a00:	e7f2      	b.n	80079e8 <sx12xx_lora_test_cw+0xdc>
		return -EBUSY;
 8007a02:	f06f 000f 	mvn.w	r0, #15
 8007a06:	e7c7      	b.n	8007998 <sx12xx_lora_test_cw+0x8c>
 8007a08:	200010d8 	.word	0x200010d8
 8007a0c:	08007275 	.word	0x08007275
 8007a10:	080133bc 	.word	0x080133bc
 8007a14:	0801322c 	.word	0x0801322c
 8007a18:	08012044 	.word	0x08012044
 8007a1c:	20001094 	.word	0x20001094

08007a20 <sx12xx_lora_time_on_air>:

int sx12xx_lora_time_on_air(const struct device *dev,
            const struct lora_modem_config *config,
            uint32_t data_len)
{
    if(config == NULL) {
 8007a20:	b189      	cbz	r1, 8007a46 <sx12xx_lora_time_on_air+0x26>
{
 8007a22:	b510      	push	{r4, lr}
 8007a24:	b084      	sub	sp, #16
        return -EINVAL;
    }
    return (int) Radio.TimeOnAir(MODEM_LORA, config->bandwidth,
 8007a26:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <sx12xx_lora_time_on_air+0x2c>)
 8007a28:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	9003      	str	r0, [sp, #12]
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	9202      	str	r2, [sp, #8]
 8007a32:	7acb      	ldrb	r3, [r1, #11]
 8007a34:	9301      	str	r3, [sp, #4]
 8007a36:	890b      	ldrh	r3, [r1, #8]
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	798b      	ldrb	r3, [r1, #6]
 8007a3c:	794a      	ldrb	r2, [r1, #5]
 8007a3e:	7909      	ldrb	r1, [r1, #4]
 8007a40:	47a0      	blx	r4
                                 config->datarate, config->coding_rate,
                                 config->preamble_len,
                                 config->fixed_len, (uint8_t) data_len, true);
}
 8007a42:	b004      	add	sp, #16
 8007a44:	bd10      	pop	{r4, pc}
        return -EINVAL;
 8007a46:	f06f 0015 	mvn.w	r0, #21
}
 8007a4a:	4770      	bx	lr
 8007a4c:	080133bc 	.word	0x080133bc

08007a50 <sx12xx_lora_is_channel_free>:
int sx12xx_lora_is_channel_free(const struct device *dev,
            const struct lora_modem_config *config,
            int16_t rssi_theshold, uint32_t timeout)
{
    bool is_free;
    if(config == NULL) {
 8007a50:	b311      	cbz	r1, 8007a98 <sx12xx_lora_is_channel_free+0x48>
{
 8007a52:	b510      	push	{r4, lr}
 8007a54:	4608      	mov	r0, r1
 8007a56:	4915      	ldr	r1, [pc, #84]	; (8007aac <sx12xx_lora_is_channel_free+0x5c>)
 8007a58:	2401      	movs	r4, #1
 8007a5a:	f3bf 8f5b 	dmb	ish
 8007a5e:	e851 cf00 	ldrex	ip, [r1]
 8007a62:	f1bc 0f00 	cmp.w	ip, #0
 8007a66:	d104      	bne.n	8007a72 <sx12xx_lora_is_channel_free+0x22>
 8007a68:	e841 4e00 	strex	lr, r4, [r1]
 8007a6c:	f1be 0f00 	cmp.w	lr, #0
 8007a70:	d1f5      	bne.n	8007a5e <sx12xx_lora_is_channel_free+0xe>
 8007a72:	f3bf 8f5b 	dmb	ish
        return -EINVAL;
    }
    if (!modem_acquire(&dev_data)) {
 8007a76:	d112      	bne.n	8007a9e <sx12xx_lora_is_channel_free+0x4e>
        125000, /* BW_125_KHZ = 0 */
        250000, /* BW_250_KHZ */
        500000, /* BW_500_KHZ */
    };

    is_free = Radio.IsChannelFree(config->frequency, rx_bw[config->bandwidth],
 8007a78:	490d      	ldr	r1, [pc, #52]	; (8007ab0 <sx12xx_lora_is_channel_free+0x60>)
 8007a7a:	690c      	ldr	r4, [r1, #16]
 8007a7c:	f890 c004 	ldrb.w	ip, [r0, #4]
 8007a80:	490c      	ldr	r1, [pc, #48]	; (8007ab4 <sx12xx_lora_is_channel_free+0x64>)
 8007a82:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8007a86:	6800      	ldr	r0, [r0, #0]
 8007a88:	47a0      	blx	r4
 8007a8a:	4604      	mov	r4, r0
                            rssi_theshold, timeout);
    if (!modem_release(&dev_data)) {
 8007a8c:	480a      	ldr	r0, [pc, #40]	; (8007ab8 <sx12xx_lora_is_channel_free+0x68>)
 8007a8e:	f7ff fbc9 	bl	8007224 <modem_release>
 8007a92:	b138      	cbz	r0, 8007aa4 <sx12xx_lora_is_channel_free+0x54>
        /* Not receiving or already being stopped */
        return -EINVAL;
    }
    return is_free ? 1 : 0;
 8007a94:	4620      	mov	r0, r4
}
 8007a96:	bd10      	pop	{r4, pc}
        return -EINVAL;
 8007a98:	f06f 0015 	mvn.w	r0, #21
}
 8007a9c:	4770      	bx	lr
        return -EBUSY;
 8007a9e:	f06f 000f 	mvn.w	r0, #15
 8007aa2:	e7f8      	b.n	8007a96 <sx12xx_lora_is_channel_free+0x46>
        return -EINVAL;
 8007aa4:	f06f 0015 	mvn.w	r0, #21
 8007aa8:	e7f5      	b.n	8007a96 <sx12xx_lora_is_channel_free+0x46>
 8007aaa:	bf00      	nop
 8007aac:	200010d8 	.word	0x200010d8
 8007ab0:	080133bc 	.word	0x080133bc
 8007ab4:	0801327c 	.word	0x0801327c
 8007ab8:	20001094 	.word	0x20001094

08007abc <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 8007abc:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8007abe:	4b0f      	ldr	r3, [pc, #60]	; (8007afc <sx12xx_init+0x40>)
 8007ac0:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8007ac4:	2400      	movs	r4, #0
 8007ac6:	f3bf 8f5b 	dmb	ish
 8007aca:	e852 1f00 	ldrex	r1, [r2]
 8007ace:	e842 4500 	strex	r5, r4, [r2]
 8007ad2:	2d00      	cmp	r5, #0
 8007ad4:	d1f9      	bne.n	8007aca <sx12xx_init+0xe>
 8007ad6:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
 8007ada:	6018      	str	r0, [r3, #0]
	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8007adc:	4a08      	ldr	r2, [pc, #32]	; (8007b00 <sx12xx_init+0x44>)
 8007ade:	611a      	str	r2, [r3, #16]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8007ae0:	4a08      	ldr	r2, [pc, #32]	; (8007b04 <sx12xx_init+0x48>)
 8007ae2:	619a      	str	r2, [r3, #24]
  dev_data.events.RxError = sx12xx_ev_rx_error_timeout;
 8007ae4:	4a08      	ldr	r2, [pc, #32]	; (8007b08 <sx12xx_init+0x4c>)
 8007ae6:	621a      	str	r2, [r3, #32]
  dev_data.events.RxTimeout = sx12xx_ev_rx_error_timeout;
 8007ae8:	61da      	str	r2, [r3, #28]
	Radio.Init(&dev_data.events);
 8007aea:	4d08      	ldr	r5, [pc, #32]	; (8007b0c <sx12xx_init+0x50>)
 8007aec:	682a      	ldr	r2, [r5, #0]
 8007aee:	f103 0010 	add.w	r0, r3, #16
 8007af2:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 8007af4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007af6:	4798      	blx	r3

	return 0;
}
 8007af8:	4620      	mov	r0, r4
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	20001094 	.word	0x20001094
 8007b00:	08007311 	.word	0x08007311
 8007b04:	0800732d 	.word	0x0800732d
 8007b08:	08007295 	.word	0x08007295
 8007b0c:	080133bc 	.word	0x080133bc

08007b10 <sx127x_dio_work_handle>:

	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
 8007b10:	b508      	push	{r3, lr}
	int dio = work - dev_data.dio_work;
 8007b12:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <sx127x_dio_work_handle+0x14>)
 8007b14:	1ac0      	subs	r0, r0, r3
 8007b16:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
 8007b18:	4b03      	ldr	r3, [pc, #12]	; (8007b28 <sx127x_dio_work_handle+0x18>)
 8007b1a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007b1e:	2000      	movs	r0, #0
 8007b20:	4798      	blx	r3
}
 8007b22:	bd08      	pop	{r3, pc}
 8007b24:	20001140 	.word	0x20001140
 8007b28:	2000034c 	.word	0x2000034c

08007b2c <sx127x_transceive>:
	}

}

static int sx127x_transceive(uint8_t reg, bool write, void *data, size_t length)
{
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	b08a      	sub	sp, #40	; 0x28
 8007b30:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 8007b34:	f10d 0007 	add.w	r0, sp, #7
 8007b38:	9006      	str	r0, [sp, #24]
 8007b3a:	2001      	movs	r0, #1
 8007b3c:	9007      	str	r0, [sp, #28]
 8007b3e:	9208      	str	r2, [sp, #32]
 8007b40:	9309      	str	r3, [sp, #36]	; 0x24
			.buf = data,
			.len = length
		}
	};

	struct spi_buf_set tx = {
 8007b42:	ab06      	add	r3, sp, #24
 8007b44:	9304      	str	r3, [sp, #16]
 8007b46:	2302      	movs	r3, #2
 8007b48:	9305      	str	r3, [sp, #20]
		.buffers = buf,
		.count = ARRAY_SIZE(buf),
	};

	if (!write) {
 8007b4a:	b149      	cbz	r1, 8007b60 <sx127x_transceive+0x34>
		};

		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
	}

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8007b4c:	490b      	ldr	r1, [pc, #44]	; (8007b7c <sx127x_transceive+0x50>)
 8007b4e:	6848      	ldr	r0, [r1, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
 8007b50:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8007b52:	681c      	ldr	r4, [r3, #0]
 8007b54:	2300      	movs	r3, #0
 8007b56:	aa04      	add	r2, sp, #16
 8007b58:	3108      	adds	r1, #8
 8007b5a:	47a0      	blx	r4
}
 8007b5c:	b00a      	add	sp, #40	; 0x28
 8007b5e:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
 8007b60:	ab06      	add	r3, sp, #24
 8007b62:	9302      	str	r3, [sp, #8]
 8007b64:	2302      	movs	r3, #2
 8007b66:	9303      	str	r3, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8007b68:	4904      	ldr	r1, [pc, #16]	; (8007b7c <sx127x_transceive+0x50>)
 8007b6a:	6848      	ldr	r0, [r1, #4]
	const struct spi_driver_api *api =
 8007b6c:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8007b6e:	681c      	ldr	r4, [r3, #0]
 8007b70:	ab02      	add	r3, sp, #8
 8007b72:	aa04      	add	r2, sp, #16
 8007b74:	3108      	adds	r1, #8
 8007b76:	47a0      	blx	r4
 8007b78:	e7f0      	b.n	8007b5c <sx127x_transceive+0x30>
 8007b7a:	bf00      	nop
 8007b7c:	2000111c 	.word	0x2000111c

08007b80 <sx127x_irq_callback>:
{
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	4605      	mov	r5, r0
 8007b84:	fa92 f6a2 	rbit	r6, r2
 8007b88:	fab6 f686 	clz	r6, r6
 8007b8c:	b90a      	cbnz	r2, 8007b92 <sx127x_irq_callback+0x12>
 8007b8e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8007b92:	2400      	movs	r4, #0
 8007b94:	e000      	b.n	8007b98 <sx127x_irq_callback+0x18>
 8007b96:	3401      	adds	r4, #1
 8007b98:	2c03      	cmp	r4, #3
 8007b9a:	d813      	bhi.n	8007bc4 <sx127x_irq_callback+0x44>
		if (dev == dev_data.dio_dev[i] &&
 8007b9c:	1d23      	adds	r3, r4, #4
 8007b9e:	4a0a      	ldr	r2, [pc, #40]	; (8007bc8 <sx127x_irq_callback+0x48>)
 8007ba0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	42ab      	cmp	r3, r5
 8007ba8:	d1f5      	bne.n	8007b96 <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
 8007baa:	4b08      	ldr	r3, [pc, #32]	; (8007bcc <sx127x_irq_callback+0x4c>)
 8007bac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bb0:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
 8007bb2:	42b3      	cmp	r3, r6
 8007bb4:	d1ef      	bne.n	8007b96 <sx127x_irq_callback+0x16>
			k_work_submit(&dev_data.dio_work[i]);
 8007bb6:	1ca0      	adds	r0, r4, #2
 8007bb8:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8007bbc:	3004      	adds	r0, #4
 8007bbe:	f004 f949 	bl	800be54 <k_work_submit>
 8007bc2:	e7e8      	b.n	8007b96 <sx127x_irq_callback+0x16>
}
 8007bc4:	bd70      	pop	{r4, r5, r6, pc}
 8007bc6:	bf00      	nop
 8007bc8:	2000111c 	.word	0x2000111c
 8007bcc:	08013428 	.word	0x08013428

08007bd0 <SX1276Reset>:
{
 8007bd0:	b508      	push	{r3, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 8007bd2:	4b18      	ldr	r3, [pc, #96]	; (8007c34 <SX1276Reset+0x64>)
 8007bd4:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8007bd6:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f013 0f01 	tst.w	r3, #1
 8007bde:	d11b      	bne.n	8007c18 <SX1276Reset+0x48>
 8007be0:	2301      	movs	r3, #1
	if (value != 0)	{
 8007be2:	b1db      	cbz	r3, 8007c1c <SX1276Reset+0x4c>
	const struct gpio_driver_api *api =
 8007be4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	2101      	movs	r1, #1
 8007bea:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 8007bec:	200a      	movs	r0, #10
 8007bee:	2100      	movs	r1, #0
 8007bf0:	f004 fd06 	bl	800c600 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8007bf4:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <SX1276Reset+0x64>)
 8007bf6:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8007bf8:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f013 0f01 	tst.w	r3, #1
 8007c00:	d111      	bne.n	8007c26 <SX1276Reset+0x56>
 8007c02:	2300      	movs	r3, #0
	if (value != 0)	{
 8007c04:	b18b      	cbz	r3, 8007c2a <SX1276Reset+0x5a>
	const struct gpio_driver_api *api =
 8007c06:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	4798      	blx	r3
 8007c0e:	203c      	movs	r0, #60	; 0x3c
 8007c10:	2100      	movs	r1, #0
 8007c12:	f004 fcf5 	bl	800c600 <z_impl_k_sleep>
}
 8007c16:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	e7e2      	b.n	8007be2 <SX1276Reset+0x12>
	const struct gpio_driver_api *api =
 8007c1c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	2101      	movs	r1, #1
 8007c22:	4798      	blx	r3
 8007c24:	e7e2      	b.n	8007bec <SX1276Reset+0x1c>
		value = (value != 0) ? 0 : 1;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e7ec      	b.n	8007c04 <SX1276Reset+0x34>
	const struct gpio_driver_api *api =
 8007c2a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2101      	movs	r1, #1
 8007c30:	4798      	blx	r3
 8007c32:	e7ec      	b.n	8007c0e <SX1276Reset+0x3e>
 8007c34:	2000111c 	.word	0x2000111c

08007c38 <SX1276IoIrqInit>:
{
 8007c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c3a:	b095      	sub	sp, #84	; 0x54
 8007c3c:	4605      	mov	r5, r0
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8007c3e:	2400      	movs	r4, #0
 8007c40:	e04c      	b.n	8007cdc <SX1276IoIrqInit+0xa4>
			LOG_ERR("Cannot get pointer to %s device",
 8007c42:	4b5a      	ldr	r3, [pc, #360]	; (8007dac <SX1276IoIrqInit+0x174>)
 8007c44:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 8007c48:	9302      	str	r3, [sp, #8]
 8007c4a:	4b59      	ldr	r3, [pc, #356]	; (8007db0 <SX1276IoIrqInit+0x178>)
 8007c4c:	9301      	str	r3, [sp, #4]
 8007c4e:	9000      	str	r0, [sp, #0]
 8007c50:	4603      	mov	r3, r0
 8007c52:	2201      	movs	r2, #1
 8007c54:	4957      	ldr	r1, [pc, #348]	; (8007db4 <SX1276IoIrqInit+0x17c>)
 8007c56:	f008 fb73 	bl	8010340 <z_log_msg2_runtime_create>
}
 8007c5a:	b015      	add	sp, #84	; 0x54
 8007c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8007c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8007c62:	f013 0f01 	tst.w	r3, #1
 8007c66:	d06f      	beq.n	8007d48 <SX1276IoIrqInit+0x110>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8007c68:	2301      	movs	r3, #1
 8007c6a:	fa03 fc01 	lsl.w	ip, r3, r1
 8007c6e:	6833      	ldr	r3, [r6, #0]
 8007c70:	ea43 030c 	orr.w	r3, r3, ip
 8007c74:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	4798      	blx	r3
		gpio_init_callback(&callbacks[i],
 8007c7a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8007c7e:	4b4e      	ldr	r3, [pc, #312]	; (8007db8 <SX1276IoIrqInit+0x180>)
 8007c80:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				   BIT(sx127x_dios[i].pin));
 8007c84:	4b49      	ldr	r3, [pc, #292]	; (8007dac <SX1276IoIrqInit+0x174>)
 8007c86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c8a:	791e      	ldrb	r6, [r3, #4]
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	40b3      	lsls	r3, r6
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8007c90:	4a4a      	ldr	r2, [pc, #296]	; (8007dbc <SX1276IoIrqInit+0x184>)
 8007c92:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 8007c94:	608b      	str	r3, [r1, #8]
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8007c96:	1d23      	adds	r3, r4, #4
 8007c98:	4a49      	ldr	r2, [pc, #292]	; (8007dc0 <SX1276IoIrqInit+0x188>)
 8007c9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c9e:	6858      	ldr	r0, [r3, #4]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 8007ca0:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d057      	beq.n	8007d58 <SX1276IoIrqInit+0x120>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8007ca8:	2201      	movs	r2, #1
 8007caa:	4798      	blx	r3
 8007cac:	2800      	cmp	r0, #0
 8007cae:	db56      	blt.n	8007d5e <SX1276IoIrqInit+0x126>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8007cb0:	1d23      	adds	r3, r4, #4
 8007cb2:	4a43      	ldr	r2, [pc, #268]	; (8007dc0 <SX1276IoIrqInit+0x188>)
 8007cb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007cb8:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 8007cba:	6881      	ldr	r1, [r0, #8]
	const struct gpio_driver_data *const data =
 8007cbc:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	40b3      	lsls	r3, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8007cc4:	421a      	tst	r2, r3
 8007cc6:	d16d      	bne.n	8007da4 <SX1276IoIrqInit+0x16c>
 8007cc8:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8007ccc:	698f      	ldr	r7, [r1, #24]
 8007cce:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8007cd2:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8007cda:	3401      	adds	r4, #1
 8007cdc:	2c03      	cmp	r4, #3
 8007cde:	d8bc      	bhi.n	8007c5a <SX1276IoIrqInit+0x22>
		if (!irqHandlers[i]) {
 8007ce0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d0f8      	beq.n	8007cda <SX1276IoIrqInit+0xa2>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 8007ce8:	4b30      	ldr	r3, [pc, #192]	; (8007dac <SX1276IoIrqInit+0x174>)
 8007cea:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8007cee:	f003 fbdb 	bl	800b4a8 <z_impl_device_get_binding>
 8007cf2:	1d23      	adds	r3, r4, #4
 8007cf4:	4a32      	ldr	r2, [pc, #200]	; (8007dc0 <SX1276IoIrqInit+0x188>)
 8007cf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007cfa:	6058      	str	r0, [r3, #4]
		if (dev_data.dio_dev[i] == NULL) {
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d0a0      	beq.n	8007c42 <SX1276IoIrqInit+0xa>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8007d00:	4e2f      	ldr	r6, [pc, #188]	; (8007dc0 <SX1276IoIrqInit+0x188>)
 8007d02:	1ca0      	adds	r0, r4, #2
 8007d04:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 8007d08:	492e      	ldr	r1, [pc, #184]	; (8007dc4 <SX1276IoIrqInit+0x18c>)
 8007d0a:	3004      	adds	r0, #4
 8007d0c:	f008 ffa8 	bl	8010c60 <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8007d10:	1d23      	adds	r3, r4, #4
 8007d12:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8007d16:	6870      	ldr	r0, [r6, #4]
 8007d18:	4b24      	ldr	r3, [pc, #144]	; (8007dac <SX1276IoIrqInit+0x174>)
 8007d1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d1e:	7919      	ldrb	r1, [r3, #4]
				   | sx127x_dios[i].flags);
 8007d20:	795b      	ldrb	r3, [r3, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8007d22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 8007d2a:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 8007d2c:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8007d2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007d32:	2a00      	cmp	r2, #0
 8007d34:	d093      	beq.n	8007c5e <SX1276IoIrqInit+0x26>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8007d36:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8007d3a:	d090      	beq.n	8007c5e <SX1276IoIrqInit+0x26>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8007d3c:	f013 0f01 	tst.w	r3, #1
 8007d40:	d08d      	beq.n	8007c5e <SX1276IoIrqInit+0x26>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8007d42:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8007d46:	e78a      	b.n	8007c5e <SX1276IoIrqInit+0x26>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8007d48:	2301      	movs	r3, #1
 8007d4a:	fa03 fc01 	lsl.w	ip, r3, r1
 8007d4e:	6833      	ldr	r3, [r6, #0]
 8007d50:	ea23 030c 	bic.w	r3, r3, ip
 8007d54:	6033      	str	r3, [r6, #0]
 8007d56:	e78e      	b.n	8007c76 <SX1276IoIrqInit+0x3e>
		return -ENOTSUP;
 8007d58:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007d5c:	e7a6      	b.n	8007cac <SX1276IoIrqInit+0x74>
			LOG_ERR("Could not set gpio callback.");
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f8ad 2018 	strh.w	r2, [sp, #24]
 8007d64:	4b18      	ldr	r3, [pc, #96]	; (8007dc8 <SX1276IoIrqInit+0x190>)
 8007d66:	9312      	str	r3, [sp, #72]	; 0x48
 8007d68:	2300      	movs	r3, #0
 8007d6a:	9305      	str	r3, [sp, #20]
 8007d6c:	2102      	movs	r1, #2
 8007d6e:	f88d 1014 	strb.w	r1, [sp, #20]
 8007d72:	9905      	ldr	r1, [sp, #20]
 8007d74:	9111      	str	r1, [sp, #68]	; 0x44
 8007d76:	4619      	mov	r1, r3
 8007d78:	f363 0100 	bfi	r1, r3, #0, #1
 8007d7c:	f363 0141 	bfi	r1, r3, #1, #1
 8007d80:	f363 0182 	bfi	r1, r3, #2, #1
 8007d84:	f363 01c5 	bfi	r1, r3, #3, #3
 8007d88:	f362 1188 	bfi	r1, r2, #6, #3
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	f362 2152 	bfi	r1, r2, #9, #10
 8007d92:	f363 41de 	bfi	r1, r3, #19, #12
 8007d96:	f363 71df 	bfi	r1, r3, #31, #1
 8007d9a:	aa11      	add	r2, sp, #68	; 0x44
 8007d9c:	4805      	ldr	r0, [pc, #20]	; (8007db4 <SX1276IoIrqInit+0x17c>)
 8007d9e:	f007 fadd 	bl	800f35c <z_impl_z_log_msg2_static_create>
			return;
 8007da2:	e75a      	b.n	8007c5a <SX1276IoIrqInit+0x22>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8007da4:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8007da8:	e790      	b.n	8007ccc <SX1276IoIrqInit+0x94>
 8007daa:	bf00      	nop
 8007dac:	08013428 	.word	0x08013428
 8007db0:	08013164 	.word	0x08013164
 8007db4:	0801203c 	.word	0x0801203c
 8007db8:	200010ec 	.word	0x200010ec
 8007dbc:	08007b81 	.word	0x08007b81
 8007dc0:	2000111c 	.word	0x2000111c
 8007dc4:	08007b11 	.word	0x08007b11
 8007dc8:	08013288 	.word	0x08013288

08007dcc <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	b090      	sub	sp, #64	; 0x40
 8007dd0:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
 8007dd2:	b2c0      	uxtb	r0, r0
 8007dd4:	f008 fac6 	bl	8010364 <sx127x_read>
	if (ret < 0) {
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	db01      	blt.n	8007de0 <SX1276ReadBuffer+0x14>
		LOG_ERR("Unable to read address: 0x%x", addr);
	}
}
 8007ddc:	b010      	add	sp, #64	; 0x40
 8007dde:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to read address: 0x%x", addr);
 8007de0:	2201      	movs	r2, #1
 8007de2:	f8ad 2008 	strh.w	r2, [sp, #8]
 8007de6:	4b10      	ldr	r3, [pc, #64]	; (8007e28 <SX1276ReadBuffer+0x5c>)
 8007de8:	930e      	str	r3, [sp, #56]	; 0x38
 8007dea:	940f      	str	r4, [sp, #60]	; 0x3c
 8007dec:	2300      	movs	r3, #0
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	2103      	movs	r1, #3
 8007df2:	f88d 1004 	strb.w	r1, [sp, #4]
 8007df6:	9901      	ldr	r1, [sp, #4]
 8007df8:	910d      	str	r1, [sp, #52]	; 0x34
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	f363 0100 	bfi	r1, r3, #0, #1
 8007e00:	f363 0141 	bfi	r1, r3, #1, #1
 8007e04:	f363 0182 	bfi	r1, r3, #2, #1
 8007e08:	f363 01c5 	bfi	r1, r3, #3, #3
 8007e0c:	f362 1188 	bfi	r1, r2, #6, #3
 8007e10:	220c      	movs	r2, #12
 8007e12:	f362 2152 	bfi	r1, r2, #9, #10
 8007e16:	f363 41de 	bfi	r1, r3, #19, #12
 8007e1a:	f363 71df 	bfi	r1, r3, #31, #1
 8007e1e:	aa0d      	add	r2, sp, #52	; 0x34
 8007e20:	4802      	ldr	r0, [pc, #8]	; (8007e2c <SX1276ReadBuffer+0x60>)
 8007e22:	f007 fa9b 	bl	800f35c <z_impl_z_log_msg2_static_create>
}
 8007e26:	e7d9      	b.n	8007ddc <SX1276ReadBuffer+0x10>
 8007e28:	080132a8 	.word	0x080132a8
 8007e2c:	0801203c 	.word	0x0801203c

08007e30 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 8007e30:	b530      	push	{r4, r5, lr}
 8007e32:	b0a7      	sub	sp, #156	; 0x9c
 8007e34:	4604      	mov	r4, r0
 8007e36:	4882      	ldr	r0, [pc, #520]	; (8008040 <sx127x_lora_init+0x210>)
 8007e38:	f003 fb36 	bl	800b4a8 <z_impl_device_get_binding>
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 8007e3c:	4b81      	ldr	r3, [pc, #516]	; (8008044 <sx127x_lora_init+0x214>)
 8007e3e:	6058      	str	r0, [r3, #4]
	if (!dev_data.spi) {
 8007e40:	b300      	cbz	r0, 8007e84 <sx127x_lora_init+0x54>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 8007e42:	4b80      	ldr	r3, [pc, #512]	; (8008044 <sx127x_lora_init+0x214>)
 8007e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e48:	819a      	strh	r2, [r3, #12]
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
 8007e4a:	4a7f      	ldr	r2, [pc, #508]	; (8008048 <sx127x_lora_init+0x218>)
 8007e4c:	609a      	str	r2, [r3, #8]
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);
 8007e4e:	2200      	movs	r2, #0
 8007e50:	81da      	strh	r2, [r3, #14]
 8007e52:	487e      	ldr	r0, [pc, #504]	; (800804c <sx127x_lora_init+0x21c>)
 8007e54:	f003 fb28 	bl	800b4a8 <z_impl_device_get_binding>

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8007e58:	4b7d      	ldr	r3, [pc, #500]	; (8008050 <sx127x_lora_init+0x220>)
 8007e5a:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
 8007e5c:	b1f8      	cbz	r0, 8007e9e <sx127x_lora_init+0x6e>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 8007e5e:	4b7c      	ldr	r3, [pc, #496]	; (8008050 <sx127x_lora_init+0x220>)
 8007e60:	2206      	movs	r2, #6
 8007e62:	711a      	strb	r2, [r3, #4]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
 8007e64:	2201      	movs	r2, #1
 8007e66:	715a      	strb	r2, [r3, #5]
	spi_cs.delay = 0U;
 8007e68:	2200      	movs	r2, #0
 8007e6a:	609a      	str	r2, [r3, #8]

	dev_data.spi_cfg.cs = &spi_cs;
 8007e6c:	4875      	ldr	r0, [pc, #468]	; (8008044 <sx127x_lora_init+0x214>)
 8007e6e:	6103      	str	r3, [r0, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 8007e70:	f641 2307 	movw	r3, #6663	; 0x1a07
 8007e74:	4975      	ldr	r1, [pc, #468]	; (800804c <sx127x_lora_init+0x21c>)
 8007e76:	f7ff faad 	bl	80073d4 <__sx12xx_configure_pin>
	if (ret) {
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	b1e0      	cbz	r0, 8007eb8 <sx127x_lora_init+0x88>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 8007e7e:	4628      	mov	r0, r5
 8007e80:	b027      	add	sp, #156	; 0x9c
 8007e82:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Cannot get pointer to %s device",
 8007e84:	4b6e      	ldr	r3, [pc, #440]	; (8008040 <sx127x_lora_init+0x210>)
 8007e86:	9302      	str	r3, [sp, #8]
 8007e88:	4b72      	ldr	r3, [pc, #456]	; (8008054 <sx127x_lora_init+0x224>)
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	9000      	str	r0, [sp, #0]
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2201      	movs	r2, #1
 8007e92:	4971      	ldr	r1, [pc, #452]	; (8008058 <sx127x_lora_init+0x228>)
 8007e94:	f008 fa54 	bl	8010340 <z_log_msg2_runtime_create>
		return -EINVAL;
 8007e98:	f06f 0515 	mvn.w	r5, #21
 8007e9c:	e7ef      	b.n	8007e7e <sx127x_lora_init+0x4e>
		LOG_ERR("Cannot get pointer to %s device",
 8007e9e:	4b6b      	ldr	r3, [pc, #428]	; (800804c <sx127x_lora_init+0x21c>)
 8007ea0:	9302      	str	r3, [sp, #8]
 8007ea2:	4b6c      	ldr	r3, [pc, #432]	; (8008054 <sx127x_lora_init+0x224>)
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	9000      	str	r0, [sp, #0]
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2201      	movs	r2, #1
 8007eac:	496a      	ldr	r1, [pc, #424]	; (8008058 <sx127x_lora_init+0x228>)
 8007eae:	f008 fa47 	bl	8010340 <z_log_msg2_runtime_create>
		return -EIO;
 8007eb2:	f06f 0504 	mvn.w	r5, #4
 8007eb6:	e7e2      	b.n	8007e7e <sx127x_lora_init+0x4e>
 8007eb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	f004 fb9f 	bl	800c600 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8007ec2:	4b60      	ldr	r3, [pc, #384]	; (8008044 <sx127x_lora_init+0x214>)
 8007ec4:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8007ec6:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f013 0f01 	tst.w	r3, #1
 8007ece:	d165      	bne.n	8007f9c <sx127x_lora_init+0x16c>
 8007ed0:	462b      	mov	r3, r5
	if (value != 0)	{
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d064      	beq.n	8007fa0 <sx127x_lora_init+0x170>
	const struct gpio_driver_api *api =
 8007ed6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	2101      	movs	r1, #1
 8007edc:	4798      	blx	r3
 8007ede:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	f004 fb8c 	bl	800c600 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8007eee:	2042      	movs	r0, #66	; 0x42
 8007ef0:	f008 fa38 	bl	8010364 <sx127x_read>
	if (ret < 0) {
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	db58      	blt.n	8007faa <sx127x_lora_init+0x17a>
	LOG_INF("SX127x version 0x%02x found", regval);
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007efe:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8007f02:	4a56      	ldr	r2, [pc, #344]	; (800805c <sx127x_lora_init+0x22c>)
 8007f04:	9212      	str	r2, [sp, #72]	; 0x48
 8007f06:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	2203      	movs	r2, #3
 8007f0e:	f88d 2010 	strb.w	r2, [sp, #16]
 8007f12:	9904      	ldr	r1, [sp, #16]
 8007f14:	9111      	str	r1, [sp, #68]	; 0x44
 8007f16:	4619      	mov	r1, r3
 8007f18:	f363 0100 	bfi	r1, r3, #0, #1
 8007f1c:	f363 0141 	bfi	r1, r3, #1, #1
 8007f20:	f363 0182 	bfi	r1, r3, #2, #1
 8007f24:	f363 01c5 	bfi	r1, r3, #3, #3
 8007f28:	f362 1188 	bfi	r1, r2, #6, #3
 8007f2c:	220c      	movs	r2, #12
 8007f2e:	f362 2152 	bfi	r1, r2, #9, #10
 8007f32:	f363 41de 	bfi	r1, r3, #19, #12
 8007f36:	f363 71df 	bfi	r1, r3, #31, #1
 8007f3a:	aa11      	add	r2, sp, #68	; 0x44
 8007f3c:	4846      	ldr	r0, [pc, #280]	; (8008058 <sx127x_lora_init+0x228>)
 8007f3e:	f007 fa0d 	bl	800f35c <z_impl_z_log_msg2_static_create>
	ret = sx127x_antenna_configure();
 8007f42:	f008 f9fb 	bl	801033c <sx127x_antenna_configure>
	if (ret < 0) {
 8007f46:	2800      	cmp	r0, #0
 8007f48:	db54      	blt.n	8007ff4 <sx127x_lora_init+0x1c4>
	ret = sx12xx_init(dev);
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7ff fdb6 	bl	8007abc <sx12xx_init>
	if (ret < 0) {
 8007f50:	1e04      	subs	r4, r0, #0
 8007f52:	da94      	bge.n	8007e7e <sx127x_lora_init+0x4e>
		LOG_ERR("Failed to initialize SX12xx common");
 8007f54:	2201      	movs	r2, #1
 8007f56:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007f5a:	4b41      	ldr	r3, [pc, #260]	; (8008060 <sx127x_lora_init+0x230>)
 8007f5c:	9318      	str	r3, [sp, #96]	; 0x60
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	2102      	movs	r1, #2
 8007f64:	f88d 1010 	strb.w	r1, [sp, #16]
 8007f68:	9904      	ldr	r1, [sp, #16]
 8007f6a:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f363 0100 	bfi	r1, r3, #0, #1
 8007f72:	f363 0141 	bfi	r1, r3, #1, #1
 8007f76:	f363 0182 	bfi	r1, r3, #2, #1
 8007f7a:	f363 01c5 	bfi	r1, r3, #3, #3
 8007f7e:	f362 1188 	bfi	r1, r2, #6, #3
 8007f82:	2208      	movs	r2, #8
 8007f84:	f362 2152 	bfi	r1, r2, #9, #10
 8007f88:	f363 41de 	bfi	r1, r3, #19, #12
 8007f8c:	f363 71df 	bfi	r1, r3, #31, #1
 8007f90:	aa17      	add	r2, sp, #92	; 0x5c
 8007f92:	4831      	ldr	r0, [pc, #196]	; (8008058 <sx127x_lora_init+0x228>)
 8007f94:	f007 f9e2 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return ret;
 8007f98:	4625      	mov	r5, r4
 8007f9a:	e770      	b.n	8007e7e <sx127x_lora_init+0x4e>
		value = (value != 0) ? 0 : 1;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e798      	b.n	8007ed2 <sx127x_lora_init+0xa2>
	const struct gpio_driver_api *api =
 8007fa0:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	4798      	blx	r3
 8007fa8:	e799      	b.n	8007ede <sx127x_lora_init+0xae>
		LOG_ERR("Unable to read version info");
 8007faa:	2201      	movs	r2, #1
 8007fac:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007fb0:	4b2c      	ldr	r3, [pc, #176]	; (8008064 <sx127x_lora_init+0x234>)
 8007fb2:	9324      	str	r3, [sp, #144]	; 0x90
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9304      	str	r3, [sp, #16]
 8007fb8:	2102      	movs	r1, #2
 8007fba:	f88d 1010 	strb.w	r1, [sp, #16]
 8007fbe:	9904      	ldr	r1, [sp, #16]
 8007fc0:	9123      	str	r1, [sp, #140]	; 0x8c
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	f363 0100 	bfi	r1, r3, #0, #1
 8007fc8:	f363 0141 	bfi	r1, r3, #1, #1
 8007fcc:	f363 0182 	bfi	r1, r3, #2, #1
 8007fd0:	f363 01c5 	bfi	r1, r3, #3, #3
 8007fd4:	f362 1188 	bfi	r1, r2, #6, #3
 8007fd8:	2208      	movs	r2, #8
 8007fda:	f362 2152 	bfi	r1, r2, #9, #10
 8007fde:	f363 41de 	bfi	r1, r3, #19, #12
 8007fe2:	f363 71df 	bfi	r1, r3, #31, #1
 8007fe6:	aa23      	add	r2, sp, #140	; 0x8c
 8007fe8:	481b      	ldr	r0, [pc, #108]	; (8008058 <sx127x_lora_init+0x228>)
 8007fea:	f007 f9b7 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EIO;
 8007fee:	f06f 0504 	mvn.w	r5, #4
 8007ff2:	e744      	b.n	8007e7e <sx127x_lora_init+0x4e>
		LOG_ERR("Unable to configure antenna");
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007ffa:	4b1b      	ldr	r3, [pc, #108]	; (8008068 <sx127x_lora_init+0x238>)
 8007ffc:	931e      	str	r3, [sp, #120]	; 0x78
 8007ffe:	2300      	movs	r3, #0
 8008000:	9304      	str	r3, [sp, #16]
 8008002:	2102      	movs	r1, #2
 8008004:	f88d 1010 	strb.w	r1, [sp, #16]
 8008008:	9904      	ldr	r1, [sp, #16]
 800800a:	911d      	str	r1, [sp, #116]	; 0x74
 800800c:	4619      	mov	r1, r3
 800800e:	f363 0100 	bfi	r1, r3, #0, #1
 8008012:	f363 0141 	bfi	r1, r3, #1, #1
 8008016:	f363 0182 	bfi	r1, r3, #2, #1
 800801a:	f363 01c5 	bfi	r1, r3, #3, #3
 800801e:	f362 1188 	bfi	r1, r2, #6, #3
 8008022:	2208      	movs	r2, #8
 8008024:	f362 2152 	bfi	r1, r2, #9, #10
 8008028:	f363 41de 	bfi	r1, r3, #19, #12
 800802c:	f363 71df 	bfi	r1, r3, #31, #1
 8008030:	aa1d      	add	r2, sp, #116	; 0x74
 8008032:	4809      	ldr	r0, [pc, #36]	; (8008058 <sx127x_lora_init+0x228>)
 8008034:	f007 f992 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EIO;
 8008038:	f06f 0504 	mvn.w	r5, #4
 800803c:	e71f      	b.n	8007e7e <sx127x_lora_init+0x4e>
 800803e:	bf00      	nop
 8008040:	080130d0 	.word	0x080130d0
 8008044:	2000111c 	.word	0x2000111c
 8008048:	0007a120 	.word	0x0007a120
 800804c:	08012f3c 	.word	0x08012f3c
 8008050:	20001180 	.word	0x20001180
 8008054:	08013164 	.word	0x08013164
 8008058:	0801203c 	.word	0x0801203c
 800805c:	080132e4 	.word	0x080132e4
 8008060:	0801331c 	.word	0x0801331c
 8008064:	080132c8 	.word	0x080132c8
 8008068:	08013300 	.word	0x08013300

0800806c <SX1276WriteBuffer>:
{
 800806c:	b510      	push	{r4, lr}
 800806e:	b090      	sub	sp, #64	; 0x40
 8008070:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
 8008072:	b2c0      	uxtb	r0, r0
 8008074:	f008 f97d 	bl	8010372 <sx127x_write>
	if (ret < 0) {
 8008078:	2800      	cmp	r0, #0
 800807a:	db01      	blt.n	8008080 <SX1276WriteBuffer+0x14>
}
 800807c:	b010      	add	sp, #64	; 0x40
 800807e:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to write address: 0x%x", addr);
 8008080:	2201      	movs	r2, #1
 8008082:	f8ad 2008 	strh.w	r2, [sp, #8]
 8008086:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <SX1276WriteBuffer+0x5c>)
 8008088:	930e      	str	r3, [sp, #56]	; 0x38
 800808a:	940f      	str	r4, [sp, #60]	; 0x3c
 800808c:	2300      	movs	r3, #0
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	2103      	movs	r1, #3
 8008092:	f88d 1004 	strb.w	r1, [sp, #4]
 8008096:	9901      	ldr	r1, [sp, #4]
 8008098:	910d      	str	r1, [sp, #52]	; 0x34
 800809a:	4619      	mov	r1, r3
 800809c:	f363 0100 	bfi	r1, r3, #0, #1
 80080a0:	f363 0141 	bfi	r1, r3, #1, #1
 80080a4:	f363 0182 	bfi	r1, r3, #2, #1
 80080a8:	f363 01c5 	bfi	r1, r3, #3, #3
 80080ac:	f362 1188 	bfi	r1, r2, #6, #3
 80080b0:	220c      	movs	r2, #12
 80080b2:	f362 2152 	bfi	r1, r2, #9, #10
 80080b6:	f363 41de 	bfi	r1, r3, #19, #12
 80080ba:	f363 71df 	bfi	r1, r3, #31, #1
 80080be:	aa0d      	add	r2, sp, #52	; 0x34
 80080c0:	4802      	ldr	r0, [pc, #8]	; (80080cc <SX1276WriteBuffer+0x60>)
 80080c2:	f007 f94b 	bl	800f35c <z_impl_z_log_msg2_static_create>
}
 80080c6:	e7d9      	b.n	800807c <SX1276WriteBuffer+0x10>
 80080c8:	08013340 	.word	0x08013340
 80080cc:	0801203c 	.word	0x0801203c

080080d0 <SX1276SetRfTxPower>:
{
 80080d0:	b530      	push	{r4, r5, lr}
 80080d2:	b09d      	sub	sp, #116	; 0x74
 80080d4:	4605      	mov	r5, r0
	uint8_t pa_config = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	uint8_t pa_dac = 0;
 80080dc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
 80080e0:	2201      	movs	r2, #1
 80080e2:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 80080e6:	204d      	movs	r0, #77	; 0x4d
 80080e8:	f008 f93c 	bl	8010364 <sx127x_read>
	if (ret < 0) {
 80080ec:	2800      	cmp	r0, #0
 80080ee:	db2e      	blt.n	800814e <SX1276SetRfTxPower+0x7e>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 80080f0:	f89d 4026 	ldrb.w	r4, [sp, #38]	; 0x26
 80080f4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80080f8:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
		power = clamp_int8(power, 2, 20);
 80080fc:	2214      	movs	r2, #20
 80080fe:	2102      	movs	r1, #2
 8008100:	4628      	mov	r0, r5
 8008102:	f008 f911 	bl	8010328 <clamp_int8>
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 8008106:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800810a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		if (power > 17) {
 8008112:	2811      	cmp	r0, #17
 8008114:	dd3e      	ble.n	8008194 <SX1276SetRfTxPower+0xc4>
			pa_dac |= SX127X_PADAC_20DBM_ON;
 8008116:	f044 0407 	orr.w	r4, r4, #7
 800811a:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 800811e:	3805      	subs	r0, #5
 8008120:	f000 000f 	and.w	r0, r0, #15
 8008124:	4318      	orrs	r0, r3
 8008126:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
 800812a:	2201      	movs	r2, #1
 800812c:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8008130:	2009      	movs	r0, #9
 8008132:	f008 f91e 	bl	8010372 <sx127x_write>
	if (ret < 0) {
 8008136:	2800      	cmp	r0, #0
 8008138:	db37      	blt.n	80081aa <SX1276SetRfTxPower+0xda>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
 800813a:	2201      	movs	r2, #1
 800813c:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8008140:	204d      	movs	r0, #77	; 0x4d
 8008142:	f008 f916 	bl	8010372 <sx127x_write>
	if (ret < 0) {
 8008146:	2800      	cmp	r0, #0
 8008148:	db52      	blt.n	80081f0 <SX1276SetRfTxPower+0x120>
}
 800814a:	b01d      	add	sp, #116	; 0x74
 800814c:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Unable to read PA dac");
 800814e:	2201      	movs	r2, #1
 8008150:	f8ad 2004 	strh.w	r2, [sp, #4]
 8008154:	4b38      	ldr	r3, [pc, #224]	; (8008238 <SX1276SetRfTxPower+0x168>)
 8008156:	931a      	str	r3, [sp, #104]	; 0x68
 8008158:	2300      	movs	r3, #0
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	2102      	movs	r1, #2
 800815e:	f88d 1000 	strb.w	r1, [sp]
 8008162:	9900      	ldr	r1, [sp, #0]
 8008164:	9119      	str	r1, [sp, #100]	; 0x64
 8008166:	4619      	mov	r1, r3
 8008168:	f363 0100 	bfi	r1, r3, #0, #1
 800816c:	f363 0141 	bfi	r1, r3, #1, #1
 8008170:	f363 0182 	bfi	r1, r3, #2, #1
 8008174:	f363 01c5 	bfi	r1, r3, #3, #3
 8008178:	f362 1188 	bfi	r1, r2, #6, #3
 800817c:	2208      	movs	r2, #8
 800817e:	f362 2152 	bfi	r1, r2, #9, #10
 8008182:	f363 41de 	bfi	r1, r3, #19, #12
 8008186:	f363 71df 	bfi	r1, r3, #31, #1
 800818a:	aa19      	add	r2, sp, #100	; 0x64
 800818c:	482b      	ldr	r0, [pc, #172]	; (800823c <SX1276SetRfTxPower+0x16c>)
 800818e:	f007 f8e5 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return;
 8008192:	e7da      	b.n	800814a <SX1276SetRfTxPower+0x7a>
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8008194:	f044 0404 	orr.w	r4, r4, #4
 8008198:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 800819c:	3802      	subs	r0, #2
 800819e:	f000 000f 	and.w	r0, r0, #15
 80081a2:	4318      	orrs	r0, r3
 80081a4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 80081a8:	e7bf      	b.n	800812a <SX1276SetRfTxPower+0x5a>
		LOG_ERR("Unable to write PA config");
 80081aa:	2201      	movs	r2, #1
 80081ac:	f8ad 2004 	strh.w	r2, [sp, #4]
 80081b0:	4b23      	ldr	r3, [pc, #140]	; (8008240 <SX1276SetRfTxPower+0x170>)
 80081b2:	9314      	str	r3, [sp, #80]	; 0x50
 80081b4:	2300      	movs	r3, #0
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	2102      	movs	r1, #2
 80081ba:	f88d 1000 	strb.w	r1, [sp]
 80081be:	9900      	ldr	r1, [sp, #0]
 80081c0:	9113      	str	r1, [sp, #76]	; 0x4c
 80081c2:	4619      	mov	r1, r3
 80081c4:	f363 0100 	bfi	r1, r3, #0, #1
 80081c8:	f363 0141 	bfi	r1, r3, #1, #1
 80081cc:	f363 0182 	bfi	r1, r3, #2, #1
 80081d0:	f363 01c5 	bfi	r1, r3, #3, #3
 80081d4:	f362 1188 	bfi	r1, r2, #6, #3
 80081d8:	2208      	movs	r2, #8
 80081da:	f362 2152 	bfi	r1, r2, #9, #10
 80081de:	f363 41de 	bfi	r1, r3, #19, #12
 80081e2:	f363 71df 	bfi	r1, r3, #31, #1
 80081e6:	aa13      	add	r2, sp, #76	; 0x4c
 80081e8:	4814      	ldr	r0, [pc, #80]	; (800823c <SX1276SetRfTxPower+0x16c>)
 80081ea:	f007 f8b7 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return;
 80081ee:	e7ac      	b.n	800814a <SX1276SetRfTxPower+0x7a>
		LOG_ERR("Unable to write PA dac");
 80081f0:	2201      	movs	r2, #1
 80081f2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80081f6:	4b13      	ldr	r3, [pc, #76]	; (8008244 <SX1276SetRfTxPower+0x174>)
 80081f8:	930e      	str	r3, [sp, #56]	; 0x38
 80081fa:	2300      	movs	r3, #0
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	2102      	movs	r1, #2
 8008200:	f88d 1000 	strb.w	r1, [sp]
 8008204:	9900      	ldr	r1, [sp, #0]
 8008206:	910d      	str	r1, [sp, #52]	; 0x34
 8008208:	4619      	mov	r1, r3
 800820a:	f363 0100 	bfi	r1, r3, #0, #1
 800820e:	f363 0141 	bfi	r1, r3, #1, #1
 8008212:	f363 0182 	bfi	r1, r3, #2, #1
 8008216:	f363 01c5 	bfi	r1, r3, #3, #3
 800821a:	f362 1188 	bfi	r1, r2, #6, #3
 800821e:	2208      	movs	r2, #8
 8008220:	f362 2152 	bfi	r1, r2, #9, #10
 8008224:	f363 41de 	bfi	r1, r3, #19, #12
 8008228:	f363 71df 	bfi	r1, r3, #31, #1
 800822c:	aa0d      	add	r2, sp, #52	; 0x34
 800822e:	4803      	ldr	r0, [pc, #12]	; (800823c <SX1276SetRfTxPower+0x16c>)
 8008230:	f007 f894 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return;
 8008234:	e789      	b.n	800814a <SX1276SetRfTxPower+0x7a>
 8008236:	bf00      	nop
 8008238:	08013360 	.word	0x08013360
 800823c:	0801203c 	.word	0x0801203c
 8008240:	08013378 	.word	0x08013378
 8008244:	08013394 	.word	0x08013394

08008248 <SX1276GetDio1PinState>:
{
 8008248:	b510      	push	{r4, lr}
 800824a:	b082      	sub	sp, #8
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 800824c:	4b0b      	ldr	r3, [pc, #44]	; (800827c <SX1276GetDio1PinState+0x34>)
 800824e:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
 8008250:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
 8008252:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	a901      	add	r1, sp, #4
 8008258:	4798      	blx	r3
	if (ret == 0) {
 800825a:	4603      	mov	r3, r0
 800825c:	b918      	cbnz	r0, 8008266 <SX1276GetDio1PinState+0x1e>
		*value ^= data->invert;
 800825e:	6821      	ldr	r1, [r4, #0]
 8008260:	9a01      	ldr	r2, [sp, #4]
 8008262:	404a      	eors	r2, r1
 8008264:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 8008266:	b913      	cbnz	r3, 800826e <SX1276GetDio1PinState+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8008268:	9b01      	ldr	r3, [sp, #4]
 800826a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	dc02      	bgt.n	8008278 <SX1276GetDio1PinState+0x30>
	return 0U;
 8008272:	2000      	movs	r0, #0
}
 8008274:	b002      	add	sp, #8
 8008276:	bd10      	pop	{r4, pc}
		return 1U;
 8008278:	2001      	movs	r0, #1
 800827a:	e7fb      	b.n	8008274 <SX1276GetDio1PinState+0x2c>
 800827c:	2000111c 	.word	0x2000111c

08008280 <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8008280:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <TimerInsertTimer+0x28>)
 8008282:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 8008284:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 8008286:	e001      	b.n	800828c <TimerInsertTimer+0xc>
    {
        if( obj->Timestamp > next->Timestamp )
        {
            cur = next;
 8008288:	461a      	mov	r2, r3
            next = next->Next;
 800828a:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 800828c:	6951      	ldr	r1, [r2, #20]
 800828e:	b139      	cbz	r1, 80082a0 <TimerInsertTimer+0x20>
        if( obj->Timestamp > next->Timestamp )
 8008290:	6819      	ldr	r1, [r3, #0]
 8008292:	f8d0 c000 	ldr.w	ip, [r0]
 8008296:	458c      	cmp	ip, r1
 8008298:	d8f6      	bhi.n	8008288 <TimerInsertTimer+0x8>
        }
        else
        {
            cur->Next = obj;
 800829a:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 800829c:	6143      	str	r3, [r0, #20]
            return;
 800829e:	4770      	bx	lr
        }
    }
    cur->Next = obj;
 80082a0:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	6143      	str	r3, [r0, #20]
}
 80082a6:	4770      	bx	lr
 80082a8:	2000118c 	.word	0x2000118c

080082ac <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 80082ac:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <TimerExists+0x18>)
 80082ae:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 80082b0:	e000      	b.n	80082b4 <TimerExists+0x8>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 80082b2:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 80082b4:	b11b      	cbz	r3, 80082be <TimerExists+0x12>
        if( cur == obj )
 80082b6:	4283      	cmp	r3, r0
 80082b8:	d1fb      	bne.n	80082b2 <TimerExists+0x6>
            return true;
 80082ba:	2001      	movs	r0, #1
    }
    return false;
}
 80082bc:	4770      	bx	lr
    return false;
 80082be:	2000      	movs	r0, #0
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	2000118c 	.word	0x2000118c

080082c8 <TimerInsertNewHeadTimer>:
{
 80082c8:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 80082ca:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <TimerInsertNewHeadTimer+0x18>)
 80082cc:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 80082ce:	b10b      	cbz	r3, 80082d4 <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 80082d0:	2200      	movs	r2, #0
 80082d2:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 80082d4:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 80082d6:	4b02      	ldr	r3, [pc, #8]	; (80082e0 <TimerInsertNewHeadTimer+0x18>)
 80082d8:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 80082da:	f008 f85e 	bl	801039a <TimerSetTimeout>
}
 80082de:	bd08      	pop	{r3, pc}
 80082e0:	2000118c 	.word	0x2000118c

080082e4 <TimerStart>:
{
 80082e4:	b510      	push	{r4, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 80082ea:	a801      	add	r0, sp, #4
 80082ec:	f007 ffff 	bl	80102ee <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 80082f0:	b1f4      	cbz	r4, 8008330 <TimerStart+0x4c>
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7ff ffda 	bl	80082ac <TimerExists>
 80082f8:	b9d0      	cbnz	r0, 8008330 <TimerStart+0x4c>
    obj->Timestamp = obj->ReloadValue;
 80082fa:	6863      	ldr	r3, [r4, #4]
 80082fc:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 80082fe:	2301      	movs	r3, #1
 8008300:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 8008302:	2300      	movs	r3, #0
 8008304:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 8008306:	4b11      	ldr	r3, [pc, #68]	; (800834c <TimerStart+0x68>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	b1ab      	cbz	r3, 8008338 <TimerStart+0x54>
        elapsedTime = RtcGetTimerElapsedTime( );
 800830c:	f7fe ff4c 	bl	80071a8 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	4418      	add	r0, r3
 8008314:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8008316:	4b0d      	ldr	r3, [pc, #52]	; (800834c <TimerStart+0x68>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4298      	cmp	r0, r3
 800831e:	d211      	bcs.n	8008344 <TimerStart+0x60>
            TimerInsertNewHeadTimer( obj );
 8008320:	4620      	mov	r0, r4
 8008322:	f7ff ffd1 	bl	80082c8 <TimerInsertNewHeadTimer>
    CRITICAL_SECTION_END( );
 8008326:	a801      	add	r0, sp, #4
 8008328:	f007 ffeb 	bl	8010302 <BoardCriticalSectionEnd>
}
 800832c:	b002      	add	sp, #8
 800832e:	bd10      	pop	{r4, pc}
        CRITICAL_SECTION_END( );
 8008330:	a801      	add	r0, sp, #4
 8008332:	f007 ffe6 	bl	8010302 <BoardCriticalSectionEnd>
        return;
 8008336:	e7f9      	b.n	800832c <TimerStart+0x48>
        RtcSetTimerContext( );
 8008338:	f7fe ff62 	bl	8007200 <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 800833c:	4620      	mov	r0, r4
 800833e:	f7ff ffc3 	bl	80082c8 <TimerInsertNewHeadTimer>
 8008342:	e7f0      	b.n	8008326 <TimerStart+0x42>
            TimerInsertTimer( obj );
 8008344:	4620      	mov	r0, r4
 8008346:	f7ff ff9b 	bl	8008280 <TimerInsertTimer>
 800834a:	e7ec      	b.n	8008326 <TimerStart+0x42>
 800834c:	2000118c 	.word	0x2000118c

08008350 <TimerIrqHandler>:
{
 8008350:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 8008352:	f7fe ff61 	bl	8007218 <RtcGetTimerContext>
 8008356:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8008358:	f7fe ff52 	bl	8007200 <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 800835c:	eba0 0c05 	sub.w	ip, r0, r5
    if( TimerListHead != NULL )
 8008360:	4b1c      	ldr	r3, [pc, #112]	; (80083d4 <TimerIrqHandler+0x84>)
 8008362:	681e      	ldr	r6, [r3, #0]
 8008364:	b16e      	cbz	r6, 8008382 <TimerIrqHandler+0x32>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8008366:	4632      	mov	r2, r6
 8008368:	e002      	b.n	8008370 <TimerIrqHandler+0x20>
                next->Timestamp = 0;
 800836a:	2100      	movs	r1, #0
 800836c:	6019      	str	r1, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800836e:	6952      	ldr	r2, [r2, #20]
 8008370:	6953      	ldr	r3, [r2, #20]
 8008372:	b133      	cbz	r3, 8008382 <TimerIrqHandler+0x32>
            if( next->Timestamp > deltaContext )
 8008374:	6819      	ldr	r1, [r3, #0]
 8008376:	4561      	cmp	r1, ip
 8008378:	d9f7      	bls.n	800836a <TimerIrqHandler+0x1a>
                next->Timestamp -= deltaContext;
 800837a:	1a2c      	subs	r4, r5, r0
 800837c:	4421      	add	r1, r4
 800837e:	6019      	str	r1, [r3, #0]
 8008380:	e7f5      	b.n	800836e <TimerIrqHandler+0x1e>
    if ( TimerListHead != NULL )
 8008382:	b146      	cbz	r6, 8008396 <TimerIrqHandler+0x46>
        TimerListHead = TimerListHead->Next;
 8008384:	6972      	ldr	r2, [r6, #20]
 8008386:	4b13      	ldr	r3, [pc, #76]	; (80083d4 <TimerIrqHandler+0x84>)
 8008388:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 800838a:	2300      	movs	r3, #0
 800838c:	7233      	strb	r3, [r6, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800838e:	68f3      	ldr	r3, [r6, #12]
 8008390:	b1a3      	cbz	r3, 80083bc <TimerIrqHandler+0x6c>
 8008392:	6930      	ldr	r0, [r6, #16]
 8008394:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8008396:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <TimerIrqHandler+0x84>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	b18b      	cbz	r3, 80083c0 <TimerIrqHandler+0x70>
 800839c:	681c      	ldr	r4, [r3, #0]
 800839e:	f7fe ff03 	bl	80071a8 <RtcGetTimerElapsedTime>
 80083a2:	4284      	cmp	r4, r0
 80083a4:	d20c      	bcs.n	80083c0 <TimerIrqHandler+0x70>
        cur = TimerListHead;
 80083a6:	4a0b      	ldr	r2, [pc, #44]	; (80083d4 <TimerIrqHandler+0x84>)
 80083a8:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 80083aa:	6959      	ldr	r1, [r3, #20]
 80083ac:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 80083ae:	2200      	movs	r2, #0
 80083b0:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	b11a      	cbz	r2, 80083be <TimerIrqHandler+0x6e>
 80083b6:	6918      	ldr	r0, [r3, #16]
 80083b8:	4790      	blx	r2
 80083ba:	e7ec      	b.n	8008396 <TimerIrqHandler+0x46>
        ExecuteCallBack( cur->Callback, cur->Context );
 80083bc:	e7fe      	b.n	80083bc <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 80083be:	e7fe      	b.n	80083be <TimerIrqHandler+0x6e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 80083c0:	4b04      	ldr	r3, [pc, #16]	; (80083d4 <TimerIrqHandler+0x84>)
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	b108      	cbz	r0, 80083ca <TimerIrqHandler+0x7a>
 80083c6:	7a43      	ldrb	r3, [r0, #9]
 80083c8:	b103      	cbz	r3, 80083cc <TimerIrqHandler+0x7c>
}
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 80083cc:	f007 ffe5 	bl	801039a <TimerSetTimeout>
}
 80083d0:	e7fb      	b.n	80083ca <TimerIrqHandler+0x7a>
 80083d2:	bf00      	nop
 80083d4:	2000118c 	.word	0x2000118c

080083d8 <TimerStop>:
{
 80083d8:	b510      	push	{r4, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 80083de:	a801      	add	r0, sp, #4
 80083e0:	f007 ff85 	bl	80102ee <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 80083e4:	4b1b      	ldr	r3, [pc, #108]	; (8008454 <TimerStop+0x7c>)
 80083e6:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 80083e8:	b15a      	cbz	r2, 8008402 <TimerStop+0x2a>
 80083ea:	b154      	cbz	r4, 8008402 <TimerStop+0x2a>
    obj->IsStarted = false;
 80083ec:	2300      	movs	r3, #0
 80083ee:	7223      	strb	r3, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 80083f0:	42a2      	cmp	r2, r4
 80083f2:	d00a      	beq.n	800840a <TimerStop+0x32>
    TimerEvent_t* cur = TimerListHead;
 80083f4:	4613      	mov	r3, r2
        while( cur != NULL )
 80083f6:	b32b      	cbz	r3, 8008444 <TimerStop+0x6c>
            if( cur == obj )
 80083f8:	42a3      	cmp	r3, r4
 80083fa:	d020      	beq.n	800843e <TimerStop+0x66>
                prev = cur;
 80083fc:	461a      	mov	r2, r3
                cur = cur->Next;
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	e7f9      	b.n	80083f6 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 8008402:	a801      	add	r0, sp, #4
 8008404:	f007 ff7d 	bl	8010302 <BoardCriticalSectionEnd>
        return;
 8008408:	e01f      	b.n	800844a <TimerStop+0x72>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800840a:	7a53      	ldrb	r3, [r2, #9]
 800840c:	b173      	cbz	r3, 800842c <TimerStop+0x54>
            TimerListHead->IsNext2Expire = false;
 800840e:	2300      	movs	r3, #0
 8008410:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 8008412:	6950      	ldr	r0, [r2, #20]
 8008414:	b120      	cbz	r0, 8008420 <TimerStop+0x48>
                TimerListHead = TimerListHead->Next;
 8008416:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <TimerStop+0x7c>)
 8008418:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 800841a:	f007 ffbe 	bl	801039a <TimerSetTimeout>
 800841e:	e011      	b.n	8008444 <TimerStop+0x6c>
                RtcStopAlarm( );
 8008420:	f7fe fed0 	bl	80071c4 <RtcStopAlarm>
                TimerListHead = NULL;
 8008424:	4b0b      	ldr	r3, [pc, #44]	; (8008454 <TimerStop+0x7c>)
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	e00b      	b.n	8008444 <TimerStop+0x6c>
            if( TimerListHead->Next != NULL )
 800842c:	6953      	ldr	r3, [r2, #20]
 800842e:	b113      	cbz	r3, 8008436 <TimerStop+0x5e>
                TimerListHead = TimerListHead->Next;
 8008430:	4a08      	ldr	r2, [pc, #32]	; (8008454 <TimerStop+0x7c>)
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	e006      	b.n	8008444 <TimerStop+0x6c>
                TimerListHead = NULL;
 8008436:	4b07      	ldr	r3, [pc, #28]	; (8008454 <TimerStop+0x7c>)
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	e002      	b.n	8008444 <TimerStop+0x6c>
                if( cur->Next != NULL )
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	b12b      	cbz	r3, 800844e <TimerStop+0x76>
                    prev->Next = cur;
 8008442:	6153      	str	r3, [r2, #20]
    CRITICAL_SECTION_END( );
 8008444:	a801      	add	r0, sp, #4
 8008446:	f007 ff5c 	bl	8010302 <BoardCriticalSectionEnd>
}
 800844a:	b002      	add	sp, #8
 800844c:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 800844e:	2300      	movs	r3, #0
 8008450:	6153      	str	r3, [r2, #20]
 8008452:	e7f7      	b.n	8008444 <TimerStop+0x6c>
 8008454:	2000118c 	.word	0x2000118c

08008458 <SX1276ConvertFreqInHzToPllStep>:
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8008458:	4908      	ldr	r1, [pc, #32]	; (800847c <SX1276ConvertFreqInHzToPllStep+0x24>)
 800845a:	fba1 3200 	umull	r3, r2, r1, r0
 800845e:	0b12      	lsrs	r2, r2, #12
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8008460:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008464:	fb03 0012 	mls	r0, r3, r2, r0
 8008468:	f641 6384 	movw	r3, #7812	; 0x1e84
 800846c:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8008470:	fba1 1303 	umull	r1, r3, r1, r3
 8008474:	0b1b      	lsrs	r3, r3, #12
             SX1276_PLL_STEP_SCALED );
}
 8008476:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 800847a:	4770      	bx	lr
 800847c:	431bde83 	.word	0x431bde83

08008480 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8008480:	2300      	movs	r3, #0
 8008482:	e008      	b.n	8008496 <GetFskBandwidthRegValue+0x16>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 8008484:	e7fe      	b.n	8008484 <GetFskBandwidthRegValue+0x4>
            return FskBandwidths[i].RegValue;
 8008486:	4b11      	ldr	r3, [pc, #68]	; (80084cc <GetFskBandwidthRegValue+0x4c>)
 8008488:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800848c:	7908      	ldrb	r0, [r1, #4]
}
 800848e:	bc10      	pop	{r4}
 8008490:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8008492:	3301      	adds	r3, #1
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b14      	cmp	r3, #20
 8008498:	d817      	bhi.n	80084ca <GetFskBandwidthRegValue+0x4a>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 800849a:	4619      	mov	r1, r3
 800849c:	4a0b      	ldr	r2, [pc, #44]	; (80084cc <GetFskBandwidthRegValue+0x4c>)
 800849e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80084a2:	4282      	cmp	r2, r0
 80084a4:	d8f5      	bhi.n	8008492 <GetFskBandwidthRegValue+0x12>
{
 80084a6:	b410      	push	{r4}
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80084a8:	1c5a      	adds	r2, r3, #1
 80084aa:	4c08      	ldr	r4, [pc, #32]	; (80084cc <GetFskBandwidthRegValue+0x4c>)
 80084ac:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80084b0:	4282      	cmp	r2, r0
 80084b2:	d8e8      	bhi.n	8008486 <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80084b4:	3301      	adds	r3, #1
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b14      	cmp	r3, #20
 80084ba:	d8e3      	bhi.n	8008484 <GetFskBandwidthRegValue+0x4>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80084bc:	4619      	mov	r1, r3
 80084be:	4a03      	ldr	r2, [pc, #12]	; (80084cc <GetFskBandwidthRegValue+0x4c>)
 80084c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80084c4:	4282      	cmp	r2, r0
 80084c6:	d8f5      	bhi.n	80084b4 <GetFskBandwidthRegValue+0x34>
 80084c8:	e7ee      	b.n	80084a8 <GetFskBandwidthRegValue+0x28>
    while( 1 );
 80084ca:	e7fe      	b.n	80084ca <GetFskBandwidthRegValue+0x4a>
 80084cc:	08013468 	.word	0x08013468

080084d0 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 80084d0:	2801      	cmp	r0, #1
 80084d2:	d006      	beq.n	80084e2 <SX1276GetLoRaBandwidthInHz+0x12>
 80084d4:	2802      	cmp	r0, #2
 80084d6:	d006      	beq.n	80084e6 <SX1276GetLoRaBandwidthInHz+0x16>
 80084d8:	b108      	cbz	r0, 80084de <SX1276GetLoRaBandwidthInHz+0xe>
 80084da:	2000      	movs	r0, #0
        bandwidthInHz = 500000UL;
        break;
    }

    return bandwidthInHz;
}
 80084dc:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 80084de:	4803      	ldr	r0, [pc, #12]	; (80084ec <SX1276GetLoRaBandwidthInHz+0x1c>)
 80084e0:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 80084e2:	4803      	ldr	r0, [pc, #12]	; (80084f0 <SX1276GetLoRaBandwidthInHz+0x20>)
 80084e4:	4770      	bx	lr
        bandwidthInHz = 500000UL;
 80084e6:	4803      	ldr	r0, [pc, #12]	; (80084f4 <SX1276GetLoRaBandwidthInHz+0x24>)
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	0001e848 	.word	0x0001e848
 80084f0:	0003d090 	.word	0x0003d090
 80084f4:	0007a120 	.word	0x0007a120

080084f8 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 80084f8:	4b06      	ldr	r3, [pc, #24]	; (8008514 <SX1276OnDio4Irq+0x1c>)
 80084fa:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80084fe:	b93b      	cbnz	r3, 8008510 <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8008500:	4b04      	ldr	r3, [pc, #16]	; (8008514 <SX1276OnDio4Irq+0x1c>)
 8008502:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8008506:	b91b      	cbnz	r3, 8008510 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8008508:	4b02      	ldr	r3, [pc, #8]	; (8008514 <SX1276OnDio4Irq+0x1c>)
 800850a:	2201      	movs	r2, #1
 800850c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	200012c4 	.word	0x200012c4

08008518 <SX1276GetStatus>:
}
 8008518:	4b01      	ldr	r3, [pc, #4]	; (8008520 <SX1276GetStatus+0x8>)
 800851a:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 800851e:	4770      	bx	lr
 8008520:	200012c4 	.word	0x200012c4

08008524 <SX1276SetChannel>:
{
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4605      	mov	r5, r0
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8008528:	f7ff ff96 	bl	8008458 <SX1276ConvertFreqInHzToPllStep>
 800852c:	4604      	mov	r4, r0
    SX1276.Settings.Channel = freq;
 800852e:	4b09      	ldr	r3, [pc, #36]	; (8008554 <SX1276SetChannel+0x30>)
 8008530:	f8c3 50e4 	str.w	r5, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8008534:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8008538:	2006      	movs	r0, #6
 800853a:	f008 f825 	bl	8010588 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 800853e:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8008542:	2007      	movs	r0, #7
 8008544:	f008 f820 	bl	8010588 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8008548:	b2e1      	uxtb	r1, r4
 800854a:	2008      	movs	r0, #8
 800854c:	f008 f81c 	bl	8010588 <SX1276Write>
}
 8008550:	bd38      	pop	{r3, r4, r5, pc}
 8008552:	bf00      	nop
 8008554:	200012c4 	.word	0x200012c4

08008558 <SX1276OnDio3Irq>:
{
 8008558:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 800855a:	4b14      	ldr	r3, [pc, #80]	; (80085ac <SX1276OnDio3Irq+0x54>)
 800855c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008560:	2b01      	cmp	r3, #1
 8008562:	d000      	beq.n	8008566 <SX1276OnDio3Irq+0xe>
}
 8008564:	bd08      	pop	{r3, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8008566:	2012      	movs	r0, #18
 8008568:	f008 f81a 	bl	80105a0 <SX1276Read>
 800856c:	f010 0f01 	tst.w	r0, #1
 8008570:	d00d      	beq.n	800858e <SX1276OnDio3Irq+0x36>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8008572:	2105      	movs	r1, #5
 8008574:	2012      	movs	r0, #18
 8008576:	f008 f807 	bl	8010588 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800857a:	4b0d      	ldr	r3, [pc, #52]	; (80085b0 <SX1276OnDio3Irq+0x58>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0f0      	beq.n	8008564 <SX1276OnDio3Irq+0xc>
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0ed      	beq.n	8008564 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( true );
 8008588:	2001      	movs	r0, #1
 800858a:	4798      	blx	r3
 800858c:	e7ea      	b.n	8008564 <SX1276OnDio3Irq+0xc>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800858e:	2104      	movs	r1, #4
 8008590:	2012      	movs	r0, #18
 8008592:	f007 fff9 	bl	8010588 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008596:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <SX1276OnDio3Irq+0x58>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0e2      	beq.n	8008564 <SX1276OnDio3Irq+0xc>
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0df      	beq.n	8008564 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( false );
 80085a4:	2000      	movs	r0, #0
 80085a6:	4798      	blx	r3
}
 80085a8:	e7dc      	b.n	8008564 <SX1276OnDio3Irq+0xc>
 80085aa:	bf00      	nop
 80085ac:	200012c4 	.word	0x200012c4
 80085b0:	20001190 	.word	0x20001190

080085b4 <SX1276OnDio2Irq>:
{
 80085b4:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 80085b6:	4b3a      	ldr	r3, [pc, #232]	; (80086a0 <SX1276OnDio2Irq+0xec>)
 80085b8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d002      	beq.n	80085c6 <SX1276OnDio2Irq+0x12>
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d051      	beq.n	8008668 <SX1276OnDio2Irq+0xb4>
}
 80085c4:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 80085c6:	4b36      	ldr	r3, [pc, #216]	; (80086a0 <SX1276OnDio2Irq+0xec>)
 80085c8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80085cc:	b1c3      	cbz	r3, 8008600 <SX1276OnDio2Irq+0x4c>
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d1f8      	bne.n	80085c4 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80085d2:	4b33      	ldr	r3, [pc, #204]	; (80086a0 <SX1276OnDio2Irq+0xec>)
 80085d4:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d0f3      	beq.n	80085c4 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80085dc:	2102      	movs	r1, #2
 80085de:	2012      	movs	r0, #18
 80085e0:	f007 ffd2 	bl	8010588 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80085e4:	4b2f      	ldr	r3, [pc, #188]	; (80086a4 <SX1276OnDio2Irq+0xf0>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d0eb      	beq.n	80085c4 <SX1276OnDio2Irq+0x10>
 80085ec:	695c      	ldr	r4, [r3, #20]
 80085ee:	2c00      	cmp	r4, #0
 80085f0:	d0e8      	beq.n	80085c4 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80085f2:	201c      	movs	r0, #28
 80085f4:	f007 ffd4 	bl	80105a0 <SX1276Read>
 80085f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80085fc:	47a0      	blx	r4
 80085fe:	e7e1      	b.n	80085c4 <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
 8008600:	4b27      	ldr	r3, [pc, #156]	; (80086a0 <SX1276OnDio2Irq+0xec>)
 8008602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008604:	b35b      	cbz	r3, 800865e <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8008606:	4b26      	ldr	r3, [pc, #152]	; (80086a0 <SX1276OnDio2Irq+0xec>)
 8008608:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d0d9      	beq.n	80085c4 <SX1276OnDio2Irq+0x10>
 8008610:	4b23      	ldr	r3, [pc, #140]	; (80086a0 <SX1276OnDio2Irq+0xec>)
 8008612:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1d4      	bne.n	80085c4 <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
 800861a:	4823      	ldr	r0, [pc, #140]	; (80086a8 <SX1276OnDio2Irq+0xf4>)
 800861c:	f7ff fedc 	bl	80083d8 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8008620:	4c1f      	ldr	r4, [pc, #124]	; (80086a0 <SX1276OnDio2Irq+0xec>)
 8008622:	2301      	movs	r3, #1
 8008624:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8008628:	2011      	movs	r0, #17
 800862a:	f007 ffb9 	bl	80105a0 <SX1276Read>
 800862e:	0843      	lsrs	r3, r0, #1
 8008630:	425b      	negs	r3, r3
 8008632:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8008636:	201b      	movs	r0, #27
 8008638:	f007 ffb2 	bl	80105a0 <SX1276Read>
 800863c:	0205      	lsls	r5, r0, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800863e:	201c      	movs	r0, #28
 8008640:	f007 ffae 	bl	80105a0 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8008644:	4328      	orrs	r0, r5
 8008646:	f007 fef2 	bl	801042e <SX1276ConvertPllStepToFreqInHz>
 800864a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800864e:	200c      	movs	r0, #12
 8008650:	f007 ffa6 	bl	80105a0 <SX1276Read>
 8008654:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8008658:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
 800865c:	e7b2      	b.n	80085c4 <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800865e:	4b10      	ldr	r3, [pc, #64]	; (80086a0 <SX1276OnDio2Irq+0xec>)
 8008660:	2201      	movs	r2, #1
 8008662:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8008666:	e7ce      	b.n	8008606 <SX1276OnDio2Irq+0x52>
            switch( SX1276.Settings.Modem )
 8008668:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <SX1276OnDio2Irq+0xec>)
 800866a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800866e:	2b01      	cmp	r3, #1
 8008670:	d1a8      	bne.n	80085c4 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008672:	4b0b      	ldr	r3, [pc, #44]	; (80086a0 <SX1276OnDio2Irq+0xec>)
 8008674:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0a3      	beq.n	80085c4 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800867c:	2102      	movs	r1, #2
 800867e:	2012      	movs	r0, #18
 8008680:	f007 ff82 	bl	8010588 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8008684:	4b07      	ldr	r3, [pc, #28]	; (80086a4 <SX1276OnDio2Irq+0xf0>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d09b      	beq.n	80085c4 <SX1276OnDio2Irq+0x10>
 800868c:	695c      	ldr	r4, [r3, #20]
 800868e:	2c00      	cmp	r4, #0
 8008690:	d098      	beq.n	80085c4 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8008692:	201c      	movs	r0, #28
 8008694:	f007 ff84 	bl	80105a0 <SX1276Read>
 8008698:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800869c:	47a0      	blx	r4
}
 800869e:	e791      	b.n	80085c4 <SX1276OnDio2Irq+0x10>
 80086a0:	200012c4 	.word	0x200012c4
 80086a4:	20001190 	.word	0x20001190
 80086a8:	20001194 	.word	0x20001194

080086ac <SX1276OnDio1Irq>:
{
 80086ac:	b508      	push	{r3, lr}
    SX1276Read(REG_IRQFLAGS1);
 80086ae:	203e      	movs	r0, #62	; 0x3e
 80086b0:	f007 ff76 	bl	80105a0 <SX1276Read>
    SX1276Read(REG_IRQFLAGS2);
 80086b4:	203f      	movs	r0, #63	; 0x3f
 80086b6:	f007 ff73 	bl	80105a0 <SX1276Read>
    switch( SX1276.Settings.State )
 80086ba:	4b4b      	ldr	r3, [pc, #300]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 80086bc:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d002      	beq.n	80086ca <SX1276OnDio1Irq+0x1e>
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d062      	beq.n	800878e <SX1276OnDio1Irq+0xe2>
}
 80086c8:	bd08      	pop	{r3, pc}
            switch( SX1276.Settings.Modem )
 80086ca:	4b47      	ldr	r3, [pc, #284]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 80086cc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80086d0:	b1cb      	cbz	r3, 8008706 <SX1276OnDio1Irq+0x5a>
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d1f8      	bne.n	80086c8 <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 0 )
 80086d6:	f7ff fdb7 	bl	8008248 <SX1276GetDio1PinState>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0f4      	beq.n	80086c8 <SX1276OnDio1Irq+0x1c>
                TimerStop( &RxTimeoutTimer );
 80086de:	4843      	ldr	r0, [pc, #268]	; (80087ec <SX1276OnDio1Irq+0x140>)
 80086e0:	f7ff fe7a 	bl	80083d8 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80086e4:	2180      	movs	r1, #128	; 0x80
 80086e6:	2012      	movs	r0, #18
 80086e8:	f007 ff4e 	bl	8010588 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80086ec:	4b3e      	ldr	r3, [pc, #248]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80086f4:	4b3e      	ldr	r3, [pc, #248]	; (80087f0 <SX1276OnDio1Irq+0x144>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0e5      	beq.n	80086c8 <SX1276OnDio1Irq+0x1c>
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0e2      	beq.n	80086c8 <SX1276OnDio1Irq+0x1c>
                    RadioEvents->RxTimeout( );
 8008702:	4798      	blx	r3
 8008704:	e7e0      	b.n	80086c8 <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 0 )
 8008706:	f7ff fd9f 	bl	8008248 <SX1276GetDio1PinState>
 800870a:	2800      	cmp	r0, #0
 800870c:	d0dc      	beq.n	80086c8 <SX1276OnDio1Irq+0x1c>
                TimerStop( &RxTimeoutSyncWord );
 800870e:	4839      	ldr	r0, [pc, #228]	; (80087f4 <SX1276OnDio1Irq+0x148>)
 8008710:	f7ff fe62 	bl	80083d8 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8008714:	4b34      	ldr	r3, [pc, #208]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 8008716:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 800871a:	b95b      	cbnz	r3, 8008734 <SX1276OnDio1Irq+0x88>
 800871c:	4b32      	ldr	r3, [pc, #200]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 800871e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8008722:	b93b      	cbnz	r3, 8008734 <SX1276OnDio1Irq+0x88>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8008724:	4b30      	ldr	r3, [pc, #192]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 8008726:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800872a:	b9eb      	cbnz	r3, 8008768 <SX1276OnDio1Irq+0xbc>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800872c:	2101      	movs	r1, #1
 800872e:	4832      	ldr	r0, [pc, #200]	; (80087f8 <SX1276OnDio1Irq+0x14c>)
 8008730:	f007 feea 	bl	8010508 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8008734:	4b2c      	ldr	r3, [pc, #176]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 8008736:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 800873a:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 800873e:	1a88      	subs	r0, r1, r2
 8008740:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8008744:	4298      	cmp	r0, r3
 8008746:	db16      	blt.n	8008776 <SX1276OnDio1Irq+0xca>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8008748:	1e59      	subs	r1, r3, #1
 800874a:	b2c9      	uxtb	r1, r1
 800874c:	482b      	ldr	r0, [pc, #172]	; (80087fc <SX1276OnDio1Irq+0x150>)
 800874e:	4410      	add	r0, r2
 8008750:	f007 feda 	bl	8010508 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8008754:	4a24      	ldr	r2, [pc, #144]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 8008756:	f892 311a 	ldrb.w	r3, [r2, #282]	; 0x11a
 800875a:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 800875e:	440b      	add	r3, r1
 8008760:	3b01      	subs	r3, #1
 8008762:	f8a2 3118 	strh.w	r3, [r2, #280]	; 0x118
 8008766:	e7af      	b.n	80086c8 <SX1276OnDio1Irq+0x1c>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8008768:	2032      	movs	r0, #50	; 0x32
 800876a:	f007 ff19 	bl	80105a0 <SX1276Read>
 800876e:	4b1e      	ldr	r3, [pc, #120]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 8008770:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8008774:	e7de      	b.n	8008734 <SX1276OnDio1Irq+0x88>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008776:	1a89      	subs	r1, r1, r2
 8008778:	b2c9      	uxtb	r1, r1
 800877a:	4820      	ldr	r0, [pc, #128]	; (80087fc <SX1276OnDio1Irq+0x150>)
 800877c:	4410      	add	r0, r2
 800877e:	f007 fec3 	bl	8010508 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008782:	4b19      	ldr	r3, [pc, #100]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 8008784:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8008788:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 800878c:	e79c      	b.n	80086c8 <SX1276OnDio1Irq+0x1c>
            switch( SX1276.Settings.Modem )
 800878e:	4b16      	ldr	r3, [pc, #88]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 8008790:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008794:	2b00      	cmp	r3, #0
 8008796:	d197      	bne.n	80086c8 <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 1 )
 8008798:	f7ff fd56 	bl	8008248 <SX1276GetDio1PinState>
 800879c:	2801      	cmp	r0, #1
 800879e:	d093      	beq.n	80086c8 <SX1276OnDio1Irq+0x1c>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80087a0:	4b11      	ldr	r3, [pc, #68]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 80087a2:	f8b3 0116 	ldrh.w	r0, [r3, #278]	; 0x116
 80087a6:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 80087aa:	eba0 0c02 	sub.w	ip, r0, r2
 80087ae:	f893 111b 	ldrb.w	r1, [r3, #283]	; 0x11b
 80087b2:	458c      	cmp	ip, r1
 80087b4:	dd0c      	ble.n	80087d0 <SX1276OnDio1Irq+0x124>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80087b6:	4811      	ldr	r0, [pc, #68]	; (80087fc <SX1276OnDio1Irq+0x150>)
 80087b8:	4410      	add	r0, r2
 80087ba:	f007 feac 	bl	8010516 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80087be:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 80087c0:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 80087c4:	f8b3 1118 	ldrh.w	r1, [r3, #280]	; 0x118
 80087c8:	440a      	add	r2, r1
 80087ca:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 80087ce:	e77b      	b.n	80086c8 <SX1276OnDio1Irq+0x1c>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80087d0:	1a81      	subs	r1, r0, r2
 80087d2:	b2c9      	uxtb	r1, r1
 80087d4:	4809      	ldr	r0, [pc, #36]	; (80087fc <SX1276OnDio1Irq+0x150>)
 80087d6:	4410      	add	r0, r2
 80087d8:	f007 fe9d 	bl	8010516 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80087dc:	4b02      	ldr	r3, [pc, #8]	; (80087e8 <SX1276OnDio1Irq+0x13c>)
 80087de:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 80087e2:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
}
 80087e6:	e76f      	b.n	80086c8 <SX1276OnDio1Irq+0x1c>
 80087e8:	200012c4 	.word	0x200012c4
 80087ec:	200011ac 	.word	0x200011ac
 80087f0:	20001190 	.word	0x20001190
 80087f4:	20001194 	.word	0x20001194
 80087f8:	200013da 	.word	0x200013da
 80087fc:	200011c4 	.word	0x200011c4

08008800 <SX1276OnDio0Irq>:
{
 8008800:	b510      	push	{r4, lr}
 8008802:	b082      	sub	sp, #8
    SX1276Read(REG_IRQFLAGS1);
 8008804:	203e      	movs	r0, #62	; 0x3e
 8008806:	f007 fecb 	bl	80105a0 <SX1276Read>
    SX1276Read(REG_IRQFLAGS2);
 800880a:	203f      	movs	r0, #63	; 0x3f
 800880c:	f007 fec8 	bl	80105a0 <SX1276Read>
    volatile uint8_t irqFlags = 0;
 8008810:	2300      	movs	r3, #0
 8008812:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 8008816:	4bb1      	ldr	r3, [pc, #708]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008818:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800881c:	2b01      	cmp	r3, #1
 800881e:	d004      	beq.n	800882a <SX1276OnDio0Irq+0x2a>
 8008820:	2b02      	cmp	r3, #2
 8008822:	f000 813f 	beq.w	8008aa4 <SX1276OnDio0Irq+0x2a4>
}
 8008826:	b002      	add	sp, #8
 8008828:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 800882a:	4bac      	ldr	r3, [pc, #688]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 800882c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008830:	b343      	cbz	r3, 8008884 <SX1276OnDio0Irq+0x84>
 8008832:	2b01      	cmp	r3, #1
 8008834:	d1f7      	bne.n	8008826 <SX1276OnDio0Irq+0x26>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8008836:	2140      	movs	r1, #64	; 0x40
 8008838:	2012      	movs	r0, #18
 800883a:	f007 fea5 	bl	8010588 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800883e:	2012      	movs	r0, #18
 8008840:	f007 feae 	bl	80105a0 <SX1276Read>
 8008844:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8008848:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800884c:	f013 0f20 	tst.w	r3, #32
 8008850:	f000 80bd 	beq.w	80089ce <SX1276OnDio0Irq+0x1ce>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8008854:	2120      	movs	r1, #32
 8008856:	2012      	movs	r0, #18
 8008858:	f007 fe96 	bl	8010588 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800885c:	4b9f      	ldr	r3, [pc, #636]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 800885e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8008862:	b91b      	cbnz	r3, 800886c <SX1276OnDio0Irq+0x6c>
                            SX1276.Settings.State = RF_IDLE;
 8008864:	4b9d      	ldr	r3, [pc, #628]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008866:	2200      	movs	r2, #0
 8008868:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 800886c:	489c      	ldr	r0, [pc, #624]	; (8008ae0 <SX1276OnDio0Irq+0x2e0>)
 800886e:	f7ff fdb3 	bl	80083d8 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8008872:	4b9c      	ldr	r3, [pc, #624]	; (8008ae4 <SX1276OnDio0Irq+0x2e4>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0d5      	beq.n	8008826 <SX1276OnDio0Irq+0x26>
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d0d2      	beq.n	8008826 <SX1276OnDio0Irq+0x26>
                            RadioEvents->RxError( );
 8008880:	4798      	blx	r3
 8008882:	e7d0      	b.n	8008826 <SX1276OnDio0Irq+0x26>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8008884:	4b95      	ldr	r3, [pc, #596]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008886:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800888a:	bb0b      	cbnz	r3, 80088d0 <SX1276OnDio0Irq+0xd0>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800888c:	4b93      	ldr	r3, [pc, #588]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 800888e:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 8008892:	2900      	cmp	r1, #0
 8008894:	d15e      	bne.n	8008954 <SX1276OnDio0Irq+0x154>
 8008896:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800889a:	2b00      	cmp	r3, #0
 800889c:	d15a      	bne.n	8008954 <SX1276OnDio0Irq+0x154>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800889e:	4b8f      	ldr	r3, [pc, #572]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 80088a0:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d14e      	bne.n	8008946 <SX1276OnDio0Irq+0x146>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80088a8:	2101      	movs	r1, #1
 80088aa:	488f      	ldr	r0, [pc, #572]	; (8008ae8 <SX1276OnDio0Irq+0x2e8>)
 80088ac:	f007 fe2c 	bl	8010508 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80088b0:	4c8a      	ldr	r4, [pc, #552]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 80088b2:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 80088b6:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 80088ba:	1ac9      	subs	r1, r1, r3
 80088bc:	b2c9      	uxtb	r1, r1
 80088be:	488b      	ldr	r0, [pc, #556]	; (8008aec <SX1276OnDio0Irq+0x2ec>)
 80088c0:	4418      	add	r0, r3
 80088c2:	f007 fe21 	bl	8010508 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80088c6:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 80088ca:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 80088ce:	e04e      	b.n	800896e <SX1276OnDio0Irq+0x16e>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80088d0:	203f      	movs	r0, #63	; 0x3f
 80088d2:	f007 fe65 	bl	80105a0 <SX1276Read>
 80088d6:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80088da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088de:	f013 0f02 	tst.w	r3, #2
 80088e2:	d1d3      	bne.n	800888c <SX1276OnDio0Irq+0x8c>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80088e4:	210b      	movs	r1, #11
 80088e6:	203e      	movs	r0, #62	; 0x3e
 80088e8:	f007 fe4e 	bl	8010588 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80088ec:	2110      	movs	r1, #16
 80088ee:	203f      	movs	r0, #63	; 0x3f
 80088f0:	f007 fe4a 	bl	8010588 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80088f4:	487a      	ldr	r0, [pc, #488]	; (8008ae0 <SX1276OnDio0Irq+0x2e0>)
 80088f6:	f7ff fd6f 	bl	80083d8 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80088fa:	4b78      	ldr	r3, [pc, #480]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 80088fc:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8008900:	b9bb      	cbnz	r3, 8008932 <SX1276OnDio0Irq+0x132>
                            TimerStop( &RxTimeoutSyncWord );
 8008902:	487b      	ldr	r0, [pc, #492]	; (8008af0 <SX1276OnDio0Irq+0x2f0>)
 8008904:	f7ff fd68 	bl	80083d8 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8008908:	4b74      	ldr	r3, [pc, #464]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 800890a:	2200      	movs	r2, #0
 800890c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8008910:	4b74      	ldr	r3, [pc, #464]	; (8008ae4 <SX1276OnDio0Irq+0x2e4>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	b113      	cbz	r3, 800891c <SX1276OnDio0Irq+0x11c>
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	b103      	cbz	r3, 800891c <SX1276OnDio0Irq+0x11c>
                            RadioEvents->RxError( );
 800891a:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800891c:	4b6f      	ldr	r3, [pc, #444]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 800891e:	2200      	movs	r2, #0
 8008920:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8008924:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008928:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800892c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                        break;
 8008930:	e779      	b.n	8008826 <SX1276OnDio0Irq+0x26>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8008932:	200d      	movs	r0, #13
 8008934:	f007 fe34 	bl	80105a0 <SX1276Read>
 8008938:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800893c:	b2c9      	uxtb	r1, r1
 800893e:	200d      	movs	r0, #13
 8008940:	f007 fe22 	bl	8010588 <SX1276Write>
 8008944:	e7e4      	b.n	8008910 <SX1276OnDio0Irq+0x110>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8008946:	2032      	movs	r0, #50	; 0x32
 8008948:	f007 fe2a 	bl	80105a0 <SX1276Read>
 800894c:	4b63      	ldr	r3, [pc, #396]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 800894e:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8008952:	e7ad      	b.n	80088b0 <SX1276OnDio0Irq+0xb0>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008954:	4c61      	ldr	r4, [pc, #388]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008956:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 800895a:	1ac9      	subs	r1, r1, r3
 800895c:	b2c9      	uxtb	r1, r1
 800895e:	4863      	ldr	r0, [pc, #396]	; (8008aec <SX1276OnDio0Irq+0x2ec>)
 8008960:	4418      	add	r0, r3
 8008962:	f007 fdd1 	bl	8010508 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008966:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 800896a:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 800896e:	485c      	ldr	r0, [pc, #368]	; (8008ae0 <SX1276OnDio0Irq+0x2e0>)
 8008970:	f7ff fd32 	bl	80083d8 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8008974:	4b59      	ldr	r3, [pc, #356]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008976:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800897a:	b9f3      	cbnz	r3, 80089ba <SX1276OnDio0Irq+0x1ba>
                    SX1276.Settings.State = RF_IDLE;
 800897c:	4b57      	ldr	r3, [pc, #348]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 800897e:	2200      	movs	r2, #0
 8008980:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 8008984:	485a      	ldr	r0, [pc, #360]	; (8008af0 <SX1276OnDio0Irq+0x2f0>)
 8008986:	f7ff fd27 	bl	80083d8 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800898a:	4b56      	ldr	r3, [pc, #344]	; (8008ae4 <SX1276OnDio0Irq+0x2e4>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	b14b      	cbz	r3, 80089a4 <SX1276OnDio0Irq+0x1a4>
 8008990:	689c      	ldr	r4, [r3, #8]
 8008992:	b13c      	cbz	r4, 80089a4 <SX1276OnDio0Irq+0x1a4>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8008994:	4951      	ldr	r1, [pc, #324]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008996:	2300      	movs	r3, #0
 8008998:	f991 210e 	ldrsb.w	r2, [r1, #270]	; 0x10e
 800899c:	f8b1 1116 	ldrh.w	r1, [r1, #278]	; 0x116
 80089a0:	4852      	ldr	r0, [pc, #328]	; (8008aec <SX1276OnDio0Irq+0x2ec>)
 80089a2:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80089a4:	4b4d      	ldr	r3, [pc, #308]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80089ac:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80089b0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                SX1276.Settings.FskPacketHandler.Size = 0;
 80089b4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                break;
 80089b8:	e735      	b.n	8008826 <SX1276OnDio0Irq+0x26>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80089ba:	200d      	movs	r0, #13
 80089bc:	f007 fdf0 	bl	80105a0 <SX1276Read>
 80089c0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80089c4:	b2c9      	uxtb	r1, r1
 80089c6:	200d      	movs	r0, #13
 80089c8:	f007 fdde 	bl	8010588 <SX1276Write>
 80089cc:	e7dd      	b.n	800898a <SX1276OnDio0Irq+0x18a>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80089ce:	2019      	movs	r0, #25
 80089d0:	f007 fde6 	bl	80105a0 <SX1276Read>
 80089d4:	b243      	sxtb	r3, r0
 80089d6:	3302      	adds	r3, #2
 80089d8:	109b      	asrs	r3, r3, #2
 80089da:	4c40      	ldr	r4, [pc, #256]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 80089dc:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80089e0:	201a      	movs	r0, #26
 80089e2:	f007 fddd 	bl	80105a0 <SX1276Read>
 80089e6:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80089e8:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
 80089ec:	2a00      	cmp	r2, #0
 80089ee:	db39      	blt.n	8008a64 <SX1276OnDio0Irq+0x264>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80089f0:	4a3a      	ldr	r2, [pc, #232]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 80089f2:	f8d2 10e4 	ldr.w	r1, [r2, #228]	; 0xe4
 80089f6:	4a3f      	ldr	r2, [pc, #252]	; (8008af4 <SX1276OnDio0Irq+0x2f4>)
 80089f8:	4291      	cmp	r1, r2
 80089fa:	d94c      	bls.n	8008a96 <SX1276OnDio0Irq+0x296>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 80089fc:	eb00 1023 	add.w	r0, r0, r3, asr #4
 8008a00:	389d      	subs	r0, #157	; 0x9d
 8008a02:	4b36      	ldr	r3, [pc, #216]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008a04:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8008a08:	2013      	movs	r0, #19
 8008a0a:	f007 fdc9 	bl	80105a0 <SX1276Read>
 8008a0e:	4c33      	ldr	r4, [pc, #204]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008a10:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8008a14:	2010      	movs	r0, #16
 8008a16:	f007 fdc3 	bl	80105a0 <SX1276Read>
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	200d      	movs	r0, #13
 8008a1e:	f007 fdb3 	bl	8010588 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8008a22:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8008a26:	4831      	ldr	r0, [pc, #196]	; (8008aec <SX1276OnDio0Irq+0x2ec>)
 8008a28:	f007 fd6e 	bl	8010508 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8008a2c:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 8008a30:	b913      	cbnz	r3, 8008a38 <SX1276OnDio0Irq+0x238>
                        SX1276.Settings.State = RF_IDLE;
 8008a32:	2200      	movs	r2, #0
 8008a34:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 8008a38:	4829      	ldr	r0, [pc, #164]	; (8008ae0 <SX1276OnDio0Irq+0x2e0>)
 8008a3a:	f7ff fccd 	bl	80083d8 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008a3e:	4b29      	ldr	r3, [pc, #164]	; (8008ae4 <SX1276OnDio0Irq+0x2e4>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f43f aeef 	beq.w	8008826 <SX1276OnDio0Irq+0x26>
 8008a48:	689c      	ldr	r4, [r3, #8]
 8008a4a:	2c00      	cmp	r4, #0
 8008a4c:	f43f aeeb 	beq.w	8008826 <SX1276OnDio0Irq+0x26>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8008a50:	4922      	ldr	r1, [pc, #136]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008a52:	f991 313c 	ldrsb.w	r3, [r1, #316]	; 0x13c
 8008a56:	f9b1 213e 	ldrsh.w	r2, [r1, #318]	; 0x13e
 8008a5a:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 8008a5e:	4823      	ldr	r0, [pc, #140]	; (8008aec <SX1276OnDio0Irq+0x2ec>)
 8008a60:	47a0      	blx	r4
 8008a62:	e6e0      	b.n	8008826 <SX1276OnDio0Irq+0x26>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008a64:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8008a68:	4922      	ldr	r1, [pc, #136]	; (8008af4 <SX1276OnDio0Irq+0x2f4>)
 8008a6a:	428c      	cmp	r4, r1
 8008a6c:	d909      	bls.n	8008a82 <SX1276OnDio0Irq+0x282>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8008a6e:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8008a72:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8008a74:	fa12 f383 	uxtah	r3, r2, r3
 8008a78:	3b9d      	subs	r3, #157	; 0x9d
 8008a7a:	4a18      	ldr	r2, [pc, #96]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008a7c:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 8008a80:	e7c2      	b.n	8008a08 <SX1276OnDio0Irq+0x208>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8008a82:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8008a86:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8008a88:	fa12 f383 	uxtah	r3, r2, r3
 8008a8c:	3ba4      	subs	r3, #164	; 0xa4
 8008a8e:	4a13      	ldr	r2, [pc, #76]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008a90:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 8008a94:	e7b8      	b.n	8008a08 <SX1276OnDio0Irq+0x208>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8008a96:	eb00 1023 	add.w	r0, r0, r3, asr #4
 8008a9a:	38a4      	subs	r0, #164	; 0xa4
 8008a9c:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008a9e:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 8008aa2:	e7b1      	b.n	8008a08 <SX1276OnDio0Irq+0x208>
            TimerStop( &TxTimeoutTimer );
 8008aa4:	4814      	ldr	r0, [pc, #80]	; (8008af8 <SX1276OnDio0Irq+0x2f8>)
 8008aa6:	f7ff fc97 	bl	80083d8 <TimerStop>
            switch( SX1276.Settings.Modem )
 8008aaa:	4b0c      	ldr	r3, [pc, #48]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008aac:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d00e      	beq.n	8008ad2 <SX1276OnDio0Irq+0x2d2>
                SX1276.Settings.State = RF_IDLE;
 8008ab4:	4b09      	ldr	r3, [pc, #36]	; (8008adc <SX1276OnDio0Irq+0x2dc>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008abc:	4b09      	ldr	r3, [pc, #36]	; (8008ae4 <SX1276OnDio0Irq+0x2e4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f43f aeb0 	beq.w	8008826 <SX1276OnDio0Irq+0x26>
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f43f aeac 	beq.w	8008826 <SX1276OnDio0Irq+0x26>
                    RadioEvents->TxDone( );
 8008ace:	4798      	blx	r3
}
 8008ad0:	e6a9      	b.n	8008826 <SX1276OnDio0Irq+0x26>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8008ad2:	2108      	movs	r1, #8
 8008ad4:	2012      	movs	r0, #18
 8008ad6:	f007 fd57 	bl	8010588 <SX1276Write>
 8008ada:	e7eb      	b.n	8008ab4 <SX1276OnDio0Irq+0x2b4>
 8008adc:	200012c4 	.word	0x200012c4
 8008ae0:	200011ac 	.word	0x200011ac
 8008ae4:	20001190 	.word	0x20001190
 8008ae8:	200013da 	.word	0x200013da
 8008aec:	200011c4 	.word	0x200011c4
 8008af0:	20001194 	.word	0x20001194
 8008af4:	1f4add40 	.word	0x1f4add40
 8008af8:	20001408 	.word	0x20001408

08008afc <RxChainCalibration>:
{
 8008afc:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8008afe:	2009      	movs	r0, #9
 8008b00:	f007 fd4e 	bl	80105a0 <SX1276Read>
 8008b04:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008b06:	2006      	movs	r0, #6
 8008b08:	f007 fd4a 	bl	80105a0 <SX1276Read>
 8008b0c:	0404      	lsls	r4, r0, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8008b0e:	2007      	movs	r0, #7
 8008b10:	f007 fd46 	bl	80105a0 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008b14:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8008b18:	2008      	movs	r0, #8
 8008b1a:	f007 fd41 	bl	80105a0 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008b1e:	4320      	orrs	r0, r4
 8008b20:	f007 fc85 	bl	801042e <SX1276ConvertPllStepToFreqInHz>
 8008b24:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 8008b26:	2100      	movs	r1, #0
 8008b28:	2009      	movs	r0, #9
 8008b2a:	f007 fd2d 	bl	8010588 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8008b2e:	203b      	movs	r0, #59	; 0x3b
 8008b30:	f007 fd36 	bl	80105a0 <SX1276Read>
 8008b34:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8008b38:	b2c9      	uxtb	r1, r1
 8008b3a:	203b      	movs	r0, #59	; 0x3b
 8008b3c:	f007 fd24 	bl	8010588 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8008b40:	203b      	movs	r0, #59	; 0x3b
 8008b42:	f007 fd2d 	bl	80105a0 <SX1276Read>
 8008b46:	f010 0f20 	tst.w	r0, #32
 8008b4a:	d1f9      	bne.n	8008b40 <RxChainCalibration+0x44>
    SX1276SetChannel( 868000000 );
 8008b4c:	480c      	ldr	r0, [pc, #48]	; (8008b80 <RxChainCalibration+0x84>)
 8008b4e:	f7ff fce9 	bl	8008524 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8008b52:	203b      	movs	r0, #59	; 0x3b
 8008b54:	f007 fd24 	bl	80105a0 <SX1276Read>
 8008b58:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8008b5c:	b2c9      	uxtb	r1, r1
 8008b5e:	203b      	movs	r0, #59	; 0x3b
 8008b60:	f007 fd12 	bl	8010588 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8008b64:	203b      	movs	r0, #59	; 0x3b
 8008b66:	f007 fd1b 	bl	80105a0 <SX1276Read>
 8008b6a:	f010 0f20 	tst.w	r0, #32
 8008b6e:	d1f9      	bne.n	8008b64 <RxChainCalibration+0x68>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8008b70:	4629      	mov	r1, r5
 8008b72:	2009      	movs	r0, #9
 8008b74:	f007 fd08 	bl	8010588 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f7ff fcd3 	bl	8008524 <SX1276SetChannel>
}
 8008b7e:	bd38      	pop	{r3, r4, r5, pc}
 8008b80:	33bca100 	.word	0x33bca100

08008b84 <SX1276SetSleep>:
{
 8008b84:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8008b86:	480a      	ldr	r0, [pc, #40]	; (8008bb0 <SX1276SetSleep+0x2c>)
 8008b88:	f7ff fc26 	bl	80083d8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8008b8c:	4809      	ldr	r0, [pc, #36]	; (8008bb4 <SX1276SetSleep+0x30>)
 8008b8e:	f7ff fc23 	bl	80083d8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8008b92:	4809      	ldr	r0, [pc, #36]	; (8008bb8 <SX1276SetSleep+0x34>)
 8008b94:	f7ff fc20 	bl	80083d8 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008b98:	2000      	movs	r0, #0
 8008b9a:	f007 fd0d 	bl	80105b8 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	f007 fbde 	bl	8010360 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 8008ba4:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <SX1276SetSleep+0x38>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8008bac:	bd08      	pop	{r3, pc}
 8008bae:	bf00      	nop
 8008bb0:	200011ac 	.word	0x200011ac
 8008bb4:	20001408 	.word	0x20001408
 8008bb8:	20001194 	.word	0x20001194
 8008bbc:	200012c4 	.word	0x200012c4

08008bc0 <SX1276SetStby>:
{
 8008bc0:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8008bc2:	4808      	ldr	r0, [pc, #32]	; (8008be4 <SX1276SetStby+0x24>)
 8008bc4:	f7ff fc08 	bl	80083d8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8008bc8:	4807      	ldr	r0, [pc, #28]	; (8008be8 <SX1276SetStby+0x28>)
 8008bca:	f7ff fc05 	bl	80083d8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8008bce:	4807      	ldr	r0, [pc, #28]	; (8008bec <SX1276SetStby+0x2c>)
 8008bd0:	f7ff fc02 	bl	80083d8 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8008bd4:	2001      	movs	r0, #1
 8008bd6:	f007 fcef 	bl	80105b8 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8008bda:	4b05      	ldr	r3, [pc, #20]	; (8008bf0 <SX1276SetStby+0x30>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8008be2:	bd08      	pop	{r3, pc}
 8008be4:	200011ac 	.word	0x200011ac
 8008be8:	20001408 	.word	0x20001408
 8008bec:	20001194 	.word	0x20001194
 8008bf0:	200012c4 	.word	0x200012c4

08008bf4 <SX1276SetTx>:
{
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 8008bf8:	4829      	ldr	r0, [pc, #164]	; (8008ca0 <SX1276SetTx+0xac>)
 8008bfa:	f7ff fbed 	bl	80083d8 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4828      	ldr	r0, [pc, #160]	; (8008ca4 <SX1276SetTx+0xb0>)
 8008c02:	f007 fbe9 	bl	80103d8 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8008c06:	4b28      	ldr	r3, [pc, #160]	; (8008ca8 <SX1276SetTx+0xb4>)
 8008c08:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008c0c:	b163      	cbz	r3, 8008c28 <SX1276SetTx+0x34>
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d023      	beq.n	8008c5a <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 8008c12:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <SX1276SetTx+0xb4>)
 8008c14:	2202      	movs	r2, #2
 8008c16:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8008c1a:	4822      	ldr	r0, [pc, #136]	; (8008ca4 <SX1276SetTx+0xb0>)
 8008c1c:	f7ff fb62 	bl	80082e4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8008c20:	2003      	movs	r0, #3
 8008c22:	f007 fcc9 	bl	80105b8 <SX1276SetOpMode>
}
 8008c26:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008c28:	2040      	movs	r0, #64	; 0x40
 8008c2a:	f007 fcb9 	bl	80105a0 <SX1276Read>
 8008c2e:	f000 0103 	and.w	r1, r0, #3
 8008c32:	2040      	movs	r0, #64	; 0x40
 8008c34:	f007 fca8 	bl	8010588 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8008c38:	2041      	movs	r0, #65	; 0x41
 8008c3a:	f007 fcb1 	bl	80105a0 <SX1276Read>
 8008c3e:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 8008c42:	2041      	movs	r0, #65	; 0x41
 8008c44:	f007 fca0 	bl	8010588 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8008c48:	2035      	movs	r0, #53	; 0x35
 8008c4a:	f007 fca9 	bl	80105a0 <SX1276Read>
 8008c4e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008c52:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <SX1276SetTx+0xb4>)
 8008c54:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
        break;
 8008c58:	e7db      	b.n	8008c12 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008c5a:	4b13      	ldr	r3, [pc, #76]	; (8008ca8 <SX1276SetTx+0xb4>)
 8008c5c:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008c60:	b173      	cbz	r3, 8008c80 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8008c62:	21f5      	movs	r1, #245	; 0xf5
 8008c64:	2011      	movs	r0, #17
 8008c66:	f007 fc8f 	bl	8010588 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8008c6a:	2040      	movs	r0, #64	; 0x40
 8008c6c:	f007 fc98 	bl	80105a0 <SX1276Read>
 8008c70:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8008c74:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008c78:	2040      	movs	r0, #64	; 0x40
 8008c7a:	f007 fc85 	bl	8010588 <SX1276Write>
 8008c7e:	e7c8      	b.n	8008c12 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8008c80:	21f7      	movs	r1, #247	; 0xf7
 8008c82:	2011      	movs	r0, #17
 8008c84:	f007 fc80 	bl	8010588 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8008c88:	2040      	movs	r0, #64	; 0x40
 8008c8a:	f007 fc89 	bl	80105a0 <SX1276Read>
 8008c8e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8008c92:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008c96:	2040      	movs	r0, #64	; 0x40
 8008c98:	f007 fc76 	bl	8010588 <SX1276Write>
 8008c9c:	e7b9      	b.n	8008c12 <SX1276SetTx+0x1e>
 8008c9e:	bf00      	nop
 8008ca0:	200011ac 	.word	0x200011ac
 8008ca4:	20001408 	.word	0x20001408
 8008ca8:	200012c4 	.word	0x200012c4

08008cac <SX1276Send>:
{
 8008cac:	b530      	push	{r4, r5, lr}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 8008cb6:	4b44      	ldr	r3, [pc, #272]	; (8008dc8 <SX1276Send+0x11c>)
 8008cb8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008cbc:	b133      	cbz	r3, 8008ccc <SX1276Send+0x20>
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d03a      	beq.n	8008d38 <SX1276Send+0x8c>
 8008cc2:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 8008cc4:	f7ff ff96 	bl	8008bf4 <SX1276SetTx>
}
 8008cc8:	b003      	add	sp, #12
 8008cca:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008ccc:	4b3e      	ldr	r3, [pc, #248]	; (8008dc8 <SX1276Send+0x11c>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 8008cd4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008cd8:	f8a3 1116 	strh.w	r1, [r3, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
 8008cdc:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8008ce0:	b9eb      	cbnz	r3, 8008d1e <SX1276Send+0x72>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	f10d 0007 	add.w	r0, sp, #7
 8008ce8:	f007 fc15 	bl	8010516 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8008cec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008cf0:	1e53      	subs	r3, r2, #1
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b3f      	cmp	r3, #63	; 0x3f
 8008cf6:	d816      	bhi.n	8008d26 <SX1276Send+0x7a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8008cf8:	4b33      	ldr	r3, [pc, #204]	; (8008dc8 <SX1276Send+0x11c>)
 8008cfa:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8008cfe:	4d32      	ldr	r5, [pc, #200]	; (8008dc8 <SX1276Send+0x11c>)
 8008d00:	f895 111b 	ldrb.w	r1, [r5, #283]	; 0x11b
 8008d04:	4620      	mov	r0, r4
 8008d06:	f007 fc06 	bl	8010516 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8008d0a:	f895 311b 	ldrb.w	r3, [r5, #283]	; 0x11b
 8008d0e:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 8008d12:	4413      	add	r3, r2
 8008d14:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8008d18:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
        break;
 8008d1c:	e7d2      	b.n	8008cc4 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8008d1e:	2032      	movs	r0, #50	; 0x32
 8008d20:	f007 fc32 	bl	8010588 <SX1276Write>
 8008d24:	e7e2      	b.n	8008cec <SX1276Send+0x40>
                memcpy1( RxTxBuffer, buffer, size );
 8008d26:	4621      	mov	r1, r4
 8008d28:	4828      	ldr	r0, [pc, #160]	; (8008dcc <SX1276Send+0x120>)
 8008d2a:	f007 fb2b 	bl	8010384 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8008d2e:	4b26      	ldr	r3, [pc, #152]	; (8008dc8 <SX1276Send+0x11c>)
 8008d30:	2220      	movs	r2, #32
 8008d32:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8008d36:	e7e2      	b.n	8008cfe <SX1276Send+0x52>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008d38:	4b23      	ldr	r3, [pc, #140]	; (8008dc8 <SX1276Send+0x11c>)
 8008d3a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008d3e:	b353      	cbz	r3, 8008d96 <SX1276Send+0xea>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8008d40:	2033      	movs	r0, #51	; 0x33
 8008d42:	f007 fc2d 	bl	80105a0 <SX1276Read>
 8008d46:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8008d4a:	2033      	movs	r0, #51	; 0x33
 8008d4c:	f007 fc1c 	bl	8010588 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8008d50:	2119      	movs	r1, #25
 8008d52:	203b      	movs	r0, #59	; 0x3b
 8008d54:	f007 fc18 	bl	8010588 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8008d58:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008d5c:	4b1a      	ldr	r3, [pc, #104]	; (8008dc8 <SX1276Send+0x11c>)
 8008d5e:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8008d62:	2022      	movs	r0, #34	; 0x22
 8008d64:	f007 fc10 	bl	8010588 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8008d68:	2100      	movs	r1, #0
 8008d6a:	200e      	movs	r0, #14
 8008d6c:	f007 fc0c 	bl	8010588 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8008d70:	2100      	movs	r1, #0
 8008d72:	200d      	movs	r0, #13
 8008d74:	f007 fc08 	bl	8010588 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8008d78:	2001      	movs	r0, #1
 8008d7a:	f007 fc11 	bl	80105a0 <SX1276Read>
 8008d7e:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8008d82:	d01a      	beq.n	8008dba <SX1276Send+0x10e>
            SX1276WriteFifo( buffer, size );
 8008d84:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f007 fbc4 	bl	8010516 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8008d8e:	4b0e      	ldr	r3, [pc, #56]	; (8008dc8 <SX1276Send+0x11c>)
 8008d90:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
        break;
 8008d94:	e796      	b.n	8008cc4 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8008d96:	2033      	movs	r0, #51	; 0x33
 8008d98:	f007 fc02 	bl	80105a0 <SX1276Read>
 8008d9c:	b241      	sxtb	r1, r0
 8008d9e:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8008da2:	f041 0101 	orr.w	r1, r1, #1
 8008da6:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8008daa:	2033      	movs	r0, #51	; 0x33
 8008dac:	f007 fbec 	bl	8010588 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8008db0:	211d      	movs	r1, #29
 8008db2:	203b      	movs	r0, #59	; 0x3b
 8008db4:	f007 fbe8 	bl	8010588 <SX1276Write>
 8008db8:	e7ce      	b.n	8008d58 <SX1276Send+0xac>
                SX1276SetStby( );
 8008dba:	f7ff ff01 	bl	8008bc0 <SX1276SetStby>
                DelayMs( 1 );
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	f007 fb31 	bl	8010426 <DelayMs>
 8008dc4:	e7de      	b.n	8008d84 <SX1276Send+0xd8>
 8008dc6:	bf00      	nop
 8008dc8:	200012c4 	.word	0x200012c4
 8008dcc:	200011c4 	.word	0x200011c4

08008dd0 <SX1276SetRx>:
{
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	4604      	mov	r4, r0
    TimerStop( &TxTimeoutTimer );
 8008dd4:	489d      	ldr	r0, [pc, #628]	; (800904c <SX1276SetRx+0x27c>)
 8008dd6:	f7ff faff 	bl	80083d8 <TimerStop>
    switch( SX1276.Settings.Modem )
 8008dda:	4b9d      	ldr	r3, [pc, #628]	; (8009050 <SX1276SetRx+0x280>)
 8008ddc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008de0:	b1e3      	cbz	r3, 8008e1c <SX1276SetRx+0x4c>
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d045      	beq.n	8008e72 <SX1276SetRx+0xa2>
 8008de6:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8008de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dec:	2100      	movs	r1, #0
 8008dee:	4899      	ldr	r0, [pc, #612]	; (8009054 <SX1276SetRx+0x284>)
 8008df0:	f008 fa63 	bl	80112ba <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8008df4:	4b96      	ldr	r3, [pc, #600]	; (8009050 <SX1276SetRx+0x280>)
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if( timeout != 0 )
 8008dfc:	2c00      	cmp	r4, #0
 8008dfe:	f040 8107 	bne.w	8009010 <SX1276SetRx+0x240>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8008e02:	4b93      	ldr	r3, [pc, #588]	; (8009050 <SX1276SetRx+0x280>)
 8008e04:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 810a 	beq.w	8009022 <SX1276SetRx+0x252>
        if( rxContinuous == true )
 8008e0e:	2e00      	cmp	r6, #0
 8008e10:	f000 8118 	beq.w	8009044 <SX1276SetRx+0x274>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8008e14:	2005      	movs	r0, #5
 8008e16:	f007 fbcf 	bl	80105b8 <SX1276SetOpMode>
}
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8008e1c:	4d8c      	ldr	r5, [pc, #560]	; (8009050 <SX1276SetRx+0x280>)
 8008e1e:	f895 6102 	ldrb.w	r6, [r5, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008e22:	2040      	movs	r0, #64	; 0x40
 8008e24:	f007 fbbc 	bl	80105a0 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8008e28:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008e2c:	f041 010c 	orr.w	r1, r1, #12
 8008e30:	2040      	movs	r0, #64	; 0x40
 8008e32:	f007 fba9 	bl	8010588 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8008e36:	2041      	movs	r0, #65	; 0x41
 8008e38:	f007 fbb2 	bl	80105a0 <SX1276Read>
 8008e3c:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8008e40:	b2c9      	uxtb	r1, r1
 8008e42:	2041      	movs	r0, #65	; 0x41
 8008e44:	f007 fba0 	bl	8010588 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8008e48:	2035      	movs	r0, #53	; 0x35
 8008e4a:	f007 fba9 	bl	80105a0 <SX1276Read>
 8008e4e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008e52:	f885 011a 	strb.w	r0, [r5, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8008e56:	211e      	movs	r1, #30
 8008e58:	200d      	movs	r0, #13
 8008e5a:	f007 fb95 	bl	8010588 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8008e64:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008e68:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8008e6c:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
        break;
 8008e70:	e7ba      	b.n	8008de8 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008e72:	4b77      	ldr	r3, [pc, #476]	; (8009050 <SX1276SetRx+0x280>)
 8008e74:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008e78:	b353      	cbz	r3, 8008ed0 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8008e7a:	2033      	movs	r0, #51	; 0x33
 8008e7c:	f007 fb90 	bl	80105a0 <SX1276Read>
 8008e80:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8008e84:	b2c9      	uxtb	r1, r1
 8008e86:	2033      	movs	r0, #51	; 0x33
 8008e88:	f007 fb7e 	bl	8010588 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8008e8c:	2119      	movs	r1, #25
 8008e8e:	203b      	movs	r0, #59	; 0x3b
 8008e90:	f007 fb7a 	bl	8010588 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8008e94:	4b6e      	ldr	r3, [pc, #440]	; (8009050 <SX1276SetRx+0x280>)
 8008e96:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008e9a:	2b08      	cmp	r3, #8
 8008e9c:	f200 8087 	bhi.w	8008fae <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8008ea0:	2031      	movs	r0, #49	; 0x31
 8008ea2:	f007 fb7d 	bl	80105a0 <SX1276Read>
 8008ea6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8008eaa:	2031      	movs	r0, #49	; 0x31
 8008eac:	f007 fb6c 	bl	8010588 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	2030      	movs	r0, #48	; 0x30
 8008eb4:	f007 fb68 	bl	8010588 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8008eb8:	4b65      	ldr	r3, [pc, #404]	; (8009050 <SX1276SetRx+0x280>)
 8008eba:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008ebe:	2b08      	cmp	r3, #8
 8008ec0:	d87e      	bhi.n	8008fc0 <SX1276SetRx+0x1f0>
 8008ec2:	e8df f003 	tbb	[pc, r3]
 8008ec6:	2417      	.short	0x2417
 8008ec8:	584b3e31 	.word	0x584b3e31
 8008ecc:	6a65      	.short	0x6a65
 8008ece:	6f          	.byte	0x6f
 8008ecf:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8008ed0:	2033      	movs	r0, #51	; 0x33
 8008ed2:	f007 fb65 	bl	80105a0 <SX1276Read>
 8008ed6:	b241      	sxtb	r1, r0
 8008ed8:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8008edc:	f041 0101 	orr.w	r1, r1, #1
 8008ee0:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8008ee4:	2033      	movs	r0, #51	; 0x33
 8008ee6:	f007 fb4f 	bl	8010588 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8008eea:	211d      	movs	r1, #29
 8008eec:	203b      	movs	r0, #59	; 0x3b
 8008eee:	f007 fb4b 	bl	8010588 <SX1276Write>
 8008ef2:	e7cf      	b.n	8008e94 <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8008ef4:	2148      	movs	r1, #72	; 0x48
 8008ef6:	202f      	movs	r0, #47	; 0x2f
 8008ef8:	f007 fb46 	bl	8010588 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8008efc:	4b54      	ldr	r3, [pc, #336]	; (8009050 <SX1276SetRx+0x280>)
 8008efe:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008f02:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8008f06:	3002      	adds	r0, #2
 8008f08:	f7ff fb0c 	bl	8008524 <SX1276SetChannel>
                    break;
 8008f0c:	e058      	b.n	8008fc0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008f0e:	2144      	movs	r1, #68	; 0x44
 8008f10:	202f      	movs	r0, #47	; 0x2f
 8008f12:	f007 fb39 	bl	8010588 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8008f16:	4b4e      	ldr	r3, [pc, #312]	; (8009050 <SX1276SetRx+0x280>)
 8008f18:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008f1c:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8008f20:	3034      	adds	r0, #52	; 0x34
 8008f22:	f7ff faff 	bl	8008524 <SX1276SetChannel>
                    break;
 8008f26:	e04b      	b.n	8008fc0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008f28:	2144      	movs	r1, #68	; 0x44
 8008f2a:	202f      	movs	r0, #47	; 0x2f
 8008f2c:	f007 fb2c 	bl	8010588 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8008f30:	4b47      	ldr	r3, [pc, #284]	; (8009050 <SX1276SetRx+0x280>)
 8008f32:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008f36:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8008f3a:	3004      	adds	r0, #4
 8008f3c:	f7ff faf2 	bl	8008524 <SX1276SetChannel>
                    break;
 8008f40:	e03e      	b.n	8008fc0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008f42:	2144      	movs	r1, #68	; 0x44
 8008f44:	202f      	movs	r0, #47	; 0x2f
 8008f46:	f007 fb1f 	bl	8010588 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8008f4a:	4b41      	ldr	r3, [pc, #260]	; (8009050 <SX1276SetRx+0x280>)
 8008f4c:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008f50:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8008f54:	305e      	adds	r0, #94	; 0x5e
 8008f56:	f7ff fae5 	bl	8008524 <SX1276SetChannel>
                    break;
 8008f5a:	e031      	b.n	8008fc0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008f5c:	2144      	movs	r1, #68	; 0x44
 8008f5e:	202f      	movs	r0, #47	; 0x2f
 8008f60:	f007 fb12 	bl	8010588 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8008f64:	4b3a      	ldr	r3, [pc, #232]	; (8009050 <SX1276SetRx+0x280>)
 8008f66:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008f6a:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8008f6e:	3012      	adds	r0, #18
 8008f70:	f7ff fad8 	bl	8008524 <SX1276SetChannel>
                    break;
 8008f74:	e024      	b.n	8008fc0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008f76:	2144      	movs	r1, #68	; 0x44
 8008f78:	202f      	movs	r0, #47	; 0x2f
 8008f7a:	f007 fb05 	bl	8010588 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8008f7e:	4b34      	ldr	r3, [pc, #208]	; (8009050 <SX1276SetRx+0x280>)
 8008f80:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008f84:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8008f88:	30c6      	adds	r0, #198	; 0xc6
 8008f8a:	f7ff facb 	bl	8008524 <SX1276SetChannel>
                    break;
 8008f8e:	e017      	b.n	8008fc0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008f90:	2140      	movs	r1, #64	; 0x40
 8008f92:	202f      	movs	r0, #47	; 0x2f
 8008f94:	f007 faf8 	bl	8010588 <SX1276Write>
                    break;
 8008f98:	e012      	b.n	8008fc0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008f9a:	2140      	movs	r1, #64	; 0x40
 8008f9c:	202f      	movs	r0, #47	; 0x2f
 8008f9e:	f007 faf3 	bl	8010588 <SX1276Write>
                    break;
 8008fa2:	e00d      	b.n	8008fc0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008fa4:	2140      	movs	r1, #64	; 0x40
 8008fa6:	202f      	movs	r0, #47	; 0x2f
 8008fa8:	f007 faee 	bl	8010588 <SX1276Write>
                    break;
 8008fac:	e008      	b.n	8008fc0 <SX1276SetRx+0x1f0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8008fae:	2031      	movs	r0, #49	; 0x31
 8008fb0:	f007 faf6 	bl	80105a0 <SX1276Read>
 8008fb4:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8008fb8:	b2c9      	uxtb	r1, r1
 8008fba:	2031      	movs	r0, #49	; 0x31
 8008fbc:	f007 fae4 	bl	8010588 <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8008fc0:	4b23      	ldr	r3, [pc, #140]	; (8009050 <SX1276SetRx+0x280>)
 8008fc2:	f893 6132 	ldrb.w	r6, [r3, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008fc6:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008fca:	b1a3      	cbz	r3, 8008ff6 <SX1276SetRx+0x226>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8008fcc:	211d      	movs	r1, #29
 8008fce:	2011      	movs	r0, #17
 8008fd0:	f007 fada 	bl	8010588 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8008fd4:	2040      	movs	r0, #64	; 0x40
 8008fd6:	f007 fae3 	bl	80105a0 <SX1276Read>
 8008fda:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8008fde:	2040      	movs	r0, #64	; 0x40
 8008fe0:	f007 fad2 	bl	8010588 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	200f      	movs	r0, #15
 8008fe8:	f007 face 	bl	8010588 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8008fec:	2100      	movs	r1, #0
 8008fee:	200d      	movs	r0, #13
 8008ff0:	f007 faca 	bl	8010588 <SX1276Write>
        break;
 8008ff4:	e6f8      	b.n	8008de8 <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8008ff6:	211f      	movs	r1, #31
 8008ff8:	2011      	movs	r0, #17
 8008ffa:	f007 fac5 	bl	8010588 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8008ffe:	2040      	movs	r0, #64	; 0x40
 8009000:	f007 face 	bl	80105a0 <SX1276Read>
 8009004:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8009008:	2040      	movs	r0, #64	; 0x40
 800900a:	f007 fabd 	bl	8010588 <SX1276Write>
 800900e:	e7e9      	b.n	8008fe4 <SX1276SetRx+0x214>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8009010:	4d11      	ldr	r5, [pc, #68]	; (8009058 <SX1276SetRx+0x288>)
 8009012:	4621      	mov	r1, r4
 8009014:	4628      	mov	r0, r5
 8009016:	f007 f9df 	bl	80103d8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 800901a:	4628      	mov	r0, r5
 800901c:	f7ff f962 	bl	80082e4 <TimerStart>
 8009020:	e6ef      	b.n	8008e02 <SX1276SetRx+0x32>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8009022:	2005      	movs	r0, #5
 8009024:	f007 fac8 	bl	80105b8 <SX1276SetOpMode>
        if( rxContinuous == false )
 8009028:	2e00      	cmp	r6, #0
 800902a:	f47f aef6 	bne.w	8008e1a <SX1276SetRx+0x4a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800902e:	4c0b      	ldr	r4, [pc, #44]	; (800905c <SX1276SetRx+0x28c>)
 8009030:	4b07      	ldr	r3, [pc, #28]	; (8009050 <SX1276SetRx+0x280>)
 8009032:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8009036:	4620      	mov	r0, r4
 8009038:	f007 f9ce 	bl	80103d8 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 800903c:	4620      	mov	r0, r4
 800903e:	f7ff f951 	bl	80082e4 <TimerStart>
 8009042:	e6ea      	b.n	8008e1a <SX1276SetRx+0x4a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8009044:	2006      	movs	r0, #6
 8009046:	f007 fab7 	bl	80105b8 <SX1276SetOpMode>
}
 800904a:	e6e6      	b.n	8008e1a <SX1276SetRx+0x4a>
 800904c:	20001408 	.word	0x20001408
 8009050:	200012c4 	.word	0x200012c4
 8009054:	200011c4 	.word	0x200011c4
 8009058:	200011ac 	.word	0x200011ac
 800905c:	20001194 	.word	0x20001194

08009060 <SX1276ReadRssi>:
{
 8009060:	b508      	push	{r3, lr}
    switch( modem )
 8009062:	b120      	cbz	r0, 800906e <SX1276ReadRssi+0xe>
 8009064:	2801      	cmp	r0, #1
 8009066:	d00a      	beq.n	800907e <SX1276ReadRssi+0x1e>
 8009068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800906c:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800906e:	2011      	movs	r0, #17
 8009070:	f007 fa96 	bl	80105a0 <SX1276Read>
 8009074:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8009078:	4240      	negs	r0, r0
 800907a:	b200      	sxth	r0, r0
        break;
 800907c:	e7f6      	b.n	800906c <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800907e:	4b0a      	ldr	r3, [pc, #40]	; (80090a8 <SX1276ReadRssi+0x48>)
 8009080:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8009084:	4b09      	ldr	r3, [pc, #36]	; (80090ac <SX1276ReadRssi+0x4c>)
 8009086:	429a      	cmp	r2, r3
 8009088:	d906      	bls.n	8009098 <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800908a:	201b      	movs	r0, #27
 800908c:	f007 fa88 	bl	80105a0 <SX1276Read>
 8009090:	b280      	uxth	r0, r0
 8009092:	389d      	subs	r0, #157	; 0x9d
 8009094:	b200      	sxth	r0, r0
 8009096:	e7e9      	b.n	800906c <SX1276ReadRssi+0xc>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8009098:	201b      	movs	r0, #27
 800909a:	f007 fa81 	bl	80105a0 <SX1276Read>
 800909e:	b280      	uxth	r0, r0
 80090a0:	38a4      	subs	r0, #164	; 0xa4
 80090a2:	b200      	sxth	r0, r0
 80090a4:	e7e2      	b.n	800906c <SX1276ReadRssi+0xc>
 80090a6:	bf00      	nop
 80090a8:	200012c4 	.word	0x200012c4
 80090ac:	1f4add40 	.word	0x1f4add40

080090b0 <SX1276SetModem>:
{
 80090b0:	b510      	push	{r4, lr}
 80090b2:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80090b4:	2001      	movs	r0, #1
 80090b6:	f007 fa73 	bl	80105a0 <SX1276Read>
 80090ba:	f010 0f80 	tst.w	r0, #128	; 0x80
 80090be:	d121      	bne.n	8009104 <SX1276SetModem+0x54>
        SX1276.Settings.Modem = MODEM_FSK;
 80090c0:	4b1d      	ldr	r3, [pc, #116]	; (8009138 <SX1276SetModem+0x88>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    if( SX1276.Settings.Modem == modem )
 80090c8:	4b1b      	ldr	r3, [pc, #108]	; (8009138 <SX1276SetModem+0x88>)
 80090ca:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80090ce:	42a3      	cmp	r3, r4
 80090d0:	d017      	beq.n	8009102 <SX1276SetModem+0x52>
    SX1276.Settings.Modem = modem;
 80090d2:	4b19      	ldr	r3, [pc, #100]	; (8009138 <SX1276SetModem+0x88>)
 80090d4:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 80090d8:	2c01      	cmp	r4, #1
 80090da:	d018      	beq.n	800910e <SX1276SetModem+0x5e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80090dc:	2000      	movs	r0, #0
 80090de:	f007 fa6b 	bl	80105b8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 80090e2:	2001      	movs	r0, #1
 80090e4:	f007 fa5c 	bl	80105a0 <SX1276Read>
 80090e8:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80090ec:	2001      	movs	r0, #1
 80090ee:	f007 fa4b 	bl	8010588 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80090f2:	2100      	movs	r1, #0
 80090f4:	2040      	movs	r0, #64	; 0x40
 80090f6:	f007 fa47 	bl	8010588 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80090fa:	2130      	movs	r1, #48	; 0x30
 80090fc:	2041      	movs	r0, #65	; 0x41
 80090fe:	f007 fa43 	bl	8010588 <SX1276Write>
}
 8009102:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 8009104:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <SX1276SetModem+0x88>)
 8009106:	2201      	movs	r2, #1
 8009108:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800910c:	e7dc      	b.n	80090c8 <SX1276SetModem+0x18>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800910e:	2000      	movs	r0, #0
 8009110:	f007 fa52 	bl	80105b8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8009114:	2001      	movs	r0, #1
 8009116:	f007 fa43 	bl	80105a0 <SX1276Read>
 800911a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800911e:	b2c9      	uxtb	r1, r1
 8009120:	2001      	movs	r0, #1
 8009122:	f007 fa31 	bl	8010588 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8009126:	2100      	movs	r1, #0
 8009128:	2040      	movs	r0, #64	; 0x40
 800912a:	f007 fa2d 	bl	8010588 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800912e:	2100      	movs	r1, #0
 8009130:	2041      	movs	r0, #65	; 0x41
 8009132:	f007 fa29 	bl	8010588 <SX1276Write>
        break;
 8009136:	e7e4      	b.n	8009102 <SX1276SetModem+0x52>
 8009138:	200012c4 	.word	0x200012c4

0800913c <SX1276Init>:
{
 800913c:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 800913e:	4b19      	ldr	r3, [pc, #100]	; (80091a4 <SX1276Init+0x68>)
 8009140:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8009142:	4c19      	ldr	r4, [pc, #100]	; (80091a8 <SX1276Init+0x6c>)
 8009144:	4621      	mov	r1, r4
 8009146:	4819      	ldr	r0, [pc, #100]	; (80091ac <SX1276Init+0x70>)
 8009148:	f007 f93d 	bl	80103c6 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800914c:	4621      	mov	r1, r4
 800914e:	4818      	ldr	r0, [pc, #96]	; (80091b0 <SX1276Init+0x74>)
 8009150:	f007 f939 	bl	80103c6 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8009154:	4621      	mov	r1, r4
 8009156:	4817      	ldr	r0, [pc, #92]	; (80091b4 <SX1276Init+0x78>)
 8009158:	f007 f935 	bl	80103c6 <TimerInit>
    SX1276Reset( );
 800915c:	f7fe fd38 	bl	8007bd0 <SX1276Reset>
    RxChainCalibration( );
 8009160:	f7ff fccc 	bl	8008afc <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8009164:	2000      	movs	r0, #0
 8009166:	f007 fa27 	bl	80105b8 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
 800916a:	4813      	ldr	r0, [pc, #76]	; (80091b8 <SX1276Init+0x7c>)
 800916c:	f7fe fd64 	bl	8007c38 <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8009170:	2400      	movs	r4, #0
 8009172:	e00c      	b.n	800918e <SX1276Init+0x52>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8009174:	4a11      	ldr	r2, [pc, #68]	; (80091bc <SX1276Init+0x80>)
 8009176:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800917a:	18d5      	adds	r5, r2, r3
 800917c:	5cd0      	ldrb	r0, [r2, r3]
 800917e:	f7ff ff97 	bl	80090b0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8009182:	78a9      	ldrb	r1, [r5, #2]
 8009184:	7868      	ldrb	r0, [r5, #1]
 8009186:	f007 f9ff 	bl	8010588 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800918a:	3401      	adds	r4, #1
 800918c:	b2e4      	uxtb	r4, r4
 800918e:	2c0f      	cmp	r4, #15
 8009190:	d9f0      	bls.n	8009174 <SX1276Init+0x38>
    SX1276SetModem( MODEM_FSK );
 8009192:	2000      	movs	r0, #0
 8009194:	f7ff ff8c 	bl	80090b0 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8009198:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <SX1276Init+0x84>)
 800919a:	2200      	movs	r2, #0
 800919c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80091a0:	bd38      	pop	{r3, r4, r5, pc}
 80091a2:	bf00      	nop
 80091a4:	20001190 	.word	0x20001190
 80091a8:	080097bd 	.word	0x080097bd
 80091ac:	20001408 	.word	0x20001408
 80091b0:	200011ac 	.word	0x200011ac
 80091b4:	20001194 	.word	0x20001194
 80091b8:	2000034c 	.word	0x2000034c
 80091bc:	08013518 	.word	0x08013518
 80091c0:	200012c4 	.word	0x200012c4

080091c4 <SX1276SetRxConfig>:
{
 80091c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	b085      	sub	sp, #20
 80091ca:	4604      	mov	r4, r0
 80091cc:	9101      	str	r1, [sp, #4]
 80091ce:	4615      	mov	r5, r2
 80091d0:	9303      	str	r3, [sp, #12]
 80091d2:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 80091d6:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80091da:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80091de:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 80091e2:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80091e6:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 80091ea:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 80091ee:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
 80091f0:	f7ff ff5e 	bl	80090b0 <SX1276SetModem>
    switch( modem )
 80091f4:	b124      	cbz	r4, 8009200 <SX1276SetRxConfig+0x3c>
 80091f6:	2c01      	cmp	r4, #1
 80091f8:	d069      	beq.n	80092ce <SX1276SetRxConfig+0x10a>
}
 80091fa:	b005      	add	sp, #20
 80091fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8009200:	4ba0      	ldr	r3, [pc, #640]	; (8009484 <SX1276SetRxConfig+0x2c0>)
 8009202:	9c01      	ldr	r4, [sp, #4]
 8009204:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8009208:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800920c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800920e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 8009212:	f883 70fe 	strb.w	r7, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8009216:	f883 90ff 	strb.w	r9, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800921a:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800921e:	f883 b101 	strb.w	fp, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8009222:	9a02      	ldr	r2, [sp, #8]
 8009224:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8009228:	f8a3 80fc 	strh.w	r8, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800922c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009230:	fb02 fa0a 	mul.w	sl, r2, sl
 8009234:	fbba f2f5 	udiv	r2, sl, r5
 8009238:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800923c:	4b92      	ldr	r3, [pc, #584]	; (8009488 <SX1276SetRxConfig+0x2c4>)
 800923e:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8009242:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8009246:	2002      	movs	r0, #2
 8009248:	f007 f99e 	bl	8010588 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800924c:	b2e9      	uxtb	r1, r5
 800924e:	2003      	movs	r0, #3
 8009250:	f007 f99a 	bl	8010588 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8009254:	4620      	mov	r0, r4
 8009256:	f7ff f913 	bl	8008480 <GetFskBandwidthRegValue>
 800925a:	4601      	mov	r1, r0
 800925c:	2012      	movs	r0, #18
 800925e:	f007 f993 	bl	8010588 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8009262:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009264:	f7ff f90c 	bl	8008480 <GetFskBandwidthRegValue>
 8009268:	4601      	mov	r1, r0
 800926a:	2013      	movs	r0, #19
 800926c:	f007 f98c 	bl	8010588 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8009270:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8009274:	2025      	movs	r0, #37	; 0x25
 8009276:	f007 f987 	bl	8010588 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800927a:	fa5f f188 	uxtb.w	r1, r8
 800927e:	2026      	movs	r0, #38	; 0x26
 8009280:	f007 f982 	bl	8010588 <SX1276Write>
            if( fixLen == 1 )
 8009284:	b1df      	cbz	r7, 80092be <SX1276SetRxConfig+0xfa>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8009286:	4649      	mov	r1, r9
 8009288:	2032      	movs	r0, #50	; 0x32
 800928a:	f007 f97d 	bl	8010588 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800928e:	2030      	movs	r0, #48	; 0x30
 8009290:	f007 f986 	bl	80105a0 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8009294:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8009298:	b1b7      	cbz	r7, 80092c8 <SX1276SetRxConfig+0x104>
 800929a:	2300      	movs	r3, #0
 800929c:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800929e:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 80092a2:	b2c9      	uxtb	r1, r1
 80092a4:	2030      	movs	r0, #48	; 0x30
 80092a6:	f007 f96f 	bl	8010588 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80092aa:	2031      	movs	r0, #49	; 0x31
 80092ac:	f007 f978 	bl	80105a0 <SX1276Read>
 80092b0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80092b4:	b2c9      	uxtb	r1, r1
 80092b6:	2031      	movs	r0, #49	; 0x31
 80092b8:	f007 f966 	bl	8010588 <SX1276Write>
        break;
 80092bc:	e79d      	b.n	80091fa <SX1276SetRxConfig+0x36>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 80092be:	21ff      	movs	r1, #255	; 0xff
 80092c0:	2032      	movs	r0, #50	; 0x32
 80092c2:	f007 f961 	bl	8010588 <SX1276Write>
 80092c6:	e7e2      	b.n	800928e <SX1276SetRxConfig+0xca>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80092c8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80092cc:	e7e6      	b.n	800929c <SX1276SetRxConfig+0xd8>
            if( bandwidth > 2 )
 80092ce:	9b01      	ldr	r3, [sp, #4]
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d900      	bls.n	80092d6 <SX1276SetRxConfig+0x112>
                while( 1 );
 80092d4:	e7fe      	b.n	80092d4 <SX1276SetRxConfig+0x110>
            bandwidth += 7;
 80092d6:	9c01      	ldr	r4, [sp, #4]
 80092d8:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80092da:	4b6a      	ldr	r3, [pc, #424]	; (8009484 <SX1276SetRxConfig+0x2c0>)
 80092dc:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 80092e0:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 80092e4:	9a03      	ldr	r2, [sp, #12]
 80092e6:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80092ea:	f8a3 812a 	strh.w	r8, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 80092ee:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80092f2:	f883 912d 	strb.w	r9, [r3, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80092f6:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80092fa:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80092fe:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8009302:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8009306:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800930a:	f883 b131 	strb.w	fp, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800930e:	9a02      	ldr	r2, [sp, #8]
 8009310:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            if( datarate > 12 )
 8009314:	2d0c      	cmp	r5, #12
 8009316:	d803      	bhi.n	8009320 <SX1276SetRxConfig+0x15c>
            else if( datarate < 6 )
 8009318:	2d05      	cmp	r5, #5
 800931a:	d802      	bhi.n	8009322 <SX1276SetRxConfig+0x15e>
                datarate = 6;
 800931c:	2506      	movs	r5, #6
 800931e:	e000      	b.n	8009322 <SX1276SetRxConfig+0x15e>
                datarate = 12;
 8009320:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009322:	2c07      	cmp	r4, #7
 8009324:	d063      	beq.n	80093ee <SX1276SetRxConfig+0x22a>
 8009326:	2c08      	cmp	r4, #8
 8009328:	d06a      	beq.n	8009400 <SX1276SetRxConfig+0x23c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800932a:	4b56      	ldr	r3, [pc, #344]	; (8009484 <SX1276SetRxConfig+0x2c0>)
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8009332:	201d      	movs	r0, #29
 8009334:	f007 f934 	bl	80105a0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8009338:	0123      	lsls	r3, r4, #4
 800933a:	b2da      	uxtb	r2, r3
 800933c:	9b03      	ldr	r3, [sp, #12]
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	b2db      	uxtb	r3, r3
 8009342:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8009344:	ea43 0107 	orr.w	r1, r3, r7
 8009348:	201d      	movs	r0, #29
 800934a:	f007 f91d 	bl	8010588 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800934e:	201e      	movs	r0, #30
 8009350:	f007 f926 	bl	80105a0 <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8009354:	f000 0308 	and.w	r3, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8009358:	012a      	lsls	r2, r5, #4
 800935a:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800935c:	431a      	orrs	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800935e:	00b3      	lsls	r3, r6, #2
 8009360:	b2db      	uxtb	r3, r3
 8009362:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8009364:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8009368:	4319      	orrs	r1, r3
 800936a:	201e      	movs	r0, #30
 800936c:	f007 f90c 	bl	8010588 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8009370:	2026      	movs	r0, #38	; 0x26
 8009372:	f007 f915 	bl	80105a0 <SX1276Read>
 8009376:	b241      	sxtb	r1, r0
 8009378:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800937c:	4b41      	ldr	r3, [pc, #260]	; (8009484 <SX1276SetRxConfig+0x2c0>)
 800937e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8009382:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8009386:	b2c9      	uxtb	r1, r1
 8009388:	2026      	movs	r0, #38	; 0x26
 800938a:	f007 f8fd 	bl	8010588 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800938e:	fa5f f18a 	uxtb.w	r1, sl
 8009392:	201f      	movs	r0, #31
 8009394:	f007 f8f8 	bl	8010588 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8009398:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800939c:	2020      	movs	r0, #32
 800939e:	f007 f8f3 	bl	8010588 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80093a2:	fa5f f188 	uxtb.w	r1, r8
 80093a6:	2021      	movs	r0, #33	; 0x21
 80093a8:	f007 f8ee 	bl	8010588 <SX1276Write>
            if( fixLen == 1 )
 80093ac:	bb5f      	cbnz	r7, 8009406 <SX1276SetRxConfig+0x242>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80093ae:	4b35      	ldr	r3, [pc, #212]	; (8009484 <SX1276SetRxConfig+0x2c0>)
 80093b0:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80093b4:	bb63      	cbnz	r3, 8009410 <SX1276SetRxConfig+0x24c>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80093b6:	2c09      	cmp	r4, #9
 80093b8:	d03a      	beq.n	8009430 <SX1276SetRxConfig+0x26c>
            else if( bandwidth == 9 )
 80093ba:	2c09      	cmp	r4, #9
 80093bc:	d047      	beq.n	800944e <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80093be:	2103      	movs	r1, #3
 80093c0:	2036      	movs	r0, #54	; 0x36
 80093c2:	f007 f8e1 	bl	8010588 <SX1276Write>
            if( datarate == 6 )
 80093c6:	2d06      	cmp	r5, #6
 80093c8:	d04a      	beq.n	8009460 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80093ca:	2031      	movs	r0, #49	; 0x31
 80093cc:	f007 f8e8 	bl	80105a0 <SX1276Read>
 80093d0:	b241      	sxtb	r1, r0
 80093d2:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80093d6:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80093da:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 80093de:	2031      	movs	r0, #49	; 0x31
 80093e0:	f007 f8d2 	bl	8010588 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80093e4:	210a      	movs	r1, #10
 80093e6:	2037      	movs	r0, #55	; 0x37
 80093e8:	f007 f8ce 	bl	8010588 <SX1276Write>
}
 80093ec:	e705      	b.n	80091fa <SX1276SetRxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80093ee:	f1a5 030b 	sub.w	r3, r5, #11
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d897      	bhi.n	8009326 <SX1276SetRxConfig+0x162>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80093f6:	4b23      	ldr	r3, [pc, #140]	; (8009484 <SX1276SetRxConfig+0x2c0>)
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80093fe:	e798      	b.n	8009332 <SX1276SetRxConfig+0x16e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8009400:	2d0c      	cmp	r5, #12
 8009402:	d192      	bne.n	800932a <SX1276SetRxConfig+0x166>
 8009404:	e7f7      	b.n	80093f6 <SX1276SetRxConfig+0x232>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8009406:	4649      	mov	r1, r9
 8009408:	2022      	movs	r0, #34	; 0x22
 800940a:	f007 f8bd 	bl	8010588 <SX1276Write>
 800940e:	e7ce      	b.n	80093ae <SX1276SetRxConfig+0x1ea>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8009410:	2044      	movs	r0, #68	; 0x44
 8009412:	f007 f8c5 	bl	80105a0 <SX1276Read>
 8009416:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800941a:	b2c9      	uxtb	r1, r1
 800941c:	2044      	movs	r0, #68	; 0x44
 800941e:	f007 f8b3 	bl	8010588 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8009422:	4b18      	ldr	r3, [pc, #96]	; (8009484 <SX1276SetRxConfig+0x2c0>)
 8009424:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8009428:	2024      	movs	r0, #36	; 0x24
 800942a:	f007 f8ad 	bl	8010588 <SX1276Write>
 800942e:	e7c2      	b.n	80093b6 <SX1276SetRxConfig+0x1f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8009430:	4b14      	ldr	r3, [pc, #80]	; (8009484 <SX1276SetRxConfig+0x2c0>)
 8009432:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8009436:	4b15      	ldr	r3, [pc, #84]	; (800948c <SX1276SetRxConfig+0x2c8>)
 8009438:	429a      	cmp	r2, r3
 800943a:	d9be      	bls.n	80093ba <SX1276SetRxConfig+0x1f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800943c:	2102      	movs	r1, #2
 800943e:	2036      	movs	r0, #54	; 0x36
 8009440:	f007 f8a2 	bl	8010588 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8009444:	2164      	movs	r1, #100	; 0x64
 8009446:	203a      	movs	r0, #58	; 0x3a
 8009448:	f007 f89e 	bl	8010588 <SX1276Write>
 800944c:	e7bb      	b.n	80093c6 <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800944e:	2102      	movs	r1, #2
 8009450:	2036      	movs	r0, #54	; 0x36
 8009452:	f007 f899 	bl	8010588 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8009456:	217f      	movs	r1, #127	; 0x7f
 8009458:	203a      	movs	r0, #58	; 0x3a
 800945a:	f007 f895 	bl	8010588 <SX1276Write>
 800945e:	e7b2      	b.n	80093c6 <SX1276SetRxConfig+0x202>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8009460:	2031      	movs	r0, #49	; 0x31
 8009462:	f007 f89d 	bl	80105a0 <SX1276Read>
 8009466:	b241      	sxtb	r1, r0
 8009468:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800946c:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8009470:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8009474:	2031      	movs	r0, #49	; 0x31
 8009476:	f007 f887 	bl	8010588 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800947a:	210c      	movs	r1, #12
 800947c:	2037      	movs	r0, #55	; 0x37
 800947e:	f007 f883 	bl	8010588 <SX1276Write>
 8009482:	e6ba      	b.n	80091fa <SX1276SetRxConfig+0x36>
 8009484:	200012c4 	.word	0x200012c4
 8009488:	01e84800 	.word	0x01e84800
 800948c:	1f4add40 	.word	0x1f4add40

08009490 <SX1276SetTxConfig>:
{
 8009490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	b083      	sub	sp, #12
 8009496:	4604      	mov	r4, r0
 8009498:	460d      	mov	r5, r1
 800949a:	9201      	str	r2, [sp, #4]
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80094a2:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 80094a6:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 80094aa:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80094ae:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 80094b2:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    SX1276SetModem( modem );
 80094b6:	f7ff fdfb 	bl	80090b0 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 80094ba:	4628      	mov	r0, r5
 80094bc:	f7fe fe08 	bl	80080d0 <SX1276SetRfTxPower>
    switch( modem )
 80094c0:	b124      	cbz	r4, 80094cc <SX1276SetTxConfig+0x3c>
 80094c2:	2c01      	cmp	r4, #1
 80094c4:	d057      	beq.n	8009576 <SX1276SetTxConfig+0xe6>
}
 80094c6:	b003      	add	sp, #12
 80094c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 80094cc:	4b81      	ldr	r3, [pc, #516]	; (80096d4 <SX1276SetTxConfig+0x244>)
 80094ce:	f883 50e8 	strb.w	r5, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Fdev = fdev;
 80094d2:	9801      	ldr	r0, [sp, #4]
 80094d4:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80094d8:	9a00      	ldr	r2, [sp, #0]
 80094da:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 80094de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094e0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80094e4:	f8a3 70fc 	strh.w	r7, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 80094e8:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80094ec:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80094f0:	f883 a101 	strb.w	sl, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80094f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094f6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 80094fa:	f7fe ffad 	bl	8008458 <SX1276ConvertFreqInHzToPllStep>
 80094fe:	4604      	mov	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8009500:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8009504:	2004      	movs	r0, #4
 8009506:	f007 f83f 	bl	8010588 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800950a:	b2e1      	uxtb	r1, r4
 800950c:	2005      	movs	r0, #5
 800950e:	f007 f83b 	bl	8010588 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8009512:	4c71      	ldr	r4, [pc, #452]	; (80096d8 <SX1276SetTxConfig+0x248>)
 8009514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009516:	fbb4 f4f3 	udiv	r4, r4, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800951a:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800951e:	2002      	movs	r0, #2
 8009520:	f007 f832 	bl	8010588 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8009524:	b2e1      	uxtb	r1, r4
 8009526:	2003      	movs	r0, #3
 8009528:	f007 f82e 	bl	8010588 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800952c:	0a39      	lsrs	r1, r7, #8
 800952e:	2025      	movs	r0, #37	; 0x25
 8009530:	f007 f82a 	bl	8010588 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8009534:	b2f9      	uxtb	r1, r7
 8009536:	2026      	movs	r0, #38	; 0x26
 8009538:	f007 f826 	bl	8010588 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800953c:	2030      	movs	r0, #48	; 0x30
 800953e:	f007 f82f 	bl	80105a0 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8009542:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8009546:	f1b8 0f00 	cmp.w	r8, #0
 800954a:	d011      	beq.n	8009570 <SX1276SetTxConfig+0xe0>
 800954c:	2300      	movs	r3, #0
 800954e:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8009550:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8009554:	b2c9      	uxtb	r1, r1
 8009556:	2030      	movs	r0, #48	; 0x30
 8009558:	f007 f816 	bl	8010588 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800955c:	2031      	movs	r0, #49	; 0x31
 800955e:	f007 f81f 	bl	80105a0 <SX1276Read>
 8009562:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8009566:	b2c9      	uxtb	r1, r1
 8009568:	2031      	movs	r0, #49	; 0x31
 800956a:	f007 f80d 	bl	8010588 <SX1276Write>
        break;
 800956e:	e7aa      	b.n	80094c6 <SX1276SetTxConfig+0x36>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8009570:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8009574:	e7eb      	b.n	800954e <SX1276SetTxConfig+0xbe>
            SX1276.Settings.LoRa.Power = power;
 8009576:	4b57      	ldr	r3, [pc, #348]	; (80096d4 <SX1276SetTxConfig+0x244>)
 8009578:	f883 511c 	strb.w	r5, [r3, #284]	; 0x11c
            if( bandwidth > 2 )
 800957c:	9b00      	ldr	r3, [sp, #0]
 800957e:	2b02      	cmp	r3, #2
 8009580:	d900      	bls.n	8009584 <SX1276SetTxConfig+0xf4>
                while( 1 );
 8009582:	e7fe      	b.n	8009582 <SX1276SetTxConfig+0xf2>
            bandwidth += 7;
 8009584:	9c00      	ldr	r4, [sp, #0]
 8009586:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8009588:	4b52      	ldr	r3, [pc, #328]	; (80096d4 <SX1276SetTxConfig+0x244>)
 800958a:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 800958e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009590:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8009594:	f883 9129 	strb.w	r9, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8009598:	f8a3 712a 	strh.w	r7, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 800959c:	f883 812c 	strb.w	r8, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80095a0:	f883 b12f 	strb.w	fp, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80095a4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80095a8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80095ac:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80095b0:	f883 a131 	strb.w	sl, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80095b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095b6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            if( datarate > 12 )
 80095ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095bc:	2b0c      	cmp	r3, #12
 80095be:	d804      	bhi.n	80095ca <SX1276SetTxConfig+0x13a>
            else if( datarate < 6 )
 80095c0:	2b05      	cmp	r3, #5
 80095c2:	d804      	bhi.n	80095ce <SX1276SetTxConfig+0x13e>
                datarate = 6;
 80095c4:	2306      	movs	r3, #6
 80095c6:	930c      	str	r3, [sp, #48]	; 0x30
 80095c8:	e001      	b.n	80095ce <SX1276SetTxConfig+0x13e>
                datarate = 12;
 80095ca:	230c      	movs	r3, #12
 80095cc:	930c      	str	r3, [sp, #48]	; 0x30
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80095ce:	2c07      	cmp	r4, #7
 80095d0:	d051      	beq.n	8009676 <SX1276SetTxConfig+0x1e6>
 80095d2:	2c08      	cmp	r4, #8
 80095d4:	d058      	beq.n	8009688 <SX1276SetTxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80095d6:	4b3f      	ldr	r3, [pc, #252]	; (80096d4 <SX1276SetTxConfig+0x244>)
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80095de:	f1bb 0f00 	cmp.w	fp, #0
 80095e2:	d155      	bne.n	8009690 <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80095e4:	201d      	movs	r0, #29
 80095e6:	f006 ffdb 	bl	80105a0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80095ea:	0123      	lsls	r3, r4, #4
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 80095f6:	ea43 0108 	orr.w	r1, r3, r8
 80095fa:	201d      	movs	r0, #29
 80095fc:	f006 ffc4 	bl	8010588 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8009600:	201e      	movs	r0, #30
 8009602:	f006 ffcd 	bl	80105a0 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 8009606:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800960a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8009610:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8009612:	00b3      	lsls	r3, r6, #2
 8009614:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8009616:	4319      	orrs	r1, r3
 8009618:	201e      	movs	r0, #30
 800961a:	f006 ffb5 	bl	8010588 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800961e:	2026      	movs	r0, #38	; 0x26
 8009620:	f006 ffbe 	bl	80105a0 <SX1276Read>
 8009624:	b241      	sxtb	r1, r0
 8009626:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800962a:	4b2a      	ldr	r3, [pc, #168]	; (80096d4 <SX1276SetTxConfig+0x244>)
 800962c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8009630:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8009634:	b2c9      	uxtb	r1, r1
 8009636:	2026      	movs	r0, #38	; 0x26
 8009638:	f006 ffa6 	bl	8010588 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800963c:	0a39      	lsrs	r1, r7, #8
 800963e:	2020      	movs	r0, #32
 8009640:	f006 ffa2 	bl	8010588 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8009644:	b2f9      	uxtb	r1, r7
 8009646:	2021      	movs	r0, #33	; 0x21
 8009648:	f006 ff9e 	bl	8010588 <SX1276Write>
            if( datarate == 6 )
 800964c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800964e:	2b06      	cmp	r3, #6
 8009650:	d02e      	beq.n	80096b0 <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8009652:	2031      	movs	r0, #49	; 0x31
 8009654:	f006 ffa4 	bl	80105a0 <SX1276Read>
 8009658:	b241      	sxtb	r1, r0
 800965a:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800965e:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8009662:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8009666:	2031      	movs	r0, #49	; 0x31
 8009668:	f006 ff8e 	bl	8010588 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800966c:	210a      	movs	r1, #10
 800966e:	2037      	movs	r0, #55	; 0x37
 8009670:	f006 ff8a 	bl	8010588 <SX1276Write>
}
 8009674:	e727      	b.n	80094c6 <SX1276SetTxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009678:	3b0b      	subs	r3, #11
 800967a:	2b01      	cmp	r3, #1
 800967c:	d8a9      	bhi.n	80095d2 <SX1276SetTxConfig+0x142>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800967e:	4b15      	ldr	r3, [pc, #84]	; (80096d4 <SX1276SetTxConfig+0x244>)
 8009680:	2201      	movs	r2, #1
 8009682:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8009686:	e7aa      	b.n	80095de <SX1276SetTxConfig+0x14e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8009688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800968a:	2b0c      	cmp	r3, #12
 800968c:	d1a3      	bne.n	80095d6 <SX1276SetTxConfig+0x146>
 800968e:	e7f6      	b.n	800967e <SX1276SetTxConfig+0x1ee>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8009690:	2044      	movs	r0, #68	; 0x44
 8009692:	f006 ff85 	bl	80105a0 <SX1276Read>
 8009696:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800969a:	b2c9      	uxtb	r1, r1
 800969c:	2044      	movs	r0, #68	; 0x44
 800969e:	f006 ff73 	bl	8010588 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80096a2:	4b0c      	ldr	r3, [pc, #48]	; (80096d4 <SX1276SetTxConfig+0x244>)
 80096a4:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 80096a8:	2024      	movs	r0, #36	; 0x24
 80096aa:	f006 ff6d 	bl	8010588 <SX1276Write>
 80096ae:	e799      	b.n	80095e4 <SX1276SetTxConfig+0x154>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80096b0:	2031      	movs	r0, #49	; 0x31
 80096b2:	f006 ff75 	bl	80105a0 <SX1276Read>
 80096b6:	b241      	sxtb	r1, r0
 80096b8:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80096bc:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80096c0:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80096c4:	2031      	movs	r0, #49	; 0x31
 80096c6:	f006 ff5f 	bl	8010588 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80096ca:	210c      	movs	r1, #12
 80096cc:	2037      	movs	r0, #55	; 0x37
 80096ce:	f006 ff5b 	bl	8010588 <SX1276Write>
 80096d2:	e6f8      	b.n	80094c6 <SX1276SetTxConfig+0x36>
 80096d4:	200012c4 	.word	0x200012c4
 80096d8:	01e84800 	.word	0x01e84800

080096dc <SX1276SetTxContinuousWave>:
{
 80096dc:	b530      	push	{r4, r5, lr}
 80096de:	b08b      	sub	sp, #44	; 0x2c
 80096e0:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80096e2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80096e6:	fb02 f404 	mul.w	r4, r2, r4
    SX1276SetChannel( freq );
 80096ea:	f7fe ff1b 	bl	8008524 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80096ee:	9408      	str	r4, [sp, #32]
 80096f0:	2000      	movs	r0, #0
 80096f2:	9007      	str	r0, [sp, #28]
 80096f4:	9006      	str	r0, [sp, #24]
 80096f6:	9005      	str	r0, [sp, #20]
 80096f8:	9004      	str	r0, [sp, #16]
 80096fa:	9003      	str	r0, [sp, #12]
 80096fc:	2305      	movs	r3, #5
 80096fe:	9302      	str	r3, [sp, #8]
 8009700:	9001      	str	r0, [sp, #4]
 8009702:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	4603      	mov	r3, r0
 800970a:	4602      	mov	r2, r0
 800970c:	4629      	mov	r1, r5
 800970e:	f7ff febf 	bl	8009490 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8009712:	2031      	movs	r0, #49	; 0x31
 8009714:	f006 ff44 	bl	80105a0 <SX1276Read>
 8009718:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 800971c:	2031      	movs	r0, #49	; 0x31
 800971e:	f006 ff33 	bl	8010588 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8009722:	21f0      	movs	r1, #240	; 0xf0
 8009724:	2040      	movs	r0, #64	; 0x40
 8009726:	f006 ff2f 	bl	8010588 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800972a:	21a0      	movs	r1, #160	; 0xa0
 800972c:	2041      	movs	r0, #65	; 0x41
 800972e:	f006 ff2b 	bl	8010588 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8009732:	4d08      	ldr	r5, [pc, #32]	; (8009754 <SX1276SetTxContinuousWave+0x78>)
 8009734:	4621      	mov	r1, r4
 8009736:	4628      	mov	r0, r5
 8009738:	f006 fe4e 	bl	80103d8 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 800973c:	4b06      	ldr	r3, [pc, #24]	; (8009758 <SX1276SetTxContinuousWave+0x7c>)
 800973e:	2202      	movs	r2, #2
 8009740:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8009744:	4628      	mov	r0, r5
 8009746:	f7fe fdcd 	bl	80082e4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800974a:	2003      	movs	r0, #3
 800974c:	f006 ff34 	bl	80105b8 <SX1276SetOpMode>
}
 8009750:	b00b      	add	sp, #44	; 0x2c
 8009752:	bd30      	pop	{r4, r5, pc}
 8009754:	20001408 	.word	0x20001408
 8009758:	200012c4 	.word	0x200012c4

0800975c <SX1276SetMaxPayloadLength>:
{
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4604      	mov	r4, r0
 8009760:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 8009762:	f7ff fca5 	bl	80090b0 <SX1276SetModem>
    switch( modem )
 8009766:	b114      	cbz	r4, 800976e <SX1276SetMaxPayloadLength+0x12>
 8009768:	2c01      	cmp	r4, #1
 800976a:	d00a      	beq.n	8009782 <SX1276SetMaxPayloadLength+0x26>
}
 800976c:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800976e:	4b07      	ldr	r3, [pc, #28]	; (800978c <SX1276SetMaxPayloadLength+0x30>)
 8009770:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1f9      	bne.n	800976c <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8009778:	4629      	mov	r1, r5
 800977a:	2032      	movs	r0, #50	; 0x32
 800977c:	f006 ff04 	bl	8010588 <SX1276Write>
 8009780:	e7f4      	b.n	800976c <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8009782:	4629      	mov	r1, r5
 8009784:	2023      	movs	r0, #35	; 0x23
 8009786:	f006 feff 	bl	8010588 <SX1276Write>
}
 800978a:	e7ef      	b.n	800976c <SX1276SetMaxPayloadLength+0x10>
 800978c:	200012c4 	.word	0x200012c4

08009790 <SX1276SetPublicNetwork>:
{
 8009790:	b510      	push	{r4, lr}
 8009792:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 8009794:	2001      	movs	r0, #1
 8009796:	f7ff fc8b 	bl	80090b0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800979a:	4b07      	ldr	r3, [pc, #28]	; (80097b8 <SX1276SetPublicNetwork+0x28>)
 800979c:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 80097a0:	b124      	cbz	r4, 80097ac <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80097a2:	2134      	movs	r1, #52	; 0x34
 80097a4:	2039      	movs	r0, #57	; 0x39
 80097a6:	f006 feef 	bl	8010588 <SX1276Write>
}
 80097aa:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80097ac:	2112      	movs	r1, #18
 80097ae:	2039      	movs	r0, #57	; 0x39
 80097b0:	f006 feea 	bl	8010588 <SX1276Write>
}
 80097b4:	e7f9      	b.n	80097aa <SX1276SetPublicNetwork+0x1a>
 80097b6:	bf00      	nop
 80097b8:	200012c4 	.word	0x200012c4

080097bc <SX1276OnTimeoutIrq>:
{
 80097bc:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 80097be:	4b33      	ldr	r3, [pc, #204]	; (800988c <SX1276OnTimeoutIrq+0xd0>)
 80097c0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d002      	beq.n	80097ce <SX1276OnTimeoutIrq+0x12>
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d033      	beq.n	8009834 <SX1276OnTimeoutIrq+0x78>
}
 80097cc:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 80097ce:	4b2f      	ldr	r3, [pc, #188]	; (800988c <SX1276OnTimeoutIrq+0xd0>)
 80097d0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80097d4:	b143      	cbz	r3, 80097e8 <SX1276OnTimeoutIrq+0x2c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80097d6:	4b2e      	ldr	r3, [pc, #184]	; (8009890 <SX1276OnTimeoutIrq+0xd4>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0f6      	beq.n	80097cc <SX1276OnTimeoutIrq+0x10>
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0f3      	beq.n	80097cc <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
 80097e4:	4798      	blx	r3
 80097e6:	e7f1      	b.n	80097cc <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80097e8:	4c28      	ldr	r4, [pc, #160]	; (800988c <SX1276OnTimeoutIrq+0xd0>)
 80097ea:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80097ee:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80097f2:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 80097f6:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80097fa:	210b      	movs	r1, #11
 80097fc:	203e      	movs	r0, #62	; 0x3e
 80097fe:	f006 fec3 	bl	8010588 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8009802:	2110      	movs	r1, #16
 8009804:	203f      	movs	r0, #63	; 0x3f
 8009806:	f006 febf 	bl	8010588 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800980a:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 800980e:	b14b      	cbz	r3, 8009824 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8009810:	200d      	movs	r0, #13
 8009812:	f006 fec5 	bl	80105a0 <SX1276Read>
 8009816:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800981a:	b2c9      	uxtb	r1, r1
 800981c:	200d      	movs	r0, #13
 800981e:	f006 feb3 	bl	8010588 <SX1276Write>
 8009822:	e7d8      	b.n	80097d6 <SX1276OnTimeoutIrq+0x1a>
                SX1276.Settings.State = RF_IDLE;
 8009824:	4b19      	ldr	r3, [pc, #100]	; (800988c <SX1276OnTimeoutIrq+0xd0>)
 8009826:	2200      	movs	r2, #0
 8009828:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 800982c:	4819      	ldr	r0, [pc, #100]	; (8009894 <SX1276OnTimeoutIrq+0xd8>)
 800982e:	f7fe fdd3 	bl	80083d8 <TimerStop>
 8009832:	e7d0      	b.n	80097d6 <SX1276OnTimeoutIrq+0x1a>
        SX1276Reset( );
 8009834:	f7fe f9cc 	bl	8007bd0 <SX1276Reset>
        RxChainCalibration( );
 8009838:	f7ff f960 	bl	8008afc <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800983c:	2000      	movs	r0, #0
 800983e:	f006 febb 	bl	80105b8 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8009842:	2400      	movs	r4, #0
 8009844:	e00c      	b.n	8009860 <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8009846:	4a14      	ldr	r2, [pc, #80]	; (8009898 <SX1276OnTimeoutIrq+0xdc>)
 8009848:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800984c:	18d5      	adds	r5, r2, r3
 800984e:	5cd0      	ldrb	r0, [r2, r3]
 8009850:	f7ff fc2e 	bl	80090b0 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8009854:	78a9      	ldrb	r1, [r5, #2]
 8009856:	7868      	ldrb	r0, [r5, #1]
 8009858:	f006 fe96 	bl	8010588 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800985c:	3401      	adds	r4, #1
 800985e:	b2e4      	uxtb	r4, r4
 8009860:	2c0f      	cmp	r4, #15
 8009862:	d9f0      	bls.n	8009846 <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 8009864:	2000      	movs	r0, #0
 8009866:	f7ff fc23 	bl	80090b0 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800986a:	4c08      	ldr	r4, [pc, #32]	; (800988c <SX1276OnTimeoutIrq+0xd0>)
 800986c:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 8009870:	f7ff ff8e 	bl	8009790 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8009874:	2300      	movs	r3, #0
 8009876:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800987a:	4b05      	ldr	r3, [pc, #20]	; (8009890 <SX1276OnTimeoutIrq+0xd4>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0a4      	beq.n	80097cc <SX1276OnTimeoutIrq+0x10>
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d0a1      	beq.n	80097cc <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
 8009888:	4798      	blx	r3
}
 800988a:	e79f      	b.n	80097cc <SX1276OnTimeoutIrq+0x10>
 800988c:	200012c4 	.word	0x200012c4
 8009890:	20001190 	.word	0x20001190
 8009894:	20001194 	.word	0x20001194
 8009898:	08013518 	.word	0x08013518

0800989c <uart_stm32_async_rx_buf_rsp>:
	LOG_DBG("tx: async timeout");
}

static int uart_stm32_async_rx_buf_rsp(const struct device *dev, uint8_t *buf,
				       size_t len)
{
 800989c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800989e:	b08b      	sub	sp, #44	; 0x2c
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	460d      	mov	r5, r1
 80098a4:	4614      	mov	r4, r2
	struct uart_stm32_data *data = dev->data;
 80098a6:	6906      	ldr	r6, [r0, #16]

	LOG_DBG("replace buffer (%d)", len);
 80098a8:	2301      	movs	r3, #1
 80098aa:	813b      	strh	r3, [r7, #8]
 80098ac:	2302      	movs	r3, #2
 80098ae:	817b      	strh	r3, [r7, #10]
 80098b0:	b088      	sub	sp, #32
 80098b2:	466b      	mov	r3, sp
 80098b4:	f113 020c 	adds.w	r2, r3, #12
 80098b8:	d03c      	beq.n	8009934 <uart_stm32_async_rx_buf_rsp+0x98>
 80098ba:	2010      	movs	r0, #16
 80098bc:	2101      	movs	r1, #1
 80098be:	8139      	strh	r1, [r7, #8]
 80098c0:	b11a      	cbz	r2, 80098ca <uart_stm32_async_rx_buf_rsp+0x2e>
 80098c2:	2804      	cmp	r0, #4
 80098c4:	dd01      	ble.n	80098ca <uart_stm32_async_rx_buf_rsp+0x2e>
 80098c6:	491e      	ldr	r1, [pc, #120]	; (8009940 <uart_stm32_async_rx_buf_rsp+0xa4>)
 80098c8:	6119      	str	r1, [r3, #16]
 80098ca:	2102      	movs	r1, #2
 80098cc:	8179      	strh	r1, [r7, #10]
 80098ce:	b11a      	cbz	r2, 80098d8 <uart_stm32_async_rx_buf_rsp+0x3c>
 80098d0:	2808      	cmp	r0, #8
 80098d2:	dd01      	ble.n	80098d8 <uart_stm32_async_rx_buf_rsp+0x3c>
 80098d4:	491b      	ldr	r1, [pc, #108]	; (8009944 <uart_stm32_async_rx_buf_rsp+0xa8>)
 80098d6:	6159      	str	r1, [r3, #20]
 80098d8:	b112      	cbz	r2, 80098e0 <uart_stm32_async_rx_buf_rsp+0x44>
 80098da:	280c      	cmp	r0, #12
 80098dc:	dd00      	ble.n	80098e0 <uart_stm32_async_rx_buf_rsp+0x44>
 80098de:	619c      	str	r4, [r3, #24]
 80098e0:	280f      	cmp	r0, #15
 80098e2:	dd2a      	ble.n	800993a <uart_stm32_async_rx_buf_rsp+0x9e>
 80098e4:	2010      	movs	r0, #16
 80098e6:	b12a      	cbz	r2, 80098f4 <uart_stm32_async_rx_buf_rsp+0x58>
 80098e8:	2100      	movs	r1, #0
 80098ea:	6079      	str	r1, [r7, #4]
 80098ec:	2104      	movs	r1, #4
 80098ee:	7139      	strb	r1, [r7, #4]
 80098f0:	6879      	ldr	r1, [r7, #4]
 80098f2:	60d9      	str	r1, [r3, #12]
 80098f4:	2100      	movs	r1, #0
 80098f6:	f36f 0100 	bfc	r1, #0, #1
 80098fa:	f36f 0141 	bfc	r1, #1, #1
 80098fe:	f36f 0182 	bfc	r1, #2, #1
 8009902:	f36f 01c5 	bfc	r1, #3, #3
 8009906:	2304      	movs	r3, #4
 8009908:	f363 1188 	bfi	r1, r3, #6, #3
 800990c:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8009910:	f363 2152 	bfi	r1, r3, #9, #10
 8009914:	f36f 41de 	bfc	r1, #19, #12
 8009918:	f36f 71df 	bfc	r1, #31, #1
 800991c:	2300      	movs	r3, #0
 800991e:	480a      	ldr	r0, [pc, #40]	; (8009948 <uart_stm32_async_rx_buf_rsp+0xac>)
 8009920:	f005 fd1c 	bl	800f35c <z_impl_z_log_msg2_static_create>
	data->rx_next_buffer = buf;
 8009924:	f8c6 5148 	str.w	r5, [r6, #328]	; 0x148
	data->rx_next_buffer_len = len;
 8009928:	f8c6 414c 	str.w	r4, [r6, #332]	; 0x14c

	return 0;
}
 800992c:	2000      	movs	r0, #0
 800992e:	372c      	adds	r7, #44	; 0x2c
 8009930:	46bd      	mov	sp, r7
 8009932:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_DBG("replace buffer (%d)", len);
 8009934:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8009938:	e7c0      	b.n	80098bc <uart_stm32_async_rx_buf_rsp+0x20>
 800993a:	f06f 001b 	mvn.w	r0, #27
 800993e:	e7d2      	b.n	80098e6 <uart_stm32_async_rx_buf_rsp+0x4a>
 8009940:	08013548 	.word	0x08013548
 8009944:	08013840 	.word	0x08013840
 8009948:	0801204c 	.word	0x0801204c

0800994c <uart_stm32_configure>:
{
 800994c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009950:	b090      	sub	sp, #64	; 0x40
 8009952:	460c      	mov	r4, r1
	struct uart_stm32_data *data = dev->data;
 8009954:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009956:	6843      	ldr	r3, [r0, #4]
 8009958:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800995a:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 800995c:	2a01      	cmp	r2, #1
 800995e:	d015      	beq.n	800998c <uart_stm32_configure+0x40>
 8009960:	2a02      	cmp	r2, #2
 8009962:	d116      	bne.n	8009992 <uart_stm32_configure+0x46>
		return LL_USART_PARITY_EVEN;
 8009964:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8009968:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 800996a:	2b01      	cmp	r3, #1
 800996c:	d017      	beq.n	800999e <uart_stm32_configure+0x52>
 800996e:	2b02      	cmp	r3, #2
 8009970:	d018      	beq.n	80099a4 <uart_stm32_configure+0x58>
 8009972:	b18b      	cbz	r3, 8009998 <uart_stm32_configure+0x4c>
		return LL_USART_STOPBITS_2;
 8009974:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8009978:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 800997a:	2902      	cmp	r1, #2
 800997c:	d015      	beq.n	80099aa <uart_stm32_configure+0x5e>
 800997e:	2904      	cmp	r1, #4
 8009980:	d019      	beq.n	80099b6 <uart_stm32_configure+0x6a>
		if (p == UART_CFG_PARITY_NONE) {
 8009982:	2a00      	cmp	r2, #0
 8009984:	f040 8097 	bne.w	8009ab6 <uart_stm32_configure+0x16a>
			return LL_USART_DATAWIDTH_8B;
 8009988:	2700      	movs	r7, #0
 800998a:	e016      	b.n	80099ba <uart_stm32_configure+0x6e>
	switch (parity) {
 800998c:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 8009990:	e7ea      	b.n	8009968 <uart_stm32_configure+0x1c>
		return LL_USART_PARITY_NONE;
 8009992:	f04f 0e00 	mov.w	lr, #0
 8009996:	e7e7      	b.n	8009968 <uart_stm32_configure+0x1c>
	switch (sb) {
 8009998:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 800999c:	e7ec      	b.n	8009978 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1;
 800999e:	f04f 0c00 	mov.w	ip, #0
 80099a2:	e7e9      	b.n	8009978 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1_5;
 80099a4:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 80099a8:	e7e6      	b.n	8009978 <uart_stm32_configure+0x2c>
		if (p == UART_CFG_PARITY_NONE) {
 80099aa:	b10a      	cbz	r2, 80099b0 <uart_stm32_configure+0x64>
			return LL_USART_DATAWIDTH_8B;
 80099ac:	2700      	movs	r7, #0
 80099ae:	e004      	b.n	80099ba <uart_stm32_configure+0x6e>
			return LL_USART_DATAWIDTH_7B;
 80099b0:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 80099b4:	e001      	b.n	80099ba <uart_stm32_configure+0x6e>
	switch (db) {
 80099b6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 80099ba:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 80099be:	f1ba 0f01 	cmp.w	sl, #1
 80099c2:	d07b      	beq.n	8009abc <uart_stm32_configure+0x170>
	return LL_USART_HWCONTROL_NONE;
 80099c4:	f04f 0800 	mov.w	r8, #0
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80099c8:	f1a2 0903 	sub.w	r9, r2, #3
 80099cc:	fa5f f989 	uxtb.w	r9, r9
 80099d0:	f1b9 0f01 	cmp.w	r9, #1
 80099d4:	f240 80c1 	bls.w	8009b5a <uart_stm32_configure+0x20e>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 80099d8:	b112      	cbz	r2, 80099e0 <uart_stm32_configure+0x94>
 80099da:	2904      	cmp	r1, #4
 80099dc:	f000 80c0 	beq.w	8009b60 <uart_stm32_configure+0x214>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 80c0 	beq.w	8009b66 <uart_stm32_configure+0x21a>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	f000 80c0 	beq.w	8009b6c <uart_stm32_configure+0x220>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 80099ec:	2901      	cmp	r1, #1
 80099ee:	f240 80c0 	bls.w	8009b72 <uart_stm32_configure+0x226>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 80099f2:	2904      	cmp	r1, #4
 80099f4:	f000 80c0 	beq.w	8009b78 <uart_stm32_configure+0x22c>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 80099f8:	f1ba 0f00 	cmp.w	sl, #0
 80099fc:	d017      	beq.n	8009a2e <uart_stm32_configure+0xe2>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 80099fe:	4b63      	ldr	r3, [pc, #396]	; (8009b8c <uart_stm32_configure+0x240>)
 8009a00:	429d      	cmp	r5, r3
 8009a02:	d010      	beq.n	8009a26 <uart_stm32_configure+0xda>
 8009a04:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8009a08:	429d      	cmp	r5, r3
 8009a0a:	d00c      	beq.n	8009a26 <uart_stm32_configure+0xda>
 8009a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a10:	429d      	cmp	r5, r3
 8009a12:	d008      	beq.n	8009a26 <uart_stm32_configure+0xda>
 8009a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a18:	429d      	cmp	r5, r3
 8009a1a:	d004      	beq.n	8009a26 <uart_stm32_configure+0xda>
 8009a1c:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8009a20:	429d      	cmp	r5, r3
 8009a22:	f040 80ac 	bne.w	8009b7e <uart_stm32_configure+0x232>
 8009a26:	f1ba 0f01 	cmp.w	sl, #1
 8009a2a:	f040 80ab 	bne.w	8009b84 <uart_stm32_configure+0x238>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8009a2e:	682b      	ldr	r3, [r5, #0]
 8009a30:	f023 0301 	bic.w	r3, r3, #1
 8009a34:	602b      	str	r3, [r5, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009a36:	6843      	ldr	r3, [r0, #4]
 8009a38:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8009a3a:	6813      	ldr	r3, [r2, #0]
 8009a3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8009a40:	459e      	cmp	lr, r3
 8009a42:	d005      	beq.n	8009a50 <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8009a44:	6813      	ldr	r3, [r2, #0]
 8009a46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009a4a:	ea4e 0303 	orr.w	r3, lr, r3
 8009a4e:	6013      	str	r3, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009a50:	6843      	ldr	r3, [r0, #4]
 8009a52:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8009a54:	6853      	ldr	r3, [r2, #4]
 8009a56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8009a5a:	459c      	cmp	ip, r3
 8009a5c:	d005      	beq.n	8009a6a <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009a5e:	6853      	ldr	r3, [r2, #4]
 8009a60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009a64:	ea4c 0303 	orr.w	r3, ip, r3
 8009a68:	6053      	str	r3, [r2, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009a6a:	6843      	ldr	r3, [r0, #4]
 8009a6c:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8009a6e:	6813      	ldr	r3, [r2, #0]
 8009a70:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8009a74:	429f      	cmp	r7, r3
 8009a76:	d004      	beq.n	8009a82 <uart_stm32_configure+0x136>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8009a78:	6813      	ldr	r3, [r2, #0]
 8009a7a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8009a7e:	431f      	orrs	r7, r3
 8009a80:	6017      	str	r7, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009a82:	6843      	ldr	r3, [r0, #4]
 8009a84:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8009a86:	6893      	ldr	r3, [r2, #8]
 8009a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8009a8c:	4598      	cmp	r8, r3
 8009a8e:	d005      	beq.n	8009a9c <uart_stm32_configure+0x150>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009a90:	6893      	ldr	r3, [r2, #8]
 8009a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a96:	ea48 0303 	orr.w	r3, r8, r3
 8009a9a:	6093      	str	r3, [r2, #8]
	if (cfg->baudrate != data->baud_rate) {
 8009a9c:	f8d4 8000 	ldr.w	r8, [r4]
 8009aa0:	6833      	ldr	r3, [r6, #0]
 8009aa2:	4598      	cmp	r8, r3
 8009aa4:	d10d      	bne.n	8009ac2 <uart_stm32_configure+0x176>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8009aa6:	682b      	ldr	r3, [r5, #0]
 8009aa8:	f043 0301 	orr.w	r3, r3, #1
 8009aac:	602b      	str	r3, [r5, #0]
	return 0;
 8009aae:	2000      	movs	r0, #0
};
 8009ab0:	b010      	add	sp, #64	; 0x40
 8009ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return LL_USART_DATAWIDTH_9B;
 8009ab6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8009aba:	e77e      	b.n	80099ba <uart_stm32_configure+0x6e>
		return LL_USART_HWCONTROL_RTS_CTS;
 8009abc:	f44f 7840 	mov.w	r8, #768	; 0x300
 8009ac0:	e782      	b.n	80099c8 <uart_stm32_configure+0x7c>
	struct uart_stm32_data *data = dev->data;
 8009ac2:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009ac4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8009ac8:	f859 7b0c 	ldr.w	r7, [r9], #12
	if (clock_control_get_rate(data->clock,
 8009acc:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009ad0:	4650      	mov	r0, sl
 8009ad2:	f006 ff97 	bl	8010a04 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8009ad6:	b1b8      	cbz	r0, 8009b08 <uart_stm32_configure+0x1bc>
	const struct clock_control_driver_api *api =
 8009ad8:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	b1b3      	cbz	r3, 8009b0e <uart_stm32_configure+0x1c2>
	return api->get_rate(dev, sys, rate);
 8009ae0:	466a      	mov	r2, sp
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	4650      	mov	r0, sl
 8009ae6:	4798      	blx	r3
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	db13      	blt.n	8009b14 <uart_stm32_configure+0x1c8>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009af2:	603b      	str	r3, [r7, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009af4:	9b00      	ldr	r3, [sp, #0]
 8009af6:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 8009afa:	fbb3 f3f8 	udiv	r3, r3, r8
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	60fb      	str	r3, [r7, #12]
		data->baud_rate = cfg->baudrate;
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	6033      	str	r3, [r6, #0]
 8009b06:	e7ce      	b.n	8009aa6 <uart_stm32_configure+0x15a>
		return -ENODEV;
 8009b08:	f06f 0012 	mvn.w	r0, #18
 8009b0c:	e7ec      	b.n	8009ae8 <uart_stm32_configure+0x19c>
		return -ENOSYS;
 8009b0e:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8009b12:	e7e9      	b.n	8009ae8 <uart_stm32_configure+0x19c>
		LOG_ERR("Failed call clock_control_get_rate");
 8009b14:	2201      	movs	r2, #1
 8009b16:	f8ad 2008 	strh.w	r2, [sp, #8]
 8009b1a:	4b1d      	ldr	r3, [pc, #116]	; (8009b90 <uart_stm32_configure+0x244>)
 8009b1c:	930e      	str	r3, [sp, #56]	; 0x38
 8009b1e:	2300      	movs	r3, #0
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	2102      	movs	r1, #2
 8009b24:	f88d 1004 	strb.w	r1, [sp, #4]
 8009b28:	9901      	ldr	r1, [sp, #4]
 8009b2a:	910d      	str	r1, [sp, #52]	; 0x34
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	f363 0100 	bfi	r1, r3, #0, #1
 8009b32:	f363 0141 	bfi	r1, r3, #1, #1
 8009b36:	f363 0182 	bfi	r1, r3, #2, #1
 8009b3a:	f363 01c5 	bfi	r1, r3, #3, #3
 8009b3e:	f362 1188 	bfi	r1, r2, #6, #3
 8009b42:	2208      	movs	r2, #8
 8009b44:	f362 2152 	bfi	r1, r2, #9, #10
 8009b48:	f363 41de 	bfi	r1, r3, #19, #12
 8009b4c:	f363 71df 	bfi	r1, r3, #31, #1
 8009b50:	aa0d      	add	r2, sp, #52	; 0x34
 8009b52:	4810      	ldr	r0, [pc, #64]	; (8009b94 <uart_stm32_configure+0x248>)
 8009b54:	f005 fc02 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return;
 8009b58:	e7d3      	b.n	8009b02 <uart_stm32_configure+0x1b6>
		return -ENOTSUP;
 8009b5a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009b5e:	e7a7      	b.n	8009ab0 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8009b60:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009b64:	e7a4      	b.n	8009ab0 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8009b66:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009b6a:	e7a1      	b.n	8009ab0 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8009b6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009b70:	e79e      	b.n	8009ab0 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8009b72:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009b76:	e79b      	b.n	8009ab0 <uart_stm32_configure+0x164>
 8009b78:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009b7c:	e798      	b.n	8009ab0 <uart_stm32_configure+0x164>
			return -ENOTSUP;
 8009b7e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009b82:	e795      	b.n	8009ab0 <uart_stm32_configure+0x164>
 8009b84:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009b88:	e792      	b.n	8009ab0 <uart_stm32_configure+0x164>
 8009b8a:	bf00      	nop
 8009b8c:	40013800 	.word	0x40013800
 8009b90:	08012ff4 	.word	0x08012ff4
 8009b94:	0801204c 	.word	0x0801204c

08009b98 <uart_stm32_async_init>:

static int uart_stm32_async_init(const struct device *dev)
{
 8009b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9c:	4605      	mov	r5, r0
	struct uart_stm32_data *data = dev->data;
 8009b9e:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009ba0:	6843      	ldr	r3, [r0, #4]
 8009ba2:	681e      	ldr	r6, [r3, #0]

	data->uart_dev = dev;
 8009ba4:	60a0      	str	r0, [r4, #8]

	if (data->dma_rx.dma_dev != NULL) {
 8009ba6:	69a0      	ldr	r0, [r4, #24]
 8009ba8:	b120      	cbz	r0, 8009bb4 <uart_stm32_async_init+0x1c>
 8009baa:	f006 ff2b 	bl	8010a04 <z_device_is_ready>
		if (!device_is_ready(data->dma_rx.dma_dev)) {
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	f000 80a3 	beq.w	8009cfa <uart_stm32_async_init+0x162>
			return -ENODEV;
		}
	}

	if (data->dma_tx.dma_dev != NULL) {
 8009bb4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009bb8:	b12b      	cbz	r3, 8009bc6 <uart_stm32_async_init+0x2e>
		if (!device_is_ready(data->dma_rx.dma_dev)) {
 8009bba:	69a0      	ldr	r0, [r4, #24]
 8009bbc:	f006 ff22 	bl	8010a04 <z_device_is_ready>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	f000 809d 	beq.w	8009d00 <uart_stm32_async_init+0x168>
	struct uart_stm32_data *data = dev->data;
 8009bc6:	692b      	ldr	r3, [r5, #16]
	data->dma_rx.enabled = false;
 8009bc8:	2700      	movs	r7, #0
 8009bca:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009bce:	686b      	ldr	r3, [r5, #4]
 8009bd0:	681a      	ldr	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_TX(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 8009bd2:	6893      	ldr	r3, [r2, #8]
 8009bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bd8:	6093      	str	r3, [r2, #8]

	/* Disable both TX and RX DMA requests */
	uart_stm32_dma_rx_disable(dev);
	uart_stm32_dma_tx_disable(dev);

	k_work_init_delayable(&data->dma_rx.timeout_work,
 8009bda:	494b      	ldr	r1, [pc, #300]	; (8009d08 <uart_stm32_async_init+0x170>)
 8009bdc:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8009be0:	f007 f865 	bl	8010cae <k_work_init_delayable>
			    uart_stm32_async_rx_timeout);
	k_work_init_delayable(&data->dma_tx.timeout_work,
 8009be4:	4949      	ldr	r1, [pc, #292]	; (8009d0c <uart_stm32_async_init+0x174>)
 8009be6:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8009bea:	f007 f860 	bl	8010cae <k_work_init_delayable>
			    uart_stm32_async_tx_timeout);

	/* Configure dma rx config */
	memset(&data->dma_rx.blk_cfg, 0, sizeof(data->dma_rx.blk_cfg));
 8009bee:	f104 0844 	add.w	r8, r4, #68	; 0x44
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	4639      	mov	r1, r7
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	f007 fb5f 	bl	80112ba <memset>
    data_reg_addr = (uint32_t) &(USARTx->TDR);
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8009bfc:	f106 0324 	add.w	r3, r6, #36	; 0x24
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X)
	data->dma_rx.blk_cfg.source_address =
				LL_USART_DMA_GetRegAddr(UartInstance);
#else
	data->dma_rx.blk_cfg.source_address =
 8009c00:	6463      	str	r3, [r4, #68]	; 0x44
				LL_USART_DMA_GetRegAddr(UartInstance,
						LL_USART_DMA_REG_DATA_RECEIVE);
#endif

	data->dma_rx.blk_cfg.dest_address = 0; /* dest not ready */
 8009c02:	64a7      	str	r7, [r4, #72]	; 0x48

	if (data->dma_rx.src_addr_increment) {
 8009c04:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d056      	beq.n	8009cba <uart_stm32_async_init+0x122>
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8009c0c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009c10:	f36f 0383 	bfc	r3, #2, #2
 8009c14:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	} else {
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	if (data->dma_rx.dst_addr_increment) {
 8009c18:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d054      	beq.n	8009cca <uart_stm32_async_init+0x132>
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8009c20:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009c24:	f36f 1305 	bfc	r3, #4, #2
 8009c28:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	} else {
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	/* RX disable circular buffer */
	data->dma_rx.blk_cfg.source_reload_en  = 0;
 8009c2c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009c30:	f36f 1386 	bfc	r3, #6, #1
 8009c34:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	data->dma_rx.blk_cfg.dest_reload_en = 0;
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	f36f 13c7 	bfc	r3, #7, #1
 8009c3e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	data->dma_rx.blk_cfg.fifo_mode_control = data->dma_rx.fifo_threshold;
 8009c42:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009c44:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8009c48:	f362 0303 	bfi	r3, r2, #0, #4
 8009c4c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

	data->dma_rx.dma_cfg.head_block = &data->dma_rx.blk_cfg;
 8009c50:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	data->dma_rx.dma_cfg.user_data = (void *)dev;
 8009c54:	6365      	str	r5, [r4, #52]	; 0x34
	data->rx_next_buffer = NULL;
 8009c56:	2700      	movs	r7, #0
 8009c58:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
	data->rx_next_buffer_len = 0;
 8009c5c:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c

	/* Configure dma tx config */
	memset(&data->dma_tx.blk_cfg, 0, sizeof(data->dma_tx.blk_cfg));
 8009c60:	f104 08dc 	add.w	r8, r4, #220	; 0xdc
 8009c64:	2220      	movs	r2, #32
 8009c66:	4639      	mov	r1, r7
 8009c68:	4640      	mov	r0, r8
 8009c6a:	f007 fb26 	bl	80112ba <memset>
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8009c6e:	3628      	adds	r6, #40	; 0x28
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X)
	data->dma_tx.blk_cfg.dest_address =
			LL_USART_DMA_GetRegAddr(UartInstance);
#else
	data->dma_tx.blk_cfg.dest_address =
 8009c70:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
			LL_USART_DMA_GetRegAddr(UartInstance,
					LL_USART_DMA_REG_DATA_TRANSMIT);
#endif

	data->dma_tx.blk_cfg.source_address = 0; /* not ready */
 8009c74:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc

	if (data->dma_tx.src_addr_increment) {
 8009c78:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
 8009c7c:	b36b      	cbz	r3, 8009cda <uart_stm32_async_init+0x142>
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8009c7e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 8009c82:	f36f 0383 	bfc	r3, #2, #2
 8009c86:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	} else {
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	if (data->dma_tx.dst_addr_increment) {
 8009c8a:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
 8009c8e:	b363      	cbz	r3, 8009cea <uart_stm32_async_init+0x152>
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8009c90:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 8009c94:	f36f 1305 	bfc	r3, #4, #2
 8009c98:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	} else {
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
	}

	data->dma_tx.blk_cfg.fifo_mode_control = data->dma_tx.fifo_threshold;
 8009c9c:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 8009ca0:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
 8009ca4:	f362 0303 	bfi	r3, r2, #0, #4
 8009ca8:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9

	data->dma_tx.dma_cfg.head_block = &data->dma_tx.blk_cfg;
 8009cac:	f8c4 80c8 	str.w	r8, [r4, #200]	; 0xc8
	data->dma_tx.dma_cfg.user_data = (void *)dev;
 8009cb0:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc

	return 0;
 8009cb4:	2000      	movs	r0, #0
}
 8009cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8009cba:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	f362 0383 	bfi	r3, r2, #2, #2
 8009cc4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8009cc8:	e7a6      	b.n	8009c18 <uart_stm32_async_init+0x80>
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8009cca:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f362 1305 	bfi	r3, r2, #4, #2
 8009cd4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8009cd8:	e7a8      	b.n	8009c2c <uart_stm32_async_init+0x94>
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8009cda:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f362 0383 	bfi	r3, r2, #2, #2
 8009ce4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8009ce8:	e7cf      	b.n	8009c8a <uart_stm32_async_init+0xf2>
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8009cea:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 8009cee:	2202      	movs	r2, #2
 8009cf0:	f362 1305 	bfi	r3, r2, #4, #2
 8009cf4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8009cf8:	e7d0      	b.n	8009c9c <uart_stm32_async_init+0x104>
			return -ENODEV;
 8009cfa:	f06f 0012 	mvn.w	r0, #18
 8009cfe:	e7da      	b.n	8009cb6 <uart_stm32_async_init+0x11e>
			return -ENODEV;
 8009d00:	f06f 0012 	mvn.w	r0, #18
 8009d04:	e7d7      	b.n	8009cb6 <uart_stm32_async_init+0x11e>
 8009d06:	bf00      	nop
 8009d08:	0800a3a9 	.word	0x0800a3a9
 8009d0c:	08009f55 	.word	0x08009f55

08009d10 <uart_stm32_dma_replace_buffer>:
{
 8009d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d14:	b08c      	sub	sp, #48	; 0x30
 8009d16:	af02      	add	r7, sp, #8
 8009d18:	4605      	mov	r5, r0
	struct uart_stm32_data *data = dev->data;
 8009d1a:	6904      	ldr	r4, [r0, #16]
	LOG_DBG("Replacing RX buffer: %d", data->rx_next_buffer_len);
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	813b      	strh	r3, [r7, #8]
 8009d20:	2302      	movs	r3, #2
 8009d22:	817b      	strh	r3, [r7, #10]
 8009d24:	466e      	mov	r6, sp
 8009d26:	b088      	sub	sp, #32
 8009d28:	a902      	add	r1, sp, #8
 8009d2a:	466b      	mov	r3, sp
 8009d2c:	f113 0214 	adds.w	r2, r3, #20
 8009d30:	d06e      	beq.n	8009e10 <uart_stm32_dma_replace_buffer+0x100>
 8009d32:	2310      	movs	r3, #16
 8009d34:	2001      	movs	r0, #1
 8009d36:	8138      	strh	r0, [r7, #8]
 8009d38:	b11a      	cbz	r2, 8009d42 <uart_stm32_dma_replace_buffer+0x32>
 8009d3a:	2b04      	cmp	r3, #4
 8009d3c:	dd01      	ble.n	8009d42 <uart_stm32_dma_replace_buffer+0x32>
 8009d3e:	4837      	ldr	r0, [pc, #220]	; (8009e1c <uart_stm32_dma_replace_buffer+0x10c>)
 8009d40:	6108      	str	r0, [r1, #16]
 8009d42:	2002      	movs	r0, #2
 8009d44:	8178      	strh	r0, [r7, #10]
 8009d46:	b11a      	cbz	r2, 8009d50 <uart_stm32_dma_replace_buffer+0x40>
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	dd01      	ble.n	8009d50 <uart_stm32_dma_replace_buffer+0x40>
 8009d4c:	4834      	ldr	r0, [pc, #208]	; (8009e20 <uart_stm32_dma_replace_buffer+0x110>)
 8009d4e:	6148      	str	r0, [r1, #20]
 8009d50:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
 8009d54:	b112      	cbz	r2, 8009d5c <uart_stm32_dma_replace_buffer+0x4c>
 8009d56:	2b0c      	cmp	r3, #12
 8009d58:	dd00      	ble.n	8009d5c <uart_stm32_dma_replace_buffer+0x4c>
 8009d5a:	6188      	str	r0, [r1, #24]
 8009d5c:	2b0f      	cmp	r3, #15
 8009d5e:	dd5a      	ble.n	8009e16 <uart_stm32_dma_replace_buffer+0x106>
 8009d60:	2310      	movs	r3, #16
 8009d62:	b12a      	cbz	r2, 8009d70 <uart_stm32_dma_replace_buffer+0x60>
 8009d64:	2000      	movs	r0, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	2004      	movs	r0, #4
 8009d6a:	7138      	strb	r0, [r7, #4]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	60c8      	str	r0, [r1, #12]
 8009d70:	2100      	movs	r1, #0
 8009d72:	f36f 0100 	bfc	r1, #0, #1
 8009d76:	f36f 0141 	bfc	r1, #1, #1
 8009d7a:	f36f 0182 	bfc	r1, #2, #1
 8009d7e:	f36f 01c5 	bfc	r1, #3, #3
 8009d82:	2004      	movs	r0, #4
 8009d84:	f360 1188 	bfi	r1, r0, #6, #3
 8009d88:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 8009d8c:	f363 2152 	bfi	r1, r3, #9, #10
 8009d90:	f36f 41de 	bfc	r1, #19, #12
 8009d94:	f36f 71df 	bfc	r1, #31, #1
 8009d98:	2300      	movs	r3, #0
 8009d9a:	4822      	ldr	r0, [pc, #136]	; (8009e24 <uart_stm32_dma_replace_buffer+0x114>)
 8009d9c:	f005 fade 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8009da0:	46b5      	mov	sp, r6
	data->dma_rx.offset = 0;
 8009da2:	2200      	movs	r2, #0
 8009da4:	66e2      	str	r2, [r4, #108]	; 0x6c
	data->dma_rx.counter = 0;
 8009da6:	6722      	str	r2, [r4, #112]	; 0x70
	data->dma_rx.buffer = data->rx_next_buffer;
 8009da8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8009dac:	6663      	str	r3, [r4, #100]	; 0x64
	data->dma_rx.buffer_length = data->rx_next_buffer_len;
 8009dae:	f8d4 614c 	ldr.w	r6, [r4, #332]	; 0x14c
 8009db2:	66a6      	str	r6, [r4, #104]	; 0x68
	data->dma_rx.blk_cfg.block_size = data->dma_rx.buffer_length;
 8009db4:	65a6      	str	r6, [r4, #88]	; 0x58
	data->dma_rx.blk_cfg.dest_address = (uint32_t)data->dma_rx.buffer;
 8009db6:	64a3      	str	r3, [r4, #72]	; 0x48
	data->rx_next_buffer = NULL;
 8009db8:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	data->rx_next_buffer_len = 0;
 8009dbc:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
	dma_reload(data->dma_rx.dma_dev, data->dma_rx.dma_channel,
 8009dc0:	69a0      	ldr	r0, [r4, #24]
 8009dc2:	69e1      	ldr	r1, [r4, #28]
 8009dc4:	6c62      	ldr	r2, [r4, #68]	; 0x44
#endif
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	if (api->reload) {
 8009dc6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8009dca:	f8dc 8004 	ldr.w	r8, [ip, #4]
 8009dce:	f1b8 0f00 	cmp.w	r8, #0
 8009dd2:	d001      	beq.n	8009dd8 <uart_stm32_dma_replace_buffer+0xc8>
		return api->reload(dev, channel, src, dst, size);
 8009dd4:	9600      	str	r6, [sp, #0]
 8009dd6:	47c0      	blx	r8
	dma_start(data->dma_rx.dma_dev, data->dma_rx.dma_channel);
 8009dd8:	69a0      	ldr	r0, [r4, #24]
 8009dda:	69e1      	ldr	r1, [r4, #28]
 */
__syscall int dma_start(const struct device *dev, uint32_t channel);

static inline int z_impl_dma_start(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
 8009ddc:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	return api->start(dev, channel);
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	4798      	blx	r3
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009de2:	686b      	ldr	r3, [r5, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8009de6:	2210      	movs	r2, #16
 8009de8:	621a      	str	r2, [r3, #32]
	struct uart_event evt = {
 8009dea:	2300      	movs	r3, #0
 8009dec:	60bb      	str	r3, [r7, #8]
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	613b      	str	r3, [r7, #16]
 8009df2:	617b      	str	r3, [r7, #20]
 8009df4:	61bb      	str	r3, [r7, #24]
 8009df6:	2303      	movs	r3, #3
 8009df8:	723b      	strb	r3, [r7, #8]
	if (data->async_cb) {
 8009dfa:	68e3      	ldr	r3, [r4, #12]
 8009dfc:	b123      	cbz	r3, 8009e08 <uart_stm32_dma_replace_buffer+0xf8>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8009dfe:	6922      	ldr	r2, [r4, #16]
 8009e00:	f107 0108 	add.w	r1, r7, #8
 8009e04:	68a0      	ldr	r0, [r4, #8]
 8009e06:	4798      	blx	r3
}
 8009e08:	3728      	adds	r7, #40	; 0x28
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_DBG("Replacing RX buffer: %d", data->rx_next_buffer_len);
 8009e10:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009e14:	e78e      	b.n	8009d34 <uart_stm32_dma_replace_buffer+0x24>
 8009e16:	f06f 031b 	mvn.w	r3, #27
 8009e1a:	e7a2      	b.n	8009d62 <uart_stm32_dma_replace_buffer+0x52>
 8009e1c:	08013560 	.word	0x08013560
 8009e20:	0801377c 	.word	0x0801377c
 8009e24:	0801204c 	.word	0x0801204c

08009e28 <uart_stm32_async_tx_abort>:
{
 8009e28:	b5b0      	push	{r4, r5, r7, lr}
 8009e2a:	b08c      	sub	sp, #48	; 0x30
 8009e2c:	af00      	add	r7, sp, #0
	struct uart_stm32_data *data = dev->data;
 8009e2e:	6904      	ldr	r4, [r0, #16]
	size_t tx_buffer_length = data->dma_tx.buffer_length;
 8009e30:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
	if (tx_buffer_length == 0) {
 8009e34:	2d00      	cmp	r5, #0
 8009e36:	f000 8083 	beq.w	8009f40 <uart_stm32_async_tx_abort+0x118>
	(void)k_work_cancel_delayable(&data->dma_tx.timeout_work);
 8009e3a:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8009e3e:	f006 ff68 	bl	8010d12 <k_work_cancel_delayable>
	if (!dma_get_status(data->dma_tx.dma_dev,
 8009e42:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8009e46:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 * @retval Negative errno code if failure.
 */
static inline int dma_get_status(const struct device *dev, uint32_t channel,
				 struct dma_status *stat)
{
	const struct dma_driver_api *api =
 8009e4a:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	if (api->get_status) {
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	b13b      	cbz	r3, 8009e60 <uart_stm32_async_tx_abort+0x38>
		return api->get_status(dev, channel, stat);
 8009e50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009e54:	4798      	blx	r3
 8009e56:	b918      	cbnz	r0, 8009e60 <uart_stm32_async_tx_abort+0x38>
		data->dma_tx.counter = tx_buffer_length - stat.pending_length;
 8009e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5a:	1aed      	subs	r5, r5, r3
 8009e5c:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	dma_stop(data->dma_tx.dma_dev, data->dma_tx.dma_channel);
 8009e60:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8009e64:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	const struct dma_driver_api *api =
 8009e68:	6883      	ldr	r3, [r0, #8]
	return api->stop(dev, channel);
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	4798      	blx	r3
	LOG_DBG("tx abort: %d", data->dma_tx.counter);
 8009e6e:	2301      	movs	r3, #1
 8009e70:	813b      	strh	r3, [r7, #8]
 8009e72:	2302      	movs	r3, #2
 8009e74:	817b      	strh	r3, [r7, #10]
 8009e76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009e7a:	466d      	mov	r5, sp
 8009e7c:	b088      	sub	sp, #32
 8009e7e:	466b      	mov	r3, sp
 8009e80:	f113 020c 	adds.w	r2, r3, #12
 8009e84:	d056      	beq.n	8009f34 <uart_stm32_async_tx_abort+0x10c>
 8009e86:	2110      	movs	r1, #16
 8009e88:	2001      	movs	r0, #1
 8009e8a:	8138      	strh	r0, [r7, #8]
 8009e8c:	b11a      	cbz	r2, 8009e96 <uart_stm32_async_tx_abort+0x6e>
 8009e8e:	2904      	cmp	r1, #4
 8009e90:	dd01      	ble.n	8009e96 <uart_stm32_async_tx_abort+0x6e>
 8009e92:	482d      	ldr	r0, [pc, #180]	; (8009f48 <uart_stm32_async_tx_abort+0x120>)
 8009e94:	6118      	str	r0, [r3, #16]
 8009e96:	2002      	movs	r0, #2
 8009e98:	8178      	strh	r0, [r7, #10]
 8009e9a:	b11a      	cbz	r2, 8009ea4 <uart_stm32_async_tx_abort+0x7c>
 8009e9c:	2908      	cmp	r1, #8
 8009e9e:	dd01      	ble.n	8009ea4 <uart_stm32_async_tx_abort+0x7c>
 8009ea0:	482a      	ldr	r0, [pc, #168]	; (8009f4c <uart_stm32_async_tx_abort+0x124>)
 8009ea2:	6158      	str	r0, [r3, #20]
 8009ea4:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
 8009ea8:	b122      	cbz	r2, 8009eb4 <uart_stm32_async_tx_abort+0x8c>
 8009eaa:	290c      	cmp	r1, #12
 8009eac:	dd02      	ble.n	8009eb4 <uart_stm32_async_tx_abort+0x8c>
 8009eae:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
 8009eb2:	6198      	str	r0, [r3, #24]
 8009eb4:	290f      	cmp	r1, #15
 8009eb6:	dd40      	ble.n	8009f3a <uart_stm32_async_tx_abort+0x112>
 8009eb8:	2010      	movs	r0, #16
 8009eba:	b12a      	cbz	r2, 8009ec8 <uart_stm32_async_tx_abort+0xa0>
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	6079      	str	r1, [r7, #4]
 8009ec0:	2104      	movs	r1, #4
 8009ec2:	7139      	strb	r1, [r7, #4]
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	60d9      	str	r1, [r3, #12]
 8009ec8:	2100      	movs	r1, #0
 8009eca:	f36f 0100 	bfc	r1, #0, #1
 8009ece:	f36f 0141 	bfc	r1, #1, #1
 8009ed2:	f36f 0182 	bfc	r1, #2, #1
 8009ed6:	f36f 01c5 	bfc	r1, #3, #3
 8009eda:	2304      	movs	r3, #4
 8009edc:	f363 1188 	bfi	r1, r3, #6, #3
 8009ee0:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8009ee4:	f363 2152 	bfi	r1, r3, #9, #10
 8009ee8:	f36f 41de 	bfc	r1, #19, #12
 8009eec:	f36f 71df 	bfc	r1, #31, #1
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	4817      	ldr	r0, [pc, #92]	; (8009f50 <uart_stm32_async_tx_abort+0x128>)
 8009ef4:	f005 fa32 	bl	800f35c <z_impl_z_log_msg2_static_create>
 8009ef8:	46ad      	mov	sp, r5
	struct uart_event event = {
 8009efa:	2300      	movs	r3, #0
 8009efc:	60bb      	str	r3, [r7, #8]
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	613b      	str	r3, [r7, #16]
 8009f02:	617b      	str	r3, [r7, #20]
 8009f04:	61bb      	str	r3, [r7, #24]
 8009f06:	2201      	movs	r2, #1
 8009f08:	723a      	strb	r2, [r7, #8]
		.data.tx.buf = data->dma_tx.buffer,
 8009f0a:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	struct uart_event event = {
 8009f0e:	60fa      	str	r2, [r7, #12]
		.data.tx.len = data->dma_tx.counter
 8009f10:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	struct uart_event event = {
 8009f14:	613a      	str	r2, [r7, #16]
	data->dma_tx.buffer_length = 0;
 8009f16:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	data->dma_tx.counter = 0;
 8009f1a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	if (data->async_cb) {
 8009f1e:	68e3      	ldr	r3, [r4, #12]
 8009f20:	b123      	cbz	r3, 8009f2c <uart_stm32_async_tx_abort+0x104>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8009f22:	6922      	ldr	r2, [r4, #16]
 8009f24:	f107 0108 	add.w	r1, r7, #8
 8009f28:	68a0      	ldr	r0, [r4, #8]
 8009f2a:	4798      	blx	r3
	return 0;
 8009f2c:	2000      	movs	r0, #0
}
 8009f2e:	3730      	adds	r7, #48	; 0x30
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_DBG("tx abort: %d", data->dma_tx.counter);
 8009f34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f38:	e7a6      	b.n	8009e88 <uart_stm32_async_tx_abort+0x60>
 8009f3a:	f06f 001b 	mvn.w	r0, #27
 8009f3e:	e7bc      	b.n	8009eba <uart_stm32_async_tx_abort+0x92>
		return -EFAULT;
 8009f40:	f06f 000d 	mvn.w	r0, #13
 8009f44:	e7f3      	b.n	8009f2e <uart_stm32_async_tx_abort+0x106>
 8009f46:	bf00      	nop
 8009f48:	0801357c 	.word	0x0801357c
 8009f4c:	08013810 	.word	0x08013810
 8009f50:	0801204c 	.word	0x0801204c

08009f54 <uart_stm32_async_tx_timeout>:
{
 8009f54:	b500      	push	{lr}
 8009f56:	b091      	sub	sp, #68	; 0x44
	const struct device *dev = data->uart_dev;
 8009f58:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
	uart_stm32_async_tx_abort(dev);
 8009f5c:	6880      	ldr	r0, [r0, #8]
 8009f5e:	f7ff ff63 	bl	8009e28 <uart_stm32_async_tx_abort>
	LOG_DBG("tx: async timeout");
 8009f62:	2301      	movs	r3, #1
 8009f64:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009f68:	2302      	movs	r3, #2
 8009f6a:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009f6e:	4b12      	ldr	r3, [pc, #72]	; (8009fb8 <uart_stm32_async_tx_timeout+0x64>)
 8009f70:	930e      	str	r3, [sp, #56]	; 0x38
 8009f72:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <uart_stm32_async_tx_timeout+0x68>)
 8009f74:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f76:	2300      	movs	r3, #0
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	2203      	movs	r2, #3
 8009f7c:	f88d 2004 	strb.w	r2, [sp, #4]
 8009f80:	9a01      	ldr	r2, [sp, #4]
 8009f82:	920d      	str	r2, [sp, #52]	; 0x34
 8009f84:	4619      	mov	r1, r3
 8009f86:	f363 0100 	bfi	r1, r3, #0, #1
 8009f8a:	f363 0141 	bfi	r1, r3, #1, #1
 8009f8e:	f363 0182 	bfi	r1, r3, #2, #1
 8009f92:	f363 01c5 	bfi	r1, r3, #3, #3
 8009f96:	2204      	movs	r2, #4
 8009f98:	f362 1188 	bfi	r1, r2, #6, #3
 8009f9c:	220c      	movs	r2, #12
 8009f9e:	f362 2152 	bfi	r1, r2, #9, #10
 8009fa2:	f363 41de 	bfi	r1, r3, #19, #12
 8009fa6:	f363 71df 	bfi	r1, r3, #31, #1
 8009faa:	aa0d      	add	r2, sp, #52	; 0x34
 8009fac:	4804      	ldr	r0, [pc, #16]	; (8009fc0 <uart_stm32_async_tx_timeout+0x6c>)
 8009fae:	f005 f9d5 	bl	800f35c <z_impl_z_log_msg2_static_create>
}
 8009fb2:	b011      	add	sp, #68	; 0x44
 8009fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fb8:	08013590 	.word	0x08013590
 8009fbc:	08013760 	.word	0x08013760
 8009fc0:	0801204c 	.word	0x0801204c

08009fc4 <uart_stm32_async_rx_enable>:
{
 8009fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fc6:	b0a3      	sub	sp, #140	; 0x8c
 8009fc8:	4606      	mov	r6, r0
	struct uart_stm32_data *data = dev->data;
 8009fca:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009fcc:	6840      	ldr	r0, [r0, #4]
 8009fce:	6805      	ldr	r5, [r0, #0]
	if (data->dma_rx.dma_dev == NULL) {
 8009fd0:	69a0      	ldr	r0, [r4, #24]
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	f000 80e0 	beq.w	800a198 <uart_stm32_async_rx_enable+0x1d4>
	if (data->dma_rx.enabled) {
 8009fd8:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d16c      	bne.n	800a0ba <uart_stm32_async_rx_enable+0xf6>
	data->dma_rx.offset = 0;
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	66e0      	str	r0, [r4, #108]	; 0x6c
	data->dma_rx.buffer = rx_buf;
 8009fe4:	6661      	str	r1, [r4, #100]	; 0x64
	data->dma_rx.buffer_length = buf_size;
 8009fe6:	66a2      	str	r2, [r4, #104]	; 0x68
	data->dma_rx.counter = 0;
 8009fe8:	6720      	str	r0, [r4, #112]	; 0x70
	data->dma_rx.timeout = timeout;
 8009fea:	6763      	str	r3, [r4, #116]	; 0x74
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	f023 0320 	bic.w	r3, r3, #32
 8009ff2:	602b      	str	r3, [r5, #0]
	data->dma_rx.blk_cfg.block_size = buf_size;
 8009ff4:	65a2      	str	r2, [r4, #88]	; 0x58
	data->dma_rx.blk_cfg.dest_address = (uint32_t)data->dma_rx.buffer;
 8009ff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ff8:	64a3      	str	r3, [r4, #72]	; 0x48
	ret = dma_config(data->dma_rx.dma_dev, data->dma_rx.dma_channel,
 8009ffa:	69a0      	ldr	r0, [r4, #24]
	const struct dma_driver_api *api =
 8009ffc:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, channel, config);
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f104 0220 	add.w	r2, r4, #32
 800a004:	69e1      	ldr	r1, [r4, #28]
 800a006:	4798      	blx	r3
	if (ret != 0) {
 800a008:	4607      	mov	r7, r0
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d17a      	bne.n	800a104 <uart_stm32_async_rx_enable+0x140>
	if (dma_start(data->dma_rx.dma_dev, data->dma_rx.dma_channel)) {
 800a00e:	69a0      	ldr	r0, [r4, #24]
 800a010:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 800a012:	6883      	ldr	r3, [r0, #8]
	return api->start(dev, channel);
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	4798      	blx	r3
 800a018:	2800      	cmp	r0, #0
 800a01a:	f040 8098 	bne.w	800a14e <uart_stm32_async_rx_enable+0x18a>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a01e:	6873      	ldr	r3, [r6, #4]
 800a020:	681a      	ldr	r2, [r3, #0]
	struct uart_stm32_data *data = dev->data;
 800a022:	6931      	ldr	r1, [r6, #16]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800a024:	6893      	ldr	r3, [r2, #8]
 800a026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a02a:	6093      	str	r3, [r2, #8]
	data->dma_rx.enabled = true;
 800a02c:	2301      	movs	r3, #1
 800a02e:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800a032:	2310      	movs	r3, #16
 800a034:	622b      	str	r3, [r5, #32]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800a036:	682b      	ldr	r3, [r5, #0]
 800a038:	f043 0310 	orr.w	r3, r3, #16
 800a03c:	602b      	str	r3, [r5, #0]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800a03e:	68ab      	ldr	r3, [r5, #8]
 800a040:	f043 0301 	orr.w	r3, r3, #1
 800a044:	60ab      	str	r3, [r5, #8]
	struct uart_event evt = {
 800a046:	2300      	movs	r3, #0
 800a048:	9302      	str	r3, [sp, #8]
 800a04a:	9303      	str	r3, [sp, #12]
 800a04c:	9304      	str	r3, [sp, #16]
 800a04e:	9305      	str	r3, [sp, #20]
 800a050:	9306      	str	r3, [sp, #24]
 800a052:	2303      	movs	r3, #3
 800a054:	f88d 3008 	strb.w	r3, [sp, #8]
	if (data->async_cb) {
 800a058:	68e3      	ldr	r3, [r4, #12]
 800a05a:	b11b      	cbz	r3, 800a064 <uart_stm32_async_rx_enable+0xa0>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a05c:	6922      	ldr	r2, [r4, #16]
 800a05e:	a902      	add	r1, sp, #8
 800a060:	68a0      	ldr	r0, [r4, #8]
 800a062:	4798      	blx	r3
	LOG_DBG("async rx enabled");
 800a064:	2301      	movs	r3, #1
 800a066:	f8ad 3008 	strh.w	r3, [sp, #8]
 800a06a:	2302      	movs	r3, #2
 800a06c:	f8ad 300a 	strh.w	r3, [sp, #10]
 800a070:	4b4b      	ldr	r3, [pc, #300]	; (800a1a0 <uart_stm32_async_rx_enable+0x1dc>)
 800a072:	930e      	str	r3, [sp, #56]	; 0x38
 800a074:	4b4b      	ldr	r3, [pc, #300]	; (800a1a4 <uart_stm32_async_rx_enable+0x1e0>)
 800a076:	930f      	str	r3, [sp, #60]	; 0x3c
 800a078:	2300      	movs	r3, #0
 800a07a:	9301      	str	r3, [sp, #4]
 800a07c:	2203      	movs	r2, #3
 800a07e:	f88d 2004 	strb.w	r2, [sp, #4]
 800a082:	9a01      	ldr	r2, [sp, #4]
 800a084:	920d      	str	r2, [sp, #52]	; 0x34
 800a086:	4619      	mov	r1, r3
 800a088:	f363 0100 	bfi	r1, r3, #0, #1
 800a08c:	f363 0141 	bfi	r1, r3, #1, #1
 800a090:	f363 0182 	bfi	r1, r3, #2, #1
 800a094:	f363 01c5 	bfi	r1, r3, #3, #3
 800a098:	2204      	movs	r2, #4
 800a09a:	f362 1188 	bfi	r1, r2, #6, #3
 800a09e:	220c      	movs	r2, #12
 800a0a0:	f362 2152 	bfi	r1, r2, #9, #10
 800a0a4:	f363 41de 	bfi	r1, r3, #19, #12
 800a0a8:	f363 71df 	bfi	r1, r3, #31, #1
 800a0ac:	aa0d      	add	r2, sp, #52	; 0x34
 800a0ae:	483e      	ldr	r0, [pc, #248]	; (800a1a8 <uart_stm32_async_rx_enable+0x1e4>)
 800a0b0:	f005 f954 	bl	800f35c <z_impl_z_log_msg2_static_create>
}
 800a0b4:	4638      	mov	r0, r7
 800a0b6:	b023      	add	sp, #140	; 0x8c
 800a0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("RX was already enabled");
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	f8ad 3008 	strh.w	r3, [sp, #8]
 800a0c0:	4b3a      	ldr	r3, [pc, #232]	; (800a1ac <uart_stm32_async_rx_enable+0x1e8>)
 800a0c2:	9320      	str	r3, [sp, #128]	; 0x80
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	f88d 2004 	strb.w	r2, [sp, #4]
 800a0ce:	9901      	ldr	r1, [sp, #4]
 800a0d0:	911f      	str	r1, [sp, #124]	; 0x7c
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	f363 0100 	bfi	r1, r3, #0, #1
 800a0d8:	f363 0141 	bfi	r1, r3, #1, #1
 800a0dc:	f363 0182 	bfi	r1, r3, #2, #1
 800a0e0:	f363 01c5 	bfi	r1, r3, #3, #3
 800a0e4:	f362 1188 	bfi	r1, r2, #6, #3
 800a0e8:	2208      	movs	r2, #8
 800a0ea:	f362 2152 	bfi	r1, r2, #9, #10
 800a0ee:	f363 41de 	bfi	r1, r3, #19, #12
 800a0f2:	f363 71df 	bfi	r1, r3, #31, #1
 800a0f6:	aa1f      	add	r2, sp, #124	; 0x7c
 800a0f8:	482b      	ldr	r0, [pc, #172]	; (800a1a8 <uart_stm32_async_rx_enable+0x1e4>)
 800a0fa:	f005 f92f 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EBUSY;
 800a0fe:	f06f 070f 	mvn.w	r7, #15
 800a102:	e7d7      	b.n	800a0b4 <uart_stm32_async_rx_enable+0xf0>
		LOG_ERR("UART ERR: RX DMA config failed!");
 800a104:	2201      	movs	r2, #1
 800a106:	f8ad 2008 	strh.w	r2, [sp, #8]
 800a10a:	4b29      	ldr	r3, [pc, #164]	; (800a1b0 <uart_stm32_async_rx_enable+0x1ec>)
 800a10c:	931a      	str	r3, [sp, #104]	; 0x68
 800a10e:	2300      	movs	r3, #0
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	2102      	movs	r1, #2
 800a114:	f88d 1004 	strb.w	r1, [sp, #4]
 800a118:	9901      	ldr	r1, [sp, #4]
 800a11a:	9119      	str	r1, [sp, #100]	; 0x64
 800a11c:	4619      	mov	r1, r3
 800a11e:	f363 0100 	bfi	r1, r3, #0, #1
 800a122:	f363 0141 	bfi	r1, r3, #1, #1
 800a126:	f363 0182 	bfi	r1, r3, #2, #1
 800a12a:	f363 01c5 	bfi	r1, r3, #3, #3
 800a12e:	f362 1188 	bfi	r1, r2, #6, #3
 800a132:	2208      	movs	r2, #8
 800a134:	f362 2152 	bfi	r1, r2, #9, #10
 800a138:	f363 41de 	bfi	r1, r3, #19, #12
 800a13c:	f363 71df 	bfi	r1, r3, #31, #1
 800a140:	aa19      	add	r2, sp, #100	; 0x64
 800a142:	4819      	ldr	r0, [pc, #100]	; (800a1a8 <uart_stm32_async_rx_enable+0x1e4>)
 800a144:	f005 f90a 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800a148:	f06f 0715 	mvn.w	r7, #21
 800a14c:	e7b2      	b.n	800a0b4 <uart_stm32_async_rx_enable+0xf0>
		LOG_ERR("UART ERR: RX DMA start failed!");
 800a14e:	2201      	movs	r2, #1
 800a150:	f8ad 2008 	strh.w	r2, [sp, #8]
 800a154:	4b17      	ldr	r3, [pc, #92]	; (800a1b4 <uart_stm32_async_rx_enable+0x1f0>)
 800a156:	9314      	str	r3, [sp, #80]	; 0x50
 800a158:	2300      	movs	r3, #0
 800a15a:	9301      	str	r3, [sp, #4]
 800a15c:	2102      	movs	r1, #2
 800a15e:	f88d 1004 	strb.w	r1, [sp, #4]
 800a162:	9901      	ldr	r1, [sp, #4]
 800a164:	9113      	str	r1, [sp, #76]	; 0x4c
 800a166:	4619      	mov	r1, r3
 800a168:	f363 0100 	bfi	r1, r3, #0, #1
 800a16c:	f363 0141 	bfi	r1, r3, #1, #1
 800a170:	f363 0182 	bfi	r1, r3, #2, #1
 800a174:	f363 01c5 	bfi	r1, r3, #3, #3
 800a178:	f362 1188 	bfi	r1, r2, #6, #3
 800a17c:	2208      	movs	r2, #8
 800a17e:	f362 2152 	bfi	r1, r2, #9, #10
 800a182:	f363 41de 	bfi	r1, r3, #19, #12
 800a186:	f363 71df 	bfi	r1, r3, #31, #1
 800a18a:	aa13      	add	r2, sp, #76	; 0x4c
 800a18c:	4806      	ldr	r0, [pc, #24]	; (800a1a8 <uart_stm32_async_rx_enable+0x1e4>)
 800a18e:	f005 f8e5 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EFAULT;
 800a192:	f06f 070d 	mvn.w	r7, #13
 800a196:	e78d      	b.n	800a0b4 <uart_stm32_async_rx_enable+0xf0>
		return -ENODEV;
 800a198:	f06f 0712 	mvn.w	r7, #18
 800a19c:	e78a      	b.n	800a0b4 <uart_stm32_async_rx_enable+0xf0>
 800a19e:	bf00      	nop
 800a1a0:	08013600 	.word	0x08013600
 800a1a4:	08013824 	.word	0x08013824
 800a1a8:	0801204c 	.word	0x0801204c
 800a1ac:	080135a8 	.word	0x080135a8
 800a1b0:	080135c0 	.word	0x080135c0
 800a1b4:	080135e0 	.word	0x080135e0

0800a1b8 <async_evt_rx_rdy>:
{
 800a1b8:	b5b0      	push	{r4, r5, r7, lr}
 800a1ba:	b08e      	sub	sp, #56	; 0x38
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	4604      	mov	r4, r0
	LOG_DBG("rx_rdy: (%d %d)", data->dma_rx.offset, data->dma_rx.counter);
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	80bb      	strh	r3, [r7, #4]
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	80fb      	strh	r3, [r7, #6]
 800a1c8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800a1ca:	466d      	mov	r5, sp
 800a1cc:	b088      	sub	sp, #32
 800a1ce:	466b      	mov	r3, sp
 800a1d0:	f113 020c 	adds.w	r2, r3, #12
 800a1d4:	d052      	beq.n	800a27c <async_evt_rx_rdy+0xc4>
 800a1d6:	2114      	movs	r1, #20
 800a1d8:	2001      	movs	r0, #1
 800a1da:	80b8      	strh	r0, [r7, #4]
 800a1dc:	b11a      	cbz	r2, 800a1e6 <async_evt_rx_rdy+0x2e>
 800a1de:	2904      	cmp	r1, #4
 800a1e0:	dd01      	ble.n	800a1e6 <async_evt_rx_rdy+0x2e>
 800a1e2:	482e      	ldr	r0, [pc, #184]	; (800a29c <async_evt_rx_rdy+0xe4>)
 800a1e4:	6118      	str	r0, [r3, #16]
 800a1e6:	2002      	movs	r0, #2
 800a1e8:	80f8      	strh	r0, [r7, #6]
 800a1ea:	b11a      	cbz	r2, 800a1f4 <async_evt_rx_rdy+0x3c>
 800a1ec:	2908      	cmp	r1, #8
 800a1ee:	dd01      	ble.n	800a1f4 <async_evt_rx_rdy+0x3c>
 800a1f0:	482b      	ldr	r0, [pc, #172]	; (800a2a0 <async_evt_rx_rdy+0xe8>)
 800a1f2:	6158      	str	r0, [r3, #20]
 800a1f4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a1f6:	b112      	cbz	r2, 800a1fe <async_evt_rx_rdy+0x46>
 800a1f8:	290c      	cmp	r1, #12
 800a1fa:	dd00      	ble.n	800a1fe <async_evt_rx_rdy+0x46>
 800a1fc:	6198      	str	r0, [r3, #24]
 800a1fe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a200:	b11a      	cbz	r2, 800a20a <async_evt_rx_rdy+0x52>
 800a202:	2910      	cmp	r1, #16
 800a204:	dd01      	ble.n	800a20a <async_evt_rx_rdy+0x52>
 800a206:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a208:	61d8      	str	r0, [r3, #28]
 800a20a:	2913      	cmp	r1, #19
 800a20c:	dd39      	ble.n	800a282 <async_evt_rx_rdy+0xca>
 800a20e:	2014      	movs	r0, #20
 800a210:	b12a      	cbz	r2, 800a21e <async_evt_rx_rdy+0x66>
 800a212:	2100      	movs	r1, #0
 800a214:	6039      	str	r1, [r7, #0]
 800a216:	2105      	movs	r1, #5
 800a218:	7039      	strb	r1, [r7, #0]
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	60d9      	str	r1, [r3, #12]
 800a21e:	2100      	movs	r1, #0
 800a220:	f36f 0100 	bfc	r1, #0, #1
 800a224:	f36f 0141 	bfc	r1, #1, #1
 800a228:	f36f 0182 	bfc	r1, #2, #1
 800a22c:	f36f 01c5 	bfc	r1, #3, #3
 800a230:	2304      	movs	r3, #4
 800a232:	f363 1188 	bfi	r1, r3, #6, #3
 800a236:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 800a23a:	f363 2152 	bfi	r1, r3, #9, #10
 800a23e:	f36f 41de 	bfc	r1, #19, #12
 800a242:	f36f 71df 	bfc	r1, #31, #1
 800a246:	2300      	movs	r3, #0
 800a248:	4816      	ldr	r0, [pc, #88]	; (800a2a4 <async_evt_rx_rdy+0xec>)
 800a24a:	f005 f887 	bl	800f35c <z_impl_z_log_msg2_static_create>
 800a24e:	46ad      	mov	sp, r5
	struct uart_event event = {
 800a250:	2300      	movs	r3, #0
 800a252:	627b      	str	r3, [r7, #36]	; 0x24
 800a254:	62bb      	str	r3, [r7, #40]	; 0x28
 800a256:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a258:	633b      	str	r3, [r7, #48]	; 0x30
 800a25a:	637b      	str	r3, [r7, #52]	; 0x34
 800a25c:	2302      	movs	r3, #2
 800a25e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		.data.rx.buf = data->dma_rx.buffer,
 800a262:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event event = {
 800a264:	62bb      	str	r3, [r7, #40]	; 0x28
		.data.rx.offset = data->dma_rx.offset
 800a266:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
	struct uart_event event = {
 800a268:	62fa      	str	r2, [r7, #44]	; 0x2c
		.data.rx.len = data->dma_rx.counter - data->dma_rx.offset,
 800a26a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a26c:	1a9b      	subs	r3, r3, r2
	struct uart_event event = {
 800a26e:	633b      	str	r3, [r7, #48]	; 0x30
	data->dma_rx.offset = data->dma_rx.counter;
 800a270:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a272:	66e2      	str	r2, [r4, #108]	; 0x6c
	if (event.data.rx.len > 0) {
 800a274:	b943      	cbnz	r3, 800a288 <async_evt_rx_rdy+0xd0>
}
 800a276:	3738      	adds	r7, #56	; 0x38
 800a278:	46bd      	mov	sp, r7
 800a27a:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_DBG("rx_rdy: (%d %d)", data->dma_rx.offset, data->dma_rx.counter);
 800a27c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a280:	e7aa      	b.n	800a1d8 <async_evt_rx_rdy+0x20>
 800a282:	f06f 001b 	mvn.w	r0, #27
 800a286:	e7c3      	b.n	800a210 <async_evt_rx_rdy+0x58>
	if (data->async_cb) {
 800a288:	68e3      	ldr	r3, [r4, #12]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0f3      	beq.n	800a276 <async_evt_rx_rdy+0xbe>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a28e:	6922      	ldr	r2, [r4, #16]
 800a290:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a294:	68a0      	ldr	r0, [r4, #8]
 800a296:	4798      	blx	r3
}
 800a298:	e7ed      	b.n	800a276 <async_evt_rx_rdy+0xbe>
 800a29a:	bf00      	nop
 800a29c:	08013618 	.word	0x08013618
 800a2a0:	0801379c 	.word	0x0801379c
 800a2a4:	0801204c 	.word	0x0801204c

0800a2a8 <uart_stm32_async_rx_disable>:
{
 800a2a8:	b570      	push	{r4, r5, r6, lr}
 800a2aa:	b094      	sub	sp, #80	; 0x50
	struct uart_stm32_data *data = dev->data;
 800a2ac:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a2ae:	6843      	ldr	r3, [r0, #4]
 800a2b0:	681e      	ldr	r6, [r3, #0]
	struct uart_event disabled_event = {
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2ba:	930c      	str	r3, [sp, #48]	; 0x30
 800a2bc:	930d      	str	r3, [sp, #52]	; 0x34
 800a2be:	2305      	movs	r3, #5
 800a2c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	if (!data->dma_rx.enabled) {
 800a2c4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d05d      	beq.n	800a388 <uart_stm32_async_rx_disable+0xe0>
 800a2cc:	4605      	mov	r5, r0
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800a2ce:	6833      	ldr	r3, [r6, #0]
 800a2d0:	f023 0310 	bic.w	r3, r3, #16
 800a2d4:	6033      	str	r3, [r6, #0]
	uart_stm32_dma_rx_flush(dev);
 800a2d6:	f006 fadf 	bl	8010898 <uart_stm32_dma_rx_flush>
	struct uart_event evt = {
 800a2da:	2300      	movs	r3, #0
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	9302      	str	r3, [sp, #8]
 800a2e0:	9303      	str	r3, [sp, #12]
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	9305      	str	r3, [sp, #20]
 800a2e6:	2304      	movs	r3, #4
 800a2e8:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_buf.buf = data->dma_rx.buffer,
 800a2ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event evt = {
 800a2ee:	9302      	str	r3, [sp, #8]
	if (data->async_cb) {
 800a2f0:	68e3      	ldr	r3, [r4, #12]
 800a2f2:	b11b      	cbz	r3, 800a2fc <uart_stm32_async_rx_disable+0x54>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a2f4:	6922      	ldr	r2, [r4, #16]
 800a2f6:	a901      	add	r1, sp, #4
 800a2f8:	68a0      	ldr	r0, [r4, #8]
 800a2fa:	4798      	blx	r3
	struct uart_stm32_data *data = dev->data;
 800a2fc:	692b      	ldr	r3, [r5, #16]
	data->dma_rx.enabled = false;
 800a2fe:	2500      	movs	r5, #0
 800a300:	f883 50a8 	strb.w	r5, [r3, #168]	; 0xa8
	(void)k_work_cancel_delayable(&data->dma_rx.timeout_work);
 800a304:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800a308:	f006 fd03 	bl	8010d12 <k_work_cancel_delayable>
	dma_stop(data->dma_rx.dma_dev, data->dma_rx.dma_channel);
 800a30c:	69a0      	ldr	r0, [r4, #24]
 800a30e:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 800a310:	6883      	ldr	r3, [r0, #8]
	return api->stop(dev, channel);
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	4798      	blx	r3
	data->rx_next_buffer = NULL;
 800a316:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
	data->rx_next_buffer_len = 0;
 800a31a:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800a31e:	6833      	ldr	r3, [r6, #0]
 800a320:	f043 0320 	orr.w	r3, r3, #32
 800a324:	6033      	str	r3, [r6, #0]
	LOG_DBG("rx: disabled");
 800a326:	2301      	movs	r3, #1
 800a328:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a32c:	2302      	movs	r3, #2
 800a32e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a332:	4b1a      	ldr	r3, [pc, #104]	; (800a39c <uart_stm32_async_rx_disable+0xf4>)
 800a334:	9312      	str	r3, [sp, #72]	; 0x48
 800a336:	4b1a      	ldr	r3, [pc, #104]	; (800a3a0 <uart_stm32_async_rx_disable+0xf8>)
 800a338:	9313      	str	r3, [sp, #76]	; 0x4c
 800a33a:	9500      	str	r5, [sp, #0]
 800a33c:	2303      	movs	r3, #3
 800a33e:	f88d 3000 	strb.w	r3, [sp]
 800a342:	9b00      	ldr	r3, [sp, #0]
 800a344:	9311      	str	r3, [sp, #68]	; 0x44
 800a346:	4629      	mov	r1, r5
 800a348:	f365 0100 	bfi	r1, r5, #0, #1
 800a34c:	f365 0141 	bfi	r1, r5, #1, #1
 800a350:	f365 0182 	bfi	r1, r5, #2, #1
 800a354:	f365 01c5 	bfi	r1, r5, #3, #3
 800a358:	2304      	movs	r3, #4
 800a35a:	f363 1188 	bfi	r1, r3, #6, #3
 800a35e:	230c      	movs	r3, #12
 800a360:	f363 2152 	bfi	r1, r3, #9, #10
 800a364:	f365 41de 	bfi	r1, r5, #19, #12
 800a368:	f365 71df 	bfi	r1, r5, #31, #1
 800a36c:	462b      	mov	r3, r5
 800a36e:	aa11      	add	r2, sp, #68	; 0x44
 800a370:	480c      	ldr	r0, [pc, #48]	; (800a3a4 <uart_stm32_async_rx_disable+0xfc>)
 800a372:	f004 fff3 	bl	800f35c <z_impl_z_log_msg2_static_create>
	if (data->async_cb) {
 800a376:	68e3      	ldr	r3, [r4, #12]
 800a378:	b11b      	cbz	r3, 800a382 <uart_stm32_async_rx_disable+0xda>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a37a:	6922      	ldr	r2, [r4, #16]
 800a37c:	a909      	add	r1, sp, #36	; 0x24
 800a37e:	68a0      	ldr	r0, [r4, #8]
 800a380:	4798      	blx	r3
	return 0;
 800a382:	2000      	movs	r0, #0
}
 800a384:	b014      	add	sp, #80	; 0x50
 800a386:	bd70      	pop	{r4, r5, r6, pc}
	if (data->async_cb) {
 800a388:	68e3      	ldr	r3, [r4, #12]
 800a38a:	b11b      	cbz	r3, 800a394 <uart_stm32_async_rx_disable+0xec>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a38c:	6922      	ldr	r2, [r4, #16]
 800a38e:	a909      	add	r1, sp, #36	; 0x24
 800a390:	68a0      	ldr	r0, [r4, #8]
 800a392:	4798      	blx	r3
		return -EFAULT;
 800a394:	f06f 000d 	mvn.w	r0, #13
}
 800a398:	e7f4      	b.n	800a384 <uart_stm32_async_rx_disable+0xdc>
 800a39a:	bf00      	nop
 800a39c:	0801362c 	.word	0x0801362c
 800a3a0:	0801385c 	.word	0x0801385c
 800a3a4:	0801204c 	.word	0x0801204c

0800a3a8 <uart_stm32_async_rx_timeout>:
{
 800a3a8:	b530      	push	{r4, r5, lr}
 800a3aa:	b091      	sub	sp, #68	; 0x44
 800a3ac:	4604      	mov	r4, r0
	const struct device *dev = data->uart_dev;
 800a3ae:	f850 5c70 	ldr.w	r5, [r0, #-112]
	LOG_DBG("rx timeout");
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	f8ad 3008 	strh.w	r3, [sp, #8]
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	f8ad 300a 	strh.w	r3, [sp, #10]
 800a3be:	4b18      	ldr	r3, [pc, #96]	; (800a420 <uart_stm32_async_rx_timeout+0x78>)
 800a3c0:	930e      	str	r3, [sp, #56]	; 0x38
 800a3c2:	4b18      	ldr	r3, [pc, #96]	; (800a424 <uart_stm32_async_rx_timeout+0x7c>)
 800a3c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	2203      	movs	r2, #3
 800a3cc:	f88d 2004 	strb.w	r2, [sp, #4]
 800a3d0:	9a01      	ldr	r2, [sp, #4]
 800a3d2:	920d      	str	r2, [sp, #52]	; 0x34
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	f363 0100 	bfi	r1, r3, #0, #1
 800a3da:	f363 0141 	bfi	r1, r3, #1, #1
 800a3de:	f363 0182 	bfi	r1, r3, #2, #1
 800a3e2:	f363 01c5 	bfi	r1, r3, #3, #3
 800a3e6:	2204      	movs	r2, #4
 800a3e8:	f362 1188 	bfi	r1, r2, #6, #3
 800a3ec:	220c      	movs	r2, #12
 800a3ee:	f362 2152 	bfi	r1, r2, #9, #10
 800a3f2:	f363 41de 	bfi	r1, r3, #19, #12
 800a3f6:	f363 71df 	bfi	r1, r3, #31, #1
 800a3fa:	aa0d      	add	r2, sp, #52	; 0x34
 800a3fc:	480a      	ldr	r0, [pc, #40]	; (800a428 <uart_stm32_async_rx_timeout+0x80>)
 800a3fe:	f004 ffad 	bl	800f35c <z_impl_z_log_msg2_static_create>
	if (data->dma_rx.counter == data->dma_rx.buffer_length) {
 800a402:	f854 2c08 	ldr.w	r2, [r4, #-8]
 800a406:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d004      	beq.n	800a418 <uart_stm32_async_rx_timeout+0x70>
		uart_stm32_dma_rx_flush(dev);
 800a40e:	4628      	mov	r0, r5
 800a410:	f006 fa42 	bl	8010898 <uart_stm32_dma_rx_flush>
}
 800a414:	b011      	add	sp, #68	; 0x44
 800a416:	bd30      	pop	{r4, r5, pc}
		uart_stm32_async_rx_disable(dev);
 800a418:	4628      	mov	r0, r5
 800a41a:	f7ff ff45 	bl	800a2a8 <uart_stm32_async_rx_disable>
 800a41e:	e7f9      	b.n	800a414 <uart_stm32_async_rx_timeout+0x6c>
 800a420:	08013640 	.word	0x08013640
 800a424:	08013744 	.word	0x08013744
 800a428:	0801204c 	.word	0x0801204c

0800a42c <uart_stm32_dma_rx_cb>:
{
 800a42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a42e:	b08b      	sub	sp, #44	; 0x2c
 800a430:	af00      	add	r7, sp, #0
	struct uart_stm32_data *data = uart_dev->data;
 800a432:	690c      	ldr	r4, [r1, #16]
	if (status != 0) {
 800a434:	bb2b      	cbnz	r3, 800a482 <uart_stm32_dma_rx_cb+0x56>
 800a436:	460d      	mov	r5, r1
	(void)k_work_cancel_delayable(&data->dma_rx.timeout_work);
 800a438:	f104 0678 	add.w	r6, r4, #120	; 0x78
 800a43c:	4630      	mov	r0, r6
 800a43e:	f006 fc68 	bl	8010d12 <k_work_cancel_delayable>
	data->dma_rx.counter = data->dma_rx.buffer_length;
 800a442:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a444:	6723      	str	r3, [r4, #112]	; 0x70
	async_evt_rx_rdy(data);
 800a446:	4620      	mov	r0, r4
 800a448:	f7ff feb6 	bl	800a1b8 <async_evt_rx_rdy>
	if (data->rx_next_buffer != NULL) {
 800a44c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800a450:	2b00      	cmp	r3, #0
 800a452:	d06f      	beq.n	800a534 <uart_stm32_dma_rx_cb+0x108>
	struct uart_event evt = {
 800a454:	2300      	movs	r3, #0
 800a456:	60bb      	str	r3, [r7, #8]
 800a458:	60fb      	str	r3, [r7, #12]
 800a45a:	613b      	str	r3, [r7, #16]
 800a45c:	617b      	str	r3, [r7, #20]
 800a45e:	61bb      	str	r3, [r7, #24]
 800a460:	2304      	movs	r3, #4
 800a462:	723b      	strb	r3, [r7, #8]
		.data.rx_buf.buf = data->dma_rx.buffer,
 800a464:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event evt = {
 800a466:	60fb      	str	r3, [r7, #12]
	if (data->async_cb) {
 800a468:	68e3      	ldr	r3, [r4, #12]
 800a46a:	b123      	cbz	r3, 800a476 <uart_stm32_dma_rx_cb+0x4a>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a46c:	6922      	ldr	r2, [r4, #16]
 800a46e:	f107 0108 	add.w	r1, r7, #8
 800a472:	68a0      	ldr	r0, [r4, #8]
 800a474:	4798      	blx	r3
		uart_stm32_dma_replace_buffer(uart_dev);
 800a476:	4628      	mov	r0, r5
 800a478:	f7ff fc4a 	bl	8009d10 <uart_stm32_dma_replace_buffer>
}
 800a47c:	372c      	adds	r7, #44	; 0x2c
 800a47e:	46bd      	mov	sp, r7
 800a480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a482:	461e      	mov	r6, r3
	LOG_DBG("rx error: %d", err_code);
 800a484:	2301      	movs	r3, #1
 800a486:	813b      	strh	r3, [r7, #8]
 800a488:	2302      	movs	r3, #2
 800a48a:	817b      	strh	r3, [r7, #10]
 800a48c:	466d      	mov	r5, sp
 800a48e:	b088      	sub	sp, #32
 800a490:	466b      	mov	r3, sp
 800a492:	f113 020c 	adds.w	r2, r3, #12
 800a496:	d047      	beq.n	800a528 <uart_stm32_dma_rx_cb+0xfc>
 800a498:	2110      	movs	r1, #16
 800a49a:	2001      	movs	r0, #1
 800a49c:	8138      	strh	r0, [r7, #8]
 800a49e:	b11a      	cbz	r2, 800a4a8 <uart_stm32_dma_rx_cb+0x7c>
 800a4a0:	2904      	cmp	r1, #4
 800a4a2:	dd01      	ble.n	800a4a8 <uart_stm32_dma_rx_cb+0x7c>
 800a4a4:	4826      	ldr	r0, [pc, #152]	; (800a540 <uart_stm32_dma_rx_cb+0x114>)
 800a4a6:	6118      	str	r0, [r3, #16]
 800a4a8:	2002      	movs	r0, #2
 800a4aa:	8178      	strh	r0, [r7, #10]
 800a4ac:	b11a      	cbz	r2, 800a4b6 <uart_stm32_dma_rx_cb+0x8a>
 800a4ae:	2908      	cmp	r1, #8
 800a4b0:	dd01      	ble.n	800a4b6 <uart_stm32_dma_rx_cb+0x8a>
 800a4b2:	4824      	ldr	r0, [pc, #144]	; (800a544 <uart_stm32_dma_rx_cb+0x118>)
 800a4b4:	6158      	str	r0, [r3, #20]
 800a4b6:	b112      	cbz	r2, 800a4be <uart_stm32_dma_rx_cb+0x92>
 800a4b8:	290c      	cmp	r1, #12
 800a4ba:	dd00      	ble.n	800a4be <uart_stm32_dma_rx_cb+0x92>
 800a4bc:	619e      	str	r6, [r3, #24]
 800a4be:	290f      	cmp	r1, #15
 800a4c0:	dd35      	ble.n	800a52e <uart_stm32_dma_rx_cb+0x102>
 800a4c2:	2010      	movs	r0, #16
 800a4c4:	b12a      	cbz	r2, 800a4d2 <uart_stm32_dma_rx_cb+0xa6>
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	6079      	str	r1, [r7, #4]
 800a4ca:	2104      	movs	r1, #4
 800a4cc:	7139      	strb	r1, [r7, #4]
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	60d9      	str	r1, [r3, #12]
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	f36f 0100 	bfc	r1, #0, #1
 800a4d8:	f36f 0141 	bfc	r1, #1, #1
 800a4dc:	f36f 0182 	bfc	r1, #2, #1
 800a4e0:	f36f 01c5 	bfc	r1, #3, #3
 800a4e4:	2304      	movs	r3, #4
 800a4e6:	f363 1188 	bfi	r1, r3, #6, #3
 800a4ea:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 800a4ee:	f363 2152 	bfi	r1, r3, #9, #10
 800a4f2:	f36f 41de 	bfc	r1, #19, #12
 800a4f6:	f36f 71df 	bfc	r1, #31, #1
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	4812      	ldr	r0, [pc, #72]	; (800a548 <uart_stm32_dma_rx_cb+0x11c>)
 800a4fe:	f004 ff2d 	bl	800f35c <z_impl_z_log_msg2_static_create>
 800a502:	46ad      	mov	sp, r5
	struct uart_event event = {
 800a504:	2306      	movs	r3, #6
 800a506:	723b      	strb	r3, [r7, #8]
 800a508:	733e      	strb	r6, [r7, #12]
		.data.rx_stop.data.buf = data->dma_rx.buffer
 800a50a:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct uart_event event = {
 800a50c:	613b      	str	r3, [r7, #16]
 800a50e:	2300      	movs	r3, #0
 800a510:	617b      	str	r3, [r7, #20]
		.data.rx_stop.data.len = data->dma_rx.counter,
 800a512:	6f23      	ldr	r3, [r4, #112]	; 0x70
	struct uart_event event = {
 800a514:	61bb      	str	r3, [r7, #24]
	if (data->async_cb) {
 800a516:	68e3      	ldr	r3, [r4, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d0af      	beq.n	800a47c <uart_stm32_dma_rx_cb+0x50>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a51c:	6922      	ldr	r2, [r4, #16]
 800a51e:	f107 0108 	add.w	r1, r7, #8
 800a522:	68a0      	ldr	r0, [r4, #8]
 800a524:	4798      	blx	r3
}
 800a526:	e7a9      	b.n	800a47c <uart_stm32_dma_rx_cb+0x50>
	LOG_DBG("rx error: %d", err_code);
 800a528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a52c:	e7b5      	b.n	800a49a <uart_stm32_dma_rx_cb+0x6e>
 800a52e:	f06f 001b 	mvn.w	r0, #27
 800a532:	e7c7      	b.n	800a4c4 <uart_stm32_dma_rx_cb+0x98>
		k_work_reschedule(&data->dma_rx.timeout_work, K_TICKS(1));
 800a534:	2201      	movs	r2, #1
 800a536:	2300      	movs	r3, #0
 800a538:	4630      	mov	r0, r6
 800a53a:	f001 fcd1 	bl	800bee0 <k_work_reschedule>
 800a53e:	e79d      	b.n	800a47c <uart_stm32_dma_rx_cb+0x50>
 800a540:	08013650 	.word	0x08013650
 800a544:	080137b0 	.word	0x080137b0
 800a548:	0801204c 	.word	0x0801204c

0800a54c <uart_stm32_isr>:
{
 800a54c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a550:	b091      	sub	sp, #68	; 0x44
 800a552:	af00      	add	r7, sp, #0
 800a554:	4604      	mov	r4, r0
	struct uart_stm32_data *data = dev->data;
 800a556:	6905      	ldr	r5, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a558:	6843      	ldr	r3, [r0, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	f012 0f10 	tst.w	r2, #16
 800a562:	f000 8097 	beq.w	800a694 <uart_stm32_isr+0x148>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800a566:	69da      	ldr	r2, [r3, #28]
 800a568:	f012 0f10 	tst.w	r2, #16
 800a56c:	f000 8092 	beq.w	800a694 <uart_stm32_isr+0x148>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800a570:	2210      	movs	r2, #16
 800a572:	621a      	str	r2, [r3, #32]
		LOG_DBG("idle interrupt occurred");
 800a574:	2301      	movs	r3, #1
 800a576:	813b      	strh	r3, [r7, #8]
 800a578:	2302      	movs	r3, #2
 800a57a:	817b      	strh	r3, [r7, #10]
 800a57c:	4b87      	ldr	r3, [pc, #540]	; (800a79c <uart_stm32_isr+0x250>)
 800a57e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a580:	4b87      	ldr	r3, [pc, #540]	; (800a7a0 <uart_stm32_isr+0x254>)
 800a582:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a584:	2300      	movs	r3, #0
 800a586:	607b      	str	r3, [r7, #4]
 800a588:	2203      	movs	r2, #3
 800a58a:	713a      	strb	r2, [r7, #4]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	637a      	str	r2, [r7, #52]	; 0x34
 800a590:	4619      	mov	r1, r3
 800a592:	f363 0100 	bfi	r1, r3, #0, #1
 800a596:	f363 0141 	bfi	r1, r3, #1, #1
 800a59a:	f363 0182 	bfi	r1, r3, #2, #1
 800a59e:	f363 01c5 	bfi	r1, r3, #3, #3
 800a5a2:	2204      	movs	r2, #4
 800a5a4:	f362 1188 	bfi	r1, r2, #6, #3
 800a5a8:	220c      	movs	r2, #12
 800a5aa:	f362 2152 	bfi	r1, r2, #9, #10
 800a5ae:	f363 41de 	bfi	r1, r3, #19, #12
 800a5b2:	f363 71df 	bfi	r1, r3, #31, #1
 800a5b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800a5ba:	487a      	ldr	r0, [pc, #488]	; (800a7a4 <uart_stm32_isr+0x258>)
 800a5bc:	f004 fece 	bl	800f35c <z_impl_z_log_msg2_static_create>
		async_timer_start(&data->dma_rx.timeout_work,
 800a5c0:	f105 0878 	add.w	r8, r5, #120	; 0x78
 800a5c4:	6f6e      	ldr	r6, [r5, #116]	; 0x74
	if ((timeout != SYS_FOREVER_US) && (timeout != 0)) {
 800a5c6:	1c73      	adds	r3, r6, #1
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d950      	bls.n	800a66e <uart_stm32_isr+0x122>
		LOG_DBG("async timer started for %d us", timeout);
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	813b      	strh	r3, [r7, #8]
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	817b      	strh	r3, [r7, #10]
 800a5d4:	46e9      	mov	r9, sp
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	466b      	mov	r3, sp
 800a5da:	f113 020c 	adds.w	r2, r3, #12
 800a5de:	d04f      	beq.n	800a680 <uart_stm32_isr+0x134>
 800a5e0:	2110      	movs	r1, #16
 800a5e2:	2001      	movs	r0, #1
 800a5e4:	8138      	strh	r0, [r7, #8]
 800a5e6:	b11a      	cbz	r2, 800a5f0 <uart_stm32_isr+0xa4>
 800a5e8:	2904      	cmp	r1, #4
 800a5ea:	dd01      	ble.n	800a5f0 <uart_stm32_isr+0xa4>
 800a5ec:	486e      	ldr	r0, [pc, #440]	; (800a7a8 <uart_stm32_isr+0x25c>)
 800a5ee:	6118      	str	r0, [r3, #16]
 800a5f0:	2002      	movs	r0, #2
 800a5f2:	8178      	strh	r0, [r7, #10]
 800a5f4:	b11a      	cbz	r2, 800a5fe <uart_stm32_isr+0xb2>
 800a5f6:	2908      	cmp	r1, #8
 800a5f8:	dd01      	ble.n	800a5fe <uart_stm32_isr+0xb2>
 800a5fa:	486c      	ldr	r0, [pc, #432]	; (800a7ac <uart_stm32_isr+0x260>)
 800a5fc:	6158      	str	r0, [r3, #20]
 800a5fe:	b112      	cbz	r2, 800a606 <uart_stm32_isr+0xba>
 800a600:	290c      	cmp	r1, #12
 800a602:	dd00      	ble.n	800a606 <uart_stm32_isr+0xba>
 800a604:	619e      	str	r6, [r3, #24]
 800a606:	290f      	cmp	r1, #15
 800a608:	dd3d      	ble.n	800a686 <uart_stm32_isr+0x13a>
 800a60a:	2010      	movs	r0, #16
 800a60c:	b12a      	cbz	r2, 800a61a <uart_stm32_isr+0xce>
 800a60e:	2100      	movs	r1, #0
 800a610:	6079      	str	r1, [r7, #4]
 800a612:	2104      	movs	r1, #4
 800a614:	7139      	strb	r1, [r7, #4]
 800a616:	6879      	ldr	r1, [r7, #4]
 800a618:	60d9      	str	r1, [r3, #12]
 800a61a:	2100      	movs	r1, #0
 800a61c:	f36f 0100 	bfc	r1, #0, #1
 800a620:	f36f 0141 	bfc	r1, #1, #1
 800a624:	f36f 0182 	bfc	r1, #2, #1
 800a628:	f36f 01c5 	bfc	r1, #3, #3
 800a62c:	2304      	movs	r3, #4
 800a62e:	f363 1188 	bfi	r1, r3, #6, #3
 800a632:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 800a636:	f363 2152 	bfi	r1, r3, #9, #10
 800a63a:	f36f 41de 	bfc	r1, #19, #12
 800a63e:	f36f 71df 	bfc	r1, #31, #1
 800a642:	2300      	movs	r3, #0
 800a644:	4857      	ldr	r0, [pc, #348]	; (800a7a4 <uart_stm32_isr+0x258>)
 800a646:	f004 fe89 	bl	800f35c <z_impl_z_log_msg2_static_create>
 800a64a:	46cd      	mov	sp, r9
		k_work_reschedule(work, K_USEC(timeout));
 800a64c:	ea26 70e6 	bic.w	r0, r6, r6, asr #31
 800a650:	17c1      	asrs	r1, r0, #31
		t += off;
 800a652:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
 800a654:	f04f 0264 	mov.w	r2, #100	; 0x64
 800a658:	f04f 0300 	mov.w	r3, #0
 800a65c:	f141 0100 	adc.w	r1, r1, #0
 800a660:	f7f6 f9bc 	bl	80009dc <__aeabi_uldivmod>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	4640      	mov	r0, r8
 800a66a:	f001 fc39 	bl	800bee0 <k_work_reschedule>
		if (data->dma_rx.timeout == 0) {
 800a66e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a670:	b163      	cbz	r3, 800a68c <uart_stm32_isr+0x140>
	uart_stm32_err_check(dev);
 800a672:	4620      	mov	r0, r4
 800a674:	f006 f898 	bl	80107a8 <uart_stm32_err_check>
}
 800a678:	3744      	adds	r7, #68	; 0x44
 800a67a:	46bd      	mov	sp, r7
 800a67c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_DBG("async timer started for %d us", timeout);
 800a680:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a684:	e7ad      	b.n	800a5e2 <uart_stm32_isr+0x96>
 800a686:	f06f 001b 	mvn.w	r0, #27
 800a68a:	e7bf      	b.n	800a60c <uart_stm32_isr+0xc0>
			uart_stm32_dma_rx_flush(dev);
 800a68c:	4620      	mov	r0, r4
 800a68e:	f006 f903 	bl	8010898 <uart_stm32_dma_rx_flush>
 800a692:	e7ee      	b.n	800a672 <uart_stm32_isr+0x126>
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a69a:	d06e      	beq.n	800a77a <uart_stm32_isr+0x22e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800a69c:	69da      	ldr	r2, [r3, #28]
 800a69e:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a6a2:	d06a      	beq.n	800a77a <uart_stm32_isr+0x22e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6aa:	601a      	str	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800a6ac:	2240      	movs	r2, #64	; 0x40
 800a6ae:	621a      	str	r2, [r3, #32]
	LOG_DBG("tx done: %d", data->dma_tx.counter);
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	813b      	strh	r3, [r7, #8]
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	817b      	strh	r3, [r7, #10]
 800a6b8:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a6bc:	466e      	mov	r6, sp
 800a6be:	b088      	sub	sp, #32
 800a6c0:	466b      	mov	r3, sp
 800a6c2:	f113 020c 	adds.w	r2, r3, #12
 800a6c6:	d052      	beq.n	800a76e <uart_stm32_isr+0x222>
 800a6c8:	2110      	movs	r1, #16
 800a6ca:	2001      	movs	r0, #1
 800a6cc:	8138      	strh	r0, [r7, #8]
 800a6ce:	b11a      	cbz	r2, 800a6d8 <uart_stm32_isr+0x18c>
 800a6d0:	2904      	cmp	r1, #4
 800a6d2:	dd01      	ble.n	800a6d8 <uart_stm32_isr+0x18c>
 800a6d4:	4836      	ldr	r0, [pc, #216]	; (800a7b0 <uart_stm32_isr+0x264>)
 800a6d6:	6118      	str	r0, [r3, #16]
 800a6d8:	2002      	movs	r0, #2
 800a6da:	8178      	strh	r0, [r7, #10]
 800a6dc:	b11a      	cbz	r2, 800a6e6 <uart_stm32_isr+0x19a>
 800a6de:	2908      	cmp	r1, #8
 800a6e0:	dd01      	ble.n	800a6e6 <uart_stm32_isr+0x19a>
 800a6e2:	4834      	ldr	r0, [pc, #208]	; (800a7b4 <uart_stm32_isr+0x268>)
 800a6e4:	6158      	str	r0, [r3, #20]
 800a6e6:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
 800a6ea:	b122      	cbz	r2, 800a6f6 <uart_stm32_isr+0x1aa>
 800a6ec:	290c      	cmp	r1, #12
 800a6ee:	dd02      	ble.n	800a6f6 <uart_stm32_isr+0x1aa>
 800a6f0:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
 800a6f4:	6198      	str	r0, [r3, #24]
 800a6f6:	290f      	cmp	r1, #15
 800a6f8:	dd3c      	ble.n	800a774 <uart_stm32_isr+0x228>
 800a6fa:	2010      	movs	r0, #16
 800a6fc:	b12a      	cbz	r2, 800a70a <uart_stm32_isr+0x1be>
 800a6fe:	2100      	movs	r1, #0
 800a700:	6079      	str	r1, [r7, #4]
 800a702:	2104      	movs	r1, #4
 800a704:	7139      	strb	r1, [r7, #4]
 800a706:	6879      	ldr	r1, [r7, #4]
 800a708:	60d9      	str	r1, [r3, #12]
 800a70a:	2100      	movs	r1, #0
 800a70c:	f36f 0100 	bfc	r1, #0, #1
 800a710:	f36f 0141 	bfc	r1, #1, #1
 800a714:	f36f 0182 	bfc	r1, #2, #1
 800a718:	f36f 01c5 	bfc	r1, #3, #3
 800a71c:	2304      	movs	r3, #4
 800a71e:	f363 1188 	bfi	r1, r3, #6, #3
 800a722:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 800a726:	f363 2152 	bfi	r1, r3, #9, #10
 800a72a:	f36f 41de 	bfc	r1, #19, #12
 800a72e:	f36f 71df 	bfc	r1, #31, #1
 800a732:	2300      	movs	r3, #0
 800a734:	481b      	ldr	r0, [pc, #108]	; (800a7a4 <uart_stm32_isr+0x258>)
 800a736:	f004 fe11 	bl	800f35c <z_impl_z_log_msg2_static_create>
 800a73a:	46b5      	mov	sp, r6
	struct uart_event event = {
 800a73c:	2300      	movs	r3, #0
 800a73e:	60bb      	str	r3, [r7, #8]
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	613b      	str	r3, [r7, #16]
 800a744:	617b      	str	r3, [r7, #20]
 800a746:	61bb      	str	r3, [r7, #24]
		.data.tx.buf = data->dma_tx.buffer,
 800a748:	f8d5 20fc 	ldr.w	r2, [r5, #252]	; 0xfc
	struct uart_event event = {
 800a74c:	60fa      	str	r2, [r7, #12]
		.data.tx.len = data->dma_tx.counter
 800a74e:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
	struct uart_event event = {
 800a752:	613a      	str	r2, [r7, #16]
	data->dma_tx.buffer_length = 0;
 800a754:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	data->dma_tx.counter = 0;
 800a758:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	if (data->async_cb) {
 800a75c:	68eb      	ldr	r3, [r5, #12]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d087      	beq.n	800a672 <uart_stm32_isr+0x126>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 800a762:	692a      	ldr	r2, [r5, #16]
 800a764:	f107 0108 	add.w	r1, r7, #8
 800a768:	68a8      	ldr	r0, [r5, #8]
 800a76a:	4798      	blx	r3
}
 800a76c:	e781      	b.n	800a672 <uart_stm32_isr+0x126>
	LOG_DBG("tx done: %d", data->dma_tx.counter);
 800a76e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a772:	e7aa      	b.n	800a6ca <uart_stm32_isr+0x17e>
 800a774:	f06f 001b 	mvn.w	r0, #27
 800a778:	e7c0      	b.n	800a6fc <uart_stm32_isr+0x1b0>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	f012 0f20 	tst.w	r2, #32
 800a780:	f43f af77 	beq.w	800a672 <uart_stm32_isr+0x126>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800a784:	69da      	ldr	r2, [r3, #28]
 800a786:	f012 0f20 	tst.w	r2, #32
 800a78a:	f43f af72 	beq.w	800a672 <uart_stm32_isr+0x126>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 800a78e:	8b1a      	ldrh	r2, [r3, #24]
 800a790:	b292      	uxth	r2, r2
 800a792:	f042 0208 	orr.w	r2, r2, #8
 800a796:	831a      	strh	r2, [r3, #24]
}
 800a798:	e76b      	b.n	800a672 <uart_stm32_isr+0x126>
 800a79a:	bf00      	nop
 800a79c:	08013664 	.word	0x08013664
 800a7a0:	080137d8 	.word	0x080137d8
 800a7a4:	0801204c 	.word	0x0801204c
 800a7a8:	08013680 	.word	0x08013680
 800a7ac:	080137e8 	.word	0x080137e8
 800a7b0:	080136a4 	.word	0x080136a4
 800a7b4:	080137c4 	.word	0x080137c4

0800a7b8 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 800a7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7bc:	b096      	sub	sp, #88	; 0x58
 800a7be:	4605      	mov	r5, r0
	const struct uart_stm32_config *config = dev->config;
 800a7c0:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800a7c2:	6907      	ldr	r7, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a7c4:	46b0      	mov	r8, r6
 800a7c6:	f858 4b0c 	ldr.w	r4, [r8], #12
	data->clock = clk;
 800a7ca:	4872      	ldr	r0, [pc, #456]	; (800a994 <uart_stm32_init+0x1dc>)
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	f006 f919 	bl	8010a04 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800a7d2:	b348      	cbz	r0, 800a828 <uart_stm32_init+0x70>
	const struct clock_control_driver_api *api =
 800a7d4:	486f      	ldr	r0, [pc, #444]	; (800a994 <uart_stm32_init+0x1dc>)
 800a7d6:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4641      	mov	r1, r8
 800a7dc:	4798      	blx	r3
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	f040 80d4 	bne.w	800a98c <uart_stm32_init+0x1d4>
	ret = pinctrl_lookup_state(config, id, &state);
 800a7e4:	aa02      	add	r2, sp, #8
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	6a30      	ldr	r0, [r6, #32]
 800a7ea:	f006 f8a9 	bl	8010940 <pinctrl_lookup_state>
	if (ret < 0) {
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	db05      	blt.n	800a7fe <uart_stm32_init+0x46>
	return pinctrl_apply_state_direct(config, state);
 800a7f2:	9b02      	ldr	r3, [sp, #8]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	7919      	ldrb	r1, [r3, #4]
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	f006 f8bb 	bl	8010974 <pinctrl_configure_pins>
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 800a7fe:	2800      	cmp	r0, #0
 800a800:	f2c0 8093 	blt.w	800a92a <uart_stm32_init+0x172>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800a804:	6823      	ldr	r3, [r4, #0]
 800a806:	f023 0301 	bic.w	r3, r3, #1
 800a80a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800a80c:	6823      	ldr	r3, [r4, #0]
 800a80e:	f043 030c 	orr.w	r3, r3, #12
 800a812:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 800a814:	69b3      	ldr	r3, [r6, #24]
 800a816:	2b02      	cmp	r3, #2
 800a818:	d033      	beq.n	800a882 <uart_stm32_init+0xca>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	f000 8088 	beq.w	800a930 <uart_stm32_init+0x178>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 800a820:	b92b      	cbnz	r3, 800a82e <uart_stm32_init+0x76>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800a822:	2100      	movs	r1, #0
		ll_parity = LL_USART_PARITY_NONE;
 800a824:	460b      	mov	r3, r1
 800a826:	e030      	b.n	800a88a <uart_stm32_init+0xd2>
		return -ENODEV;
 800a828:	f06f 0012 	mvn.w	r0, #18
 800a82c:	e7d7      	b.n	800a7de <uart_stm32_init+0x26>
			LOG_WRN("Invalid parity setting '%d'."
 800a82e:	2201      	movs	r2, #1
 800a830:	f8ad 2008 	strh.w	r2, [sp, #8]
 800a834:	4a58      	ldr	r2, [pc, #352]	; (800a998 <uart_stm32_init+0x1e0>)
 800a836:	920e      	str	r2, [sp, #56]	; 0x38
 800a838:	930f      	str	r3, [sp, #60]	; 0x3c
 800a83a:	f04f 0800 	mov.w	r8, #0
 800a83e:	f8cd 8004 	str.w	r8, [sp, #4]
 800a842:	2303      	movs	r3, #3
 800a844:	f88d 3004 	strb.w	r3, [sp, #4]
 800a848:	9b01      	ldr	r3, [sp, #4]
 800a84a:	930d      	str	r3, [sp, #52]	; 0x34
 800a84c:	4641      	mov	r1, r8
 800a84e:	f368 0100 	bfi	r1, r8, #0, #1
 800a852:	f368 0141 	bfi	r1, r8, #1, #1
 800a856:	f368 0182 	bfi	r1, r8, #2, #1
 800a85a:	f368 01c5 	bfi	r1, r8, #3, #3
 800a85e:	2302      	movs	r3, #2
 800a860:	f363 1188 	bfi	r1, r3, #6, #3
 800a864:	230c      	movs	r3, #12
 800a866:	f363 2152 	bfi	r1, r3, #9, #10
 800a86a:	f368 41de 	bfi	r1, r8, #19, #12
 800a86e:	f368 71df 	bfi	r1, r8, #31, #1
 800a872:	4643      	mov	r3, r8
 800a874:	aa0d      	add	r2, sp, #52	; 0x34
 800a876:	4849      	ldr	r0, [pc, #292]	; (800a99c <uart_stm32_init+0x1e4>)
 800a878:	f004 fd70 	bl	800f35c <z_impl_z_log_msg2_static_create>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800a87c:	4641      	mov	r1, r8
		ll_parity = LL_USART_PARITY_NONE;
 800a87e:	4643      	mov	r3, r8
 800a880:	e003      	b.n	800a88a <uart_stm32_init+0xd2>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800a882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800a886:	f44f 6380 	mov.w	r3, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800a88a:	6822      	ldr	r2, [r4, #0]
 800a88c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a890:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800a894:	4319      	orrs	r1, r3
 800a896:	430a      	orrs	r2, r1
 800a898:	6022      	str	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a89a:	6863      	ldr	r3, [r4, #4]
 800a89c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a8a0:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 800a8a2:	7d33      	ldrb	r3, [r6, #20]
 800a8a4:	b12b      	cbz	r3, 800a8b2 <uart_stm32_init+0xfa>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a8a6:	686b      	ldr	r3, [r5, #4]
 800a8a8:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a8aa:	6893      	ldr	r3, [r2, #8]
 800a8ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a8b0:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800a8b2:	f8d7 9000 	ldr.w	r9, [r7]
	struct uart_stm32_data *data = dev->data;
 800a8b6:	692b      	ldr	r3, [r5, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a8b8:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800a8bc:	f858 7b0c 	ldr.w	r7, [r8], #12
	if (clock_control_get_rate(data->clock,
 800a8c0:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800a8c4:	4650      	mov	r0, sl
 800a8c6:	f006 f89d 	bl	8010a04 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d035      	beq.n	800a93a <uart_stm32_init+0x182>
	const struct clock_control_driver_api *api =
 800a8ce:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d033      	beq.n	800a940 <uart_stm32_init+0x188>
	return api->get_rate(dev, sys, rate);
 800a8d8:	466a      	mov	r2, sp
 800a8da:	4641      	mov	r1, r8
 800a8dc:	4650      	mov	r0, sl
 800a8de:	4798      	blx	r3
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	db30      	blt.n	800a946 <uart_stm32_init+0x18e>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8ea:	603b      	str	r3, [r7, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800a8ec:	9b00      	ldr	r3, [sp, #0]
 800a8ee:	eb03 0359 	add.w	r3, r3, r9, lsr #1
 800a8f2:	fbb3 f3f9 	udiv	r3, r3, r9
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	60fb      	str	r3, [r7, #12]

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 800a8fa:	7f33      	ldrb	r3, [r6, #28]
 800a8fc:	b11b      	cbz	r3, 800a906 <uart_stm32_init+0x14e>
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800a8fe:	68a3      	ldr	r3, [r4, #8]
 800a900:	f043 0308 	orr.w	r3, r3, #8
 800a904:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	f043 0301 	orr.w	r3, r3, #1
 800a90c:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800a90e:	69e3      	ldr	r3, [r4, #28]
 800a910:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800a914:	d0fb      	beq.n	800a90e <uart_stm32_init+0x156>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800a916:	69e3      	ldr	r3, [r4, #28]
 800a918:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800a91c:	d0fb      	beq.n	800a916 <uart_stm32_init+0x15e>
	while (!(LL_USART_IsActiveFlag_REACK(UartInstance))) {
	}
#endif /* !USART_ISR_REACK */

#if defined(CONFIG_UART_INTERRUPT_DRIVEN) || defined(CONFIG_UART_ASYNC_API)
	config->uconf.irq_config_func(dev);
 800a91e:	68b3      	ldr	r3, [r6, #8]
 800a920:	4628      	mov	r0, r5
 800a922:	4798      	blx	r3
#elif defined(CONFIG_PM)
	config->irq_config_func(dev);
#endif /* defined(CONFIG_UART_INTERRUPT_DRIVEN) || defined(CONFIG_UART_ASYNC_API) */

#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
 800a924:	4628      	mov	r0, r5
 800a926:	f7ff f937 	bl	8009b98 <uart_stm32_async_init>
#else
	return 0;
#endif
}
 800a92a:	b016      	add	sp, #88	; 0x58
 800a92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800a930:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 800a934:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a938:	e7a7      	b.n	800a88a <uart_stm32_init+0xd2>
		return -ENODEV;
 800a93a:	f06f 0012 	mvn.w	r0, #18
 800a93e:	e7cf      	b.n	800a8e0 <uart_stm32_init+0x128>
		return -ENOSYS;
 800a940:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800a944:	e7cc      	b.n	800a8e0 <uart_stm32_init+0x128>
		LOG_ERR("Failed call clock_control_get_rate");
 800a946:	2201      	movs	r2, #1
 800a948:	f8ad 2008 	strh.w	r2, [sp, #8]
 800a94c:	4b14      	ldr	r3, [pc, #80]	; (800a9a0 <uart_stm32_init+0x1e8>)
 800a94e:	9314      	str	r3, [sp, #80]	; 0x50
 800a950:	2300      	movs	r3, #0
 800a952:	9301      	str	r3, [sp, #4]
 800a954:	2102      	movs	r1, #2
 800a956:	f88d 1004 	strb.w	r1, [sp, #4]
 800a95a:	9901      	ldr	r1, [sp, #4]
 800a95c:	9113      	str	r1, [sp, #76]	; 0x4c
 800a95e:	4619      	mov	r1, r3
 800a960:	f363 0100 	bfi	r1, r3, #0, #1
 800a964:	f363 0141 	bfi	r1, r3, #1, #1
 800a968:	f363 0182 	bfi	r1, r3, #2, #1
 800a96c:	f363 01c5 	bfi	r1, r3, #3, #3
 800a970:	f362 1188 	bfi	r1, r2, #6, #3
 800a974:	2208      	movs	r2, #8
 800a976:	f362 2152 	bfi	r1, r2, #9, #10
 800a97a:	f363 41de 	bfi	r1, r3, #19, #12
 800a97e:	f363 71df 	bfi	r1, r3, #31, #1
 800a982:	aa13      	add	r2, sp, #76	; 0x4c
 800a984:	4805      	ldr	r0, [pc, #20]	; (800a99c <uart_stm32_init+0x1e4>)
 800a986:	f004 fce9 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return;
 800a98a:	e7b6      	b.n	800a8fa <uart_stm32_init+0x142>
		return -EIO;
 800a98c:	f06f 0004 	mvn.w	r0, #4
 800a990:	e7cb      	b.n	800a92a <uart_stm32_init+0x172>
 800a992:	bf00      	nop
 800a994:	08011bf4 	.word	0x08011bf4
 800a998:	080136b4 	.word	0x080136b4
 800a99c:	0801204c 	.word	0x0801204c
 800a9a0:	08012ff4 	.word	0x08012ff4

0800a9a4 <uart_stm32_async_tx>:
{
 800a9a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9a8:	b097      	sub	sp, #92	; 0x5c
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	4605      	mov	r5, r0
	struct uart_stm32_data *data = dev->data;
 800a9ae:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a9b0:	6840      	ldr	r0, [r0, #4]
 800a9b2:	6806      	ldr	r6, [r0, #0]
	if (data->dma_tx.dma_dev == NULL) {
 800a9b4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	f000 812d 	beq.w	800ac18 <uart_stm32_async_tx+0x274>
	if (data->dma_tx.buffer_length != 0) {
 800a9be:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	f040 812b 	bne.w	800ac1e <uart_stm32_async_tx+0x27a>
	data->dma_tx.buffer = (uint8_t *)tx_data;
 800a9c8:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
	data->dma_tx.buffer_length = buf_size;
 800a9cc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	data->dma_tx.timeout = timeout;
 800a9d0:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	LOG_DBG("tx: l=%d", data->dma_tx.buffer_length);
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	813b      	strh	r3, [r7, #8]
 800a9d8:	2302      	movs	r3, #2
 800a9da:	817b      	strh	r3, [r7, #10]
 800a9dc:	46e8      	mov	r8, sp
 800a9de:	b088      	sub	sp, #32
 800a9e0:	466b      	mov	r3, sp
 800a9e2:	f113 020c 	adds.w	r2, r3, #12
 800a9e6:	f000 80c3 	beq.w	800ab70 <uart_stm32_async_tx+0x1cc>
 800a9ea:	2110      	movs	r1, #16
 800a9ec:	2001      	movs	r0, #1
 800a9ee:	8138      	strh	r0, [r7, #8]
 800a9f0:	b11a      	cbz	r2, 800a9fa <uart_stm32_async_tx+0x56>
 800a9f2:	2904      	cmp	r1, #4
 800a9f4:	dd01      	ble.n	800a9fa <uart_stm32_async_tx+0x56>
 800a9f6:	488b      	ldr	r0, [pc, #556]	; (800ac24 <uart_stm32_async_tx+0x280>)
 800a9f8:	6118      	str	r0, [r3, #16]
 800a9fa:	2002      	movs	r0, #2
 800a9fc:	8178      	strh	r0, [r7, #10]
 800a9fe:	b11a      	cbz	r2, 800aa08 <uart_stm32_async_tx+0x64>
 800aa00:	2908      	cmp	r1, #8
 800aa02:	dd01      	ble.n	800aa08 <uart_stm32_async_tx+0x64>
 800aa04:	4888      	ldr	r0, [pc, #544]	; (800ac28 <uart_stm32_async_tx+0x284>)
 800aa06:	6158      	str	r0, [r3, #20]
 800aa08:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800aa0c:	b112      	cbz	r2, 800aa14 <uart_stm32_async_tx+0x70>
 800aa0e:	290c      	cmp	r1, #12
 800aa10:	dd00      	ble.n	800aa14 <uart_stm32_async_tx+0x70>
 800aa12:	6198      	str	r0, [r3, #24]
 800aa14:	290f      	cmp	r1, #15
 800aa16:	f340 80ae 	ble.w	800ab76 <uart_stm32_async_tx+0x1d2>
 800aa1a:	2010      	movs	r0, #16
 800aa1c:	b12a      	cbz	r2, 800aa2a <uart_stm32_async_tx+0x86>
 800aa1e:	2100      	movs	r1, #0
 800aa20:	6079      	str	r1, [r7, #4]
 800aa22:	2104      	movs	r1, #4
 800aa24:	7139      	strb	r1, [r7, #4]
 800aa26:	6879      	ldr	r1, [r7, #4]
 800aa28:	60d9      	str	r1, [r3, #12]
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	f36f 0100 	bfc	r1, #0, #1
 800aa30:	f36f 0141 	bfc	r1, #1, #1
 800aa34:	f36f 0182 	bfc	r1, #2, #1
 800aa38:	f36f 01c5 	bfc	r1, #3, #3
 800aa3c:	2304      	movs	r3, #4
 800aa3e:	f363 1188 	bfi	r1, r3, #6, #3
 800aa42:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 800aa46:	f363 2152 	bfi	r1, r3, #9, #10
 800aa4a:	f36f 41de 	bfc	r1, #19, #12
 800aa4e:	f36f 71df 	bfc	r1, #31, #1
 800aa52:	2300      	movs	r3, #0
 800aa54:	4875      	ldr	r0, [pc, #468]	; (800ac2c <uart_stm32_async_tx+0x288>)
 800aa56:	f004 fc81 	bl	800f35c <z_impl_z_log_msg2_static_create>
 800aa5a:	46c5      	mov	sp, r8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800aa5c:	2340      	movs	r3, #64	; 0x40
 800aa5e:	6233      	str	r3, [r6, #32]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800aa60:	6833      	ldr	r3, [r6, #0]
 800aa62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa66:	6033      	str	r3, [r6, #0]
	data->dma_tx.blk_cfg.source_address = (uint32_t)data->dma_tx.buffer;
 800aa68:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800aa6c:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	data->dma_tx.blk_cfg.block_size = data->dma_tx.buffer_length;
 800aa70:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800aa74:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	ret = dma_config(data->dma_tx.dma_dev, data->dma_tx.dma_channel,
 800aa78:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
	const struct dma_driver_api *api =
 800aa7c:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, channel, config);
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
 800aa84:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800aa88:	4798      	blx	r3
	if (ret != 0) {
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d176      	bne.n	800ab7c <uart_stm32_async_tx+0x1d8>
	if (dma_start(data->dma_tx.dma_dev, data->dma_tx.dma_channel)) {
 800aa8e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800aa92:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	const struct dma_driver_api *api =
 800aa96:	6883      	ldr	r3, [r0, #8]
	return api->start(dev, channel);
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	4798      	blx	r3
 800aa9c:	4606      	mov	r6, r0
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f040 8090 	bne.w	800abc4 <uart_stm32_async_tx+0x220>
	async_timer_start(&data->dma_tx.timeout_work, data->dma_tx.timeout);
 800aaa4:	f504 7888 	add.w	r8, r4, #272	; 0x110
 800aaa8:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
	if ((timeout != SYS_FOREVER_US) && (timeout != 0)) {
 800aaac:	1c63      	adds	r3, r4, #1
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d953      	bls.n	800ab5a <uart_stm32_async_tx+0x1b6>
		LOG_DBG("async timer started for %d us", timeout);
 800aab2:	2301      	movs	r3, #1
 800aab4:	813b      	strh	r3, [r7, #8]
 800aab6:	2302      	movs	r3, #2
 800aab8:	817b      	strh	r3, [r7, #10]
 800aaba:	46e9      	mov	r9, sp
 800aabc:	b088      	sub	sp, #32
 800aabe:	466b      	mov	r3, sp
 800aac0:	f113 020c 	adds.w	r2, r3, #12
 800aac4:	f000 80a2 	beq.w	800ac0c <uart_stm32_async_tx+0x268>
 800aac8:	2110      	movs	r1, #16
 800aaca:	2001      	movs	r0, #1
 800aacc:	8138      	strh	r0, [r7, #8]
 800aace:	b11a      	cbz	r2, 800aad8 <uart_stm32_async_tx+0x134>
 800aad0:	2904      	cmp	r1, #4
 800aad2:	dd01      	ble.n	800aad8 <uart_stm32_async_tx+0x134>
 800aad4:	4856      	ldr	r0, [pc, #344]	; (800ac30 <uart_stm32_async_tx+0x28c>)
 800aad6:	6118      	str	r0, [r3, #16]
 800aad8:	2002      	movs	r0, #2
 800aada:	8178      	strh	r0, [r7, #10]
 800aadc:	b11a      	cbz	r2, 800aae6 <uart_stm32_async_tx+0x142>
 800aade:	2908      	cmp	r1, #8
 800aae0:	dd01      	ble.n	800aae6 <uart_stm32_async_tx+0x142>
 800aae2:	4854      	ldr	r0, [pc, #336]	; (800ac34 <uart_stm32_async_tx+0x290>)
 800aae4:	6158      	str	r0, [r3, #20]
 800aae6:	b112      	cbz	r2, 800aaee <uart_stm32_async_tx+0x14a>
 800aae8:	290c      	cmp	r1, #12
 800aaea:	dd00      	ble.n	800aaee <uart_stm32_async_tx+0x14a>
 800aaec:	619c      	str	r4, [r3, #24]
 800aaee:	290f      	cmp	r1, #15
 800aaf0:	f340 808f 	ble.w	800ac12 <uart_stm32_async_tx+0x26e>
 800aaf4:	2010      	movs	r0, #16
 800aaf6:	b12a      	cbz	r2, 800ab04 <uart_stm32_async_tx+0x160>
 800aaf8:	2100      	movs	r1, #0
 800aafa:	6079      	str	r1, [r7, #4]
 800aafc:	2104      	movs	r1, #4
 800aafe:	7139      	strb	r1, [r7, #4]
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	60d9      	str	r1, [r3, #12]
 800ab04:	2100      	movs	r1, #0
 800ab06:	f36f 0100 	bfc	r1, #0, #1
 800ab0a:	f36f 0141 	bfc	r1, #1, #1
 800ab0e:	f36f 0182 	bfc	r1, #2, #1
 800ab12:	f36f 01c5 	bfc	r1, #3, #3
 800ab16:	2304      	movs	r3, #4
 800ab18:	f363 1188 	bfi	r1, r3, #6, #3
 800ab1c:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 800ab20:	f363 2152 	bfi	r1, r3, #9, #10
 800ab24:	f36f 41de 	bfc	r1, #19, #12
 800ab28:	f36f 71df 	bfc	r1, #31, #1
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	483f      	ldr	r0, [pc, #252]	; (800ac2c <uart_stm32_async_tx+0x288>)
 800ab30:	f004 fc14 	bl	800f35c <z_impl_z_log_msg2_static_create>
 800ab34:	46cd      	mov	sp, r9
		k_work_reschedule(work, K_USEC(timeout));
 800ab36:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800ab3a:	17d9      	asrs	r1, r3, #31
		t += off;
 800ab3c:	f113 0063 	adds.w	r0, r3, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
 800ab40:	f04f 0264 	mov.w	r2, #100	; 0x64
 800ab44:	f04f 0300 	mov.w	r3, #0
 800ab48:	f141 0100 	adc.w	r1, r1, #0
 800ab4c:	f7f5 ff46 	bl	80009dc <__aeabi_uldivmod>
 800ab50:	4602      	mov	r2, r0
 800ab52:	460b      	mov	r3, r1
 800ab54:	4640      	mov	r0, r8
 800ab56:	f001 f9c3 	bl	800bee0 <k_work_reschedule>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800ab5a:	686b      	ldr	r3, [r5, #4]
 800ab5c:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800ab5e:	6893      	ldr	r3, [r2, #8]
 800ab60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab64:	6093      	str	r3, [r2, #8]
}
 800ab66:	4630      	mov	r0, r6
 800ab68:	375c      	adds	r7, #92	; 0x5c
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_DBG("tx: l=%d", data->dma_tx.buffer_length);
 800ab70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab74:	e73a      	b.n	800a9ec <uart_stm32_async_tx+0x48>
 800ab76:	f06f 001b 	mvn.w	r0, #27
 800ab7a:	e74f      	b.n	800aa1c <uart_stm32_async_tx+0x78>
		LOG_ERR("dma tx config error!");
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	813a      	strh	r2, [r7, #8]
 800ab80:	4b2d      	ldr	r3, [pc, #180]	; (800ac38 <uart_stm32_async_tx+0x294>)
 800ab82:	653b      	str	r3, [r7, #80]	; 0x50
 800ab84:	2300      	movs	r3, #0
 800ab86:	607b      	str	r3, [r7, #4]
 800ab88:	2102      	movs	r1, #2
 800ab8a:	7139      	strb	r1, [r7, #4]
 800ab8c:	6879      	ldr	r1, [r7, #4]
 800ab8e:	64f9      	str	r1, [r7, #76]	; 0x4c
 800ab90:	4619      	mov	r1, r3
 800ab92:	f363 0100 	bfi	r1, r3, #0, #1
 800ab96:	f363 0141 	bfi	r1, r3, #1, #1
 800ab9a:	f363 0182 	bfi	r1, r3, #2, #1
 800ab9e:	f363 01c5 	bfi	r1, r3, #3, #3
 800aba2:	f362 1188 	bfi	r1, r2, #6, #3
 800aba6:	2208      	movs	r2, #8
 800aba8:	f362 2152 	bfi	r1, r2, #9, #10
 800abac:	f363 41de 	bfi	r1, r3, #19, #12
 800abb0:	f363 71df 	bfi	r1, r3, #31, #1
 800abb4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800abb8:	481c      	ldr	r0, [pc, #112]	; (800ac2c <uart_stm32_async_tx+0x288>)
 800abba:	f004 fbcf 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800abbe:	f06f 0615 	mvn.w	r6, #21
 800abc2:	e7d0      	b.n	800ab66 <uart_stm32_async_tx+0x1c2>
		LOG_ERR("UART err: TX DMA start failed!");
 800abc4:	2201      	movs	r2, #1
 800abc6:	813a      	strh	r2, [r7, #8]
 800abc8:	4b1c      	ldr	r3, [pc, #112]	; (800ac3c <uart_stm32_async_tx+0x298>)
 800abca:	63bb      	str	r3, [r7, #56]	; 0x38
 800abcc:	2300      	movs	r3, #0
 800abce:	607b      	str	r3, [r7, #4]
 800abd0:	2102      	movs	r1, #2
 800abd2:	7139      	strb	r1, [r7, #4]
 800abd4:	6879      	ldr	r1, [r7, #4]
 800abd6:	6379      	str	r1, [r7, #52]	; 0x34
 800abd8:	4619      	mov	r1, r3
 800abda:	f363 0100 	bfi	r1, r3, #0, #1
 800abde:	f363 0141 	bfi	r1, r3, #1, #1
 800abe2:	f363 0182 	bfi	r1, r3, #2, #1
 800abe6:	f363 01c5 	bfi	r1, r3, #3, #3
 800abea:	f362 1188 	bfi	r1, r2, #6, #3
 800abee:	2208      	movs	r2, #8
 800abf0:	f362 2152 	bfi	r1, r2, #9, #10
 800abf4:	f363 41de 	bfi	r1, r3, #19, #12
 800abf8:	f363 71df 	bfi	r1, r3, #31, #1
 800abfc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ac00:	480a      	ldr	r0, [pc, #40]	; (800ac2c <uart_stm32_async_tx+0x288>)
 800ac02:	f004 fbab 	bl	800f35c <z_impl_z_log_msg2_static_create>
		return -EFAULT;
 800ac06:	f06f 060d 	mvn.w	r6, #13
 800ac0a:	e7ac      	b.n	800ab66 <uart_stm32_async_tx+0x1c2>
		LOG_DBG("async timer started for %d us", timeout);
 800ac0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac10:	e75b      	b.n	800aaca <uart_stm32_async_tx+0x126>
 800ac12:	f06f 001b 	mvn.w	r0, #27
 800ac16:	e76e      	b.n	800aaf6 <uart_stm32_async_tx+0x152>
		return -ENODEV;
 800ac18:	f06f 0612 	mvn.w	r6, #18
 800ac1c:	e7a3      	b.n	800ab66 <uart_stm32_async_tx+0x1c2>
		return -EBUSY;
 800ac1e:	f06f 060f 	mvn.w	r6, #15
 800ac22:	e7a0      	b.n	800ab66 <uart_stm32_async_tx+0x1c2>
 800ac24:	080136e8 	.word	0x080136e8
 800ac28:	080137fc 	.word	0x080137fc
 800ac2c:	0801204c 	.word	0x0801204c
 800ac30:	08013680 	.word	0x08013680
 800ac34:	080137e8 	.word	0x080137e8
 800ac38:	080136f8 	.word	0x080136f8
 800ac3c:	08013710 	.word	0x08013710

0800ac40 <random_byte_get>:
	return 0;
}
#endif /* !STM32_CONDRST_SUPPORT */

static int random_byte_get(void)
{
 800ac40:	b538      	push	{r3, r4, r5, lr}
	int retval = -EAGAIN;
	unsigned int key;
	RNG_TypeDef *rng = entropy_stm32_rng_data.rng;
 800ac42:	4b17      	ldr	r3, [pc, #92]	; (800aca0 <random_byte_get+0x60>)
 800ac44:	681c      	ldr	r4, [r3, #0]
	__asm__ volatile(
 800ac46:	f04f 0310 	mov.w	r3, #16
 800ac4a:	f3ef 8511 	mrs	r5, BASEPRI
 800ac4e:	f383 8812 	msr	BASEPRI_MAX, r3
 800ac52:	f3bf 8f6f 	isb	sy
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_SEIS(RNG_TypeDef *RNGx)
{
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800ac56:	6863      	ldr	r3, [r4, #4]
 800ac58:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ac5c:	d004      	beq.n	800ac68 <random_byte_get+0x28>

	key = irq_lock();

	if (LL_RNG_IsActiveFlag_SEIS(rng) && (recover_seed_error(rng) < 0)) {
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f005 fe40 	bl	80108e4 <recover_seed_error>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	db0b      	blt.n	800ac80 <random_byte_get+0x40>
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 800ac68:	6863      	ldr	r3, [r4, #4]
 800ac6a:	f013 0f01 	tst.w	r3, #1
 800ac6e:	d00a      	beq.n	800ac86 <random_byte_get+0x46>
		retval = -EIO;
		goto out;
	}

	if ((LL_RNG_IsActiveFlag_DRDY(rng) == 1)) {
		if (entropy_stm32_got_error(rng)) {
 800ac70:	4620      	mov	r0, r4
 800ac72:	f005 fe29 	bl	80108c8 <entropy_stm32_got_error>
 800ac76:	b968      	cbnz	r0, 800ac94 <random_byte_get+0x54>
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(RNG_TypeDef *RNGx)
{
  return (uint32_t)(READ_REG(RNGx->DR));
 800ac78:	68a0      	ldr	r0, [r4, #8]
			retval = -EIO;
			goto out;
		}

		retval = LL_RNG_ReadRandData32(rng);
		if (retval == 0) {
 800ac7a:	b170      	cbz	r0, 800ac9a <random_byte_get+0x5a>
			 */
			retval = -EAGAIN;
			goto out;
		}

		retval &= 0xFF;
 800ac7c:	b2c0      	uxtb	r0, r0
 800ac7e:	e004      	b.n	800ac8a <random_byte_get+0x4a>
		retval = -EIO;
 800ac80:	f06f 0004 	mvn.w	r0, #4
 800ac84:	e001      	b.n	800ac8a <random_byte_get+0x4a>
	int retval = -EAGAIN;
 800ac86:	f06f 000a 	mvn.w	r0, #10
	__asm__ volatile(
 800ac8a:	f385 8811 	msr	BASEPRI, r5
 800ac8e:	f3bf 8f6f 	isb	sy

out:
	irq_unlock(key);

	return retval;
}
 800ac92:	bd38      	pop	{r3, r4, r5, pc}
			retval = -EIO;
 800ac94:	f06f 0004 	mvn.w	r0, #4
 800ac98:	e7f7      	b.n	800ac8a <random_byte_get+0x4a>
			retval = -EAGAIN;
 800ac9a:	f06f 000a 	mvn.w	r0, #10
 800ac9e:	e7f4      	b.n	800ac8a <random_byte_get+0x4a>
 800aca0:	20000364 	.word	0x20000364

0800aca4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
 800aca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aca6:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
 800aca8:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
 800acaa:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
 800acac:	f04f 0310 	mov.w	r3, #16
 800acb0:	f3ef 8c11 	mrs	ip, BASEPRI
 800acb4:	f383 8812 	msr	BASEPRI_MAX, r3
 800acb8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
 800acbc:	7806      	ldrb	r6, [r0, #0]
 800acbe:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
 800acc0:	7847      	ldrb	r7, [r0, #1]

	available = (last - first) & mask;
 800acc2:	1bad      	subs	r5, r5, r6
 800acc4:	4025      	ands	r5, r4
	if (available < len) {
 800acc6:	42aa      	cmp	r2, r5
 800acc8:	d900      	bls.n	800accc <rng_pool_get+0x28>
		len = available;
 800acca:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
 800accc:	18b0      	adds	r0, r6, r2
 800acce:	4020      	ands	r0, r4
 800acd0:	f88e 0000 	strb.w	r0, [lr]
	__asm__ volatile(
 800acd4:	f38c 8811 	msr	BASEPRI, ip
 800acd8:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
 800acdc:	4608      	mov	r0, r1
}
 800acde:	e007      	b.n	800acf0 <rng_pool_get+0x4c>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
 800ace0:	eb0e 0203 	add.w	r2, lr, r3
 800ace4:	7952      	ldrb	r2, [r2, #5]
 800ace6:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
 800acea:	3301      	adds	r3, #1
 800acec:	4023      	ands	r3, r4
	while (likely(len--)) {
 800acee:	4662      	mov	r2, ip
 800acf0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800acf4:	fa1f fc8c 	uxth.w	ip, ip
 800acf8:	2a00      	cmp	r2, #0
 800acfa:	d1f1      	bne.n	800ace0 <rng_pool_get+0x3c>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
 800acfc:	42be      	cmp	r6, r7
 800acfe:	d10f      	bne.n	800ad20 <rng_pool_get+0x7c>
	__asm__ volatile(
 800ad00:	f04f 0210 	mov.w	r2, #16
 800ad04:	f3ef 8311 	mrs	r3, BASEPRI
 800ad08:	f382 8812 	msr	BASEPRI_MAX, r2
 800ad0c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
 800ad10:	f89e 2000 	ldrb.w	r2, [lr]
 800ad14:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
 800ad18:	f383 8811 	msr	BASEPRI, r3
 800ad1c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
 800ad20:	1a40      	subs	r0, r0, r1
 800ad22:	b280      	uxth	r0, r0
	available = available - len;
 800ad24:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
 800ad26:	f89e 3004 	ldrb.w	r3, [lr, #4]
 800ad2a:	42ab      	cmp	r3, r5
 800ad2c:	d305      	bcc.n	800ad3a <rng_pool_get+0x96>
		LL_RNG_EnableIT(entropy_stm32_rng_data.rng);
 800ad2e:	4b03      	ldr	r3, [pc, #12]	; (800ad3c <rng_pool_get+0x98>)
 800ad30:	681a      	ldr	r2, [r3, #0]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 800ad32:	6813      	ldr	r3, [r2, #0]
 800ad34:	f043 0308 	orr.w	r3, r3, #8
 800ad38:	6013      	str	r3, [r2, #0]
	}

	return len;
}
 800ad3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad3c:	20000364 	.word	0x20000364

0800ad40 <entropy_stm32_rng_get_entropy_isr>:

static int entropy_stm32_rng_get_entropy_isr(const struct device *dev,
						uint8_t *buf,
						uint16_t len,
					uint32_t flags)
{
 800ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad42:	460d      	mov	r5, r1
 800ad44:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_stm32_rng_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 800ad46:	f013 0f01 	tst.w	r3, #1
 800ad4a:	d103      	bne.n	800ad54 <entropy_stm32_rng_get_entropy_isr+0x14>
		return rng_pool_get(
 800ad4c:	481f      	ldr	r0, [pc, #124]	; (800adcc <entropy_stm32_rng_get_entropy_isr+0x8c>)
 800ad4e:	f7ff ffa9 	bl	800aca4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
 800ad52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
 800ad54:	b90a      	cbnz	r2, 800ad5a <entropy_stm32_rng_get_entropy_isr+0x1a>
	return cnt;
 800ad56:	4620      	mov	r0, r4
 800ad58:	e7fb      	b.n	800ad52 <entropy_stm32_rng_get_entropy_isr+0x12>
	__asm__ volatile(
 800ad5a:	f04f 0310 	mov.w	r3, #16
 800ad5e:	f3ef 8611 	mrs	r6, BASEPRI
 800ad62:	f383 8812 	msr	BASEPRI_MAX, r3
 800ad66:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
 800ad6a:	2050      	movs	r0, #80	; 0x50
 800ad6c:	f7f9 fc5e 	bl	800462c <arch_irq_is_enabled>
 800ad70:	4607      	mov	r7, r0
		irq_disable(IRQN);
 800ad72:	2050      	movs	r0, #80	; 0x50
 800ad74:	f7f9 fc46 	bl	8004604 <arch_irq_disable>
	__asm__ volatile(
 800ad78:	f386 8811 	msr	BASEPRI, r6
 800ad7c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ad80:	4b13      	ldr	r3, [pc, #76]	; (800add0 <entropy_stm32_rng_get_entropy_isr+0x90>)
 800ad82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ad86:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 800ad8a:	4626      	mov	r6, r4
 800ad8c:	e004      	b.n	800ad98 <entropy_stm32_rng_get_entropy_isr+0x58>
  __ASM volatile ("dsb 0xF":::"memory");
 800ad8e:	f3bf 8f4f 	dsb	sy
				__WFE();
 800ad92:	bf20      	wfe
				__SEV();
 800ad94:	bf40      	sev
				__WFE();
 800ad96:	bf20      	wfe
			while (LL_RNG_IsActiveFlag_DRDY(
 800ad98:	4b0e      	ldr	r3, [pc, #56]	; (800add4 <entropy_stm32_rng_get_entropy_isr+0x94>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	f013 0f01 	tst.w	r3, #1
 800ada2:	d0f4      	beq.n	800ad8e <entropy_stm32_rng_get_entropy_isr+0x4e>
			byte = random_byte_get();
 800ada4:	f7ff ff4c 	bl	800ac40 <random_byte_get>
 800ada8:	4b09      	ldr	r3, [pc, #36]	; (800add0 <entropy_stm32_rng_get_entropy_isr+0x90>)
 800adaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800adae:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			if (byte < 0) {
 800adb2:	2800      	cmp	r0, #0
 800adb4:	db02      	blt.n	800adbc <entropy_stm32_rng_get_entropy_isr+0x7c>
			buf[--len] = byte;
 800adb6:	3e01      	subs	r6, #1
 800adb8:	b2b6      	uxth	r6, r6
 800adba:	55a8      	strb	r0, [r5, r6]
		} while (len);
 800adbc:	2e00      	cmp	r6, #0
 800adbe:	d1eb      	bne.n	800ad98 <entropy_stm32_rng_get_entropy_isr+0x58>
		if (irq_enabled) {
 800adc0:	2f00      	cmp	r7, #0
 800adc2:	d0c8      	beq.n	800ad56 <entropy_stm32_rng_get_entropy_isr+0x16>
			irq_enable(IRQN);
 800adc4:	2050      	movs	r0, #80	; 0x50
 800adc6:	f7f9 fc0f 	bl	80045e8 <arch_irq_enable>
 800adca:	e7c4      	b.n	800ad56 <entropy_stm32_rng_get_entropy_isr+0x16>
 800adcc:	2000039c 	.word	0x2000039c
 800add0:	e000e100 	.word	0xe000e100
 800add4:	20000364 	.word	0x20000364

0800add8 <stm32_rng_isr>:
{
 800add8:	b510      	push	{r4, lr}
	byte = random_byte_get();
 800adda:	f7ff ff31 	bl	800ac40 <random_byte_get>
	if (byte < 0) {
 800adde:	2800      	cmp	r0, #0
 800ade0:	db06      	blt.n	800adf0 <stm32_rng_isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_stm32_rng_data.isr),
 800ade2:	b2c4      	uxtb	r4, r0
 800ade4:	4621      	mov	r1, r4
 800ade6:	480b      	ldr	r0, [pc, #44]	; (800ae14 <stm32_rng_isr+0x3c>)
 800ade8:	f005 fd8e 	bl	8010908 <rng_pool_put>
	if (ret < 0) {
 800adec:	2800      	cmp	r0, #0
 800adee:	db00      	blt.n	800adf2 <stm32_rng_isr+0x1a>
}
 800adf0:	bd10      	pop	{r4, pc}
		ret = rng_pool_put(
 800adf2:	4621      	mov	r1, r4
 800adf4:	4808      	ldr	r0, [pc, #32]	; (800ae18 <stm32_rng_isr+0x40>)
 800adf6:	f005 fd87 	bl	8010908 <rng_pool_put>
		if (ret < 0) {
 800adfa:	2800      	cmp	r0, #0
 800adfc:	db03      	blt.n	800ae06 <stm32_rng_isr+0x2e>
	z_impl_k_sem_give(sem);
 800adfe:	4807      	ldr	r0, [pc, #28]	; (800ae1c <stm32_rng_isr+0x44>)
 800ae00:	f000 fe9c 	bl	800bb3c <z_impl_k_sem_give>
}
 800ae04:	e7f4      	b.n	800adf0 <stm32_rng_isr+0x18>
			LL_RNG_DisableIT(entropy_stm32_rng_data.rng);
 800ae06:	4b06      	ldr	r3, [pc, #24]	; (800ae20 <stm32_rng_isr+0x48>)
 800ae08:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(RNGx->CR, RNG_CR_IE);
 800ae0a:	6813      	ldr	r3, [r2, #0]
 800ae0c:	f023 0308 	bic.w	r3, r3, #8
 800ae10:	6013      	str	r3, [r2, #0]
}
 800ae12:	e7f4      	b.n	800adfe <stm32_rng_isr+0x26>
 800ae14:	2000039c 	.word	0x2000039c
 800ae18:	200003b1 	.word	0x200003b1
 800ae1c:	20000384 	.word	0x20000384
 800ae20:	20000364 	.word	0x20000364

0800ae24 <entropy_stm32_rng_get_entropy>:
{
 800ae24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae26:	460f      	mov	r7, r1
 800ae28:	4614      	mov	r4, r2
	while (len) {
 800ae2a:	e007      	b.n	800ae3c <entropy_stm32_rng_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
 800ae2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae34:	f106 0018 	add.w	r0, r6, #24
 800ae38:	f000 fea8 	bl	800bb8c <z_impl_k_sem_take>
 800ae3c:	b1cc      	cbz	r4, 800ae72 <entropy_stm32_rng_get_entropy+0x4e>
 800ae3e:	4d0e      	ldr	r5, [pc, #56]	; (800ae78 <entropy_stm32_rng_get_entropy+0x54>)
 800ae40:	f105 0608 	add.w	r6, r5, #8
 800ae44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f000 fe9d 	bl	800bb8c <z_impl_k_sem_take>
		bytes = rng_pool_get(
 800ae52:	4622      	mov	r2, r4
 800ae54:	4639      	mov	r1, r7
 800ae56:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 800ae5a:	f7ff ff23 	bl	800aca4 <rng_pool_get>
 800ae5e:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 800ae60:	4630      	mov	r0, r6
 800ae62:	f000 fe6b 	bl	800bb3c <z_impl_k_sem_give>
		if (bytes == 0U) {
 800ae66:	2d00      	cmp	r5, #0
 800ae68:	d0e0      	beq.n	800ae2c <entropy_stm32_rng_get_entropy+0x8>
		len -= bytes;
 800ae6a:	1b64      	subs	r4, r4, r5
 800ae6c:	b2a4      	uxth	r4, r4
		buf += bytes;
 800ae6e:	442f      	add	r7, r5
 800ae70:	e7e4      	b.n	800ae3c <entropy_stm32_rng_get_entropy+0x18>
}
 800ae72:	2000      	movs	r0, #0
 800ae74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20000364 	.word	0x20000364

0800ae7c <entropy_stm32_rng_init>:

static int entropy_stm32_rng_init(const struct device *dev)
{
 800ae7c:	b538      	push	{r3, r4, r5, lr}
	const struct entropy_stm32_rng_dev_cfg *dev_cfg;
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	dev_data = dev->data;
 800ae7e:	6904      	ldr	r4, [r0, #16]
	dev_cfg = dev->config;
 800ae80:	6845      	ldr	r5, [r0, #4]
  *         @arg @ref LL_RCC_PLLSAI1Q_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 800ae82:	4b2d      	ldr	r3, [pc, #180]	; (800af38 <entropy_stm32_rng_init+0xbc>)
 800ae84:	68da      	ldr	r2, [r3, #12]
 800ae86:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800ae8a:	f042 0201 	orr.w	r2, r2, #1
 800ae8e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLQ);
 800ae90:	691a      	ldr	r2, [r3, #16]
 800ae92:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800ae96:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800ae9a:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 800ae9e:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800aea6:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLSAI1CFGR  PLLSAI1QEN    LL_RCC_PLLSAI1_EnableDomain_48M
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_48M(void)
{
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN);
 800aea8:	691a      	ldr	r2, [r3, #16]
 800aeaa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aeae:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800aeb0:	4b21      	ldr	r3, [pc, #132]	; (800af38 <entropy_stm32_rng_init+0xbc>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800aeb8:	d0fa      	beq.n	800aeb0 <entropy_stm32_rng_init+0x34>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, RNGxSource);
 800aeba:	4a1f      	ldr	r2, [pc, #124]	; (800af38 <entropy_stm32_rng_init+0xbc>)
 800aebc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800aec0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800aec4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	z_stm32_hsem_unlock(CFG_HW_CLK48_CONFIG_SEMID);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

#endif /* CONFIG_SOC_SERIES_STM32L4X */

	dev_data->clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
 800aecc:	481b      	ldr	r0, [pc, #108]	; (800af3c <entropy_stm32_rng_init+0xc0>)
 800aece:	6060      	str	r0, [r4, #4]
 800aed0:	f005 fd98 	bl	8010a04 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800aed4:	b120      	cbz	r0, 800aee0 <entropy_stm32_rng_init+0x64>
	const struct clock_control_driver_api *api =
 800aed6:	4819      	ldr	r0, [pc, #100]	; (800af3c <entropy_stm32_rng_init+0xc0>)
 800aed8:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4629      	mov	r1, r5
 800aede:	4798      	blx	r3
#endif
	/* Write RNG HTCR configuration */
	LL_RNG_SetHealthConfig(dev_data->rng, DT_INST_PROP(0, health_test_config));
#endif

	LL_RNG_EnableIT(dev_data->rng);
 800aee0:	6822      	ldr	r2, [r4, #0]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 800aee2:	6813      	ldr	r3, [r2, #0]
 800aee4:	f043 0308 	orr.w	r3, r3, #8
 800aee8:	6013      	str	r3, [r2, #0]

	LL_RNG_Enable(dev_data->rng);
 800aeea:	4620      	mov	r0, r4
 800aeec:	f850 2b08 	ldr.w	r2, [r0], #8
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800aef0:	6813      	ldr	r3, [r2, #0]
 800aef2:	f043 0304 	orr.w	r3, r3, #4
 800aef6:	6013      	str	r3, [r2, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
 800aef8:	2201      	movs	r2, #1
 800aefa:	4611      	mov	r1, r2
 800aefc:	f005 fe30 	bl	8010b60 <z_impl_k_sem_init>

	/* Locking semaphore initialized to 1 (unlocked) */
	k_sem_init(&dev_data->sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&dev_data->sem_sync, 0, 1);
 800af00:	f104 0020 	add.w	r0, r4, #32
 800af04:	2201      	movs	r2, #1
 800af06:	2100      	movs	r1, #0
 800af08:	f005 fe2a 	bl	8010b60 <z_impl_k_sem_init>

	rng_pool_init((struct rng_pool *)(dev_data->thr),
 800af0c:	2204      	movs	r2, #4
 800af0e:	2108      	movs	r1, #8
 800af10:	f104 004d 	add.w	r0, r4, #77	; 0x4d
 800af14:	f005 fd0c 	bl	8010930 <rng_pool_init>
		      CONFIG_ENTROPY_STM32_THR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(dev_data->isr),
 800af18:	220c      	movs	r2, #12
 800af1a:	2110      	movs	r1, #16
 800af1c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800af20:	f005 fd06 	bl	8010930 <rng_pool_init>
		      CONFIG_ENTROPY_STM32_ISR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_ISR_THRESHOLD);

	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 800af24:	2200      	movs	r2, #0
 800af26:	4611      	mov	r1, r2
 800af28:	2050      	movs	r0, #80	; 0x50
 800af2a:	f7f9 fb8d 	bl	8004648 <z_arm_irq_priority_set>
	irq_enable(IRQN);
 800af2e:	2050      	movs	r0, #80	; 0x50
 800af30:	f7f9 fb5a 	bl	80045e8 <arch_irq_enable>

	return 0;
}
 800af34:	2000      	movs	r0, #0
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	40021000 	.word	0x40021000
 800af3c:	08011bf4 	.word	0x08011bf4

0800af40 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800af40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800af44:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 800af46:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 800af48:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800af4a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800af4e:	d101      	bne.n	800af54 <elapsed+0x14>
	    || (val1 < val2)) {
 800af50:	4281      	cmp	r1, r0
 800af52:	d208      	bcs.n	800af66 <elapsed+0x26>
		overflow_cyc += last_load;
 800af54:	4b07      	ldr	r3, [pc, #28]	; (800af74 <elapsed+0x34>)
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	4907      	ldr	r1, [pc, #28]	; (800af78 <elapsed+0x38>)
 800af5a:	6809      	ldr	r1, [r1, #0]
 800af5c:	440a      	add	r2, r1
 800af5e:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800af60:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800af64:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 800af66:	4b04      	ldr	r3, [pc, #16]	; (800af78 <elapsed+0x38>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	1a1b      	subs	r3, r3, r0
 800af6c:	4a01      	ldr	r2, [pc, #4]	; (800af74 <elapsed+0x34>)
 800af6e:	6810      	ldr	r0, [r2, #0]
}
 800af70:	4418      	add	r0, r3
 800af72:	4770      	bx	lr
 800af74:	2000142c 	.word	0x2000142c
 800af78:	20001428 	.word	0x20001428

0800af7c <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af7c:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <sys_clock_driver_init+0x28>)
 800af7e:	2210      	movs	r2, #16
 800af80:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800af84:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800af88:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <sys_clock_driver_init+0x2c>)
 800af8a:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 800af8c:	2000      	movs	r0, #0
 800af8e:	4b07      	ldr	r3, [pc, #28]	; (800afac <sys_clock_driver_init+0x30>)
 800af90:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800af92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800af96:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800af98:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800af9a:	691a      	ldr	r2, [r3, #16]
 800af9c:	f042 0207 	orr.w	r2, r2, #7
 800afa0:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800afa2:	4770      	bx	lr
 800afa4:	e000ed00 	.word	0xe000ed00
 800afa8:	20001428 	.word	0x20001428
 800afac:	2000142c 	.word	0x2000142c

0800afb0 <sys_clock_isr>:
{
 800afb0:	b508      	push	{r3, lr}
	elapsed();
 800afb2:	f7ff ffc5 	bl	800af40 <elapsed>
	cycle_count += overflow_cyc;
 800afb6:	4b0c      	ldr	r3, [pc, #48]	; (800afe8 <sys_clock_isr+0x38>)
 800afb8:	6818      	ldr	r0, [r3, #0]
 800afba:	4a0c      	ldr	r2, [pc, #48]	; (800afec <sys_clock_isr+0x3c>)
 800afbc:	6811      	ldr	r1, [r2, #0]
 800afbe:	4408      	add	r0, r1
 800afc0:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800afc2:	2200      	movs	r2, #0
 800afc4:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800afc6:	4a0a      	ldr	r2, [pc, #40]	; (800aff0 <sys_clock_isr+0x40>)
 800afc8:	6813      	ldr	r3, [r2, #0]
 800afca:	1ac0      	subs	r0, r0, r3
 800afcc:	4909      	ldr	r1, [pc, #36]	; (800aff4 <sys_clock_isr+0x44>)
 800afce:	fba1 1000 	umull	r1, r0, r1, r0
 800afd2:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 800afd4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800afd8:	fb01 3300 	mla	r3, r1, r0, r3
 800afdc:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 800afde:	f001 fc67 	bl	800c8b0 <sys_clock_announce>
	z_arm_int_exit();
 800afe2:	f7f9 fc33 	bl	800484c <z_arm_exc_exit>
}
 800afe6:	bd08      	pop	{r3, pc}
 800afe8:	2000142c 	.word	0x2000142c
 800afec:	20001424 	.word	0x20001424
 800aff0:	20001420 	.word	0x20001420
 800aff4:	10624dd3 	.word	0x10624dd3

0800aff8 <sys_clock_set_timeout>:
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 800aff8:	b111      	cbz	r1, 800b000 <sys_clock_set_timeout+0x8>
 800affa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800affe:	d03a      	beq.n	800b076 <sys_clock_set_timeout+0x7e>
{
 800b000:	b570      	push	{r4, r5, r6, lr}
	uint32_t last_load_ = last_load;
 800b002:	4b38      	ldr	r3, [pc, #224]	; (800b0e4 <sys_clock_set_timeout+0xec>)
 800b004:	681d      	ldr	r5, [r3, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800b006:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b00a:	d03f      	beq.n	800b08c <sys_clock_set_timeout+0x94>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800b00c:	2801      	cmp	r0, #1
 800b00e:	dd40      	ble.n	800b092 <sys_clock_set_timeout+0x9a>
 800b010:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 800b014:	dc3f      	bgt.n	800b096 <sys_clock_set_timeout+0x9e>
 800b016:	1e44      	subs	r4, r0, #1
	__asm__ volatile(
 800b018:	f04f 0310 	mov.w	r3, #16
 800b01c:	f3ef 8611 	mrs	r6, BASEPRI
 800b020:	f383 8812 	msr	BASEPRI_MAX, r3
 800b024:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 800b028:	f7ff ff8a 	bl	800af40 <elapsed>
	val1 = SysTick->VAL;
 800b02c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b030:	6999      	ldr	r1, [r3, #24]
	cycle_count += pending;
 800b032:	4b2d      	ldr	r3, [pc, #180]	; (800b0e8 <sys_clock_set_timeout+0xf0>)
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	4410      	add	r0, r2
 800b038:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 800b03a:	4b2c      	ldr	r3, [pc, #176]	; (800b0ec <sys_clock_set_timeout+0xf4>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800b040:	4b2b      	ldr	r3, [pc, #172]	; (800b0f0 <sys_clock_set_timeout+0xf8>)
 800b042:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800b044:	1a83      	subs	r3, r0, r2
 800b046:	d429      	bmi.n	800b09c <sys_clock_set_timeout+0xa4>
		delay = ticks * CYC_PER_TICK;
 800b048:	f44f 5cfa 	mov.w	ip, #8000	; 0x1f40
		delay += unannounced;
 800b04c:	fb0c 3304 	mla	r3, ip, r4, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800b050:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 800b054:	331f      	adds	r3, #31
 800b056:	4c27      	ldr	r4, [pc, #156]	; (800b0f4 <sys_clock_set_timeout+0xfc>)
 800b058:	fba4 4303 	umull	r4, r3, r4, r3
 800b05c:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 800b05e:	1a12      	subs	r2, r2, r0
 800b060:	fb0c 2303 	mla	r3, ip, r3, r2
		delay = MAX(delay, MIN_DELAY);
 800b064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b068:	d91d      	bls.n	800b0a6 <sys_clock_set_timeout+0xae>
		if (delay > MAX_CYCLES) {
 800b06a:	4a23      	ldr	r2, [pc, #140]	; (800b0f8 <sys_clock_set_timeout+0x100>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d91c      	bls.n	800b0aa <sys_clock_set_timeout+0xb2>
			last_load = MAX_CYCLES;
 800b070:	4b1c      	ldr	r3, [pc, #112]	; (800b0e4 <sys_clock_set_timeout+0xec>)
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	e01b      	b.n	800b0ae <sys_clock_set_timeout+0xb6>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800b076:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800b07a:	6913      	ldr	r3, [r2, #16]
 800b07c:	f023 0301 	bic.w	r3, r3, #1
 800b080:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 800b082:	4b18      	ldr	r3, [pc, #96]	; (800b0e4 <sys_clock_set_timeout+0xec>)
 800b084:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800b088:	601a      	str	r2, [r3, #0]
		return;
 800b08a:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800b08c:	f44f 6003 	mov.w	r0, #2096	; 0x830
 800b090:	e7be      	b.n	800b010 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800b092:	2400      	movs	r4, #0
 800b094:	e7c0      	b.n	800b018 <sys_clock_set_timeout+0x20>
 800b096:	f44f 6403 	mov.w	r4, #2096	; 0x830
 800b09a:	e7bd      	b.n	800b018 <sys_clock_set_timeout+0x20>
		last_load = MIN_DELAY;
 800b09c:	4b11      	ldr	r3, [pc, #68]	; (800b0e4 <sys_clock_set_timeout+0xec>)
 800b09e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0a2:	601a      	str	r2, [r3, #0]
 800b0a4:	e003      	b.n	800b0ae <sys_clock_set_timeout+0xb6>
		delay = MAX(delay, MIN_DELAY);
 800b0a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 800b0aa:	4a0e      	ldr	r2, [pc, #56]	; (800b0e4 <sys_clock_set_timeout+0xec>)
 800b0ac:	6013      	str	r3, [r2, #0]
	val2 = SysTick->VAL;
 800b0ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b0b2:	699c      	ldr	r4, [r3, #24]
	SysTick->LOAD = last_load - 1;
 800b0b4:	4a0b      	ldr	r2, [pc, #44]	; (800b0e4 <sys_clock_set_timeout+0xec>)
 800b0b6:	6812      	ldr	r2, [r2, #0]
 800b0b8:	3a01      	subs	r2, #1
 800b0ba:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800b0bc:	2200      	movs	r2, #0
 800b0be:	619a      	str	r2, [r3, #24]
	if (val1 < val2) {
 800b0c0:	42a1      	cmp	r1, r4
 800b0c2:	d209      	bcs.n	800b0d8 <sys_clock_set_timeout+0xe0>
		cycle_count += (val1 + (last_load_ - val2));
 800b0c4:	1b2d      	subs	r5, r5, r4
 800b0c6:	440d      	add	r5, r1
 800b0c8:	4428      	add	r0, r5
 800b0ca:	4b07      	ldr	r3, [pc, #28]	; (800b0e8 <sys_clock_set_timeout+0xf0>)
 800b0cc:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 800b0ce:	f386 8811 	msr	BASEPRI, r6
 800b0d2:	f3bf 8f6f 	isb	sy
}
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 800b0d8:	1b0d      	subs	r5, r1, r4
 800b0da:	4428      	add	r0, r5
 800b0dc:	4b02      	ldr	r3, [pc, #8]	; (800b0e8 <sys_clock_set_timeout+0xf0>)
 800b0de:	6018      	str	r0, [r3, #0]
 800b0e0:	e7f5      	b.n	800b0ce <sys_clock_set_timeout+0xd6>
 800b0e2:	bf00      	nop
 800b0e4:	20001428 	.word	0x20001428
 800b0e8:	20001424 	.word	0x20001424
 800b0ec:	2000142c 	.word	0x2000142c
 800b0f0:	20001420 	.word	0x20001420
 800b0f4:	10624dd3 	.word	0x10624dd3
 800b0f8:	00ffdc00 	.word	0x00ffdc00

0800b0fc <sys_clock_elapsed>:
{
 800b0fc:	b510      	push	{r4, lr}
	__asm__ volatile(
 800b0fe:	f04f 0310 	mov.w	r3, #16
 800b102:	f3ef 8411 	mrs	r4, BASEPRI
 800b106:	f383 8812 	msr	BASEPRI_MAX, r3
 800b10a:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800b10e:	f7ff ff17 	bl	800af40 <elapsed>
 800b112:	4b07      	ldr	r3, [pc, #28]	; (800b130 <sys_clock_elapsed+0x34>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4418      	add	r0, r3
 800b118:	4b06      	ldr	r3, [pc, #24]	; (800b134 <sys_clock_elapsed+0x38>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 800b11e:	f384 8811 	msr	BASEPRI, r4
 800b122:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
 800b126:	4b04      	ldr	r3, [pc, #16]	; (800b138 <sys_clock_elapsed+0x3c>)
 800b128:	fba3 3000 	umull	r3, r0, r3, r0
}
 800b12c:	0a40      	lsrs	r0, r0, #9
 800b12e:	bd10      	pop	{r4, pc}
 800b130:	20001424 	.word	0x20001424
 800b134:	20001420 	.word	0x20001420
 800b138:	10624dd3 	.word	0x10624dd3

0800b13c <sys_clock_cycle_get_32>:
{
 800b13c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800b13e:	f04f 0310 	mov.w	r3, #16
 800b142:	f3ef 8411 	mrs	r4, BASEPRI
 800b146:	f383 8812 	msr	BASEPRI_MAX, r3
 800b14a:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 800b14e:	f7ff fef7 	bl	800af40 <elapsed>
 800b152:	4b04      	ldr	r3, [pc, #16]	; (800b164 <sys_clock_cycle_get_32+0x28>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4418      	add	r0, r3
	__asm__ volatile(
 800b158:	f384 8811 	msr	BASEPRI, r4
 800b15c:	f3bf 8f6f 	isb	sy
}
 800b160:	bd10      	pop	{r4, pc}
 800b162:	bf00      	nop
 800b164:	20001424 	.word	0x20001424

0800b168 <stm32_pin_configure>:

static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;

	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800b168:	28af      	cmp	r0, #175	; 0xaf
 800b16a:	d817      	bhi.n	800b19c <stm32_pin_configure+0x34>
{
 800b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16e:	4604      	mov	r4, r0
 800b170:	460d      	mov	r5, r1
 800b172:	4616      	mov	r6, r2
 800b174:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 800b176:	4a0b      	ldr	r2, [pc, #44]	; (800b1a4 <stm32_pin_configure+0x3c>)
 800b178:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800b17c:	b15f      	cbz	r7, 800b196 <stm32_pin_configure+0x2e>
 800b17e:	4638      	mov	r0, r7
 800b180:	f005 fc40 	bl	8010a04 <z_device_is_ready>
 800b184:	b138      	cbz	r0, 800b196 <stm32_pin_configure+0x2e>
		return -ENODEV;
	}

	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 800b186:	4633      	mov	r3, r6
 800b188:	462a      	mov	r2, r5
 800b18a:	f004 010f 	and.w	r1, r4, #15
 800b18e:	4638      	mov	r0, r7
 800b190:	f004 fdad 	bl	800fcee <gpio_stm32_configure>
}
 800b194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
 800b196:	f06f 0012 	mvn.w	r0, #18
 800b19a:	e7fb      	b.n	800b194 <stm32_pin_configure+0x2c>
		return -EINVAL;
 800b19c:	f06f 0015 	mvn.w	r0, #21
}
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	0801393c 	.word	0x0801393c

0800b1a8 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800b1a8:	b530      	push	{r4, r5, lr}
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800b1aa:	6893      	ldr	r3, [r2, #8]
                        DMA_InitStruct->Mode                   | \
 800b1ac:	68d4      	ldr	r4, [r2, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800b1ae:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800b1b0:	6914      	ldr	r4, [r2, #16]
                        DMA_InitStruct->Mode                   | \
 800b1b2:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800b1b4:	6954      	ldr	r4, [r2, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800b1b6:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800b1b8:	6994      	ldr	r4, [r2, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800b1ba:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800b1bc:	69d4      	ldr	r4, [r2, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800b1be:	4323      	orrs	r3, r4
                        DMA_InitStruct->Priority);
 800b1c0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800b1c2:	4323      	orrs	r3, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800b1c4:	4c17      	ldr	r4, [pc, #92]	; (800b224 <LL_DMA_Init+0x7c>)
 800b1c6:	5c65      	ldrb	r5, [r4, r1]
 800b1c8:	eb00 0e05 	add.w	lr, r0, r5
 800b1cc:	5944      	ldr	r4, [r0, r5]
 800b1ce:	f424 4cff 	bic.w	ip, r4, #32640	; 0x7f80
 800b1d2:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800b1d6:	ea43 030c 	orr.w	r3, r3, ip
 800b1da:	5143      	str	r3, [r0, r5]

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800b1dc:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800b1de:	f8ce 300c 	str.w	r3, [lr, #12]

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800b1e2:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800b1e4:	f8ce 3008 	str.w	r3, [lr, #8]

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800b1e8:	6a14      	ldr	r4, [r2, #32]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800b1ea:	f8de 3004 	ldr.w	r3, [lr, #4]
 800b1ee:	0c1b      	lsrs	r3, r3, #16
 800b1f0:	041b      	lsls	r3, r3, #16
 800b1f2:	4323      	orrs	r3, r4
 800b1f4:	f8ce 3004 	str.w	r3, [lr, #4]
#else
  /*--------------------------- DMAx CSELR Configuration -----------------------
   * Configure the DMA request for DMA instance on Channel x with parameter :
   * - PeriphRequest: DMA_CSELR[31:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800b1f8:	6a54      	ldr	r4, [r2, #36]	; 0x24
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 800b1fa:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 800b1fe:	008a      	lsls	r2, r1, #2
 800b200:	210f      	movs	r1, #15
 800b202:	4091      	lsls	r1, r2
 800b204:	ea23 0301 	bic.w	r3, r3, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b208:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 800b20c:	b141      	cbz	r1, 800b220 <LL_DMA_Init+0x78>
  return __builtin_clz(value);
 800b20e:	fab1 f181 	clz	r1, r1
 800b212:	fa04 f101 	lsl.w	r1, r4, r1
 800b216:	4319      	orrs	r1, r3
 800b218:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
#endif /* DMAMUX1 */

  return SUCCESS;
}
 800b21c:	2000      	movs	r0, #0
 800b21e:	bd30      	pop	{r4, r5, pc}
    return 32U;
 800b220:	2120      	movs	r1, #32
 800b222:	e7f6      	b.n	800b212 <LL_DMA_Init+0x6a>
 800b224:	08013978 	.word	0x08013978

0800b228 <UTILS_PLL_IsBusy>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800b228:	4b07      	ldr	r3, [pc, #28]	; (800b248 <UTILS_PLL_IsBusy+0x20>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b230:	d007      	beq.n	800b242 <UTILS_PLL_IsBusy+0x1a>

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 800b232:	2001      	movs	r0, #1
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800b234:	4b04      	ldr	r3, [pc, #16]	; (800b248 <UTILS_PLL_IsBusy+0x20>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800b23c:	d000      	beq.n	800b240 <UTILS_PLL_IsBusy+0x18>
#if defined(RCC_PLLSAI1_SUPPORT)
  /* Check if PLLSAI1 is busy*/
  if(LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
 800b23e:	2001      	movs	r0, #1
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 800b240:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 800b242:	2000      	movs	r0, #0
 800b244:	e7f6      	b.n	800b234 <UTILS_PLL_IsBusy+0xc>
 800b246:	bf00      	nop
 800b248:	40021000 	.word	0x40021000

0800b24c <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 800b24c:	4b01      	ldr	r3, [pc, #4]	; (800b254 <LL_SetSystemCoreClock+0x8>)
 800b24e:	6018      	str	r0, [r3, #0]
}
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	200003c0 	.word	0x200003c0

0800b258 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 800b258:	1e42      	subs	r2, r0, #1
 800b25a:	4b29      	ldr	r3, [pc, #164]	; (800b300 <LL_SetFlashLatency+0xa8>)
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d84c      	bhi.n	800b2fa <LL_SetFlashLatency+0xa2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 800b260:	4b28      	ldr	r3, [pc, #160]	; (800b304 <LL_SetFlashLatency+0xac>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800b268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b26c:	d011      	beq.n	800b292 <LL_SetFlashLatency+0x3a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 800b26e:	4b26      	ldr	r3, [pc, #152]	; (800b308 <LL_SetFlashLatency+0xb0>)
 800b270:	4298      	cmp	r0, r3
 800b272:	d829      	bhi.n	800b2c8 <LL_SetFlashLatency+0x70>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 800b274:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 800b278:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 800b27c:	4298      	cmp	r0, r3
 800b27e:	d832      	bhi.n	800b2e6 <LL_SetFlashLatency+0x8e>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 800b280:	4b22      	ldr	r3, [pc, #136]	; (800b30c <LL_SetFlashLatency+0xb4>)
 800b282:	4298      	cmp	r0, r3
 800b284:	d832      	bhi.n	800b2ec <LL_SetFlashLatency+0x94>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800b286:	4b22      	ldr	r3, [pc, #136]	; (800b310 <LL_SetFlashLatency+0xb8>)
 800b288:	4298      	cmp	r0, r3
 800b28a:	d832      	bhi.n	800b2f2 <LL_SetFlashLatency+0x9a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800b28c:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800b28e:	4608      	mov	r0, r1
 800b290:	e01c      	b.n	800b2cc <LL_SetFlashLatency+0x74>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 800b292:	4b20      	ldr	r3, [pc, #128]	; (800b314 <LL_SetFlashLatency+0xbc>)
 800b294:	4298      	cmp	r0, r3
 800b296:	d80b      	bhi.n	800b2b0 <LL_SetFlashLatency+0x58>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 800b298:	4b1f      	ldr	r3, [pc, #124]	; (800b318 <LL_SetFlashLatency+0xc0>)
 800b29a:	4298      	cmp	r0, r3
 800b29c:	d80b      	bhi.n	800b2b6 <LL_SetFlashLatency+0x5e>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 800b29e:	4b1f      	ldr	r3, [pc, #124]	; (800b31c <LL_SetFlashLatency+0xc4>)
 800b2a0:	4298      	cmp	r0, r3
 800b2a2:	d80b      	bhi.n	800b2bc <LL_SetFlashLatency+0x64>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 800b2a4:	4b1e      	ldr	r3, [pc, #120]	; (800b320 <LL_SetFlashLatency+0xc8>)
 800b2a6:	4298      	cmp	r0, r3
 800b2a8:	d80b      	bhi.n	800b2c2 <LL_SetFlashLatency+0x6a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800b2aa:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800b2ac:	4608      	mov	r0, r1
 800b2ae:	e00d      	b.n	800b2cc <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_4;
 800b2b0:	2104      	movs	r1, #4
  ErrorStatus status = SUCCESS;
 800b2b2:	2000      	movs	r0, #0
 800b2b4:	e00a      	b.n	800b2cc <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_3;
 800b2b6:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e007      	b.n	800b2cc <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 800b2bc:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 800b2be:	2000      	movs	r0, #0
 800b2c0:	e004      	b.n	800b2cc <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 800b2c2:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	e001      	b.n	800b2cc <LL_SetFlashLatency+0x74>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800b2c8:	2100      	movs	r1, #0
        status = ERROR;
 800b2ca:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800b2cc:	4a15      	ldr	r2, [pc, #84]	; (800b324 <LL_SetFlashLatency+0xcc>)
 800b2ce:	6813      	ldr	r3, [r2, #0]
 800b2d0:	f023 0307 	bic.w	r3, r3, #7
 800b2d4:	430b      	orrs	r3, r1
 800b2d6:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800b2d8:	6813      	ldr	r3, [r2, #0]
 800b2da:	f003 0307 	and.w	r3, r3, #7
    if(LL_FLASH_GetLatency() != latency)
 800b2de:	4299      	cmp	r1, r3
 800b2e0:	d00a      	beq.n	800b2f8 <LL_SetFlashLatency+0xa0>
      status = ERROR;
 800b2e2:	2001      	movs	r0, #1
}
 800b2e4:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 800b2e6:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	e7ef      	b.n	800b2cc <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 800b2ec:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 800b2ee:	2000      	movs	r0, #0
 800b2f0:	e7ec      	b.n	800b2cc <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 800b2f2:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	e7e9      	b.n	800b2cc <LL_SetFlashLatency+0x74>
 800b2f8:	4770      	bx	lr
    status = ERROR;
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	04c4b3ff 	.word	0x04c4b3ff
 800b304:	40007000 	.word	0x40007000
 800b308:	018cba80 	.word	0x018cba80
 800b30c:	00b71b00 	.word	0x00b71b00
 800b310:	005b8d80 	.word	0x005b8d80
 800b314:	03d09000 	.word	0x03d09000
 800b318:	02dc6c00 	.word	0x02dc6c00
 800b31c:	01e84800 	.word	0x01e84800
 800b320:	00f42400 	.word	0x00f42400
 800b324:	40022000 	.word	0x40022000

0800b328 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 800b328:	b570      	push	{r4, r5, r6, lr}
 800b32a:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800b32c:	680b      	ldr	r3, [r1, #0]
 800b32e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b332:	4a26      	ldr	r2, [pc, #152]	; (800b3cc <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 800b334:	5cd3      	ldrb	r3, [r2, r3]
 800b336:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 800b33a:	4b25      	ldr	r3, [pc, #148]	; (800b3d0 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	42ab      	cmp	r3, r5
 800b340:	d333      	bcc.n	800b3aa <UTILS_EnablePLLAndSwitchSystem+0x82>
  ErrorStatus status = SUCCESS;
 800b342:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800b344:	4b23      	ldr	r3, [pc, #140]	; (800b3d4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b34c:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800b34e:	68da      	ldr	r2, [r3, #12]
 800b350:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b354:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800b356:	4b1f      	ldr	r3, [pc, #124]	; (800b3d4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b35e:	d0fa      	beq.n	800b356 <UTILS_EnablePLLAndSwitchSystem+0x2e>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 800b360:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800b362:	4b1c      	ldr	r3, [pc, #112]	; (800b3d4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800b364:	6899      	ldr	r1, [r3, #8]
 800b366:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800b36a:	430a      	orrs	r2, r1
 800b36c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800b36e:	689a      	ldr	r2, [r3, #8]
 800b370:	f042 0203 	orr.w	r2, r2, #3
 800b374:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b376:	4b17      	ldr	r3, [pc, #92]	; (800b3d4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800b37e:	2b0c      	cmp	r3, #12
 800b380:	d1f9      	bne.n	800b376 <UTILS_EnablePLLAndSwitchSystem+0x4e>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 800b382:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800b384:	4b13      	ldr	r3, [pc, #76]	; (800b3d4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800b386:	6899      	ldr	r1, [r3, #8]
 800b388:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800b38c:	430a      	orrs	r2, r1
 800b38e:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 800b390:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800b392:	6899      	ldr	r1, [r3, #8]
 800b394:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 800b398:	430a      	orrs	r2, r1
 800b39a:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 800b39c:	4b0c      	ldr	r3, [pc, #48]	; (800b3d0 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	42ab      	cmp	r3, r5
 800b3a2:	d809      	bhi.n	800b3b8 <UTILS_EnablePLLAndSwitchSystem+0x90>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 800b3a4:	b16e      	cbz	r6, 800b3c2 <UTILS_EnablePLLAndSwitchSystem+0x9a>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	f7ff ff54 	bl	800b258 <LL_SetFlashLatency>
  if(status == SUCCESS)
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d1f2      	bne.n	800b39c <UTILS_EnablePLLAndSwitchSystem+0x74>
 800b3b6:	e7c5      	b.n	800b344 <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	f7ff ff4d 	bl	800b258 <LL_SetFlashLatency>
 800b3be:	4606      	mov	r6, r0
 800b3c0:	e7f0      	b.n	800b3a4 <UTILS_EnablePLLAndSwitchSystem+0x7c>
    LL_SetSystemCoreClock(hclk_frequency);
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	f7ff ff42 	bl	800b24c <LL_SetSystemCoreClock>
 800b3c8:	e7ed      	b.n	800b3a6 <UTILS_EnablePLLAndSwitchSystem+0x7e>
 800b3ca:	bf00      	nop
 800b3cc:	08013968 	.word	0x08013968
 800b3d0:	200003c0 	.word	0x200003c0
 800b3d4:	40021000 	.word	0x40021000

0800b3d8 <LL_PLL_ConfigSystemClock_HSI>:
{
 800b3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3da:	4604      	mov	r4, r0
 800b3dc:	460d      	mov	r5, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 800b3de:	f7ff ff23 	bl	800b228 <UTILS_PLL_IsBusy>
 800b3e2:	bb20      	cbnz	r0, 800b42e <LL_PLL_ConfigSystemClock_HSI+0x56>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	4813      	ldr	r0, [pc, #76]	; (800b434 <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 800b3e8:	f005 fafb 	bl	80109e2 <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800b3ec:	4b12      	ldr	r3, [pc, #72]	; (800b438 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800b3f4:	d109      	bne.n	800b40a <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b3f6:	4a10      	ldr	r2, [pc, #64]	; (800b438 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800b3f8:	6813      	ldr	r3, [r2, #0]
 800b3fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3fe:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800b400:	4b0d      	ldr	r3, [pc, #52]	; (800b438 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800b408:	d0fa      	beq.n	800b400 <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 800b40a:	6822      	ldr	r2, [r4, #0]
 800b40c:	6866      	ldr	r6, [r4, #4]
 800b40e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800b410:	4c09      	ldr	r4, [pc, #36]	; (800b438 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800b412:	68e7      	ldr	r7, [r4, #12]
 800b414:	4b09      	ldr	r3, [pc, #36]	; (800b43c <LL_PLL_ConfigSystemClock_HSI+0x64>)
 800b416:	403b      	ands	r3, r7
 800b418:	f042 0202 	orr.w	r2, r2, #2
 800b41c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 800b420:	430a      	orrs	r2, r1
 800b422:	4313      	orrs	r3, r2
 800b424:	60e3      	str	r3, [r4, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 800b426:	4629      	mov	r1, r5
 800b428:	f7ff ff7e 	bl	800b328 <UTILS_EnablePLLAndSwitchSystem>
}
 800b42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ERROR;
 800b42e:	2001      	movs	r0, #1
 800b430:	e7fc      	b.n	800b42c <LL_PLL_ConfigSystemClock_HSI+0x54>
 800b432:	bf00      	nop
 800b434:	00f42400 	.word	0x00f42400
 800b438:	40021000 	.word	0x40021000
 800b43c:	f9ff808c 	.word	0xf9ff808c

0800b440 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 800b440:	4b03      	ldr	r3, [pc, #12]	; (800b450 <z_device_state_init+0x10>)

	while (dev < __device_end) {
 800b442:	e000      	b.n	800b446 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 800b444:	3318      	adds	r3, #24
	while (dev < __device_end) {
 800b446:	4a03      	ldr	r2, [pc, #12]	; (800b454 <z_device_state_init+0x14>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d3fb      	bcc.n	800b444 <z_device_state_init+0x4>
	}
}
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	08011bf4 	.word	0x08011bf4
 800b454:	08011d44 	.word	0x08011d44

0800b458 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800b45c:	4b11      	ldr	r3, [pc, #68]	; (800b4a4 <z_sys_init_run_level+0x4c>)
 800b45e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800b462:	e009      	b.n	800b478 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 800b464:	4240      	negs	r0, r0
 800b466:	e017      	b.n	800b498 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 800b468:	68eb      	ldr	r3, [r5, #12]
 800b46a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 800b46c:	68ea      	ldr	r2, [r5, #12]
 800b46e:	7853      	ldrb	r3, [r2, #1]
 800b470:	f043 0301 	orr.w	r3, r3, #1
 800b474:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800b476:	3408      	adds	r4, #8
 800b478:	1c73      	adds	r3, r6, #1
 800b47a:	4a0a      	ldr	r2, [pc, #40]	; (800b4a4 <z_sys_init_run_level+0x4c>)
 800b47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b480:	42a3      	cmp	r3, r4
 800b482:	d90d      	bls.n	800b4a0 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 800b484:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 800b486:	6823      	ldr	r3, [r4, #0]
 800b488:	4628      	mov	r0, r5
 800b48a:	4798      	blx	r3
		if (dev != NULL) {
 800b48c:	2d00      	cmp	r5, #0
 800b48e:	d0f2      	beq.n	800b476 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 800b490:	2800      	cmp	r0, #0
 800b492:	d0eb      	beq.n	800b46c <z_sys_init_run_level+0x14>
				if (rc < 0) {
 800b494:	2800      	cmp	r0, #0
 800b496:	dbe5      	blt.n	800b464 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 800b498:	28ff      	cmp	r0, #255	; 0xff
 800b49a:	dde5      	ble.n	800b468 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 800b49c:	20ff      	movs	r0, #255	; 0xff
 800b49e:	e7e3      	b.n	800b468 <z_sys_init_run_level+0x10>
		}
	}
}
 800b4a0:	bd70      	pop	{r4, r5, r6, pc}
 800b4a2:	bf00      	nop
 800b4a4:	08013980 	.word	0x08013980

0800b4a8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 800b4a8:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 800b4aa:	4605      	mov	r5, r0
 800b4ac:	b328      	cbz	r0, 800b4fa <z_impl_device_get_binding+0x52>
 800b4ae:	7803      	ldrb	r3, [r0, #0]
 800b4b0:	b32b      	cbz	r3, 800b4fe <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 800b4b2:	4c14      	ldr	r4, [pc, #80]	; (800b504 <z_impl_device_get_binding+0x5c>)
 800b4b4:	e000      	b.n	800b4b8 <z_impl_device_get_binding+0x10>
 800b4b6:	3418      	adds	r4, #24
 800b4b8:	4b13      	ldr	r3, [pc, #76]	; (800b508 <z_impl_device_get_binding+0x60>)
 800b4ba:	429c      	cmp	r4, r3
 800b4bc:	d008      	beq.n	800b4d0 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f005 faa0 	bl	8010a04 <z_device_is_ready>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d0f6      	beq.n	800b4b6 <z_impl_device_get_binding+0xe>
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	42ab      	cmp	r3, r5
 800b4cc:	d1f3      	bne.n	800b4b6 <z_impl_device_get_binding+0xe>
 800b4ce:	e012      	b.n	800b4f6 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 800b4d0:	4c0c      	ldr	r4, [pc, #48]	; (800b504 <z_impl_device_get_binding+0x5c>)
 800b4d2:	e000      	b.n	800b4d6 <z_impl_device_get_binding+0x2e>
 800b4d4:	3418      	adds	r4, #24
 800b4d6:	4b0c      	ldr	r3, [pc, #48]	; (800b508 <z_impl_device_get_binding+0x60>)
 800b4d8:	429c      	cmp	r4, r3
 800b4da:	d00b      	beq.n	800b4f4 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f005 fa91 	bl	8010a04 <z_device_is_ready>
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d0f6      	beq.n	800b4d4 <z_impl_device_get_binding+0x2c>
 800b4e6:	6821      	ldr	r1, [r4, #0]
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	f7f5 fcaa 	bl	8000e42 <strcmp>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d1f0      	bne.n	800b4d4 <z_impl_device_get_binding+0x2c>
 800b4f2:	e000      	b.n	800b4f6 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 800b4f4:	2400      	movs	r4, #0
}
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	e7fb      	b.n	800b4f6 <z_impl_device_get_binding+0x4e>
 800b4fe:	2400      	movs	r4, #0
 800b500:	e7f9      	b.n	800b4f6 <z_impl_device_get_binding+0x4e>
 800b502:	bf00      	nop
 800b504:	08011bf4 	.word	0x08011bf4
 800b508:	08011d44 	.word	0x08011d44

0800b50c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 800b50c:	4b01      	ldr	r3, [pc, #4]	; (800b514 <z_impl_z_errno+0x8>)
 800b50e:	6898      	ldr	r0, [r3, #8]
}
 800b510:	3064      	adds	r0, #100	; 0x64
 800b512:	4770      	bx	lr
 800b514:	20001430 	.word	0x20001430

0800b518 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 800b518:	2804      	cmp	r0, #4
 800b51a:	d80c      	bhi.n	800b536 <reason_to_str+0x1e>
 800b51c:	e8df f000 	tbb	[pc, r0]
 800b520:	07050d03 	.word	0x07050d03
 800b524:	09          	.byte	0x09
 800b525:	00          	.byte	0x00
 800b526:	4806      	ldr	r0, [pc, #24]	; (800b540 <reason_to_str+0x28>)
 800b528:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
 800b52a:	4806      	ldr	r0, [pc, #24]	; (800b544 <reason_to_str+0x2c>)
 800b52c:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
 800b52e:	4806      	ldr	r0, [pc, #24]	; (800b548 <reason_to_str+0x30>)
 800b530:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 800b532:	4806      	ldr	r0, [pc, #24]	; (800b54c <reason_to_str+0x34>)
 800b534:	4770      	bx	lr
	default:
		return "Unknown error";
 800b536:	4806      	ldr	r0, [pc, #24]	; (800b550 <reason_to_str+0x38>)
 800b538:	4770      	bx	lr
		return "Unhandled interrupt";
 800b53a:	4806      	ldr	r0, [pc, #24]	; (800b554 <reason_to_str+0x3c>)
	}
}
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	080139e8 	.word	0x080139e8
 800b544:	080139bc 	.word	0x080139bc
 800b548:	080139cc 	.word	0x080139cc
 800b54c:	080139d8 	.word	0x080139d8
 800b550:	08013998 	.word	0x08013998
 800b554:	080139a8 	.word	0x080139a8

0800b558 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800b558:	b130      	cbz	r0, 800b568 <thread_name_get+0x10>
{
 800b55a:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800b55c:	f005 faa4 	bl	8010aa8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 800b560:	b120      	cbz	r0, 800b56c <thread_name_get+0x14>
 800b562:	7803      	ldrb	r3, [r0, #0]
 800b564:	b123      	cbz	r3, 800b570 <thread_name_get+0x18>
}
 800b566:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 800b568:	4802      	ldr	r0, [pc, #8]	; (800b574 <thread_name_get+0x1c>)
}
 800b56a:	4770      	bx	lr
		thread_name = "unknown";
 800b56c:	4801      	ldr	r0, [pc, #4]	; (800b574 <thread_name_get+0x1c>)
 800b56e:	e7fa      	b.n	800b566 <thread_name_get+0xe>
 800b570:	4800      	ldr	r0, [pc, #0]	; (800b574 <thread_name_get+0x1c>)
	return thread_name;
 800b572:	e7f8      	b.n	800b566 <thread_name_get+0xe>
 800b574:	080139f8 	.word	0x080139f8

0800b578 <k_sys_fatal_error_handler>:
{
 800b578:	b510      	push	{r4, lr}
 800b57a:	b090      	sub	sp, #64	; 0x40
 800b57c:	4604      	mov	r4, r0
	z_impl_log_panic();
 800b57e:	f7f8 fc85 	bl	8003e8c <z_impl_log_panic>
	LOG_ERR("Halting system");
 800b582:	2201      	movs	r2, #1
 800b584:	f8ad 2008 	strh.w	r2, [sp, #8]
 800b588:	4b10      	ldr	r3, [pc, #64]	; (800b5cc <k_sys_fatal_error_handler+0x54>)
 800b58a:	930e      	str	r3, [sp, #56]	; 0x38
 800b58c:	2300      	movs	r3, #0
 800b58e:	9301      	str	r3, [sp, #4]
 800b590:	2102      	movs	r1, #2
 800b592:	f88d 1004 	strb.w	r1, [sp, #4]
 800b596:	9901      	ldr	r1, [sp, #4]
 800b598:	910d      	str	r1, [sp, #52]	; 0x34
 800b59a:	4619      	mov	r1, r3
 800b59c:	f363 0100 	bfi	r1, r3, #0, #1
 800b5a0:	f363 0141 	bfi	r1, r3, #1, #1
 800b5a4:	f363 0182 	bfi	r1, r3, #2, #1
 800b5a8:	f363 01c5 	bfi	r1, r3, #3, #3
 800b5ac:	f362 1188 	bfi	r1, r2, #6, #3
 800b5b0:	2208      	movs	r2, #8
 800b5b2:	f362 2152 	bfi	r1, r2, #9, #10
 800b5b6:	f363 41de 	bfi	r1, r3, #19, #12
 800b5ba:	f363 71df 	bfi	r1, r3, #31, #1
 800b5be:	aa0d      	add	r2, sp, #52	; 0x34
 800b5c0:	4803      	ldr	r0, [pc, #12]	; (800b5d0 <k_sys_fatal_error_handler+0x58>)
 800b5c2:	f003 fecb 	bl	800f35c <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f005 fa36 	bl	8010a38 <arch_system_halt>
 800b5cc:	08013a00 	.word	0x08013a00
 800b5d0:	0801201c 	.word	0x0801201c

0800b5d4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800b5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5d6:	b097      	sub	sp, #92	; 0x5c
 800b5d8:	4605      	mov	r5, r0
 800b5da:	460e      	mov	r6, r1
	__asm__ volatile(
 800b5dc:	f04f 0310 	mov.w	r3, #16
 800b5e0:	f3ef 8711 	mrs	r7, BASEPRI
 800b5e4:	f383 8812 	msr	BASEPRI_MAX, r3
 800b5e8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800b5ec:	f001 f820 	bl	800c630 <z_impl_z_current_get>
 800b5f0:	4604      	mov	r4, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f7ff ff90 	bl	800b518 <reason_to_str>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	9304      	str	r3, [sp, #16]
 800b5fc:	9003      	str	r0, [sp, #12]
 800b5fe:	9502      	str	r5, [sp, #8]
 800b600:	4a25      	ldr	r2, [pc, #148]	; (800b698 <z_fatal_error+0xc4>)
 800b602:	9201      	str	r2, [sp, #4]
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	2201      	movs	r2, #1
 800b608:	4924      	ldr	r1, [pc, #144]	; (800b69c <z_fatal_error+0xc8>)
 800b60a:	4618      	mov	r0, r3
 800b60c:	f005 fa07 	bl	8010a1e <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800b610:	b11e      	cbz	r6, 800b61a <z_fatal_error+0x46>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800b612:	69f3      	ldr	r3, [r6, #28]
 800b614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b618:	b9d3      	cbnz	r3, 800b650 <z_fatal_error+0x7c>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800b61a:	4620      	mov	r0, r4
 800b61c:	f7ff ff9c 	bl	800b558 <thread_name_get>
 800b620:	9003      	str	r0, [sp, #12]
 800b622:	9402      	str	r4, [sp, #8]
 800b624:	4b1e      	ldr	r3, [pc, #120]	; (800b6a0 <z_fatal_error+0xcc>)
 800b626:	9301      	str	r3, [sp, #4]
 800b628:	2000      	movs	r0, #0
 800b62a:	9000      	str	r0, [sp, #0]
 800b62c:	4603      	mov	r3, r0
 800b62e:	2201      	movs	r2, #1
 800b630:	491a      	ldr	r1, [pc, #104]	; (800b69c <z_fatal_error+0xc8>)
 800b632:	f005 f9f4 	bl	8010a1e <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800b636:	4631      	mov	r1, r6
 800b638:	4628      	mov	r0, r5
 800b63a:	f7ff ff9d 	bl	800b578 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800b63e:	f387 8811 	msr	BASEPRI, r7
 800b642:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800b646:	4620      	mov	r0, r4
 800b648:	f7f9 ff14 	bl	8005474 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800b64c:	b017      	add	sp, #92	; 0x5c
 800b64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
 800b650:	2201      	movs	r2, #1
 800b652:	f8ad 2020 	strh.w	r2, [sp, #32]
 800b656:	4b13      	ldr	r3, [pc, #76]	; (800b6a4 <z_fatal_error+0xd0>)
 800b658:	9314      	str	r3, [sp, #80]	; 0x50
 800b65a:	2300      	movs	r3, #0
 800b65c:	9307      	str	r3, [sp, #28]
 800b65e:	2102      	movs	r1, #2
 800b660:	f88d 101c 	strb.w	r1, [sp, #28]
 800b664:	9907      	ldr	r1, [sp, #28]
 800b666:	9113      	str	r1, [sp, #76]	; 0x4c
 800b668:	4619      	mov	r1, r3
 800b66a:	f363 0100 	bfi	r1, r3, #0, #1
 800b66e:	f363 0141 	bfi	r1, r3, #1, #1
 800b672:	f363 0182 	bfi	r1, r3, #2, #1
 800b676:	f363 01c5 	bfi	r1, r3, #3, #3
 800b67a:	f362 1188 	bfi	r1, r2, #6, #3
 800b67e:	2208      	movs	r2, #8
 800b680:	f362 2152 	bfi	r1, r2, #9, #10
 800b684:	f363 41de 	bfi	r1, r3, #19, #12
 800b688:	f363 71df 	bfi	r1, r3, #31, #1
 800b68c:	aa13      	add	r2, sp, #76	; 0x4c
 800b68e:	4803      	ldr	r0, [pc, #12]	; (800b69c <z_fatal_error+0xc8>)
 800b690:	f003 fe64 	bl	800f35c <z_impl_z_log_msg2_static_create>
 800b694:	e7c1      	b.n	800b61a <z_fatal_error+0x46>
 800b696:	bf00      	nop
 800b698:	08013a10 	.word	0x08013a10
 800b69c:	0801201c 	.word	0x0801201c
 800b6a0:	08013a5c 	.word	0x08013a5c
 800b6a4:	08013a38 	.word	0x08013a38

0800b6a8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 800b6a8:	b510      	push	{r4, lr}
 800b6aa:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 800b6ac:	4c10      	ldr	r4, [pc, #64]	; (800b6f0 <init_idle_thread+0x48>)
 800b6ae:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800b6b2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800b6b6:	4b0f      	ldr	r3, [pc, #60]	; (800b6f4 <init_idle_thread+0x4c>)
 800b6b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
 800b6bc:	2200      	movs	r2, #0
 800b6be:	9205      	str	r2, [sp, #20]
 800b6c0:	2101      	movs	r1, #1
 800b6c2:	9104      	str	r1, [sp, #16]
 800b6c4:	210f      	movs	r1, #15
 800b6c6:	9103      	str	r1, [sp, #12]
 800b6c8:	9202      	str	r2, [sp, #8]
 800b6ca:	9201      	str	r2, [sp, #4]
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	4b0a      	ldr	r3, [pc, #40]	; (800b6f8 <init_idle_thread+0x50>)
 800b6d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800b6d4:	4909      	ldr	r1, [pc, #36]	; (800b6fc <init_idle_thread+0x54>)
 800b6d6:	f44f 7cb0 	mov.w	ip, #352	; 0x160
 800b6da:	fb0c 1100 	mla	r1, ip, r0, r1
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f000 f8ee 	bl	800b8c0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800b6e4:	7b63      	ldrb	r3, [r4, #13]
 800b6e6:	f023 0304 	bic.w	r3, r3, #4
 800b6ea:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 800b6ec:	b006      	add	sp, #24
 800b6ee:	bd10      	pop	{r4, pc}
 800b6f0:	20000bd8 	.word	0x20000bd8
 800b6f4:	20001430 	.word	0x20001430
 800b6f8:	08010b0f 	.word	0x08010b0f
 800b6fc:	20002c00 	.word	0x20002c00

0800b700 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 800b700:	b570      	push	{r4, r5, r6, lr}
 800b702:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 800b704:	f000 fee0 	bl	800c4c8 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 800b708:	4d1b      	ldr	r5, [pc, #108]	; (800b778 <prepare_multithreading+0x78>)
 800b70a:	4b1c      	ldr	r3, [pc, #112]	; (800b77c <prepare_multithreading+0x7c>)
 800b70c:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800b70e:	4b1c      	ldr	r3, [pc, #112]	; (800b780 <prepare_multithreading+0x80>)
 800b710:	9305      	str	r3, [sp, #20]
 800b712:	2301      	movs	r3, #1
 800b714:	9304      	str	r3, [sp, #16]
 800b716:	2400      	movs	r4, #0
 800b718:	9403      	str	r4, [sp, #12]
 800b71a:	9402      	str	r4, [sp, #8]
 800b71c:	9401      	str	r4, [sp, #4]
 800b71e:	9400      	str	r4, [sp, #0]
 800b720:	4b18      	ldr	r3, [pc, #96]	; (800b784 <prepare_multithreading+0x84>)
 800b722:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b726:	4918      	ldr	r1, [pc, #96]	; (800b788 <prepare_multithreading+0x88>)
 800b728:	4628      	mov	r0, r5
 800b72a:	f000 f8c9 	bl	800b8c0 <z_setup_new_thread>
 800b72e:	4606      	mov	r6, r0
 800b730:	7b6b      	ldrb	r3, [r5, #13]
 800b732:	f023 0304 	bic.w	r3, r3, #4
 800b736:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 800b738:	4628      	mov	r0, r5
 800b73a:	f005 fb70 	bl	8010e1e <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 800b73e:	2c00      	cmp	r4, #0
 800b740:	dd02      	ble.n	800b748 <prepare_multithreading+0x48>
			CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
	}

	return stack_ptr;
}
 800b742:	4630      	mov	r0, r6
 800b744:	b006      	add	sp, #24
 800b746:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 800b748:	4620      	mov	r0, r4
 800b74a:	f7ff ffad 	bl	800b6a8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 800b74e:	4a0f      	ldr	r2, [pc, #60]	; (800b78c <prepare_multithreading+0x8c>)
 800b750:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 800b754:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800b758:	4b08      	ldr	r3, [pc, #32]	; (800b77c <prepare_multithreading+0x7c>)
 800b75a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b75e:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 800b760:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 800b762:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 800b766:	4a0a      	ldr	r2, [pc, #40]	; (800b790 <prepare_multithreading+0x90>)
 800b768:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800b76c:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 800b770:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 800b772:	3401      	adds	r4, #1
 800b774:	e7e3      	b.n	800b73e <prepare_multithreading+0x3e>
 800b776:	bf00      	nop
 800b778:	20000c58 	.word	0x20000c58
 800b77c:	20001430 	.word	0x20001430
 800b780:	08013a74 	.word	0x08013a74
 800b784:	0800b795 	.word	0x0800b795
 800b788:	20001be0 	.word	0x20001be0
 800b78c:	20000bd8 	.word	0x20000bd8
 800b790:	20002d60 	.word	0x20002d60

0800b794 <bg_thread_main>:
{
 800b794:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 800b796:	4b0b      	ldr	r3, [pc, #44]	; (800b7c4 <bg_thread_main+0x30>)
 800b798:	2201      	movs	r2, #1
 800b79a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800b79c:	2002      	movs	r0, #2
 800b79e:	f7ff fe5b 	bl	800b458 <z_sys_init_run_level>
	boot_banner();
 800b7a2:	f001 fc91 	bl	800d0c8 <boot_banner>
	z_cpp_init_static();
 800b7a6:	f003 fe40 	bl	800f42a <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800b7aa:	2003      	movs	r0, #3
 800b7ac:	f7ff fe54 	bl	800b458 <z_sys_init_run_level>
	z_init_static_threads();
 800b7b0:	f000 f8b6 	bl	800b920 <z_init_static_threads>
	main();
 800b7b4:	f005 fd6d 	bl	8011292 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800b7b8:	4a03      	ldr	r2, [pc, #12]	; (800b7c8 <bg_thread_main+0x34>)
 800b7ba:	7b13      	ldrb	r3, [r2, #12]
 800b7bc:	f023 0301 	bic.w	r3, r3, #1
 800b7c0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800b7c2:	bd08      	pop	{r3, pc}
 800b7c4:	20001490 	.word	0x20001490
 800b7c8:	20000c58 	.word	0x20000c58

0800b7cc <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 800b7cc:	b508      	push	{r3, lr}
 800b7ce:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800b7d0:	4a01      	ldr	r2, [pc, #4]	; (800b7d8 <switch_to_main_thread+0xc>)
 800b7d2:	4802      	ldr	r0, [pc, #8]	; (800b7dc <switch_to_main_thread+0x10>)
 800b7d4:	f7f9 f810 	bl	80047f8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800b7d8:	0800b795 	.word	0x0800b795
 800b7dc:	20000c58 	.word	0x20000c58

0800b7e0 <z_bss_zero>:
{
 800b7e0:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 800b7e2:	4803      	ldr	r0, [pc, #12]	; (800b7f0 <z_bss_zero+0x10>)
 800b7e4:	4a03      	ldr	r2, [pc, #12]	; (800b7f4 <z_bss_zero+0x14>)
 800b7e6:	1a12      	subs	r2, r2, r0
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	f005 fd66 	bl	80112ba <memset>
}
 800b7ee:	bd08      	pop	{r3, pc}
 800b7f0:	200006a0 	.word	0x200006a0
 800b7f4:	20001494 	.word	0x20001494

0800b7f8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800b7f8:	b500      	push	{lr}
 800b7fa:	b0a1      	sub	sp, #132	; 0x84
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800b7fc:	4b1d      	ldr	r3, [pc, #116]	; (800b874 <z_cstart+0x7c>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800b7fe:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800b802:	4c1d      	ldr	r4, [pc, #116]	; (800b878 <z_cstart+0x80>)
 800b804:	6963      	ldr	r3, [r4, #20]
 800b806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b80a:	6163      	str	r3, [r4, #20]
 800b80c:	23f0      	movs	r3, #240	; 0xf0
 800b80e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800b812:	2500      	movs	r5, #0
 800b814:	77e5      	strb	r5, [r4, #31]
 800b816:	7625      	strb	r5, [r4, #24]
 800b818:	7665      	strb	r5, [r4, #25]
 800b81a:	76a5      	strb	r5, [r4, #26]
 800b81c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800b820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b822:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b826:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800b828:	f7f9 fde2 	bl	80053f0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800b82c:	f7f8 fdda 	bl	80043e4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800b830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b834:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800b836:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800b838:	f7f9 ff26 	bl	8005688 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800b83c:	f7f9 fe30 	bl	80054a0 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 800b840:	f7f8 fa40 	bl	8003cc4 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 800b844:	2401      	movs	r4, #1
 800b846:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 800b84a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 800b84e:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
 800b850:	951b      	str	r5, [sp, #108]	; 0x6c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
 800b852:	951d      	str	r5, [sp, #116]	; 0x74
#endif

	_current_cpu->current = dummy_thread;
 800b854:	4b09      	ldr	r3, [pc, #36]	; (800b87c <z_cstart+0x84>)
 800b856:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800b85a:	f7ff fdf1 	bl	800b440 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800b85e:	4628      	mov	r0, r5
 800b860:	f7ff fdfa 	bl	800b458 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800b864:	4620      	mov	r0, r4
 800b866:	f7ff fdf7 	bl	800b458 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 800b86a:	f7ff ff49 	bl	800b700 <prepare_multithreading>
 800b86e:	f7ff ffad 	bl	800b7cc <switch_to_main_thread>
 800b872:	bf00      	nop
 800b874:	20003580 	.word	0x20003580
 800b878:	e000ed00 	.word	0xe000ed00
 800b87c:	20001430 	.word	0x20001430

0800b880 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
 800b880:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800b882:	4c06      	ldr	r4, [pc, #24]	; (800b89c <init_mem_slab_module+0x1c>)
	int rc = 0;
 800b884:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800b886:	e000      	b.n	800b88a <init_mem_slab_module+0xa>
 800b888:	3420      	adds	r4, #32
 800b88a:	4b05      	ldr	r3, [pc, #20]	; (800b8a0 <init_mem_slab_module+0x20>)
 800b88c:	429c      	cmp	r4, r3
 800b88e:	d204      	bcs.n	800b89a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 800b890:	4620      	mov	r0, r4
 800b892:	f005 f8da 	bl	8010a4a <create_free_list>
		if (rc < 0) {
 800b896:	2800      	cmp	r0, #0
 800b898:	daf6      	bge.n	800b888 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
 800b89a:	bd10      	pop	{r4, pc}
 800b89c:	20000648 	.word	0x20000648
 800b8a0:	20000648 	.word	0x20000648

0800b8a4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 800b8a4:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800b8a6:	ea53 0102 	orrs.w	r1, r3, r2
 800b8aa:	d102      	bne.n	800b8b2 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 800b8ac:	f005 f8fe 	bl	8010aac <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 800b8b0:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800b8b2:	4902      	ldr	r1, [pc, #8]	; (800b8bc <schedule_new_thread+0x18>)
 800b8b4:	3018      	adds	r0, #24
 800b8b6:	f000 ff6f 	bl	800c798 <z_add_timeout>
 800b8ba:	e7f9      	b.n	800b8b0 <schedule_new_thread+0xc>
 800b8bc:	08010e57 	.word	0x08010e57

0800b8c0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800b8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	460e      	mov	r6, r1
 800b8c8:	4615      	mov	r5, r2
 800b8ca:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800b8cc:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 800b8d0:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 800b8d2:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 800b8d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8d6:	2204      	movs	r2, #4
 800b8d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b8da:	f005 f8eb 	bl	8010ab4 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 800b8de:	462a      	mov	r2, r5
 800b8e0:	4631      	mov	r1, r6
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f005 f8c8 	bl	8010a78 <setup_thread_stack>
 800b8e8:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800b8ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8ec:	9302      	str	r3, [sp, #8]
 800b8ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8f0:	9301      	str	r3, [sp, #4]
 800b8f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	463b      	mov	r3, r7
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	4631      	mov	r1, r6
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f7f8 ff35 	bl	800476c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 800b902:	2300      	movs	r3, #0
 800b904:	6563      	str	r3, [r4, #84]	; 0x54
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 800b906:	4b05      	ldr	r3, [pc, #20]	; (800b91c <z_setup_new_thread+0x5c>)
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	b123      	cbz	r3, 800b916 <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 800b90c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b90e:	6763      	str	r3, [r4, #116]	; 0x74
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
 800b910:	4628      	mov	r0, r5
 800b912:	b005      	add	sp, #20
 800b914:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 800b916:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
 800b918:	e7fa      	b.n	800b910 <z_setup_new_thread+0x50>
 800b91a:	bf00      	nop
 800b91c:	20001430 	.word	0x20001430

0800b920 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 800b920:	b510      	push	{r4, lr}
 800b922:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 800b924:	4c1d      	ldr	r4, [pc, #116]	; (800b99c <z_init_static_threads+0x7c>)
 800b926:	e014      	b.n	800b952 <z_init_static_threads+0x32>
		z_setup_new_thread(
 800b928:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b92a:	9305      	str	r3, [sp, #20]
 800b92c:	6a23      	ldr	r3, [r4, #32]
 800b92e:	9304      	str	r3, [sp, #16]
 800b930:	69e3      	ldr	r3, [r4, #28]
 800b932:	9303      	str	r3, [sp, #12]
 800b934:	69a3      	ldr	r3, [r4, #24]
 800b936:	9302      	str	r3, [sp, #8]
 800b938:	6963      	ldr	r3, [r4, #20]
 800b93a:	9301      	str	r3, [sp, #4]
 800b93c:	6923      	ldr	r3, [r4, #16]
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	68e3      	ldr	r3, [r4, #12]
 800b942:	68a2      	ldr	r2, [r4, #8]
 800b944:	6861      	ldr	r1, [r4, #4]
 800b946:	6820      	ldr	r0, [r4, #0]
 800b948:	f7ff ffba 	bl	800b8c0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 800b94c:	6823      	ldr	r3, [r4, #0]
 800b94e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800b950:	3430      	adds	r4, #48	; 0x30
 800b952:	4b13      	ldr	r3, [pc, #76]	; (800b9a0 <z_init_static_threads+0x80>)
 800b954:	429c      	cmp	r4, r3
 800b956:	d3e7      	bcc.n	800b928 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 800b958:	f000 fb3a 	bl	800bfd0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800b95c:	4c0f      	ldr	r4, [pc, #60]	; (800b99c <z_init_static_threads+0x7c>)
 800b95e:	e000      	b.n	800b962 <z_init_static_threads+0x42>
 800b960:	3430      	adds	r4, #48	; 0x30
 800b962:	4b0f      	ldr	r3, [pc, #60]	; (800b9a0 <z_init_static_threads+0x80>)
 800b964:	429c      	cmp	r4, r3
 800b966:	d214      	bcs.n	800b992 <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800b968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b96a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b96e:	d0f7      	beq.n	800b960 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 800b970:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b974:	17d8      	asrs	r0, r3, #31
			return t * ((uint64_t)to_hz / from_hz);
 800b976:	0082      	lsls	r2, r0, #2
 800b978:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800b97c:	0099      	lsls	r1, r3, #2
 800b97e:	18c9      	adds	r1, r1, r3
 800b980:	eb40 0002 	adc.w	r0, r0, r2
 800b984:	184a      	adds	r2, r1, r1
 800b986:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 800b98a:	6820      	ldr	r0, [r4, #0]
 800b98c:	f7ff ff8a 	bl	800b8a4 <schedule_new_thread>
 800b990:	e7e6      	b.n	800b960 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 800b992:	f000 fd27 	bl	800c3e4 <k_sched_unlock>
}
 800b996:	b006      	add	sp, #24
 800b998:	bd10      	pop	{r4, pc}
 800b99a:	bf00      	nop
 800b99c:	200005dc 	.word	0x200005dc
 800b9a0:	2000060c 	.word	0x2000060c

0800b9a4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800b9a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9a8:	b083      	sub	sp, #12
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	461d      	mov	r5, r3
	__asm__ volatile(
 800b9ae:	f04f 0310 	mov.w	r3, #16
 800b9b2:	f3ef 8711 	mrs	r7, BASEPRI
 800b9b6:	f383 8812 	msr	BASEPRI_MAX, r3
 800b9ba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800b9be:	68c1      	ldr	r1, [r0, #12]
 800b9c0:	b999      	cbnz	r1, 800b9ea <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 800b9c2:	2900      	cmp	r1, #0
 800b9c4:	d14f      	bne.n	800ba66 <z_impl_k_mutex_lock+0xc2>
 800b9c6:	4b3a      	ldr	r3, [pc, #232]	; (800bab0 <z_impl_k_mutex_lock+0x10c>)
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800b9ce:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 800b9d0:	3101      	adds	r1, #1
 800b9d2:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 800b9d4:	4b36      	ldr	r3, [pc, #216]	; (800bab0 <z_impl_k_mutex_lock+0x10c>)
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800b9da:	f387 8811 	msr	BASEPRI, r7
 800b9de:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 800b9e2:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800b9e4:	b003      	add	sp, #12
 800b9e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9ea:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800b9ec:	6882      	ldr	r2, [r0, #8]
 800b9ee:	4b30      	ldr	r3, [pc, #192]	; (800bab0 <z_impl_k_mutex_lock+0x10c>)
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d0e5      	beq.n	800b9c2 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800b9f6:	ea55 0106 	orrs.w	r1, r5, r6
 800b9fa:	bf0c      	ite	eq
 800b9fc:	f04f 0801 	moveq.w	r8, #1
 800ba00:	f04f 0800 	movne.w	r8, #0
 800ba04:	d031      	beq.n	800ba6a <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 800ba06:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	f993 000e 	ldrsb.w	r0, [r3, #14]
 800ba10:	f005 f889 	bl	8010b26 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800ba14:	4581      	cmp	r9, r0
 800ba16:	dc2f      	bgt.n	800ba78 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 800ba18:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800ba1c:	9600      	str	r6, [sp, #0]
 800ba1e:	9501      	str	r5, [sp, #4]
 800ba20:	4622      	mov	r2, r4
 800ba22:	4639      	mov	r1, r7
 800ba24:	4823      	ldr	r0, [pc, #140]	; (800bab4 <z_impl_k_mutex_lock+0x110>)
 800ba26:	f000 fc27 	bl	800c278 <z_pend_curr>
	if (got_mutex == 0) {
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d0da      	beq.n	800b9e4 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 800ba2e:	f04f 0310 	mov.w	r3, #16
 800ba32:	f3ef 8511 	mrs	r5, BASEPRI
 800ba36:	f383 8812 	msr	BASEPRI_MAX, r3
 800ba3a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800ba3e:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	d01f      	beq.n	800ba84 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800ba44:	b1f3      	cbz	r3, 800ba84 <z_impl_k_mutex_lock+0xe0>
 800ba46:	6921      	ldr	r1, [r4, #16]
 800ba48:	f993 000e 	ldrsb.w	r0, [r3, #14]
 800ba4c:	f005 f86b 	bl	8010b26 <new_prio_for_inheritance>
 800ba50:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800ba52:	4620      	mov	r0, r4
 800ba54:	f005 f872 	bl	8010b3c <adjust_owner_prio>
 800ba58:	b9b0      	cbnz	r0, 800ba88 <z_impl_k_mutex_lock+0xe4>
 800ba5a:	f1b9 0f00 	cmp.w	r9, #0
 800ba5e:	d015      	beq.n	800ba8c <z_impl_k_mutex_lock+0xe8>
 800ba60:	f04f 0801 	mov.w	r8, #1
 800ba64:	e012      	b.n	800ba8c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 800ba66:	6923      	ldr	r3, [r4, #16]
 800ba68:	e7b1      	b.n	800b9ce <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 800ba6a:	f387 8811 	msr	BASEPRI, r7
 800ba6e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 800ba72:	f06f 000f 	mvn.w	r0, #15
 800ba76:	e7b5      	b.n	800b9e4 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 800ba78:	4601      	mov	r1, r0
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f005 f85e 	bl	8010b3c <adjust_owner_prio>
 800ba80:	4681      	mov	r9, r0
 800ba82:	e7cb      	b.n	800ba1c <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800ba84:	6921      	ldr	r1, [r4, #16]
 800ba86:	e7e4      	b.n	800ba52 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800ba88:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 800ba8c:	f1b8 0f00 	cmp.w	r8, #0
 800ba90:	d106      	bne.n	800baa0 <z_impl_k_mutex_lock+0xfc>
 800ba92:	f385 8811 	msr	BASEPRI, r5
 800ba96:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 800ba9a:	f06f 000a 	mvn.w	r0, #10
 800ba9e:	e7a1      	b.n	800b9e4 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 800baa0:	4629      	mov	r1, r5
 800baa2:	4804      	ldr	r0, [pc, #16]	; (800bab4 <z_impl_k_mutex_lock+0x110>)
 800baa4:	f000 fa78 	bl	800bf98 <z_reschedule>
	return -EAGAIN;
 800baa8:	f06f 000a 	mvn.w	r0, #10
 800baac:	e79a      	b.n	800b9e4 <z_impl_k_mutex_lock+0x40>
 800baae:	bf00      	nop
 800bab0:	20001430 	.word	0x20001430
 800bab4:	20001454 	.word	0x20001454

0800bab8 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800bab8:	6882      	ldr	r2, [r0, #8]
 800baba:	2a00      	cmp	r2, #0
 800babc:	d034      	beq.n	800bb28 <z_impl_k_mutex_unlock+0x70>
{
 800babe:	b538      	push	{r3, r4, r5, lr}
 800bac0:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 800bac2:	4b1c      	ldr	r3, [pc, #112]	; (800bb34 <z_impl_k_mutex_unlock+0x7c>)
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d131      	bne.n	800bb2e <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800baca:	7bda      	ldrb	r2, [r3, #15]
 800bacc:	3a01      	subs	r2, #1
 800bace:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 800bad0:	68c3      	ldr	r3, [r0, #12]
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d905      	bls.n	800bae2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800bad6:	3b01      	subs	r3, #1
 800bad8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800bada:	f000 fc83 	bl	800c3e4 <k_sched_unlock>

	return 0;
 800bade:	2000      	movs	r0, #0
}
 800bae0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800bae2:	f04f 0310 	mov.w	r3, #16
 800bae6:	f3ef 8511 	mrs	r5, BASEPRI
 800baea:	f383 8812 	msr	BASEPRI_MAX, r3
 800baee:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800baf2:	6901      	ldr	r1, [r0, #16]
 800baf4:	f005 f822 	bl	8010b3c <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800baf8:	4620      	mov	r0, r4
 800bafa:	f005 fa57 	bl	8010fac <z_unpend_first_thread>
	mutex->owner = new_owner;
 800bafe:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800bb00:	b158      	cbz	r0, 800bb1a <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 800bb02:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800bb06:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 800bb0c:	f005 f987 	bl	8010e1e <z_ready_thread>
		z_reschedule(&lock, key);
 800bb10:	4629      	mov	r1, r5
 800bb12:	4809      	ldr	r0, [pc, #36]	; (800bb38 <z_impl_k_mutex_unlock+0x80>)
 800bb14:	f000 fa40 	bl	800bf98 <z_reschedule>
 800bb18:	e7df      	b.n	800bada <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 800bb1e:	f385 8811 	msr	BASEPRI, r5
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	e7d8      	b.n	800bada <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 800bb28:	f06f 0015 	mvn.w	r0, #21
}
 800bb2c:	4770      	bx	lr
		return -EPERM;
 800bb2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb32:	e7d5      	b.n	800bae0 <z_impl_k_mutex_unlock+0x28>
 800bb34:	20001430 	.word	0x20001430
 800bb38:	20001454 	.word	0x20001454

0800bb3c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	4604      	mov	r4, r0
	__asm__ volatile(
 800bb40:	f04f 0310 	mov.w	r3, #16
 800bb44:	f3ef 8511 	mrs	r5, BASEPRI
 800bb48:	f383 8812 	msr	BASEPRI_MAX, r3
 800bb4c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800bb50:	f005 fa2c 	bl	8010fac <z_unpend_first_thread>

	if (thread != NULL) {
 800bb54:	b140      	cbz	r0, 800bb68 <z_impl_k_sem_give+0x2c>
 800bb56:	2200      	movs	r2, #0
 800bb58:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800bb5a:	f005 f960 	bl	8010e1e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800bb5e:	4629      	mov	r1, r5
 800bb60:	4809      	ldr	r0, [pc, #36]	; (800bb88 <z_impl_k_sem_give+0x4c>)
 800bb62:	f000 fa19 	bl	800bf98 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800bb66:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800bb68:	68a3      	ldr	r3, [r4, #8]
 800bb6a:	68e2      	ldr	r2, [r4, #12]
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d008      	beq.n	800bb82 <z_impl_k_sem_give+0x46>
 800bb70:	2201      	movs	r2, #1
 800bb72:	4413      	add	r3, r2
 800bb74:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800bb76:	2102      	movs	r1, #2
 800bb78:	f104 0010 	add.w	r0, r4, #16
 800bb7c:	f005 fb79 	bl	8011272 <z_handle_obj_poll_events>
}
 800bb80:	e7ed      	b.n	800bb5e <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800bb82:	2200      	movs	r2, #0
 800bb84:	e7f5      	b.n	800bb72 <z_impl_k_sem_give+0x36>
 800bb86:	bf00      	nop
 800bb88:	20001458 	.word	0x20001458

0800bb8c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	f04f 0410 	mov.w	r4, #16
 800bb94:	f3ef 8111 	mrs	r1, BASEPRI
 800bb98:	f384 8812 	msr	BASEPRI_MAX, r4
 800bb9c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800bba0:	6884      	ldr	r4, [r0, #8]
 800bba2:	b144      	cbz	r4, 800bbb6 <z_impl_k_sem_take+0x2a>
		sem->count--;
 800bba4:	3c01      	subs	r4, #1
 800bba6:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 800bba8:	f381 8811 	msr	BASEPRI, r1
 800bbac:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800bbb0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800bbb2:	b002      	add	sp, #8
 800bbb4:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800bbb6:	ea53 0402 	orrs.w	r4, r3, r2
 800bbba:	d006      	beq.n	800bbca <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800bbbc:	9200      	str	r2, [sp, #0]
 800bbbe:	9301      	str	r3, [sp, #4]
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	4805      	ldr	r0, [pc, #20]	; (800bbd8 <z_impl_k_sem_take+0x4c>)
 800bbc4:	f000 fb58 	bl	800c278 <z_pend_curr>
	return ret;
 800bbc8:	e7f3      	b.n	800bbb2 <z_impl_k_sem_take+0x26>
 800bbca:	f381 8811 	msr	BASEPRI, r1
 800bbce:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800bbd2:	f06f 000f 	mvn.w	r0, #15
 800bbd6:	e7ec      	b.n	800bbb2 <z_impl_k_sem_take+0x26>
 800bbd8:	20001458 	.word	0x20001458

0800bbdc <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 800bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbde:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 800bbe0:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800bbe2:	f013 0f02 	tst.w	r3, #2
 800bbe6:	d15c      	bne.n	800bca2 <submit_to_queue_locked+0xc6>
 800bbe8:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800bbea:	f013 0f04 	tst.w	r3, #4
 800bbee:	d15d      	bne.n	800bcac <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 800bbf0:	680b      	ldr	r3, [r1, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d038      	beq.n	800bc68 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 800bbf6:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800bbf8:	f013 0f01 	tst.w	r3, #1
 800bbfc:	d037      	beq.n	800bc6e <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 800bbfe:	68a3      	ldr	r3, [r4, #8]
 800bc00:	602b      	str	r3, [r5, #0]
			ret = 2;
 800bc02:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 800bc04:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 800bc06:	2e00      	cmp	r6, #0
 800bc08:	d03f      	beq.n	800bc8a <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800bc0a:	4b29      	ldr	r3, [pc, #164]	; (800bcb0 <submit_to_queue_locked+0xd4>)
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	42b3      	cmp	r3, r6
 800bc10:	d02f      	beq.n	800bc72 <submit_to_queue_locked+0x96>
 800bc12:	2300      	movs	r3, #0
 800bc14:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 800bc16:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800bc1a:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800bc1e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800bc22:	f013 0f01 	tst.w	r3, #1
 800bc26:	d033      	beq.n	800bc90 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 800bc28:	b101      	cbz	r1, 800bc2c <submit_to_queue_locked+0x50>
 800bc2a:	b3a2      	cbz	r2, 800bc96 <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 800bc2c:	b100      	cbz	r0, 800bc30 <submit_to_queue_locked+0x54>
 800bc2e:	b3a9      	cbz	r1, 800bc9c <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 800bc30:	2300      	movs	r3, #0
 800bc32:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 800bc34:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 800bc38:	b313      	cbz	r3, 800bc80 <submit_to_queue_locked+0xa4>
	parent->next = child;
 800bc3a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800bc3c:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
 800bc40:	b12e      	cbz	r6, 800bc4e <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 800bc42:	2200      	movs	r2, #0
 800bc44:	4611      	mov	r1, r2
 800bc46:	f106 0088 	add.w	r0, r6, #136	; 0x88
 800bc4a:	f005 f9de 	bl	801100a <z_sched_wake>
		ret = 1;
 800bc4e:	2001      	movs	r0, #1

		if (rc < 0) {
 800bc50:	2800      	cmp	r0, #0
 800bc52:	db06      	blt.n	800bc62 <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 800bc54:	68e3      	ldr	r3, [r4, #12]
 800bc56:	f043 0304 	orr.w	r3, r3, #4
 800bc5a:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	60a3      	str	r3, [r4, #8]
 800bc60:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 800bc62:	2800      	cmp	r0, #0
 800bc64:	dc21      	bgt.n	800bcaa <submit_to_queue_locked+0xce>
 800bc66:	e01e      	b.n	800bca6 <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 800bc68:	6883      	ldr	r3, [r0, #8]
 800bc6a:	600b      	str	r3, [r1, #0]
 800bc6c:	e7c3      	b.n	800bbf6 <submit_to_queue_locked+0x1a>
		ret = 1;
 800bc6e:	2701      	movs	r7, #1
 800bc70:	e7c8      	b.n	800bc04 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800bc72:	f004 ff10 	bl	8010a96 <k_is_in_isr>
 800bc76:	b908      	cbnz	r0, 800bc7c <submit_to_queue_locked+0xa0>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e7cb      	b.n	800bc14 <submit_to_queue_locked+0x38>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	e7c9      	b.n	800bc14 <submit_to_queue_locked+0x38>
 800bc80:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
 800bc84:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
 800bc88:	e7da      	b.n	800bc40 <submit_to_queue_locked+0x64>
		return -EINVAL;
 800bc8a:	f06f 0015 	mvn.w	r0, #21
 800bc8e:	e7df      	b.n	800bc50 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 800bc90:	f06f 0012 	mvn.w	r0, #18
 800bc94:	e7dc      	b.n	800bc50 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800bc96:	f06f 000f 	mvn.w	r0, #15
 800bc9a:	e7d9      	b.n	800bc50 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800bc9c:	f06f 000f 	mvn.w	r0, #15
 800bca0:	e7d6      	b.n	800bc50 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800bca2:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 800bca6:	2300      	movs	r3, #0
 800bca8:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 800bcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 800bcac:	2000      	movs	r0, #0
 800bcae:	e7fa      	b.n	800bca6 <submit_to_queue_locked+0xca>
 800bcb0:	20001430 	.word	0x20001430

0800bcb4 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 800bcb4:	b508      	push	{r3, lr}
 800bcb6:	4684      	mov	ip, r0
 800bcb8:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800bcba:	ea53 0102 	orrs.w	r1, r3, r2
 800bcbe:	d00c      	beq.n	800bcda <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
 800bcc0:	68c1      	ldr	r1, [r0, #12]
 800bcc2:	f041 0108 	orr.w	r1, r1, #8
 800bcc6:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
 800bcc8:	f8dc 1000 	ldr.w	r1, [ip]
 800bccc:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800bcce:	4905      	ldr	r1, [pc, #20]	; (800bce4 <schedule_for_queue_locked+0x30>)
 800bcd0:	3010      	adds	r0, #16
 800bcd2:	f000 fd61 	bl	800c798 <z_add_timeout>

	return ret;
 800bcd6:	2001      	movs	r0, #1
}
 800bcd8:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
 800bcda:	4661      	mov	r1, ip
 800bcdc:	f7ff ff7e 	bl	800bbdc <submit_to_queue_locked>
 800bce0:	e7fa      	b.n	800bcd8 <schedule_for_queue_locked+0x24>
 800bce2:	bf00      	nop
 800bce4:	08010bf9 	.word	0x08010bf9

0800bce8 <finalize_cancel_locked>:
{
 800bce8:	b570      	push	{r4, r5, r6, lr}
 800bcea:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 800bcec:	68c3      	ldr	r3, [r0, #12]
 800bcee:	f023 0302 	bic.w	r3, r3, #2
 800bcf2:	60c3      	str	r3, [r0, #12]
	return list->head;
 800bcf4:	4b1a      	ldr	r3, [pc, #104]	; (800bd60 <finalize_cancel_locked+0x78>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800bcf8:	b1fb      	cbz	r3, 800bd3a <finalize_cancel_locked+0x52>
 800bcfa:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 800bcfc:	b103      	cbz	r3, 800bd00 <finalize_cancel_locked+0x18>
	return node->next;
 800bcfe:	681c      	ldr	r4, [r3, #0]
 800bd00:	2600      	movs	r6, #0
 800bd02:	e01f      	b.n	800bd44 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 800bd04:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 800bd06:	b166      	cbz	r6, 800bd22 <finalize_cancel_locked+0x3a>
	return node->next;
 800bd08:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 800bd0a:	6031      	str	r1, [r6, #0]
	return list->tail;
 800bd0c:	4914      	ldr	r1, [pc, #80]	; (800bd60 <finalize_cancel_locked+0x78>)
 800bd0e:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800bd10:	428b      	cmp	r3, r1
 800bd12:	d00f      	beq.n	800bd34 <finalize_cancel_locked+0x4c>
	parent->next = child;
 800bd14:	2100      	movs	r1, #0
 800bd16:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 800bd18:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 800bd1c:	f7ff ff0e 	bl	800bb3c <z_impl_k_sem_give>
}
 800bd20:	e015      	b.n	800bd4e <finalize_cancel_locked+0x66>
	return node->next;
 800bd22:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 800bd24:	490e      	ldr	r1, [pc, #56]	; (800bd60 <finalize_cancel_locked+0x78>)
 800bd26:	6008      	str	r0, [r1, #0]
	return list->tail;
 800bd28:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800bd2a:	428b      	cmp	r3, r1
 800bd2c:	d1f2      	bne.n	800bd14 <finalize_cancel_locked+0x2c>
	list->tail = node;
 800bd2e:	490c      	ldr	r1, [pc, #48]	; (800bd60 <finalize_cancel_locked+0x78>)
 800bd30:	6048      	str	r0, [r1, #4]
}
 800bd32:	e7ef      	b.n	800bd14 <finalize_cancel_locked+0x2c>
	list->tail = node;
 800bd34:	490a      	ldr	r1, [pc, #40]	; (800bd60 <finalize_cancel_locked+0x78>)
 800bd36:	604e      	str	r6, [r1, #4]
}
 800bd38:	e7ec      	b.n	800bd14 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800bd3a:	461c      	mov	r4, r3
 800bd3c:	e7e0      	b.n	800bd00 <finalize_cancel_locked+0x18>
 800bd3e:	4622      	mov	r2, r4
 800bd40:	4623      	mov	r3, r4
 800bd42:	4614      	mov	r4, r2
 800bd44:	b153      	cbz	r3, 800bd5c <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	42aa      	cmp	r2, r5
 800bd4a:	d0db      	beq.n	800bd04 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 800bd4c:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800bd4e:	2c00      	cmp	r4, #0
 800bd50:	d0f5      	beq.n	800bd3e <finalize_cancel_locked+0x56>
 800bd52:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800bd54:	2c00      	cmp	r4, #0
 800bd56:	d0f3      	beq.n	800bd40 <finalize_cancel_locked+0x58>
	return node->next;
 800bd58:	6822      	ldr	r2, [r4, #0]
 800bd5a:	e7f1      	b.n	800bd40 <finalize_cancel_locked+0x58>
}
 800bd5c:	bd70      	pop	{r4, r5, r6, pc}
 800bd5e:	bf00      	nop
 800bd60:	20001460 	.word	0x20001460

0800bd64 <work_queue_main>:
{
 800bd64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd66:	b085      	sub	sp, #20
 800bd68:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 800bd6a:	e016      	b.n	800bd9a <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 800bd6c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 800bd70:	f023 0204 	bic.w	r2, r3, #4
 800bd74:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
 800bd78:	f013 0f04 	tst.w	r3, #4
 800bd7c:	d159      	bne.n	800be32 <work_queue_main+0xce>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800bd7e:	2300      	movs	r3, #0
 800bd80:	9302      	str	r3, [sp, #8]
 800bd82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd8a:	e9cd 2300 	strd	r2, r3, [sp]
 800bd8e:	f105 0288 	add.w	r2, r5, #136	; 0x88
 800bd92:	4631      	mov	r1, r6
 800bd94:	482e      	ldr	r0, [pc, #184]	; (800be50 <work_queue_main+0xec>)
 800bd96:	f000 fc89 	bl	800c6ac <z_sched_wait>
	__asm__ volatile(
 800bd9a:	f04f 0310 	mov.w	r3, #16
 800bd9e:	f3ef 8611 	mrs	r6, BASEPRI
 800bda2:	f383 8812 	msr	BASEPRI_MAX, r3
 800bda6:	f3bf 8f6f 	isb	sy
	return list->head;
 800bdaa:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 800bdae:	2c00      	cmp	r4, #0
 800bdb0:	d0dc      	beq.n	800bd6c <work_queue_main+0x8>
	return node->next;
 800bdb2:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 800bdb4:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
 800bdb8:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800bdbc:	4294      	cmp	r4, r2
 800bdbe:	d035      	beq.n	800be2c <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 800bdc0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800bdc4:	f043 0302 	orr.w	r3, r3, #2
 800bdc8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 800bdcc:	68e3      	ldr	r3, [r4, #12]
 800bdce:	f043 0301 	orr.w	r3, r3, #1
 800bdd2:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 800bdd4:	f023 0304 	bic.w	r3, r3, #4
 800bdd8:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 800bdda:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 800bddc:	2c00      	cmp	r4, #0
 800bdde:	d0ce      	beq.n	800bd7e <work_queue_main+0x1a>
	__asm__ volatile(
 800bde0:	f386 8811 	msr	BASEPRI, r6
 800bde4:	f3bf 8f6f 	isb	sy
		handler(work);
 800bde8:	4620      	mov	r0, r4
 800bdea:	4798      	blx	r3
	__asm__ volatile(
 800bdec:	f04f 0310 	mov.w	r3, #16
 800bdf0:	f3ef 8611 	mrs	r6, BASEPRI
 800bdf4:	f383 8812 	msr	BASEPRI_MAX, r3
 800bdf8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 800bdfc:	68e3      	ldr	r3, [r4, #12]
 800bdfe:	f023 0301 	bic.w	r3, r3, #1
 800be02:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800be04:	f013 0f02 	tst.w	r3, #2
 800be08:	d11e      	bne.n	800be48 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 800be0a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800be0e:	f023 0302 	bic.w	r3, r3, #2
 800be12:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
 800be16:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 800be1a:	f386 8811 	msr	BASEPRI, r6
 800be1e:	f3bf 8f6f 	isb	sy
		if (yield) {
 800be22:	2b00      	cmp	r3, #0
 800be24:	d1b9      	bne.n	800bd9a <work_queue_main+0x36>
	z_impl_k_yield();
 800be26:	f000 fb5b 	bl	800c4e0 <z_impl_k_yield>
}
 800be2a:	e7b6      	b.n	800bd9a <work_queue_main+0x36>
	list->tail = node;
 800be2c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 800be30:	e7c6      	b.n	800bdc0 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 800be32:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 800be36:	2200      	movs	r2, #0
 800be38:	2101      	movs	r1, #1
 800be3a:	4638      	mov	r0, r7
 800be3c:	f005 f8e5 	bl	801100a <z_sched_wake>
 800be40:	2800      	cmp	r0, #0
 800be42:	d1f8      	bne.n	800be36 <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 800be44:	2300      	movs	r3, #0
 800be46:	e7c9      	b.n	800bddc <work_queue_main+0x78>
			finalize_cancel_locked(work);
 800be48:	4620      	mov	r0, r4
 800be4a:	f7ff ff4d 	bl	800bce8 <finalize_cancel_locked>
 800be4e:	e7dc      	b.n	800be0a <work_queue_main+0xa6>
 800be50:	2000145c 	.word	0x2000145c

0800be54 <k_work_submit>:
{
 800be54:	b508      	push	{r3, lr}
 800be56:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 800be58:	4801      	ldr	r0, [pc, #4]	; (800be60 <k_work_submit+0xc>)
 800be5a:	f004 ff08 	bl	8010c6e <k_work_submit_to_queue>
}
 800be5e:	bd08      	pop	{r3, pc}
 800be60:	20000ce0 	.word	0x20000ce0

0800be64 <k_work_queue_start>:
{
 800be64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be66:	b089      	sub	sp, #36	; 0x24
 800be68:	4604      	mov	r4, r0
 800be6a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 800be6c:	2000      	movs	r0, #0
 800be6e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
 800be72:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800be76:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
 800be7a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
 800be7e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800be82:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
 800be86:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
 800be8a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
	if ((cfg != NULL) && cfg->no_yield) {
 800be8e:	b1fd      	cbz	r5, 800bed0 <k_work_queue_start+0x6c>
 800be90:	7928      	ldrb	r0, [r5, #4]
 800be92:	b9f8      	cbnz	r0, 800bed4 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800be94:	2001      	movs	r0, #1
	*flagp = flags;
 800be96:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800be9a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800be9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bea2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bea6:	2000      	movs	r0, #0
 800bea8:	9004      	str	r0, [sp, #16]
 800beaa:	9303      	str	r3, [sp, #12]
 800beac:	9002      	str	r0, [sp, #8]
 800beae:	9001      	str	r0, [sp, #4]
 800beb0:	9400      	str	r4, [sp, #0]
 800beb2:	4b0a      	ldr	r3, [pc, #40]	; (800bedc <k_work_queue_start+0x78>)
 800beb4:	4620      	mov	r0, r4
 800beb6:	f004 fe08 	bl	8010aca <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
 800beba:	b125      	cbz	r5, 800bec6 <k_work_queue_start+0x62>
 800bebc:	6829      	ldr	r1, [r5, #0]
 800bebe:	b111      	cbz	r1, 800bec6 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 800bec0:	4620      	mov	r0, r4
 800bec2:	f004 fdee 	bl	8010aa2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800bec6:	4620      	mov	r0, r4
 800bec8:	f004 fdf0 	bl	8010aac <z_impl_k_thread_start>
}
 800becc:	b009      	add	sp, #36	; 0x24
 800bece:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800bed0:	2001      	movs	r0, #1
 800bed2:	e7e0      	b.n	800be96 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 800bed4:	f240 1001 	movw	r0, #257	; 0x101
 800bed8:	e7dd      	b.n	800be96 <k_work_queue_start+0x32>
 800beda:	bf00      	nop
 800bedc:	0800bd65 	.word	0x0800bd65

0800bee0 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 800bee0:	b508      	push	{r3, lr}
 800bee2:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
 800bee4:	4801      	ldr	r0, [pc, #4]	; (800beec <k_work_reschedule+0xc>)
 800bee6:	f004 feee 	bl	8010cc6 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
 800beea:	bd08      	pop	{r3, pc}
 800beec:	20000ce0 	.word	0x20000ce0

0800bef0 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800bef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bef4:	bf08      	it	eq
 800bef6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800befa:	d100      	bne.n	800befe <add_thread_timeout+0xe>
 800befc:	4770      	bx	lr
{
 800befe:	b508      	push	{r3, lr}
 800bf00:	4902      	ldr	r1, [pc, #8]	; (800bf0c <add_thread_timeout+0x1c>)
 800bf02:	3018      	adds	r0, #24
 800bf04:	f000 fc48 	bl	800c798 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 800bf08:	bd08      	pop	{r3, pc}
 800bf0a:	bf00      	nop
 800bf0c:	08010e57 	.word	0x08010e57

0800bf10 <z_reset_time_slice>:
{
 800bf10:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 800bf12:	4b08      	ldr	r3, [pc, #32]	; (800bf34 <z_reset_time_slice+0x24>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	b903      	cbnz	r3, 800bf1a <z_reset_time_slice+0xa>
}
 800bf18:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800bf1a:	f7ff f8ef 	bl	800b0fc <sys_clock_elapsed>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	4a04      	ldr	r2, [pc, #16]	; (800bf34 <z_reset_time_slice+0x24>)
 800bf22:	6810      	ldr	r0, [r2, #0]
 800bf24:	4403      	add	r3, r0
 800bf26:	4a04      	ldr	r2, [pc, #16]	; (800bf38 <z_reset_time_slice+0x28>)
 800bf28:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	f005 f8d9 	bl	80110e2 <z_set_timeout_expiry>
}
 800bf30:	e7f2      	b.n	800bf18 <z_reset_time_slice+0x8>
 800bf32:	bf00      	nop
 800bf34:	20001474 	.word	0x20001474
 800bf38:	20001430 	.word	0x20001430

0800bf3c <k_sched_time_slice_set>:
{
 800bf3c:	b570      	push	{r4, r5, r6, lr}
 800bf3e:	4604      	mov	r4, r0
 800bf40:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 800bf42:	2300      	movs	r3, #0
	__asm__ volatile(
 800bf44:	f04f 0210 	mov.w	r2, #16
 800bf48:	f3ef 8611 	mrs	r6, BASEPRI
 800bf4c:	f382 8812 	msr	BASEPRI_MAX, r2
 800bf50:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 800bf54:	e00c      	b.n	800bf70 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	bfb8      	it	lt
 800bf5a:	2302      	movlt	r3, #2
 800bf5c:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 800bf5e:	4b0b      	ldr	r3, [pc, #44]	; (800bf8c <k_sched_time_slice_set+0x50>)
 800bf60:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 800bf62:	f7ff ffd5 	bl	800bf10 <z_reset_time_slice>
	__asm__ volatile(
 800bf66:	f386 8811 	msr	BASEPRI, r6
 800bf6a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800bf6e:	2301      	movs	r3, #1
 800bf70:	b953      	cbnz	r3, 800bf88 <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 800bf72:	4b07      	ldr	r3, [pc, #28]	; (800bf90 <k_sched_time_slice_set+0x54>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 800bf78:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800bf7c:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 800bf7e:	4a05      	ldr	r2, [pc, #20]	; (800bf94 <k_sched_time_slice_set+0x58>)
 800bf80:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800bf82:	2c00      	cmp	r4, #0
 800bf84:	dce7      	bgt.n	800bf56 <k_sched_time_slice_set+0x1a>
 800bf86:	e7ea      	b.n	800bf5e <k_sched_time_slice_set+0x22>
}
 800bf88:	bd70      	pop	{r4, r5, r6, pc}
 800bf8a:	bf00      	nop
 800bf8c:	20001470 	.word	0x20001470
 800bf90:	20001430 	.word	0x20001430
 800bf94:	20001474 	.word	0x20001474

0800bf98 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 800bf98:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 800bf9a:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800bf9c:	b921      	cbnz	r1, 800bfa8 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf9e:	f3ef 8305 	mrs	r3, IPSR
 800bfa2:	b913      	cbnz	r3, 800bfaa <z_reschedule+0x12>
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	e000      	b.n	800bfaa <z_reschedule+0x12>
 800bfa8:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 800bfaa:	f011 0f01 	tst.w	r1, #1
 800bfae:	d007      	beq.n	800bfc0 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 800bfb0:	4b06      	ldr	r3, [pc, #24]	; (800bfcc <z_reschedule+0x34>)
 800bfb2:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 800bfb4:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d002      	beq.n	800bfc0 <z_reschedule+0x28>
	ret = arch_swap(key);
 800bfba:	f7f8 fb83 	bl	80046c4 <arch_swap>
		z_swap(lock, key);
 800bfbe:	e003      	b.n	800bfc8 <z_reschedule+0x30>
 800bfc0:	f380 8811 	msr	BASEPRI, r0
 800bfc4:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 800bfc8:	bd08      	pop	{r3, pc}
 800bfca:	bf00      	nop
 800bfcc:	20001430 	.word	0x20001430

0800bfd0 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 800bfd0:	2300      	movs	r3, #0
	__asm__ volatile(
 800bfd2:	f04f 0210 	mov.w	r2, #16
 800bfd6:	f3ef 8111 	mrs	r1, BASEPRI
 800bfda:	f382 8812 	msr	BASEPRI_MAX, r2
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	e009      	b.n	800bff8 <k_sched_lock+0x28>
	--_current->base.sched_locked;
 800bfe4:	4b06      	ldr	r3, [pc, #24]	; (800c000 <k_sched_lock+0x30>)
 800bfe6:	689a      	ldr	r2, [r3, #8]
 800bfe8:	7bd3      	ldrb	r3, [r2, #15]
 800bfea:	3b01      	subs	r3, #1
 800bfec:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800bfee:	f381 8811 	msr	BASEPRI, r1
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	2301      	movs	r3, #1
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d0f3      	beq.n	800bfe4 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	20001430 	.word	0x20001430

0800c004 <update_cache>:
{
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
 800c008:	480f      	ldr	r0, [pc, #60]	; (800c048 <update_cache+0x44>)
 800c00a:	f004 ff01 	bl	8010e10 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800c00e:	4605      	mov	r5, r0
 800c010:	b170      	cbz	r0, 800c030 <update_cache+0x2c>
	if (preempt_ok != 0) {
 800c012:	b984      	cbnz	r4, 800c036 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 800c014:	4b0d      	ldr	r3, [pc, #52]	; (800c04c <update_cache+0x48>)
 800c016:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 800c018:	7b5a      	ldrb	r2, [r3, #13]
 800c01a:	f012 0f1f 	tst.w	r2, #31
 800c01e:	d10a      	bne.n	800c036 <update_cache+0x32>
	return node->next != NULL;
 800c020:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800c022:	b942      	cbnz	r2, 800c036 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800c024:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 800c026:	2a7f      	cmp	r2, #127	; 0x7f
 800c028:	d905      	bls.n	800c036 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 800c02a:	4a08      	ldr	r2, [pc, #32]	; (800c04c <update_cache+0x48>)
 800c02c:	6193      	str	r3, [r2, #24]
 800c02e:	e00a      	b.n	800c046 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800c030:	4b06      	ldr	r3, [pc, #24]	; (800c04c <update_cache+0x48>)
 800c032:	68dd      	ldr	r5, [r3, #12]
 800c034:	e7ed      	b.n	800c012 <update_cache+0xe>
		if (thread != _current) {
 800c036:	4b05      	ldr	r3, [pc, #20]	; (800c04c <update_cache+0x48>)
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	42ab      	cmp	r3, r5
 800c03c:	d001      	beq.n	800c042 <update_cache+0x3e>
			z_reset_time_slice();
 800c03e:	f7ff ff67 	bl	800bf10 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800c042:	4b02      	ldr	r3, [pc, #8]	; (800c04c <update_cache+0x48>)
 800c044:	619d      	str	r5, [r3, #24]
}
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	2000144c 	.word	0x2000144c
 800c04c:	20001430 	.word	0x20001430

0800c050 <move_thread_to_end_of_prio_q>:
{
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 800c054:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800c056:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	db28      	blt.n	800c0b0 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 800c05e:	7b6b      	ldrb	r3, [r5, #13]
 800c060:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c064:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800c066:	4b1a      	ldr	r3, [pc, #104]	; (800c0d0 <move_thread_to_end_of_prio_q+0x80>)
 800c068:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c06c:	429c      	cmp	r4, r3
 800c06e:	d02d      	beq.n	800c0cc <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c070:	b16c      	cbz	r4, 800c08e <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800c072:	4621      	mov	r1, r4
 800c074:	4628      	mov	r0, r5
 800c076:	f004 fe60 	bl	8010d3a <z_sched_prio_cmp>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	dc20      	bgt.n	800c0c0 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c07e:	b134      	cbz	r4, 800c08e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 800c080:	4b13      	ldr	r3, [pc, #76]	; (800c0d0 <move_thread_to_end_of_prio_q+0x80>)
 800c082:	6a1b      	ldr	r3, [r3, #32]
 800c084:	429c      	cmp	r4, r3
 800c086:	d002      	beq.n	800c08e <move_thread_to_end_of_prio_q+0x3e>
 800c088:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c08a:	2c00      	cmp	r4, #0
 800c08c:	d1f0      	bne.n	800c070 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 800c08e:	4b10      	ldr	r3, [pc, #64]	; (800c0d0 <move_thread_to_end_of_prio_q+0x80>)
 800c090:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 800c092:	f103 011c 	add.w	r1, r3, #28
 800c096:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800c098:	606a      	str	r2, [r5, #4]

	tail->next = node;
 800c09a:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800c09c:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 800c09e:	4b0c      	ldr	r3, [pc, #48]	; (800c0d0 <move_thread_to_end_of_prio_q+0x80>)
 800c0a0:	6898      	ldr	r0, [r3, #8]
 800c0a2:	42a8      	cmp	r0, r5
 800c0a4:	bf14      	ite	ne
 800c0a6:	2000      	movne	r0, #0
 800c0a8:	2001      	moveq	r0, #1
 800c0aa:	f7ff ffab 	bl	800c004 <update_cache>
}
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800c0b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c0b4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800c0b6:	4601      	mov	r1, r0
 800c0b8:	4806      	ldr	r0, [pc, #24]	; (800c0d4 <move_thread_to_end_of_prio_q+0x84>)
 800c0ba:	f004 fe7d 	bl	8010db8 <z_priq_dumb_remove>
}
 800c0be:	e7ce      	b.n	800c05e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800c0c0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 800c0c2:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800c0c4:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800c0c6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800c0c8:	6065      	str	r5, [r4, #4]
}
 800c0ca:	e7e8      	b.n	800c09e <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c0cc:	2400      	movs	r4, #0
 800c0ce:	e7cf      	b.n	800c070 <move_thread_to_end_of_prio_q+0x20>
 800c0d0:	20001430 	.word	0x20001430
 800c0d4:	2000144c 	.word	0x2000144c

0800c0d8 <z_time_slice>:
{
 800c0d8:	b510      	push	{r4, lr}
	__asm__ volatile(
 800c0da:	f04f 0310 	mov.w	r3, #16
 800c0de:	f3ef 8411 	mrs	r4, BASEPRI
 800c0e2:	f383 8812 	msr	BASEPRI_MAX, r3
 800c0e6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800c0ea:	4b21      	ldr	r3, [pc, #132]	; (800c170 <z_time_slice+0x98>)
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	4a21      	ldr	r2, [pc, #132]	; (800c174 <z_time_slice+0x9c>)
 800c0f0:	6812      	ldr	r2, [r2, #0]
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d017      	beq.n	800c126 <z_time_slice+0x4e>
	pending_current = NULL;
 800c0f6:	4a1f      	ldr	r2, [pc, #124]	; (800c174 <z_time_slice+0x9c>)
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800c0fc:	4a1e      	ldr	r2, [pc, #120]	; (800c178 <z_time_slice+0xa0>)
 800c0fe:	6812      	ldr	r2, [r2, #0]
 800c100:	b372      	cbz	r2, 800c160 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800c102:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 800c104:	2a7f      	cmp	r2, #127	; 0x7f
 800c106:	d815      	bhi.n	800c134 <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 800c108:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 800c10a:	f012 0f1f 	tst.w	r2, #31
 800c10e:	d11b      	bne.n	800c148 <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800c110:	f993 100e 	ldrsb.w	r1, [r3, #14]
 800c114:	4a19      	ldr	r2, [pc, #100]	; (800c17c <z_time_slice+0xa4>)
 800c116:	6812      	ldr	r2, [r2, #0]
 800c118:	4291      	cmp	r1, r2
 800c11a:	db17      	blt.n	800c14c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 800c11c:	4a18      	ldr	r2, [pc, #96]	; (800c180 <z_time_slice+0xa8>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d016      	beq.n	800c150 <z_time_slice+0x78>
 800c122:	2201      	movs	r2, #1
 800c124:	e007      	b.n	800c136 <z_time_slice+0x5e>
		z_reset_time_slice();
 800c126:	f7ff fef3 	bl	800bf10 <z_reset_time_slice>
	__asm__ volatile(
 800c12a:	f384 8811 	msr	BASEPRI, r4
 800c12e:	f3bf 8f6f 	isb	sy
		return;
 800c132:	e01c      	b.n	800c16e <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 800c134:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 800c136:	b19a      	cbz	r2, 800c160 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 800c138:	4a0d      	ldr	r2, [pc, #52]	; (800c170 <z_time_slice+0x98>)
 800c13a:	6912      	ldr	r2, [r2, #16]
 800c13c:	4282      	cmp	r2, r0
 800c13e:	dd09      	ble.n	800c154 <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 800c140:	1a10      	subs	r0, r2, r0
 800c142:	4b0b      	ldr	r3, [pc, #44]	; (800c170 <z_time_slice+0x98>)
 800c144:	6118      	str	r0, [r3, #16]
 800c146:	e00e      	b.n	800c166 <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 800c148:	2200      	movs	r2, #0
 800c14a:	e7f4      	b.n	800c136 <z_time_slice+0x5e>
 800c14c:	2200      	movs	r2, #0
 800c14e:	e7f2      	b.n	800c136 <z_time_slice+0x5e>
 800c150:	2200      	movs	r2, #0
 800c152:	e7f0      	b.n	800c136 <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 800c154:	4618      	mov	r0, r3
 800c156:	f7ff ff7b 	bl	800c050 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 800c15a:	f7ff fed9 	bl	800bf10 <z_reset_time_slice>
 800c15e:	e002      	b.n	800c166 <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 800c160:	4b03      	ldr	r3, [pc, #12]	; (800c170 <z_time_slice+0x98>)
 800c162:	2200      	movs	r2, #0
 800c164:	611a      	str	r2, [r3, #16]
 800c166:	f384 8811 	msr	BASEPRI, r4
 800c16a:	f3bf 8f6f 	isb	sy
}
 800c16e:	bd10      	pop	{r4, pc}
 800c170:	20001430 	.word	0x20001430
 800c174:	20001468 	.word	0x20001468
 800c178:	20001474 	.word	0x20001474
 800c17c:	20001470 	.word	0x20001470
 800c180:	20000bd8 	.word	0x20000bd8

0800c184 <ready_thread>:
{
 800c184:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 800c186:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800c188:	f990 200d 	ldrsb.w	r2, [r0, #13]
 800c18c:	2a00      	cmp	r2, #0
 800c18e:	db2d      	blt.n	800c1ec <ready_thread+0x68>
 800c190:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800c192:	f013 0f1f 	tst.w	r3, #31
 800c196:	d105      	bne.n	800c1a4 <ready_thread+0x20>
	return node->next != NULL;
 800c198:	6982      	ldr	r2, [r0, #24]
 800c19a:	b10a      	cbz	r2, 800c1a0 <ready_thread+0x1c>
 800c19c:	2200      	movs	r2, #0
 800c19e:	e002      	b.n	800c1a6 <ready_thread+0x22>
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	e000      	b.n	800c1a6 <ready_thread+0x22>
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	b30a      	cbz	r2, 800c1ec <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 800c1a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c1ac:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800c1ae:	4b14      	ldr	r3, [pc, #80]	; (800c200 <ready_thread+0x7c>)
 800c1b0:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c1b4:	429d      	cmp	r5, r3
 800c1b6:	d020      	beq.n	800c1fa <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c1b8:	b16d      	cbz	r5, 800c1d6 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f004 fdbc 	bl	8010d3a <z_sched_prio_cmp>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	dc13      	bgt.n	800c1ee <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c1c6:	b135      	cbz	r5, 800c1d6 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 800c1c8:	4b0d      	ldr	r3, [pc, #52]	; (800c200 <ready_thread+0x7c>)
 800c1ca:	6a1b      	ldr	r3, [r3, #32]
 800c1cc:	429d      	cmp	r5, r3
 800c1ce:	d002      	beq.n	800c1d6 <ready_thread+0x52>
 800c1d0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c1d2:	2d00      	cmp	r5, #0
 800c1d4:	d1f0      	bne.n	800c1b8 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 800c1d6:	4b0a      	ldr	r3, [pc, #40]	; (800c200 <ready_thread+0x7c>)
 800c1d8:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800c1da:	f103 011c 	add.w	r1, r3, #28
 800c1de:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 800c1e0:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800c1e2:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800c1e4:	621c      	str	r4, [r3, #32]
		update_cache(0);
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	f7ff ff0c 	bl	800c004 <update_cache>
}
 800c1ec:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 800c1ee:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 800c1f0:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c1f2:	6025      	str	r5, [r4, #0]
	prev->next = node;
 800c1f4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c1f6:	606c      	str	r4, [r5, #4]
}
 800c1f8:	e7f5      	b.n	800c1e6 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c1fa:	2500      	movs	r5, #0
 800c1fc:	e7dc      	b.n	800c1b8 <ready_thread+0x34>
 800c1fe:	bf00      	nop
 800c200:	20001430 	.word	0x20001430

0800c204 <z_sched_start>:
{
 800c204:	b510      	push	{r4, lr}
	__asm__ volatile(
 800c206:	f04f 0310 	mov.w	r3, #16
 800c20a:	f3ef 8411 	mrs	r4, BASEPRI
 800c20e:	f383 8812 	msr	BASEPRI_MAX, r3
 800c212:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800c216:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 800c218:	f013 0f04 	tst.w	r3, #4
 800c21c:	d104      	bne.n	800c228 <z_sched_start+0x24>
	__asm__ volatile(
 800c21e:	f384 8811 	msr	BASEPRI, r4
 800c222:	f3bf 8f6f 	isb	sy
}
 800c226:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800c228:	f023 0304 	bic.w	r3, r3, #4
 800c22c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 800c22e:	f7ff ffa9 	bl	800c184 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 800c232:	4621      	mov	r1, r4
 800c234:	4801      	ldr	r0, [pc, #4]	; (800c23c <z_sched_start+0x38>)
 800c236:	f7ff feaf 	bl	800bf98 <z_reschedule>
 800c23a:	e7f4      	b.n	800c226 <z_sched_start+0x22>
 800c23c:	2000146c 	.word	0x2000146c

0800c240 <unready_thread>:
{
 800c240:	b510      	push	{r4, lr}
 800c242:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 800c244:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800c246:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	db08      	blt.n	800c260 <unready_thread+0x20>
	update_cache(thread == _current);
 800c24e:	4b08      	ldr	r3, [pc, #32]	; (800c270 <unready_thread+0x30>)
 800c250:	6898      	ldr	r0, [r3, #8]
 800c252:	42a0      	cmp	r0, r4
 800c254:	bf14      	ite	ne
 800c256:	2000      	movne	r0, #0
 800c258:	2001      	moveq	r0, #1
 800c25a:	f7ff fed3 	bl	800c004 <update_cache>
}
 800c25e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800c260:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c264:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800c266:	4601      	mov	r1, r0
 800c268:	4802      	ldr	r0, [pc, #8]	; (800c274 <unready_thread+0x34>)
 800c26a:	f004 fda5 	bl	8010db8 <z_priq_dumb_remove>
}
 800c26e:	e7ee      	b.n	800c24e <unready_thread+0xe>
 800c270:	20001430 	.word	0x20001430
 800c274:	2000144c 	.word	0x2000144c

0800c278 <z_pend_curr>:
{
 800c278:	b510      	push	{r4, lr}
 800c27a:	460c      	mov	r4, r1
 800c27c:	4611      	mov	r1, r2
	pending_current = _current;
 800c27e:	4b06      	ldr	r3, [pc, #24]	; (800c298 <z_pend_curr+0x20>)
 800c280:	6898      	ldr	r0, [r3, #8]
 800c282:	4b06      	ldr	r3, [pc, #24]	; (800c29c <z_pend_curr+0x24>)
 800c284:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 800c286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c28a:	f004 fe46 	bl	8010f1a <pend>
 800c28e:	4620      	mov	r0, r4
 800c290:	f7f8 fa18 	bl	80046c4 <arch_swap>
}
 800c294:	bd10      	pop	{r4, pc}
 800c296:	bf00      	nop
 800c298:	20001430 	.word	0x20001430
 800c29c:	20001468 	.word	0x20001468

0800c2a0 <z_set_prio>:
{
 800c2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 800c2a8:	2300      	movs	r3, #0
	__asm__ volatile(
 800c2aa:	f04f 0210 	mov.w	r2, #16
 800c2ae:	f3ef 8811 	mrs	r8, BASEPRI
 800c2b2:	f382 8812 	msr	BASEPRI_MAX, r2
 800c2b6:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 800c2ba:	461f      	mov	r7, r3
 800c2bc:	e008      	b.n	800c2d0 <z_set_prio+0x30>
		if (need_sched) {
 800c2be:	f012 0701 	ands.w	r7, r2, #1
 800c2c2:	d111      	bne.n	800c2e8 <z_set_prio+0x48>
			thread->base.prio = prio;
 800c2c4:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 800c2c6:	f388 8811 	msr	BASEPRI, r8
 800c2ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d13d      	bne.n	800c352 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 800c2d6:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800c2d8:	f013 0f1f 	tst.w	r3, #31
 800c2dc:	d1ef      	bne.n	800c2be <z_set_prio+0x1e>
	return node->next != NULL;
 800c2de:	69a1      	ldr	r1, [r4, #24]
 800c2e0:	2900      	cmp	r1, #0
 800c2e2:	d1ec      	bne.n	800c2be <z_set_prio+0x1e>
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	e7ea      	b.n	800c2be <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800c2e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2ec:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800c2ee:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800c358 <z_set_prio+0xb8>
 800c2f2:	4621      	mov	r1, r4
 800c2f4:	4648      	mov	r0, r9
 800c2f6:	f004 fd5f 	bl	8010db8 <z_priq_dumb_remove>
				thread->base.prio = prio;
 800c2fa:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 800c2fc:	7b63      	ldrb	r3, [r4, #13]
 800c2fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c302:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800c304:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c308:	454d      	cmp	r5, r9
 800c30a:	d020      	beq.n	800c34e <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c30c:	b16d      	cbz	r5, 800c32a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800c30e:	4629      	mov	r1, r5
 800c310:	4620      	mov	r0, r4
 800c312:	f004 fd12 	bl	8010d3a <z_sched_prio_cmp>
 800c316:	2800      	cmp	r0, #0
 800c318:	dc13      	bgt.n	800c342 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c31a:	b135      	cbz	r5, 800c32a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 800c31c:	4b0f      	ldr	r3, [pc, #60]	; (800c35c <z_set_prio+0xbc>)
 800c31e:	6a1b      	ldr	r3, [r3, #32]
 800c320:	429d      	cmp	r5, r3
 800c322:	d002      	beq.n	800c32a <z_set_prio+0x8a>
 800c324:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c326:	2d00      	cmp	r5, #0
 800c328:	d1f0      	bne.n	800c30c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 800c32a:	4b0c      	ldr	r3, [pc, #48]	; (800c35c <z_set_prio+0xbc>)
 800c32c:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800c32e:	f103 011c 	add.w	r1, r3, #28
 800c332:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 800c334:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800c336:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800c338:	621c      	str	r4, [r3, #32]
			update_cache(1);
 800c33a:	2001      	movs	r0, #1
 800c33c:	f7ff fe62 	bl	800c004 <update_cache>
 800c340:	e7c1      	b.n	800c2c6 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 800c342:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 800c344:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c346:	6025      	str	r5, [r4, #0]
	prev->next = node;
 800c348:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c34a:	606c      	str	r4, [r5, #4]
}
 800c34c:	e7f5      	b.n	800c33a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c34e:	2500      	movs	r5, #0
 800c350:	e7dc      	b.n	800c30c <z_set_prio+0x6c>
}
 800c352:	4638      	mov	r0, r7
 800c354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c358:	2000144c 	.word	0x2000144c
 800c35c:	20001430 	.word	0x20001430

0800c360 <z_impl_k_thread_suspend>:
{
 800c360:	b538      	push	{r3, r4, r5, lr}
 800c362:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800c364:	3018      	adds	r0, #24
 800c366:	f004 fe9e 	bl	80110a6 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 800c36a:	2300      	movs	r3, #0
	__asm__ volatile(
 800c36c:	f04f 0210 	mov.w	r2, #16
 800c370:	f3ef 8511 	mrs	r5, BASEPRI
 800c374:	f382 8812 	msr	BASEPRI_MAX, r2
 800c378:	f3bf 8f6f 	isb	sy
 800c37c:	e010      	b.n	800c3a0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800c37e:	7b63      	ldrb	r3, [r4, #13]
 800c380:	f043 0310 	orr.w	r3, r3, #16
 800c384:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 800c386:	4b15      	ldr	r3, [pc, #84]	; (800c3dc <z_impl_k_thread_suspend+0x7c>)
 800c388:	6898      	ldr	r0, [r3, #8]
 800c38a:	42a0      	cmp	r0, r4
 800c38c:	bf14      	ite	ne
 800c38e:	2000      	movne	r0, #0
 800c390:	2001      	moveq	r0, #1
 800c392:	f7ff fe37 	bl	800c004 <update_cache>
	__asm__ volatile(
 800c396:	f385 8811 	msr	BASEPRI, r5
 800c39a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800c39e:	2301      	movs	r3, #1
 800c3a0:	b963      	cbnz	r3, 800c3bc <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 800c3a2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 800c3a4:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	dae8      	bge.n	800c37e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800c3ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c3b0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800c3b2:	4621      	mov	r1, r4
 800c3b4:	480a      	ldr	r0, [pc, #40]	; (800c3e0 <z_impl_k_thread_suspend+0x80>)
 800c3b6:	f004 fcff 	bl	8010db8 <z_priq_dumb_remove>
}
 800c3ba:	e7e0      	b.n	800c37e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 800c3bc:	4b07      	ldr	r3, [pc, #28]	; (800c3dc <z_impl_k_thread_suspend+0x7c>)
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	42a3      	cmp	r3, r4
 800c3c2:	d000      	beq.n	800c3c6 <z_impl_k_thread_suspend+0x66>
}
 800c3c4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800c3c6:	f04f 0310 	mov.w	r3, #16
 800c3ca:	f3ef 8011 	mrs	r0, BASEPRI
 800c3ce:	f383 8812 	msr	BASEPRI_MAX, r3
 800c3d2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800c3d6:	f004 fcda 	bl	8010d8e <z_reschedule_irqlock>
 800c3da:	e7f3      	b.n	800c3c4 <z_impl_k_thread_suspend+0x64>
 800c3dc:	20001430 	.word	0x20001430
 800c3e0:	2000144c 	.word	0x2000144c

0800c3e4 <k_sched_unlock>:

void k_sched_unlock(void)
{
 800c3e4:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	f04f 0210 	mov.w	r2, #16
 800c3ec:	f3ef 8411 	mrs	r4, BASEPRI
 800c3f0:	f382 8812 	msr	BASEPRI_MAX, r2
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	e00c      	b.n	800c414 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 800c3fa:	4b0d      	ldr	r3, [pc, #52]	; (800c430 <k_sched_unlock+0x4c>)
 800c3fc:	689a      	ldr	r2, [r3, #8]
 800c3fe:	7bd3      	ldrb	r3, [r2, #15]
 800c400:	3301      	adds	r3, #1
 800c402:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800c404:	2000      	movs	r0, #0
 800c406:	f7ff fdfd 	bl	800c004 <update_cache>
	__asm__ volatile(
 800c40a:	f384 8811 	msr	BASEPRI, r4
 800c40e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800c412:	2301      	movs	r3, #1
 800c414:	2b00      	cmp	r3, #0
 800c416:	d0f0      	beq.n	800c3fa <k_sched_unlock+0x16>
	__asm__ volatile(
 800c418:	f04f 0310 	mov.w	r3, #16
 800c41c:	f3ef 8011 	mrs	r0, BASEPRI
 800c420:	f383 8812 	msr	BASEPRI_MAX, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f004 fcb1 	bl	8010d8e <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 800c42c:	bd10      	pop	{r4, pc}
 800c42e:	bf00      	nop
 800c430:	20001430 	.word	0x20001430

0800c434 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 800c434:	7b43      	ldrb	r3, [r0, #13]
 800c436:	f013 0f08 	tst.w	r3, #8
 800c43a:	d142      	bne.n	800c4c2 <end_thread+0x8e>
{
 800c43c:	b570      	push	{r4, r5, r6, lr}
 800c43e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 800c440:	f043 0308 	orr.w	r3, r3, #8
 800c444:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800c446:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c44a:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 800c44c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c450:	d12b      	bne.n	800c4aa <end_thread+0x76>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
 800c452:	68ab      	ldr	r3, [r5, #8]
 800c454:	b15b      	cbz	r3, 800c46e <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800c456:	4628      	mov	r0, r5
 800c458:	f004 fc6d 	bl	8010d36 <pended_on_thread>
 800c45c:	4629      	mov	r1, r5
 800c45e:	f004 fcab 	bl	8010db8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800c462:	7b6b      	ldrb	r3, [r5, #13]
 800c464:	f023 0302 	bic.w	r3, r3, #2
 800c468:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	60ab      	str	r3, [r5, #8]
 800c46e:	f105 0018 	add.w	r0, r5, #24
 800c472:	f004 fe18 	bl	80110a6 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 800c476:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 800c478:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c47a:	42ac      	cmp	r4, r5
 800c47c:	d01d      	beq.n	800c4ba <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800c47e:	b1e4      	cbz	r4, 800c4ba <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800c480:	4620      	mov	r0, r4
 800c482:	f004 fc58 	bl	8010d36 <pended_on_thread>
 800c486:	4621      	mov	r1, r4
 800c488:	f004 fc96 	bl	8010db8 <z_priq_dumb_remove>
 800c48c:	7b63      	ldrb	r3, [r4, #13]
 800c48e:	f023 0302 	bic.w	r3, r3, #2
 800c492:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800c494:	2600      	movs	r6, #0
 800c496:	60a6      	str	r6, [r4, #8]
 800c498:	f104 0018 	add.w	r0, r4, #24
 800c49c:	f004 fe03 	bl	80110a6 <z_abort_timeout>
 800c4a0:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f7ff fe6e 	bl	800c184 <ready_thread>
 800c4a8:	e7e6      	b.n	800c478 <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800c4aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4ae:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800c4b0:	4601      	mov	r1, r0
 800c4b2:	4804      	ldr	r0, [pc, #16]	; (800c4c4 <end_thread+0x90>)
 800c4b4:	f004 fc80 	bl	8010db8 <z_priq_dumb_remove>
}
 800c4b8:	e7cb      	b.n	800c452 <end_thread+0x1e>
		update_cache(1);
 800c4ba:	2001      	movs	r0, #1
 800c4bc:	f7ff fda2 	bl	800c004 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 800c4c0:	bd70      	pop	{r4, r5, r6, pc}
 800c4c2:	4770      	bx	lr
 800c4c4:	2000144c 	.word	0x2000144c

0800c4c8 <z_sched_init>:
{
 800c4c8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
 800c4ca:	4804      	ldr	r0, [pc, #16]	; (800c4dc <z_sched_init+0x14>)
 800c4cc:	f004 fd99 	bl	8011002 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	4608      	mov	r0, r1
 800c4d4:	f7ff fd32 	bl	800bf3c <k_sched_time_slice_set>
}
 800c4d8:	bd08      	pop	{r3, pc}
 800c4da:	bf00      	nop
 800c4dc:	20001448 	.word	0x20001448

0800c4e0 <z_impl_k_yield>:
{
 800c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e2:	f04f 0310 	mov.w	r3, #16
 800c4e6:	f3ef 8611 	mrs	r6, BASEPRI
 800c4ea:	f383 8812 	msr	BASEPRI_MAX, r3
 800c4ee:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
 800c4f2:	4c1c      	ldr	r4, [pc, #112]	; (800c564 <z_impl_k_yield+0x84>)
 800c4f4:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800c4f6:	7b4b      	ldrb	r3, [r1, #13]
 800c4f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4fc:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800c4fe:	f104 071c 	add.w	r7, r4, #28
 800c502:	4638      	mov	r0, r7
 800c504:	f004 fc58 	bl	8010db8 <z_priq_dumb_remove>
	queue_thread(_current);
 800c508:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 800c50a:	7b6b      	ldrb	r3, [r5, #13]
 800c50c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c510:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800c512:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c514:	42bc      	cmp	r4, r7
 800c516:	d023      	beq.n	800c560 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c518:	b16c      	cbz	r4, 800c536 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800c51a:	4621      	mov	r1, r4
 800c51c:	4628      	mov	r0, r5
 800c51e:	f004 fc0c 	bl	8010d3a <z_sched_prio_cmp>
 800c522:	2800      	cmp	r0, #0
 800c524:	dc16      	bgt.n	800c554 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c526:	b134      	cbz	r4, 800c536 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 800c528:	4b0e      	ldr	r3, [pc, #56]	; (800c564 <z_impl_k_yield+0x84>)
 800c52a:	6a1b      	ldr	r3, [r3, #32]
 800c52c:	429c      	cmp	r4, r3
 800c52e:	d002      	beq.n	800c536 <z_impl_k_yield+0x56>
 800c530:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c532:	2c00      	cmp	r4, #0
 800c534:	d1f0      	bne.n	800c518 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 800c536:	4b0b      	ldr	r3, [pc, #44]	; (800c564 <z_impl_k_yield+0x84>)
 800c538:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800c53a:	f103 011c 	add.w	r1, r3, #28
 800c53e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800c540:	606a      	str	r2, [r5, #4]
	tail->next = node;
 800c542:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800c544:	621d      	str	r5, [r3, #32]
	update_cache(1);
 800c546:	2001      	movs	r0, #1
 800c548:	f7ff fd5c 	bl	800c004 <update_cache>
 800c54c:	4630      	mov	r0, r6
 800c54e:	f7f8 f8b9 	bl	80046c4 <arch_swap>
}
 800c552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 800c554:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800c556:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800c558:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800c55a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800c55c:	6065      	str	r5, [r4, #4]
}
 800c55e:	e7f2      	b.n	800c546 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c560:	2400      	movs	r4, #0
 800c562:	e7d9      	b.n	800c518 <z_impl_k_yield+0x38>
 800c564:	20001430 	.word	0x20001430

0800c568 <z_tick_sleep>:
{
 800c568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 800c56c:	ea50 0301 	orrs.w	r3, r0, r1
 800c570:	d038      	beq.n	800c5e4 <z_tick_sleep+0x7c>
 800c572:	4604      	mov	r4, r0
 800c574:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 800c576:	f06f 0301 	mvn.w	r3, #1
 800c57a:	1a1b      	subs	r3, r3, r0
 800c57c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c580:	eb62 0201 	sbc.w	r2, r2, r1
 800c584:	2b01      	cmp	r3, #1
 800c586:	f172 0300 	sbcs.w	r3, r2, #0
 800c58a:	db2f      	blt.n	800c5ec <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 800c58c:	f06f 0501 	mvn.w	r5, #1
 800c590:	1a2d      	subs	r5, r5, r0
 800c592:	f04f 0310 	mov.w	r3, #16
 800c596:	f3ef 8811 	mrs	r8, BASEPRI
 800c59a:	f383 8812 	msr	BASEPRI_MAX, r3
 800c59e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 800c5a2:	4f14      	ldr	r7, [pc, #80]	; (800c5f4 <z_tick_sleep+0x8c>)
 800c5a4:	68b8      	ldr	r0, [r7, #8]
 800c5a6:	4b14      	ldr	r3, [pc, #80]	; (800c5f8 <z_tick_sleep+0x90>)
 800c5a8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 800c5aa:	f7ff fe49 	bl	800c240 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 800c5ae:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800c5b0:	4622      	mov	r2, r4
 800c5b2:	4633      	mov	r3, r6
 800c5b4:	4911      	ldr	r1, [pc, #68]	; (800c5fc <z_tick_sleep+0x94>)
 800c5b6:	3018      	adds	r0, #24
 800c5b8:	f000 f8ee 	bl	800c798 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 800c5bc:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800c5be:	7b53      	ldrb	r3, [r2, #13]
 800c5c0:	f043 0310 	orr.w	r3, r3, #16
 800c5c4:	7353      	strb	r3, [r2, #13]
 800c5c6:	4640      	mov	r0, r8
 800c5c8:	f7f8 f87c 	bl	80046c4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 800c5cc:	f004 fdb4 	bl	8011138 <sys_clock_tick_get_32>
 800c5d0:	1a28      	subs	r0, r5, r0
 800c5d2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800c5d6:	2801      	cmp	r0, #1
 800c5d8:	f173 0300 	sbcs.w	r3, r3, #0
 800c5dc:	da00      	bge.n	800c5e0 <z_tick_sleep+0x78>
	return 0;
 800c5de:	2000      	movs	r0, #0
}
 800c5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 800c5e4:	f7ff ff7c 	bl	800c4e0 <z_impl_k_yield>
		return 0;
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	e7f9      	b.n	800c5e0 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 800c5ec:	f004 fda4 	bl	8011138 <sys_clock_tick_get_32>
 800c5f0:	1905      	adds	r5, r0, r4
 800c5f2:	e7ce      	b.n	800c592 <z_tick_sleep+0x2a>
 800c5f4:	20001430 	.word	0x20001430
 800c5f8:	20001468 	.word	0x20001468
 800c5fc:	08010e57 	.word	0x08010e57

0800c600 <z_impl_k_sleep>:
{
 800c600:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800c602:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800c606:	bf08      	it	eq
 800c608:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 800c60c:	d007      	beq.n	800c61e <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 800c60e:	f7ff ffab 	bl	800c568 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 800c612:	220a      	movs	r2, #10
 800c614:	2300      	movs	r3, #0
 800c616:	17c1      	asrs	r1, r0, #31
 800c618:	f7f4 f9e0 	bl	80009dc <__aeabi_uldivmod>
}
 800c61c:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 800c61e:	4b03      	ldr	r3, [pc, #12]	; (800c62c <z_impl_k_sleep+0x2c>)
 800c620:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800c622:	f7ff fe9d 	bl	800c360 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 800c626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c62a:	e7f7      	b.n	800c61c <z_impl_k_sleep+0x1c>
 800c62c:	20001430 	.word	0x20001430

0800c630 <z_impl_z_current_get>:
}
 800c630:	4b01      	ldr	r3, [pc, #4]	; (800c638 <z_impl_z_current_get+0x8>)
 800c632:	6898      	ldr	r0, [r3, #8]
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	20001430 	.word	0x20001430

0800c63c <z_impl_k_is_preempt_thread>:
 800c63c:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 800c640:	b933      	cbnz	r3, 800c650 <z_impl_k_is_preempt_thread+0x14>
 800c642:	4b05      	ldr	r3, [pc, #20]	; (800c658 <z_impl_k_is_preempt_thread+0x1c>)
 800c644:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800c646:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 800c648:	2b7f      	cmp	r3, #127	; 0x7f
 800c64a:	d803      	bhi.n	800c654 <z_impl_k_is_preempt_thread+0x18>
 800c64c:	2001      	movs	r0, #1
 800c64e:	4770      	bx	lr
 800c650:	2000      	movs	r0, #0
 800c652:	4770      	bx	lr
 800c654:	2000      	movs	r0, #0
}
 800c656:	4770      	bx	lr
 800c658:	20001430 	.word	0x20001430

0800c65c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	f04f 0310 	mov.w	r3, #16
 800c662:	f3ef 8511 	mrs	r5, BASEPRI
 800c666:	f383 8812 	msr	BASEPRI_MAX, r3
 800c66a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800c66e:	7b43      	ldrb	r3, [r0, #13]
 800c670:	f013 0f08 	tst.w	r3, #8
 800c674:	d004      	beq.n	800c680 <z_thread_abort+0x24>
	__asm__ volatile(
 800c676:	f385 8811 	msr	BASEPRI, r5
 800c67a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 800c67e:	bd38      	pop	{r3, r4, r5, pc}
 800c680:	4604      	mov	r4, r0
	end_thread(thread);
 800c682:	f7ff fed7 	bl	800c434 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 800c686:	4b08      	ldr	r3, [pc, #32]	; (800c6a8 <z_thread_abort+0x4c>)
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	42a3      	cmp	r3, r4
 800c68c:	d004      	beq.n	800c698 <z_thread_abort+0x3c>
 800c68e:	f385 8811 	msr	BASEPRI, r5
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	e7f2      	b.n	800c67e <z_thread_abort+0x22>
 800c698:	f3ef 8305 	mrs	r3, IPSR
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1f6      	bne.n	800c68e <z_thread_abort+0x32>
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	f7f8 f80f 	bl	80046c4 <arch_swap>
	return ret;
 800c6a6:	e7f2      	b.n	800c68e <z_thread_abort+0x32>
 800c6a8:	20001430 	.word	0x20001430

0800c6ac <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 800c6ac:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 800c6b4:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 800c6b8:	e9cd bc00 	strd	fp, ip, [sp]
 800c6bc:	f7ff fddc 	bl	800c278 <z_pend_curr>

	if (data != NULL) {
 800c6c0:	b11c      	cbz	r4, 800c6ca <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
 800c6c2:	4b03      	ldr	r3, [pc, #12]	; (800c6d0 <z_sched_wait+0x24>)
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	695b      	ldr	r3, [r3, #20]
 800c6c8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 800c6ca:	b003      	add	sp, #12
 800c6cc:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
 800c6d0:	20001430 	.word	0x20001430

0800c6d4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 800c6d4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 800c6d6:	4806      	ldr	r0, [pc, #24]	; (800c6f0 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800c6d8:	4a06      	ldr	r2, [pc, #24]	; (800c6f4 <z_data_copy+0x20>)
 800c6da:	1a12      	subs	r2, r2, r0
 800c6dc:	4906      	ldr	r1, [pc, #24]	; (800c6f8 <z_data_copy+0x24>)
 800c6de:	f004 fdde 	bl	801129e <memcpy>
 800c6e2:	4a06      	ldr	r2, [pc, #24]	; (800c6fc <z_data_copy+0x28>)
 800c6e4:	4906      	ldr	r1, [pc, #24]	; (800c700 <z_data_copy+0x2c>)
 800c6e6:	4807      	ldr	r0, [pc, #28]	; (800c704 <z_data_copy+0x30>)
 800c6e8:	f004 fdd9 	bl	801129e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800c6ec:	bd08      	pop	{r3, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20000000 	.word	0x20000000
 800c6f4:	2000069c 	.word	0x2000069c
 800c6f8:	08013e18 	.word	0x08013e18
 800c6fc:	00000000 	.word	0x00000000
 800c700:	08013e18 	.word	0x08013e18
 800c704:	20000000 	.word	0x20000000

0800c708 <first>:
	return list->head == list;
 800c708:	4b03      	ldr	r3, [pc, #12]	; (800c718 <first+0x10>)
 800c70a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c70c:	4298      	cmp	r0, r3
 800c70e:	d000      	beq.n	800c712 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 800c710:	4770      	bx	lr
 800c712:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 800c714:	e7fc      	b.n	800c710 <first+0x8>
 800c716:	bf00      	nop
 800c718:	200003c4 	.word	0x200003c4

0800c71c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c71c:	b130      	cbz	r0, 800c72c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 800c71e:	4a04      	ldr	r2, [pc, #16]	; (800c730 <next+0x14>)
 800c720:	6852      	ldr	r2, [r2, #4]
 800c722:	4290      	cmp	r0, r2
 800c724:	d001      	beq.n	800c72a <next+0xe>
 800c726:	6800      	ldr	r0, [r0, #0]
 800c728:	4770      	bx	lr
 800c72a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	200003c4 	.word	0x200003c4

0800c734 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 800c734:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800c736:	4b04      	ldr	r3, [pc, #16]	; (800c748 <elapsed+0x14>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	b10b      	cbz	r3, 800c740 <elapsed+0xc>
 800c73c:	2000      	movs	r0, #0
}
 800c73e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800c740:	f7fe fcdc 	bl	800b0fc <sys_clock_elapsed>
 800c744:	e7fb      	b.n	800c73e <elapsed+0xa>
 800c746:	bf00      	nop
 800c748:	20001478 	.word	0x20001478

0800c74c <next_timeout>:

static int32_t next_timeout(void)
{
 800c74c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 800c74e:	f7ff ffdb 	bl	800c708 <first>
 800c752:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 800c754:	f7ff ffee 	bl	800c734 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 800c758:	b17c      	cbz	r4, 800c77a <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 800c75a:	6923      	ldr	r3, [r4, #16]
 800c75c:	6962      	ldr	r2, [r4, #20]
 800c75e:	1a1b      	subs	r3, r3, r0
 800c760:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 800c764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c768:	f170 0200 	sbcs.w	r2, r0, #0
 800c76c:	da08      	bge.n	800c780 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 800c76e:	2800      	cmp	r0, #0
 800c770:	db01      	blt.n	800c776 <next_timeout+0x2a>
 800c772:	4618      	mov	r0, r3
 800c774:	e006      	b.n	800c784 <next_timeout+0x38>
 800c776:	2300      	movs	r3, #0
 800c778:	e7fb      	b.n	800c772 <next_timeout+0x26>
		ret = MAX_WAIT;
 800c77a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800c77e:	e001      	b.n	800c784 <next_timeout+0x38>
 800c780:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800c784:	4b03      	ldr	r3, [pc, #12]	; (800c794 <next_timeout+0x48>)
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	b113      	cbz	r3, 800c790 <next_timeout+0x44>
 800c78a:	4283      	cmp	r3, r0
 800c78c:	da00      	bge.n	800c790 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
 800c78e:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 800c790:	bd10      	pop	{r4, pc}
 800c792:	bf00      	nop
 800c794:	20001430 	.word	0x20001430

0800c798 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800c798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c79c:	bf08      	it	eq
 800c79e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800c7a2:	d07d      	beq.n	800c8a0 <z_add_timeout+0x108>
{
 800c7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	4692      	mov	sl, r2
 800c7ac:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800c7ae:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 800c7b0:	2300      	movs	r3, #0
	__asm__ volatile(
 800c7b2:	f04f 0210 	mov.w	r2, #16
 800c7b6:	f3ef 8711 	mrs	r7, BASEPRI
 800c7ba:	f382 8812 	msr	BASEPRI_MAX, r2
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	e021      	b.n	800c808 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 800c7c4:	f11a 0801 	adds.w	r8, sl, #1
 800c7c8:	f145 0900 	adc.w	r9, r5, #0
 800c7cc:	f7ff ffb2 	bl	800c734 <elapsed>
 800c7d0:	eb18 0300 	adds.w	r3, r8, r0
 800c7d4:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
 800c7d8:	6123      	str	r3, [r4, #16]
 800c7da:	6160      	str	r0, [r4, #20]
 800c7dc:	e036      	b.n	800c84c <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 800c7de:	1a51      	subs	r1, r2, r1
 800c7e0:	eb66 0303 	sbc.w	r3, r6, r3
 800c7e4:	6101      	str	r1, [r0, #16]
 800c7e6:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 800c7e8:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 800c7ea:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c7ec:	6020      	str	r0, [r4, #0]
	prev->next = node;
 800c7ee:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c7f0:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d03e      	beq.n	800c874 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 800c7f6:	f7ff ff87 	bl	800c708 <first>
 800c7fa:	4284      	cmp	r4, r0
 800c7fc:	d041      	beq.n	800c882 <z_add_timeout+0xea>
	__asm__ volatile(
 800c7fe:	f387 8811 	msr	BASEPRI, r7
 800c802:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800c806:	2301      	movs	r3, #1
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d147      	bne.n	800c89c <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800c80c:	4653      	mov	r3, sl
 800c80e:	f06f 0101 	mvn.w	r1, #1
 800c812:	ebb1 010a 	subs.w	r1, r1, sl
 800c816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c81a:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800c81e:	2a00      	cmp	r2, #0
 800c820:	dbd0      	blt.n	800c7c4 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800c822:	4a20      	ldr	r2, [pc, #128]	; (800c8a4 <z_add_timeout+0x10c>)
 800c824:	6811      	ldr	r1, [r2, #0]
 800c826:	6852      	ldr	r2, [r2, #4]
 800c828:	185b      	adds	r3, r3, r1
 800c82a:	eb42 0205 	adc.w	r2, r2, r5
 800c82e:	f06f 0101 	mvn.w	r1, #1
 800c832:	1acb      	subs	r3, r1, r3
 800c834:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
 800c838:	4618      	mov	r0, r3
 800c83a:	4611      	mov	r1, r2
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	f172 0300 	sbcs.w	r3, r2, #0
 800c842:	da01      	bge.n	800c848 <z_add_timeout+0xb0>
 800c844:	2001      	movs	r0, #1
 800c846:	2100      	movs	r1, #0
 800c848:	6120      	str	r0, [r4, #16]
 800c84a:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800c84c:	f7ff ff5c 	bl	800c708 <first>
 800c850:	2800      	cmp	r0, #0
 800c852:	d0ce      	beq.n	800c7f2 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 800c854:	6902      	ldr	r2, [r0, #16]
 800c856:	6946      	ldr	r6, [r0, #20]
 800c858:	6921      	ldr	r1, [r4, #16]
 800c85a:	6963      	ldr	r3, [r4, #20]
 800c85c:	4291      	cmp	r1, r2
 800c85e:	eb73 0c06 	sbcs.w	ip, r3, r6
 800c862:	dbbc      	blt.n	800c7de <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 800c864:	1a89      	subs	r1, r1, r2
 800c866:	eb63 0306 	sbc.w	r3, r3, r6
 800c86a:	6121      	str	r1, [r4, #16]
 800c86c:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800c86e:	f7ff ff55 	bl	800c71c <next>
 800c872:	e7ed      	b.n	800c850 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
 800c874:	4b0c      	ldr	r3, [pc, #48]	; (800c8a8 <z_add_timeout+0x110>)
 800c876:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 800c878:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 800c87a:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800c87c:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800c87e:	605c      	str	r4, [r3, #4]
}
 800c880:	e7b9      	b.n	800c7f6 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800c882:	f7ff ff63 	bl	800c74c <next_timeout>

			if (next_time == 0 ||
 800c886:	4603      	mov	r3, r0
 800c888:	b118      	cbz	r0, 800c892 <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
 800c88a:	4a08      	ldr	r2, [pc, #32]	; (800c8ac <z_add_timeout+0x114>)
 800c88c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 800c88e:	4282      	cmp	r2, r0
 800c890:	d0b5      	beq.n	800c7fe <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 800c892:	2100      	movs	r1, #0
 800c894:	4618      	mov	r0, r3
 800c896:	f7fe fbaf 	bl	800aff8 <sys_clock_set_timeout>
 800c89a:	e7b0      	b.n	800c7fe <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 800c89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	20000cd8 	.word	0x20000cd8
 800c8a8:	200003c4 	.word	0x200003c4
 800c8ac:	20001430 	.word	0x20001430

0800c8b0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800c8b4:	f7ff fc10 	bl	800c0d8 <z_time_slice>
	__asm__ volatile(
 800c8b8:	f04f 0310 	mov.w	r3, #16
 800c8bc:	f3ef 8511 	mrs	r5, BASEPRI
 800c8c0:	f383 8812 	msr	BASEPRI_MAX, r3
 800c8c4:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800c8c8:	4b28      	ldr	r3, [pc, #160]	; (800c96c <sys_clock_announce+0xbc>)
 800c8ca:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 800c8cc:	e020      	b.n	800c910 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800c8ce:	4828      	ldr	r0, [pc, #160]	; (800c970 <sys_clock_announce+0xc0>)
 800c8d0:	6801      	ldr	r1, [r0, #0]
 800c8d2:	6846      	ldr	r6, [r0, #4]
 800c8d4:	1889      	adds	r1, r1, r2
 800c8d6:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 800c8da:	6001      	str	r1, [r0, #0]
 800c8dc:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 800c8de:	1a9b      	subs	r3, r3, r2
 800c8e0:	4a22      	ldr	r2, [pc, #136]	; (800c96c <sys_clock_announce+0xbc>)
 800c8e2:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f004 fbc3 	bl	8011078 <remove_timeout>
	__asm__ volatile(
 800c8f2:	f385 8811 	msr	BASEPRI, r5
 800c8f6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 800c8fa:	68a3      	ldr	r3, [r4, #8]
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	4798      	blx	r3
	__asm__ volatile(
 800c900:	f04f 0310 	mov.w	r3, #16
 800c904:	f3ef 8511 	mrs	r5, BASEPRI
 800c908:	f383 8812 	msr	BASEPRI_MAX, r3
 800c90c:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800c910:	f7ff fefa 	bl	800c708 <first>
 800c914:	4604      	mov	r4, r0
 800c916:	b140      	cbz	r0, 800c92a <sys_clock_announce+0x7a>
 800c918:	6902      	ldr	r2, [r0, #16]
 800c91a:	6941      	ldr	r1, [r0, #20]
 800c91c:	4b13      	ldr	r3, [pc, #76]	; (800c96c <sys_clock_announce+0xbc>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	17d8      	asrs	r0, r3, #31
 800c922:	4293      	cmp	r3, r2
 800c924:	eb70 0101 	sbcs.w	r1, r0, r1
 800c928:	dad1      	bge.n	800c8ce <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 800c92a:	b144      	cbz	r4, 800c93e <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 800c92c:	4b0f      	ldr	r3, [pc, #60]	; (800c96c <sys_clock_announce+0xbc>)
 800c92e:	6819      	ldr	r1, [r3, #0]
 800c930:	6923      	ldr	r3, [r4, #16]
 800c932:	6962      	ldr	r2, [r4, #20]
 800c934:	1a5b      	subs	r3, r3, r1
 800c936:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 800c93a:	6123      	str	r3, [r4, #16]
 800c93c:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 800c93e:	4a0c      	ldr	r2, [pc, #48]	; (800c970 <sys_clock_announce+0xc0>)
 800c940:	4e0a      	ldr	r6, [pc, #40]	; (800c96c <sys_clock_announce+0xbc>)
 800c942:	6830      	ldr	r0, [r6, #0]
 800c944:	6813      	ldr	r3, [r2, #0]
 800c946:	6851      	ldr	r1, [r2, #4]
 800c948:	181b      	adds	r3, r3, r0
 800c94a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 800c94e:	6013      	str	r3, [r2, #0]
 800c950:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 800c952:	2400      	movs	r4, #0
 800c954:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 800c956:	f7ff fef9 	bl	800c74c <next_timeout>
 800c95a:	4621      	mov	r1, r4
 800c95c:	f7fe fb4c 	bl	800aff8 <sys_clock_set_timeout>
	__asm__ volatile(
 800c960:	f385 8811 	msr	BASEPRI, r5
 800c964:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800c968:	bd70      	pop	{r4, r5, r6, pc}
 800c96a:	bf00      	nop
 800c96c:	20001478 	.word	0x20001478
 800c970:	20000cd8 	.word	0x20000cd8

0800c974 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 800c974:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 800c976:	2300      	movs	r3, #0
	__asm__ volatile(
 800c978:	f04f 0210 	mov.w	r2, #16
 800c97c:	f3ef 8411 	mrs	r4, BASEPRI
 800c980:	f382 8812 	msr	BASEPRI_MAX, r2
 800c984:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 800c988:	4618      	mov	r0, r3
 800c98a:	4619      	mov	r1, r3
 800c98c:	e00c      	b.n	800c9a8 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 800c98e:	f7fe fbb5 	bl	800b0fc <sys_clock_elapsed>
 800c992:	4a07      	ldr	r2, [pc, #28]	; (800c9b0 <sys_clock_tick_get+0x3c>)
 800c994:	6813      	ldr	r3, [r2, #0]
 800c996:	6851      	ldr	r1, [r2, #4]
 800c998:	18c0      	adds	r0, r0, r3
 800c99a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800c99e:	f384 8811 	msr	BASEPRI, r4
 800c9a2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d0f0      	beq.n	800c98e <sys_clock_tick_get+0x1a>
	}
	return t;
}
 800c9ac:	bd10      	pop	{r4, pc}
 800c9ae:	bf00      	nop
 800c9b0:	20000cd8 	.word	0x20000cd8

0800c9b4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 800c9b4:	b900      	cbnz	r0, 800c9b8 <z_impl_k_busy_wait+0x4>
 800c9b6:	4770      	bx	lr
{
 800c9b8:	b538      	push	{r3, r4, r5, lr}
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	f7fe fbbe 	bl	800b13c <sys_clock_cycle_get_32>
 800c9c0:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800c9c2:	4907      	ldr	r1, [pc, #28]	; (800c9e0 <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800c9c4:	4a07      	ldr	r2, [pc, #28]	; (800c9e4 <z_impl_k_busy_wait+0x30>)
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	fba4 0101 	umull	r0, r1, r4, r1
 800c9cc:	f7f4 f806 	bl	80009dc <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	f7fe fbb3 	bl	800b13c <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800c9d6:	1b40      	subs	r0, r0, r5
 800c9d8:	42a0      	cmp	r0, r4
 800c9da:	d3fa      	bcc.n	800c9d2 <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 800c9dc:	bd38      	pop	{r3, r4, r5, pc}
 800c9de:	bf00      	nop
 800c9e0:	04c4b400 	.word	0x04c4b400
 800c9e4:	000f4240 	.word	0x000f4240

0800c9e8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 800c9e8:	b570      	push	{r4, r5, r6, lr}
 800c9ea:	4604      	mov	r4, r0
	__asm__ volatile(
 800c9ec:	f04f 0310 	mov.w	r3, #16
 800c9f0:	f3ef 8611 	mrs	r6, BASEPRI
 800c9f4:	f383 8812 	msr	BASEPRI_MAX, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800c9fe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ca00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ca02:	ea52 0103 	orrs.w	r1, r2, r3
 800ca06:	d005      	beq.n	800ca14 <z_timer_expiration_handler+0x2c>
 800ca08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca0c:	bf08      	it	eq
 800ca0e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800ca12:	d126      	bne.n	800ca62 <z_timer_expiration_handler+0x7a>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 800ca14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ca16:	3301      	adds	r3, #1
 800ca18:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 800ca1a:	6a23      	ldr	r3, [r4, #32]
 800ca1c:	b173      	cbz	r3, 800ca3c <z_timer_expiration_handler+0x54>
	__asm__ volatile(
 800ca1e:	f386 8811 	msr	BASEPRI, r6
 800ca22:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 800ca26:	6a23      	ldr	r3, [r4, #32]
 800ca28:	4620      	mov	r0, r4
 800ca2a:	4798      	blx	r3
	__asm__ volatile(
 800ca2c:	f04f 0310 	mov.w	r3, #16
 800ca30:	f3ef 8511 	mrs	r5, BASEPRI
 800ca34:	f383 8812 	msr	BASEPRI_MAX, r3
 800ca38:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 800ca3c:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 800ca40:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ca42:	42a3      	cmp	r3, r4
 800ca44:	d013      	beq.n	800ca6e <z_timer_expiration_handler+0x86>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 800ca46:	b194      	cbz	r4, 800ca6e <z_timer_expiration_handler+0x86>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f004 f980 	bl	8010d4e <z_unpend_thread_no_timeout>
 800ca4e:	2300      	movs	r3, #0
 800ca50:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
 800ca52:	f385 8811 	msr	BASEPRI, r5
 800ca56:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f004 f9df 	bl	8010e1e <z_ready_thread>
}
 800ca60:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800ca62:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 800ca66:	4904      	ldr	r1, [pc, #16]	; (800ca78 <z_timer_expiration_handler+0x90>)
 800ca68:	f7ff fe96 	bl	800c798 <z_add_timeout>
 800ca6c:	e7d2      	b.n	800ca14 <z_timer_expiration_handler+0x2c>
 800ca6e:	f385 8811 	msr	BASEPRI, r5
 800ca72:	f3bf 8f6f 	isb	sy
		return;
 800ca76:	e7f3      	b.n	800ca60 <z_timer_expiration_handler+0x78>
 800ca78:	0800c9e9 	.word	0x0800c9e9

0800ca7c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800ca7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca80:	9f06      	ldr	r7, [sp, #24]
 800ca82:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800ca86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca8a:	bf08      	it	eq
 800ca8c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800ca90:	d02f      	beq.n	800caf2 <z_impl_k_timer_start+0x76>
 800ca92:	4605      	mov	r5, r0
 800ca94:	4614      	mov	r4, r2
 800ca96:	461e      	mov	r6, r3
 800ca98:	4611      	mov	r1, r2
 800ca9a:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800ca9c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800caa0:	bf08      	it	eq
 800caa2:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 800caa6:	d00d      	beq.n	800cac4 <z_impl_k_timer_start+0x48>
 800caa8:	ea57 0c08 	orrs.w	ip, r7, r8
 800caac:	d00a      	beq.n	800cac4 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
 800caae:	f06f 0c01 	mvn.w	ip, #1
 800cab2:	ebbc 0c07 	subs.w	ip, ip, r7
 800cab6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800caba:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800cabe:	f1bc 0f00 	cmp.w	ip, #0
 800cac2:	db18      	blt.n	800caf6 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800cac4:	f06f 0301 	mvn.w	r3, #1
 800cac8:	1a5b      	subs	r3, r3, r1
 800caca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cace:	eb63 0300 	sbc.w	r3, r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	db1a      	blt.n	800cb0c <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 800cad6:	4628      	mov	r0, r5
 800cad8:	f004 fae5 	bl	80110a6 <z_abort_timeout>
	timer->period = period;
 800cadc:	62af      	str	r7, [r5, #40]	; 0x28
 800cade:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
 800cae2:	2300      	movs	r3, #0
 800cae4:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800cae6:	4622      	mov	r2, r4
 800cae8:	4633      	mov	r3, r6
 800caea:	490e      	ldr	r1, [pc, #56]	; (800cb24 <z_impl_k_timer_start+0xa8>)
 800caec:	4628      	mov	r0, r5
 800caee:	f7ff fe53 	bl	800c798 <z_add_timeout>
		     duration);
}
 800caf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 800caf6:	2f02      	cmp	r7, #2
 800caf8:	f178 0300 	sbcs.w	r3, r8, #0
 800cafc:	da02      	bge.n	800cb04 <z_impl_k_timer_start+0x88>
 800cafe:	2702      	movs	r7, #2
 800cb00:	f04f 0800 	mov.w	r8, #0
 800cb04:	3f01      	subs	r7, #1
 800cb06:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
 800cb0a:	e7db      	b.n	800cac4 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800cb0c:	460c      	mov	r4, r1
 800cb0e:	4606      	mov	r6, r0
 800cb10:	2901      	cmp	r1, #1
 800cb12:	f170 0300 	sbcs.w	r3, r0, #0
 800cb16:	da01      	bge.n	800cb1c <z_impl_k_timer_start+0xa0>
 800cb18:	2401      	movs	r4, #1
 800cb1a:	2600      	movs	r6, #0
 800cb1c:	3c01      	subs	r4, #1
 800cb1e:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
 800cb22:	e7d8      	b.n	800cad6 <z_impl_k_timer_start+0x5a>
 800cb24:	0800c9e9 	.word	0x0800c9e9

0800cb28 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 800cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2c:	b087      	sub	sp, #28
 800cb2e:	4682      	mov	sl, r0
 800cb30:	460f      	mov	r7, r1
 800cb32:	4693      	mov	fp, r2
 800cb34:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 800cb36:	2500      	movs	r5, #0
	int events_registered = 0;
 800cb38:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
 800cb3a:	e02f      	b.n	800cb9c <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
 800cb3c:	6923      	ldr	r3, [r4, #16]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	b1cb      	cbz	r3, 800cb76 <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 800cb42:	f04f 0902 	mov.w	r9, #2
			return true;
 800cb46:	2301      	movs	r3, #1
 800cb48:	e015      	b.n	800cb76 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 800cb4a:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	b193      	cbz	r3, 800cb76 <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 800cb50:	f04f 0904 	mov.w	r9, #4
			return true;
 800cb54:	2301      	movs	r3, #1
 800cb56:	e00e      	b.n	800cb76 <register_events+0x4e>
		if (event->signal->signaled != 0U) {
 800cb58:	6923      	ldr	r3, [r4, #16]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	b15b      	cbz	r3, 800cb76 <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
 800cb5e:	f04f 0901 	mov.w	r9, #1
			return true;
 800cb62:	464b      	mov	r3, r9
 800cb64:	e007      	b.n	800cb76 <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
 800cb66:	6923      	ldr	r3, [r4, #16]
 800cb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb6a:	b123      	cbz	r3, 800cb76 <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 800cb6c:	f04f 0910 	mov.w	r9, #16
			return true;
 800cb70:	2301      	movs	r3, #1
 800cb72:	e000      	b.n	800cb76 <register_events+0x4e>
	switch (event->type) {
 800cb74:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d03a      	beq.n	800cbf0 <register_events+0xc8>
	event->poller = NULL;
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 800cb7e:	68e3      	ldr	r3, [r4, #12]
 800cb80:	f3c3 3245 	ubfx	r2, r3, #13, #6
 800cb84:	ea49 0202 	orr.w	r2, r9, r2
 800cb88:	f362 3352 	bfi	r3, r2, #13, #6
 800cb8c:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
 800cb8e:	f88b 1000 	strb.w	r1, [fp]
 800cb92:	f386 8811 	msr	BASEPRI, r6
 800cb96:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 800cb9a:	3501      	adds	r5, #1
 800cb9c:	42bd      	cmp	r5, r7
 800cb9e:	f280 81b9 	bge.w	800cf14 <register_events+0x3ec>
	__asm__ volatile(
 800cba2:	f04f 0310 	mov.w	r3, #16
 800cba6:	f3ef 8611 	mrs	r6, BASEPRI
 800cbaa:	f383 8812 	msr	BASEPRI_MAX, r3
 800cbae:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 800cbb2:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800cbb6:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800cbba:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
 800cbbe:	7b63      	ldrb	r3, [r4, #13]
 800cbc0:	f003 031f 	and.w	r3, r3, #31
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	2b07      	cmp	r3, #7
 800cbc8:	d8d4      	bhi.n	800cb74 <register_events+0x4c>
 800cbca:	a201      	add	r2, pc, #4	; (adr r2, 800cbd0 <register_events+0xa8>)
 800cbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd0:	0800cb59 	.word	0x0800cb59
 800cbd4:	0800cb3d 	.word	0x0800cb3d
 800cbd8:	0800cb75 	.word	0x0800cb75
 800cbdc:	0800cb4b 	.word	0x0800cb4b
 800cbe0:	0800cb75 	.word	0x0800cb75
 800cbe4:	0800cb75 	.word	0x0800cb75
 800cbe8:	0800cb75 	.word	0x0800cb75
 800cbec:	0800cb67 	.word	0x0800cb67
		} else if (!just_check && poller->is_polling) {
 800cbf0:	9b00      	ldr	r3, [sp, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d1cd      	bne.n	800cb92 <register_events+0x6a>
 800cbf6:	f89b 3000 	ldrb.w	r3, [fp]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d0c9      	beq.n	800cb92 <register_events+0x6a>
	switch (event->type) {
 800cbfe:	7b63      	ldrb	r3, [r4, #13]
 800cc00:	f003 031f 	and.w	r3, r3, #31
 800cc04:	3b01      	subs	r3, #1
 800cc06:	2b07      	cmp	r3, #7
 800cc08:	d848      	bhi.n	800cc9c <register_events+0x174>
 800cc0a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cc0e:	00cb      	.short	0x00cb
 800cc10:	00470008 	.word	0x00470008
 800cc14:	0047006d 	.word	0x0047006d
 800cc18:	00470047 	.word	0x00470047
 800cc1c:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
 800cc1e:	6923      	ldr	r3, [r4, #16]
 800cc20:	9304      	str	r3, [sp, #16]
 800cc22:	f103 0210 	add.w	r2, r3, #16
 800cc26:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800cc28:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d02f      	beq.n	800cc8e <register_events+0x166>
 800cc2e:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d02c      	beq.n	800cc8e <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800cc34:	6898      	ldr	r0, [r3, #8]
 800cc36:	f004 faae 	bl	8011196 <poller_thread>
 800cc3a:	9005      	str	r0, [sp, #20]
 800cc3c:	4658      	mov	r0, fp
 800cc3e:	f004 faaa 	bl	8011196 <poller_thread>
 800cc42:	4601      	mov	r1, r0
 800cc44:	9003      	str	r0, [sp, #12]
 800cc46:	9805      	ldr	r0, [sp, #20]
 800cc48:	f004 f877 	bl	8010d3a <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	dc1e      	bgt.n	800cc8e <register_events+0x166>
	return list->head == list;
 800cc50:	9b04      	ldr	r3, [sp, #16]
 800cc52:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800cc54:	9a02      	ldr	r2, [sp, #8]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d030      	beq.n	800ccbc <register_events+0x194>
 800cc5a:	9404      	str	r4, [sp, #16]
 800cc5c:	9505      	str	r5, [sp, #20]
 800cc5e:	9d02      	ldr	r5, [sp, #8]
 800cc60:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800cc62:	2c00      	cmp	r4, #0
 800cc64:	d030      	beq.n	800ccc8 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
 800cc66:	68a0      	ldr	r0, [r4, #8]
 800cc68:	f004 fa95 	bl	8011196 <poller_thread>
 800cc6c:	4601      	mov	r1, r0
 800cc6e:	9803      	ldr	r0, [sp, #12]
 800cc70:	f004 f863 	bl	8010d3a <z_sched_prio_cmp>
 800cc74:	2800      	cmp	r0, #0
 800cc76:	dc17      	bgt.n	800cca8 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800cc78:	2c00      	cmp	r4, #0
 800cc7a:	d028      	beq.n	800ccce <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
 800cc7c:	686b      	ldr	r3, [r5, #4]
 800cc7e:	429c      	cmp	r4, r3
 800cc80:	d02f      	beq.n	800cce2 <register_events+0x1ba>
 800cc82:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800cc84:	2c00      	cmp	r4, #0
 800cc86:	d1ec      	bne.n	800cc62 <register_events+0x13a>
 800cc88:	9c04      	ldr	r4, [sp, #16]
 800cc8a:	9d05      	ldr	r5, [sp, #20]
 800cc8c:	e021      	b.n	800ccd2 <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
 800cc8e:	9a02      	ldr	r2, [sp, #8]
 800cc90:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800cc92:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800cc96:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800cc98:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800cc9a:	6054      	str	r4, [r2, #4]
	event->poller = poller;
 800cc9c:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
 800cca0:	9b01      	ldr	r3, [sp, #4]
 800cca2:	3301      	adds	r3, #1
 800cca4:	9301      	str	r3, [sp, #4]
 800cca6:	e774      	b.n	800cb92 <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
 800cca8:	9d05      	ldr	r5, [sp, #20]
 800ccaa:	4622      	mov	r2, r4
 800ccac:	9c04      	ldr	r4, [sp, #16]
 800ccae:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800ccb0:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800ccb2:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800ccb6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800ccb8:	6054      	str	r4, [r2, #4]
			return;
 800ccba:	e7ef      	b.n	800cc9c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	9404      	str	r4, [sp, #16]
 800ccc0:	9505      	str	r5, [sp, #20]
 800ccc2:	9d02      	ldr	r5, [sp, #8]
 800ccc4:	461c      	mov	r4, r3
 800ccc6:	e7cc      	b.n	800cc62 <register_events+0x13a>
 800ccc8:	9c04      	ldr	r4, [sp, #16]
 800ccca:	9d05      	ldr	r5, [sp, #20]
 800cccc:	e001      	b.n	800ccd2 <register_events+0x1aa>
 800ccce:	9c04      	ldr	r4, [sp, #16]
 800ccd0:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800ccd2:	9a02      	ldr	r2, [sp, #8]
 800ccd4:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800ccd6:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800ccda:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800ccdc:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800ccde:	6054      	str	r4, [r2, #4]
}
 800cce0:	e7dc      	b.n	800cc9c <register_events+0x174>
 800cce2:	9c04      	ldr	r4, [sp, #16]
 800cce4:	9d05      	ldr	r5, [sp, #20]
 800cce6:	e7f4      	b.n	800ccd2 <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
 800cce8:	6923      	ldr	r3, [r4, #16]
 800ccea:	9304      	str	r3, [sp, #16]
 800ccec:	f103 0214 	add.w	r2, r3, #20
 800ccf0:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800ccf2:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d02d      	beq.n	800cd54 <register_events+0x22c>
 800ccf8:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800ccfa:	b35b      	cbz	r3, 800cd54 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800ccfc:	6898      	ldr	r0, [r3, #8]
 800ccfe:	f004 fa4a 	bl	8011196 <poller_thread>
 800cd02:	9005      	str	r0, [sp, #20]
 800cd04:	4658      	mov	r0, fp
 800cd06:	f004 fa46 	bl	8011196 <poller_thread>
 800cd0a:	4601      	mov	r1, r0
 800cd0c:	9003      	str	r0, [sp, #12]
 800cd0e:	9805      	ldr	r0, [sp, #20]
 800cd10:	f004 f813 	bl	8010d3a <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800cd14:	2800      	cmp	r0, #0
 800cd16:	dc1d      	bgt.n	800cd54 <register_events+0x22c>
	return list->head == list;
 800cd18:	9b04      	ldr	r3, [sp, #16]
 800cd1a:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800cd1c:	9a02      	ldr	r2, [sp, #8]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d02a      	beq.n	800cd78 <register_events+0x250>
 800cd22:	9404      	str	r4, [sp, #16]
 800cd24:	9505      	str	r5, [sp, #20]
 800cd26:	9d02      	ldr	r5, [sp, #8]
 800cd28:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800cd2a:	2c00      	cmp	r4, #0
 800cd2c:	d02a      	beq.n	800cd84 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
 800cd2e:	68a0      	ldr	r0, [r4, #8]
 800cd30:	f004 fa31 	bl	8011196 <poller_thread>
 800cd34:	4601      	mov	r1, r0
 800cd36:	9803      	ldr	r0, [sp, #12]
 800cd38:	f003 ffff 	bl	8010d3a <z_sched_prio_cmp>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	dc11      	bgt.n	800cd64 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800cd40:	b31c      	cbz	r4, 800cd8a <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
 800cd42:	686b      	ldr	r3, [r5, #4]
 800cd44:	429c      	cmp	r4, r3
 800cd46:	d02a      	beq.n	800cd9e <register_events+0x276>
 800cd48:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800cd4a:	2c00      	cmp	r4, #0
 800cd4c:	d1ed      	bne.n	800cd2a <register_events+0x202>
 800cd4e:	9c04      	ldr	r4, [sp, #16]
 800cd50:	9d05      	ldr	r5, [sp, #20]
 800cd52:	e01c      	b.n	800cd8e <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
 800cd54:	9a02      	ldr	r2, [sp, #8]
 800cd56:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800cd58:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800cd5c:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800cd5e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800cd60:	6054      	str	r4, [r2, #4]
		return;
 800cd62:	e79b      	b.n	800cc9c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800cd64:	9d05      	ldr	r5, [sp, #20]
 800cd66:	4622      	mov	r2, r4
 800cd68:	9c04      	ldr	r4, [sp, #16]
 800cd6a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800cd6c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800cd6e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800cd72:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800cd74:	6054      	str	r4, [r2, #4]
			return;
 800cd76:	e791      	b.n	800cc9c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800cd78:	2300      	movs	r3, #0
 800cd7a:	9404      	str	r4, [sp, #16]
 800cd7c:	9505      	str	r5, [sp, #20]
 800cd7e:	9d02      	ldr	r5, [sp, #8]
 800cd80:	461c      	mov	r4, r3
 800cd82:	e7d2      	b.n	800cd2a <register_events+0x202>
 800cd84:	9c04      	ldr	r4, [sp, #16]
 800cd86:	9d05      	ldr	r5, [sp, #20]
 800cd88:	e001      	b.n	800cd8e <register_events+0x266>
 800cd8a:	9c04      	ldr	r4, [sp, #16]
 800cd8c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800cd8e:	9a02      	ldr	r2, [sp, #8]
 800cd90:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800cd92:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800cd96:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800cd98:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800cd9a:	6054      	str	r4, [r2, #4]
}
 800cd9c:	e77e      	b.n	800cc9c <register_events+0x174>
 800cd9e:	9c04      	ldr	r4, [sp, #16]
 800cda0:	9d05      	ldr	r5, [sp, #20]
 800cda2:	e7f4      	b.n	800cd8e <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
 800cda4:	6922      	ldr	r2, [r4, #16]
 800cda6:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800cda8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d02c      	beq.n	800ce08 <register_events+0x2e0>
 800cdae:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800cdb0:	b353      	cbz	r3, 800ce08 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800cdb2:	6898      	ldr	r0, [r3, #8]
 800cdb4:	f004 f9ef 	bl	8011196 <poller_thread>
 800cdb8:	9004      	str	r0, [sp, #16]
 800cdba:	4658      	mov	r0, fp
 800cdbc:	f004 f9eb 	bl	8011196 <poller_thread>
 800cdc0:	4601      	mov	r1, r0
 800cdc2:	9003      	str	r0, [sp, #12]
 800cdc4:	9804      	ldr	r0, [sp, #16]
 800cdc6:	f003 ffb8 	bl	8010d3a <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	dc1c      	bgt.n	800ce08 <register_events+0x2e0>
	return list->head == list;
 800cdce:	9b02      	ldr	r3, [sp, #8]
 800cdd0:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d02a      	beq.n	800ce2c <register_events+0x304>
 800cdd6:	9404      	str	r4, [sp, #16]
 800cdd8:	9505      	str	r5, [sp, #20]
 800cdda:	9d02      	ldr	r5, [sp, #8]
 800cddc:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800cdde:	2c00      	cmp	r4, #0
 800cde0:	d02a      	beq.n	800ce38 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
 800cde2:	68a0      	ldr	r0, [r4, #8]
 800cde4:	f004 f9d7 	bl	8011196 <poller_thread>
 800cde8:	4601      	mov	r1, r0
 800cdea:	9803      	ldr	r0, [sp, #12]
 800cdec:	f003 ffa5 	bl	8010d3a <z_sched_prio_cmp>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	dc11      	bgt.n	800ce18 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800cdf4:	b31c      	cbz	r4, 800ce3e <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
 800cdf6:	686b      	ldr	r3, [r5, #4]
 800cdf8:	429c      	cmp	r4, r3
 800cdfa:	d02a      	beq.n	800ce52 <register_events+0x32a>
 800cdfc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800cdfe:	2c00      	cmp	r4, #0
 800ce00:	d1ed      	bne.n	800cdde <register_events+0x2b6>
 800ce02:	9c04      	ldr	r4, [sp, #16]
 800ce04:	9d05      	ldr	r5, [sp, #20]
 800ce06:	e01c      	b.n	800ce42 <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
 800ce08:	9a02      	ldr	r2, [sp, #8]
 800ce0a:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800ce0c:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800ce10:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800ce12:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800ce14:	6054      	str	r4, [r2, #4]
		return;
 800ce16:	e741      	b.n	800cc9c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800ce18:	9d05      	ldr	r5, [sp, #20]
 800ce1a:	4622      	mov	r2, r4
 800ce1c:	9c04      	ldr	r4, [sp, #16]
 800ce1e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800ce20:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800ce22:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800ce26:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800ce28:	6054      	str	r4, [r2, #4]
			return;
 800ce2a:	e737      	b.n	800cc9c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	9404      	str	r4, [sp, #16]
 800ce30:	9505      	str	r5, [sp, #20]
 800ce32:	9d02      	ldr	r5, [sp, #8]
 800ce34:	461c      	mov	r4, r3
 800ce36:	e7d2      	b.n	800cdde <register_events+0x2b6>
 800ce38:	9c04      	ldr	r4, [sp, #16]
 800ce3a:	9d05      	ldr	r5, [sp, #20]
 800ce3c:	e001      	b.n	800ce42 <register_events+0x31a>
 800ce3e:	9c04      	ldr	r4, [sp, #16]
 800ce40:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800ce42:	9a02      	ldr	r2, [sp, #8]
 800ce44:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800ce46:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800ce4a:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800ce4c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800ce4e:	6054      	str	r4, [r2, #4]
}
 800ce50:	e724      	b.n	800cc9c <register_events+0x174>
 800ce52:	9c04      	ldr	r4, [sp, #16]
 800ce54:	9d05      	ldr	r5, [sp, #20]
 800ce56:	e7f4      	b.n	800ce42 <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
 800ce58:	6923      	ldr	r3, [r4, #16]
 800ce5a:	9304      	str	r3, [sp, #16]
 800ce5c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ce60:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800ce62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d02d      	beq.n	800cec4 <register_events+0x39c>
 800ce68:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800ce6a:	b35b      	cbz	r3, 800cec4 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800ce6c:	6898      	ldr	r0, [r3, #8]
 800ce6e:	f004 f992 	bl	8011196 <poller_thread>
 800ce72:	9005      	str	r0, [sp, #20]
 800ce74:	4658      	mov	r0, fp
 800ce76:	f004 f98e 	bl	8011196 <poller_thread>
 800ce7a:	4601      	mov	r1, r0
 800ce7c:	9003      	str	r0, [sp, #12]
 800ce7e:	9805      	ldr	r0, [sp, #20]
 800ce80:	f003 ff5b 	bl	8010d3a <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800ce84:	2800      	cmp	r0, #0
 800ce86:	dc1d      	bgt.n	800cec4 <register_events+0x39c>
	return list->head == list;
 800ce88:	9b04      	ldr	r3, [sp, #16]
 800ce8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ce8c:	9a02      	ldr	r2, [sp, #8]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d02a      	beq.n	800cee8 <register_events+0x3c0>
 800ce92:	9404      	str	r4, [sp, #16]
 800ce94:	9505      	str	r5, [sp, #20]
 800ce96:	9d02      	ldr	r5, [sp, #8]
 800ce98:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800ce9a:	2c00      	cmp	r4, #0
 800ce9c:	d02a      	beq.n	800cef4 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
 800ce9e:	68a0      	ldr	r0, [r4, #8]
 800cea0:	f004 f979 	bl	8011196 <poller_thread>
 800cea4:	4601      	mov	r1, r0
 800cea6:	9803      	ldr	r0, [sp, #12]
 800cea8:	f003 ff47 	bl	8010d3a <z_sched_prio_cmp>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	dc11      	bgt.n	800ced4 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800ceb0:	b31c      	cbz	r4, 800cefa <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
 800ceb2:	686b      	ldr	r3, [r5, #4]
 800ceb4:	429c      	cmp	r4, r3
 800ceb6:	d02a      	beq.n	800cf0e <register_events+0x3e6>
 800ceb8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800ceba:	2c00      	cmp	r4, #0
 800cebc:	d1ed      	bne.n	800ce9a <register_events+0x372>
 800cebe:	9c04      	ldr	r4, [sp, #16]
 800cec0:	9d05      	ldr	r5, [sp, #20]
 800cec2:	e01c      	b.n	800cefe <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
 800cec4:	9a02      	ldr	r2, [sp, #8]
 800cec6:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800cec8:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800cecc:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800cece:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800ced0:	6054      	str	r4, [r2, #4]
		return;
 800ced2:	e6e3      	b.n	800cc9c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800ced4:	9d05      	ldr	r5, [sp, #20]
 800ced6:	4622      	mov	r2, r4
 800ced8:	9c04      	ldr	r4, [sp, #16]
 800ceda:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800cedc:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800cede:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800cee2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800cee4:	6054      	str	r4, [r2, #4]
			return;
 800cee6:	e6d9      	b.n	800cc9c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800cee8:	2300      	movs	r3, #0
 800ceea:	9404      	str	r4, [sp, #16]
 800ceec:	9505      	str	r5, [sp, #20]
 800ceee:	9d02      	ldr	r5, [sp, #8]
 800cef0:	461c      	mov	r4, r3
 800cef2:	e7d2      	b.n	800ce9a <register_events+0x372>
 800cef4:	9c04      	ldr	r4, [sp, #16]
 800cef6:	9d05      	ldr	r5, [sp, #20]
 800cef8:	e001      	b.n	800cefe <register_events+0x3d6>
 800cefa:	9c04      	ldr	r4, [sp, #16]
 800cefc:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800cefe:	9a02      	ldr	r2, [sp, #8]
 800cf00:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800cf02:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800cf06:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800cf08:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800cf0a:	6054      	str	r4, [r2, #4]
}
 800cf0c:	e6c6      	b.n	800cc9c <register_events+0x174>
 800cf0e:	9c04      	ldr	r4, [sp, #16]
 800cf10:	9d05      	ldr	r5, [sp, #20]
 800cf12:	e7f4      	b.n	800cefe <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 800cf14:	9801      	ldr	r0, [sp, #4]
 800cf16:	b007      	add	sp, #28
 800cf18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf1c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 800cf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf20:	b082      	sub	sp, #8
 800cf22:	4605      	mov	r5, r0
 800cf24:	4690      	mov	r8, r2
 800cf26:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 800cf28:	4b4f      	ldr	r3, [pc, #316]	; (800d068 <z_impl_k_poll+0x14c>)
 800cf2a:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
 800cf32:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 800cf36:	ea57 0302 	orrs.w	r3, r7, r2
 800cf3a:	bf0c      	ite	eq
 800cf3c:	2301      	moveq	r3, #1
 800cf3e:	2300      	movne	r3, #0
 800cf40:	f106 0260 	add.w	r2, r6, #96	; 0x60
 800cf44:	f7ff fdf0 	bl	800cb28 <register_events>
 800cf48:	4604      	mov	r4, r0
 800cf4a:	f04f 0310 	mov.w	r3, #16
 800cf4e:	f3ef 8111 	mrs	r1, BASEPRI
 800cf52:	f383 8812 	msr	BASEPRI_MAX, r3
 800cf56:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 800cf5a:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 800cf5e:	b1b3      	cbz	r3, 800cf8e <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
 800cf60:	2300      	movs	r3, #0
 800cf62:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800cf66:	ea57 0308 	orrs.w	r3, r7, r8
 800cf6a:	d043      	beq.n	800cff4 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 800cf6c:	f8cd 8000 	str.w	r8, [sp]
 800cf70:	9701      	str	r7, [sp, #4]
 800cf72:	4a3e      	ldr	r2, [pc, #248]	; (800d06c <z_impl_k_poll+0x150>)
 800cf74:	483e      	ldr	r0, [pc, #248]	; (800d070 <z_impl_k_poll+0x154>)
 800cf76:	f7ff f97f 	bl	800c278 <z_pend_curr>
 800cf7a:	f04f 0310 	mov.w	r3, #16
 800cf7e:	f3ef 8611 	mrs	r6, BASEPRI
 800cf82:	f383 8812 	msr	BASEPRI_MAX, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	46b4      	mov	ip, r6
	while (num_events--) {
 800cf8c:	e04c      	b.n	800d028 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
 800cf8e:	460e      	mov	r6, r1
	while (num_events--) {
 800cf90:	e00c      	b.n	800cfac <z_impl_k_poll+0x90>
	__asm__ volatile(
 800cf92:	f386 8811 	msr	BASEPRI, r6
 800cf96:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800cf9a:	f04f 0310 	mov.w	r3, #16
 800cf9e:	f3ef 8611 	mrs	r6, BASEPRI
 800cfa2:	f383 8812 	msr	BASEPRI_MAX, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	4604      	mov	r4, r0
 800cfac:	1e60      	subs	r0, r4, #1
 800cfae:	b1dc      	cbz	r4, 800cfe8 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
 800cfb0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800cfb4:	009f      	lsls	r7, r3, #2
 800cfb6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800cfba:	2200      	movs	r2, #0
 800cfbc:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800cfbe:	7b5a      	ldrb	r2, [r3, #13]
 800cfc0:	f002 021f 	and.w	r2, r2, #31
 800cfc4:	2a08      	cmp	r2, #8
 800cfc6:	d8e4      	bhi.n	800cf92 <z_impl_k_poll+0x76>
 800cfc8:	2401      	movs	r4, #1
 800cfca:	fa04 f202 	lsl.w	r2, r4, r2
 800cfce:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800cfd2:	d0de      	beq.n	800cf92 <z_impl_k_poll+0x76>
	return node->next != NULL;
 800cfd4:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800cfd6:	2a00      	cmp	r2, #0
 800cfd8:	d0db      	beq.n	800cf92 <z_impl_k_poll+0x76>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800cfda:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 800cfdc:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 800cfde:	6054      	str	r4, [r2, #4]
	node->next = NULL;
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
 800cfe4:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 800cfe6:	e7d4      	b.n	800cf92 <z_impl_k_poll+0x76>
	__asm__ volatile(
 800cfe8:	f381 8811 	msr	BASEPRI, r1
 800cfec:	f3bf 8f6f 	isb	sy
		return 0;
 800cff0:	4620      	mov	r0, r4
 800cff2:	e036      	b.n	800d062 <z_impl_k_poll+0x146>
 800cff4:	f381 8811 	msr	BASEPRI, r1
 800cff8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 800cffc:	f06f 000a 	mvn.w	r0, #10
 800d000:	e02f      	b.n	800d062 <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
 800d002:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
 800d004:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800d006:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800d008:	2200      	movs	r2, #0
 800d00a:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
 800d00c:	605a      	str	r2, [r3, #4]
 800d00e:	f38c 8811 	msr	BASEPRI, ip
 800d012:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800d016:	f04f 0310 	mov.w	r3, #16
 800d01a:	f3ef 8c11 	mrs	ip, BASEPRI
 800d01e:	f383 8812 	msr	BASEPRI_MAX, r3
 800d022:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800d026:	4674      	mov	r4, lr
 800d028:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 800d02c:	b1ac      	cbz	r4, 800d05a <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
 800d02e:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 800d032:	009c      	lsls	r4, r3, #2
 800d034:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800d038:	2200      	movs	r2, #0
 800d03a:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800d03c:	7b5a      	ldrb	r2, [r3, #13]
 800d03e:	f002 021f 	and.w	r2, r2, #31
 800d042:	2a08      	cmp	r2, #8
 800d044:	d8e3      	bhi.n	800d00e <z_impl_k_poll+0xf2>
 800d046:	2101      	movs	r1, #1
 800d048:	fa01 f202 	lsl.w	r2, r1, r2
 800d04c:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800d050:	d0dd      	beq.n	800d00e <z_impl_k_poll+0xf2>
	return node->next != NULL;
 800d052:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800d054:	2a00      	cmp	r2, #0
 800d056:	d1d4      	bne.n	800d002 <z_impl_k_poll+0xe6>
 800d058:	e7d9      	b.n	800d00e <z_impl_k_poll+0xf2>
	__asm__ volatile(
 800d05a:	f386 8811 	msr	BASEPRI, r6
 800d05e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 800d062:	b002      	add	sp, #8
 800d064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d068:	20001430 	.word	0x20001430
 800d06c:	200003cc 	.word	0x200003cc
 800d070:	2000147c 	.word	0x2000147c

0800d074 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 800d074:	b538      	push	{r3, r4, r5, lr}
 800d076:	4603      	mov	r3, r0
	__asm__ volatile(
 800d078:	f04f 0210 	mov.w	r2, #16
 800d07c:	f3ef 8511 	mrs	r5, BASEPRI
 800d080:	f382 8812 	msr	BASEPRI_MAX, r2
 800d084:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 800d088:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 800d08a:	2201      	movs	r2, #1
 800d08c:	6082      	str	r2, [r0, #8]
	return list->head == list;
 800d08e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800d090:	4283      	cmp	r3, r0
 800d092:	d011      	beq.n	800d0b8 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
 800d094:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800d096:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800d098:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800d09a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800d09c:	2300      	movs	r3, #0
 800d09e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800d0a0:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
 800d0a2:	b148      	cbz	r0, 800d0b8 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800d0a4:	2101      	movs	r1, #1
 800d0a6:	f004 f8c2 	bl	801122e <signal_poll_event>
 800d0aa:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	4805      	ldr	r0, [pc, #20]	; (800d0c4 <z_impl_k_poll_signal_raise+0x50>)
 800d0b0:	f7fe ff72 	bl	800bf98 <z_reschedule>
	return rc;
}
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800d0b8:	f385 8811 	msr	BASEPRI, r5
 800d0bc:	f3bf 8f6f 	isb	sy
		return 0;
 800d0c0:	2400      	movs	r4, #0
 800d0c2:	e7f7      	b.n	800d0b4 <z_impl_k_poll_signal_raise+0x40>
 800d0c4:	2000147c 	.word	0x2000147c

0800d0c8 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 800d0c8:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 800d0ca:	4a03      	ldr	r2, [pc, #12]	; (800d0d8 <boot_banner+0x10>)
 800d0cc:	4903      	ldr	r1, [pc, #12]	; (800d0dc <boot_banner+0x14>)
 800d0ce:	4804      	ldr	r0, [pc, #16]	; (800d0e0 <boot_banner+0x18>)
 800d0d0:	f001 fdf7 	bl	800ecc2 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 800d0d4:	bd08      	pop	{r3, pc}
 800d0d6:	bf00      	nop
 800d0d8:	080123dc 	.word	0x080123dc
 800d0dc:	08013a80 	.word	0x08013a80
 800d0e0:	08013aa0 	.word	0x08013aa0

0800d0e4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800d0e4:	b510      	push	{r4, lr}
 800d0e6:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800d0e8:	4b08      	ldr	r3, [pc, #32]	; (800d10c <k_sys_work_q_init+0x28>)
 800d0ea:	9302      	str	r3, [sp, #8]
 800d0ec:	2400      	movs	r4, #0
 800d0ee:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800d0f2:	ab02      	add	r3, sp, #8
 800d0f4:	9300      	str	r3, [sp, #0]
 800d0f6:	4623      	mov	r3, r4
 800d0f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d0fc:	4904      	ldr	r1, [pc, #16]	; (800d110 <k_sys_work_q_init+0x2c>)
 800d0fe:	4805      	ldr	r0, [pc, #20]	; (800d114 <k_sys_work_q_init+0x30>)
 800d100:	f7fe feb0 	bl	800be64 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800d104:	4620      	mov	r0, r4
 800d106:	b004      	add	sp, #16
 800d108:	bd10      	pop	{r4, pc}
 800d10a:	bf00      	nop
 800d10c:	08013ac8 	.word	0x08013ac8
 800d110:	20003580 	.word	0x20003580
 800d114:	20000ce0 	.word	0x20000ce0

0800d118 <malloc>:
 800d118:	4b02      	ldr	r3, [pc, #8]	; (800d124 <malloc+0xc>)
 800d11a:	4601      	mov	r1, r0
 800d11c:	6818      	ldr	r0, [r3, #0]
 800d11e:	f000 b84d 	b.w	800d1bc <_malloc_r>
 800d122:	bf00      	nop
 800d124:	200003d4 	.word	0x200003d4

0800d128 <_free_r>:
 800d128:	b538      	push	{r3, r4, r5, lr}
 800d12a:	4605      	mov	r5, r0
 800d12c:	2900      	cmp	r1, #0
 800d12e:	d041      	beq.n	800d1b4 <_free_r+0x8c>
 800d130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d134:	1f0c      	subs	r4, r1, #4
 800d136:	2b00      	cmp	r3, #0
 800d138:	bfb8      	it	lt
 800d13a:	18e4      	addlt	r4, r4, r3
 800d13c:	f000 fd14 	bl	800db68 <__malloc_lock>
 800d140:	4a1d      	ldr	r2, [pc, #116]	; (800d1b8 <_free_r+0x90>)
 800d142:	6813      	ldr	r3, [r2, #0]
 800d144:	b933      	cbnz	r3, 800d154 <_free_r+0x2c>
 800d146:	6063      	str	r3, [r4, #4]
 800d148:	6014      	str	r4, [r2, #0]
 800d14a:	4628      	mov	r0, r5
 800d14c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d150:	f000 bd10 	b.w	800db74 <__malloc_unlock>
 800d154:	42a3      	cmp	r3, r4
 800d156:	d908      	bls.n	800d16a <_free_r+0x42>
 800d158:	6820      	ldr	r0, [r4, #0]
 800d15a:	1821      	adds	r1, r4, r0
 800d15c:	428b      	cmp	r3, r1
 800d15e:	bf01      	itttt	eq
 800d160:	6819      	ldreq	r1, [r3, #0]
 800d162:	685b      	ldreq	r3, [r3, #4]
 800d164:	1809      	addeq	r1, r1, r0
 800d166:	6021      	streq	r1, [r4, #0]
 800d168:	e7ed      	b.n	800d146 <_free_r+0x1e>
 800d16a:	461a      	mov	r2, r3
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	b10b      	cbz	r3, 800d174 <_free_r+0x4c>
 800d170:	42a3      	cmp	r3, r4
 800d172:	d9fa      	bls.n	800d16a <_free_r+0x42>
 800d174:	6811      	ldr	r1, [r2, #0]
 800d176:	1850      	adds	r0, r2, r1
 800d178:	42a0      	cmp	r0, r4
 800d17a:	d10b      	bne.n	800d194 <_free_r+0x6c>
 800d17c:	6820      	ldr	r0, [r4, #0]
 800d17e:	4401      	add	r1, r0
 800d180:	1850      	adds	r0, r2, r1
 800d182:	4283      	cmp	r3, r0
 800d184:	6011      	str	r1, [r2, #0]
 800d186:	d1e0      	bne.n	800d14a <_free_r+0x22>
 800d188:	6818      	ldr	r0, [r3, #0]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	6053      	str	r3, [r2, #4]
 800d18e:	4401      	add	r1, r0
 800d190:	6011      	str	r1, [r2, #0]
 800d192:	e7da      	b.n	800d14a <_free_r+0x22>
 800d194:	d902      	bls.n	800d19c <_free_r+0x74>
 800d196:	230c      	movs	r3, #12
 800d198:	602b      	str	r3, [r5, #0]
 800d19a:	e7d6      	b.n	800d14a <_free_r+0x22>
 800d19c:	6820      	ldr	r0, [r4, #0]
 800d19e:	1821      	adds	r1, r4, r0
 800d1a0:	428b      	cmp	r3, r1
 800d1a2:	bf04      	itt	eq
 800d1a4:	6819      	ldreq	r1, [r3, #0]
 800d1a6:	685b      	ldreq	r3, [r3, #4]
 800d1a8:	6063      	str	r3, [r4, #4]
 800d1aa:	bf04      	itt	eq
 800d1ac:	1809      	addeq	r1, r1, r0
 800d1ae:	6021      	streq	r1, [r4, #0]
 800d1b0:	6054      	str	r4, [r2, #4]
 800d1b2:	e7ca      	b.n	800d14a <_free_r+0x22>
 800d1b4:	bd38      	pop	{r3, r4, r5, pc}
 800d1b6:	bf00      	nop
 800d1b8:	20001480 	.word	0x20001480

0800d1bc <_malloc_r>:
 800d1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1be:	1ccd      	adds	r5, r1, #3
 800d1c0:	f025 0503 	bic.w	r5, r5, #3
 800d1c4:	3508      	adds	r5, #8
 800d1c6:	2d0c      	cmp	r5, #12
 800d1c8:	bf38      	it	cc
 800d1ca:	250c      	movcc	r5, #12
 800d1cc:	2d00      	cmp	r5, #0
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	db01      	blt.n	800d1d6 <_malloc_r+0x1a>
 800d1d2:	42a9      	cmp	r1, r5
 800d1d4:	d903      	bls.n	800d1de <_malloc_r+0x22>
 800d1d6:	230c      	movs	r3, #12
 800d1d8:	6033      	str	r3, [r6, #0]
 800d1da:	2000      	movs	r0, #0
 800d1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1de:	f000 fcc3 	bl	800db68 <__malloc_lock>
 800d1e2:	4921      	ldr	r1, [pc, #132]	; (800d268 <_malloc_r+0xac>)
 800d1e4:	680a      	ldr	r2, [r1, #0]
 800d1e6:	4614      	mov	r4, r2
 800d1e8:	b99c      	cbnz	r4, 800d212 <_malloc_r+0x56>
 800d1ea:	4f20      	ldr	r7, [pc, #128]	; (800d26c <_malloc_r+0xb0>)
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	b923      	cbnz	r3, 800d1fa <_malloc_r+0x3e>
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f000 fb8c 	bl	800d910 <_sbrk_r>
 800d1f8:	6038      	str	r0, [r7, #0]
 800d1fa:	4629      	mov	r1, r5
 800d1fc:	4630      	mov	r0, r6
 800d1fe:	f000 fb87 	bl	800d910 <_sbrk_r>
 800d202:	1c43      	adds	r3, r0, #1
 800d204:	d123      	bne.n	800d24e <_malloc_r+0x92>
 800d206:	230c      	movs	r3, #12
 800d208:	6033      	str	r3, [r6, #0]
 800d20a:	4630      	mov	r0, r6
 800d20c:	f000 fcb2 	bl	800db74 <__malloc_unlock>
 800d210:	e7e3      	b.n	800d1da <_malloc_r+0x1e>
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	1b5b      	subs	r3, r3, r5
 800d216:	d417      	bmi.n	800d248 <_malloc_r+0x8c>
 800d218:	2b0b      	cmp	r3, #11
 800d21a:	d903      	bls.n	800d224 <_malloc_r+0x68>
 800d21c:	6023      	str	r3, [r4, #0]
 800d21e:	441c      	add	r4, r3
 800d220:	6025      	str	r5, [r4, #0]
 800d222:	e004      	b.n	800d22e <_malloc_r+0x72>
 800d224:	6863      	ldr	r3, [r4, #4]
 800d226:	42a2      	cmp	r2, r4
 800d228:	bf0c      	ite	eq
 800d22a:	600b      	streq	r3, [r1, #0]
 800d22c:	6053      	strne	r3, [r2, #4]
 800d22e:	4630      	mov	r0, r6
 800d230:	f000 fca0 	bl	800db74 <__malloc_unlock>
 800d234:	f104 000b 	add.w	r0, r4, #11
 800d238:	1d23      	adds	r3, r4, #4
 800d23a:	f020 0007 	bic.w	r0, r0, #7
 800d23e:	1ac2      	subs	r2, r0, r3
 800d240:	d0cc      	beq.n	800d1dc <_malloc_r+0x20>
 800d242:	1a1b      	subs	r3, r3, r0
 800d244:	50a3      	str	r3, [r4, r2]
 800d246:	e7c9      	b.n	800d1dc <_malloc_r+0x20>
 800d248:	4622      	mov	r2, r4
 800d24a:	6864      	ldr	r4, [r4, #4]
 800d24c:	e7cc      	b.n	800d1e8 <_malloc_r+0x2c>
 800d24e:	1cc4      	adds	r4, r0, #3
 800d250:	f024 0403 	bic.w	r4, r4, #3
 800d254:	42a0      	cmp	r0, r4
 800d256:	d0e3      	beq.n	800d220 <_malloc_r+0x64>
 800d258:	1a21      	subs	r1, r4, r0
 800d25a:	4630      	mov	r0, r6
 800d25c:	f000 fb58 	bl	800d910 <_sbrk_r>
 800d260:	3001      	adds	r0, #1
 800d262:	d1dd      	bne.n	800d220 <_malloc_r+0x64>
 800d264:	e7cf      	b.n	800d206 <_malloc_r+0x4a>
 800d266:	bf00      	nop
 800d268:	20001480 	.word	0x20001480
 800d26c:	20001484 	.word	0x20001484

0800d270 <_printf_float>:
 800d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	b091      	sub	sp, #68	; 0x44
 800d276:	460c      	mov	r4, r1
 800d278:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d27c:	4616      	mov	r6, r2
 800d27e:	461f      	mov	r7, r3
 800d280:	4605      	mov	r5, r0
 800d282:	f000 fc6d 	bl	800db60 <_localeconv_r>
 800d286:	6803      	ldr	r3, [r0, #0]
 800d288:	9309      	str	r3, [sp, #36]	; 0x24
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7f3 fde3 	bl	8000e56 <strlen>
 800d290:	2300      	movs	r3, #0
 800d292:	930e      	str	r3, [sp, #56]	; 0x38
 800d294:	f8d8 3000 	ldr.w	r3, [r8]
 800d298:	900a      	str	r0, [sp, #40]	; 0x28
 800d29a:	3307      	adds	r3, #7
 800d29c:	f023 0307 	bic.w	r3, r3, #7
 800d2a0:	f103 0208 	add.w	r2, r3, #8
 800d2a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d2a8:	f8d4 b000 	ldr.w	fp, [r4]
 800d2ac:	f8c8 2000 	str.w	r2, [r8]
 800d2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d2b8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800d2bc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800d2c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2c4:	4b9c      	ldr	r3, [pc, #624]	; (800d538 <_printf_float+0x2c8>)
 800d2c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2ca:	4640      	mov	r0, r8
 800d2cc:	f7f3 fc28 	bl	8000b20 <__aeabi_dcmpun>
 800d2d0:	bb70      	cbnz	r0, 800d330 <_printf_float+0xc0>
 800d2d2:	4b99      	ldr	r3, [pc, #612]	; (800d538 <_printf_float+0x2c8>)
 800d2d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2da:	4640      	mov	r0, r8
 800d2dc:	f7f3 fc02 	bl	8000ae4 <__aeabi_dcmple>
 800d2e0:	bb30      	cbnz	r0, 800d330 <_printf_float+0xc0>
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	4640      	mov	r0, r8
 800d2e8:	4651      	mov	r1, sl
 800d2ea:	f7f3 fbf1 	bl	8000ad0 <__aeabi_dcmplt>
 800d2ee:	b110      	cbz	r0, 800d2f6 <_printf_float+0x86>
 800d2f0:	232d      	movs	r3, #45	; 0x2d
 800d2f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2f6:	4b91      	ldr	r3, [pc, #580]	; (800d53c <_printf_float+0x2cc>)
 800d2f8:	4891      	ldr	r0, [pc, #580]	; (800d540 <_printf_float+0x2d0>)
 800d2fa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d2fe:	bf94      	ite	ls
 800d300:	4698      	movls	r8, r3
 800d302:	4680      	movhi	r8, r0
 800d304:	2303      	movs	r3, #3
 800d306:	6123      	str	r3, [r4, #16]
 800d308:	f02b 0304 	bic.w	r3, fp, #4
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	f04f 0a00 	mov.w	sl, #0
 800d312:	9700      	str	r7, [sp, #0]
 800d314:	4633      	mov	r3, r6
 800d316:	aa0f      	add	r2, sp, #60	; 0x3c
 800d318:	4621      	mov	r1, r4
 800d31a:	4628      	mov	r0, r5
 800d31c:	f004 f873 	bl	8011406 <_printf_common>
 800d320:	3001      	adds	r0, #1
 800d322:	f040 808f 	bne.w	800d444 <_printf_float+0x1d4>
 800d326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d32a:	b011      	add	sp, #68	; 0x44
 800d32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d330:	4642      	mov	r2, r8
 800d332:	4653      	mov	r3, sl
 800d334:	4640      	mov	r0, r8
 800d336:	4651      	mov	r1, sl
 800d338:	f7f3 fbf2 	bl	8000b20 <__aeabi_dcmpun>
 800d33c:	b140      	cbz	r0, 800d350 <_printf_float+0xe0>
 800d33e:	f1ba 0f00 	cmp.w	sl, #0
 800d342:	bfbc      	itt	lt
 800d344:	232d      	movlt	r3, #45	; 0x2d
 800d346:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d34a:	487e      	ldr	r0, [pc, #504]	; (800d544 <_printf_float+0x2d4>)
 800d34c:	4b7e      	ldr	r3, [pc, #504]	; (800d548 <_printf_float+0x2d8>)
 800d34e:	e7d4      	b.n	800d2fa <_printf_float+0x8a>
 800d350:	6863      	ldr	r3, [r4, #4]
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d358:	d142      	bne.n	800d3e0 <_printf_float+0x170>
 800d35a:	2306      	movs	r3, #6
 800d35c:	6063      	str	r3, [r4, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	9206      	str	r2, [sp, #24]
 800d362:	aa0e      	add	r2, sp, #56	; 0x38
 800d364:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800d368:	aa0d      	add	r2, sp, #52	; 0x34
 800d36a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800d36e:	9203      	str	r2, [sp, #12]
 800d370:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800d374:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d378:	6023      	str	r3, [r4, #0]
 800d37a:	6863      	ldr	r3, [r4, #4]
 800d37c:	9300      	str	r3, [sp, #0]
 800d37e:	4642      	mov	r2, r8
 800d380:	4653      	mov	r3, sl
 800d382:	4628      	mov	r0, r5
 800d384:	910b      	str	r1, [sp, #44]	; 0x2c
 800d386:	f003 ffa0 	bl	80112ca <__cvt>
 800d38a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d38c:	2947      	cmp	r1, #71	; 0x47
 800d38e:	4680      	mov	r8, r0
 800d390:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d392:	d108      	bne.n	800d3a6 <_printf_float+0x136>
 800d394:	1cc8      	adds	r0, r1, #3
 800d396:	db02      	blt.n	800d39e <_printf_float+0x12e>
 800d398:	6863      	ldr	r3, [r4, #4]
 800d39a:	4299      	cmp	r1, r3
 800d39c:	dd40      	ble.n	800d420 <_printf_float+0x1b0>
 800d39e:	f1a9 0902 	sub.w	r9, r9, #2
 800d3a2:	fa5f f989 	uxtb.w	r9, r9
 800d3a6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d3aa:	d81f      	bhi.n	800d3ec <_printf_float+0x17c>
 800d3ac:	3901      	subs	r1, #1
 800d3ae:	464a      	mov	r2, r9
 800d3b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d3b4:	910d      	str	r1, [sp, #52]	; 0x34
 800d3b6:	f003 ffe8 	bl	801138a <__exponent>
 800d3ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3bc:	1813      	adds	r3, r2, r0
 800d3be:	2a01      	cmp	r2, #1
 800d3c0:	4682      	mov	sl, r0
 800d3c2:	6123      	str	r3, [r4, #16]
 800d3c4:	dc02      	bgt.n	800d3cc <_printf_float+0x15c>
 800d3c6:	6822      	ldr	r2, [r4, #0]
 800d3c8:	07d2      	lsls	r2, r2, #31
 800d3ca:	d501      	bpl.n	800d3d0 <_printf_float+0x160>
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	6123      	str	r3, [r4, #16]
 800d3d0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d09c      	beq.n	800d312 <_printf_float+0xa2>
 800d3d8:	232d      	movs	r3, #45	; 0x2d
 800d3da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3de:	e798      	b.n	800d312 <_printf_float+0xa2>
 800d3e0:	2947      	cmp	r1, #71	; 0x47
 800d3e2:	d1bc      	bne.n	800d35e <_printf_float+0xee>
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1ba      	bne.n	800d35e <_printf_float+0xee>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e7b7      	b.n	800d35c <_printf_float+0xec>
 800d3ec:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d3f0:	d118      	bne.n	800d424 <_printf_float+0x1b4>
 800d3f2:	2900      	cmp	r1, #0
 800d3f4:	6863      	ldr	r3, [r4, #4]
 800d3f6:	dd0b      	ble.n	800d410 <_printf_float+0x1a0>
 800d3f8:	6121      	str	r1, [r4, #16]
 800d3fa:	b913      	cbnz	r3, 800d402 <_printf_float+0x192>
 800d3fc:	6822      	ldr	r2, [r4, #0]
 800d3fe:	07d0      	lsls	r0, r2, #31
 800d400:	d502      	bpl.n	800d408 <_printf_float+0x198>
 800d402:	3301      	adds	r3, #1
 800d404:	440b      	add	r3, r1
 800d406:	6123      	str	r3, [r4, #16]
 800d408:	65a1      	str	r1, [r4, #88]	; 0x58
 800d40a:	f04f 0a00 	mov.w	sl, #0
 800d40e:	e7df      	b.n	800d3d0 <_printf_float+0x160>
 800d410:	b913      	cbnz	r3, 800d418 <_printf_float+0x1a8>
 800d412:	6822      	ldr	r2, [r4, #0]
 800d414:	07d2      	lsls	r2, r2, #31
 800d416:	d501      	bpl.n	800d41c <_printf_float+0x1ac>
 800d418:	3302      	adds	r3, #2
 800d41a:	e7f4      	b.n	800d406 <_printf_float+0x196>
 800d41c:	2301      	movs	r3, #1
 800d41e:	e7f2      	b.n	800d406 <_printf_float+0x196>
 800d420:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d426:	4299      	cmp	r1, r3
 800d428:	db05      	blt.n	800d436 <_printf_float+0x1c6>
 800d42a:	6823      	ldr	r3, [r4, #0]
 800d42c:	6121      	str	r1, [r4, #16]
 800d42e:	07d8      	lsls	r0, r3, #31
 800d430:	d5ea      	bpl.n	800d408 <_printf_float+0x198>
 800d432:	1c4b      	adds	r3, r1, #1
 800d434:	e7e7      	b.n	800d406 <_printf_float+0x196>
 800d436:	2900      	cmp	r1, #0
 800d438:	bfd4      	ite	le
 800d43a:	f1c1 0202 	rsble	r2, r1, #2
 800d43e:	2201      	movgt	r2, #1
 800d440:	4413      	add	r3, r2
 800d442:	e7e0      	b.n	800d406 <_printf_float+0x196>
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	055a      	lsls	r2, r3, #21
 800d448:	d407      	bmi.n	800d45a <_printf_float+0x1ea>
 800d44a:	6923      	ldr	r3, [r4, #16]
 800d44c:	4642      	mov	r2, r8
 800d44e:	4631      	mov	r1, r6
 800d450:	4628      	mov	r0, r5
 800d452:	47b8      	blx	r7
 800d454:	3001      	adds	r0, #1
 800d456:	d12b      	bne.n	800d4b0 <_printf_float+0x240>
 800d458:	e765      	b.n	800d326 <_printf_float+0xb6>
 800d45a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d45e:	f240 80dc 	bls.w	800d61a <_printf_float+0x3aa>
 800d462:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d466:	2200      	movs	r2, #0
 800d468:	2300      	movs	r3, #0
 800d46a:	f7f3 fb27 	bl	8000abc <__aeabi_dcmpeq>
 800d46e:	2800      	cmp	r0, #0
 800d470:	d033      	beq.n	800d4da <_printf_float+0x26a>
 800d472:	4a36      	ldr	r2, [pc, #216]	; (800d54c <_printf_float+0x2dc>)
 800d474:	2301      	movs	r3, #1
 800d476:	4631      	mov	r1, r6
 800d478:	4628      	mov	r0, r5
 800d47a:	47b8      	blx	r7
 800d47c:	3001      	adds	r0, #1
 800d47e:	f43f af52 	beq.w	800d326 <_printf_float+0xb6>
 800d482:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d486:	429a      	cmp	r2, r3
 800d488:	db02      	blt.n	800d490 <_printf_float+0x220>
 800d48a:	6823      	ldr	r3, [r4, #0]
 800d48c:	07d8      	lsls	r0, r3, #31
 800d48e:	d50f      	bpl.n	800d4b0 <_printf_float+0x240>
 800d490:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d494:	4631      	mov	r1, r6
 800d496:	4628      	mov	r0, r5
 800d498:	47b8      	blx	r7
 800d49a:	3001      	adds	r0, #1
 800d49c:	f43f af43 	beq.w	800d326 <_printf_float+0xb6>
 800d4a0:	f04f 0800 	mov.w	r8, #0
 800d4a4:	f104 091a 	add.w	r9, r4, #26
 800d4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	4543      	cmp	r3, r8
 800d4ae:	dc09      	bgt.n	800d4c4 <_printf_float+0x254>
 800d4b0:	6823      	ldr	r3, [r4, #0]
 800d4b2:	079b      	lsls	r3, r3, #30
 800d4b4:	f100 8101 	bmi.w	800d6ba <_printf_float+0x44a>
 800d4b8:	68e0      	ldr	r0, [r4, #12]
 800d4ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4bc:	4298      	cmp	r0, r3
 800d4be:	bfb8      	it	lt
 800d4c0:	4618      	movlt	r0, r3
 800d4c2:	e732      	b.n	800d32a <_printf_float+0xba>
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	464a      	mov	r2, r9
 800d4c8:	4631      	mov	r1, r6
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	47b8      	blx	r7
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	f43f af29 	beq.w	800d326 <_printf_float+0xb6>
 800d4d4:	f108 0801 	add.w	r8, r8, #1
 800d4d8:	e7e6      	b.n	800d4a8 <_printf_float+0x238>
 800d4da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	dc37      	bgt.n	800d550 <_printf_float+0x2e0>
 800d4e0:	4a1a      	ldr	r2, [pc, #104]	; (800d54c <_printf_float+0x2dc>)
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	4631      	mov	r1, r6
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	47b8      	blx	r7
 800d4ea:	3001      	adds	r0, #1
 800d4ec:	f43f af1b 	beq.w	800d326 <_printf_float+0xb6>
 800d4f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	d102      	bne.n	800d4fe <_printf_float+0x28e>
 800d4f8:	6823      	ldr	r3, [r4, #0]
 800d4fa:	07d9      	lsls	r1, r3, #31
 800d4fc:	d5d8      	bpl.n	800d4b0 <_printf_float+0x240>
 800d4fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d502:	4631      	mov	r1, r6
 800d504:	4628      	mov	r0, r5
 800d506:	47b8      	blx	r7
 800d508:	3001      	adds	r0, #1
 800d50a:	f43f af0c 	beq.w	800d326 <_printf_float+0xb6>
 800d50e:	f04f 0900 	mov.w	r9, #0
 800d512:	f104 0a1a 	add.w	sl, r4, #26
 800d516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d518:	425b      	negs	r3, r3
 800d51a:	454b      	cmp	r3, r9
 800d51c:	dc01      	bgt.n	800d522 <_printf_float+0x2b2>
 800d51e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d520:	e794      	b.n	800d44c <_printf_float+0x1dc>
 800d522:	2301      	movs	r3, #1
 800d524:	4652      	mov	r2, sl
 800d526:	4631      	mov	r1, r6
 800d528:	4628      	mov	r0, r5
 800d52a:	47b8      	blx	r7
 800d52c:	3001      	adds	r0, #1
 800d52e:	f43f aefa 	beq.w	800d326 <_printf_float+0xb6>
 800d532:	f109 0901 	add.w	r9, r9, #1
 800d536:	e7ee      	b.n	800d516 <_printf_float+0x2a6>
 800d538:	7fefffff 	.word	0x7fefffff
 800d53c:	08013c45 	.word	0x08013c45
 800d540:	08013c49 	.word	0x08013c49
 800d544:	08013c51 	.word	0x08013c51
 800d548:	08013c4d 	.word	0x08013c4d
 800d54c:	08013c55 	.word	0x08013c55
 800d550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d552:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d554:	429a      	cmp	r2, r3
 800d556:	bfa8      	it	ge
 800d558:	461a      	movge	r2, r3
 800d55a:	2a00      	cmp	r2, #0
 800d55c:	4691      	mov	r9, r2
 800d55e:	dc37      	bgt.n	800d5d0 <_printf_float+0x360>
 800d560:	f04f 0b00 	mov.w	fp, #0
 800d564:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d568:	f104 021a 	add.w	r2, r4, #26
 800d56c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d570:	ebaa 0309 	sub.w	r3, sl, r9
 800d574:	455b      	cmp	r3, fp
 800d576:	dc33      	bgt.n	800d5e0 <_printf_float+0x370>
 800d578:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d57c:	429a      	cmp	r2, r3
 800d57e:	db3b      	blt.n	800d5f8 <_printf_float+0x388>
 800d580:	6823      	ldr	r3, [r4, #0]
 800d582:	07da      	lsls	r2, r3, #31
 800d584:	d438      	bmi.n	800d5f8 <_printf_float+0x388>
 800d586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d588:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d58a:	eba3 020a 	sub.w	r2, r3, sl
 800d58e:	eba3 0901 	sub.w	r9, r3, r1
 800d592:	4591      	cmp	r9, r2
 800d594:	bfa8      	it	ge
 800d596:	4691      	movge	r9, r2
 800d598:	f1b9 0f00 	cmp.w	r9, #0
 800d59c:	dc34      	bgt.n	800d608 <_printf_float+0x398>
 800d59e:	f04f 0800 	mov.w	r8, #0
 800d5a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5a6:	f104 0a1a 	add.w	sl, r4, #26
 800d5aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d5ae:	1a9b      	subs	r3, r3, r2
 800d5b0:	eba3 0309 	sub.w	r3, r3, r9
 800d5b4:	4543      	cmp	r3, r8
 800d5b6:	f77f af7b 	ble.w	800d4b0 <_printf_float+0x240>
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	4652      	mov	r2, sl
 800d5be:	4631      	mov	r1, r6
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	47b8      	blx	r7
 800d5c4:	3001      	adds	r0, #1
 800d5c6:	f43f aeae 	beq.w	800d326 <_printf_float+0xb6>
 800d5ca:	f108 0801 	add.w	r8, r8, #1
 800d5ce:	e7ec      	b.n	800d5aa <_printf_float+0x33a>
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	4631      	mov	r1, r6
 800d5d4:	4642      	mov	r2, r8
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	47b8      	blx	r7
 800d5da:	3001      	adds	r0, #1
 800d5dc:	d1c0      	bne.n	800d560 <_printf_float+0x2f0>
 800d5de:	e6a2      	b.n	800d326 <_printf_float+0xb6>
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	4631      	mov	r1, r6
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	920b      	str	r2, [sp, #44]	; 0x2c
 800d5e8:	47b8      	blx	r7
 800d5ea:	3001      	adds	r0, #1
 800d5ec:	f43f ae9b 	beq.w	800d326 <_printf_float+0xb6>
 800d5f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5f2:	f10b 0b01 	add.w	fp, fp, #1
 800d5f6:	e7b9      	b.n	800d56c <_printf_float+0x2fc>
 800d5f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5fc:	4631      	mov	r1, r6
 800d5fe:	4628      	mov	r0, r5
 800d600:	47b8      	blx	r7
 800d602:	3001      	adds	r0, #1
 800d604:	d1bf      	bne.n	800d586 <_printf_float+0x316>
 800d606:	e68e      	b.n	800d326 <_printf_float+0xb6>
 800d608:	464b      	mov	r3, r9
 800d60a:	eb08 020a 	add.w	r2, r8, sl
 800d60e:	4631      	mov	r1, r6
 800d610:	4628      	mov	r0, r5
 800d612:	47b8      	blx	r7
 800d614:	3001      	adds	r0, #1
 800d616:	d1c2      	bne.n	800d59e <_printf_float+0x32e>
 800d618:	e685      	b.n	800d326 <_printf_float+0xb6>
 800d61a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d61c:	2a01      	cmp	r2, #1
 800d61e:	dc01      	bgt.n	800d624 <_printf_float+0x3b4>
 800d620:	07db      	lsls	r3, r3, #31
 800d622:	d537      	bpl.n	800d694 <_printf_float+0x424>
 800d624:	2301      	movs	r3, #1
 800d626:	4642      	mov	r2, r8
 800d628:	4631      	mov	r1, r6
 800d62a:	4628      	mov	r0, r5
 800d62c:	47b8      	blx	r7
 800d62e:	3001      	adds	r0, #1
 800d630:	f43f ae79 	beq.w	800d326 <_printf_float+0xb6>
 800d634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d638:	4631      	mov	r1, r6
 800d63a:	4628      	mov	r0, r5
 800d63c:	47b8      	blx	r7
 800d63e:	3001      	adds	r0, #1
 800d640:	f43f ae71 	beq.w	800d326 <_printf_float+0xb6>
 800d644:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d648:	2200      	movs	r2, #0
 800d64a:	2300      	movs	r3, #0
 800d64c:	f7f3 fa36 	bl	8000abc <__aeabi_dcmpeq>
 800d650:	b9d8      	cbnz	r0, 800d68a <_printf_float+0x41a>
 800d652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d654:	f108 0201 	add.w	r2, r8, #1
 800d658:	3b01      	subs	r3, #1
 800d65a:	4631      	mov	r1, r6
 800d65c:	4628      	mov	r0, r5
 800d65e:	47b8      	blx	r7
 800d660:	3001      	adds	r0, #1
 800d662:	d10e      	bne.n	800d682 <_printf_float+0x412>
 800d664:	e65f      	b.n	800d326 <_printf_float+0xb6>
 800d666:	2301      	movs	r3, #1
 800d668:	464a      	mov	r2, r9
 800d66a:	4631      	mov	r1, r6
 800d66c:	4628      	mov	r0, r5
 800d66e:	47b8      	blx	r7
 800d670:	3001      	adds	r0, #1
 800d672:	f43f ae58 	beq.w	800d326 <_printf_float+0xb6>
 800d676:	f108 0801 	add.w	r8, r8, #1
 800d67a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d67c:	3b01      	subs	r3, #1
 800d67e:	4543      	cmp	r3, r8
 800d680:	dcf1      	bgt.n	800d666 <_printf_float+0x3f6>
 800d682:	4653      	mov	r3, sl
 800d684:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d688:	e6e1      	b.n	800d44e <_printf_float+0x1de>
 800d68a:	f04f 0800 	mov.w	r8, #0
 800d68e:	f104 091a 	add.w	r9, r4, #26
 800d692:	e7f2      	b.n	800d67a <_printf_float+0x40a>
 800d694:	2301      	movs	r3, #1
 800d696:	4642      	mov	r2, r8
 800d698:	e7df      	b.n	800d65a <_printf_float+0x3ea>
 800d69a:	2301      	movs	r3, #1
 800d69c:	464a      	mov	r2, r9
 800d69e:	4631      	mov	r1, r6
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	47b8      	blx	r7
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	f43f ae3e 	beq.w	800d326 <_printf_float+0xb6>
 800d6aa:	f108 0801 	add.w	r8, r8, #1
 800d6ae:	68e3      	ldr	r3, [r4, #12]
 800d6b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d6b2:	1a5b      	subs	r3, r3, r1
 800d6b4:	4543      	cmp	r3, r8
 800d6b6:	dcf0      	bgt.n	800d69a <_printf_float+0x42a>
 800d6b8:	e6fe      	b.n	800d4b8 <_printf_float+0x248>
 800d6ba:	f04f 0800 	mov.w	r8, #0
 800d6be:	f104 0919 	add.w	r9, r4, #25
 800d6c2:	e7f4      	b.n	800d6ae <_printf_float+0x43e>

0800d6c4 <_printf_i>:
 800d6c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c8:	7e0f      	ldrb	r7, [r1, #24]
 800d6ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d6cc:	2f78      	cmp	r7, #120	; 0x78
 800d6ce:	4691      	mov	r9, r2
 800d6d0:	4680      	mov	r8, r0
 800d6d2:	460c      	mov	r4, r1
 800d6d4:	469a      	mov	sl, r3
 800d6d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d6da:	d807      	bhi.n	800d6ec <_printf_i+0x28>
 800d6dc:	2f62      	cmp	r7, #98	; 0x62
 800d6de:	d80a      	bhi.n	800d6f6 <_printf_i+0x32>
 800d6e0:	2f00      	cmp	r7, #0
 800d6e2:	f000 80d8 	beq.w	800d896 <_printf_i+0x1d2>
 800d6e6:	2f58      	cmp	r7, #88	; 0x58
 800d6e8:	f000 80a3 	beq.w	800d832 <_printf_i+0x16e>
 800d6ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d6f4:	e03a      	b.n	800d76c <_printf_i+0xa8>
 800d6f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d6fa:	2b15      	cmp	r3, #21
 800d6fc:	d8f6      	bhi.n	800d6ec <_printf_i+0x28>
 800d6fe:	a101      	add	r1, pc, #4	; (adr r1, 800d704 <_printf_i+0x40>)
 800d700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d704:	0800d75d 	.word	0x0800d75d
 800d708:	0800d771 	.word	0x0800d771
 800d70c:	0800d6ed 	.word	0x0800d6ed
 800d710:	0800d6ed 	.word	0x0800d6ed
 800d714:	0800d6ed 	.word	0x0800d6ed
 800d718:	0800d6ed 	.word	0x0800d6ed
 800d71c:	0800d771 	.word	0x0800d771
 800d720:	0800d6ed 	.word	0x0800d6ed
 800d724:	0800d6ed 	.word	0x0800d6ed
 800d728:	0800d6ed 	.word	0x0800d6ed
 800d72c:	0800d6ed 	.word	0x0800d6ed
 800d730:	0800d87d 	.word	0x0800d87d
 800d734:	0800d7a1 	.word	0x0800d7a1
 800d738:	0800d85f 	.word	0x0800d85f
 800d73c:	0800d6ed 	.word	0x0800d6ed
 800d740:	0800d6ed 	.word	0x0800d6ed
 800d744:	0800d89f 	.word	0x0800d89f
 800d748:	0800d6ed 	.word	0x0800d6ed
 800d74c:	0800d7a1 	.word	0x0800d7a1
 800d750:	0800d6ed 	.word	0x0800d6ed
 800d754:	0800d6ed 	.word	0x0800d6ed
 800d758:	0800d867 	.word	0x0800d867
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	1d1a      	adds	r2, r3, #4
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	602a      	str	r2, [r5, #0]
 800d764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d76c:	2301      	movs	r3, #1
 800d76e:	e0a3      	b.n	800d8b8 <_printf_i+0x1f4>
 800d770:	6820      	ldr	r0, [r4, #0]
 800d772:	6829      	ldr	r1, [r5, #0]
 800d774:	0606      	lsls	r6, r0, #24
 800d776:	f101 0304 	add.w	r3, r1, #4
 800d77a:	d50a      	bpl.n	800d792 <_printf_i+0xce>
 800d77c:	680e      	ldr	r6, [r1, #0]
 800d77e:	602b      	str	r3, [r5, #0]
 800d780:	2e00      	cmp	r6, #0
 800d782:	da03      	bge.n	800d78c <_printf_i+0xc8>
 800d784:	232d      	movs	r3, #45	; 0x2d
 800d786:	4276      	negs	r6, r6
 800d788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d78c:	485e      	ldr	r0, [pc, #376]	; (800d908 <_printf_i+0x244>)
 800d78e:	230a      	movs	r3, #10
 800d790:	e019      	b.n	800d7c6 <_printf_i+0x102>
 800d792:	680e      	ldr	r6, [r1, #0]
 800d794:	602b      	str	r3, [r5, #0]
 800d796:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d79a:	bf18      	it	ne
 800d79c:	b236      	sxthne	r6, r6
 800d79e:	e7ef      	b.n	800d780 <_printf_i+0xbc>
 800d7a0:	682b      	ldr	r3, [r5, #0]
 800d7a2:	6820      	ldr	r0, [r4, #0]
 800d7a4:	1d19      	adds	r1, r3, #4
 800d7a6:	6029      	str	r1, [r5, #0]
 800d7a8:	0601      	lsls	r1, r0, #24
 800d7aa:	d501      	bpl.n	800d7b0 <_printf_i+0xec>
 800d7ac:	681e      	ldr	r6, [r3, #0]
 800d7ae:	e002      	b.n	800d7b6 <_printf_i+0xf2>
 800d7b0:	0646      	lsls	r6, r0, #25
 800d7b2:	d5fb      	bpl.n	800d7ac <_printf_i+0xe8>
 800d7b4:	881e      	ldrh	r6, [r3, #0]
 800d7b6:	4854      	ldr	r0, [pc, #336]	; (800d908 <_printf_i+0x244>)
 800d7b8:	2f6f      	cmp	r7, #111	; 0x6f
 800d7ba:	bf0c      	ite	eq
 800d7bc:	2308      	moveq	r3, #8
 800d7be:	230a      	movne	r3, #10
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d7c6:	6865      	ldr	r5, [r4, #4]
 800d7c8:	60a5      	str	r5, [r4, #8]
 800d7ca:	2d00      	cmp	r5, #0
 800d7cc:	bfa2      	ittt	ge
 800d7ce:	6821      	ldrge	r1, [r4, #0]
 800d7d0:	f021 0104 	bicge.w	r1, r1, #4
 800d7d4:	6021      	strge	r1, [r4, #0]
 800d7d6:	b90e      	cbnz	r6, 800d7dc <_printf_i+0x118>
 800d7d8:	2d00      	cmp	r5, #0
 800d7da:	d04d      	beq.n	800d878 <_printf_i+0x1b4>
 800d7dc:	4615      	mov	r5, r2
 800d7de:	fbb6 f1f3 	udiv	r1, r6, r3
 800d7e2:	fb03 6711 	mls	r7, r3, r1, r6
 800d7e6:	5dc7      	ldrb	r7, [r0, r7]
 800d7e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d7ec:	4637      	mov	r7, r6
 800d7ee:	42bb      	cmp	r3, r7
 800d7f0:	460e      	mov	r6, r1
 800d7f2:	d9f4      	bls.n	800d7de <_printf_i+0x11a>
 800d7f4:	2b08      	cmp	r3, #8
 800d7f6:	d10b      	bne.n	800d810 <_printf_i+0x14c>
 800d7f8:	6823      	ldr	r3, [r4, #0]
 800d7fa:	07de      	lsls	r6, r3, #31
 800d7fc:	d508      	bpl.n	800d810 <_printf_i+0x14c>
 800d7fe:	6923      	ldr	r3, [r4, #16]
 800d800:	6861      	ldr	r1, [r4, #4]
 800d802:	4299      	cmp	r1, r3
 800d804:	bfde      	ittt	le
 800d806:	2330      	movle	r3, #48	; 0x30
 800d808:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d80c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d810:	1b52      	subs	r2, r2, r5
 800d812:	6122      	str	r2, [r4, #16]
 800d814:	f8cd a000 	str.w	sl, [sp]
 800d818:	464b      	mov	r3, r9
 800d81a:	aa03      	add	r2, sp, #12
 800d81c:	4621      	mov	r1, r4
 800d81e:	4640      	mov	r0, r8
 800d820:	f003 fdf1 	bl	8011406 <_printf_common>
 800d824:	3001      	adds	r0, #1
 800d826:	d14c      	bne.n	800d8c2 <_printf_i+0x1fe>
 800d828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d82c:	b004      	add	sp, #16
 800d82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d832:	4835      	ldr	r0, [pc, #212]	; (800d908 <_printf_i+0x244>)
 800d834:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d838:	6829      	ldr	r1, [r5, #0]
 800d83a:	6823      	ldr	r3, [r4, #0]
 800d83c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d840:	6029      	str	r1, [r5, #0]
 800d842:	061d      	lsls	r5, r3, #24
 800d844:	d514      	bpl.n	800d870 <_printf_i+0x1ac>
 800d846:	07df      	lsls	r7, r3, #31
 800d848:	bf44      	itt	mi
 800d84a:	f043 0320 	orrmi.w	r3, r3, #32
 800d84e:	6023      	strmi	r3, [r4, #0]
 800d850:	b91e      	cbnz	r6, 800d85a <_printf_i+0x196>
 800d852:	6823      	ldr	r3, [r4, #0]
 800d854:	f023 0320 	bic.w	r3, r3, #32
 800d858:	6023      	str	r3, [r4, #0]
 800d85a:	2310      	movs	r3, #16
 800d85c:	e7b0      	b.n	800d7c0 <_printf_i+0xfc>
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	f043 0320 	orr.w	r3, r3, #32
 800d864:	6023      	str	r3, [r4, #0]
 800d866:	2378      	movs	r3, #120	; 0x78
 800d868:	4828      	ldr	r0, [pc, #160]	; (800d90c <_printf_i+0x248>)
 800d86a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d86e:	e7e3      	b.n	800d838 <_printf_i+0x174>
 800d870:	0659      	lsls	r1, r3, #25
 800d872:	bf48      	it	mi
 800d874:	b2b6      	uxthmi	r6, r6
 800d876:	e7e6      	b.n	800d846 <_printf_i+0x182>
 800d878:	4615      	mov	r5, r2
 800d87a:	e7bb      	b.n	800d7f4 <_printf_i+0x130>
 800d87c:	682b      	ldr	r3, [r5, #0]
 800d87e:	6826      	ldr	r6, [r4, #0]
 800d880:	6961      	ldr	r1, [r4, #20]
 800d882:	1d18      	adds	r0, r3, #4
 800d884:	6028      	str	r0, [r5, #0]
 800d886:	0635      	lsls	r5, r6, #24
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	d501      	bpl.n	800d890 <_printf_i+0x1cc>
 800d88c:	6019      	str	r1, [r3, #0]
 800d88e:	e002      	b.n	800d896 <_printf_i+0x1d2>
 800d890:	0670      	lsls	r0, r6, #25
 800d892:	d5fb      	bpl.n	800d88c <_printf_i+0x1c8>
 800d894:	8019      	strh	r1, [r3, #0]
 800d896:	2300      	movs	r3, #0
 800d898:	6123      	str	r3, [r4, #16]
 800d89a:	4615      	mov	r5, r2
 800d89c:	e7ba      	b.n	800d814 <_printf_i+0x150>
 800d89e:	682b      	ldr	r3, [r5, #0]
 800d8a0:	1d1a      	adds	r2, r3, #4
 800d8a2:	602a      	str	r2, [r5, #0]
 800d8a4:	681d      	ldr	r5, [r3, #0]
 800d8a6:	6862      	ldr	r2, [r4, #4]
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	f7f2 fc78 	bl	80001a0 <memchr>
 800d8b0:	b108      	cbz	r0, 800d8b6 <_printf_i+0x1f2>
 800d8b2:	1b40      	subs	r0, r0, r5
 800d8b4:	6060      	str	r0, [r4, #4]
 800d8b6:	6863      	ldr	r3, [r4, #4]
 800d8b8:	6123      	str	r3, [r4, #16]
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8c0:	e7a8      	b.n	800d814 <_printf_i+0x150>
 800d8c2:	6923      	ldr	r3, [r4, #16]
 800d8c4:	462a      	mov	r2, r5
 800d8c6:	4649      	mov	r1, r9
 800d8c8:	4640      	mov	r0, r8
 800d8ca:	47d0      	blx	sl
 800d8cc:	3001      	adds	r0, #1
 800d8ce:	d0ab      	beq.n	800d828 <_printf_i+0x164>
 800d8d0:	6823      	ldr	r3, [r4, #0]
 800d8d2:	079b      	lsls	r3, r3, #30
 800d8d4:	d413      	bmi.n	800d8fe <_printf_i+0x23a>
 800d8d6:	68e0      	ldr	r0, [r4, #12]
 800d8d8:	9b03      	ldr	r3, [sp, #12]
 800d8da:	4298      	cmp	r0, r3
 800d8dc:	bfb8      	it	lt
 800d8de:	4618      	movlt	r0, r3
 800d8e0:	e7a4      	b.n	800d82c <_printf_i+0x168>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	4632      	mov	r2, r6
 800d8e6:	4649      	mov	r1, r9
 800d8e8:	4640      	mov	r0, r8
 800d8ea:	47d0      	blx	sl
 800d8ec:	3001      	adds	r0, #1
 800d8ee:	d09b      	beq.n	800d828 <_printf_i+0x164>
 800d8f0:	3501      	adds	r5, #1
 800d8f2:	68e3      	ldr	r3, [r4, #12]
 800d8f4:	9903      	ldr	r1, [sp, #12]
 800d8f6:	1a5b      	subs	r3, r3, r1
 800d8f8:	42ab      	cmp	r3, r5
 800d8fa:	dcf2      	bgt.n	800d8e2 <_printf_i+0x21e>
 800d8fc:	e7eb      	b.n	800d8d6 <_printf_i+0x212>
 800d8fe:	2500      	movs	r5, #0
 800d900:	f104 0619 	add.w	r6, r4, #25
 800d904:	e7f5      	b.n	800d8f2 <_printf_i+0x22e>
 800d906:	bf00      	nop
 800d908:	08013c57 	.word	0x08013c57
 800d90c:	08013c68 	.word	0x08013c68

0800d910 <_sbrk_r>:
 800d910:	b538      	push	{r3, r4, r5, lr}
 800d912:	4d06      	ldr	r5, [pc, #24]	; (800d92c <_sbrk_r+0x1c>)
 800d914:	2300      	movs	r3, #0
 800d916:	4604      	mov	r4, r0
 800d918:	4608      	mov	r0, r1
 800d91a:	602b      	str	r3, [r5, #0]
 800d91c:	f7f7 ff16 	bl	800574c <_sbrk>
 800d920:	1c43      	adds	r3, r0, #1
 800d922:	d102      	bne.n	800d92a <_sbrk_r+0x1a>
 800d924:	682b      	ldr	r3, [r5, #0]
 800d926:	b103      	cbz	r3, 800d92a <_sbrk_r+0x1a>
 800d928:	6023      	str	r3, [r4, #0]
 800d92a:	bd38      	pop	{r3, r4, r5, pc}
 800d92c:	20001488 	.word	0x20001488

0800d930 <strtok>:
 800d930:	4b16      	ldr	r3, [pc, #88]	; (800d98c <strtok+0x5c>)
 800d932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d936:	681f      	ldr	r7, [r3, #0]
 800d938:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800d93a:	4605      	mov	r5, r0
 800d93c:	460e      	mov	r6, r1
 800d93e:	b9ec      	cbnz	r4, 800d97c <strtok+0x4c>
 800d940:	2050      	movs	r0, #80	; 0x50
 800d942:	f7ff fbe9 	bl	800d118 <malloc>
 800d946:	4602      	mov	r2, r0
 800d948:	65b8      	str	r0, [r7, #88]	; 0x58
 800d94a:	b920      	cbnz	r0, 800d956 <strtok+0x26>
 800d94c:	4b10      	ldr	r3, [pc, #64]	; (800d990 <strtok+0x60>)
 800d94e:	4811      	ldr	r0, [pc, #68]	; (800d994 <strtok+0x64>)
 800d950:	2157      	movs	r1, #87	; 0x57
 800d952:	f000 f8d5 	bl	800db00 <__assert_func>
 800d956:	e9c0 4400 	strd	r4, r4, [r0]
 800d95a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d95e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d962:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d966:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d96a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d96e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d972:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d976:	6184      	str	r4, [r0, #24]
 800d978:	7704      	strb	r4, [r0, #28]
 800d97a:	6244      	str	r4, [r0, #36]	; 0x24
 800d97c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d97e:	4631      	mov	r1, r6
 800d980:	4628      	mov	r0, r5
 800d982:	2301      	movs	r3, #1
 800d984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d988:	f003 bdd0 	b.w	801152c <__strtok_r>
 800d98c:	200003d4 	.word	0x200003d4
 800d990:	08013c79 	.word	0x08013c79
 800d994:	08013c90 	.word	0x08013c90

0800d998 <_strtol_l.constprop.0>:
 800d998:	2b01      	cmp	r3, #1
 800d99a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d99e:	4680      	mov	r8, r0
 800d9a0:	d001      	beq.n	800d9a6 <_strtol_l.constprop.0+0xe>
 800d9a2:	2b24      	cmp	r3, #36	; 0x24
 800d9a4:	d906      	bls.n	800d9b4 <_strtol_l.constprop.0+0x1c>
 800d9a6:	f001 fe0b 	bl	800f5c0 <__errno>
 800d9aa:	2316      	movs	r3, #22
 800d9ac:	6003      	str	r3, [r0, #0]
 800d9ae:	2000      	movs	r0, #0
 800d9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9b4:	4f35      	ldr	r7, [pc, #212]	; (800da8c <_strtol_l.constprop.0+0xf4>)
 800d9b6:	460d      	mov	r5, r1
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d9be:	5de6      	ldrb	r6, [r4, r7]
 800d9c0:	f016 0608 	ands.w	r6, r6, #8
 800d9c4:	d1f8      	bne.n	800d9b8 <_strtol_l.constprop.0+0x20>
 800d9c6:	2c2d      	cmp	r4, #45	; 0x2d
 800d9c8:	d12f      	bne.n	800da2a <_strtol_l.constprop.0+0x92>
 800d9ca:	782c      	ldrb	r4, [r5, #0]
 800d9cc:	2601      	movs	r6, #1
 800d9ce:	1c85      	adds	r5, r0, #2
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d057      	beq.n	800da84 <_strtol_l.constprop.0+0xec>
 800d9d4:	2b10      	cmp	r3, #16
 800d9d6:	d109      	bne.n	800d9ec <_strtol_l.constprop.0+0x54>
 800d9d8:	2c30      	cmp	r4, #48	; 0x30
 800d9da:	d107      	bne.n	800d9ec <_strtol_l.constprop.0+0x54>
 800d9dc:	7828      	ldrb	r0, [r5, #0]
 800d9de:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d9e2:	2858      	cmp	r0, #88	; 0x58
 800d9e4:	d149      	bne.n	800da7a <_strtol_l.constprop.0+0xe2>
 800d9e6:	786c      	ldrb	r4, [r5, #1]
 800d9e8:	2310      	movs	r3, #16
 800d9ea:	3502      	adds	r5, #2
 800d9ec:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800d9f0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800d9f4:	2700      	movs	r7, #0
 800d9f6:	fbbe f9f3 	udiv	r9, lr, r3
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	fb03 ea19 	mls	sl, r3, r9, lr
 800da00:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800da04:	f1bc 0f09 	cmp.w	ip, #9
 800da08:	d814      	bhi.n	800da34 <_strtol_l.constprop.0+0x9c>
 800da0a:	4664      	mov	r4, ip
 800da0c:	42a3      	cmp	r3, r4
 800da0e:	dd22      	ble.n	800da56 <_strtol_l.constprop.0+0xbe>
 800da10:	2f00      	cmp	r7, #0
 800da12:	db1d      	blt.n	800da50 <_strtol_l.constprop.0+0xb8>
 800da14:	4581      	cmp	r9, r0
 800da16:	d31b      	bcc.n	800da50 <_strtol_l.constprop.0+0xb8>
 800da18:	d101      	bne.n	800da1e <_strtol_l.constprop.0+0x86>
 800da1a:	45a2      	cmp	sl, r4
 800da1c:	db18      	blt.n	800da50 <_strtol_l.constprop.0+0xb8>
 800da1e:	fb00 4003 	mla	r0, r0, r3, r4
 800da22:	2701      	movs	r7, #1
 800da24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da28:	e7ea      	b.n	800da00 <_strtol_l.constprop.0+0x68>
 800da2a:	2c2b      	cmp	r4, #43	; 0x2b
 800da2c:	bf04      	itt	eq
 800da2e:	782c      	ldrbeq	r4, [r5, #0]
 800da30:	1c85      	addeq	r5, r0, #2
 800da32:	e7cd      	b.n	800d9d0 <_strtol_l.constprop.0+0x38>
 800da34:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800da38:	f1bc 0f19 	cmp.w	ip, #25
 800da3c:	d801      	bhi.n	800da42 <_strtol_l.constprop.0+0xaa>
 800da3e:	3c37      	subs	r4, #55	; 0x37
 800da40:	e7e4      	b.n	800da0c <_strtol_l.constprop.0+0x74>
 800da42:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800da46:	f1bc 0f19 	cmp.w	ip, #25
 800da4a:	d804      	bhi.n	800da56 <_strtol_l.constprop.0+0xbe>
 800da4c:	3c57      	subs	r4, #87	; 0x57
 800da4e:	e7dd      	b.n	800da0c <_strtol_l.constprop.0+0x74>
 800da50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800da54:	e7e6      	b.n	800da24 <_strtol_l.constprop.0+0x8c>
 800da56:	2f00      	cmp	r7, #0
 800da58:	da07      	bge.n	800da6a <_strtol_l.constprop.0+0xd2>
 800da5a:	2322      	movs	r3, #34	; 0x22
 800da5c:	f8c8 3000 	str.w	r3, [r8]
 800da60:	4670      	mov	r0, lr
 800da62:	2a00      	cmp	r2, #0
 800da64:	d0a4      	beq.n	800d9b0 <_strtol_l.constprop.0+0x18>
 800da66:	1e69      	subs	r1, r5, #1
 800da68:	e005      	b.n	800da76 <_strtol_l.constprop.0+0xde>
 800da6a:	b106      	cbz	r6, 800da6e <_strtol_l.constprop.0+0xd6>
 800da6c:	4240      	negs	r0, r0
 800da6e:	2a00      	cmp	r2, #0
 800da70:	d09e      	beq.n	800d9b0 <_strtol_l.constprop.0+0x18>
 800da72:	2f00      	cmp	r7, #0
 800da74:	d1f7      	bne.n	800da66 <_strtol_l.constprop.0+0xce>
 800da76:	6011      	str	r1, [r2, #0]
 800da78:	e79a      	b.n	800d9b0 <_strtol_l.constprop.0+0x18>
 800da7a:	2430      	movs	r4, #48	; 0x30
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1b5      	bne.n	800d9ec <_strtol_l.constprop.0+0x54>
 800da80:	2308      	movs	r3, #8
 800da82:	e7b3      	b.n	800d9ec <_strtol_l.constprop.0+0x54>
 800da84:	2c30      	cmp	r4, #48	; 0x30
 800da86:	d0a9      	beq.n	800d9dc <_strtol_l.constprop.0+0x44>
 800da88:	230a      	movs	r3, #10
 800da8a:	e7af      	b.n	800d9ec <_strtol_l.constprop.0+0x54>
 800da8c:	08013b45 	.word	0x08013b45

0800da90 <strtol>:
 800da90:	4613      	mov	r3, r2
 800da92:	460a      	mov	r2, r1
 800da94:	4601      	mov	r1, r0
 800da96:	4802      	ldr	r0, [pc, #8]	; (800daa0 <strtol+0x10>)
 800da98:	6800      	ldr	r0, [r0, #0]
 800da9a:	f7ff bf7d 	b.w	800d998 <_strtol_l.constprop.0>
 800da9e:	bf00      	nop
 800daa0:	200003d4 	.word	0x200003d4

0800daa4 <vsniprintf>:
 800daa4:	b507      	push	{r0, r1, r2, lr}
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	4613      	mov	r3, r2
 800daaa:	460a      	mov	r2, r1
 800daac:	4601      	mov	r1, r0
 800daae:	4803      	ldr	r0, [pc, #12]	; (800dabc <vsniprintf+0x18>)
 800dab0:	6800      	ldr	r0, [r0, #0]
 800dab2:	f003 fd63 	bl	801157c <_vsniprintf_r>
 800dab6:	b003      	add	sp, #12
 800dab8:	f85d fb04 	ldr.w	pc, [sp], #4
 800dabc:	200003d4 	.word	0x200003d4

0800dac0 <_vsiprintf_r>:
 800dac0:	b500      	push	{lr}
 800dac2:	b09b      	sub	sp, #108	; 0x6c
 800dac4:	9100      	str	r1, [sp, #0]
 800dac6:	9104      	str	r1, [sp, #16]
 800dac8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dacc:	9105      	str	r1, [sp, #20]
 800dace:	9102      	str	r1, [sp, #8]
 800dad0:	4905      	ldr	r1, [pc, #20]	; (800dae8 <_vsiprintf_r+0x28>)
 800dad2:	9103      	str	r1, [sp, #12]
 800dad4:	4669      	mov	r1, sp
 800dad6:	f000 fb67 	bl	800e1a8 <_svfiprintf_r>
 800dada:	9b00      	ldr	r3, [sp, #0]
 800dadc:	2200      	movs	r2, #0
 800dade:	701a      	strb	r2, [r3, #0]
 800dae0:	b01b      	add	sp, #108	; 0x6c
 800dae2:	f85d fb04 	ldr.w	pc, [sp], #4
 800dae6:	bf00      	nop
 800dae8:	ffff0208 	.word	0xffff0208

0800daec <vsiprintf>:
 800daec:	4613      	mov	r3, r2
 800daee:	460a      	mov	r2, r1
 800daf0:	4601      	mov	r1, r0
 800daf2:	4802      	ldr	r0, [pc, #8]	; (800dafc <vsiprintf+0x10>)
 800daf4:	6800      	ldr	r0, [r0, #0]
 800daf6:	f7ff bfe3 	b.w	800dac0 <_vsiprintf_r>
 800dafa:	bf00      	nop
 800dafc:	200003d4 	.word	0x200003d4

0800db00 <__assert_func>:
 800db00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db02:	4614      	mov	r4, r2
 800db04:	461a      	mov	r2, r3
 800db06:	4b09      	ldr	r3, [pc, #36]	; (800db2c <__assert_func+0x2c>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4605      	mov	r5, r0
 800db0c:	68d8      	ldr	r0, [r3, #12]
 800db0e:	b14c      	cbz	r4, 800db24 <__assert_func+0x24>
 800db10:	4b07      	ldr	r3, [pc, #28]	; (800db30 <__assert_func+0x30>)
 800db12:	9100      	str	r1, [sp, #0]
 800db14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db18:	4906      	ldr	r1, [pc, #24]	; (800db34 <__assert_func+0x34>)
 800db1a:	462b      	mov	r3, r5
 800db1c:	f000 f80e 	bl	800db3c <fiprintf>
 800db20:	f003 fed6 	bl	80118d0 <abort>
 800db24:	4b04      	ldr	r3, [pc, #16]	; (800db38 <__assert_func+0x38>)
 800db26:	461c      	mov	r4, r3
 800db28:	e7f3      	b.n	800db12 <__assert_func+0x12>
 800db2a:	bf00      	nop
 800db2c:	200003d4 	.word	0x200003d4
 800db30:	08013cec 	.word	0x08013cec
 800db34:	08013cf9 	.word	0x08013cf9
 800db38:	08013d27 	.word	0x08013d27

0800db3c <fiprintf>:
 800db3c:	b40e      	push	{r1, r2, r3}
 800db3e:	b503      	push	{r0, r1, lr}
 800db40:	4601      	mov	r1, r0
 800db42:	ab03      	add	r3, sp, #12
 800db44:	4805      	ldr	r0, [pc, #20]	; (800db5c <fiprintf+0x20>)
 800db46:	f853 2b04 	ldr.w	r2, [r3], #4
 800db4a:	6800      	ldr	r0, [r0, #0]
 800db4c:	9301      	str	r3, [sp, #4]
 800db4e:	f000 fc2b 	bl	800e3a8 <_vfiprintf_r>
 800db52:	b002      	add	sp, #8
 800db54:	f85d eb04 	ldr.w	lr, [sp], #4
 800db58:	b003      	add	sp, #12
 800db5a:	4770      	bx	lr
 800db5c:	200003d4 	.word	0x200003d4

0800db60 <_localeconv_r>:
 800db60:	4800      	ldr	r0, [pc, #0]	; (800db64 <_localeconv_r+0x4>)
 800db62:	4770      	bx	lr
 800db64:	20000528 	.word	0x20000528

0800db68 <__malloc_lock>:
 800db68:	4801      	ldr	r0, [pc, #4]	; (800db70 <__malloc_lock+0x8>)
 800db6a:	f001 bd1d 	b.w	800f5a8 <__retarget_lock_acquire_recursive>
 800db6e:	bf00      	nop
 800db70:	20000648 	.word	0x20000648

0800db74 <__malloc_unlock>:
 800db74:	4801      	ldr	r0, [pc, #4]	; (800db7c <__malloc_unlock+0x8>)
 800db76:	f001 bd1f 	b.w	800f5b8 <__retarget_lock_release_recursive>
 800db7a:	bf00      	nop
 800db7c:	20000648 	.word	0x20000648

0800db80 <_Balloc>:
 800db80:	b570      	push	{r4, r5, r6, lr}
 800db82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800db84:	4604      	mov	r4, r0
 800db86:	460d      	mov	r5, r1
 800db88:	b976      	cbnz	r6, 800dba8 <_Balloc+0x28>
 800db8a:	2010      	movs	r0, #16
 800db8c:	f7ff fac4 	bl	800d118 <malloc>
 800db90:	4602      	mov	r2, r0
 800db92:	6260      	str	r0, [r4, #36]	; 0x24
 800db94:	b920      	cbnz	r0, 800dba0 <_Balloc+0x20>
 800db96:	4b18      	ldr	r3, [pc, #96]	; (800dbf8 <_Balloc+0x78>)
 800db98:	4818      	ldr	r0, [pc, #96]	; (800dbfc <_Balloc+0x7c>)
 800db9a:	2166      	movs	r1, #102	; 0x66
 800db9c:	f7ff ffb0 	bl	800db00 <__assert_func>
 800dba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dba4:	6006      	str	r6, [r0, #0]
 800dba6:	60c6      	str	r6, [r0, #12]
 800dba8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dbaa:	68f3      	ldr	r3, [r6, #12]
 800dbac:	b183      	cbz	r3, 800dbd0 <_Balloc+0x50>
 800dbae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbb0:	68db      	ldr	r3, [r3, #12]
 800dbb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dbb6:	b9b8      	cbnz	r0, 800dbe8 <_Balloc+0x68>
 800dbb8:	2101      	movs	r1, #1
 800dbba:	fa01 f605 	lsl.w	r6, r1, r5
 800dbbe:	1d72      	adds	r2, r6, #5
 800dbc0:	0092      	lsls	r2, r2, #2
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f003 fdf4 	bl	80117b0 <_calloc_r>
 800dbc8:	b160      	cbz	r0, 800dbe4 <_Balloc+0x64>
 800dbca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dbce:	e00e      	b.n	800dbee <_Balloc+0x6e>
 800dbd0:	2221      	movs	r2, #33	; 0x21
 800dbd2:	2104      	movs	r1, #4
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f003 fdeb 	bl	80117b0 <_calloc_r>
 800dbda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbdc:	60f0      	str	r0, [r6, #12]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d1e4      	bne.n	800dbae <_Balloc+0x2e>
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	bd70      	pop	{r4, r5, r6, pc}
 800dbe8:	6802      	ldr	r2, [r0, #0]
 800dbea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dbee:	2300      	movs	r3, #0
 800dbf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dbf4:	e7f7      	b.n	800dbe6 <_Balloc+0x66>
 800dbf6:	bf00      	nop
 800dbf8:	08013c79 	.word	0x08013c79
 800dbfc:	08013da0 	.word	0x08013da0

0800dc00 <_Bfree>:
 800dc00:	b570      	push	{r4, r5, r6, lr}
 800dc02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dc04:	4605      	mov	r5, r0
 800dc06:	460c      	mov	r4, r1
 800dc08:	b976      	cbnz	r6, 800dc28 <_Bfree+0x28>
 800dc0a:	2010      	movs	r0, #16
 800dc0c:	f7ff fa84 	bl	800d118 <malloc>
 800dc10:	4602      	mov	r2, r0
 800dc12:	6268      	str	r0, [r5, #36]	; 0x24
 800dc14:	b920      	cbnz	r0, 800dc20 <_Bfree+0x20>
 800dc16:	4b09      	ldr	r3, [pc, #36]	; (800dc3c <_Bfree+0x3c>)
 800dc18:	4809      	ldr	r0, [pc, #36]	; (800dc40 <_Bfree+0x40>)
 800dc1a:	218a      	movs	r1, #138	; 0x8a
 800dc1c:	f7ff ff70 	bl	800db00 <__assert_func>
 800dc20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc24:	6006      	str	r6, [r0, #0]
 800dc26:	60c6      	str	r6, [r0, #12]
 800dc28:	b13c      	cbz	r4, 800dc3a <_Bfree+0x3a>
 800dc2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dc2c:	6862      	ldr	r2, [r4, #4]
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc34:	6021      	str	r1, [r4, #0]
 800dc36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc3a:	bd70      	pop	{r4, r5, r6, pc}
 800dc3c:	08013c79 	.word	0x08013c79
 800dc40:	08013da0 	.word	0x08013da0

0800dc44 <__multadd>:
 800dc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc48:	690d      	ldr	r5, [r1, #16]
 800dc4a:	4607      	mov	r7, r0
 800dc4c:	460c      	mov	r4, r1
 800dc4e:	461e      	mov	r6, r3
 800dc50:	f101 0c14 	add.w	ip, r1, #20
 800dc54:	2000      	movs	r0, #0
 800dc56:	f8dc 3000 	ldr.w	r3, [ip]
 800dc5a:	b299      	uxth	r1, r3
 800dc5c:	fb02 6101 	mla	r1, r2, r1, r6
 800dc60:	0c1e      	lsrs	r6, r3, #16
 800dc62:	0c0b      	lsrs	r3, r1, #16
 800dc64:	fb02 3306 	mla	r3, r2, r6, r3
 800dc68:	b289      	uxth	r1, r1
 800dc6a:	3001      	adds	r0, #1
 800dc6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc70:	4285      	cmp	r5, r0
 800dc72:	f84c 1b04 	str.w	r1, [ip], #4
 800dc76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc7a:	dcec      	bgt.n	800dc56 <__multadd+0x12>
 800dc7c:	b30e      	cbz	r6, 800dcc2 <__multadd+0x7e>
 800dc7e:	68a3      	ldr	r3, [r4, #8]
 800dc80:	42ab      	cmp	r3, r5
 800dc82:	dc19      	bgt.n	800dcb8 <__multadd+0x74>
 800dc84:	6861      	ldr	r1, [r4, #4]
 800dc86:	4638      	mov	r0, r7
 800dc88:	3101      	adds	r1, #1
 800dc8a:	f7ff ff79 	bl	800db80 <_Balloc>
 800dc8e:	4680      	mov	r8, r0
 800dc90:	b928      	cbnz	r0, 800dc9e <__multadd+0x5a>
 800dc92:	4602      	mov	r2, r0
 800dc94:	4b0c      	ldr	r3, [pc, #48]	; (800dcc8 <__multadd+0x84>)
 800dc96:	480d      	ldr	r0, [pc, #52]	; (800dccc <__multadd+0x88>)
 800dc98:	21b5      	movs	r1, #181	; 0xb5
 800dc9a:	f7ff ff31 	bl	800db00 <__assert_func>
 800dc9e:	6922      	ldr	r2, [r4, #16]
 800dca0:	3202      	adds	r2, #2
 800dca2:	f104 010c 	add.w	r1, r4, #12
 800dca6:	0092      	lsls	r2, r2, #2
 800dca8:	300c      	adds	r0, #12
 800dcaa:	f003 faf8 	bl	801129e <memcpy>
 800dcae:	4621      	mov	r1, r4
 800dcb0:	4638      	mov	r0, r7
 800dcb2:	f7ff ffa5 	bl	800dc00 <_Bfree>
 800dcb6:	4644      	mov	r4, r8
 800dcb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dcbc:	3501      	adds	r5, #1
 800dcbe:	615e      	str	r6, [r3, #20]
 800dcc0:	6125      	str	r5, [r4, #16]
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc8:	08013d8f 	.word	0x08013d8f
 800dccc:	08013da0 	.word	0x08013da0

0800dcd0 <__i2b>:
 800dcd0:	b510      	push	{r4, lr}
 800dcd2:	460c      	mov	r4, r1
 800dcd4:	2101      	movs	r1, #1
 800dcd6:	f7ff ff53 	bl	800db80 <_Balloc>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	b928      	cbnz	r0, 800dcea <__i2b+0x1a>
 800dcde:	4b05      	ldr	r3, [pc, #20]	; (800dcf4 <__i2b+0x24>)
 800dce0:	4805      	ldr	r0, [pc, #20]	; (800dcf8 <__i2b+0x28>)
 800dce2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dce6:	f7ff ff0b 	bl	800db00 <__assert_func>
 800dcea:	2301      	movs	r3, #1
 800dcec:	6144      	str	r4, [r0, #20]
 800dcee:	6103      	str	r3, [r0, #16]
 800dcf0:	bd10      	pop	{r4, pc}
 800dcf2:	bf00      	nop
 800dcf4:	08013d8f 	.word	0x08013d8f
 800dcf8:	08013da0 	.word	0x08013da0

0800dcfc <__multiply>:
 800dcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd00:	4691      	mov	r9, r2
 800dd02:	690a      	ldr	r2, [r1, #16]
 800dd04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	bfb8      	it	lt
 800dd0c:	460b      	movlt	r3, r1
 800dd0e:	460c      	mov	r4, r1
 800dd10:	bfbc      	itt	lt
 800dd12:	464c      	movlt	r4, r9
 800dd14:	4699      	movlt	r9, r3
 800dd16:	6927      	ldr	r7, [r4, #16]
 800dd18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dd1c:	68a3      	ldr	r3, [r4, #8]
 800dd1e:	6861      	ldr	r1, [r4, #4]
 800dd20:	eb07 060a 	add.w	r6, r7, sl
 800dd24:	42b3      	cmp	r3, r6
 800dd26:	b085      	sub	sp, #20
 800dd28:	bfb8      	it	lt
 800dd2a:	3101      	addlt	r1, #1
 800dd2c:	f7ff ff28 	bl	800db80 <_Balloc>
 800dd30:	b930      	cbnz	r0, 800dd40 <__multiply+0x44>
 800dd32:	4602      	mov	r2, r0
 800dd34:	4b43      	ldr	r3, [pc, #268]	; (800de44 <__multiply+0x148>)
 800dd36:	4844      	ldr	r0, [pc, #272]	; (800de48 <__multiply+0x14c>)
 800dd38:	f240 115d 	movw	r1, #349	; 0x15d
 800dd3c:	f7ff fee0 	bl	800db00 <__assert_func>
 800dd40:	f100 0514 	add.w	r5, r0, #20
 800dd44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd48:	462b      	mov	r3, r5
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	4543      	cmp	r3, r8
 800dd4e:	d321      	bcc.n	800dd94 <__multiply+0x98>
 800dd50:	f104 0314 	add.w	r3, r4, #20
 800dd54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dd58:	f109 0314 	add.w	r3, r9, #20
 800dd5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dd60:	9202      	str	r2, [sp, #8]
 800dd62:	1b3a      	subs	r2, r7, r4
 800dd64:	3a15      	subs	r2, #21
 800dd66:	f022 0203 	bic.w	r2, r2, #3
 800dd6a:	3204      	adds	r2, #4
 800dd6c:	f104 0115 	add.w	r1, r4, #21
 800dd70:	428f      	cmp	r7, r1
 800dd72:	bf38      	it	cc
 800dd74:	2204      	movcc	r2, #4
 800dd76:	9201      	str	r2, [sp, #4]
 800dd78:	9a02      	ldr	r2, [sp, #8]
 800dd7a:	9303      	str	r3, [sp, #12]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d80c      	bhi.n	800dd9a <__multiply+0x9e>
 800dd80:	2e00      	cmp	r6, #0
 800dd82:	dd03      	ble.n	800dd8c <__multiply+0x90>
 800dd84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d059      	beq.n	800de40 <__multiply+0x144>
 800dd8c:	6106      	str	r6, [r0, #16]
 800dd8e:	b005      	add	sp, #20
 800dd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd94:	f843 2b04 	str.w	r2, [r3], #4
 800dd98:	e7d8      	b.n	800dd4c <__multiply+0x50>
 800dd9a:	f8b3 a000 	ldrh.w	sl, [r3]
 800dd9e:	f1ba 0f00 	cmp.w	sl, #0
 800dda2:	d023      	beq.n	800ddec <__multiply+0xf0>
 800dda4:	f104 0e14 	add.w	lr, r4, #20
 800dda8:	46a9      	mov	r9, r5
 800ddaa:	f04f 0c00 	mov.w	ip, #0
 800ddae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ddb2:	f8d9 1000 	ldr.w	r1, [r9]
 800ddb6:	fa1f fb82 	uxth.w	fp, r2
 800ddba:	b289      	uxth	r1, r1
 800ddbc:	fb0a 110b 	mla	r1, sl, fp, r1
 800ddc0:	4461      	add	r1, ip
 800ddc2:	f8d9 c000 	ldr.w	ip, [r9]
 800ddc6:	0c12      	lsrs	r2, r2, #16
 800ddc8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ddcc:	fb0a c202 	mla	r2, sl, r2, ip
 800ddd0:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ddd4:	b289      	uxth	r1, r1
 800ddd6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ddda:	4577      	cmp	r7, lr
 800dddc:	f849 1b04 	str.w	r1, [r9], #4
 800dde0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dde4:	d8e3      	bhi.n	800ddae <__multiply+0xb2>
 800dde6:	9a01      	ldr	r2, [sp, #4]
 800dde8:	f845 c002 	str.w	ip, [r5, r2]
 800ddec:	9a03      	ldr	r2, [sp, #12]
 800ddee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	f1b9 0f00 	cmp.w	r9, #0
 800ddf8:	d020      	beq.n	800de3c <__multiply+0x140>
 800ddfa:	6829      	ldr	r1, [r5, #0]
 800ddfc:	f104 0c14 	add.w	ip, r4, #20
 800de00:	46ae      	mov	lr, r5
 800de02:	f04f 0a00 	mov.w	sl, #0
 800de06:	f8bc b000 	ldrh.w	fp, [ip]
 800de0a:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800de0e:	fb09 220b 	mla	r2, r9, fp, r2
 800de12:	4492      	add	sl, r2
 800de14:	b289      	uxth	r1, r1
 800de16:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800de1a:	f84e 1b04 	str.w	r1, [lr], #4
 800de1e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800de22:	f8be 1000 	ldrh.w	r1, [lr]
 800de26:	0c12      	lsrs	r2, r2, #16
 800de28:	fb09 1102 	mla	r1, r9, r2, r1
 800de2c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800de30:	4567      	cmp	r7, ip
 800de32:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800de36:	d8e6      	bhi.n	800de06 <__multiply+0x10a>
 800de38:	9a01      	ldr	r2, [sp, #4]
 800de3a:	50a9      	str	r1, [r5, r2]
 800de3c:	3504      	adds	r5, #4
 800de3e:	e79b      	b.n	800dd78 <__multiply+0x7c>
 800de40:	3e01      	subs	r6, #1
 800de42:	e79d      	b.n	800dd80 <__multiply+0x84>
 800de44:	08013d8f 	.word	0x08013d8f
 800de48:	08013da0 	.word	0x08013da0

0800de4c <__pow5mult>:
 800de4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de50:	4615      	mov	r5, r2
 800de52:	f012 0203 	ands.w	r2, r2, #3
 800de56:	4606      	mov	r6, r0
 800de58:	460f      	mov	r7, r1
 800de5a:	d007      	beq.n	800de6c <__pow5mult+0x20>
 800de5c:	4c25      	ldr	r4, [pc, #148]	; (800def4 <__pow5mult+0xa8>)
 800de5e:	3a01      	subs	r2, #1
 800de60:	2300      	movs	r3, #0
 800de62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de66:	f7ff feed 	bl	800dc44 <__multadd>
 800de6a:	4607      	mov	r7, r0
 800de6c:	10ad      	asrs	r5, r5, #2
 800de6e:	d03d      	beq.n	800deec <__pow5mult+0xa0>
 800de70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800de72:	b97c      	cbnz	r4, 800de94 <__pow5mult+0x48>
 800de74:	2010      	movs	r0, #16
 800de76:	f7ff f94f 	bl	800d118 <malloc>
 800de7a:	4602      	mov	r2, r0
 800de7c:	6270      	str	r0, [r6, #36]	; 0x24
 800de7e:	b928      	cbnz	r0, 800de8c <__pow5mult+0x40>
 800de80:	4b1d      	ldr	r3, [pc, #116]	; (800def8 <__pow5mult+0xac>)
 800de82:	481e      	ldr	r0, [pc, #120]	; (800defc <__pow5mult+0xb0>)
 800de84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800de88:	f7ff fe3a 	bl	800db00 <__assert_func>
 800de8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de90:	6004      	str	r4, [r0, #0]
 800de92:	60c4      	str	r4, [r0, #12]
 800de94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800de98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de9c:	b94c      	cbnz	r4, 800deb2 <__pow5mult+0x66>
 800de9e:	f240 2171 	movw	r1, #625	; 0x271
 800dea2:	4630      	mov	r0, r6
 800dea4:	f7ff ff14 	bl	800dcd0 <__i2b>
 800dea8:	2300      	movs	r3, #0
 800deaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800deae:	4604      	mov	r4, r0
 800deb0:	6003      	str	r3, [r0, #0]
 800deb2:	f04f 0900 	mov.w	r9, #0
 800deb6:	07eb      	lsls	r3, r5, #31
 800deb8:	d50a      	bpl.n	800ded0 <__pow5mult+0x84>
 800deba:	4639      	mov	r1, r7
 800debc:	4622      	mov	r2, r4
 800debe:	4630      	mov	r0, r6
 800dec0:	f7ff ff1c 	bl	800dcfc <__multiply>
 800dec4:	4639      	mov	r1, r7
 800dec6:	4680      	mov	r8, r0
 800dec8:	4630      	mov	r0, r6
 800deca:	f7ff fe99 	bl	800dc00 <_Bfree>
 800dece:	4647      	mov	r7, r8
 800ded0:	106d      	asrs	r5, r5, #1
 800ded2:	d00b      	beq.n	800deec <__pow5mult+0xa0>
 800ded4:	6820      	ldr	r0, [r4, #0]
 800ded6:	b938      	cbnz	r0, 800dee8 <__pow5mult+0x9c>
 800ded8:	4622      	mov	r2, r4
 800deda:	4621      	mov	r1, r4
 800dedc:	4630      	mov	r0, r6
 800dede:	f7ff ff0d 	bl	800dcfc <__multiply>
 800dee2:	6020      	str	r0, [r4, #0]
 800dee4:	f8c0 9000 	str.w	r9, [r0]
 800dee8:	4604      	mov	r4, r0
 800deea:	e7e4      	b.n	800deb6 <__pow5mult+0x6a>
 800deec:	4638      	mov	r0, r7
 800deee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800def2:	bf00      	nop
 800def4:	08013ad8 	.word	0x08013ad8
 800def8:	08013c79 	.word	0x08013c79
 800defc:	08013da0 	.word	0x08013da0

0800df00 <__lshift>:
 800df00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df04:	460c      	mov	r4, r1
 800df06:	6849      	ldr	r1, [r1, #4]
 800df08:	6923      	ldr	r3, [r4, #16]
 800df0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df0e:	68a3      	ldr	r3, [r4, #8]
 800df10:	4607      	mov	r7, r0
 800df12:	4691      	mov	r9, r2
 800df14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df18:	f108 0601 	add.w	r6, r8, #1
 800df1c:	42b3      	cmp	r3, r6
 800df1e:	db0b      	blt.n	800df38 <__lshift+0x38>
 800df20:	4638      	mov	r0, r7
 800df22:	f7ff fe2d 	bl	800db80 <_Balloc>
 800df26:	4605      	mov	r5, r0
 800df28:	b948      	cbnz	r0, 800df3e <__lshift+0x3e>
 800df2a:	4602      	mov	r2, r0
 800df2c:	4b2a      	ldr	r3, [pc, #168]	; (800dfd8 <__lshift+0xd8>)
 800df2e:	482b      	ldr	r0, [pc, #172]	; (800dfdc <__lshift+0xdc>)
 800df30:	f240 11d9 	movw	r1, #473	; 0x1d9
 800df34:	f7ff fde4 	bl	800db00 <__assert_func>
 800df38:	3101      	adds	r1, #1
 800df3a:	005b      	lsls	r3, r3, #1
 800df3c:	e7ee      	b.n	800df1c <__lshift+0x1c>
 800df3e:	2300      	movs	r3, #0
 800df40:	f100 0114 	add.w	r1, r0, #20
 800df44:	f100 0210 	add.w	r2, r0, #16
 800df48:	4618      	mov	r0, r3
 800df4a:	4553      	cmp	r3, sl
 800df4c:	db37      	blt.n	800dfbe <__lshift+0xbe>
 800df4e:	6920      	ldr	r0, [r4, #16]
 800df50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df54:	f104 0314 	add.w	r3, r4, #20
 800df58:	f019 091f 	ands.w	r9, r9, #31
 800df5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800df64:	d02f      	beq.n	800dfc6 <__lshift+0xc6>
 800df66:	f1c9 0e20 	rsb	lr, r9, #32
 800df6a:	468a      	mov	sl, r1
 800df6c:	f04f 0c00 	mov.w	ip, #0
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	fa02 f209 	lsl.w	r2, r2, r9
 800df76:	ea42 020c 	orr.w	r2, r2, ip
 800df7a:	f84a 2b04 	str.w	r2, [sl], #4
 800df7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800df82:	4298      	cmp	r0, r3
 800df84:	fa22 fc0e 	lsr.w	ip, r2, lr
 800df88:	d8f2      	bhi.n	800df70 <__lshift+0x70>
 800df8a:	1b03      	subs	r3, r0, r4
 800df8c:	3b15      	subs	r3, #21
 800df8e:	f023 0303 	bic.w	r3, r3, #3
 800df92:	3304      	adds	r3, #4
 800df94:	f104 0215 	add.w	r2, r4, #21
 800df98:	4290      	cmp	r0, r2
 800df9a:	bf38      	it	cc
 800df9c:	2304      	movcc	r3, #4
 800df9e:	f841 c003 	str.w	ip, [r1, r3]
 800dfa2:	f1bc 0f00 	cmp.w	ip, #0
 800dfa6:	d001      	beq.n	800dfac <__lshift+0xac>
 800dfa8:	f108 0602 	add.w	r6, r8, #2
 800dfac:	3e01      	subs	r6, #1
 800dfae:	4638      	mov	r0, r7
 800dfb0:	612e      	str	r6, [r5, #16]
 800dfb2:	4621      	mov	r1, r4
 800dfb4:	f7ff fe24 	bl	800dc00 <_Bfree>
 800dfb8:	4628      	mov	r0, r5
 800dfba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfbe:	f842 0f04 	str.w	r0, [r2, #4]!
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	e7c1      	b.n	800df4a <__lshift+0x4a>
 800dfc6:	3904      	subs	r1, #4
 800dfc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfcc:	f841 2f04 	str.w	r2, [r1, #4]!
 800dfd0:	4298      	cmp	r0, r3
 800dfd2:	d8f9      	bhi.n	800dfc8 <__lshift+0xc8>
 800dfd4:	e7ea      	b.n	800dfac <__lshift+0xac>
 800dfd6:	bf00      	nop
 800dfd8:	08013d8f 	.word	0x08013d8f
 800dfdc:	08013da0 	.word	0x08013da0

0800dfe0 <__mdiff>:
 800dfe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe4:	460d      	mov	r5, r1
 800dfe6:	4607      	mov	r7, r0
 800dfe8:	4611      	mov	r1, r2
 800dfea:	4628      	mov	r0, r5
 800dfec:	4614      	mov	r4, r2
 800dfee:	f003 fbc4 	bl	801177a <__mcmp>
 800dff2:	1e06      	subs	r6, r0, #0
 800dff4:	d111      	bne.n	800e01a <__mdiff+0x3a>
 800dff6:	4631      	mov	r1, r6
 800dff8:	4638      	mov	r0, r7
 800dffa:	f7ff fdc1 	bl	800db80 <_Balloc>
 800dffe:	4602      	mov	r2, r0
 800e000:	b928      	cbnz	r0, 800e00e <__mdiff+0x2e>
 800e002:	4b39      	ldr	r3, [pc, #228]	; (800e0e8 <__mdiff+0x108>)
 800e004:	f240 2132 	movw	r1, #562	; 0x232
 800e008:	4838      	ldr	r0, [pc, #224]	; (800e0ec <__mdiff+0x10c>)
 800e00a:	f7ff fd79 	bl	800db00 <__assert_func>
 800e00e:	2301      	movs	r3, #1
 800e010:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e014:	4610      	mov	r0, r2
 800e016:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e01a:	bfa4      	itt	ge
 800e01c:	4623      	movge	r3, r4
 800e01e:	462c      	movge	r4, r5
 800e020:	4638      	mov	r0, r7
 800e022:	6861      	ldr	r1, [r4, #4]
 800e024:	bfa6      	itte	ge
 800e026:	461d      	movge	r5, r3
 800e028:	2600      	movge	r6, #0
 800e02a:	2601      	movlt	r6, #1
 800e02c:	f7ff fda8 	bl	800db80 <_Balloc>
 800e030:	4602      	mov	r2, r0
 800e032:	b918      	cbnz	r0, 800e03c <__mdiff+0x5c>
 800e034:	4b2c      	ldr	r3, [pc, #176]	; (800e0e8 <__mdiff+0x108>)
 800e036:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e03a:	e7e5      	b.n	800e008 <__mdiff+0x28>
 800e03c:	6927      	ldr	r7, [r4, #16]
 800e03e:	60c6      	str	r6, [r0, #12]
 800e040:	692e      	ldr	r6, [r5, #16]
 800e042:	f104 0014 	add.w	r0, r4, #20
 800e046:	f105 0914 	add.w	r9, r5, #20
 800e04a:	f102 0e14 	add.w	lr, r2, #20
 800e04e:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800e052:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e056:	3410      	adds	r4, #16
 800e058:	46f2      	mov	sl, lr
 800e05a:	2100      	movs	r1, #0
 800e05c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e060:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800e064:	fa1f f883 	uxth.w	r8, r3
 800e068:	fa11 f18b 	uxtah	r1, r1, fp
 800e06c:	0c1b      	lsrs	r3, r3, #16
 800e06e:	eba1 0808 	sub.w	r8, r1, r8
 800e072:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e076:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e07a:	fa1f f888 	uxth.w	r8, r8
 800e07e:	1419      	asrs	r1, r3, #16
 800e080:	454e      	cmp	r6, r9
 800e082:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e086:	f84a 3b04 	str.w	r3, [sl], #4
 800e08a:	d8e7      	bhi.n	800e05c <__mdiff+0x7c>
 800e08c:	1b73      	subs	r3, r6, r5
 800e08e:	3b15      	subs	r3, #21
 800e090:	f023 0303 	bic.w	r3, r3, #3
 800e094:	3304      	adds	r3, #4
 800e096:	3515      	adds	r5, #21
 800e098:	42ae      	cmp	r6, r5
 800e09a:	bf38      	it	cc
 800e09c:	2304      	movcc	r3, #4
 800e09e:	4418      	add	r0, r3
 800e0a0:	4473      	add	r3, lr
 800e0a2:	469e      	mov	lr, r3
 800e0a4:	4606      	mov	r6, r0
 800e0a6:	4566      	cmp	r6, ip
 800e0a8:	d30e      	bcc.n	800e0c8 <__mdiff+0xe8>
 800e0aa:	f10c 0103 	add.w	r1, ip, #3
 800e0ae:	1a09      	subs	r1, r1, r0
 800e0b0:	f021 0103 	bic.w	r1, r1, #3
 800e0b4:	3803      	subs	r0, #3
 800e0b6:	4584      	cmp	ip, r0
 800e0b8:	bf38      	it	cc
 800e0ba:	2100      	movcc	r1, #0
 800e0bc:	4419      	add	r1, r3
 800e0be:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e0c2:	b17b      	cbz	r3, 800e0e4 <__mdiff+0x104>
 800e0c4:	6117      	str	r7, [r2, #16]
 800e0c6:	e7a5      	b.n	800e014 <__mdiff+0x34>
 800e0c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800e0cc:	fa11 f488 	uxtah	r4, r1, r8
 800e0d0:	1425      	asrs	r5, r4, #16
 800e0d2:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800e0d6:	b2a4      	uxth	r4, r4
 800e0d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800e0dc:	f84e 4b04 	str.w	r4, [lr], #4
 800e0e0:	1429      	asrs	r1, r5, #16
 800e0e2:	e7e0      	b.n	800e0a6 <__mdiff+0xc6>
 800e0e4:	3f01      	subs	r7, #1
 800e0e6:	e7ea      	b.n	800e0be <__mdiff+0xde>
 800e0e8:	08013d8f 	.word	0x08013d8f
 800e0ec:	08013da0 	.word	0x08013da0

0800e0f0 <__d2b>:
 800e0f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e0f4:	2101      	movs	r1, #1
 800e0f6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800e0fa:	4690      	mov	r8, r2
 800e0fc:	461d      	mov	r5, r3
 800e0fe:	f7ff fd3f 	bl	800db80 <_Balloc>
 800e102:	4604      	mov	r4, r0
 800e104:	b930      	cbnz	r0, 800e114 <__d2b+0x24>
 800e106:	4602      	mov	r2, r0
 800e108:	4b25      	ldr	r3, [pc, #148]	; (800e1a0 <__d2b+0xb0>)
 800e10a:	4826      	ldr	r0, [pc, #152]	; (800e1a4 <__d2b+0xb4>)
 800e10c:	f240 310a 	movw	r1, #778	; 0x30a
 800e110:	f7ff fcf6 	bl	800db00 <__assert_func>
 800e114:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800e118:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800e11c:	bb2d      	cbnz	r5, 800e16a <__d2b+0x7a>
 800e11e:	9301      	str	r3, [sp, #4]
 800e120:	f1b8 0300 	subs.w	r3, r8, #0
 800e124:	d026      	beq.n	800e174 <__d2b+0x84>
 800e126:	4668      	mov	r0, sp
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	f003 faf9 	bl	8011720 <__lo0bits>
 800e12e:	9900      	ldr	r1, [sp, #0]
 800e130:	b1f0      	cbz	r0, 800e170 <__d2b+0x80>
 800e132:	9a01      	ldr	r2, [sp, #4]
 800e134:	f1c0 0320 	rsb	r3, r0, #32
 800e138:	fa02 f303 	lsl.w	r3, r2, r3
 800e13c:	430b      	orrs	r3, r1
 800e13e:	40c2      	lsrs	r2, r0
 800e140:	6163      	str	r3, [r4, #20]
 800e142:	9201      	str	r2, [sp, #4]
 800e144:	9b01      	ldr	r3, [sp, #4]
 800e146:	61a3      	str	r3, [r4, #24]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	bf14      	ite	ne
 800e14c:	2102      	movne	r1, #2
 800e14e:	2101      	moveq	r1, #1
 800e150:	6121      	str	r1, [r4, #16]
 800e152:	b1c5      	cbz	r5, 800e186 <__d2b+0x96>
 800e154:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e158:	4405      	add	r5, r0
 800e15a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e15e:	603d      	str	r5, [r7, #0]
 800e160:	6030      	str	r0, [r6, #0]
 800e162:	4620      	mov	r0, r4
 800e164:	b002      	add	sp, #8
 800e166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e16a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e16e:	e7d6      	b.n	800e11e <__d2b+0x2e>
 800e170:	6161      	str	r1, [r4, #20]
 800e172:	e7e7      	b.n	800e144 <__d2b+0x54>
 800e174:	a801      	add	r0, sp, #4
 800e176:	f003 fad3 	bl	8011720 <__lo0bits>
 800e17a:	9b01      	ldr	r3, [sp, #4]
 800e17c:	6163      	str	r3, [r4, #20]
 800e17e:	2101      	movs	r1, #1
 800e180:	6121      	str	r1, [r4, #16]
 800e182:	3020      	adds	r0, #32
 800e184:	e7e5      	b.n	800e152 <__d2b+0x62>
 800e186:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800e18a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e18e:	6038      	str	r0, [r7, #0]
 800e190:	6918      	ldr	r0, [r3, #16]
 800e192:	f003 faa5 	bl	80116e0 <__hi0bits>
 800e196:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800e19a:	6031      	str	r1, [r6, #0]
 800e19c:	e7e1      	b.n	800e162 <__d2b+0x72>
 800e19e:	bf00      	nop
 800e1a0:	08013d8f 	.word	0x08013d8f
 800e1a4:	08013da0 	.word	0x08013da0

0800e1a8 <_svfiprintf_r>:
 800e1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ac:	4698      	mov	r8, r3
 800e1ae:	898b      	ldrh	r3, [r1, #12]
 800e1b0:	061b      	lsls	r3, r3, #24
 800e1b2:	b09d      	sub	sp, #116	; 0x74
 800e1b4:	4607      	mov	r7, r0
 800e1b6:	460d      	mov	r5, r1
 800e1b8:	4614      	mov	r4, r2
 800e1ba:	d50e      	bpl.n	800e1da <_svfiprintf_r+0x32>
 800e1bc:	690b      	ldr	r3, [r1, #16]
 800e1be:	b963      	cbnz	r3, 800e1da <_svfiprintf_r+0x32>
 800e1c0:	2140      	movs	r1, #64	; 0x40
 800e1c2:	f7fe fffb 	bl	800d1bc <_malloc_r>
 800e1c6:	6028      	str	r0, [r5, #0]
 800e1c8:	6128      	str	r0, [r5, #16]
 800e1ca:	b920      	cbnz	r0, 800e1d6 <_svfiprintf_r+0x2e>
 800e1cc:	230c      	movs	r3, #12
 800e1ce:	603b      	str	r3, [r7, #0]
 800e1d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1d4:	e0d1      	b.n	800e37a <_svfiprintf_r+0x1d2>
 800e1d6:	2340      	movs	r3, #64	; 0x40
 800e1d8:	616b      	str	r3, [r5, #20]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e1de:	2320      	movs	r3, #32
 800e1e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1e8:	2330      	movs	r3, #48	; 0x30
 800e1ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e394 <_svfiprintf_r+0x1ec>
 800e1ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1f2:	f04f 0901 	mov.w	r9, #1
 800e1f6:	4623      	mov	r3, r4
 800e1f8:	469a      	mov	sl, r3
 800e1fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1fe:	b10a      	cbz	r2, 800e204 <_svfiprintf_r+0x5c>
 800e200:	2a25      	cmp	r2, #37	; 0x25
 800e202:	d1f9      	bne.n	800e1f8 <_svfiprintf_r+0x50>
 800e204:	ebba 0b04 	subs.w	fp, sl, r4
 800e208:	d00b      	beq.n	800e222 <_svfiprintf_r+0x7a>
 800e20a:	465b      	mov	r3, fp
 800e20c:	4622      	mov	r2, r4
 800e20e:	4629      	mov	r1, r5
 800e210:	4638      	mov	r0, r7
 800e212:	f003 fadb 	bl	80117cc <__ssputs_r>
 800e216:	3001      	adds	r0, #1
 800e218:	f000 80aa 	beq.w	800e370 <_svfiprintf_r+0x1c8>
 800e21c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e21e:	445a      	add	r2, fp
 800e220:	9209      	str	r2, [sp, #36]	; 0x24
 800e222:	f89a 3000 	ldrb.w	r3, [sl]
 800e226:	2b00      	cmp	r3, #0
 800e228:	f000 80a2 	beq.w	800e370 <_svfiprintf_r+0x1c8>
 800e22c:	2300      	movs	r3, #0
 800e22e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e236:	f10a 0a01 	add.w	sl, sl, #1
 800e23a:	9304      	str	r3, [sp, #16]
 800e23c:	9307      	str	r3, [sp, #28]
 800e23e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e242:	931a      	str	r3, [sp, #104]	; 0x68
 800e244:	4654      	mov	r4, sl
 800e246:	2205      	movs	r2, #5
 800e248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e24c:	4851      	ldr	r0, [pc, #324]	; (800e394 <_svfiprintf_r+0x1ec>)
 800e24e:	f7f1 ffa7 	bl	80001a0 <memchr>
 800e252:	9a04      	ldr	r2, [sp, #16]
 800e254:	b9d8      	cbnz	r0, 800e28e <_svfiprintf_r+0xe6>
 800e256:	06d0      	lsls	r0, r2, #27
 800e258:	bf44      	itt	mi
 800e25a:	2320      	movmi	r3, #32
 800e25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e260:	0711      	lsls	r1, r2, #28
 800e262:	bf44      	itt	mi
 800e264:	232b      	movmi	r3, #43	; 0x2b
 800e266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e26a:	f89a 3000 	ldrb.w	r3, [sl]
 800e26e:	2b2a      	cmp	r3, #42	; 0x2a
 800e270:	d015      	beq.n	800e29e <_svfiprintf_r+0xf6>
 800e272:	9a07      	ldr	r2, [sp, #28]
 800e274:	4654      	mov	r4, sl
 800e276:	2000      	movs	r0, #0
 800e278:	f04f 0c0a 	mov.w	ip, #10
 800e27c:	4621      	mov	r1, r4
 800e27e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e282:	3b30      	subs	r3, #48	; 0x30
 800e284:	2b09      	cmp	r3, #9
 800e286:	d94e      	bls.n	800e326 <_svfiprintf_r+0x17e>
 800e288:	b1b0      	cbz	r0, 800e2b8 <_svfiprintf_r+0x110>
 800e28a:	9207      	str	r2, [sp, #28]
 800e28c:	e014      	b.n	800e2b8 <_svfiprintf_r+0x110>
 800e28e:	eba0 0308 	sub.w	r3, r0, r8
 800e292:	fa09 f303 	lsl.w	r3, r9, r3
 800e296:	4313      	orrs	r3, r2
 800e298:	9304      	str	r3, [sp, #16]
 800e29a:	46a2      	mov	sl, r4
 800e29c:	e7d2      	b.n	800e244 <_svfiprintf_r+0x9c>
 800e29e:	9b03      	ldr	r3, [sp, #12]
 800e2a0:	1d19      	adds	r1, r3, #4
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	9103      	str	r1, [sp, #12]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	bfbb      	ittet	lt
 800e2aa:	425b      	neglt	r3, r3
 800e2ac:	f042 0202 	orrlt.w	r2, r2, #2
 800e2b0:	9307      	strge	r3, [sp, #28]
 800e2b2:	9307      	strlt	r3, [sp, #28]
 800e2b4:	bfb8      	it	lt
 800e2b6:	9204      	strlt	r2, [sp, #16]
 800e2b8:	7823      	ldrb	r3, [r4, #0]
 800e2ba:	2b2e      	cmp	r3, #46	; 0x2e
 800e2bc:	d10c      	bne.n	800e2d8 <_svfiprintf_r+0x130>
 800e2be:	7863      	ldrb	r3, [r4, #1]
 800e2c0:	2b2a      	cmp	r3, #42	; 0x2a
 800e2c2:	d135      	bne.n	800e330 <_svfiprintf_r+0x188>
 800e2c4:	9b03      	ldr	r3, [sp, #12]
 800e2c6:	1d1a      	adds	r2, r3, #4
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	9203      	str	r2, [sp, #12]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	bfb8      	it	lt
 800e2d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e2d4:	3402      	adds	r4, #2
 800e2d6:	9305      	str	r3, [sp, #20]
 800e2d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800e398 <_svfiprintf_r+0x1f0>
 800e2dc:	7821      	ldrb	r1, [r4, #0]
 800e2de:	2203      	movs	r2, #3
 800e2e0:	4650      	mov	r0, sl
 800e2e2:	f7f1 ff5d 	bl	80001a0 <memchr>
 800e2e6:	b140      	cbz	r0, 800e2fa <_svfiprintf_r+0x152>
 800e2e8:	2340      	movs	r3, #64	; 0x40
 800e2ea:	eba0 000a 	sub.w	r0, r0, sl
 800e2ee:	fa03 f000 	lsl.w	r0, r3, r0
 800e2f2:	9b04      	ldr	r3, [sp, #16]
 800e2f4:	4303      	orrs	r3, r0
 800e2f6:	3401      	adds	r4, #1
 800e2f8:	9304      	str	r3, [sp, #16]
 800e2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2fe:	4827      	ldr	r0, [pc, #156]	; (800e39c <_svfiprintf_r+0x1f4>)
 800e300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e304:	2206      	movs	r2, #6
 800e306:	f7f1 ff4b 	bl	80001a0 <memchr>
 800e30a:	2800      	cmp	r0, #0
 800e30c:	d038      	beq.n	800e380 <_svfiprintf_r+0x1d8>
 800e30e:	4b24      	ldr	r3, [pc, #144]	; (800e3a0 <_svfiprintf_r+0x1f8>)
 800e310:	bb1b      	cbnz	r3, 800e35a <_svfiprintf_r+0x1b2>
 800e312:	9b03      	ldr	r3, [sp, #12]
 800e314:	3307      	adds	r3, #7
 800e316:	f023 0307 	bic.w	r3, r3, #7
 800e31a:	3308      	adds	r3, #8
 800e31c:	9303      	str	r3, [sp, #12]
 800e31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e320:	4433      	add	r3, r6
 800e322:	9309      	str	r3, [sp, #36]	; 0x24
 800e324:	e767      	b.n	800e1f6 <_svfiprintf_r+0x4e>
 800e326:	fb0c 3202 	mla	r2, ip, r2, r3
 800e32a:	460c      	mov	r4, r1
 800e32c:	2001      	movs	r0, #1
 800e32e:	e7a5      	b.n	800e27c <_svfiprintf_r+0xd4>
 800e330:	2300      	movs	r3, #0
 800e332:	3401      	adds	r4, #1
 800e334:	9305      	str	r3, [sp, #20]
 800e336:	4619      	mov	r1, r3
 800e338:	f04f 0c0a 	mov.w	ip, #10
 800e33c:	4620      	mov	r0, r4
 800e33e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e342:	3a30      	subs	r2, #48	; 0x30
 800e344:	2a09      	cmp	r2, #9
 800e346:	d903      	bls.n	800e350 <_svfiprintf_r+0x1a8>
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d0c5      	beq.n	800e2d8 <_svfiprintf_r+0x130>
 800e34c:	9105      	str	r1, [sp, #20]
 800e34e:	e7c3      	b.n	800e2d8 <_svfiprintf_r+0x130>
 800e350:	fb0c 2101 	mla	r1, ip, r1, r2
 800e354:	4604      	mov	r4, r0
 800e356:	2301      	movs	r3, #1
 800e358:	e7f0      	b.n	800e33c <_svfiprintf_r+0x194>
 800e35a:	ab03      	add	r3, sp, #12
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	462a      	mov	r2, r5
 800e360:	4b10      	ldr	r3, [pc, #64]	; (800e3a4 <_svfiprintf_r+0x1fc>)
 800e362:	a904      	add	r1, sp, #16
 800e364:	4638      	mov	r0, r7
 800e366:	f7fe ff83 	bl	800d270 <_printf_float>
 800e36a:	1c42      	adds	r2, r0, #1
 800e36c:	4606      	mov	r6, r0
 800e36e:	d1d6      	bne.n	800e31e <_svfiprintf_r+0x176>
 800e370:	89ab      	ldrh	r3, [r5, #12]
 800e372:	065b      	lsls	r3, r3, #25
 800e374:	f53f af2c 	bmi.w	800e1d0 <_svfiprintf_r+0x28>
 800e378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e37a:	b01d      	add	sp, #116	; 0x74
 800e37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e380:	ab03      	add	r3, sp, #12
 800e382:	9300      	str	r3, [sp, #0]
 800e384:	462a      	mov	r2, r5
 800e386:	4b07      	ldr	r3, [pc, #28]	; (800e3a4 <_svfiprintf_r+0x1fc>)
 800e388:	a904      	add	r1, sp, #16
 800e38a:	4638      	mov	r0, r7
 800e38c:	f7ff f99a 	bl	800d6c4 <_printf_i>
 800e390:	e7eb      	b.n	800e36a <_svfiprintf_r+0x1c2>
 800e392:	bf00      	nop
 800e394:	08013dfb 	.word	0x08013dfb
 800e398:	08013e01 	.word	0x08013e01
 800e39c:	08013e05 	.word	0x08013e05
 800e3a0:	0800d271 	.word	0x0800d271
 800e3a4:	080117cd 	.word	0x080117cd

0800e3a8 <_vfiprintf_r>:
 800e3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ac:	460d      	mov	r5, r1
 800e3ae:	b09d      	sub	sp, #116	; 0x74
 800e3b0:	4614      	mov	r4, r2
 800e3b2:	4698      	mov	r8, r3
 800e3b4:	4606      	mov	r6, r0
 800e3b6:	b118      	cbz	r0, 800e3c0 <_vfiprintf_r+0x18>
 800e3b8:	6983      	ldr	r3, [r0, #24]
 800e3ba:	b90b      	cbnz	r3, 800e3c0 <_vfiprintf_r+0x18>
 800e3bc:	f000 fae4 	bl	800e988 <__sinit>
 800e3c0:	4b89      	ldr	r3, [pc, #548]	; (800e5e8 <_vfiprintf_r+0x240>)
 800e3c2:	429d      	cmp	r5, r3
 800e3c4:	d11b      	bne.n	800e3fe <_vfiprintf_r+0x56>
 800e3c6:	6875      	ldr	r5, [r6, #4]
 800e3c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3ca:	07d9      	lsls	r1, r3, #31
 800e3cc:	d405      	bmi.n	800e3da <_vfiprintf_r+0x32>
 800e3ce:	89ab      	ldrh	r3, [r5, #12]
 800e3d0:	059a      	lsls	r2, r3, #22
 800e3d2:	d402      	bmi.n	800e3da <_vfiprintf_r+0x32>
 800e3d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3d6:	f001 f8e7 	bl	800f5a8 <__retarget_lock_acquire_recursive>
 800e3da:	89ab      	ldrh	r3, [r5, #12]
 800e3dc:	071b      	lsls	r3, r3, #28
 800e3de:	d501      	bpl.n	800e3e4 <_vfiprintf_r+0x3c>
 800e3e0:	692b      	ldr	r3, [r5, #16]
 800e3e2:	b9eb      	cbnz	r3, 800e420 <_vfiprintf_r+0x78>
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	4630      	mov	r0, r6
 800e3e8:	f000 f960 	bl	800e6ac <__swsetup_r>
 800e3ec:	b1c0      	cbz	r0, 800e420 <_vfiprintf_r+0x78>
 800e3ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3f0:	07dc      	lsls	r4, r3, #31
 800e3f2:	d50e      	bpl.n	800e412 <_vfiprintf_r+0x6a>
 800e3f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e3f8:	b01d      	add	sp, #116	; 0x74
 800e3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3fe:	4b7b      	ldr	r3, [pc, #492]	; (800e5ec <_vfiprintf_r+0x244>)
 800e400:	429d      	cmp	r5, r3
 800e402:	d101      	bne.n	800e408 <_vfiprintf_r+0x60>
 800e404:	68b5      	ldr	r5, [r6, #8]
 800e406:	e7df      	b.n	800e3c8 <_vfiprintf_r+0x20>
 800e408:	4b79      	ldr	r3, [pc, #484]	; (800e5f0 <_vfiprintf_r+0x248>)
 800e40a:	429d      	cmp	r5, r3
 800e40c:	bf08      	it	eq
 800e40e:	68f5      	ldreq	r5, [r6, #12]
 800e410:	e7da      	b.n	800e3c8 <_vfiprintf_r+0x20>
 800e412:	89ab      	ldrh	r3, [r5, #12]
 800e414:	0598      	lsls	r0, r3, #22
 800e416:	d4ed      	bmi.n	800e3f4 <_vfiprintf_r+0x4c>
 800e418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e41a:	f001 f8cd 	bl	800f5b8 <__retarget_lock_release_recursive>
 800e41e:	e7e9      	b.n	800e3f4 <_vfiprintf_r+0x4c>
 800e420:	2300      	movs	r3, #0
 800e422:	9309      	str	r3, [sp, #36]	; 0x24
 800e424:	2320      	movs	r3, #32
 800e426:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e42a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e42e:	2330      	movs	r3, #48	; 0x30
 800e430:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e5f4 <_vfiprintf_r+0x24c>
 800e434:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e438:	f04f 0901 	mov.w	r9, #1
 800e43c:	4623      	mov	r3, r4
 800e43e:	469a      	mov	sl, r3
 800e440:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e444:	b10a      	cbz	r2, 800e44a <_vfiprintf_r+0xa2>
 800e446:	2a25      	cmp	r2, #37	; 0x25
 800e448:	d1f9      	bne.n	800e43e <_vfiprintf_r+0x96>
 800e44a:	ebba 0b04 	subs.w	fp, sl, r4
 800e44e:	d00b      	beq.n	800e468 <_vfiprintf_r+0xc0>
 800e450:	465b      	mov	r3, fp
 800e452:	4622      	mov	r2, r4
 800e454:	4629      	mov	r1, r5
 800e456:	4630      	mov	r0, r6
 800e458:	f003 fa28 	bl	80118ac <__sfputs_r>
 800e45c:	3001      	adds	r0, #1
 800e45e:	f000 80aa 	beq.w	800e5b6 <_vfiprintf_r+0x20e>
 800e462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e464:	445a      	add	r2, fp
 800e466:	9209      	str	r2, [sp, #36]	; 0x24
 800e468:	f89a 3000 	ldrb.w	r3, [sl]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f000 80a2 	beq.w	800e5b6 <_vfiprintf_r+0x20e>
 800e472:	2300      	movs	r3, #0
 800e474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e47c:	f10a 0a01 	add.w	sl, sl, #1
 800e480:	9304      	str	r3, [sp, #16]
 800e482:	9307      	str	r3, [sp, #28]
 800e484:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e488:	931a      	str	r3, [sp, #104]	; 0x68
 800e48a:	4654      	mov	r4, sl
 800e48c:	2205      	movs	r2, #5
 800e48e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e492:	4858      	ldr	r0, [pc, #352]	; (800e5f4 <_vfiprintf_r+0x24c>)
 800e494:	f7f1 fe84 	bl	80001a0 <memchr>
 800e498:	9a04      	ldr	r2, [sp, #16]
 800e49a:	b9d8      	cbnz	r0, 800e4d4 <_vfiprintf_r+0x12c>
 800e49c:	06d1      	lsls	r1, r2, #27
 800e49e:	bf44      	itt	mi
 800e4a0:	2320      	movmi	r3, #32
 800e4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4a6:	0713      	lsls	r3, r2, #28
 800e4a8:	bf44      	itt	mi
 800e4aa:	232b      	movmi	r3, #43	; 0x2b
 800e4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4b4:	2b2a      	cmp	r3, #42	; 0x2a
 800e4b6:	d015      	beq.n	800e4e4 <_vfiprintf_r+0x13c>
 800e4b8:	9a07      	ldr	r2, [sp, #28]
 800e4ba:	4654      	mov	r4, sl
 800e4bc:	2000      	movs	r0, #0
 800e4be:	f04f 0c0a 	mov.w	ip, #10
 800e4c2:	4621      	mov	r1, r4
 800e4c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4c8:	3b30      	subs	r3, #48	; 0x30
 800e4ca:	2b09      	cmp	r3, #9
 800e4cc:	d94e      	bls.n	800e56c <_vfiprintf_r+0x1c4>
 800e4ce:	b1b0      	cbz	r0, 800e4fe <_vfiprintf_r+0x156>
 800e4d0:	9207      	str	r2, [sp, #28]
 800e4d2:	e014      	b.n	800e4fe <_vfiprintf_r+0x156>
 800e4d4:	eba0 0308 	sub.w	r3, r0, r8
 800e4d8:	fa09 f303 	lsl.w	r3, r9, r3
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	9304      	str	r3, [sp, #16]
 800e4e0:	46a2      	mov	sl, r4
 800e4e2:	e7d2      	b.n	800e48a <_vfiprintf_r+0xe2>
 800e4e4:	9b03      	ldr	r3, [sp, #12]
 800e4e6:	1d19      	adds	r1, r3, #4
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	9103      	str	r1, [sp, #12]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	bfbb      	ittet	lt
 800e4f0:	425b      	neglt	r3, r3
 800e4f2:	f042 0202 	orrlt.w	r2, r2, #2
 800e4f6:	9307      	strge	r3, [sp, #28]
 800e4f8:	9307      	strlt	r3, [sp, #28]
 800e4fa:	bfb8      	it	lt
 800e4fc:	9204      	strlt	r2, [sp, #16]
 800e4fe:	7823      	ldrb	r3, [r4, #0]
 800e500:	2b2e      	cmp	r3, #46	; 0x2e
 800e502:	d10c      	bne.n	800e51e <_vfiprintf_r+0x176>
 800e504:	7863      	ldrb	r3, [r4, #1]
 800e506:	2b2a      	cmp	r3, #42	; 0x2a
 800e508:	d135      	bne.n	800e576 <_vfiprintf_r+0x1ce>
 800e50a:	9b03      	ldr	r3, [sp, #12]
 800e50c:	1d1a      	adds	r2, r3, #4
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	9203      	str	r2, [sp, #12]
 800e512:	2b00      	cmp	r3, #0
 800e514:	bfb8      	it	lt
 800e516:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e51a:	3402      	adds	r4, #2
 800e51c:	9305      	str	r3, [sp, #20]
 800e51e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e5f8 <_vfiprintf_r+0x250>
 800e522:	7821      	ldrb	r1, [r4, #0]
 800e524:	2203      	movs	r2, #3
 800e526:	4650      	mov	r0, sl
 800e528:	f7f1 fe3a 	bl	80001a0 <memchr>
 800e52c:	b140      	cbz	r0, 800e540 <_vfiprintf_r+0x198>
 800e52e:	2340      	movs	r3, #64	; 0x40
 800e530:	eba0 000a 	sub.w	r0, r0, sl
 800e534:	fa03 f000 	lsl.w	r0, r3, r0
 800e538:	9b04      	ldr	r3, [sp, #16]
 800e53a:	4303      	orrs	r3, r0
 800e53c:	3401      	adds	r4, #1
 800e53e:	9304      	str	r3, [sp, #16]
 800e540:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e544:	482d      	ldr	r0, [pc, #180]	; (800e5fc <_vfiprintf_r+0x254>)
 800e546:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e54a:	2206      	movs	r2, #6
 800e54c:	f7f1 fe28 	bl	80001a0 <memchr>
 800e550:	2800      	cmp	r0, #0
 800e552:	d03f      	beq.n	800e5d4 <_vfiprintf_r+0x22c>
 800e554:	4b2a      	ldr	r3, [pc, #168]	; (800e600 <_vfiprintf_r+0x258>)
 800e556:	bb1b      	cbnz	r3, 800e5a0 <_vfiprintf_r+0x1f8>
 800e558:	9b03      	ldr	r3, [sp, #12]
 800e55a:	3307      	adds	r3, #7
 800e55c:	f023 0307 	bic.w	r3, r3, #7
 800e560:	3308      	adds	r3, #8
 800e562:	9303      	str	r3, [sp, #12]
 800e564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e566:	443b      	add	r3, r7
 800e568:	9309      	str	r3, [sp, #36]	; 0x24
 800e56a:	e767      	b.n	800e43c <_vfiprintf_r+0x94>
 800e56c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e570:	460c      	mov	r4, r1
 800e572:	2001      	movs	r0, #1
 800e574:	e7a5      	b.n	800e4c2 <_vfiprintf_r+0x11a>
 800e576:	2300      	movs	r3, #0
 800e578:	3401      	adds	r4, #1
 800e57a:	9305      	str	r3, [sp, #20]
 800e57c:	4619      	mov	r1, r3
 800e57e:	f04f 0c0a 	mov.w	ip, #10
 800e582:	4620      	mov	r0, r4
 800e584:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e588:	3a30      	subs	r2, #48	; 0x30
 800e58a:	2a09      	cmp	r2, #9
 800e58c:	d903      	bls.n	800e596 <_vfiprintf_r+0x1ee>
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d0c5      	beq.n	800e51e <_vfiprintf_r+0x176>
 800e592:	9105      	str	r1, [sp, #20]
 800e594:	e7c3      	b.n	800e51e <_vfiprintf_r+0x176>
 800e596:	fb0c 2101 	mla	r1, ip, r1, r2
 800e59a:	4604      	mov	r4, r0
 800e59c:	2301      	movs	r3, #1
 800e59e:	e7f0      	b.n	800e582 <_vfiprintf_r+0x1da>
 800e5a0:	ab03      	add	r3, sp, #12
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	462a      	mov	r2, r5
 800e5a6:	4b17      	ldr	r3, [pc, #92]	; (800e604 <_vfiprintf_r+0x25c>)
 800e5a8:	a904      	add	r1, sp, #16
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	f7fe fe60 	bl	800d270 <_printf_float>
 800e5b0:	4607      	mov	r7, r0
 800e5b2:	1c78      	adds	r0, r7, #1
 800e5b4:	d1d6      	bne.n	800e564 <_vfiprintf_r+0x1bc>
 800e5b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5b8:	07d9      	lsls	r1, r3, #31
 800e5ba:	d405      	bmi.n	800e5c8 <_vfiprintf_r+0x220>
 800e5bc:	89ab      	ldrh	r3, [r5, #12]
 800e5be:	059a      	lsls	r2, r3, #22
 800e5c0:	d402      	bmi.n	800e5c8 <_vfiprintf_r+0x220>
 800e5c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5c4:	f000 fff8 	bl	800f5b8 <__retarget_lock_release_recursive>
 800e5c8:	89ab      	ldrh	r3, [r5, #12]
 800e5ca:	065b      	lsls	r3, r3, #25
 800e5cc:	f53f af12 	bmi.w	800e3f4 <_vfiprintf_r+0x4c>
 800e5d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5d2:	e711      	b.n	800e3f8 <_vfiprintf_r+0x50>
 800e5d4:	ab03      	add	r3, sp, #12
 800e5d6:	9300      	str	r3, [sp, #0]
 800e5d8:	462a      	mov	r2, r5
 800e5da:	4b0a      	ldr	r3, [pc, #40]	; (800e604 <_vfiprintf_r+0x25c>)
 800e5dc:	a904      	add	r1, sp, #16
 800e5de:	4630      	mov	r0, r6
 800e5e0:	f7ff f870 	bl	800d6c4 <_printf_i>
 800e5e4:	e7e4      	b.n	800e5b0 <_vfiprintf_r+0x208>
 800e5e6:	bf00      	nop
 800e5e8:	08013b04 	.word	0x08013b04
 800e5ec:	08013b24 	.word	0x08013b24
 800e5f0:	08013ae4 	.word	0x08013ae4
 800e5f4:	08013dfb 	.word	0x08013dfb
 800e5f8:	08013e01 	.word	0x08013e01
 800e5fc:	08013e05 	.word	0x08013e05
 800e600:	0800d271 	.word	0x0800d271
 800e604:	080118ad 	.word	0x080118ad

0800e608 <__swbuf_r>:
 800e608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60a:	460e      	mov	r6, r1
 800e60c:	4614      	mov	r4, r2
 800e60e:	4605      	mov	r5, r0
 800e610:	b118      	cbz	r0, 800e61a <__swbuf_r+0x12>
 800e612:	6983      	ldr	r3, [r0, #24]
 800e614:	b90b      	cbnz	r3, 800e61a <__swbuf_r+0x12>
 800e616:	f000 f9b7 	bl	800e988 <__sinit>
 800e61a:	4b21      	ldr	r3, [pc, #132]	; (800e6a0 <__swbuf_r+0x98>)
 800e61c:	429c      	cmp	r4, r3
 800e61e:	d12b      	bne.n	800e678 <__swbuf_r+0x70>
 800e620:	686c      	ldr	r4, [r5, #4]
 800e622:	69a3      	ldr	r3, [r4, #24]
 800e624:	60a3      	str	r3, [r4, #8]
 800e626:	89a3      	ldrh	r3, [r4, #12]
 800e628:	071a      	lsls	r2, r3, #28
 800e62a:	d52f      	bpl.n	800e68c <__swbuf_r+0x84>
 800e62c:	6923      	ldr	r3, [r4, #16]
 800e62e:	b36b      	cbz	r3, 800e68c <__swbuf_r+0x84>
 800e630:	6923      	ldr	r3, [r4, #16]
 800e632:	6820      	ldr	r0, [r4, #0]
 800e634:	1ac0      	subs	r0, r0, r3
 800e636:	6963      	ldr	r3, [r4, #20]
 800e638:	b2f6      	uxtb	r6, r6
 800e63a:	4283      	cmp	r3, r0
 800e63c:	4637      	mov	r7, r6
 800e63e:	dc04      	bgt.n	800e64a <__swbuf_r+0x42>
 800e640:	4621      	mov	r1, r4
 800e642:	4628      	mov	r0, r5
 800e644:	f000 f922 	bl	800e88c <_fflush_r>
 800e648:	bb30      	cbnz	r0, 800e698 <__swbuf_r+0x90>
 800e64a:	68a3      	ldr	r3, [r4, #8]
 800e64c:	3b01      	subs	r3, #1
 800e64e:	60a3      	str	r3, [r4, #8]
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	1c5a      	adds	r2, r3, #1
 800e654:	6022      	str	r2, [r4, #0]
 800e656:	701e      	strb	r6, [r3, #0]
 800e658:	6963      	ldr	r3, [r4, #20]
 800e65a:	3001      	adds	r0, #1
 800e65c:	4283      	cmp	r3, r0
 800e65e:	d004      	beq.n	800e66a <__swbuf_r+0x62>
 800e660:	89a3      	ldrh	r3, [r4, #12]
 800e662:	07db      	lsls	r3, r3, #31
 800e664:	d506      	bpl.n	800e674 <__swbuf_r+0x6c>
 800e666:	2e0a      	cmp	r6, #10
 800e668:	d104      	bne.n	800e674 <__swbuf_r+0x6c>
 800e66a:	4621      	mov	r1, r4
 800e66c:	4628      	mov	r0, r5
 800e66e:	f000 f90d 	bl	800e88c <_fflush_r>
 800e672:	b988      	cbnz	r0, 800e698 <__swbuf_r+0x90>
 800e674:	4638      	mov	r0, r7
 800e676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e678:	4b0a      	ldr	r3, [pc, #40]	; (800e6a4 <__swbuf_r+0x9c>)
 800e67a:	429c      	cmp	r4, r3
 800e67c:	d101      	bne.n	800e682 <__swbuf_r+0x7a>
 800e67e:	68ac      	ldr	r4, [r5, #8]
 800e680:	e7cf      	b.n	800e622 <__swbuf_r+0x1a>
 800e682:	4b09      	ldr	r3, [pc, #36]	; (800e6a8 <__swbuf_r+0xa0>)
 800e684:	429c      	cmp	r4, r3
 800e686:	bf08      	it	eq
 800e688:	68ec      	ldreq	r4, [r5, #12]
 800e68a:	e7ca      	b.n	800e622 <__swbuf_r+0x1a>
 800e68c:	4621      	mov	r1, r4
 800e68e:	4628      	mov	r0, r5
 800e690:	f000 f80c 	bl	800e6ac <__swsetup_r>
 800e694:	2800      	cmp	r0, #0
 800e696:	d0cb      	beq.n	800e630 <__swbuf_r+0x28>
 800e698:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e69c:	e7ea      	b.n	800e674 <__swbuf_r+0x6c>
 800e69e:	bf00      	nop
 800e6a0:	08013b04 	.word	0x08013b04
 800e6a4:	08013b24 	.word	0x08013b24
 800e6a8:	08013ae4 	.word	0x08013ae4

0800e6ac <__swsetup_r>:
 800e6ac:	4b32      	ldr	r3, [pc, #200]	; (800e778 <__swsetup_r+0xcc>)
 800e6ae:	b570      	push	{r4, r5, r6, lr}
 800e6b0:	681d      	ldr	r5, [r3, #0]
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	460c      	mov	r4, r1
 800e6b6:	b125      	cbz	r5, 800e6c2 <__swsetup_r+0x16>
 800e6b8:	69ab      	ldr	r3, [r5, #24]
 800e6ba:	b913      	cbnz	r3, 800e6c2 <__swsetup_r+0x16>
 800e6bc:	4628      	mov	r0, r5
 800e6be:	f000 f963 	bl	800e988 <__sinit>
 800e6c2:	4b2e      	ldr	r3, [pc, #184]	; (800e77c <__swsetup_r+0xd0>)
 800e6c4:	429c      	cmp	r4, r3
 800e6c6:	d10f      	bne.n	800e6e8 <__swsetup_r+0x3c>
 800e6c8:	686c      	ldr	r4, [r5, #4]
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6d0:	0719      	lsls	r1, r3, #28
 800e6d2:	d42c      	bmi.n	800e72e <__swsetup_r+0x82>
 800e6d4:	06dd      	lsls	r5, r3, #27
 800e6d6:	d411      	bmi.n	800e6fc <__swsetup_r+0x50>
 800e6d8:	2309      	movs	r3, #9
 800e6da:	6033      	str	r3, [r6, #0]
 800e6dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e6e0:	81a3      	strh	r3, [r4, #12]
 800e6e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6e6:	e03e      	b.n	800e766 <__swsetup_r+0xba>
 800e6e8:	4b25      	ldr	r3, [pc, #148]	; (800e780 <__swsetup_r+0xd4>)
 800e6ea:	429c      	cmp	r4, r3
 800e6ec:	d101      	bne.n	800e6f2 <__swsetup_r+0x46>
 800e6ee:	68ac      	ldr	r4, [r5, #8]
 800e6f0:	e7eb      	b.n	800e6ca <__swsetup_r+0x1e>
 800e6f2:	4b24      	ldr	r3, [pc, #144]	; (800e784 <__swsetup_r+0xd8>)
 800e6f4:	429c      	cmp	r4, r3
 800e6f6:	bf08      	it	eq
 800e6f8:	68ec      	ldreq	r4, [r5, #12]
 800e6fa:	e7e6      	b.n	800e6ca <__swsetup_r+0x1e>
 800e6fc:	0758      	lsls	r0, r3, #29
 800e6fe:	d512      	bpl.n	800e726 <__swsetup_r+0x7a>
 800e700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e702:	b141      	cbz	r1, 800e716 <__swsetup_r+0x6a>
 800e704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e708:	4299      	cmp	r1, r3
 800e70a:	d002      	beq.n	800e712 <__swsetup_r+0x66>
 800e70c:	4630      	mov	r0, r6
 800e70e:	f7fe fd0b 	bl	800d128 <_free_r>
 800e712:	2300      	movs	r3, #0
 800e714:	6363      	str	r3, [r4, #52]	; 0x34
 800e716:	89a3      	ldrh	r3, [r4, #12]
 800e718:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e71c:	81a3      	strh	r3, [r4, #12]
 800e71e:	2300      	movs	r3, #0
 800e720:	6063      	str	r3, [r4, #4]
 800e722:	6923      	ldr	r3, [r4, #16]
 800e724:	6023      	str	r3, [r4, #0]
 800e726:	89a3      	ldrh	r3, [r4, #12]
 800e728:	f043 0308 	orr.w	r3, r3, #8
 800e72c:	81a3      	strh	r3, [r4, #12]
 800e72e:	6923      	ldr	r3, [r4, #16]
 800e730:	b94b      	cbnz	r3, 800e746 <__swsetup_r+0x9a>
 800e732:	89a3      	ldrh	r3, [r4, #12]
 800e734:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e73c:	d003      	beq.n	800e746 <__swsetup_r+0x9a>
 800e73e:	4621      	mov	r1, r4
 800e740:	4630      	mov	r0, r6
 800e742:	f000 f99f 	bl	800ea84 <__smakebuf_r>
 800e746:	89a0      	ldrh	r0, [r4, #12]
 800e748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e74c:	f010 0301 	ands.w	r3, r0, #1
 800e750:	d00a      	beq.n	800e768 <__swsetup_r+0xbc>
 800e752:	2300      	movs	r3, #0
 800e754:	60a3      	str	r3, [r4, #8]
 800e756:	6963      	ldr	r3, [r4, #20]
 800e758:	425b      	negs	r3, r3
 800e75a:	61a3      	str	r3, [r4, #24]
 800e75c:	6923      	ldr	r3, [r4, #16]
 800e75e:	b943      	cbnz	r3, 800e772 <__swsetup_r+0xc6>
 800e760:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e764:	d1ba      	bne.n	800e6dc <__swsetup_r+0x30>
 800e766:	bd70      	pop	{r4, r5, r6, pc}
 800e768:	0781      	lsls	r1, r0, #30
 800e76a:	bf58      	it	pl
 800e76c:	6963      	ldrpl	r3, [r4, #20]
 800e76e:	60a3      	str	r3, [r4, #8]
 800e770:	e7f4      	b.n	800e75c <__swsetup_r+0xb0>
 800e772:	2000      	movs	r0, #0
 800e774:	e7f7      	b.n	800e766 <__swsetup_r+0xba>
 800e776:	bf00      	nop
 800e778:	200003d4 	.word	0x200003d4
 800e77c:	08013b04 	.word	0x08013b04
 800e780:	08013b24 	.word	0x08013b24
 800e784:	08013ae4 	.word	0x08013ae4

0800e788 <__sflush_r>:
 800e788:	898a      	ldrh	r2, [r1, #12]
 800e78a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e78c:	4605      	mov	r5, r0
 800e78e:	0710      	lsls	r0, r2, #28
 800e790:	460c      	mov	r4, r1
 800e792:	d457      	bmi.n	800e844 <__sflush_r+0xbc>
 800e794:	684b      	ldr	r3, [r1, #4]
 800e796:	2b00      	cmp	r3, #0
 800e798:	dc04      	bgt.n	800e7a4 <__sflush_r+0x1c>
 800e79a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	dc01      	bgt.n	800e7a4 <__sflush_r+0x1c>
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7a6:	2e00      	cmp	r6, #0
 800e7a8:	d0fa      	beq.n	800e7a0 <__sflush_r+0x18>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e7b0:	682f      	ldr	r7, [r5, #0]
 800e7b2:	602b      	str	r3, [r5, #0]
 800e7b4:	d032      	beq.n	800e81c <__sflush_r+0x94>
 800e7b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e7b8:	89a3      	ldrh	r3, [r4, #12]
 800e7ba:	075a      	lsls	r2, r3, #29
 800e7bc:	d505      	bpl.n	800e7ca <__sflush_r+0x42>
 800e7be:	6863      	ldr	r3, [r4, #4]
 800e7c0:	1ac0      	subs	r0, r0, r3
 800e7c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7c4:	b10b      	cbz	r3, 800e7ca <__sflush_r+0x42>
 800e7c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7c8:	1ac0      	subs	r0, r0, r3
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7d0:	6a21      	ldr	r1, [r4, #32]
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	47b0      	blx	r6
 800e7d6:	1c43      	adds	r3, r0, #1
 800e7d8:	89a3      	ldrh	r3, [r4, #12]
 800e7da:	d106      	bne.n	800e7ea <__sflush_r+0x62>
 800e7dc:	6829      	ldr	r1, [r5, #0]
 800e7de:	291d      	cmp	r1, #29
 800e7e0:	d82c      	bhi.n	800e83c <__sflush_r+0xb4>
 800e7e2:	4a29      	ldr	r2, [pc, #164]	; (800e888 <__sflush_r+0x100>)
 800e7e4:	40ca      	lsrs	r2, r1
 800e7e6:	07d6      	lsls	r6, r2, #31
 800e7e8:	d528      	bpl.n	800e83c <__sflush_r+0xb4>
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	6062      	str	r2, [r4, #4]
 800e7ee:	04d9      	lsls	r1, r3, #19
 800e7f0:	6922      	ldr	r2, [r4, #16]
 800e7f2:	6022      	str	r2, [r4, #0]
 800e7f4:	d504      	bpl.n	800e800 <__sflush_r+0x78>
 800e7f6:	1c42      	adds	r2, r0, #1
 800e7f8:	d101      	bne.n	800e7fe <__sflush_r+0x76>
 800e7fa:	682b      	ldr	r3, [r5, #0]
 800e7fc:	b903      	cbnz	r3, 800e800 <__sflush_r+0x78>
 800e7fe:	6560      	str	r0, [r4, #84]	; 0x54
 800e800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e802:	602f      	str	r7, [r5, #0]
 800e804:	2900      	cmp	r1, #0
 800e806:	d0cb      	beq.n	800e7a0 <__sflush_r+0x18>
 800e808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e80c:	4299      	cmp	r1, r3
 800e80e:	d002      	beq.n	800e816 <__sflush_r+0x8e>
 800e810:	4628      	mov	r0, r5
 800e812:	f7fe fc89 	bl	800d128 <_free_r>
 800e816:	2000      	movs	r0, #0
 800e818:	6360      	str	r0, [r4, #52]	; 0x34
 800e81a:	e7c2      	b.n	800e7a2 <__sflush_r+0x1a>
 800e81c:	6a21      	ldr	r1, [r4, #32]
 800e81e:	2301      	movs	r3, #1
 800e820:	4628      	mov	r0, r5
 800e822:	47b0      	blx	r6
 800e824:	1c41      	adds	r1, r0, #1
 800e826:	d1c7      	bne.n	800e7b8 <__sflush_r+0x30>
 800e828:	682b      	ldr	r3, [r5, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d0c4      	beq.n	800e7b8 <__sflush_r+0x30>
 800e82e:	2b1d      	cmp	r3, #29
 800e830:	d001      	beq.n	800e836 <__sflush_r+0xae>
 800e832:	2b16      	cmp	r3, #22
 800e834:	d101      	bne.n	800e83a <__sflush_r+0xb2>
 800e836:	602f      	str	r7, [r5, #0]
 800e838:	e7b2      	b.n	800e7a0 <__sflush_r+0x18>
 800e83a:	89a3      	ldrh	r3, [r4, #12]
 800e83c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e840:	81a3      	strh	r3, [r4, #12]
 800e842:	e7ae      	b.n	800e7a2 <__sflush_r+0x1a>
 800e844:	690f      	ldr	r7, [r1, #16]
 800e846:	2f00      	cmp	r7, #0
 800e848:	d0aa      	beq.n	800e7a0 <__sflush_r+0x18>
 800e84a:	0793      	lsls	r3, r2, #30
 800e84c:	680e      	ldr	r6, [r1, #0]
 800e84e:	bf08      	it	eq
 800e850:	694b      	ldreq	r3, [r1, #20]
 800e852:	600f      	str	r7, [r1, #0]
 800e854:	bf18      	it	ne
 800e856:	2300      	movne	r3, #0
 800e858:	1bf6      	subs	r6, r6, r7
 800e85a:	608b      	str	r3, [r1, #8]
 800e85c:	2e00      	cmp	r6, #0
 800e85e:	dd9f      	ble.n	800e7a0 <__sflush_r+0x18>
 800e860:	6a21      	ldr	r1, [r4, #32]
 800e862:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e866:	4633      	mov	r3, r6
 800e868:	463a      	mov	r2, r7
 800e86a:	4628      	mov	r0, r5
 800e86c:	47e0      	blx	ip
 800e86e:	2800      	cmp	r0, #0
 800e870:	dc06      	bgt.n	800e880 <__sflush_r+0xf8>
 800e872:	89a3      	ldrh	r3, [r4, #12]
 800e874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e878:	81a3      	strh	r3, [r4, #12]
 800e87a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e87e:	e790      	b.n	800e7a2 <__sflush_r+0x1a>
 800e880:	4407      	add	r7, r0
 800e882:	1a36      	subs	r6, r6, r0
 800e884:	e7ea      	b.n	800e85c <__sflush_r+0xd4>
 800e886:	bf00      	nop
 800e888:	20400001 	.word	0x20400001

0800e88c <_fflush_r>:
 800e88c:	b538      	push	{r3, r4, r5, lr}
 800e88e:	690b      	ldr	r3, [r1, #16]
 800e890:	4605      	mov	r5, r0
 800e892:	460c      	mov	r4, r1
 800e894:	b913      	cbnz	r3, 800e89c <_fflush_r+0x10>
 800e896:	2500      	movs	r5, #0
 800e898:	4628      	mov	r0, r5
 800e89a:	bd38      	pop	{r3, r4, r5, pc}
 800e89c:	b118      	cbz	r0, 800e8a6 <_fflush_r+0x1a>
 800e89e:	6983      	ldr	r3, [r0, #24]
 800e8a0:	b90b      	cbnz	r3, 800e8a6 <_fflush_r+0x1a>
 800e8a2:	f000 f871 	bl	800e988 <__sinit>
 800e8a6:	4b14      	ldr	r3, [pc, #80]	; (800e8f8 <_fflush_r+0x6c>)
 800e8a8:	429c      	cmp	r4, r3
 800e8aa:	d11b      	bne.n	800e8e4 <_fflush_r+0x58>
 800e8ac:	686c      	ldr	r4, [r5, #4]
 800e8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d0ef      	beq.n	800e896 <_fflush_r+0xa>
 800e8b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e8b8:	07d0      	lsls	r0, r2, #31
 800e8ba:	d404      	bmi.n	800e8c6 <_fflush_r+0x3a>
 800e8bc:	0599      	lsls	r1, r3, #22
 800e8be:	d402      	bmi.n	800e8c6 <_fflush_r+0x3a>
 800e8c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8c2:	f000 fe71 	bl	800f5a8 <__retarget_lock_acquire_recursive>
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	4621      	mov	r1, r4
 800e8ca:	f7ff ff5d 	bl	800e788 <__sflush_r>
 800e8ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8d0:	07da      	lsls	r2, r3, #31
 800e8d2:	4605      	mov	r5, r0
 800e8d4:	d4e0      	bmi.n	800e898 <_fflush_r+0xc>
 800e8d6:	89a3      	ldrh	r3, [r4, #12]
 800e8d8:	059b      	lsls	r3, r3, #22
 800e8da:	d4dd      	bmi.n	800e898 <_fflush_r+0xc>
 800e8dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8de:	f000 fe6b 	bl	800f5b8 <__retarget_lock_release_recursive>
 800e8e2:	e7d9      	b.n	800e898 <_fflush_r+0xc>
 800e8e4:	4b05      	ldr	r3, [pc, #20]	; (800e8fc <_fflush_r+0x70>)
 800e8e6:	429c      	cmp	r4, r3
 800e8e8:	d101      	bne.n	800e8ee <_fflush_r+0x62>
 800e8ea:	68ac      	ldr	r4, [r5, #8]
 800e8ec:	e7df      	b.n	800e8ae <_fflush_r+0x22>
 800e8ee:	4b04      	ldr	r3, [pc, #16]	; (800e900 <_fflush_r+0x74>)
 800e8f0:	429c      	cmp	r4, r3
 800e8f2:	bf08      	it	eq
 800e8f4:	68ec      	ldreq	r4, [r5, #12]
 800e8f6:	e7da      	b.n	800e8ae <_fflush_r+0x22>
 800e8f8:	08013b04 	.word	0x08013b04
 800e8fc:	08013b24 	.word	0x08013b24
 800e900:	08013ae4 	.word	0x08013ae4

0800e904 <std>:
 800e904:	2300      	movs	r3, #0
 800e906:	b510      	push	{r4, lr}
 800e908:	4604      	mov	r4, r0
 800e90a:	e9c0 3300 	strd	r3, r3, [r0]
 800e90e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e912:	6083      	str	r3, [r0, #8]
 800e914:	8181      	strh	r1, [r0, #12]
 800e916:	6643      	str	r3, [r0, #100]	; 0x64
 800e918:	81c2      	strh	r2, [r0, #14]
 800e91a:	6183      	str	r3, [r0, #24]
 800e91c:	4619      	mov	r1, r3
 800e91e:	2208      	movs	r2, #8
 800e920:	305c      	adds	r0, #92	; 0x5c
 800e922:	f002 fcca 	bl	80112ba <memset>
 800e926:	4b05      	ldr	r3, [pc, #20]	; (800e93c <std+0x38>)
 800e928:	6263      	str	r3, [r4, #36]	; 0x24
 800e92a:	4b05      	ldr	r3, [pc, #20]	; (800e940 <std+0x3c>)
 800e92c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e92e:	4b05      	ldr	r3, [pc, #20]	; (800e944 <std+0x40>)
 800e930:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e932:	4b05      	ldr	r3, [pc, #20]	; (800e948 <std+0x44>)
 800e934:	6224      	str	r4, [r4, #32]
 800e936:	6323      	str	r3, [r4, #48]	; 0x30
 800e938:	bd10      	pop	{r4, pc}
 800e93a:	bf00      	nop
 800e93c:	08011a8b 	.word	0x08011a8b
 800e940:	08011aad 	.word	0x08011aad
 800e944:	08011ae5 	.word	0x08011ae5
 800e948:	08011b09 	.word	0x08011b09

0800e94c <_cleanup_r>:
 800e94c:	4901      	ldr	r1, [pc, #4]	; (800e954 <_cleanup_r+0x8>)
 800e94e:	f002 bfdc 	b.w	801190a <_fwalk_reent>
 800e952:	bf00      	nop
 800e954:	0800e88d 	.word	0x0800e88d

0800e958 <__sfp_lock_acquire>:
 800e958:	4801      	ldr	r0, [pc, #4]	; (800e960 <__sfp_lock_acquire+0x8>)
 800e95a:	f000 be25 	b.w	800f5a8 <__retarget_lock_acquire_recursive>
 800e95e:	bf00      	nop
 800e960:	2000065c 	.word	0x2000065c

0800e964 <__sfp_lock_release>:
 800e964:	4801      	ldr	r0, [pc, #4]	; (800e96c <__sfp_lock_release+0x8>)
 800e966:	f000 be27 	b.w	800f5b8 <__retarget_lock_release_recursive>
 800e96a:	bf00      	nop
 800e96c:	2000065c 	.word	0x2000065c

0800e970 <__sinit_lock_acquire>:
 800e970:	4801      	ldr	r0, [pc, #4]	; (800e978 <__sinit_lock_acquire+0x8>)
 800e972:	f000 be19 	b.w	800f5a8 <__retarget_lock_acquire_recursive>
 800e976:	bf00      	nop
 800e978:	20000670 	.word	0x20000670

0800e97c <__sinit_lock_release>:
 800e97c:	4801      	ldr	r0, [pc, #4]	; (800e984 <__sinit_lock_release+0x8>)
 800e97e:	f000 be1b 	b.w	800f5b8 <__retarget_lock_release_recursive>
 800e982:	bf00      	nop
 800e984:	20000670 	.word	0x20000670

0800e988 <__sinit>:
 800e988:	b510      	push	{r4, lr}
 800e98a:	4604      	mov	r4, r0
 800e98c:	f7ff fff0 	bl	800e970 <__sinit_lock_acquire>
 800e990:	69a3      	ldr	r3, [r4, #24]
 800e992:	b11b      	cbz	r3, 800e99c <__sinit+0x14>
 800e994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e998:	f7ff bff0 	b.w	800e97c <__sinit_lock_release>
 800e99c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e9a0:	6523      	str	r3, [r4, #80]	; 0x50
 800e9a2:	4b13      	ldr	r3, [pc, #76]	; (800e9f0 <__sinit+0x68>)
 800e9a4:	4a13      	ldr	r2, [pc, #76]	; (800e9f4 <__sinit+0x6c>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e9aa:	42a3      	cmp	r3, r4
 800e9ac:	bf04      	itt	eq
 800e9ae:	2301      	moveq	r3, #1
 800e9b0:	61a3      	streq	r3, [r4, #24]
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f000 f820 	bl	800e9f8 <__sfp>
 800e9b8:	6060      	str	r0, [r4, #4]
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	f000 f81c 	bl	800e9f8 <__sfp>
 800e9c0:	60a0      	str	r0, [r4, #8]
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f000 f818 	bl	800e9f8 <__sfp>
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	60e0      	str	r0, [r4, #12]
 800e9cc:	2104      	movs	r1, #4
 800e9ce:	6860      	ldr	r0, [r4, #4]
 800e9d0:	f7ff ff98 	bl	800e904 <std>
 800e9d4:	68a0      	ldr	r0, [r4, #8]
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	2109      	movs	r1, #9
 800e9da:	f7ff ff93 	bl	800e904 <std>
 800e9de:	68e0      	ldr	r0, [r4, #12]
 800e9e0:	2202      	movs	r2, #2
 800e9e2:	2112      	movs	r1, #18
 800e9e4:	f7ff ff8e 	bl	800e904 <std>
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	61a3      	str	r3, [r4, #24]
 800e9ec:	e7d2      	b.n	800e994 <__sinit+0xc>
 800e9ee:	bf00      	nop
 800e9f0:	08013ad4 	.word	0x08013ad4
 800e9f4:	0800e94d 	.word	0x0800e94d

0800e9f8 <__sfp>:
 800e9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9fa:	4607      	mov	r7, r0
 800e9fc:	f7ff ffac 	bl	800e958 <__sfp_lock_acquire>
 800ea00:	4b1e      	ldr	r3, [pc, #120]	; (800ea7c <__sfp+0x84>)
 800ea02:	681e      	ldr	r6, [r3, #0]
 800ea04:	69b3      	ldr	r3, [r6, #24]
 800ea06:	b913      	cbnz	r3, 800ea0e <__sfp+0x16>
 800ea08:	4630      	mov	r0, r6
 800ea0a:	f7ff ffbd 	bl	800e988 <__sinit>
 800ea0e:	3648      	adds	r6, #72	; 0x48
 800ea10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ea14:	3b01      	subs	r3, #1
 800ea16:	d503      	bpl.n	800ea20 <__sfp+0x28>
 800ea18:	6833      	ldr	r3, [r6, #0]
 800ea1a:	b30b      	cbz	r3, 800ea60 <__sfp+0x68>
 800ea1c:	6836      	ldr	r6, [r6, #0]
 800ea1e:	e7f7      	b.n	800ea10 <__sfp+0x18>
 800ea20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ea24:	b9d5      	cbnz	r5, 800ea5c <__sfp+0x64>
 800ea26:	4b16      	ldr	r3, [pc, #88]	; (800ea80 <__sfp+0x88>)
 800ea28:	60e3      	str	r3, [r4, #12]
 800ea2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea2e:	6665      	str	r5, [r4, #100]	; 0x64
 800ea30:	f000 fdb1 	bl	800f596 <__retarget_lock_init_recursive>
 800ea34:	f7ff ff96 	bl	800e964 <__sfp_lock_release>
 800ea38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ea3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ea40:	6025      	str	r5, [r4, #0]
 800ea42:	61a5      	str	r5, [r4, #24]
 800ea44:	2208      	movs	r2, #8
 800ea46:	4629      	mov	r1, r5
 800ea48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea4c:	f002 fc35 	bl	80112ba <memset>
 800ea50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea58:	4620      	mov	r0, r4
 800ea5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea5c:	3468      	adds	r4, #104	; 0x68
 800ea5e:	e7d9      	b.n	800ea14 <__sfp+0x1c>
 800ea60:	2104      	movs	r1, #4
 800ea62:	4638      	mov	r0, r7
 800ea64:	f002 ff3b 	bl	80118de <__sfmoreglue>
 800ea68:	4604      	mov	r4, r0
 800ea6a:	6030      	str	r0, [r6, #0]
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	d1d5      	bne.n	800ea1c <__sfp+0x24>
 800ea70:	f7ff ff78 	bl	800e964 <__sfp_lock_release>
 800ea74:	230c      	movs	r3, #12
 800ea76:	603b      	str	r3, [r7, #0]
 800ea78:	e7ee      	b.n	800ea58 <__sfp+0x60>
 800ea7a:	bf00      	nop
 800ea7c:	08013ad4 	.word	0x08013ad4
 800ea80:	ffff0001 	.word	0xffff0001

0800ea84 <__smakebuf_r>:
 800ea84:	898b      	ldrh	r3, [r1, #12]
 800ea86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea88:	079d      	lsls	r5, r3, #30
 800ea8a:	4606      	mov	r6, r0
 800ea8c:	460c      	mov	r4, r1
 800ea8e:	d507      	bpl.n	800eaa0 <__smakebuf_r+0x1c>
 800ea90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea94:	6023      	str	r3, [r4, #0]
 800ea96:	6123      	str	r3, [r4, #16]
 800ea98:	2301      	movs	r3, #1
 800ea9a:	6163      	str	r3, [r4, #20]
 800ea9c:	b002      	add	sp, #8
 800ea9e:	bd70      	pop	{r4, r5, r6, pc}
 800eaa0:	ab01      	add	r3, sp, #4
 800eaa2:	466a      	mov	r2, sp
 800eaa4:	f002 ff50 	bl	8011948 <__swhatbuf_r>
 800eaa8:	9900      	ldr	r1, [sp, #0]
 800eaaa:	4605      	mov	r5, r0
 800eaac:	4630      	mov	r0, r6
 800eaae:	f7fe fb85 	bl	800d1bc <_malloc_r>
 800eab2:	b948      	cbnz	r0, 800eac8 <__smakebuf_r+0x44>
 800eab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eab8:	059a      	lsls	r2, r3, #22
 800eaba:	d4ef      	bmi.n	800ea9c <__smakebuf_r+0x18>
 800eabc:	f023 0303 	bic.w	r3, r3, #3
 800eac0:	f043 0302 	orr.w	r3, r3, #2
 800eac4:	81a3      	strh	r3, [r4, #12]
 800eac6:	e7e3      	b.n	800ea90 <__smakebuf_r+0xc>
 800eac8:	4b0d      	ldr	r3, [pc, #52]	; (800eb00 <__smakebuf_r+0x7c>)
 800eaca:	62b3      	str	r3, [r6, #40]	; 0x28
 800eacc:	89a3      	ldrh	r3, [r4, #12]
 800eace:	6020      	str	r0, [r4, #0]
 800ead0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ead4:	81a3      	strh	r3, [r4, #12]
 800ead6:	9b00      	ldr	r3, [sp, #0]
 800ead8:	6163      	str	r3, [r4, #20]
 800eada:	9b01      	ldr	r3, [sp, #4]
 800eadc:	6120      	str	r0, [r4, #16]
 800eade:	b15b      	cbz	r3, 800eaf8 <__smakebuf_r+0x74>
 800eae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eae4:	4630      	mov	r0, r6
 800eae6:	f000 f85b 	bl	800eba0 <_isatty_r>
 800eaea:	b128      	cbz	r0, 800eaf8 <__smakebuf_r+0x74>
 800eaec:	89a3      	ldrh	r3, [r4, #12]
 800eaee:	f023 0303 	bic.w	r3, r3, #3
 800eaf2:	f043 0301 	orr.w	r3, r3, #1
 800eaf6:	81a3      	strh	r3, [r4, #12]
 800eaf8:	89a0      	ldrh	r0, [r4, #12]
 800eafa:	4305      	orrs	r5, r0
 800eafc:	81a5      	strh	r5, [r4, #12]
 800eafe:	e7cd      	b.n	800ea9c <__smakebuf_r+0x18>
 800eb00:	0800e94d 	.word	0x0800e94d

0800eb04 <raise>:
 800eb04:	4b02      	ldr	r3, [pc, #8]	; (800eb10 <raise+0xc>)
 800eb06:	4601      	mov	r1, r0
 800eb08:	6818      	ldr	r0, [r3, #0]
 800eb0a:	f002 bf94 	b.w	8011a36 <_raise_r>
 800eb0e:	bf00      	nop
 800eb10:	200003d4 	.word	0x200003d4

0800eb14 <_kill_r>:
 800eb14:	b538      	push	{r3, r4, r5, lr}
 800eb16:	4d07      	ldr	r5, [pc, #28]	; (800eb34 <_kill_r+0x20>)
 800eb18:	2300      	movs	r3, #0
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	4608      	mov	r0, r1
 800eb1e:	4611      	mov	r1, r2
 800eb20:	602b      	str	r3, [r5, #0]
 800eb22:	f000 fd2f 	bl	800f584 <_kill>
 800eb26:	1c43      	adds	r3, r0, #1
 800eb28:	d102      	bne.n	800eb30 <_kill_r+0x1c>
 800eb2a:	682b      	ldr	r3, [r5, #0]
 800eb2c:	b103      	cbz	r3, 800eb30 <_kill_r+0x1c>
 800eb2e:	6023      	str	r3, [r4, #0]
 800eb30:	bd38      	pop	{r3, r4, r5, pc}
 800eb32:	bf00      	nop
 800eb34:	20001488 	.word	0x20001488

0800eb38 <_write_r>:
 800eb38:	b538      	push	{r3, r4, r5, lr}
 800eb3a:	4d07      	ldr	r5, [pc, #28]	; (800eb58 <_write_r+0x20>)
 800eb3c:	4604      	mov	r4, r0
 800eb3e:	4608      	mov	r0, r1
 800eb40:	4611      	mov	r1, r2
 800eb42:	2200      	movs	r2, #0
 800eb44:	602a      	str	r2, [r5, #0]
 800eb46:	461a      	mov	r2, r3
 800eb48:	f000 fd0c 	bl	800f564 <_write>
 800eb4c:	1c43      	adds	r3, r0, #1
 800eb4e:	d102      	bne.n	800eb56 <_write_r+0x1e>
 800eb50:	682b      	ldr	r3, [r5, #0]
 800eb52:	b103      	cbz	r3, 800eb56 <_write_r+0x1e>
 800eb54:	6023      	str	r3, [r4, #0]
 800eb56:	bd38      	pop	{r3, r4, r5, pc}
 800eb58:	20001488 	.word	0x20001488

0800eb5c <_close_r>:
 800eb5c:	b538      	push	{r3, r4, r5, lr}
 800eb5e:	4d06      	ldr	r5, [pc, #24]	; (800eb78 <_close_r+0x1c>)
 800eb60:	2300      	movs	r3, #0
 800eb62:	4604      	mov	r4, r0
 800eb64:	4608      	mov	r0, r1
 800eb66:	602b      	str	r3, [r5, #0]
 800eb68:	f000 fd02 	bl	800f570 <_close>
 800eb6c:	1c43      	adds	r3, r0, #1
 800eb6e:	d102      	bne.n	800eb76 <_close_r+0x1a>
 800eb70:	682b      	ldr	r3, [r5, #0]
 800eb72:	b103      	cbz	r3, 800eb76 <_close_r+0x1a>
 800eb74:	6023      	str	r3, [r4, #0]
 800eb76:	bd38      	pop	{r3, r4, r5, pc}
 800eb78:	20001488 	.word	0x20001488

0800eb7c <_fstat_r>:
 800eb7c:	b538      	push	{r3, r4, r5, lr}
 800eb7e:	4d07      	ldr	r5, [pc, #28]	; (800eb9c <_fstat_r+0x20>)
 800eb80:	2300      	movs	r3, #0
 800eb82:	4604      	mov	r4, r0
 800eb84:	4608      	mov	r0, r1
 800eb86:	4611      	mov	r1, r2
 800eb88:	602b      	str	r3, [r5, #0]
 800eb8a:	f000 fcff 	bl	800f58c <_fstat>
 800eb8e:	1c43      	adds	r3, r0, #1
 800eb90:	d102      	bne.n	800eb98 <_fstat_r+0x1c>
 800eb92:	682b      	ldr	r3, [r5, #0]
 800eb94:	b103      	cbz	r3, 800eb98 <_fstat_r+0x1c>
 800eb96:	6023      	str	r3, [r4, #0]
 800eb98:	bd38      	pop	{r3, r4, r5, pc}
 800eb9a:	bf00      	nop
 800eb9c:	20001488 	.word	0x20001488

0800eba0 <_isatty_r>:
 800eba0:	b538      	push	{r3, r4, r5, lr}
 800eba2:	4d06      	ldr	r5, [pc, #24]	; (800ebbc <_isatty_r+0x1c>)
 800eba4:	2300      	movs	r3, #0
 800eba6:	4604      	mov	r4, r0
 800eba8:	4608      	mov	r0, r1
 800ebaa:	602b      	str	r3, [r5, #0]
 800ebac:	f000 fce5 	bl	800f57a <_isatty>
 800ebb0:	1c43      	adds	r3, r0, #1
 800ebb2:	d102      	bne.n	800ebba <_isatty_r+0x1a>
 800ebb4:	682b      	ldr	r3, [r5, #0]
 800ebb6:	b103      	cbz	r3, 800ebba <_isatty_r+0x1a>
 800ebb8:	6023      	str	r3, [r4, #0]
 800ebba:	bd38      	pop	{r3, r4, r5, pc}
 800ebbc:	20001488 	.word	0x20001488

0800ebc0 <_lseek_r>:
 800ebc0:	b538      	push	{r3, r4, r5, lr}
 800ebc2:	4d07      	ldr	r5, [pc, #28]	; (800ebe0 <_lseek_r+0x20>)
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	4608      	mov	r0, r1
 800ebc8:	4611      	mov	r1, r2
 800ebca:	2200      	movs	r2, #0
 800ebcc:	602a      	str	r2, [r5, #0]
 800ebce:	461a      	mov	r2, r3
 800ebd0:	f000 fcd1 	bl	800f576 <_lseek>
 800ebd4:	1c43      	adds	r3, r0, #1
 800ebd6:	d102      	bne.n	800ebde <_lseek_r+0x1e>
 800ebd8:	682b      	ldr	r3, [r5, #0]
 800ebda:	b103      	cbz	r3, 800ebde <_lseek_r+0x1e>
 800ebdc:	6023      	str	r3, [r4, #0]
 800ebde:	bd38      	pop	{r3, r4, r5, pc}
 800ebe0:	20001488 	.word	0x20001488

0800ebe4 <_read_r>:
 800ebe4:	b538      	push	{r3, r4, r5, lr}
 800ebe6:	4d07      	ldr	r5, [pc, #28]	; (800ec04 <_read_r+0x20>)
 800ebe8:	4604      	mov	r4, r0
 800ebea:	4608      	mov	r0, r1
 800ebec:	4611      	mov	r1, r2
 800ebee:	2200      	movs	r2, #0
 800ebf0:	602a      	str	r2, [r5, #0]
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	f000 fcb0 	bl	800f558 <_read>
 800ebf8:	1c43      	adds	r3, r0, #1
 800ebfa:	d102      	bne.n	800ec02 <_read_r+0x1e>
 800ebfc:	682b      	ldr	r3, [r5, #0]
 800ebfe:	b103      	cbz	r3, 800ec02 <_read_r+0x1e>
 800ec00:	6023      	str	r3, [r4, #0]
 800ec02:	bd38      	pop	{r3, r4, r5, pc}
 800ec04:	20001488 	.word	0x20001488

0800ec08 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800ec08:	4770      	bx	lr

0800ec0a <lora_rx_error_timeout_cb>:
}
 800ec0a:	4770      	bx	lr

0800ec0c <z_log_msg2_runtime_create>:
{
 800ec0c:	b510      	push	{r4, lr}
 800ec0e:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800ec10:	ac0a      	add	r4, sp, #40	; 0x28
 800ec12:	9405      	str	r4, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
 800ec14:	9402      	str	r4, [sp, #8]
 800ec16:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ec18:	9401      	str	r4, [sp, #4]
 800ec1a:	9c08      	ldr	r4, [sp, #32]
 800ec1c:	9400      	str	r4, [sp, #0]
 800ec1e:	f000 fbc0 	bl	800f3a2 <z_impl_z_log_msg2_runtime_vcreate>
}
 800ec22:	b006      	add	sp, #24
 800ec24:	bd10      	pop	{r4, pc}

0800ec26 <cbprintf_via_va_list>:
{
 800ec26:	b510      	push	{r4, lr}
 800ec28:	460c      	mov	r4, r1
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
 800ec2e:	9b02      	ldr	r3, [sp, #8]
 800ec30:	47a0      	blx	r4
}
 800ec32:	bd10      	pop	{r4, pc}

0800ec34 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
 800ec34:	b343      	cbz	r3, 800ec88 <cbpprintf_external+0x54>
{
 800ec36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	4607      	mov	r7, r0
 800ec3e:	4688      	mov	r8, r1
 800ec40:	4691      	mov	r9, r2
 800ec42:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
 800ec44:	781b      	ldrb	r3, [r3, #0]
	s_nbr     = buf[1];
 800ec46:	786e      	ldrb	r6, [r5, #1]
	ros_nbr   = buf[2];
 800ec48:	78ac      	ldrb	r4, [r5, #2]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
 800ec4a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800ec4e:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
 800ec50:	f04f 0a00 	mov.w	sl, #0
 800ec54:	e00a      	b.n	800ec6c <cbpprintf_external+0x38>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
 800ec56:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
 800ec5a:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f7f2 f8f9 	bl	8000e56 <strlen>
 800ec64:	3001      	adds	r0, #1
 800ec66:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 800ec68:	f10a 0a01 	add.w	sl, sl, #1
 800ec6c:	45b2      	cmp	sl, r6
 800ec6e:	d3f2      	bcc.n	800ec56 <cbpprintf_external+0x22>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
 800ec70:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	686b      	ldr	r3, [r5, #4]
 800ec78:	464a      	mov	r2, r9
 800ec7a:	4641      	mov	r1, r8
 800ec7c:	4638      	mov	r0, r7
 800ec7e:	f7ff ffd2 	bl	800ec26 <cbprintf_via_va_list>
}
 800ec82:	b002      	add	sp, #8
 800ec84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
 800ec88:	f06f 0015 	mvn.w	r0, #21
}
 800ec8c:	4770      	bx	lr

0800ec8e <arch_printk_char_out>:
}
 800ec8e:	2000      	movs	r0, #0
 800ec90:	4770      	bx	lr

0800ec92 <str_out>:
{
 800ec92:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800ec94:	680c      	ldr	r4, [r1, #0]
 800ec96:	b154      	cbz	r4, 800ecae <str_out+0x1c>
 800ec98:	688a      	ldr	r2, [r1, #8]
 800ec9a:	684b      	ldr	r3, [r1, #4]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	da06      	bge.n	800ecae <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 800eca0:	3b01      	subs	r3, #1
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d008      	beq.n	800ecb8 <str_out+0x26>
		ctx->str[ctx->count++] = c;
 800eca6:	1c53      	adds	r3, r2, #1
 800eca8:	608b      	str	r3, [r1, #8]
 800ecaa:	54a0      	strb	r0, [r4, r2]
 800ecac:	e002      	b.n	800ecb4 <str_out+0x22>
		ctx->count++;
 800ecae:	688b      	ldr	r3, [r1, #8]
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	608b      	str	r3, [r1, #8]
}
 800ecb4:	bc10      	pop	{r4}
 800ecb6:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 800ecb8:	1c53      	adds	r3, r2, #1
 800ecba:	608b      	str	r3, [r1, #8]
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	54a3      	strb	r3, [r4, r2]
 800ecc0:	e7f8      	b.n	800ecb4 <str_out+0x22>

0800ecc2 <printk>:
{
 800ecc2:	b40f      	push	{r0, r1, r2, r3}
 800ecc4:	b500      	push	{lr}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	a904      	add	r1, sp, #16
 800ecca:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800ecce:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 800ecd0:	f7f4 f9be 	bl	8003050 <vprintk>
}
 800ecd4:	b003      	add	sp, #12
 800ecd6:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecda:	b004      	add	sp, #16
 800ecdc:	4770      	bx	lr

0800ecde <snprintk>:
{
 800ecde:	b40c      	push	{r2, r3}
 800ece0:	b500      	push	{lr}
 800ece2:	b083      	sub	sp, #12
 800ece4:	ab04      	add	r3, sp, #16
 800ece6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 800ecea:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800ecec:	f7f4 f9c0 	bl	8003070 <vsnprintk>
}
 800ecf0:	b003      	add	sp, #12
 800ecf2:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecf6:	b002      	add	sp, #8
 800ecf8:	4770      	bx	lr

0800ecfa <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800ecfa:	b508      	push	{r3, lr}
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	4608      	mov	r0, r1
 800ed00:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800ed02:	461a      	mov	r2, r3
 800ed04:	47a0      	blx	r4
	return z_impl_z_current_get();
 800ed06:	f7fd fc93 	bl	800c630 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800ed0a:	f7f6 fbb3 	bl	8005474 <z_impl_k_thread_abort>

0800ed0e <outs>:
{
 800ed0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed12:	4607      	mov	r7, r0
 800ed14:	460e      	mov	r6, r1
 800ed16:	4614      	mov	r4, r2
 800ed18:	4698      	mov	r8, r3
	size_t count = 0;
 800ed1a:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800ed1c:	e006      	b.n	800ed2c <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 800ed1e:	4631      	mov	r1, r6
 800ed20:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ed24:	47b8      	blx	r7
		if (rc < 0) {
 800ed26:	2800      	cmp	r0, #0
 800ed28:	db09      	blt.n	800ed3e <outs+0x30>
		++count;
 800ed2a:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800ed2c:	4544      	cmp	r4, r8
 800ed2e:	d3f6      	bcc.n	800ed1e <outs+0x10>
 800ed30:	f1b8 0f00 	cmp.w	r8, #0
 800ed34:	d102      	bne.n	800ed3c <outs+0x2e>
 800ed36:	7823      	ldrb	r3, [r4, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1f0      	bne.n	800ed1e <outs+0x10>
	return (int)count;
 800ed3c:	4628      	mov	r0, r5
}
 800ed3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed42 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 800ed42:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
 800ed44:	2300      	movs	r3, #0
 800ed46:	f36f 0300 	bfc	r3, #0, #1
 800ed4a:	f043 0302 	orr.w	r3, r3, #2
 800ed4e:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 800ed52:	6a02      	ldr	r2, [r0, #32]
 800ed54:	6804      	ldr	r4, [r0, #0]
 800ed56:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800ed5a:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
 800ed5c:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800ed5e:	6902      	ldr	r2, [r0, #16]
 800ed60:	f012 0201 	ands.w	r2, r2, #1
 800ed64:	d104      	bne.n	800ed70 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
 800ed66:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ed68:	42a3      	cmp	r3, r4
 800ed6a:	d304      	bcc.n	800ed76 <add_skip_item+0x34>
 800ed6c:	1b1b      	subs	r3, r3, r4
 800ed6e:	e002      	b.n	800ed76 <add_skip_item+0x34>
		return i & (buffer->size - 1);
 800ed70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ed72:	3c01      	subs	r4, #1
 800ed74:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800ed76:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800ed78:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
 800ed7a:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800ed7c:	b922      	cbnz	r2, 800ed88 <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
 800ed7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ed80:	4299      	cmp	r1, r3
 800ed82:	d304      	bcc.n	800ed8e <add_skip_item+0x4c>
 800ed84:	1ac9      	subs	r1, r1, r3
 800ed86:	e002      	b.n	800ed8e <add_skip_item+0x4c>
		return i & (buffer->size - 1);
 800ed88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ed8a:	3b01      	subs	r3, #1
 800ed8c:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800ed8e:	6041      	str	r1, [r0, #4]
}
 800ed90:	bc10      	pop	{r4}
 800ed92:	4770      	bx	lr

0800ed94 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
 800ed94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed98:	b083      	sub	sp, #12
 800ed9a:	4604      	mov	r4, r0
 800ed9c:	9101      	str	r1, [sp, #4]
 800ed9e:	4615      	mov	r5, r2
 800eda0:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
 800eda2:	2300      	movs	r3, #0
 800eda4:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 800eda6:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800edaa:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800edae:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800edb2:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
 800edb6:	f003 0303 	and.w	r3, r3, #3
 800edba:	2b02      	cmp	r3, #2
 800edbc:	d012      	beq.n	800ede4 <drop_item_locked+0x50>
	return 0;
 800edbe:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 800edc2:	69e3      	ldr	r3, [r4, #28]
 800edc4:	4650      	mov	r0, sl
 800edc6:	4798      	blx	r3
 800edc8:	4607      	mov	r7, r0
	if (skip_wlen) {
 800edca:	f1bb 0f00 	cmp.w	fp, #0
 800edce:	d151      	bne.n	800ee74 <drop_item_locked+0xe0>
		allow_drop = true;
	} else if (allow_drop) {
 800edd0:	2d00      	cmp	r5, #0
 800edd2:	d05c      	beq.n	800ee8e <drop_item_locked+0xfa>
		if (item->hdr.busy) {
 800edd4:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
 800edd8:	f013 0f02 	tst.w	r3, #2
 800eddc:	d109      	bne.n	800edf2 <drop_item_locked+0x5e>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
 800edde:	2301      	movs	r3, #1
 800ede0:	7033      	strb	r3, [r6, #0]
 800ede2:	e048      	b.n	800ee76 <drop_item_locked+0xe2>
		return item->skip.len;
 800ede4:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 800ede8:	ea5f 0b93 	movs.w	fp, r3, lsr #2
 800edec:	d0e9      	beq.n	800edc2 <drop_item_locked+0x2e>
		return item->skip.len;
 800edee:	465f      	mov	r7, fp
 800edf0:	e7eb      	b.n	800edca <drop_item_locked+0x36>
			add_skip_item(buffer, free_wlen + 1);
 800edf2:	9901      	ldr	r1, [sp, #4]
 800edf4:	3101      	adds	r1, #1
 800edf6:	4620      	mov	r0, r4
 800edf8:	f7ff ffa3 	bl	800ed42 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800edfc:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
 800edfe:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800ee00:	6922      	ldr	r2, [r4, #16]
 800ee02:	f012 0201 	ands.w	r2, r2, #1
 800ee06:	d104      	bne.n	800ee12 <drop_item_locked+0x7e>
	return (i >= buffer->size) ? i - buffer->size : i;
 800ee08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ee0a:	428b      	cmp	r3, r1
 800ee0c:	d304      	bcc.n	800ee18 <drop_item_locked+0x84>
 800ee0e:	1a5b      	subs	r3, r3, r1
 800ee10:	e002      	b.n	800ee18 <drop_item_locked+0x84>
		return i & (buffer->size - 1);
 800ee12:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ee14:	3901      	subs	r1, #1
 800ee16:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800ee18:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800ee1a:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
 800ee1c:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800ee1e:	b922      	cbnz	r2, 800ee2a <drop_item_locked+0x96>
	return (i >= buffer->size) ? i - buffer->size : i;
 800ee20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ee22:	428b      	cmp	r3, r1
 800ee24:	d304      	bcc.n	800ee30 <drop_item_locked+0x9c>
 800ee26:	1a5b      	subs	r3, r3, r1
 800ee28:	e002      	b.n	800ee30 <drop_item_locked+0x9c>
		return i & (buffer->size - 1);
 800ee2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ee2c:	3901      	subs	r1, #1
 800ee2e:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800ee30:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800ee32:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800ee34:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800ee36:	b922      	cbnz	r2, 800ee42 <drop_item_locked+0xae>
	return (i >= buffer->size) ? i - buffer->size : i;
 800ee38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d304      	bcc.n	800ee48 <drop_item_locked+0xb4>
 800ee3e:	1a9b      	subs	r3, r3, r2
 800ee40:	e002      	b.n	800ee48 <drop_item_locked+0xb4>
		return i & (buffer->size - 1);
 800ee42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ee44:	3a01      	subs	r2, #1
 800ee46:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 800ee48:	6a21      	ldr	r1, [r4, #32]
 800ee4a:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800ee4e:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
 800ee52:	f002 0203 	and.w	r2, r2, #3
 800ee56:	2a02      	cmp	r2, #2
 800ee58:	d006      	beq.n	800ee68 <drop_item_locked+0xd4>
				rd_wlen += buffer->get_wlen(item);
 800ee5a:	69e3      	ldr	r3, [r4, #28]
 800ee5c:	4650      	mov	r0, sl
 800ee5e:	4798      	blx	r3
 800ee60:	4407      	add	r7, r0
				*user_packet = true;
 800ee62:	2301      	movs	r3, #1
 800ee64:	7033      	strb	r3, [r6, #0]
 800ee66:	e006      	b.n	800ee76 <drop_item_locked+0xe2>
		return item->skip.len;
 800ee68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
 800ee6c:	089b      	lsrs	r3, r3, #2
 800ee6e:	d0f4      	beq.n	800ee5a <drop_item_locked+0xc6>
				rd_wlen += skip_wlen;
 800ee70:	441f      	add	r7, r3
 800ee72:	e000      	b.n	800ee76 <drop_item_locked+0xe2>
		allow_drop = true;
 800ee74:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
 800ee76:	b195      	cbz	r5, 800ee9e <drop_item_locked+0x10a>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800ee78:	68e0      	ldr	r0, [r4, #12]
	uint32_t i = idx + val;
 800ee7a:	4407      	add	r7, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800ee7c:	6923      	ldr	r3, [r4, #16]
 800ee7e:	f013 0f01 	tst.w	r3, #1
 800ee82:	d107      	bne.n	800ee94 <drop_item_locked+0x100>
	return (i >= buffer->size) ? i - buffer->size : i;
 800ee84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee86:	429f      	cmp	r7, r3
 800ee88:	d307      	bcc.n	800ee9a <drop_item_locked+0x106>
 800ee8a:	1aff      	subs	r7, r7, r3
 800ee8c:	e005      	b.n	800ee9a <drop_item_locked+0x106>
		item = NULL;
 800ee8e:	f04f 0a00 	mov.w	sl, #0
 800ee92:	e7f0      	b.n	800ee76 <drop_item_locked+0xe2>
		return i & (buffer->size - 1);
 800ee94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee96:	3b01      	subs	r3, #1
 800ee98:	401f      	ands	r7, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800ee9a:	60e7      	str	r7, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
 800ee9c:	60a7      	str	r7, [r4, #8]
	}

	return item;
}
 800ee9e:	4650      	mov	r0, sl
 800eea0:	b003      	add	sp, #12
 800eea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eea6 <mpsc_pbuf_init>:
{
 800eea6:	b538      	push	{r3, r4, r5, lr}
 800eea8:	4604      	mov	r4, r0
 800eeaa:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
 800eeac:	2220      	movs	r2, #32
 800eeae:	2100      	movs	r1, #0
 800eeb0:	f002 fa03 	bl	80112ba <memset>
	buffer->get_wlen = cfg->get_wlen;
 800eeb4:	68eb      	ldr	r3, [r5, #12]
 800eeb6:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
 800eeb8:	68ab      	ldr	r3, [r5, #8]
 800eeba:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
 800eebc:	682b      	ldr	r3, [r5, #0]
 800eebe:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
 800eec0:	686b      	ldr	r3, [r5, #4]
 800eec2:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
 800eec4:	692a      	ldr	r2, [r5, #16]
 800eec6:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 800eec8:	b123      	cbz	r3, 800eed4 <mpsc_pbuf_init+0x2e>
 800eeca:	1e59      	subs	r1, r3, #1
 800eecc:	420b      	tst	r3, r1
 800eece:	d00d      	beq.n	800eeec <mpsc_pbuf_init+0x46>
 800eed0:	2300      	movs	r3, #0
 800eed2:	e000      	b.n	800eed6 <mpsc_pbuf_init+0x30>
 800eed4:	2300      	movs	r3, #0
	if (is_power_of_two(buffer->size)) {
 800eed6:	b113      	cbz	r3, 800eede <mpsc_pbuf_init+0x38>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 800eed8:	f042 0201 	orr.w	r2, r2, #1
 800eedc:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
 800eede:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
 800eee2:	2201      	movs	r2, #1
 800eee4:	2100      	movs	r1, #0
 800eee6:	f001 fe3b 	bl	8010b60 <z_impl_k_sem_init>
}
 800eeea:	bd38      	pop	{r3, r4, r5, pc}
 800eeec:	2301      	movs	r3, #1
 800eeee:	e7f2      	b.n	800eed6 <mpsc_pbuf_init+0x30>

0800eef0 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 800eef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef4:	b085      	sub	sp, #20
 800eef6:	9200      	str	r2, [sp, #0]
 800eef8:	9301      	str	r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 800eefa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eefc:	3b01      	subs	r3, #1
 800eefe:	428b      	cmp	r3, r1
 800ef00:	f0c0 8087 	bcc.w	800f012 <mpsc_pbuf_alloc+0x122>
 800ef04:	4605      	mov	r5, r0
 800ef06:	4689      	mov	r9, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
 800ef08:	f04f 0a00 	mov.w	sl, #0
	union mpsc_pbuf_generic *item = NULL;
 800ef0c:	46d3      	mov	fp, sl
 800ef0e:	e020      	b.n	800ef52 <mpsc_pbuf_alloc+0x62>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 800ef10:	1b1c      	subs	r4, r3, r4
 800ef12:	3c01      	subs	r4, #1
		return false;
 800ef14:	2600      	movs	r6, #0
 800ef16:	e02e      	b.n	800ef76 <mpsc_pbuf_alloc+0x86>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 800ef18:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ef1a:	1b1c      	subs	r4, r3, r4
 800ef1c:	3c01      	subs	r4, #1
		return false;
 800ef1e:	2600      	movs	r6, #0
 800ef20:	e029      	b.n	800ef76 <mpsc_pbuf_alloc+0x86>
		return i & (buffer->size - 1);
 800ef22:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ef24:	3a01      	subs	r2, #1
 800ef26:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
 800ef28:	602b      	str	r3, [r5, #0]
		cont = false;
 800ef2a:	2600      	movs	r6, #0
 800ef2c:	f387 8811 	msr	BASEPRI, r7
 800ef30:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
 800ef34:	b15e      	cbz	r6, 800ef4e <mpsc_pbuf_alloc+0x5e>
 800ef36:	f1ba 0f00 	cmp.w	sl, #0
 800ef3a:	d008      	beq.n	800ef4e <mpsc_pbuf_alloc+0x5e>
 800ef3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800ef40:	b12b      	cbz	r3, 800ef4e <mpsc_pbuf_alloc+0x5e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
 800ef42:	69ab      	ldr	r3, [r5, #24]
 800ef44:	4651      	mov	r1, sl
 800ef46:	4628      	mov	r0, r5
 800ef48:	4798      	blx	r3
			dropped_item = NULL;
 800ef4a:	f04f 0a00 	mov.w	sl, #0
		}
	} while (cont);
 800ef4e:	2e00      	cmp	r6, #0
 800ef50:	d061      	beq.n	800f016 <mpsc_pbuf_alloc+0x126>
	__asm__ volatile(
 800ef52:	f04f 0310 	mov.w	r3, #16
 800ef56:	f3ef 8811 	mrs	r8, BASEPRI
 800ef5a:	f383 8812 	msr	BASEPRI_MAX, r3
 800ef5e:	f3bf 8f6f 	isb	sy
 800ef62:	4647      	mov	r7, r8
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 800ef64:	68eb      	ldr	r3, [r5, #12]
 800ef66:	682c      	ldr	r4, [r5, #0]
 800ef68:	42a3      	cmp	r3, r4
 800ef6a:	d8d1      	bhi.n	800ef10 <mpsc_pbuf_alloc+0x20>
	} else if (!buffer->rd_idx) {
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d0d3      	beq.n	800ef18 <mpsc_pbuf_alloc+0x28>
	*res = buffer->size - buffer->tmp_wr_idx;
 800ef70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ef72:	1b1c      	subs	r4, r3, r4
	return true;
 800ef74:	2601      	movs	r6, #1
		if (free_wlen >= wlen) {
 800ef76:	45a1      	cmp	r9, r4
 800ef78:	d819      	bhi.n	800efae <mpsc_pbuf_alloc+0xbe>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 800ef7a:	6a2b      	ldr	r3, [r5, #32]
 800ef7c:	682a      	ldr	r2, [r5, #0]
			item =
 800ef7e:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
 800ef82:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800ef86:	f36f 0100 	bfc	r1, #0, #1
 800ef8a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
 800ef8e:	b2c9      	uxtb	r1, r1
 800ef90:	f36f 0141 	bfc	r1, #1, #1
 800ef94:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
 800ef98:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
 800ef9a:	444b      	add	r3, r9
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800ef9c:	692a      	ldr	r2, [r5, #16]
 800ef9e:	f012 0f01 	tst.w	r2, #1
 800efa2:	d1be      	bne.n	800ef22 <mpsc_pbuf_alloc+0x32>
	return (i >= buffer->size) ? i - buffer->size : i;
 800efa4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d3be      	bcc.n	800ef28 <mpsc_pbuf_alloc+0x38>
 800efaa:	1a9b      	subs	r3, r3, r2
 800efac:	e7bc      	b.n	800ef28 <mpsc_pbuf_alloc+0x38>
		} else if (wrap) {
 800efae:	b9ae      	cbnz	r6, 800efdc <mpsc_pbuf_alloc+0xec>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800efb0:	9b01      	ldr	r3, [sp, #4]
 800efb2:	9a00      	ldr	r2, [sp, #0]
 800efb4:	4313      	orrs	r3, r2
 800efb6:	d003      	beq.n	800efc0 <mpsc_pbuf_alloc+0xd0>
			   !k_is_in_isr()) {
 800efb8:	f001 fd6d 	bl	8010a96 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800efbc:	4606      	mov	r6, r0
 800efbe:	b190      	cbz	r0, 800efe6 <mpsc_pbuf_alloc+0xf6>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 800efc0:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 800efc2:	f10d 030f 	add.w	r3, sp, #15
 800efc6:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800efca:	4621      	mov	r1, r4
 800efcc:	4628      	mov	r0, r5
 800efce:	f7ff fee1 	bl	800ed94 <drop_item_locked>
			cont = dropped_item != NULL;
 800efd2:	4682      	mov	sl, r0
 800efd4:	1e06      	subs	r6, r0, #0
 800efd6:	bf18      	it	ne
 800efd8:	2601      	movne	r6, #1
 800efda:	e7a7      	b.n	800ef2c <mpsc_pbuf_alloc+0x3c>
			add_skip_item(buffer, free_wlen);
 800efdc:	4621      	mov	r1, r4
 800efde:	4628      	mov	r0, r5
 800efe0:	f7ff feaf 	bl	800ed42 <add_skip_item>
			cont = true;
 800efe4:	e7a2      	b.n	800ef2c <mpsc_pbuf_alloc+0x3c>
	__asm__ volatile(
 800efe6:	f388 8811 	msr	BASEPRI, r8
 800efea:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
 800efee:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
 800eff2:	9a00      	ldr	r2, [sp, #0]
 800eff4:	9b01      	ldr	r3, [sp, #4]
 800eff6:	f7fc fdc9 	bl	800bb8c <z_impl_k_sem_take>
	__asm__ volatile(
 800effa:	f04f 0310 	mov.w	r3, #16
 800effe:	f3ef 8711 	mrs	r7, BASEPRI
 800f002:	f383 8812 	msr	BASEPRI_MAX, r3
 800f006:	f3bf 8f6f 	isb	sy
			if (err == 0) {
 800f00a:	2800      	cmp	r0, #0
 800f00c:	d18e      	bne.n	800ef2c <mpsc_pbuf_alloc+0x3c>
				cont = true;
 800f00e:	2601      	movs	r6, #1
 800f010:	e78c      	b.n	800ef2c <mpsc_pbuf_alloc+0x3c>
		return NULL;
 800f012:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 800f016:	4658      	mov	r0, fp
 800f018:	b005      	add	sp, #20
 800f01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f01e <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 800f01e:	b538      	push	{r3, r4, r5, lr}
 800f020:	4604      	mov	r4, r0
 800f022:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 800f024:	69c3      	ldr	r3, [r0, #28]
 800f026:	4608      	mov	r0, r1
 800f028:	4798      	blx	r3
 800f02a:	f04f 0310 	mov.w	r3, #16
 800f02e:	f3ef 8211 	mrs	r2, BASEPRI
 800f032:	f383 8812 	msr	BASEPRI_MAX, r3
 800f036:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 800f03a:	782b      	ldrb	r3, [r5, #0]
 800f03c:	f043 0301 	orr.w	r3, r3, #1
 800f040:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800f042:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
 800f044:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f046:	6923      	ldr	r3, [r4, #16]
 800f048:	f013 0f01 	tst.w	r3, #1
 800f04c:	d104      	bne.n	800f058 <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f04e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f050:	4298      	cmp	r0, r3
 800f052:	d304      	bcc.n	800f05e <mpsc_pbuf_commit+0x40>
 800f054:	1ac0      	subs	r0, r0, r3
 800f056:	e002      	b.n	800f05e <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
 800f058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f05a:	3b01      	subs	r3, #1
 800f05c:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800f05e:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
 800f060:	f382 8811 	msr	BASEPRI, r2
 800f064:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 800f068:	bd38      	pop	{r3, r4, r5, pc}

0800f06a <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 800f06a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f06c:	4604      	mov	r4, r0
 800f06e:	e039      	b.n	800f0e4 <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 800f070:	1a9b      	subs	r3, r3, r2
		return false;
 800f072:	e045      	b.n	800f100 <mpsc_pbuf_claim+0x96>
		return item->skip.len;
 800f074:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
 800f078:	0880      	lsrs	r0, r0, #2
 800f07a:	d153      	bne.n	800f124 <mpsc_pbuf_claim+0xba>
 800f07c:	e04d      	b.n	800f11a <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
 800f07e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f080:	3901      	subs	r1, #1
 800f082:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
 800f084:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
 800f086:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800f088:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f08a:	b922      	cbnz	r2, 800f096 <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f08c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f08e:	4298      	cmp	r0, r3
 800f090:	d304      	bcc.n	800f09c <mpsc_pbuf_claim+0x32>
 800f092:	1ac0      	subs	r0, r0, r3
 800f094:	e002      	b.n	800f09c <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
 800f096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f098:	3b01      	subs	r3, #1
 800f09a:	4018      	ands	r0, r3
				buffer->rd_idx =
 800f09c:	60e0      	str	r0, [r4, #12]
				cont = true;
 800f09e:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
 800f0a0:	e01b      	b.n	800f0da <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
 800f0a2:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 800f0a6:	f043 0302 	orr.w	r3, r3, #2
 800f0aa:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
 800f0ae:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
 800f0b0:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	4798      	blx	r3
	uint32_t i = idx + val;
 800f0b6:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f0b8:	6923      	ldr	r3, [r4, #16]
 800f0ba:	f013 0f01 	tst.w	r3, #1
 800f0be:	d104      	bne.n	800f0ca <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f0c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0c2:	4298      	cmp	r0, r3
 800f0c4:	d304      	bcc.n	800f0d0 <mpsc_pbuf_claim+0x66>
 800f0c6:	1ac0      	subs	r0, r0, r3
 800f0c8:	e002      	b.n	800f0d0 <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
 800f0ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0cc:	3b01      	subs	r3, #1
 800f0ce:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
 800f0d0:	60a0      	str	r0, [r4, #8]
		cont = false;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	e001      	b.n	800f0da <mpsc_pbuf_claim+0x70>
 800f0d6:	2300      	movs	r3, #0
			item = NULL;
 800f0d8:	461e      	mov	r6, r3
 800f0da:	f385 8811 	msr	BASEPRI, r5
 800f0de:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
 800f0e2:	b38b      	cbz	r3, 800f148 <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
 800f0e4:	f04f 0310 	mov.w	r3, #16
 800f0e8:	f3ef 8511 	mrs	r5, BASEPRI
 800f0ec:	f383 8812 	msr	BASEPRI_MAX, r3
 800f0f0:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 800f0f4:	68a2      	ldr	r2, [r4, #8]
 800f0f6:	6863      	ldr	r3, [r4, #4]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d9b9      	bls.n	800f070 <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
 800f0fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0fe:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
 800f100:	6a21      	ldr	r1, [r4, #32]
		item = (union mpsc_pbuf_generic *)
 800f102:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
 800f106:	2b00      	cmp	r3, #0
 800f108:	d0e5      	beq.n	800f0d6 <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
 800f10a:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
 800f10e:	f013 0303 	ands.w	r3, r3, #3
 800f112:	d016      	beq.n	800f142 <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
 800f114:	2b02      	cmp	r3, #2
 800f116:	d0ad      	beq.n	800f074 <mpsc_pbuf_claim+0xa>
	return 0;
 800f118:	2000      	movs	r0, #0
	return item->hdr.valid;
 800f11a:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
 800f11e:	f013 0f01 	tst.w	r3, #1
 800f122:	d1be      	bne.n	800f0a2 <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
 800f124:	b910      	cbnz	r0, 800f12c <mpsc_pbuf_claim+0xc2>
 800f126:	69e3      	ldr	r3, [r4, #28]
 800f128:	4630      	mov	r0, r6
 800f12a:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 800f12c:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
 800f12e:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f130:	6922      	ldr	r2, [r4, #16]
 800f132:	f012 0201 	ands.w	r2, r2, #1
 800f136:	d1a2      	bne.n	800f07e <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f138:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f13a:	428b      	cmp	r3, r1
 800f13c:	d3a2      	bcc.n	800f084 <mpsc_pbuf_claim+0x1a>
 800f13e:	1a5b      	subs	r3, r3, r1
 800f140:	e7a0      	b.n	800f084 <mpsc_pbuf_claim+0x1a>
		cont = false;
 800f142:	2300      	movs	r3, #0
			item = NULL;
 800f144:	461e      	mov	r6, r3
 800f146:	e7c8      	b.n	800f0da <mpsc_pbuf_claim+0x70>

	return item;
}
 800f148:	4630      	mov	r0, r6
 800f14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f14c <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 800f14c:	b538      	push	{r3, r4, r5, lr}
 800f14e:	4604      	mov	r4, r0
 800f150:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 800f152:	69c3      	ldr	r3, [r0, #28]
 800f154:	4608      	mov	r0, r1
 800f156:	4798      	blx	r3
 800f158:	f04f 0310 	mov.w	r3, #16
 800f15c:	f3ef 8211 	mrs	r2, BASEPRI
 800f160:	f383 8812 	msr	BASEPRI_MAX, r3
 800f164:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 800f168:	782b      	ldrb	r3, [r5, #0]
 800f16a:	f36f 0300 	bfc	r3, #0, #1
 800f16e:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 800f170:	6923      	ldr	r3, [r4, #16]
 800f172:	f013 0f02 	tst.w	r3, #2
 800f176:	d00a      	beq.n	800f18e <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 800f178:	6a23      	ldr	r3, [r4, #32]
 800f17a:	68e1      	ldr	r1, [r4, #12]
 800f17c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 800f180:	42ab      	cmp	r3, r5
 800f182:	d004      	beq.n	800f18e <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
 800f184:	682b      	ldr	r3, [r5, #0]
 800f186:	f360 039f 	bfi	r3, r0, #2, #30
 800f18a:	602b      	str	r3, [r5, #0]
 800f18c:	e012      	b.n	800f1b4 <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
 800f18e:	782b      	ldrb	r3, [r5, #0]
 800f190:	f36f 0341 	bfc	r3, #1, #1
 800f194:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 800f196:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800f198:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f19a:	6923      	ldr	r3, [r4, #16]
 800f19c:	f013 0f01 	tst.w	r3, #1
 800f1a0:	d104      	bne.n	800f1ac <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1a4:	4298      	cmp	r0, r3
 800f1a6:	d304      	bcc.n	800f1b2 <mpsc_pbuf_free+0x66>
 800f1a8:	1ac0      	subs	r0, r0, r3
 800f1aa:	e002      	b.n	800f1b2 <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
 800f1ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1ae:	3b01      	subs	r3, #1
 800f1b0:	4018      	ands	r0, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 800f1b2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800f1b4:	f382 8811 	msr	BASEPRI, r2
 800f1b8:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
 800f1bc:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
 800f1c0:	f7fc fcbc 	bl	800bb3c <z_impl_k_sem_give>
}
 800f1c4:	bd38      	pop	{r3, r4, r5, pc}

0800f1c6 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 800f1c6:	6883      	ldr	r3, [r0, #8]
 800f1c8:	6842      	ldr	r2, [r0, #4]
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d905      	bls.n	800f1da <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
 800f1ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f1d0:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 800f1d2:	3800      	subs	r0, #0
 800f1d4:	bf18      	it	ne
 800f1d6:	2001      	movne	r0, #1
 800f1d8:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 800f1da:	1ad0      	subs	r0, r2, r3
		return false;
 800f1dc:	e7f9      	b.n	800f1d2 <mpsc_pbuf_is_pending+0xc>

0800f1de <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800f1de:	4770      	bx	lr

0800f1e0 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800f1e0:	2000      	movs	r0, #0
 800f1e2:	4770      	bx	lr

0800f1e4 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 800f1e4:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 800f1e6:	f013 0f04 	tst.w	r3, #4
 800f1ea:	d001      	beq.n	800f1f0 <log_msg2_generic_get_wlen+0xc>
	return 0;
 800f1ec:	2000      	movs	r0, #0
}
 800f1ee:	4770      	bx	lr
		return log_msg2_get_total_wlen(msg->hdr.desc);
 800f1f0:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 800f1f2:	f3c3 2049 	ubfx	r0, r3, #9, #10
 800f1f6:	f3c3 43cb 	ubfx	r3, r3, #19, #12
 800f1fa:	4418      	add	r0, r3
 800f1fc:	3013      	adds	r0, #19
 800f1fe:	f020 0007 	bic.w	r0, r0, #7
 800f202:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
 800f204:	4770      	bx	lr

0800f206 <dummy_timestamp>:
}
 800f206:	2000      	movs	r0, #0
 800f208:	4770      	bx	lr

0800f20a <msg_filter_check>:
}
 800f20a:	2001      	movs	r0, #1
 800f20c:	4770      	bx	lr

0800f20e <default_lf_get_timestamp>:
{
 800f20e:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800f210:	f001 ff96 	bl	8011140 <z_impl_k_uptime_ticks>
 800f214:	220a      	movs	r2, #10
 800f216:	2300      	movs	r3, #0
 800f218:	f7f1 fbe0 	bl	80009dc <__aeabi_uldivmod>
}
 800f21c:	bd08      	pop	{r3, pc}

0800f21e <notify_drop>:
{
 800f21e:	b508      	push	{r3, lr}
	z_log_dropped(true);
 800f220:	2001      	movs	r0, #1
 800f222:	f7f4 fce9 	bl	8003bf8 <z_log_dropped>
}
 800f226:	bd08      	pop	{r3, pc}

0800f228 <get_msg>:
{
 800f228:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
 800f22a:	f7f4 fd69 	bl	8003d00 <z_log_msg2_claim>
}
 800f22e:	bd08      	pop	{r3, pc}

0800f230 <next_pending>:
{
 800f230:	b508      	push	{r3, lr}
		return z_log_msg2_pending();
 800f232:	f7f4 fd9f 	bl	8003d74 <z_log_msg2_pending>
}
 800f236:	bd08      	pop	{r3, pc}

0800f238 <z_log_get_tag>:
}
 800f238:	2000      	movs	r0, #0
 800f23a:	4770      	bx	lr

0800f23c <buffer_write>:
{
 800f23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f23e:	4607      	mov	r7, r0
 800f240:	460d      	mov	r5, r1
 800f242:	4614      	mov	r4, r2
 800f244:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 800f246:	4632      	mov	r2, r6
 800f248:	4621      	mov	r1, r4
 800f24a:	4628      	mov	r0, r5
 800f24c:	47b8      	blx	r7
		buf += processed;
 800f24e:	4405      	add	r5, r0
	} while (len != 0);
 800f250:	1a24      	subs	r4, r4, r0
 800f252:	d1f8      	bne.n	800f246 <buffer_write+0xa>
}
 800f254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f256 <color_prefix>:
{
 800f256:	b508      	push	{r3, lr}
 800f258:	4613      	mov	r3, r2
	color_print(output, color, true, level);
 800f25a:	2201      	movs	r2, #1
 800f25c:	f7f4 fed2 	bl	8004004 <color_print>
}
 800f260:	bd08      	pop	{r3, pc}

0800f262 <color_postfix>:
{
 800f262:	b508      	push	{r3, lr}
 800f264:	4613      	mov	r3, r2
	color_print(output, color, false, level);
 800f266:	2200      	movs	r2, #0
 800f268:	f7f4 fecc 	bl	8004004 <color_print>
}
 800f26c:	bd08      	pop	{r3, pc}

0800f26e <postfix_print>:
{
 800f26e:	b538      	push	{r3, r4, r5, lr}
 800f270:	4605      	mov	r5, r0
 800f272:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
 800f274:	f001 0101 	and.w	r1, r1, #1
 800f278:	f7ff fff3 	bl	800f262 <color_postfix>
	newline_print(output, flags);
 800f27c:	4621      	mov	r1, r4
 800f27e:	4628      	mov	r0, r5
 800f280:	f7f4 fed6 	bl	8004030 <newline_print>
}
 800f284:	bd38      	pop	{r3, r4, r5, pc}

0800f286 <log_msg2_hexdump>:
{
 800f286:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f28a:	b083      	sub	sp, #12
 800f28c:	4680      	mov	r8, r0
 800f28e:	460e      	mov	r6, r1
 800f290:	4615      	mov	r5, r2
 800f292:	461f      	mov	r7, r3
 800f294:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 800f298:	462c      	mov	r4, r5
 800f29a:	2d10      	cmp	r5, #16
 800f29c:	bf28      	it	cs
 800f29e:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
 800f2a0:	f8cd 9000 	str.w	r9, [sp]
 800f2a4:	463b      	mov	r3, r7
 800f2a6:	4622      	mov	r2, r4
 800f2a8:	4631      	mov	r1, r6
 800f2aa:	4640      	mov	r0, r8
 800f2ac:	f7f4 fed4 	bl	8004058 <hexdump_line_print>
		data += length;
 800f2b0:	4426      	add	r6, r4
	} while (len);
 800f2b2:	1b2d      	subs	r5, r5, r4
 800f2b4:	d1f0      	bne.n	800f298 <log_msg2_hexdump+0x12>
}
 800f2b6:	b003      	add	sp, #12
 800f2b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f2bc <log_output_flush>:
{
 800f2bc:	b510      	push	{r4, lr}
 800f2be:	4604      	mov	r4, r0
		     output->control_block->offset,
 800f2c0:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 800f2c2:	6853      	ldr	r3, [r2, #4]
 800f2c4:	6812      	ldr	r2, [r2, #0]
 800f2c6:	6881      	ldr	r1, [r0, #8]
 800f2c8:	6800      	ldr	r0, [r0, #0]
 800f2ca:	f7ff ffb7 	bl	800f23c <buffer_write>
	output->control_block->offset = 0;
 800f2ce:	6863      	ldr	r3, [r4, #4]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	601a      	str	r2, [r3, #0]
}
 800f2d4:	bd10      	pop	{r4, pc}

0800f2d6 <out_func>:
{
 800f2d6:	b538      	push	{r3, r4, r5, lr}
 800f2d8:	4605      	mov	r5, r0
 800f2da:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800f2dc:	684b      	ldr	r3, [r1, #4]
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	68cb      	ldr	r3, [r1, #12]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d00f      	beq.n	800f306 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
 800f2e6:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800f2e8:	f3bf 8f5b 	dmb	ish
 800f2ec:	e853 2f00 	ldrex	r2, [r3]
 800f2f0:	1c51      	adds	r1, r2, #1
 800f2f2:	e843 1000 	strex	r0, r1, [r3]
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d1f8      	bne.n	800f2ec <out_func+0x16>
 800f2fa:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800f2fe:	68a3      	ldr	r3, [r4, #8]
 800f300:	549d      	strb	r5, [r3, r2]
}
 800f302:	2000      	movs	r0, #0
 800f304:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
 800f306:	4608      	mov	r0, r1
 800f308:	f7ff ffd8 	bl	800f2bc <log_output_flush>
 800f30c:	e7eb      	b.n	800f2e6 <out_func+0x10>

0800f30e <cr_out_func>:
{
 800f30e:	b538      	push	{r3, r4, r5, lr}
 800f310:	4604      	mov	r4, r0
 800f312:	460d      	mov	r5, r1
	out_func(c, ctx);
 800f314:	f7ff ffdf 	bl	800f2d6 <out_func>
	if (c == '\n') {
 800f318:	2c0a      	cmp	r4, #10
 800f31a:	d001      	beq.n	800f320 <cr_out_func+0x12>
}
 800f31c:	2000      	movs	r0, #0
 800f31e:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
 800f320:	4629      	mov	r1, r5
 800f322:	200d      	movs	r0, #13
 800f324:	f7ff ffd7 	bl	800f2d6 <out_func>
 800f328:	e7f8      	b.n	800f31c <cr_out_func+0xe>

0800f32a <z_log_msg2_finalize>:
#include <logging/log_internal.h>
#include <logging/log_ctrl.h>

void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
			 const struct log_msg2_desc desc, const void *data)
{
 800f32a:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
 800f32c:	b198      	cbz	r0, 800f356 <z_log_msg2_finalize+0x2c>
 800f32e:	460e      	mov	r6, r1
 800f330:	4614      	mov	r4, r2
 800f332:	4619      	mov	r1, r3
 800f334:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
 800f336:	b143      	cbz	r3, 800f34a <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
 800f338:	f100 030c 	add.w	r3, r0, #12
 800f33c:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800f340:	f3c2 42cb 	ubfx	r2, r2, #19, #12
 800f344:	4418      	add	r0, r3
 800f346:	f001 ffaa 	bl	801129e <memcpy>

		memcpy(d, data, desc.data_len);
	}

	msg->hdr.desc = desc;
 800f34a:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
 800f34c:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
 800f34e:	4628      	mov	r0, r5
 800f350:	f7f4 fd8a 	bl	8003e68 <z_log_msg2_commit>
}
 800f354:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
 800f356:	f7f4 fc4f 	bl	8003bf8 <z_log_dropped>
		return;
 800f35a:	e7fb      	b.n	800f354 <z_log_msg2_finalize+0x2a>

0800f35c <z_impl_z_log_msg2_static_create>:

void z_impl_z_log_msg2_static_create(const void *source,
			      const struct log_msg2_desc desc,
			      uint8_t *package, const void *data)
{
 800f35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f360:	4605      	mov	r5, r0
 800f362:	460c      	mov	r4, r1
 800f364:	4617      	mov	r7, r2
 800f366:	461e      	mov	r6, r3
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 800f368:	f3c1 2c49 	ubfx	ip, r1, #9, #10
 800f36c:	f3c1 40cb 	ubfx	r0, r1, #19, #12
 800f370:	4484      	add	ip, r0
 800f372:	f10c 0c13 	add.w	ip, ip, #19
 800f376:	f02c 0c07 	bic.w	ip, ip, #7
	uint32_t msg_wlen = log_msg2_get_total_wlen(desc);
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
 800f37a:	ea4f 009c 	mov.w	r0, ip, lsr #2
 800f37e:	f7f4 fcb5 	bl	8003cec <z_log_msg2_alloc>

	if (msg) {
 800f382:	4680      	mov	r8, r0
 800f384:	b128      	cbz	r0, 800f392 <z_impl_z_log_msg2_static_create+0x36>
 800f386:	f3c4 2249 	ubfx	r2, r4, #9, #10
 800f38a:	4639      	mov	r1, r7
 800f38c:	300c      	adds	r0, #12
 800f38e:	f001 ff86 	bl	801129e <memcpy>
		memcpy(msg->data, package, desc.package_len);
	}

	z_log_msg2_finalize(msg, source, desc, data);
 800f392:	4633      	mov	r3, r6
 800f394:	4622      	mov	r2, r4
 800f396:	4629      	mov	r1, r5
 800f398:	4640      	mov	r0, r8
 800f39a:	f7ff ffc6 	bl	800f32a <z_log_msg2_finalize>
}
 800f39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f3a2 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
 800f3a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a6:	b085      	sub	sp, #20
 800f3a8:	4681      	mov	r9, r0
 800f3aa:	460d      	mov	r5, r1
 800f3ac:	4690      	mov	r8, r2
 800f3ae:	461e      	mov	r6, r3
 800f3b0:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800f3b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	int plen;

	if (fmt) {
 800f3b6:	b3b7      	cbz	r7, 800f426 <z_impl_z_log_msg2_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
 800f3b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f3ba:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
 800f3bc:	9300      	str	r3, [sp, #0]
 800f3be:	463b      	mov	r3, r7
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	210c      	movs	r1, #12
 800f3c4:	4610      	mov	r0, r2
 800f3c6:	f7f3 fbfb 	bl	8002bc0 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 800f3ca:	4682      	mov	sl, r0
 800f3cc:	eb00 030b 	add.w	r3, r0, fp
 800f3d0:	3313      	adds	r3, #19
 800f3d2:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
 800f3d6:	2400      	movs	r4, #0
 800f3d8:	f36f 0400 	bfc	r4, #0, #1
 800f3dc:	f36f 0441 	bfc	r4, #1, #1
 800f3e0:	f36f 0482 	bfc	r4, #2, #1
 800f3e4:	f369 04c5 	bfi	r4, r9, #3, #3
 800f3e8:	f368 1488 	bfi	r4, r8, #6, #3
 800f3ec:	f360 2452 	bfi	r4, r0, #9, #10
 800f3f0:	f36b 44de 	bfi	r4, fp, #19, #12
 800f3f4:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
 800f3f8:	0898      	lsrs	r0, r3, #2
 800f3fa:	f7f4 fc77 	bl	8003cec <z_log_msg2_alloc>
	}

	if (msg && fmt) {
 800f3fe:	4680      	mov	r8, r0
 800f400:	b140      	cbz	r0, 800f414 <z_impl_z_log_msg2_runtime_vcreate+0x72>
 800f402:	b13f      	cbz	r7, 800f414 <z_impl_z_log_msg2_runtime_vcreate+0x72>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
 800f404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f406:	9300      	str	r3, [sp, #0]
 800f408:	463b      	mov	r3, r7
 800f40a:	2200      	movs	r2, #0
 800f40c:	4651      	mov	r1, sl
 800f40e:	300c      	adds	r0, #12
 800f410:	f7f3 fbd6 	bl	8002bc0 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
 800f414:	4633      	mov	r3, r6
 800f416:	4622      	mov	r2, r4
 800f418:	4629      	mov	r1, r5
 800f41a:	4640      	mov	r0, r8
 800f41c:	f7ff ff85 	bl	800f32a <z_log_msg2_finalize>
}
 800f420:	b005      	add	sp, #20
 800f422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
 800f426:	2000      	movs	r0, #0
 800f428:	e7cf      	b.n	800f3ca <z_impl_z_log_msg2_runtime_vcreate+0x28>

0800f42a <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 800f42a:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 800f42c:	f7f4 ffca 	bl	80043c4 <__do_global_ctors_aux>
	__do_init_array_aux();
 800f430:	f7f4 ffba 	bl	80043a8 <__do_init_array_aux>
}
 800f434:	bd08      	pop	{r3, pc}

0800f436 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800f436:	b538      	push	{r3, r4, r5, lr}
 800f438:	4604      	mov	r4, r0

	if (esf != NULL) {
 800f43a:	460d      	mov	r5, r1
 800f43c:	b111      	cbz	r1, 800f444 <z_arm_fatal_error+0xe>
		esf_dump(esf);
 800f43e:	4608      	mov	r0, r1
 800f440:	f7f4 ffe4 	bl	800440c <esf_dump>
	}
	z_fatal_error(reason, esf);
 800f444:	4629      	mov	r1, r5
 800f446:	4620      	mov	r0, r4
 800f448:	f7fc f8c4 	bl	800b5d4 <z_fatal_error>
}
 800f44c:	bd38      	pop	{r3, r4, r5, pc}

0800f44e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 800f44e:	b508      	push	{r3, lr}
 800f450:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800f452:	6800      	ldr	r0, [r0, #0]
 800f454:	f7ff ffef 	bl	800f436 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 800f458:	bd08      	pop	{r3, pc}

0800f45a <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
 800f45a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800f45c:	2100      	movs	r1, #0
 800f45e:	2001      	movs	r0, #1
 800f460:	f7ff ffe9 	bl	800f436 <z_arm_fatal_error>
}
 800f464:	bd08      	pop	{r3, pc}

0800f466 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 800f466:	b508      	push	{r3, lr}
	handler();
 800f468:	f7f5 f904 	bl	8004674 <z_SysNmiOnReset>
	z_arm_int_exit();
 800f46c:	f7f5 f9ee 	bl	800484c <z_arm_exc_exit>
}
 800f470:	bd08      	pop	{r3, pc}

0800f472 <memory_fault_recoverable>:
}
 800f472:	2000      	movs	r0, #0
 800f474:	4770      	bx	lr

0800f476 <z_log_msg2_runtime_create>:
{
 800f476:	b510      	push	{r4, lr}
 800f478:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800f47a:	ac0a      	add	r4, sp, #40	; 0x28
 800f47c:	9405      	str	r4, [sp, #20]
 800f47e:	9402      	str	r4, [sp, #8]
 800f480:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f482:	9401      	str	r4, [sp, #4]
 800f484:	9c08      	ldr	r4, [sp, #32]
 800f486:	9400      	str	r4, [sp, #0]
 800f488:	f7ff ff8b 	bl	800f3a2 <z_impl_z_log_msg2_runtime_vcreate>
}
 800f48c:	b006      	add	sp, #24
 800f48e:	bd10      	pop	{r4, pc}

0800f490 <fault_handle>:
{
 800f490:	b508      	push	{r3, lr}
	*recoverable = false;
 800f492:	2300      	movs	r3, #0
 800f494:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 800f496:	1ecb      	subs	r3, r1, #3
 800f498:	2b09      	cmp	r3, #9
 800f49a:	d81a      	bhi.n	800f4d2 <fault_handle+0x42>
 800f49c:	e8df f003 	tbb	[pc, r3]
 800f4a0:	110d0905 	.word	0x110d0905
 800f4a4:	19191919 	.word	0x19191919
 800f4a8:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
 800f4aa:	4611      	mov	r1, r2
 800f4ac:	f7f5 fe2a 	bl	8005104 <hard_fault>
}
 800f4b0:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 800f4b2:	2100      	movs	r1, #0
 800f4b4:	f7f5 fcc4 	bl	8004e40 <mem_manage_fault>
		break;
 800f4b8:	e7fa      	b.n	800f4b0 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	f7f5 f9f2 	bl	80048a4 <bus_fault>
		break;
 800f4c0:	e7f6      	b.n	800f4b0 <fault_handle+0x20>
		reason = usage_fault(esf);
 800f4c2:	f7f5 fb5d 	bl	8004b80 <usage_fault>
		break;
 800f4c6:	e7f3      	b.n	800f4b0 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
 800f4c8:	4611      	mov	r1, r2
 800f4ca:	f7f5 fc8d 	bl	8004de8 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800f4ce:	2000      	movs	r0, #0
		break;
 800f4d0:	e7ee      	b.n	800f4b0 <fault_handle+0x20>
		reserved_exception(esf, fault);
 800f4d2:	f7f5 f9c9 	bl	8004868 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800f4d6:	2000      	movs	r0, #0
	return reason;
 800f4d8:	e7ea      	b.n	800f4b0 <fault_handle+0x20>

0800f4da <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 800f4da:	6843      	ldr	r3, [r0, #4]
 800f4dc:	1e5a      	subs	r2, r3, #1
		&&
 800f4de:	4213      	tst	r3, r2
 800f4e0:	d106      	bne.n	800f4f0 <mpu_partition_is_valid+0x16>
		&&
 800f4e2:	2b1f      	cmp	r3, #31
 800f4e4:	d906      	bls.n	800f4f4 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 800f4e6:	6803      	ldr	r3, [r0, #0]
		&&
 800f4e8:	421a      	tst	r2, r3
 800f4ea:	d005      	beq.n	800f4f8 <mpu_partition_is_valid+0x1e>
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	4770      	bx	lr
 800f4f0:	2000      	movs	r0, #0
 800f4f2:	4770      	bx	lr
 800f4f4:	2000      	movs	r0, #0
 800f4f6:	4770      	bx	lr
 800f4f8:	2001      	movs	r0, #1
}
 800f4fa:	4770      	bx	lr

0800f4fc <mpu_configure_region>:
{
 800f4fc:	b500      	push	{lr}
 800f4fe:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 800f500:	680b      	ldr	r3, [r1, #0]
 800f502:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 800f504:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800f506:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 800f508:	2b20      	cmp	r3, #32
 800f50a:	d912      	bls.n	800f532 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 800f50c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f510:	d811      	bhi.n	800f536 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800f512:	3b01      	subs	r3, #1
 800f514:	fab3 f383 	clz	r3, r3
 800f518:	f1c3 031f 	rsb	r3, r3, #31
 800f51c:	005b      	lsls	r3, r3, #1
 800f51e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800f522:	4313      	orrs	r3, r2
 800f524:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 800f526:	a901      	add	r1, sp, #4
 800f528:	f7f5 ffee 	bl	8005508 <region_allocate_and_init>
}
 800f52c:	b005      	add	sp, #20
 800f52e:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 800f532:	2308      	movs	r3, #8
 800f534:	e7f5      	b.n	800f522 <mpu_configure_region+0x26>
		return REGION_4G;
 800f536:	233e      	movs	r3, #62	; 0x3e
 800f538:	e7f3      	b.n	800f522 <mpu_configure_region+0x26>

0800f53a <arm_core_mpu_configure_static_mpu_regions>:
{
 800f53a:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 800f53c:	f7f6 f86a 	bl	8005614 <mpu_configure_static_mpu_regions>
}
 800f540:	bd08      	pop	{r3, pc}

0800f542 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 800f542:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 800f544:	f7f6 f870 	bl	8005628 <mpu_configure_dynamic_mpu_regions>
}
 800f548:	bd08      	pop	{r3, pc}

0800f54a <malloc_prepare>:
}
 800f54a:	2000      	movs	r0, #0
 800f54c:	4770      	bx	lr

0800f54e <_stdout_hook_default>:
}
 800f54e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f552:	4770      	bx	lr

0800f554 <_stdin_hook_default>:
}
 800f554:	2000      	movs	r0, #0
 800f556:	4770      	bx	lr

0800f558 <_read>:
{
 800f558:	b508      	push	{r3, lr}
 800f55a:	4608      	mov	r0, r1
 800f55c:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800f55e:	f7f6 f8bb 	bl	80056d8 <z_impl_zephyr_read_stdin>
}
 800f562:	bd08      	pop	{r3, pc}

0800f564 <_write>:
{
 800f564:	b508      	push	{r3, lr}
 800f566:	4608      	mov	r0, r1
 800f568:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800f56a:	f7f6 f8cb 	bl	8005704 <z_impl_zephyr_write_stdout>
}
 800f56e:	bd08      	pop	{r3, pc}

0800f570 <_close>:
}
 800f570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f574:	4770      	bx	lr

0800f576 <_lseek>:
}
 800f576:	2000      	movs	r0, #0
 800f578:	4770      	bx	lr

0800f57a <_isatty>:
}
 800f57a:	2802      	cmp	r0, #2
 800f57c:	bfcc      	ite	gt
 800f57e:	2000      	movgt	r0, #0
 800f580:	2001      	movle	r0, #1
 800f582:	4770      	bx	lr

0800f584 <_kill>:
}
 800f584:	2000      	movs	r0, #0
 800f586:	4770      	bx	lr

0800f588 <_getpid>:
}
 800f588:	2000      	movs	r0, #0
 800f58a:	4770      	bx	lr

0800f58c <_fstat>:
	st->st_mode = S_IFCHR;
 800f58c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f590:	604b      	str	r3, [r1, #4]
}
 800f592:	2000      	movs	r0, #0
 800f594:	4770      	bx	lr

0800f596 <__retarget_lock_init_recursive>:
{
 800f596:	b510      	push	{r4, lr}
 800f598:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
 800f59a:	2014      	movs	r0, #20
 800f59c:	f7fd fdbc 	bl	800d118 <malloc>
 800f5a0:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 800f5a2:	f001 fad6 	bl	8010b52 <z_impl_k_mutex_init>
}
 800f5a6:	bd10      	pop	{r4, pc}

0800f5a8 <__retarget_lock_acquire_recursive>:
{
 800f5a8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 800f5aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5b2:	f7fc f9f7 	bl	800b9a4 <z_impl_k_mutex_lock>
}
 800f5b6:	bd08      	pop	{r3, pc}

0800f5b8 <__retarget_lock_release_recursive>:
{
 800f5b8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 800f5ba:	f7fc fa7d 	bl	800bab8 <z_impl_k_mutex_unlock>
}
 800f5be:	bd08      	pop	{r3, pc}

0800f5c0 <__errno>:
{
 800f5c0:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 800f5c2:	f7fb ffa3 	bl	800b50c <z_impl_z_errno>
}
 800f5c6:	bd08      	pop	{r3, pc}

0800f5c8 <z_impl_sys_rand_get>:

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
void z_impl_sys_rand_get(void *dst, size_t outlen)
{
 800f5c8:	b508      	push	{r3, lr}
	rand_get(dst, outlen, false);
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f7f6 f8e2 	bl	8005794 <rand_get>
}
 800f5d0:	bd08      	pop	{r3, pc}

0800f5d2 <__stm32_exti_isr_0>:
{
 800f5d2:	b508      	push	{r3, lr}
 800f5d4:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 800f5d6:	2101      	movs	r1, #1
 800f5d8:	2000      	movs	r0, #0
 800f5da:	f7f6 f90d 	bl	80057f8 <__stm32_exti_isr>
}
 800f5de:	bd08      	pop	{r3, pc}

0800f5e0 <__stm32_exti_isr_1>:
{
 800f5e0:	b508      	push	{r3, lr}
 800f5e2:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 800f5e4:	2102      	movs	r1, #2
 800f5e6:	2001      	movs	r0, #1
 800f5e8:	f7f6 f906 	bl	80057f8 <__stm32_exti_isr>
}
 800f5ec:	bd08      	pop	{r3, pc}

0800f5ee <__stm32_exti_isr_2>:
{
 800f5ee:	b508      	push	{r3, lr}
 800f5f0:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 800f5f2:	2103      	movs	r1, #3
 800f5f4:	2002      	movs	r0, #2
 800f5f6:	f7f6 f8ff 	bl	80057f8 <__stm32_exti_isr>
}
 800f5fa:	bd08      	pop	{r3, pc}

0800f5fc <__stm32_exti_isr_3>:
{
 800f5fc:	b508      	push	{r3, lr}
 800f5fe:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 800f600:	2104      	movs	r1, #4
 800f602:	2003      	movs	r0, #3
 800f604:	f7f6 f8f8 	bl	80057f8 <__stm32_exti_isr>
}
 800f608:	bd08      	pop	{r3, pc}

0800f60a <__stm32_exti_isr_4>:
{
 800f60a:	b508      	push	{r3, lr}
 800f60c:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 800f60e:	2105      	movs	r1, #5
 800f610:	2004      	movs	r0, #4
 800f612:	f7f6 f8f1 	bl	80057f8 <__stm32_exti_isr>
}
 800f616:	bd08      	pop	{r3, pc}

0800f618 <__stm32_exti_isr_9_5>:
{
 800f618:	b508      	push	{r3, lr}
 800f61a:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 800f61c:	210a      	movs	r1, #10
 800f61e:	2005      	movs	r0, #5
 800f620:	f7f6 f8ea 	bl	80057f8 <__stm32_exti_isr>
}
 800f624:	bd08      	pop	{r3, pc}

0800f626 <__stm32_exti_isr_15_10>:
{
 800f626:	b508      	push	{r3, lr}
 800f628:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 800f62a:	2110      	movs	r1, #16
 800f62c:	200a      	movs	r0, #10
 800f62e:	f7f6 f8e3 	bl	80057f8 <__stm32_exti_isr>
}
 800f632:	bd08      	pop	{r3, pc}

0800f634 <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 800f634:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800f636:	2200      	movs	r2, #0
 800f638:	4611      	mov	r1, r2
 800f63a:	2006      	movs	r0, #6
 800f63c:	f7f5 f804 	bl	8004648 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800f640:	2200      	movs	r2, #0
 800f642:	4611      	mov	r1, r2
 800f644:	2007      	movs	r0, #7
 800f646:	f7f4 ffff 	bl	8004648 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800f64a:	2200      	movs	r2, #0
 800f64c:	4611      	mov	r1, r2
 800f64e:	2008      	movs	r0, #8
 800f650:	f7f4 fffa 	bl	8004648 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800f654:	2200      	movs	r2, #0
 800f656:	4611      	mov	r1, r2
 800f658:	2009      	movs	r0, #9
 800f65a:	f7f4 fff5 	bl	8004648 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800f65e:	2200      	movs	r2, #0
 800f660:	4611      	mov	r1, r2
 800f662:	200a      	movs	r0, #10
 800f664:	f7f4 fff0 	bl	8004648 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 800f668:	2200      	movs	r2, #0
 800f66a:	4611      	mov	r1, r2
 800f66c:	2017      	movs	r0, #23
 800f66e:	f7f4 ffeb 	bl	8004648 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800f672:	2200      	movs	r2, #0
 800f674:	4611      	mov	r1, r2
 800f676:	2028      	movs	r0, #40	; 0x28
 800f678:	f7f4 ffe6 	bl	8004648 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 800f67c:	bd08      	pop	{r3, pc}

0800f67e <stm32_exti_init>:
{
 800f67e:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 800f680:	f7ff ffd8 	bl	800f634 <__stm32_exti_connect_irqs>
}
 800f684:	2000      	movs	r0, #0
 800f686:	bd08      	pop	{r3, pc}

0800f688 <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 800f688:	2300      	movs	r3, #0
 800f68a:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 800f68c:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 800f68e:	6083      	str	r3, [r0, #8]
}
 800f690:	4770      	bx	lr

0800f692 <get_bus_clock>:
}
 800f692:	fbb0 f0f1 	udiv	r0, r0, r1
 800f696:	4770      	bx	lr

0800f698 <config_pll_init>:
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
 800f698:	2300      	movs	r3, #0
 800f69a:	6003      	str	r3, [r0, #0]
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 800f69c:	2314      	movs	r3, #20
 800f69e:	6043      	str	r3, [r0, #4]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 800f6a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f6a4:	6083      	str	r3, [r0, #8]
}
 800f6a6:	4770      	bx	lr

0800f6a8 <dma_stm32_config_irq_0>:
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */

static void dma_stm32_config_irq_0(const struct device *dev)
{
 800f6a8:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	DMA_STM32_IRQ_CONNECT(0, 0);
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	4611      	mov	r1, r2
 800f6ae:	200b      	movs	r0, #11
 800f6b0:	f7f4 ffca 	bl	8004648 <z_arm_irq_priority_set>
 800f6b4:	200b      	movs	r0, #11
 800f6b6:	f7f4 ff97 	bl	80045e8 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(0, 1);
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	4611      	mov	r1, r2
 800f6be:	200c      	movs	r0, #12
 800f6c0:	f7f4 ffc2 	bl	8004648 <z_arm_irq_priority_set>
 800f6c4:	200c      	movs	r0, #12
 800f6c6:	f7f4 ff8f 	bl	80045e8 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 2);
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	4611      	mov	r1, r2
 800f6ce:	200d      	movs	r0, #13
 800f6d0:	f7f4 ffba 	bl	8004648 <z_arm_irq_priority_set>
 800f6d4:	200d      	movs	r0, #13
 800f6d6:	f7f4 ff87 	bl	80045e8 <arch_irq_enable>
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
	DMA_STM32_IRQ_CONNECT(0, 3);
 800f6da:	2200      	movs	r2, #0
 800f6dc:	4611      	mov	r1, r2
 800f6de:	200e      	movs	r0, #14
 800f6e0:	f7f4 ffb2 	bl	8004648 <z_arm_irq_priority_set>
 800f6e4:	200e      	movs	r0, #14
 800f6e6:	f7f4 ff7f 	bl	80045e8 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 4);
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	4611      	mov	r1, r2
 800f6ee:	200f      	movs	r0, #15
 800f6f0:	f7f4 ffaa 	bl	8004648 <z_arm_irq_priority_set>
 800f6f4:	200f      	movs	r0, #15
 800f6f6:	f7f4 ff77 	bl	80045e8 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 5)
	DMA_STM32_IRQ_CONNECT(0, 5);
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	4611      	mov	r1, r2
 800f6fe:	2010      	movs	r0, #16
 800f700:	f7f4 ffa2 	bl	8004648 <z_arm_irq_priority_set>
 800f704:	2010      	movs	r0, #16
 800f706:	f7f4 ff6f 	bl	80045e8 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 6)
	DMA_STM32_IRQ_CONNECT(0, 6);
 800f70a:	2200      	movs	r2, #0
 800f70c:	4611      	mov	r1, r2
 800f70e:	2011      	movs	r0, #17
 800f710:	f7f4 ff9a 	bl	8004648 <z_arm_irq_priority_set>
 800f714:	2011      	movs	r0, #17
 800f716:	f7f4 ff67 	bl	80045e8 <arch_irq_enable>
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
/* Either 5 or 6 or 7 or 8 channels for DMA across all stm32 series. */
}
 800f71a:	bd08      	pop	{r3, pc}

0800f71c <dma_stm32_dump_stream_irq>:
{
 800f71c:	b508      	push	{r3, lr}
	const struct dma_stm32_config *config = dev->config;
 800f71e:	6843      	ldr	r3, [r0, #4]
	stm32_dma_dump_stream_irq(dma, id);
 800f720:	6918      	ldr	r0, [r3, #16]
 800f722:	f7f7 f801 	bl	8006728 <stm32_dma_dump_stream_irq>
}
 800f726:	bd08      	pop	{r3, pc}

0800f728 <dma_stm32_clear_stream_irq>:
{
 800f728:	b538      	push	{r3, r4, r5, lr}
 800f72a:	460c      	mov	r4, r1
	const struct dma_stm32_config *config = dev->config;
 800f72c:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 800f72e:	691d      	ldr	r5, [r3, #16]
	dma_stm32_clear_tc(dma, id);
 800f730:	4628      	mov	r0, r5
 800f732:	f7f6 ffb9 	bl	80066a8 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 800f736:	4621      	mov	r1, r4
 800f738:	4628      	mov	r0, r5
 800f73a:	f7f6 ffad 	bl	8006698 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 800f73e:	4621      	mov	r1, r4
 800f740:	4628      	mov	r0, r5
 800f742:	f000 f946 	bl	800f9d2 <stm32_dma_clear_stream_irq>
}
 800f746:	bd38      	pop	{r3, r4, r5, pc}

0800f748 <dma_stm32_irq_0_0>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 0);
 800f748:	b508      	push	{r3, lr}
 800f74a:	2100      	movs	r1, #0
 800f74c:	f7f6 fb28 	bl	8005da0 <dma_stm32_irq_handler>
 800f750:	bd08      	pop	{r3, pc}

0800f752 <dma_stm32_irq_0_1>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 1);
 800f752:	b508      	push	{r3, lr}
 800f754:	2101      	movs	r1, #1
 800f756:	f7f6 fb23 	bl	8005da0 <dma_stm32_irq_handler>
 800f75a:	bd08      	pop	{r3, pc}

0800f75c <dma_stm32_irq_0_2>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 2);
 800f75c:	b508      	push	{r3, lr}
 800f75e:	2102      	movs	r1, #2
 800f760:	f7f6 fb1e 	bl	8005da0 <dma_stm32_irq_handler>
 800f764:	bd08      	pop	{r3, pc}

0800f766 <dma_stm32_irq_0_3>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 3);
 800f766:	b508      	push	{r3, lr}
 800f768:	2103      	movs	r1, #3
 800f76a:	f7f6 fb19 	bl	8005da0 <dma_stm32_irq_handler>
 800f76e:	bd08      	pop	{r3, pc}

0800f770 <dma_stm32_irq_0_4>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 4);
 800f770:	b508      	push	{r3, lr}
 800f772:	2104      	movs	r1, #4
 800f774:	f7f6 fb14 	bl	8005da0 <dma_stm32_irq_handler>
 800f778:	bd08      	pop	{r3, pc}

0800f77a <dma_stm32_irq_0_5>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 5);
 800f77a:	b508      	push	{r3, lr}
 800f77c:	2105      	movs	r1, #5
 800f77e:	f7f6 fb0f 	bl	8005da0 <dma_stm32_irq_handler>
 800f782:	bd08      	pop	{r3, pc}

0800f784 <dma_stm32_irq_0_6>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 6);
 800f784:	b508      	push	{r3, lr}
 800f786:	2106      	movs	r1, #6
 800f788:	f7f6 fb0a 	bl	8005da0 <dma_stm32_irq_handler>
 800f78c:	bd08      	pop	{r3, pc}

0800f78e <dma_stm32_disable_stream>:
{
 800f78e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f790:	4607      	mov	r7, r0
 800f792:	460e      	mov	r6, r1
	int count = 0;
 800f794:	2400      	movs	r4, #0
		if (stm32_dma_disable_stream(dma, id) == 0) {
 800f796:	4631      	mov	r1, r6
 800f798:	4638      	mov	r0, r7
 800f79a:	f7f7 f89d 	bl	80068d8 <stm32_dma_disable_stream>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	b160      	cbz	r0, 800f7bc <dma_stm32_disable_stream+0x2e>
		if (count++ > (5 * 1000)) {
 800f7a2:	1c65      	adds	r5, r4, #1
 800f7a4:	f241 3388 	movw	r3, #5000	; 0x1388
 800f7a8:	429c      	cmp	r4, r3
 800f7aa:	dc05      	bgt.n	800f7b8 <dma_stm32_disable_stream+0x2a>
	return z_impl_k_sleep(timeout);
 800f7ac:	200a      	movs	r0, #10
 800f7ae:	2100      	movs	r1, #0
 800f7b0:	f7fc ff26 	bl	800c600 <z_impl_k_sleep>
 800f7b4:	462c      	mov	r4, r5
	for (;;) {
 800f7b6:	e7ee      	b.n	800f796 <dma_stm32_disable_stream+0x8>
			return -EBUSY;
 800f7b8:	f06f 030f 	mvn.w	r3, #15
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f7c0 <dma_stm32_start>:
{
 800f7c0:	b538      	push	{r3, r4, r5, lr}
	const struct dma_stm32_config *config = dev->config;
 800f7c2:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 800f7c4:	691d      	ldr	r5, [r3, #16]
	id = id - STREAM_OFFSET;
 800f7c6:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 800f7c8:	695b      	ldr	r3, [r3, #20]
 800f7ca:	42a3      	cmp	r3, r4
 800f7cc:	d908      	bls.n	800f7e0 <dma_stm32_start+0x20>
	dma_stm32_clear_stream_irq(dev, id);
 800f7ce:	4621      	mov	r1, r4
 800f7d0:	f7ff ffaa 	bl	800f728 <dma_stm32_clear_stream_irq>
	stm32_dma_enable_stream(dma, id);
 800f7d4:	4621      	mov	r1, r4
 800f7d6:	4628      	mov	r0, r5
 800f7d8:	f7f7 f870 	bl	80068bc <stm32_dma_enable_stream>
	return 0;
 800f7dc:	2000      	movs	r0, #0
}
 800f7de:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 800f7e0:	f06f 0015 	mvn.w	r0, #21
 800f7e4:	e7fb      	b.n	800f7de <dma_stm32_start+0x1e>

0800f7e6 <LL_DMA_IsActiveFlag_GI1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF1) == (DMA_ISR_GIF1)) ? 1UL : 0UL);
 800f7e6:	6800      	ldr	r0, [r0, #0]
 800f7e8:	f010 0001 	ands.w	r0, r0, #1
 800f7ec:	d000      	beq.n	800f7f0 <LL_DMA_IsActiveFlag_GI1+0xa>
 800f7ee:	2001      	movs	r0, #1
}
 800f7f0:	4770      	bx	lr

0800f7f2 <LL_DMA_IsActiveFlag_GI2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF2) == (DMA_ISR_GIF2)) ? 1UL : 0UL);
 800f7f2:	6800      	ldr	r0, [r0, #0]
 800f7f4:	f010 0010 	ands.w	r0, r0, #16
 800f7f8:	d000      	beq.n	800f7fc <LL_DMA_IsActiveFlag_GI2+0xa>
 800f7fa:	2001      	movs	r0, #1
}
 800f7fc:	4770      	bx	lr

0800f7fe <LL_DMA_IsActiveFlag_GI3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF3) == (DMA_ISR_GIF3)) ? 1UL : 0UL);
 800f7fe:	6800      	ldr	r0, [r0, #0]
 800f800:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800f804:	d000      	beq.n	800f808 <LL_DMA_IsActiveFlag_GI3+0xa>
 800f806:	2001      	movs	r0, #1
}
 800f808:	4770      	bx	lr

0800f80a <LL_DMA_IsActiveFlag_GI4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF4) == (DMA_ISR_GIF4)) ? 1UL : 0UL);
 800f80a:	6800      	ldr	r0, [r0, #0]
 800f80c:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800f810:	d000      	beq.n	800f814 <LL_DMA_IsActiveFlag_GI4+0xa>
 800f812:	2001      	movs	r0, #1
}
 800f814:	4770      	bx	lr

0800f816 <LL_DMA_IsActiveFlag_GI5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF5) == (DMA_ISR_GIF5)) ? 1UL : 0UL);
 800f816:	6800      	ldr	r0, [r0, #0]
 800f818:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800f81c:	d000      	beq.n	800f820 <LL_DMA_IsActiveFlag_GI5+0xa>
 800f81e:	2001      	movs	r0, #1
}
 800f820:	4770      	bx	lr

0800f822 <LL_DMA_IsActiveFlag_GI6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF6) == (DMA_ISR_GIF6)) ? 1UL : 0UL);
 800f822:	6800      	ldr	r0, [r0, #0]
 800f824:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800f828:	d000      	beq.n	800f82c <LL_DMA_IsActiveFlag_GI6+0xa>
 800f82a:	2001      	movs	r0, #1
}
 800f82c:	4770      	bx	lr

0800f82e <LL_DMA_IsActiveFlag_GI7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF7) == (DMA_ISR_GIF7)) ? 1UL : 0UL);
 800f82e:	6800      	ldr	r0, [r0, #0]
 800f830:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800f834:	d000      	beq.n	800f838 <LL_DMA_IsActiveFlag_GI7+0xa>
 800f836:	2001      	movs	r0, #1
}
 800f838:	4770      	bx	lr

0800f83a <LL_DMA_IsActiveFlag_TC1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 800f83a:	6800      	ldr	r0, [r0, #0]
 800f83c:	f010 0002 	ands.w	r0, r0, #2
 800f840:	d000      	beq.n	800f844 <LL_DMA_IsActiveFlag_TC1+0xa>
 800f842:	2001      	movs	r0, #1
}
 800f844:	4770      	bx	lr

0800f846 <LL_DMA_IsActiveFlag_TC2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 800f846:	6800      	ldr	r0, [r0, #0]
 800f848:	f010 0020 	ands.w	r0, r0, #32
 800f84c:	d000      	beq.n	800f850 <LL_DMA_IsActiveFlag_TC2+0xa>
 800f84e:	2001      	movs	r0, #1
}
 800f850:	4770      	bx	lr

0800f852 <LL_DMA_IsActiveFlag_TC3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 800f852:	6800      	ldr	r0, [r0, #0]
 800f854:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 800f858:	d000      	beq.n	800f85c <LL_DMA_IsActiveFlag_TC3+0xa>
 800f85a:	2001      	movs	r0, #1
}
 800f85c:	4770      	bx	lr

0800f85e <LL_DMA_IsActiveFlag_TC4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 800f85e:	6800      	ldr	r0, [r0, #0]
 800f860:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 800f864:	d000      	beq.n	800f868 <LL_DMA_IsActiveFlag_TC4+0xa>
 800f866:	2001      	movs	r0, #1
}
 800f868:	4770      	bx	lr

0800f86a <LL_DMA_IsActiveFlag_TC5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 800f86a:	6800      	ldr	r0, [r0, #0]
 800f86c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800f870:	d000      	beq.n	800f874 <LL_DMA_IsActiveFlag_TC5+0xa>
 800f872:	2001      	movs	r0, #1
}
 800f874:	4770      	bx	lr

0800f876 <LL_DMA_IsActiveFlag_TC6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 800f876:	6800      	ldr	r0, [r0, #0]
 800f878:	f410 1000 	ands.w	r0, r0, #2097152	; 0x200000
 800f87c:	d000      	beq.n	800f880 <LL_DMA_IsActiveFlag_TC6+0xa>
 800f87e:	2001      	movs	r0, #1
}
 800f880:	4770      	bx	lr

0800f882 <LL_DMA_IsActiveFlag_TC7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
 800f882:	6800      	ldr	r0, [r0, #0]
 800f884:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800f888:	d000      	beq.n	800f88c <LL_DMA_IsActiveFlag_TC7+0xa>
 800f88a:	2001      	movs	r0, #1
}
 800f88c:	4770      	bx	lr

0800f88e <LL_DMA_IsActiveFlag_HT1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 800f88e:	6800      	ldr	r0, [r0, #0]
 800f890:	f010 0004 	ands.w	r0, r0, #4
 800f894:	d000      	beq.n	800f898 <LL_DMA_IsActiveFlag_HT1+0xa>
 800f896:	2001      	movs	r0, #1
}
 800f898:	4770      	bx	lr

0800f89a <LL_DMA_IsActiveFlag_HT2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2)) ? 1UL : 0UL);
 800f89a:	6800      	ldr	r0, [r0, #0]
 800f89c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800f8a0:	d000      	beq.n	800f8a4 <LL_DMA_IsActiveFlag_HT2+0xa>
 800f8a2:	2001      	movs	r0, #1
}
 800f8a4:	4770      	bx	lr

0800f8a6 <LL_DMA_IsActiveFlag_HT3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3)) ? 1UL : 0UL);
 800f8a6:	6800      	ldr	r0, [r0, #0]
 800f8a8:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800f8ac:	d000      	beq.n	800f8b0 <LL_DMA_IsActiveFlag_HT3+0xa>
 800f8ae:	2001      	movs	r0, #1
}
 800f8b0:	4770      	bx	lr

0800f8b2 <LL_DMA_IsActiveFlag_HT4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4)) ? 1UL : 0UL);
 800f8b2:	6800      	ldr	r0, [r0, #0]
 800f8b4:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800f8b8:	d000      	beq.n	800f8bc <LL_DMA_IsActiveFlag_HT4+0xa>
 800f8ba:	2001      	movs	r0, #1
}
 800f8bc:	4770      	bx	lr

0800f8be <LL_DMA_IsActiveFlag_HT5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5)) ? 1UL : 0UL);
 800f8be:	6800      	ldr	r0, [r0, #0]
 800f8c0:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 800f8c4:	d000      	beq.n	800f8c8 <LL_DMA_IsActiveFlag_HT5+0xa>
 800f8c6:	2001      	movs	r0, #1
}
 800f8c8:	4770      	bx	lr

0800f8ca <LL_DMA_IsActiveFlag_HT6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6)) ? 1UL : 0UL);
 800f8ca:	6800      	ldr	r0, [r0, #0]
 800f8cc:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 800f8d0:	d000      	beq.n	800f8d4 <LL_DMA_IsActiveFlag_HT6+0xa>
 800f8d2:	2001      	movs	r0, #1
}
 800f8d4:	4770      	bx	lr

0800f8d6 <LL_DMA_IsActiveFlag_HT7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7)) ? 1UL : 0UL);
 800f8d6:	6800      	ldr	r0, [r0, #0]
 800f8d8:	f010 6080 	ands.w	r0, r0, #67108864	; 0x4000000
 800f8dc:	d000      	beq.n	800f8e0 <LL_DMA_IsActiveFlag_HT7+0xa>
 800f8de:	2001      	movs	r0, #1
}
 800f8e0:	4770      	bx	lr

0800f8e2 <LL_DMA_IsActiveFlag_TE1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 800f8e2:	6800      	ldr	r0, [r0, #0]
 800f8e4:	f010 0008 	ands.w	r0, r0, #8
 800f8e8:	d000      	beq.n	800f8ec <LL_DMA_IsActiveFlag_TE1+0xa>
 800f8ea:	2001      	movs	r0, #1
}
 800f8ec:	4770      	bx	lr

0800f8ee <LL_DMA_IsActiveFlag_TE2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 800f8ee:	6800      	ldr	r0, [r0, #0]
 800f8f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f8f4:	d000      	beq.n	800f8f8 <LL_DMA_IsActiveFlag_TE2+0xa>
 800f8f6:	2001      	movs	r0, #1
}
 800f8f8:	4770      	bx	lr

0800f8fa <LL_DMA_IsActiveFlag_TE3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3)) ? 1UL : 0UL);
 800f8fa:	6800      	ldr	r0, [r0, #0]
 800f8fc:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
 800f900:	d000      	beq.n	800f904 <LL_DMA_IsActiveFlag_TE3+0xa>
 800f902:	2001      	movs	r0, #1
}
 800f904:	4770      	bx	lr

0800f906 <LL_DMA_IsActiveFlag_TE4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4)) ? 1UL : 0UL);
 800f906:	6800      	ldr	r0, [r0, #0]
 800f908:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800f90c:	d000      	beq.n	800f910 <LL_DMA_IsActiveFlag_TE4+0xa>
 800f90e:	2001      	movs	r0, #1
}
 800f910:	4770      	bx	lr

0800f912 <LL_DMA_IsActiveFlag_TE5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF5) == (DMA_ISR_TEIF5)) ? 1UL : 0UL);
 800f912:	6800      	ldr	r0, [r0, #0]
 800f914:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 800f918:	d000      	beq.n	800f91c <LL_DMA_IsActiveFlag_TE5+0xa>
 800f91a:	2001      	movs	r0, #1
}
 800f91c:	4770      	bx	lr

0800f91e <LL_DMA_IsActiveFlag_TE6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6)) ? 1UL : 0UL);
 800f91e:	6800      	ldr	r0, [r0, #0]
 800f920:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
 800f924:	d000      	beq.n	800f928 <LL_DMA_IsActiveFlag_TE6+0xa>
 800f926:	2001      	movs	r0, #1
}
 800f928:	4770      	bx	lr

0800f92a <LL_DMA_IsActiveFlag_TE7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF7) == (DMA_ISR_TEIF7)) ? 1UL : 0UL);
 800f92a:	6800      	ldr	r0, [r0, #0]
 800f92c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800f930:	d000      	beq.n	800f934 <LL_DMA_IsActiveFlag_TE7+0xa>
 800f932:	2001      	movs	r0, #1
}
 800f934:	4770      	bx	lr

0800f936 <LL_DMA_ClearFlag_TC1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 800f936:	2302      	movs	r3, #2
 800f938:	6043      	str	r3, [r0, #4]
}
 800f93a:	4770      	bx	lr

0800f93c <LL_DMA_ClearFlag_TC2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 800f93c:	2320      	movs	r3, #32
 800f93e:	6043      	str	r3, [r0, #4]
}
 800f940:	4770      	bx	lr

0800f942 <LL_DMA_ClearFlag_TC3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 800f942:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f946:	6043      	str	r3, [r0, #4]
}
 800f948:	4770      	bx	lr

0800f94a <LL_DMA_ClearFlag_TC4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 800f94a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f94e:	6043      	str	r3, [r0, #4]
}
 800f950:	4770      	bx	lr

0800f952 <LL_DMA_ClearFlag_TC5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 800f952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f956:	6043      	str	r3, [r0, #4]
}
 800f958:	4770      	bx	lr

0800f95a <LL_DMA_ClearFlag_TC6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 800f95a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f95e:	6043      	str	r3, [r0, #4]
}
 800f960:	4770      	bx	lr

0800f962 <LL_DMA_ClearFlag_TC7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 800f962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f966:	6043      	str	r3, [r0, #4]
}
 800f968:	4770      	bx	lr

0800f96a <LL_DMA_ClearFlag_HT1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 800f96a:	2304      	movs	r3, #4
 800f96c:	6043      	str	r3, [r0, #4]
}
 800f96e:	4770      	bx	lr

0800f970 <LL_DMA_ClearFlag_HT2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF2);
 800f970:	2340      	movs	r3, #64	; 0x40
 800f972:	6043      	str	r3, [r0, #4]
}
 800f974:	4770      	bx	lr

0800f976 <LL_DMA_ClearFlag_HT3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 800f976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f97a:	6043      	str	r3, [r0, #4]
}
 800f97c:	4770      	bx	lr

0800f97e <LL_DMA_ClearFlag_HT4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF4);
 800f97e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f982:	6043      	str	r3, [r0, #4]
}
 800f984:	4770      	bx	lr

0800f986 <LL_DMA_ClearFlag_HT5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 800f986:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f98a:	6043      	str	r3, [r0, #4]
}
 800f98c:	4770      	bx	lr

0800f98e <LL_DMA_ClearFlag_HT6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 800f98e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f992:	6043      	str	r3, [r0, #4]
}
 800f994:	4770      	bx	lr

0800f996 <LL_DMA_ClearFlag_HT7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
 800f996:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f99a:	6043      	str	r3, [r0, #4]
}
 800f99c:	4770      	bx	lr

0800f99e <LL_DMA_ClearFlag_TE1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 800f99e:	2308      	movs	r3, #8
 800f9a0:	6043      	str	r3, [r0, #4]
}
 800f9a2:	4770      	bx	lr

0800f9a4 <LL_DMA_ClearFlag_TE2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 800f9a4:	2380      	movs	r3, #128	; 0x80
 800f9a6:	6043      	str	r3, [r0, #4]
}
 800f9a8:	4770      	bx	lr

0800f9aa <LL_DMA_ClearFlag_TE3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 800f9aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f9ae:	6043      	str	r3, [r0, #4]
}
 800f9b0:	4770      	bx	lr

0800f9b2 <LL_DMA_ClearFlag_TE4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
 800f9b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9b6:	6043      	str	r3, [r0, #4]
}
 800f9b8:	4770      	bx	lr

0800f9ba <LL_DMA_ClearFlag_TE5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
 800f9ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f9be:	6043      	str	r3, [r0, #4]
}
 800f9c0:	4770      	bx	lr

0800f9c2 <LL_DMA_ClearFlag_TE6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF6);
 800f9c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f9c6:	6043      	str	r3, [r0, #4]
}
 800f9c8:	4770      	bx	lr

0800f9ca <LL_DMA_ClearFlag_TE7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF7);
 800f9ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f9ce:	6043      	str	r3, [r0, #4]
}
 800f9d0:	4770      	bx	lr

0800f9d2 <stm32_dma_clear_stream_irq>:
{
 800f9d2:	b508      	push	{r3, lr}
	dma_stm32_clear_te(dma, id);
 800f9d4:	f7f6 fe88 	bl	80066e8 <dma_stm32_clear_te>
}
 800f9d8:	bd08      	pop	{r3, pc}

0800f9da <stm32_dma_is_unexpected_irq_happened>:
}
 800f9da:	2000      	movs	r0, #0
 800f9dc:	4770      	bx	lr

0800f9de <gpio_stm32_isr>:
{
 800f9de:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800f9e0:	684e      	ldr	r6, [r1, #4]
 800f9e2:	2501      	movs	r5, #1
 800f9e4:	4085      	lsls	r5, r0
	return list->head;
 800f9e6:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800f9e8:	b119      	cbz	r1, 800f9f2 <gpio_stm32_isr+0x14>
 800f9ea:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 800f9ec:	b149      	cbz	r1, 800fa02 <gpio_stm32_isr+0x24>
	return node->next;
 800f9ee:	680c      	ldr	r4, [r1, #0]
 800f9f0:	e007      	b.n	800fa02 <gpio_stm32_isr+0x24>
 800f9f2:	460c      	mov	r4, r1
 800f9f4:	e005      	b.n	800fa02 <gpio_stm32_isr+0x24>
 800f9f6:	b164      	cbz	r4, 800fa12 <gpio_stm32_isr+0x34>
 800f9f8:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800f9fa:	b104      	cbz	r4, 800f9fe <gpio_stm32_isr+0x20>
	return node->next;
 800f9fc:	6823      	ldr	r3, [r4, #0]
 800f9fe:	4621      	mov	r1, r4
 800fa00:	461c      	mov	r4, r3
 800fa02:	b141      	cbz	r1, 800fa16 <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 800fa04:	688a      	ldr	r2, [r1, #8]
 800fa06:	402a      	ands	r2, r5
 800fa08:	d0f5      	beq.n	800f9f6 <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800fa0a:	684b      	ldr	r3, [r1, #4]
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	4798      	blx	r3
 800fa10:	e7f1      	b.n	800f9f6 <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800fa12:	4623      	mov	r3, r4
 800fa14:	e7f3      	b.n	800f9fe <gpio_stm32_isr+0x20>
}
 800fa16:	bd70      	pop	{r4, r5, r6, pc}

0800fa18 <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 800fa18:	f410 7f00 	tst.w	r0, #512	; 0x200
 800fa1c:	d01b      	beq.n	800fa56 <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800fa1e:	2310      	movs	r3, #16
 800fa20:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 800fa22:	f010 0f02 	tst.w	r0, #2
 800fa26:	d004      	beq.n	800fa32 <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800fa28:	f010 0f04 	tst.w	r0, #4
 800fa2c:	d02c      	beq.n	800fa88 <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800fa2e:	2350      	movs	r3, #80	; 0x50
 800fa30:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800fa32:	f010 0310 	ands.w	r3, r0, #16
 800fa36:	d005      	beq.n	800fa44 <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800fa38:	680b      	ldr	r3, [r1, #0]
 800fa3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fa3e:	600b      	str	r3, [r1, #0]
	return 0;
 800fa40:	2000      	movs	r0, #0
 800fa42:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800fa44:	f010 0020 	ands.w	r0, r0, #32
 800fa48:	d020      	beq.n	800fa8c <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800fa4a:	680a      	ldr	r2, [r1, #0]
 800fa4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fa50:	600a      	str	r2, [r1, #0]
	return 0;
 800fa52:	4618      	mov	r0, r3
 800fa54:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 800fa56:	f410 7f80 	tst.w	r0, #256	; 0x100
 800fa5a:	d011      	beq.n	800fa80 <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800fa60:	f010 0310 	ands.w	r3, r0, #16
 800fa64:	d004      	beq.n	800fa70 <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800fa66:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fa6a:	600b      	str	r3, [r1, #0]
	return 0;
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800fa70:	f010 0020 	ands.w	r0, r0, #32
 800fa74:	d00a      	beq.n	800fa8c <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800fa76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fa7a:	600a      	str	r2, [r1, #0]
	return 0;
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800fa80:	2330      	movs	r3, #48	; 0x30
 800fa82:	600b      	str	r3, [r1, #0]
	return 0;
 800fa84:	2000      	movs	r0, #0
 800fa86:	4770      	bx	lr
				return -ENOTSUP;
 800fa88:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800fa8c:	4770      	bx	lr

0800fa8e <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800fa8e:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800fa90:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800fa92:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800fa94:	600b      	str	r3, [r1, #0]
}
 800fa96:	2000      	movs	r0, #0
 800fa98:	4770      	bx	lr

0800fa9a <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800fa9a:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800fa9c:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800fa9e:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800faa0:	4042      	eors	r2, r0
 800faa2:	400a      	ands	r2, r1
 800faa4:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800faa6:	615a      	str	r2, [r3, #20]
}
 800faa8:	2000      	movs	r0, #0
 800faaa:	4770      	bx	lr

0800faac <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800faac:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800faae:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 800fab0:	6199      	str	r1, [r3, #24]
}
 800fab2:	2000      	movs	r0, #0
 800fab4:	4770      	bx	lr

0800fab6 <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800fab6:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800fab8:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800faba:	6299      	str	r1, [r3, #40]	; 0x28
}
 800fabc:	2000      	movs	r0, #0
 800fabe:	4770      	bx	lr

0800fac0 <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 800fac0:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800fac2:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800fac4:	6953      	ldr	r3, [r2, #20]
 800fac6:	404b      	eors	r3, r1
 800fac8:	6153      	str	r3, [r2, #20]
}
 800faca:	2000      	movs	r0, #0
 800facc:	4770      	bx	lr

0800face <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 800face:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 800fad0:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 800fad2:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 800fad6:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 800fad8:	b1fb      	cbz	r3, 800fb1a <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800fada:	2000      	movs	r0, #0
 800fadc:	e00d      	b.n	800fafa <gpio_stm32_manage_callback+0x2c>
	return node->next;
 800fade:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 800fae0:	60a3      	str	r3, [r4, #8]
	return list->tail;
 800fae2:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800fae6:	4281      	cmp	r1, r0
 800fae8:	d112      	bne.n	800fb10 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800faea:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800faee:	e00f      	b.n	800fb10 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800faf0:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800faf4:	e00c      	b.n	800fb10 <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800faf6:	4618      	mov	r0, r3
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	b163      	cbz	r3, 800fb16 <gpio_stm32_manage_callback+0x48>
 800fafc:	4299      	cmp	r1, r3
 800fafe:	d1fa      	bne.n	800faf6 <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 800fb00:	2800      	cmp	r0, #0
 800fb02:	d0ec      	beq.n	800fade <gpio_stm32_manage_callback+0x10>
	return node->next;
 800fb04:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 800fb06:	6003      	str	r3, [r0, #0]
	return list->tail;
 800fb08:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800fb0c:	4299      	cmp	r1, r3
 800fb0e:	d0ef      	beq.n	800faf0 <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 800fb10:	2300      	movs	r3, #0
 800fb12:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800fb14:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 800fb16:	b903      	cbnz	r3, 800fb1a <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 800fb18:	b162      	cbz	r2, 800fb34 <gpio_stm32_manage_callback+0x66>
	if (set) {
 800fb1a:	b172      	cbz	r2, 800fb3a <gpio_stm32_manage_callback+0x6c>
	return list->head;
 800fb1c:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 800fb1e:	600b      	str	r3, [r1, #0]
	list->head = node;
 800fb20:	60a1      	str	r1, [r4, #8]
	return list->tail;
 800fb22:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 800fb26:	b10b      	cbz	r3, 800fb2c <gpio_stm32_manage_callback+0x5e>
	return 0;
 800fb28:	2000      	movs	r0, #0
 800fb2a:	e007      	b.n	800fb3c <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 800fb2c:	f8cc 1004 	str.w	r1, [ip, #4]
 800fb30:	2000      	movs	r0, #0
}
 800fb32:	e003      	b.n	800fb3c <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 800fb34:	f06f 0015 	mvn.w	r0, #21
 800fb38:	e000      	b.n	800fb3c <gpio_stm32_manage_callback+0x6e>
	return 0;
 800fb3a:	2000      	movs	r0, #0
}
 800fb3c:	bc10      	pop	{r4}
 800fb3e:	4770      	bx	lr

0800fb40 <gpio_stm32_configure_raw>:
{
 800fb40:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 800fb42:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800fb44:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 800fb46:	2001      	movs	r0, #1
 800fb48:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800fb4a:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800fb4e:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800fb52:	6865      	ldr	r5, [r4, #4]
 800fb54:	ea25 0500 	bic.w	r5, r5, r0
 800fb58:	408e      	lsls	r6, r1
 800fb5a:	4335      	orrs	r5, r6
 800fb5c:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800fb5e:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800fb62:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fb64:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800fb68:	2d00      	cmp	r5, #0
 800fb6a:	d04a      	beq.n	800fc02 <gpio_stm32_configure_raw+0xc2>
  return __builtin_clz(value);
 800fb6c:	fab5 f585 	clz	r5, r5
 800fb70:	006d      	lsls	r5, r5, #1
 800fb72:	2703      	movs	r7, #3
 800fb74:	fa07 f505 	lsl.w	r5, r7, r5
 800fb78:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fb7c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800fb80:	2d00      	cmp	r5, #0
 800fb82:	d040      	beq.n	800fc06 <gpio_stm32_configure_raw+0xc6>
  return __builtin_clz(value);
 800fb84:	fab5 f585 	clz	r5, r5
 800fb88:	006d      	lsls	r5, r5, #1
 800fb8a:	fa0e f505 	lsl.w	r5, lr, r5
 800fb8e:	4335      	orrs	r5, r6
 800fb90:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800fb92:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800fb96:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fb98:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800fb9c:	b3ad      	cbz	r5, 800fc0a <gpio_stm32_configure_raw+0xca>
  return __builtin_clz(value);
 800fb9e:	fab5 f585 	clz	r5, r5
 800fba2:	006d      	lsls	r5, r5, #1
 800fba4:	f04f 0e03 	mov.w	lr, #3
 800fba8:	fa0e f505 	lsl.w	r5, lr, r5
 800fbac:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fbb0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800fbb4:	b35d      	cbz	r5, 800fc0e <gpio_stm32_configure_raw+0xce>
  return __builtin_clz(value);
 800fbb6:	fab5 f585 	clz	r5, r5
 800fbba:	006d      	lsls	r5, r5, #1
 800fbbc:	fa02 f505 	lsl.w	r5, r2, r5
 800fbc0:	ea4e 0505 	orr.w	r5, lr, r5
 800fbc4:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 800fbc6:	f1bc 0f20 	cmp.w	ip, #32
 800fbca:	d022      	beq.n	800fc12 <gpio_stm32_configure_raw+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800fbcc:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800fbd0:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fbd2:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d052      	beq.n	800fc80 <gpio_stm32_configure_raw+0x140>
  return __builtin_clz(value);
 800fbda:	fab3 f383 	clz	r3, r3
 800fbde:	005b      	lsls	r3, r3, #1
 800fbe0:	2103      	movs	r1, #3
 800fbe2:	fa01 f303 	lsl.w	r3, r1, r3
 800fbe6:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fbea:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	d048      	beq.n	800fc84 <gpio_stm32_configure_raw+0x144>
  return __builtin_clz(value);
 800fbf2:	fab0 f080 	clz	r0, r0
 800fbf6:	0040      	lsls	r0, r0, #1
 800fbf8:	fa0c f000 	lsl.w	r0, ip, r0
 800fbfc:	4318      	orrs	r0, r3
 800fbfe:	6020      	str	r0, [r4, #0]
}
 800fc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800fc02:	2520      	movs	r5, #32
 800fc04:	e7b4      	b.n	800fb70 <gpio_stm32_configure_raw+0x30>
 800fc06:	2520      	movs	r5, #32
 800fc08:	e7be      	b.n	800fb88 <gpio_stm32_configure_raw+0x48>
 800fc0a:	2520      	movs	r5, #32
 800fc0c:	e7c9      	b.n	800fba2 <gpio_stm32_configure_raw+0x62>
 800fc0e:	2520      	movs	r5, #32
 800fc10:	e7d3      	b.n	800fbba <gpio_stm32_configure_raw+0x7a>
		if (pin < 8) {
 800fc12:	2907      	cmp	r1, #7
 800fc14:	dc19      	bgt.n	800fc4a <gpio_stm32_configure_raw+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800fc16:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fc18:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800fc1c:	b18a      	cbz	r2, 800fc42 <gpio_stm32_configure_raw+0x102>
  return __builtin_clz(value);
 800fc1e:	fab2 f282 	clz	r2, r2
 800fc22:	0092      	lsls	r2, r2, #2
 800fc24:	250f      	movs	r5, #15
 800fc26:	fa05 f202 	lsl.w	r2, r5, r2
 800fc2a:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fc2e:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800fc32:	b142      	cbz	r2, 800fc46 <gpio_stm32_configure_raw+0x106>
  return __builtin_clz(value);
 800fc34:	fab2 f282 	clz	r2, r2
 800fc38:	0092      	lsls	r2, r2, #2
 800fc3a:	4093      	lsls	r3, r2
 800fc3c:	430b      	orrs	r3, r1
 800fc3e:	6223      	str	r3, [r4, #32]
}
 800fc40:	e7c4      	b.n	800fbcc <gpio_stm32_configure_raw+0x8c>
    return 32U;
 800fc42:	2220      	movs	r2, #32
 800fc44:	e7ed      	b.n	800fc22 <gpio_stm32_configure_raw+0xe2>
 800fc46:	2220      	movs	r2, #32
 800fc48:	e7f6      	b.n	800fc38 <gpio_stm32_configure_raw+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800fc4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fc4c:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fc4e:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 800fc52:	b189      	cbz	r1, 800fc78 <gpio_stm32_configure_raw+0x138>
  return __builtin_clz(value);
 800fc54:	fab1 f181 	clz	r1, r1
 800fc58:	0089      	lsls	r1, r1, #2
 800fc5a:	260f      	movs	r6, #15
 800fc5c:	fa06 f101 	lsl.w	r1, r6, r1
 800fc60:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fc64:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800fc68:	b142      	cbz	r2, 800fc7c <gpio_stm32_configure_raw+0x13c>
  return __builtin_clz(value);
 800fc6a:	fab2 f282 	clz	r2, r2
 800fc6e:	0092      	lsls	r2, r2, #2
 800fc70:	4093      	lsls	r3, r2
 800fc72:	430b      	orrs	r3, r1
 800fc74:	6263      	str	r3, [r4, #36]	; 0x24
}
 800fc76:	e7a9      	b.n	800fbcc <gpio_stm32_configure_raw+0x8c>
    return 32U;
 800fc78:	2120      	movs	r1, #32
 800fc7a:	e7ed      	b.n	800fc58 <gpio_stm32_configure_raw+0x118>
 800fc7c:	2220      	movs	r2, #32
 800fc7e:	e7f6      	b.n	800fc6e <gpio_stm32_configure_raw+0x12e>
 800fc80:	2320      	movs	r3, #32
 800fc82:	e7ac      	b.n	800fbde <gpio_stm32_configure_raw+0x9e>
 800fc84:	2020      	movs	r0, #32
 800fc86:	e7b6      	b.n	800fbf6 <gpio_stm32_configure_raw+0xb6>

0800fc88 <gpio_stm32_config>:
{
 800fc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc8a:	b083      	sub	sp, #12
 800fc8c:	4607      	mov	r7, r0
 800fc8e:	460d      	mov	r5, r1
 800fc90:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 800fc92:	a901      	add	r1, sp, #4
 800fc94:	4610      	mov	r0, r2
 800fc96:	f7ff febf 	bl	800fa18 <gpio_stm32_flags_to_conf>
	if (err != 0) {
 800fc9a:	4606      	mov	r6, r0
 800fc9c:	b970      	cbnz	r0, 800fcbc <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 800fc9e:	f414 7f00 	tst.w	r4, #512	; 0x200
 800fca2:	d005      	beq.n	800fcb0 <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800fca4:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800fca8:	d10b      	bne.n	800fcc2 <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800fcaa:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800fcae:	d10e      	bne.n	800fcce <gpio_stm32_config+0x46>
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	9a01      	ldr	r2, [sp, #4]
 800fcb4:	4629      	mov	r1, r5
 800fcb6:	4638      	mov	r0, r7
 800fcb8:	f7ff ff42 	bl	800fb40 <gpio_stm32_configure_raw>
}
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	b003      	add	sp, #12
 800fcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800fcc2:	2101      	movs	r1, #1
 800fcc4:	40a9      	lsls	r1, r5
 800fcc6:	4638      	mov	r0, r7
 800fcc8:	f7ff fef0 	bl	800faac <gpio_stm32_port_set_bits_raw>
 800fccc:	e7f0      	b.n	800fcb0 <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800fcce:	2101      	movs	r1, #1
 800fcd0:	40a9      	lsls	r1, r5
 800fcd2:	4638      	mov	r0, r7
 800fcd4:	f7ff feef 	bl	800fab6 <gpio_stm32_port_clear_bits_raw>
 800fcd8:	e7ea      	b.n	800fcb0 <gpio_stm32_config+0x28>

0800fcda <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800fcda:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 800fcdc:	6902      	ldr	r2, [r0, #16]
	int ret;

	data->dev = dev;
 800fcde:	6050      	str	r0, [r2, #4]
	/* Cf: L4/L5 RM, Chapter "Independent I/O supply rail" */
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
 800fce0:	2101      	movs	r1, #1
 800fce2:	f7f6 fe63 	bl	80069ac <gpio_stm32_clock_request>
	if (ret < 0) {
 800fce6:	2800      	cmp	r0, #0
 800fce8:	db00      	blt.n	800fcec <gpio_stm32_init+0x12>
	}

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
 800fcea:	2000      	movs	r0, #0
}
 800fcec:	bd08      	pop	{r3, pc}

0800fcee <gpio_stm32_configure>:
{
 800fcee:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 800fcf0:	f7ff ff26 	bl	800fb40 <gpio_stm32_configure_raw>
}
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	bd08      	pop	{r3, pc}

0800fcf8 <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 800fcf8:	6d83      	ldr	r3, [r0, #88]	; 0x58
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800fcfa:	b91b      	cbnz	r3, 800fd04 <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 800fcfc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800fcfe:	b91b      	cbnz	r3, 800fd08 <spi_stm32_transfer_ongoing+0x10>
 800fd00:	2000      	movs	r0, #0
 800fd02:	4770      	bx	lr
 800fd04:	2001      	movs	r0, #1
 800fd06:	4770      	bx	lr
 800fd08:	2001      	movs	r0, #1
}
 800fd0a:	4770      	bx	lr

0800fd0c <z_log_msg2_runtime_create>:
{
 800fd0c:	b510      	push	{r4, lr}
 800fd0e:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800fd10:	ac0a      	add	r4, sp, #40	; 0x28
 800fd12:	9405      	str	r4, [sp, #20]
 800fd14:	9402      	str	r4, [sp, #8]
 800fd16:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fd18:	9401      	str	r4, [sp, #4]
 800fd1a:	9c08      	ldr	r4, [sp, #32]
 800fd1c:	9400      	str	r4, [sp, #0]
 800fd1e:	f7ff fb40 	bl	800f3a2 <z_impl_z_log_msg2_runtime_vcreate>
}
 800fd22:	b006      	add	sp, #24
 800fd24:	bd10      	pop	{r4, pc}

0800fd26 <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 800fd26:	b508      	push	{r3, lr}
 800fd28:	2200      	movs	r2, #0
 800fd2a:	2105      	movs	r1, #5
 800fd2c:	2023      	movs	r0, #35	; 0x23
 800fd2e:	f7f4 fc8b 	bl	8004648 <z_arm_irq_priority_set>
 800fd32:	2023      	movs	r0, #35	; 0x23
 800fd34:	f7f4 fc58 	bl	80045e8 <arch_irq_enable>
 800fd38:	bd08      	pop	{r3, pc}

0800fd3a <spi_stm32_release>:
{
 800fd3a:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 800fd3c:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 800fd3e:	6823      	ldr	r3, [r4, #0]
 800fd40:	b1c3      	cbz	r3, 800fd74 <spi_stm32_release+0x3a>
 800fd42:	689b      	ldr	r3, [r3, #8]
 800fd44:	b1b3      	cbz	r3, 800fd74 <spi_stm32_release+0x3a>
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	b1a2      	cbz	r2, 800fd74 <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 800fd4a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 800fd4c:	f7fc fe32 	bl	800c9b4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 800fd50:	6823      	ldr	r3, [r4, #0]
 800fd52:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 800fd54:	6818      	ldr	r0, [r3, #0]
 800fd56:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 800fd58:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	408b      	lsls	r3, r1
 800fd60:	421a      	tst	r2, r3
 800fd62:	d10b      	bne.n	800fd7c <spi_stm32_release+0x42>
 800fd64:	2300      	movs	r3, #0
	if (value != 0)	{
 800fd66:	b15b      	cbz	r3, 800fd80 <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800fd68:	2301      	movs	r3, #1
 800fd6a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800fd6e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	4798      	blx	r3
 800fd74:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
 800fd76:	b153      	cbz	r3, 800fd8e <spi_stm32_release+0x54>
}
 800fd78:	2000      	movs	r0, #0
 800fd7a:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	e7f2      	b.n	800fd66 <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800fd80:	2301      	movs	r3, #1
 800fd82:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800fd86:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800fd88:	691b      	ldr	r3, [r3, #16]
 800fd8a:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 800fd8c:	e7f2      	b.n	800fd74 <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 800fd8e:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800fd90:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 800fd94:	f7fb fed2 	bl	800bb3c <z_impl_k_sem_give>
}
 800fd98:	e7ee      	b.n	800fd78 <spi_stm32_release+0x3e>

0800fd9a <spi_stm32_cs_control>:
{
 800fd9a:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 800fd9c:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 800fd9e:	6823      	ldr	r3, [r4, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d034      	beq.n	800fe0e <spi_stm32_cs_control+0x74>
 800fda4:	689a      	ldr	r2, [r3, #8]
 800fda6:	2a00      	cmp	r2, #0
 800fda8:	d031      	beq.n	800fe0e <spi_stm32_cs_control+0x74>
 800fdaa:	6810      	ldr	r0, [r2, #0]
 800fdac:	2800      	cmp	r0, #0
 800fdae:	d02e      	beq.n	800fe0e <spi_stm32_cs_control+0x74>
		if (on) {
 800fdb0:	b9c9      	cbnz	r1, 800fde6 <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 800fdb2:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 800fdb4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800fdb8:	d129      	bne.n	800fe0e <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 800fdba:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
 800fdbc:	f7fc fdfa 	bl	800c9b4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 800fdc0:	6823      	ldr	r3, [r4, #0]
 800fdc2:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 800fdc4:	6818      	ldr	r0, [r3, #0]
 800fdc6:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 800fdc8:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	2301      	movs	r3, #1
 800fdce:	408b      	lsls	r3, r1
 800fdd0:	421a      	tst	r2, r3
 800fdd2:	d126      	bne.n	800fe22 <spi_stm32_cs_control+0x88>
 800fdd4:	2300      	movs	r3, #0
	if (value != 0)	{
 800fdd6:	b333      	cbz	r3, 800fe26 <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800fdd8:	2301      	movs	r3, #1
 800fdda:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800fdde:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	4798      	blx	r3
 800fde4:	e013      	b.n	800fe0e <spi_stm32_cs_control+0x74>
	return gpio_pin_set(spec->port, spec->pin, value);
 800fde6:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_data *const data =
 800fde8:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	2301      	movs	r3, #1
 800fdee:	408b      	lsls	r3, r1
 800fdf0:	421a      	tst	r2, r3
 800fdf2:	d10d      	bne.n	800fe10 <spi_stm32_cs_control+0x76>
 800fdf4:	2301      	movs	r3, #1
	if (value != 0)	{
 800fdf6:	b16b      	cbz	r3, 800fe14 <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800fdfe:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 800fe04:	6823      	ldr	r3, [r4, #0]
 800fe06:	689b      	ldr	r3, [r3, #8]
 800fe08:	6898      	ldr	r0, [r3, #8]
 800fe0a:	f7fc fdd3 	bl	800c9b4 <z_impl_k_busy_wait>
}
 800fe0e:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800fe10:	2300      	movs	r3, #0
 800fe12:	e7f0      	b.n	800fdf6 <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800fe14:	2301      	movs	r3, #1
 800fe16:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800fe1a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800fe1c:	691b      	ldr	r3, [r3, #16]
 800fe1e:	4798      	blx	r3
 800fe20:	e7f0      	b.n	800fe04 <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 800fe22:	2301      	movs	r3, #1
 800fe24:	e7d7      	b.n	800fdd6 <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800fe26:	2301      	movs	r3, #1
 800fe28:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800fe2c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800fe2e:	691b      	ldr	r3, [r3, #16]
 800fe30:	4798      	blx	r3
 800fe32:	e7ec      	b.n	800fe0e <spi_stm32_cs_control+0x74>

0800fe34 <spi_stm32_complete>:
{
 800fe34:	b570      	push	{r4, r5, r6, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	460e      	mov	r6, r1
	const struct spi_stm32_config *cfg = dev->config;
 800fe3a:	6842      	ldr	r2, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 800fe3c:	6894      	ldr	r4, [r2, #8]
	struct spi_stm32_data *data = dev->data;
 800fe3e:	6905      	ldr	r5, [r0, #16]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800fe40:	6863      	ldr	r3, [r4, #4]
 800fe42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe46:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800fe48:	6863      	ldr	r3, [r4, #4]
 800fe4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe4e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 800fe50:	6863      	ldr	r3, [r4, #4]
 800fe52:	f023 0320 	bic.w	r3, r3, #32
 800fe56:	6063      	str	r3, [r4, #4]
	spi_stm32_cs_control(dev, false);
 800fe58:	2100      	movs	r1, #0
 800fe5a:	f7ff ff9e 	bl	800fd9a <spi_stm32_cs_control>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800fe5e:	68a3      	ldr	r3, [r4, #8]
 800fe60:	f013 0f01 	tst.w	r3, #1
 800fe64:	d001      	beq.n	800fe6a <spi_stm32_complete+0x36>
  return (uint8_t)(READ_REG(SPIx->DR));
 800fe66:	68e3      	ldr	r3, [r4, #12]
 800fe68:	e7f9      	b.n	800fe5e <spi_stm32_complete+0x2a>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800fe6a:	6823      	ldr	r3, [r4, #0]
 800fe6c:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800fe70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fe74:	d015      	beq.n	800fea2 <spi_stm32_complete+0x6e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800fe76:	68a3      	ldr	r3, [r4, #8]
 800fe78:	f013 0f20 	tst.w	r3, #32
 800fe7c:	d006      	beq.n	800fe8c <spi_stm32_complete+0x58>
  tmpreg_sr = SPIx->SR;
 800fe7e:	68a3      	ldr	r3, [r4, #8]
 800fe80:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 800fe82:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800fe84:	6823      	ldr	r3, [r4, #0]
 800fe86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe8a:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800fe8c:	6823      	ldr	r3, [r4, #0]
 800fe8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe92:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 800fe94:	642e      	str	r6, [r5, #64]	; 0x40
	k_sem_give(&ctx->sync);
 800fe96:	f105 0028 	add.w	r0, r5, #40	; 0x28
	z_impl_k_sem_give(sem);
 800fe9a:	f7fb fe4f 	bl	800bb3c <z_impl_k_sem_give>
}
 800fe9e:	b002      	add	sp, #8
 800fea0:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800fea2:	68a3      	ldr	r3, [r4, #8]
 800fea4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fea8:	d1fb      	bne.n	800fea2 <spi_stm32_complete+0x6e>
 800feaa:	e7e4      	b.n	800fe76 <spi_stm32_complete+0x42>

0800feac <spi_stm32_transceive>:
{
 800feac:	b510      	push	{r4, lr}
 800feae:	b082      	sub	sp, #8
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 800feb0:	2400      	movs	r4, #0
 800feb2:	9401      	str	r4, [sp, #4]
 800feb4:	9400      	str	r4, [sp, #0]
 800feb6:	f7f7 f88d 	bl	8006fd4 <transceive>
}
 800feba:	b002      	add	sp, #8
 800febc:	bd10      	pop	{r4, pc}

0800febe <spi_stm32_shift_m>:
{
 800febe:	b430      	push	{r4, r5}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800fec0:	6883      	ldr	r3, [r0, #8]
 800fec2:	f013 0f02 	tst.w	r3, #2
 800fec6:	d0fb      	beq.n	800fec0 <spi_stm32_shift_m+0x2>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800fec8:	680b      	ldr	r3, [r1, #0]
 800feca:	889b      	ldrh	r3, [r3, #4]
 800fecc:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800fed0:	2b08      	cmp	r3, #8
 800fed2:	d009      	beq.n	800fee8 <spi_stm32_shift_m+0x2a>
	return !!(ctx->tx_buf && ctx->tx_len);
 800fed4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d03d      	beq.n	800ff56 <spi_stm32_shift_m+0x98>
 800feda:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800fedc:	2a00      	cmp	r2, #0
 800fede:	d13c      	bne.n	800ff5a <spi_stm32_shift_m+0x9c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800fee0:	2a00      	cmp	r2, #0
 800fee2:	d03c      	beq.n	800ff5e <spi_stm32_shift_m+0xa0>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800fee4:	881b      	ldrh	r3, [r3, #0]
 800fee6:	e03b      	b.n	800ff60 <spi_stm32_shift_m+0xa2>
 800fee8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800feea:	b18b      	cbz	r3, 800ff10 <spi_stm32_shift_m+0x52>
 800feec:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800feee:	b98a      	cbnz	r2, 800ff14 <spi_stm32_shift_m+0x56>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800fef0:	b192      	cbz	r2, 800ff18 <spi_stm32_shift_m+0x5a>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800fef2:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 800fef4:	b2db      	uxtb	r3, r3
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 800fef6:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800fef8:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d03a      	beq.n	800ff74 <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 800fefe:	3b01      	subs	r3, #1
 800ff00:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800ff02:	b15b      	cbz	r3, 800ff1c <spi_stm32_shift_m+0x5e>
	} else if (ctx->tx_buf) {
 800ff04:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d034      	beq.n	800ff74 <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	654b      	str	r3, [r1, #84]	; 0x54
 800ff0e:	e031      	b.n	800ff74 <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 800ff10:	2200      	movs	r2, #0
 800ff12:	e7ed      	b.n	800fef0 <spi_stm32_shift_m+0x32>
 800ff14:	2201      	movs	r2, #1
 800ff16:	e7eb      	b.n	800fef0 <spi_stm32_shift_m+0x32>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	e7eb      	b.n	800fef4 <spi_stm32_shift_m+0x36>
		++ctx->current_tx;
 800ff1c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ff1e:	3308      	adds	r3, #8
 800ff20:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800ff22:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800ff24:	3b01      	subs	r3, #1
 800ff26:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800ff28:	f101 0444 	add.w	r4, r1, #68	; 0x44
 800ff2c:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800ff30:	e004      	b.n	800ff3c <spi_stm32_shift_m+0x7e>
		++(*current);
 800ff32:	3308      	adds	r3, #8
 800ff34:	6023      	str	r3, [r4, #0]
		--(*count);
 800ff36:	6813      	ldr	r3, [r2, #0]
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	6013      	str	r3, [r2, #0]
	while (*count) {
 800ff3c:	6813      	ldr	r3, [r2, #0]
 800ff3e:	b13b      	cbz	r3, 800ff50 <spi_stm32_shift_m+0x92>
		if (((*current)->len / dfs) != 0) {
 800ff40:	6823      	ldr	r3, [r4, #0]
 800ff42:	685d      	ldr	r5, [r3, #4]
 800ff44:	2d00      	cmp	r5, #0
 800ff46:	d0f4      	beq.n	800ff32 <spi_stm32_shift_m+0x74>
			*buf_len = (*current)->len / dfs;
 800ff48:	658d      	str	r5, [r1, #88]	; 0x58
			return (*current)->buf;
 800ff4a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	e000      	b.n	800ff52 <spi_stm32_shift_m+0x94>
	*buf_len = 0;
 800ff50:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800ff52:	654b      	str	r3, [r1, #84]	; 0x54
 800ff54:	e00e      	b.n	800ff74 <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 800ff56:	2200      	movs	r2, #0
 800ff58:	e7c2      	b.n	800fee0 <spi_stm32_shift_m+0x22>
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	e7c0      	b.n	800fee0 <spi_stm32_shift_m+0x22>
 800ff5e:	2300      	movs	r3, #0
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800ff60:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800ff62:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800ff64:	b133      	cbz	r3, 800ff74 <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 800ff66:	3b01      	subs	r3, #1
 800ff68:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800ff6a:	b31b      	cbz	r3, 800ffb4 <spi_stm32_shift_m+0xf6>
	} else if (ctx->tx_buf) {
 800ff6c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ff6e:	b10b      	cbz	r3, 800ff74 <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 800ff70:	3302      	adds	r3, #2
 800ff72:	654b      	str	r3, [r1, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800ff74:	6883      	ldr	r3, [r0, #8]
 800ff76:	f013 0f01 	tst.w	r3, #1
 800ff7a:	d0fb      	beq.n	800ff74 <spi_stm32_shift_m+0xb6>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800ff7c:	680b      	ldr	r3, [r1, #0]
 800ff7e:	889b      	ldrh	r3, [r3, #4]
 800ff80:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800ff84:	2b08      	cmp	r3, #8
 800ff86:	d035      	beq.n	800fff4 <spi_stm32_shift_m+0x136>
  return (uint16_t)(READ_REG(SPIx->DR));
 800ff88:	68c3      	ldr	r3, [r0, #12]
 800ff8a:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800ff8c:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800ff8e:	2a00      	cmp	r2, #0
 800ff90:	d065      	beq.n	801005e <spi_stm32_shift_m+0x1a0>
 800ff92:	6e08      	ldr	r0, [r1, #96]	; 0x60
 800ff94:	2800      	cmp	r0, #0
 800ff96:	d164      	bne.n	8010062 <spi_stm32_shift_m+0x1a4>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800ff98:	b100      	cbz	r0, 800ff9c <spi_stm32_shift_m+0xde>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800ff9a:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 800ff9c:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800ff9e:	b13b      	cbz	r3, 800ffb0 <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 800ffa0:	3b01      	subs	r3, #1
 800ffa2:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d05e      	beq.n	8010066 <spi_stm32_shift_m+0x1a8>
	} else if (ctx->rx_buf) {
 800ffa8:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800ffaa:	b10b      	cbz	r3, 800ffb0 <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 800ffac:	3302      	adds	r3, #2
 800ffae:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 800ffb0:	bc30      	pop	{r4, r5}
 800ffb2:	4770      	bx	lr
		++ctx->current_tx;
 800ffb4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ffb6:	3308      	adds	r3, #8
 800ffb8:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800ffba:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800ffbc:	3b01      	subs	r3, #1
 800ffbe:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800ffc0:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 800ffc4:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800ffc8:	e005      	b.n	800ffd6 <spi_stm32_shift_m+0x118>
		++(*current);
 800ffca:	3308      	adds	r3, #8
 800ffcc:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 800ffd0:	6813      	ldr	r3, [r2, #0]
 800ffd2:	3b01      	subs	r3, #1
 800ffd4:	6013      	str	r3, [r2, #0]
	while (*count) {
 800ffd6:	6813      	ldr	r3, [r2, #0]
 800ffd8:	b14b      	cbz	r3, 800ffee <spi_stm32_shift_m+0x130>
		if (((*current)->len / dfs) != 0) {
 800ffda:	f8dc 3000 	ldr.w	r3, [ip]
 800ffde:	685c      	ldr	r4, [r3, #4]
 800ffe0:	2c01      	cmp	r4, #1
 800ffe2:	d9f2      	bls.n	800ffca <spi_stm32_shift_m+0x10c>
			*buf_len = (*current)->len / dfs;
 800ffe4:	0864      	lsrs	r4, r4, #1
 800ffe6:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 800ffe8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	e000      	b.n	800fff0 <spi_stm32_shift_m+0x132>
	*buf_len = 0;
 800ffee:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800fff0:	654b      	str	r3, [r1, #84]	; 0x54
 800fff2:	e7bf      	b.n	800ff74 <spi_stm32_shift_m+0xb6>
  return (uint8_t)(READ_REG(SPIx->DR));
 800fff4:	68c3      	ldr	r3, [r0, #12]
 800fff6:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 800fff8:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800fffa:	b17a      	cbz	r2, 801001c <spi_stm32_shift_m+0x15e>
 800fffc:	6e08      	ldr	r0, [r1, #96]	; 0x60
 800fffe:	b978      	cbnz	r0, 8010020 <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 8010000:	b100      	cbz	r0, 8010004 <spi_stm32_shift_m+0x146>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8010002:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 8010004:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 8010006:	2b00      	cmp	r3, #0
 8010008:	d0d2      	beq.n	800ffb0 <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 801000a:	3b01      	subs	r3, #1
 801000c:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 801000e:	b14b      	cbz	r3, 8010024 <spi_stm32_shift_m+0x166>
	} else if (ctx->rx_buf) {
 8010010:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8010012:	2b00      	cmp	r3, #0
 8010014:	d0cc      	beq.n	800ffb0 <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 8010016:	3301      	adds	r3, #1
 8010018:	65cb      	str	r3, [r1, #92]	; 0x5c
 801001a:	e7c9      	b.n	800ffb0 <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 801001c:	2000      	movs	r0, #0
 801001e:	e7ef      	b.n	8010000 <spi_stm32_shift_m+0x142>
 8010020:	2001      	movs	r0, #1
 8010022:	e7ed      	b.n	8010000 <spi_stm32_shift_m+0x142>
		++ctx->current_rx;
 8010024:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010026:	3308      	adds	r3, #8
 8010028:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 801002a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 801002c:	3b01      	subs	r3, #1
 801002e:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 8010030:	f101 004c 	add.w	r0, r1, #76	; 0x4c
 8010034:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 8010038:	e004      	b.n	8010044 <spi_stm32_shift_m+0x186>
		++(*current);
 801003a:	3308      	adds	r3, #8
 801003c:	6003      	str	r3, [r0, #0]
		--(*count);
 801003e:	6813      	ldr	r3, [r2, #0]
 8010040:	3b01      	subs	r3, #1
 8010042:	6013      	str	r3, [r2, #0]
	while (*count) {
 8010044:	6813      	ldr	r3, [r2, #0]
 8010046:	b13b      	cbz	r3, 8010058 <spi_stm32_shift_m+0x19a>
		if (((*current)->len / dfs) != 0) {
 8010048:	6803      	ldr	r3, [r0, #0]
 801004a:	685c      	ldr	r4, [r3, #4]
 801004c:	2c00      	cmp	r4, #0
 801004e:	d0f4      	beq.n	801003a <spi_stm32_shift_m+0x17c>
			*buf_len = (*current)->len / dfs;
 8010050:	660c      	str	r4, [r1, #96]	; 0x60
			return (*current)->buf;
 8010052:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	e000      	b.n	801005a <spi_stm32_shift_m+0x19c>
	*buf_len = 0;
 8010058:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 801005a:	65cb      	str	r3, [r1, #92]	; 0x5c
 801005c:	e7a8      	b.n	800ffb0 <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 801005e:	2000      	movs	r0, #0
 8010060:	e79a      	b.n	800ff98 <spi_stm32_shift_m+0xda>
 8010062:	2001      	movs	r0, #1
 8010064:	e798      	b.n	800ff98 <spi_stm32_shift_m+0xda>
		++ctx->current_rx;
 8010066:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010068:	3308      	adds	r3, #8
 801006a:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 801006c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 801006e:	3b01      	subs	r3, #1
 8010070:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 8010072:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 8010076:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 801007a:	e004      	b.n	8010086 <spi_stm32_shift_m+0x1c8>
		++(*current);
 801007c:	3308      	adds	r3, #8
 801007e:	6023      	str	r3, [r4, #0]
		--(*count);
 8010080:	6813      	ldr	r3, [r2, #0]
 8010082:	3b01      	subs	r3, #1
 8010084:	6013      	str	r3, [r2, #0]
	while (*count) {
 8010086:	6813      	ldr	r3, [r2, #0]
 8010088:	b143      	cbz	r3, 801009c <spi_stm32_shift_m+0x1de>
		if (((*current)->len / dfs) != 0) {
 801008a:	6823      	ldr	r3, [r4, #0]
 801008c:	6858      	ldr	r0, [r3, #4]
 801008e:	2801      	cmp	r0, #1
 8010090:	d9f4      	bls.n	801007c <spi_stm32_shift_m+0x1be>
			*buf_len = (*current)->len / dfs;
 8010092:	0840      	lsrs	r0, r0, #1
 8010094:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 8010096:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	e000      	b.n	801009e <spi_stm32_shift_m+0x1e0>
	*buf_len = 0;
 801009c:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 801009e:	65cb      	str	r3, [r1, #92]	; 0x5c
 80100a0:	e786      	b.n	800ffb0 <spi_stm32_shift_m+0xf2>

080100a2 <spi_stm32_shift_s>:
{
 80100a2:	b410      	push	{r4}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80100a4:	6883      	ldr	r3, [r0, #8]
 80100a6:	f013 0f02 	tst.w	r3, #2
 80100aa:	d065      	beq.n	8010178 <spi_stm32_shift_s+0xd6>
	return !!(ctx->tx_len);
 80100ac:	6d8b      	ldr	r3, [r1, #88]	; 0x58
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d062      	beq.n	8010178 <spi_stm32_shift_s+0xd6>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80100b2:	680b      	ldr	r3, [r1, #0]
 80100b4:	889b      	ldrh	r3, [r3, #4]
 80100b6:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80100ba:	2b08      	cmp	r3, #8
 80100bc:	d00f      	beq.n	80100de <spi_stm32_shift_s+0x3c>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 80100be:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80100c0:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 80100c2:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 80100c4:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d05a      	beq.n	8010180 <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 80100ca:	3b01      	subs	r3, #1
 80100cc:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d032      	beq.n	8010138 <spi_stm32_shift_s+0x96>
	} else if (ctx->tx_buf) {
 80100d2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d053      	beq.n	8010180 <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 80100d8:	3302      	adds	r3, #2
 80100da:	654b      	str	r3, [r1, #84]	; 0x54
 80100dc:	e050      	b.n	8010180 <spi_stm32_shift_s+0xde>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80100de:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80100e0:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 80100e2:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 80100e4:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d04a      	beq.n	8010180 <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 80100ea:	3b01      	subs	r3, #1
 80100ec:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 80100ee:	b12b      	cbz	r3, 80100fc <spi_stm32_shift_s+0x5a>
	} else if (ctx->tx_buf) {
 80100f0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d044      	beq.n	8010180 <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 80100f6:	3301      	adds	r3, #1
 80100f8:	654b      	str	r3, [r1, #84]	; 0x54
 80100fa:	e041      	b.n	8010180 <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 80100fc:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80100fe:	3308      	adds	r3, #8
 8010100:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 8010102:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8010104:	3b01      	subs	r3, #1
 8010106:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 8010108:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 801010c:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 8010110:	6813      	ldr	r3, [r2, #0]
 8010112:	b173      	cbz	r3, 8010132 <spi_stm32_shift_s+0x90>
		if (((*current)->len / dfs) != 0) {
 8010114:	f8dc 3000 	ldr.w	r3, [ip]
 8010118:	685c      	ldr	r4, [r3, #4]
 801011a:	b934      	cbnz	r4, 801012a <spi_stm32_shift_s+0x88>
		++(*current);
 801011c:	3308      	adds	r3, #8
 801011e:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 8010122:	6813      	ldr	r3, [r2, #0]
 8010124:	3b01      	subs	r3, #1
 8010126:	6013      	str	r3, [r2, #0]
 8010128:	e7f2      	b.n	8010110 <spi_stm32_shift_s+0x6e>
			*buf_len = (*current)->len / dfs;
 801012a:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 801012c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	e000      	b.n	8010134 <spi_stm32_shift_s+0x92>
	*buf_len = 0;
 8010132:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8010134:	654b      	str	r3, [r1, #84]	; 0x54
 8010136:	e023      	b.n	8010180 <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 8010138:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 801013a:	3308      	adds	r3, #8
 801013c:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 801013e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8010140:	3b01      	subs	r3, #1
 8010142:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 8010144:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 8010148:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 801014c:	6813      	ldr	r3, [r2, #0]
 801014e:	b183      	cbz	r3, 8010172 <spi_stm32_shift_s+0xd0>
		if (((*current)->len / dfs) != 0) {
 8010150:	f8dc 3000 	ldr.w	r3, [ip]
 8010154:	685c      	ldr	r4, [r3, #4]
 8010156:	2c01      	cmp	r4, #1
 8010158:	d806      	bhi.n	8010168 <spi_stm32_shift_s+0xc6>
		++(*current);
 801015a:	3308      	adds	r3, #8
 801015c:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 8010160:	6813      	ldr	r3, [r2, #0]
 8010162:	3b01      	subs	r3, #1
 8010164:	6013      	str	r3, [r2, #0]
 8010166:	e7f1      	b.n	801014c <spi_stm32_shift_s+0xaa>
			*buf_len = (*current)->len / dfs;
 8010168:	0864      	lsrs	r4, r4, #1
 801016a:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 801016c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	e000      	b.n	8010174 <spi_stm32_shift_s+0xd2>
	*buf_len = 0;
 8010172:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8010174:	654b      	str	r3, [r1, #84]	; 0x54
 8010176:	e003      	b.n	8010180 <spi_stm32_shift_s+0xde>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8010178:	6843      	ldr	r3, [r0, #4]
 801017a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801017e:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8010180:	6883      	ldr	r3, [r0, #8]
 8010182:	f013 0f01 	tst.w	r3, #1
 8010186:	d016      	beq.n	80101b6 <spi_stm32_shift_s+0x114>
	return !!(ctx->rx_buf && ctx->rx_len);
 8010188:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 801018a:	b1b3      	cbz	r3, 80101ba <spi_stm32_shift_s+0x118>
 801018c:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 801018e:	b9b2      	cbnz	r2, 80101be <spi_stm32_shift_s+0x11c>
	if (ll_func_rx_is_not_empty(spi) &&
 8010190:	b18a      	cbz	r2, 80101b6 <spi_stm32_shift_s+0x114>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8010192:	680a      	ldr	r2, [r1, #0]
 8010194:	8892      	ldrh	r2, [r2, #4]
 8010196:	f3c2 1245 	ubfx	r2, r2, #5, #6
 801019a:	2a08      	cmp	r2, #8
 801019c:	d011      	beq.n	80101c2 <spi_stm32_shift_s+0x120>
  return (uint16_t)(READ_REG(SPIx->DR));
 801019e:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 80101a0:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 80101a2:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 80101a4:	b13b      	cbz	r3, 80101b6 <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 80101a6:	3b01      	subs	r3, #1
 80101a8:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d033      	beq.n	8010216 <spi_stm32_shift_s+0x174>
	} else if (ctx->rx_buf) {
 80101ae:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80101b0:	b10b      	cbz	r3, 80101b6 <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 80101b2:	3302      	adds	r3, #2
 80101b4:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 80101b6:	bc10      	pop	{r4}
 80101b8:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 80101ba:	2200      	movs	r2, #0
 80101bc:	e7e8      	b.n	8010190 <spi_stm32_shift_s+0xee>
 80101be:	2201      	movs	r2, #1
 80101c0:	e7e6      	b.n	8010190 <spi_stm32_shift_s+0xee>
  return (uint8_t)(READ_REG(SPIx->DR));
 80101c2:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 80101c4:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 80101c6:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d0f4      	beq.n	80101b6 <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 80101cc:	3b01      	subs	r3, #1
 80101ce:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 80101d0:	b12b      	cbz	r3, 80101de <spi_stm32_shift_s+0x13c>
	} else if (ctx->rx_buf) {
 80101d2:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d0ee      	beq.n	80101b6 <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 80101d8:	3301      	adds	r3, #1
 80101da:	65cb      	str	r3, [r1, #92]	; 0x5c
 80101dc:	e7eb      	b.n	80101b6 <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 80101de:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80101e0:	3308      	adds	r3, #8
 80101e2:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 80101e4:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80101e6:	3b01      	subs	r3, #1
 80101e8:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 80101ea:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 80101ee:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 80101f2:	6813      	ldr	r3, [r2, #0]
 80101f4:	b163      	cbz	r3, 8010210 <spi_stm32_shift_s+0x16e>
		if (((*current)->len / dfs) != 0) {
 80101f6:	6823      	ldr	r3, [r4, #0]
 80101f8:	6858      	ldr	r0, [r3, #4]
 80101fa:	b928      	cbnz	r0, 8010208 <spi_stm32_shift_s+0x166>
		++(*current);
 80101fc:	3308      	adds	r3, #8
 80101fe:	6023      	str	r3, [r4, #0]
		--(*count);
 8010200:	6813      	ldr	r3, [r2, #0]
 8010202:	3b01      	subs	r3, #1
 8010204:	6013      	str	r3, [r2, #0]
 8010206:	e7f4      	b.n	80101f2 <spi_stm32_shift_s+0x150>
			*buf_len = (*current)->len / dfs;
 8010208:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 801020a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	e000      	b.n	8010212 <spi_stm32_shift_s+0x170>
	*buf_len = 0;
 8010210:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 8010212:	65cb      	str	r3, [r1, #92]	; 0x5c
 8010214:	e7cf      	b.n	80101b6 <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 8010216:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010218:	3308      	adds	r3, #8
 801021a:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 801021c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 801021e:	3b01      	subs	r3, #1
 8010220:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 8010222:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 8010226:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 801022a:	6813      	ldr	r3, [r2, #0]
 801022c:	b173      	cbz	r3, 801024c <spi_stm32_shift_s+0x1aa>
		if (((*current)->len / dfs) != 0) {
 801022e:	6823      	ldr	r3, [r4, #0]
 8010230:	6858      	ldr	r0, [r3, #4]
 8010232:	2801      	cmp	r0, #1
 8010234:	d805      	bhi.n	8010242 <spi_stm32_shift_s+0x1a0>
		++(*current);
 8010236:	3308      	adds	r3, #8
 8010238:	6023      	str	r3, [r4, #0]
		--(*count);
 801023a:	6813      	ldr	r3, [r2, #0]
 801023c:	3b01      	subs	r3, #1
 801023e:	6013      	str	r3, [r2, #0]
 8010240:	e7f3      	b.n	801022a <spi_stm32_shift_s+0x188>
			*buf_len = (*current)->len / dfs;
 8010242:	0840      	lsrs	r0, r0, #1
 8010244:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 8010246:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	e000      	b.n	801024e <spi_stm32_shift_s+0x1ac>
	*buf_len = 0;
 801024c:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 801024e:	65cb      	str	r3, [r1, #92]	; 0x5c
 8010250:	e7b1      	b.n	80101b6 <spi_stm32_shift_s+0x114>

08010252 <spi_stm32_shift_frames>:
{
 8010252:	b510      	push	{r4, lr}
 8010254:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 8010256:	680b      	ldr	r3, [r1, #0]
 8010258:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 801025a:	f013 0f01 	tst.w	r3, #1
 801025e:	d105      	bne.n	801026c <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 8010260:	f7ff fe2d 	bl	800febe <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 8010264:	4620      	mov	r0, r4
 8010266:	f7f6 fc31 	bl	8006acc <spi_stm32_get_err>
}
 801026a:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 801026c:	f7ff ff19 	bl	80100a2 <spi_stm32_shift_s>
 8010270:	e7f8      	b.n	8010264 <spi_stm32_shift_frames+0x12>

08010272 <spi_stm32_isr>:
{
 8010272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010274:	4604      	mov	r4, r0
	const struct spi_stm32_config *cfg = dev->config;
 8010276:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8010278:	6906      	ldr	r6, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 801027a:	689f      	ldr	r7, [r3, #8]
	err = spi_stm32_get_err(spi);
 801027c:	4638      	mov	r0, r7
 801027e:	f7f6 fc25 	bl	8006acc <spi_stm32_get_err>
	if (err) {
 8010282:	4605      	mov	r5, r0
 8010284:	b968      	cbnz	r0, 80102a2 <spi_stm32_isr+0x30>
	if (spi_stm32_transfer_ongoing(data)) {
 8010286:	4630      	mov	r0, r6
 8010288:	f7ff fd36 	bl	800fcf8 <spi_stm32_transfer_ongoing>
 801028c:	b970      	cbnz	r0, 80102ac <spi_stm32_isr+0x3a>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 801028e:	b91d      	cbnz	r5, 8010298 <spi_stm32_isr+0x26>
 8010290:	4630      	mov	r0, r6
 8010292:	f7ff fd31 	bl	800fcf8 <spi_stm32_transfer_ongoing>
 8010296:	b918      	cbnz	r0, 80102a0 <spi_stm32_isr+0x2e>
		spi_stm32_complete(dev, err);
 8010298:	4629      	mov	r1, r5
 801029a:	4620      	mov	r0, r4
 801029c:	f7ff fdca 	bl	800fe34 <spi_stm32_complete>
}
 80102a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_stm32_complete(dev, err);
 80102a2:	4601      	mov	r1, r0
 80102a4:	4620      	mov	r0, r4
 80102a6:	f7ff fdc5 	bl	800fe34 <spi_stm32_complete>
		return;
 80102aa:	e7f9      	b.n	80102a0 <spi_stm32_isr+0x2e>
		err = spi_stm32_shift_frames(spi, data);
 80102ac:	4631      	mov	r1, r6
 80102ae:	4638      	mov	r0, r7
 80102b0:	f7ff ffcf 	bl	8010252 <spi_stm32_shift_frames>
 80102b4:	4605      	mov	r5, r0
 80102b6:	e7ea      	b.n	801028e <spi_stm32_isr+0x1c>

080102b8 <timer_work_handler>:
{
 80102b8:	b508      	push	{r3, lr}
	TimerIrqHandler();
 80102ba:	f7f8 f849 	bl	8008350 <TimerIrqHandler>
}
 80102be:	bd08      	pop	{r3, pc}

080102c0 <RtcGetTimerValue>:
{
 80102c0:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80102c2:	f000 ff3d 	bl	8011140 <z_impl_k_uptime_ticks>
 80102c6:	220a      	movs	r2, #10
 80102c8:	2300      	movs	r3, #0
 80102ca:	f7f0 fb87 	bl	80009dc <__aeabi_uldivmod>
}
 80102ce:	bd08      	pop	{r3, pc}

080102d0 <RtcGetMinimumTimeout>:
}
 80102d0:	2001      	movs	r0, #1
 80102d2:	4770      	bx	lr

080102d4 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
 80102d4:	b508      	push	{r3, lr}
			return t * ((uint64_t)to_hz / from_hz);
 80102d6:	0f81      	lsrs	r1, r0, #30
 80102d8:	0083      	lsls	r3, r0, #2
 80102da:	1818      	adds	r0, r3, r0
 80102dc:	f141 0100 	adc.w	r1, r1, #0
 80102e0:	1800      	adds	r0, r0, r0
 80102e2:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 80102e4:	f7fc f98c 	bl	800c600 <z_impl_k_sleep>
	k_sleep(K_MSEC(ms));
}
 80102e8:	bd08      	pop	{r3, pc}

080102ea <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 80102ea:	4770      	bx	lr

080102ec <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
{
	return tick;
}
 80102ec:	4770      	bx	lr

080102ee <BoardCriticalSectionBegin>:
	__asm__ volatile(
 80102ee:	f04f 0210 	mov.w	r2, #16
 80102f2:	f3ef 8311 	mrs	r3, BASEPRI
 80102f6:	f382 8812 	msr	BASEPRI_MAX, r2
 80102fa:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 80102fe:	6003      	str	r3, [r0, #0]
}
 8010300:	4770      	bx	lr

08010302 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
 8010302:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
 8010304:	f383 8811 	msr	BASEPRI, r3
 8010308:	f3bf 8f6f 	isb	sy
}
 801030c:	4770      	bx	lr

0801030e <z_log_msg2_runtime_create>:
{
 801030e:	b510      	push	{r4, lr}
 8010310:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8010312:	ac0a      	add	r4, sp, #40	; 0x28
 8010314:	9405      	str	r4, [sp, #20]
 8010316:	9402      	str	r4, [sp, #8]
 8010318:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801031a:	9401      	str	r4, [sp, #4]
 801031c:	9c08      	ldr	r4, [sp, #32]
 801031e:	9400      	str	r4, [sp, #0]
 8010320:	f7ff f83f 	bl	800f3a2 <z_impl_z_log_msg2_runtime_vcreate>
}
 8010324:	b006      	add	sp, #24
 8010326:	bd10      	pop	{r4, pc}

08010328 <clamp_int8>:
	if (x < min) {
 8010328:	4288      	cmp	r0, r1
 801032a:	db03      	blt.n	8010334 <clamp_int8+0xc>
	} else if (x > max) {
 801032c:	4290      	cmp	r0, r2
 801032e:	dd02      	ble.n	8010336 <clamp_int8+0xe>
		return max;
 8010330:	4610      	mov	r0, r2
 8010332:	4770      	bx	lr
		return min;
 8010334:	4608      	mov	r0, r1
}
 8010336:	4770      	bx	lr

08010338 <SX1276CheckRfFrequency>:
}
 8010338:	2001      	movs	r0, #1
 801033a:	4770      	bx	lr

0801033c <sx127x_antenna_configure>:
}
 801033c:	2000      	movs	r0, #0
 801033e:	4770      	bx	lr

08010340 <z_log_msg2_runtime_create>:
{
 8010340:	b510      	push	{r4, lr}
 8010342:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8010344:	ac0a      	add	r4, sp, #40	; 0x28
 8010346:	9405      	str	r4, [sp, #20]
 8010348:	9402      	str	r4, [sp, #8]
 801034a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801034c:	9401      	str	r4, [sp, #4]
 801034e:	9c08      	ldr	r4, [sp, #32]
 8010350:	9400      	str	r4, [sp, #0]
 8010352:	f7ff f826 	bl	800f3a2 <z_impl_z_log_msg2_runtime_vcreate>
}
 8010356:	b006      	add	sp, #24
 8010358:	bd10      	pop	{r4, pc}

0801035a <SX1276GetBoardTcxoWakeupTime>:
}
 801035a:	2000      	movs	r0, #0
 801035c:	4770      	bx	lr

0801035e <SX1276SetAntSwLowPower>:
}
 801035e:	4770      	bx	lr

08010360 <SX1276SetBoardTcxo>:
}
 8010360:	4770      	bx	lr

08010362 <SX1276SetAntSw>:
}
 8010362:	4770      	bx	lr

08010364 <sx127x_read>:
{
 8010364:	b508      	push	{r3, lr}
 8010366:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr, false, data, len);
 8010368:	460a      	mov	r2, r1
 801036a:	2100      	movs	r1, #0
 801036c:	f7f7 fbde 	bl	8007b2c <sx127x_transceive>
}
 8010370:	bd08      	pop	{r3, pc}

08010372 <sx127x_write>:
{
 8010372:	b508      	push	{r3, lr}
 8010374:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 8010376:	460a      	mov	r2, r1
 8010378:	2101      	movs	r1, #1
 801037a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 801037e:	f7f7 fbd5 	bl	8007b2c <sx127x_transceive>
}
 8010382:	bd08      	pop	{r3, pc}

08010384 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8010384:	e004      	b.n	8010390 <memcpy1+0xc>
    {
        *dst++ = *src++;
 8010386:	f811 2b01 	ldrb.w	r2, [r1], #1
 801038a:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 801038e:	461a      	mov	r2, r3
 8010390:	1e53      	subs	r3, r2, #1
 8010392:	b29b      	uxth	r3, r3
 8010394:	2a00      	cmp	r2, #0
 8010396:	d1f6      	bne.n	8010386 <memcpy1+0x2>
    }
}
 8010398:	4770      	bx	lr

0801039a <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 801039a:	b570      	push	{r4, r5, r6, lr}
 801039c:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 801039e:	f7ff ff97 	bl	80102d0 <RtcGetMinimumTimeout>
 80103a2:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 80103a4:	2301      	movs	r3, #1
 80103a6:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 80103a8:	6826      	ldr	r6, [r4, #0]
 80103aa:	f7f6 fefd 	bl	80071a8 <RtcGetTimerElapsedTime>
 80103ae:	4428      	add	r0, r5
 80103b0:	4286      	cmp	r6, r0
 80103b2:	d303      	bcc.n	80103bc <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 80103b4:	6820      	ldr	r0, [r4, #0]
 80103b6:	f7f6 ff0d 	bl	80071d4 <RtcSetAlarm>
}
 80103ba:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 80103bc:	f7f6 fef4 	bl	80071a8 <RtcGetTimerElapsedTime>
 80103c0:	4405      	add	r5, r0
 80103c2:	6025      	str	r5, [r4, #0]
 80103c4:	e7f6      	b.n	80103b4 <TimerSetTimeout+0x1a>

080103c6 <TimerInit>:
    obj->Timestamp = 0;
 80103c6:	2300      	movs	r3, #0
 80103c8:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 80103ca:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 80103cc:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 80103ce:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 80103d0:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 80103d2:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 80103d4:	6143      	str	r3, [r0, #20]
}
 80103d6:	4770      	bx	lr

080103d8 <TimerSetValue>:
{
 80103d8:	b538      	push	{r3, r4, r5, lr}
 80103da:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 80103dc:	4608      	mov	r0, r1
 80103de:	f7ff ff84 	bl	80102ea <RtcMs2Tick>
 80103e2:	4605      	mov	r5, r0
    TimerStop( obj );
 80103e4:	4620      	mov	r0, r4
 80103e6:	f7f7 fff7 	bl	80083d8 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 80103ea:	f7ff ff71 	bl	80102d0 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 80103ee:	4285      	cmp	r5, r0
 80103f0:	d300      	bcc.n	80103f4 <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 80103f2:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 80103f4:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 80103f6:	6060      	str	r0, [r4, #4]
}
 80103f8:	bd38      	pop	{r3, r4, r5, pc}

080103fa <TimerGetCurrentTime>:
{
 80103fa:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 80103fc:	f7ff ff60 	bl	80102c0 <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 8010400:	f7ff ff74 	bl	80102ec <RtcTick2Ms>
}
 8010404:	bd08      	pop	{r3, pc}

08010406 <TimerGetElapsedTime>:
{
 8010406:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 8010408:	4604      	mov	r4, r0
 801040a:	b908      	cbnz	r0, 8010410 <TimerGetElapsedTime+0xa>
}
 801040c:	4620      	mov	r0, r4
 801040e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 8010410:	f7ff ff56 	bl	80102c0 <RtcGetTimerValue>
 8010414:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 8010416:	4620      	mov	r0, r4
 8010418:	f7ff ff67 	bl	80102ea <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 801041c:	1a28      	subs	r0, r5, r0
 801041e:	f7ff ff65 	bl	80102ec <RtcTick2Ms>
 8010422:	4604      	mov	r4, r0
 8010424:	e7f2      	b.n	801040c <TimerGetElapsedTime+0x6>

08010426 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 8010426:	b508      	push	{r3, lr}
    DelayMsMcu( ms );
 8010428:	f7ff ff54 	bl	80102d4 <DelayMsMcu>
}
 801042c:	bd08      	pop	{r3, pc}

0801042e <SX1276ConvertPllStepToFreqInHz>:
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 801042e:	0a01      	lsrs	r1, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8010430:	f643 5209 	movw	r2, #15625	; 0x3d09
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8010434:	b2c3      	uxtb	r3, r0
 8010436:	fb02 f303 	mul.w	r3, r2, r3
 801043a:	3380      	adds	r3, #128	; 0x80
 801043c:	0a1b      	lsrs	r3, r3, #8
}
 801043e:	fb02 3001 	mla	r0, r2, r1, r3
 8010442:	4770      	bx	lr

08010444 <SX1276GetGfskTimeOnAirNumerator>:
    return ( preambleLen << 3 ) +
 8010444:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8010446:	b941      	cbnz	r1, 801045a <SX1276GetGfskTimeOnAirNumerator+0x16>
 8010448:	2108      	movs	r1, #8
    return ( preambleLen << 3 ) +
 801044a:	4408      	add	r0, r1
           ( ( fixLen == false ) ? 8 : 0 ) +
 801044c:	3018      	adds	r0, #24
               ( ( crcOn == true ) ? 2 : 0 ) 
 801044e:	b133      	cbz	r3, 801045e <SX1276GetGfskTimeOnAirNumerator+0x1a>
 8010450:	2302      	movs	r3, #2
               ( 0 ) + // Address filter size
 8010452:	441a      	add	r2, r3
}
 8010454:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8010458:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 801045a:	2100      	movs	r1, #0
 801045c:	e7f5      	b.n	801044a <SX1276GetGfskTimeOnAirNumerator+0x6>
               ( ( crcOn == true ) ? 2 : 0 ) 
 801045e:	2300      	movs	r3, #0
 8010460:	e7f7      	b.n	8010452 <SX1276GetGfskTimeOnAirNumerator+0xe>

08010462 <SX1276GetLoRaTimeOnAirNumerator>:
{
 8010462:	b570      	push	{r4, r5, r6, lr}
 8010464:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8010468:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 801046c:	3204      	adds	r2, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801046e:	f1a1 0c05 	sub.w	ip, r1, #5
 8010472:	f1bc 0f01 	cmp.w	ip, #1
 8010476:	d932      	bls.n	80104de <SX1276GetLoRaTimeOnAirNumerator+0x7c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010478:	b918      	cbnz	r0, 8010482 <SX1276GetLoRaTimeOnAirNumerator+0x20>
 801047a:	f1a1 060b 	sub.w	r6, r1, #11
 801047e:	2e01      	cmp	r6, #1
 8010480:	d935      	bls.n	80104ee <SX1276GetLoRaTimeOnAirNumerator+0x8c>
 8010482:	2801      	cmp	r0, #1
 8010484:	d02f      	beq.n	80104e6 <SX1276GetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 8010486:	2600      	movs	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010488:	f89d e014 	ldrb.w	lr, [sp, #20]
 801048c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8010490:	b38d      	cbz	r5, 80104f6 <SX1276GetLoRaTimeOnAirNumerator+0x94>
 8010492:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010496:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8010498:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 801049a:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 801049e:	b36c      	cbz	r4, 80104fc <SX1276GetLoRaTimeOnAirNumerator+0x9a>
 80104a0:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 80104a4:	44f4      	add	ip, lr
    if( datarate <= 6 )
 80104a6:	2906      	cmp	r1, #6
 80104a8:	d904      	bls.n	80104b4 <SX1276GetLoRaTimeOnAirNumerator+0x52>
        ceilNumerator += 8;
 80104aa:	f10c 0c08 	add.w	ip, ip, #8
        if( lowDatareOptimize == true )
 80104ae:	b10e      	cbz	r6, 80104b4 <SX1276GetLoRaTimeOnAirNumerator+0x52>
            ceilDenominator = 4 * ( datarate - 2 );
 80104b0:	1e88      	subs	r0, r1, #2
 80104b2:	0080      	lsls	r0, r0, #2
    if( ceilNumerator < 0 )
 80104b4:	f1bc 0f00 	cmp.w	ip, #0
 80104b8:	db23      	blt.n	8010502 <SX1276GetLoRaTimeOnAirNumerator+0xa0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80104ba:	4484      	add	ip, r0
 80104bc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80104c0:	fb9c fcf0 	sdiv	ip, ip, r0
 80104c4:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 80104c8:	f103 000c 	add.w	r0, r3, #12
    if( datarate <= 6 )
 80104cc:	2906      	cmp	r1, #6
 80104ce:	d801      	bhi.n	80104d4 <SX1276GetLoRaTimeOnAirNumerator+0x72>
        intermediate += 2;
 80104d0:	f103 000e 	add.w	r0, r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80104d4:	0080      	lsls	r0, r0, #2
 80104d6:	3001      	adds	r0, #1
 80104d8:	3902      	subs	r1, #2
}
 80104da:	4088      	lsls	r0, r1
 80104dc:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 80104de:	2b0b      	cmp	r3, #11
 80104e0:	d8ca      	bhi.n	8010478 <SX1276GetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 80104e2:	230c      	movs	r3, #12
 80104e4:	e7c8      	b.n	8010478 <SX1276GetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80104e6:	290c      	cmp	r1, #12
 80104e8:	d003      	beq.n	80104f2 <SX1276GetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 80104ea:	2600      	movs	r6, #0
 80104ec:	e7cc      	b.n	8010488 <SX1276GetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 80104ee:	2601      	movs	r6, #1
 80104f0:	e7ca      	b.n	8010488 <SX1276GetLoRaTimeOnAirNumerator+0x26>
 80104f2:	2601      	movs	r6, #1
 80104f4:	e7c8      	b.n	8010488 <SX1276GetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 80104f6:	f04f 0c00 	mov.w	ip, #0
 80104fa:	e7cc      	b.n	8010496 <SX1276GetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 80104fc:	f04f 0c14 	mov.w	ip, #20
 8010500:	e7d0      	b.n	80104a4 <SX1276GetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 8010502:	f04f 0c00 	mov.w	ip, #0
 8010506:	e7d8      	b.n	80104ba <SX1276GetLoRaTimeOnAirNumerator+0x58>

08010508 <SX1276ReadFifo>:
{
 8010508:	b508      	push	{r3, lr}
 801050a:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 801050c:	4601      	mov	r1, r0
 801050e:	2000      	movs	r0, #0
 8010510:	f7f7 fc5c 	bl	8007dcc <SX1276ReadBuffer>
}
 8010514:	bd08      	pop	{r3, pc}

08010516 <SX1276WriteFifo>:
{
 8010516:	b508      	push	{r3, lr}
 8010518:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 801051a:	4601      	mov	r1, r0
 801051c:	2000      	movs	r0, #0
 801051e:	f7f7 fda5 	bl	800806c <SX1276WriteBuffer>
}
 8010522:	bd08      	pop	{r3, pc}

08010524 <SX1276GetTimeOnAir>:
{
 8010524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010526:	b085      	sub	sp, #20
 8010528:	460e      	mov	r6, r1
 801052a:	4615      	mov	r5, r2
 801052c:	461a      	mov	r2, r3
 801052e:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 8010532:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8010536:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801053a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    switch( modem )
 801053e:	b148      	cbz	r0, 8010554 <SX1276GetTimeOnAir+0x30>
 8010540:	2801      	cmp	r0, #1
 8010542:	d010      	beq.n	8010566 <SX1276GetTimeOnAir+0x42>
 8010544:	2501      	movs	r5, #1
 8010546:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 8010548:	1960      	adds	r0, r4, r5
 801054a:	3801      	subs	r0, #1
}
 801054c:	fbb0 f0f5 	udiv	r0, r0, r5
 8010550:	b005      	add	sp, #20
 8010552:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8010554:	463a      	mov	r2, r7
 8010556:	4660      	mov	r0, ip
 8010558:	f7ff ff74 	bl	8010444 <SX1276GetGfskTimeOnAirNumerator>
 801055c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010560:	fb00 f404 	mul.w	r4, r0, r4
        break;
 8010564:	e7f0      	b.n	8010548 <SX1276GetTimeOnAir+0x24>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8010566:	9302      	str	r3, [sp, #8]
 8010568:	9701      	str	r7, [sp, #4]
 801056a:	9100      	str	r1, [sp, #0]
 801056c:	4663      	mov	r3, ip
 801056e:	4629      	mov	r1, r5
 8010570:	4630      	mov	r0, r6
 8010572:	f7ff ff76 	bl	8010462 <SX1276GetLoRaTimeOnAirNumerator>
 8010576:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801057a:	fb00 f404 	mul.w	r4, r0, r4
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 801057e:	4630      	mov	r0, r6
 8010580:	f7f7 ffa6 	bl	80084d0 <SX1276GetLoRaBandwidthInHz>
 8010584:	4605      	mov	r5, r0
        break;
 8010586:	e7df      	b.n	8010548 <SX1276GetTimeOnAir+0x24>

08010588 <SX1276Write>:
{
 8010588:	b500      	push	{lr}
 801058a:	b083      	sub	sp, #12
 801058c:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8010590:	2201      	movs	r2, #1
 8010592:	f10d 0107 	add.w	r1, sp, #7
 8010596:	f7f7 fd69 	bl	800806c <SX1276WriteBuffer>
}
 801059a:	b003      	add	sp, #12
 801059c:	f85d fb04 	ldr.w	pc, [sp], #4

080105a0 <SX1276Read>:
{
 80105a0:	b500      	push	{lr}
 80105a2:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 80105a4:	2201      	movs	r2, #1
 80105a6:	f10d 0107 	add.w	r1, sp, #7
 80105aa:	f7f7 fc0f 	bl	8007dcc <SX1276ReadBuffer>
}
 80105ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80105b2:	b003      	add	sp, #12
 80105b4:	f85d fb04 	ldr.w	pc, [sp], #4

080105b8 <SX1276SetOpMode>:
{
 80105b8:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 80105ba:	4604      	mov	r4, r0
 80105bc:	b970      	cbnz	r0, 80105dc <SX1276SetOpMode+0x24>
        SX1276SetAntSwLowPower( true );
 80105be:	2001      	movs	r0, #1
 80105c0:	f7ff fecd 	bl	801035e <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80105c4:	2001      	movs	r0, #1
 80105c6:	f7ff ffeb 	bl	80105a0 <SX1276Read>
 80105ca:	b241      	sxtb	r1, r0
 80105cc:	f021 0107 	bic.w	r1, r1, #7
 80105d0:	4321      	orrs	r1, r4
 80105d2:	b2c9      	uxtb	r1, r1
 80105d4:	2001      	movs	r0, #1
 80105d6:	f7ff ffd7 	bl	8010588 <SX1276Write>
}
 80105da:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 80105dc:	2001      	movs	r0, #1
 80105de:	f7ff febf 	bl	8010360 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 80105e2:	2000      	movs	r0, #0
 80105e4:	f7ff febb 	bl	801035e <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 80105e8:	4620      	mov	r0, r4
 80105ea:	f7ff feba 	bl	8010362 <SX1276SetAntSw>
 80105ee:	e7e9      	b.n	80105c4 <SX1276SetOpMode+0xc>

080105f0 <SX1276IsChannelFree>:
{
 80105f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105f2:	4607      	mov	r7, r0
 80105f4:	460c      	mov	r4, r1
 80105f6:	4616      	mov	r6, r2
 80105f8:	461d      	mov	r5, r3
    SX1276SetSleep( );
 80105fa:	f7f8 fac3 	bl	8008b84 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 80105fe:	2000      	movs	r0, #0
 8010600:	f7f8 fd56 	bl	80090b0 <SX1276SetModem>
    SX1276SetChannel( freq );
 8010604:	4638      	mov	r0, r7
 8010606:	f7f7 ff8d 	bl	8008524 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 801060a:	4620      	mov	r0, r4
 801060c:	f7f7 ff38 	bl	8008480 <GetFskBandwidthRegValue>
 8010610:	4604      	mov	r4, r0
 8010612:	4601      	mov	r1, r0
 8010614:	2012      	movs	r0, #18
 8010616:	f7ff ffb7 	bl	8010588 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 801061a:	4621      	mov	r1, r4
 801061c:	2013      	movs	r0, #19
 801061e:	f7ff ffb3 	bl	8010588 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8010622:	2005      	movs	r0, #5
 8010624:	f7ff ffc8 	bl	80105b8 <SX1276SetOpMode>
    DelayMs( 1 );
 8010628:	2001      	movs	r0, #1
 801062a:	f7ff fefc 	bl	8010426 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 801062e:	f7ff fee4 	bl	80103fa <TimerGetCurrentTime>
 8010632:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8010634:	4620      	mov	r0, r4
 8010636:	f7ff fee6 	bl	8010406 <TimerGetElapsedTime>
 801063a:	42a8      	cmp	r0, r5
 801063c:	d206      	bcs.n	801064c <SX1276IsChannelFree+0x5c>
        rssi = SX1276ReadRssi( MODEM_FSK );
 801063e:	2000      	movs	r0, #0
 8010640:	f7f8 fd0e 	bl	8009060 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8010644:	42b0      	cmp	r0, r6
 8010646:	ddf5      	ble.n	8010634 <SX1276IsChannelFree+0x44>
            status = false;
 8010648:	2400      	movs	r4, #0
 801064a:	e000      	b.n	801064e <SX1276IsChannelFree+0x5e>
    bool status = true;
 801064c:	2401      	movs	r4, #1
    SX1276SetSleep( );
 801064e:	f7f8 fa99 	bl	8008b84 <SX1276SetSleep>
}
 8010652:	4620      	mov	r0, r4
 8010654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010656 <SX1276Random>:
{
 8010656:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 8010658:	2001      	movs	r0, #1
 801065a:	f7f8 fd29 	bl	80090b0 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801065e:	21ff      	movs	r1, #255	; 0xff
 8010660:	2011      	movs	r0, #17
 8010662:	f7ff ff91 	bl	8010588 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8010666:	2005      	movs	r0, #5
 8010668:	f7ff ffa6 	bl	80105b8 <SX1276SetOpMode>
    uint32_t rnd = 0;
 801066c:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 801066e:	462c      	mov	r4, r5
 8010670:	e00b      	b.n	801068a <SX1276Random+0x34>
        DelayMs( 1 );
 8010672:	2001      	movs	r0, #1
 8010674:	f7ff fed7 	bl	8010426 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8010678:	202c      	movs	r0, #44	; 0x2c
 801067a:	f7ff ff91 	bl	80105a0 <SX1276Read>
 801067e:	f000 0001 	and.w	r0, r0, #1
 8010682:	40a0      	lsls	r0, r4
 8010684:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8010686:	3401      	adds	r4, #1
 8010688:	b2e4      	uxtb	r4, r4
 801068a:	2c1f      	cmp	r4, #31
 801068c:	d9f1      	bls.n	8010672 <SX1276Random+0x1c>
    SX1276SetSleep( );
 801068e:	f7f8 fa79 	bl	8008b84 <SX1276SetSleep>
}
 8010692:	4628      	mov	r0, r5
 8010694:	bd38      	pop	{r3, r4, r5, pc}

08010696 <SX1276GetWakeupTime>:
{
 8010696:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8010698:	f7ff fe5f 	bl	801035a <SX1276GetBoardTcxoWakeupTime>
}
 801069c:	3001      	adds	r0, #1
 801069e:	bd08      	pop	{r3, pc}

080106a0 <uart_stm32_config_get>:
	struct uart_stm32_data *data = dev->data;
 80106a0:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80106a6:	6843      	ldr	r3, [r0, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 80106b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80106b4:	d02f      	beq.n	8010716 <uart_stm32_config_get+0x76>
 80106b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80106ba:	d12e      	bne.n	801071a <uart_stm32_config_get+0x7a>
 80106bc:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 80106be:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80106c0:	6843      	ldr	r3, [r0, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 80106ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106ce:	d028      	beq.n	8010722 <uart_stm32_config_get+0x82>
 80106d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80106d4:	d027      	beq.n	8010726 <uart_stm32_config_get+0x86>
 80106d6:	b313      	cbz	r3, 801071e <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 80106d8:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 80106da:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80106dc:	6843      	ldr	r3, [r0, #4]
 80106de:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80106e0:	6813      	ldr	r3, [r2, #0]
 80106e2:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80106e6:	6812      	ldr	r2, [r2, #0]
 80106e8:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	switch (db) {
 80106ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106f0:	d01d      	beq.n	801072e <uart_stm32_config_get+0x8e>
 80106f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106f6:	d11d      	bne.n	8010734 <uart_stm32_config_get+0x94>
		if (p == LL_USART_PARITY_NONE) {
 80106f8:	b1ba      	cbz	r2, 801072a <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_6;
 80106fa:	2301      	movs	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80106fc:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80106fe:	6843      	ldr	r3, [r0, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8010708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801070c:	d019      	beq.n	8010742 <uart_stm32_config_get+0xa2>
	return UART_CFG_FLOW_CTRL_NONE;
 801070e:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 8010710:	71cb      	strb	r3, [r1, #7]
}
 8010712:	2000      	movs	r0, #0
 8010714:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 8010716:	2302      	movs	r3, #2
 8010718:	e7d1      	b.n	80106be <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 801071a:	2300      	movs	r3, #0
 801071c:	e7cf      	b.n	80106be <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 801071e:	2301      	movs	r3, #1
 8010720:	e7db      	b.n	80106da <uart_stm32_config_get+0x3a>
	switch (sb) {
 8010722:	2300      	movs	r3, #0
 8010724:	e7d9      	b.n	80106da <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 8010726:	2302      	movs	r3, #2
 8010728:	e7d7      	b.n	80106da <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_7;
 801072a:	2302      	movs	r3, #2
 801072c:	e7e6      	b.n	80106fc <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 801072e:	b922      	cbnz	r2, 801073a <uart_stm32_config_get+0x9a>
			return UART_CFG_DATA_BITS_9;
 8010730:	2304      	movs	r3, #4
 8010732:	e7e3      	b.n	80106fc <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 8010734:	b91a      	cbnz	r2, 801073e <uart_stm32_config_get+0x9e>
			return UART_CFG_DATA_BITS_8;
 8010736:	2303      	movs	r3, #3
 8010738:	e7e0      	b.n	80106fc <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 801073a:	2303      	movs	r3, #3
 801073c:	e7de      	b.n	80106fc <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_7;
 801073e:	2302      	movs	r3, #2
 8010740:	e7dc      	b.n	80106fc <uart_stm32_config_get+0x5c>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 8010742:	2301      	movs	r3, #1
 8010744:	e7e4      	b.n	8010710 <uart_stm32_config_get+0x70>

08010746 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8010746:	6843      	ldr	r3, [r0, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 801074a:	69da      	ldr	r2, [r3, #28]
 801074c:	f012 0f08 	tst.w	r2, #8
 8010750:	d001      	beq.n	8010756 <uart_stm32_poll_in+0x10>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8010752:	2208      	movs	r2, #8
 8010754:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8010756:	69da      	ldr	r2, [r3, #28]
 8010758:	f012 0f20 	tst.w	r2, #32
 801075c:	d003      	beq.n	8010766 <uart_stm32_poll_in+0x20>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 801075e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 8010760:	700b      	strb	r3, [r1, #0]
	return 0;
 8010762:	2000      	movs	r0, #0
 8010764:	4770      	bx	lr
		return -1;
 8010766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 801076a:	4770      	bx	lr

0801076c <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 801076c:	6843      	ldr	r3, [r0, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8010770:	69da      	ldr	r2, [r3, #28]
 8010772:	f012 0f80 	tst.w	r2, #128	; 0x80
 8010776:	d0fb      	beq.n	8010770 <uart_stm32_poll_out+0x4>
	__asm__ volatile(
 8010778:	f04f 0010 	mov.w	r0, #16
 801077c:	f3ef 8211 	mrs	r2, BASEPRI
 8010780:	f380 8812 	msr	BASEPRI_MAX, r0
 8010784:	f3bf 8f6f 	isb	sy
 8010788:	69d8      	ldr	r0, [r3, #28]
 801078a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801078e:	d104      	bne.n	801079a <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 8010790:	f382 8811 	msr	BASEPRI, r2
 8010794:	f3bf 8f6f 	isb	sy
}
 8010798:	e7ea      	b.n	8010770 <uart_stm32_poll_out+0x4>
  USARTx->TDR = Value;
 801079a:	b289      	uxth	r1, r1
 801079c:	8519      	strh	r1, [r3, #40]	; 0x28
	__asm__ volatile(
 801079e:	f382 8811 	msr	BASEPRI, r2
 80107a2:	f3bf 8f6f 	isb	sy
}
 80107a6:	4770      	bx	lr

080107a8 <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80107a8:	6843      	ldr	r3, [r0, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80107ac:	69d8      	ldr	r0, [r3, #28]
 80107ae:	f010 0008 	ands.w	r0, r0, #8
 80107b2:	d000      	beq.n	80107b6 <uart_stm32_err_check+0xe>
		err |= UART_ERROR_OVERRUN;
 80107b4:	2001      	movs	r0, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 80107b6:	69da      	ldr	r2, [r3, #28]
 80107b8:	f012 0f01 	tst.w	r2, #1
 80107bc:	d001      	beq.n	80107c2 <uart_stm32_err_check+0x1a>
		err |= UART_ERROR_PARITY;
 80107be:	f040 0002 	orr.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80107c2:	69da      	ldr	r2, [r3, #28]
 80107c4:	f012 0f02 	tst.w	r2, #2
 80107c8:	d001      	beq.n	80107ce <uart_stm32_err_check+0x26>
		err |= UART_ERROR_FRAMING;
 80107ca:	f040 0004 	orr.w	r0, r0, #4
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 80107ce:	69da      	ldr	r2, [r3, #28]
 80107d0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80107d4:	d001      	beq.n	80107da <uart_stm32_err_check+0x32>
		err |= UART_BREAK;
 80107d6:	f040 0008 	orr.w	r0, r0, #8
	if (err & UART_BREAK) {
 80107da:	f010 0f08 	tst.w	r0, #8
 80107de:	d002      	beq.n	80107e6 <uart_stm32_err_check+0x3e>
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 80107e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80107e4:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 80107e6:	f010 0f01 	tst.w	r0, #1
 80107ea:	d001      	beq.n	80107f0 <uart_stm32_err_check+0x48>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80107ec:	2208      	movs	r2, #8
 80107ee:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 80107f0:	f010 0f02 	tst.w	r0, #2
 80107f4:	d001      	beq.n	80107fa <uart_stm32_err_check+0x52>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 80107f6:	2201      	movs	r2, #1
 80107f8:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 80107fa:	f010 0f04 	tst.w	r0, #4
 80107fe:	d001      	beq.n	8010804 <uart_stm32_err_check+0x5c>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8010800:	2202      	movs	r2, #2
 8010802:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8010804:	2204      	movs	r2, #4
 8010806:	621a      	str	r2, [r3, #32]
}
 8010808:	4770      	bx	lr

0801080a <uart_stm32_async_callback_set>:
	struct uart_stm32_data *data = dev->data;
 801080a:	6903      	ldr	r3, [r0, #16]
	data->async_cb = callback;
 801080c:	60d9      	str	r1, [r3, #12]
	data->async_user_data = user_data;
 801080e:	611a      	str	r2, [r3, #16]
}
 8010810:	2000      	movs	r0, #0
 8010812:	4770      	bx	lr

08010814 <uart_stm32_dma_tx_cb>:
{
 8010814:	b530      	push	{r4, r5, lr}
 8010816:	b083      	sub	sp, #12
	struct uart_stm32_data *data = uart_dev->data;
 8010818:	690c      	ldr	r4, [r1, #16]
	__asm__ volatile(
 801081a:	f04f 0310 	mov.w	r3, #16
 801081e:	f3ef 8511 	mrs	r5, BASEPRI
 8010822:	f383 8812 	msr	BASEPRI_MAX, r3
 8010826:	f3bf 8f6f 	isb	sy
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 801082a:	684b      	ldr	r3, [r1, #4]
 801082c:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 801082e:	6893      	ldr	r3, [r2, #8]
 8010830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010834:	6093      	str	r3, [r2, #8]
	(void)k_work_cancel_delayable(&data->dma_tx.timeout_work);
 8010836:	f504 7088 	add.w	r0, r4, #272	; 0x110
 801083a:	f000 fa6a 	bl	8010d12 <k_work_cancel_delayable>
	if (!dma_get_status(data->dma_tx.dma_dev,
 801083e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8010842:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	const struct dma_driver_api *api =
 8010846:	6883      	ldr	r3, [r0, #8]
	if (api->get_status) {
 8010848:	699b      	ldr	r3, [r3, #24]
 801084a:	b143      	cbz	r3, 801085e <uart_stm32_dma_tx_cb+0x4a>
		return api->get_status(dev, channel, stat);
 801084c:	466a      	mov	r2, sp
 801084e:	4798      	blx	r3
 8010850:	b928      	cbnz	r0, 801085e <uart_stm32_dma_tx_cb+0x4a>
		data->dma_tx.counter = data->dma_tx.buffer_length -
 8010852:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
					stat.pending_length;
 8010856:	9a01      	ldr	r2, [sp, #4]
		data->dma_tx.counter = data->dma_tx.buffer_length -
 8010858:	1a9b      	subs	r3, r3, r2
 801085a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	data->dma_tx.buffer_length = 0;
 801085e:	2300      	movs	r3, #0
 8010860:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	__asm__ volatile(
 8010864:	f385 8811 	msr	BASEPRI, r5
 8010868:	f3bf 8f6f 	isb	sy
}
 801086c:	b003      	add	sp, #12
 801086e:	bd30      	pop	{r4, r5, pc}

08010870 <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 8010870:	b508      	push	{r3, lr}
 8010872:	2200      	movs	r2, #0
 8010874:	4611      	mov	r1, r2
 8010876:	2025      	movs	r0, #37	; 0x25
 8010878:	f7f3 fee6 	bl	8004648 <z_arm_irq_priority_set>
 801087c:	2025      	movs	r0, #37	; 0x25
 801087e:	f7f3 feb3 	bl	80045e8 <arch_irq_enable>
 8010882:	bd08      	pop	{r3, pc}

08010884 <uart_stm32_irq_config_func_1>:
 8010884:	b508      	push	{r3, lr}
 8010886:	2200      	movs	r2, #0
 8010888:	4611      	mov	r1, r2
 801088a:	2026      	movs	r0, #38	; 0x26
 801088c:	f7f3 fedc 	bl	8004648 <z_arm_irq_priority_set>
 8010890:	2026      	movs	r0, #38	; 0x26
 8010892:	f7f3 fea9 	bl	80045e8 <arch_irq_enable>
 8010896:	bd08      	pop	{r3, pc}

08010898 <uart_stm32_dma_rx_flush>:
{
 8010898:	b510      	push	{r4, lr}
 801089a:	b082      	sub	sp, #8
	struct uart_stm32_data *data = dev->data;
 801089c:	6904      	ldr	r4, [r0, #16]
	if (dma_get_status(data->dma_rx.dma_dev,
 801089e:	69a0      	ldr	r0, [r4, #24]
 80108a0:	69e1      	ldr	r1, [r4, #28]
	const struct dma_driver_api *api =
 80108a2:	6883      	ldr	r3, [r0, #8]
	if (api->get_status) {
 80108a4:	699b      	ldr	r3, [r3, #24]
 80108a6:	b143      	cbz	r3, 80108ba <uart_stm32_dma_rx_flush+0x22>
		return api->get_status(dev, channel, stat);
 80108a8:	466a      	mov	r2, sp
 80108aa:	4798      	blx	r3
 80108ac:	b928      	cbnz	r0, 80108ba <uart_stm32_dma_rx_flush+0x22>
		size_t rx_rcv_len = data->dma_rx.buffer_length -
 80108ae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
					stat.pending_length;
 80108b0:	9a01      	ldr	r2, [sp, #4]
		size_t rx_rcv_len = data->dma_rx.buffer_length -
 80108b2:	1a9b      	subs	r3, r3, r2
		if (rx_rcv_len > data->dma_rx.offset) {
 80108b4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d301      	bcc.n	80108be <uart_stm32_dma_rx_flush+0x26>
}
 80108ba:	b002      	add	sp, #8
 80108bc:	bd10      	pop	{r4, pc}
			data->dma_rx.counter = rx_rcv_len;
 80108be:	6723      	str	r3, [r4, #112]	; 0x70
			async_evt_rx_rdy(data);
 80108c0:	4620      	mov	r0, r4
 80108c2:	f7f9 fc79 	bl	800a1b8 <async_evt_rx_rdy>
}
 80108c6:	e7f8      	b.n	80108ba <uart_stm32_dma_rx_flush+0x22>

080108c8 <entropy_stm32_got_error>:
  return ((READ_BIT(RNGx->SR, RNG_SR_CECS) == (RNG_SR_CECS)) ? 1UL : 0UL);
 80108c8:	6843      	ldr	r3, [r0, #4]
 80108ca:	f013 0f02 	tst.w	r3, #2
 80108ce:	d105      	bne.n	80108dc <entropy_stm32_got_error+0x14>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 80108d0:	6843      	ldr	r3, [r0, #4]
 80108d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80108d6:	d103      	bne.n	80108e0 <entropy_stm32_got_error+0x18>
	return 0;
 80108d8:	2000      	movs	r0, #0
 80108da:	4770      	bx	lr
		return 1;
 80108dc:	2001      	movs	r0, #1
 80108de:	4770      	bx	lr
		return 1;
 80108e0:	2001      	movs	r0, #1
}
 80108e2:	4770      	bx	lr

080108e4 <recover_seed_error>:
  WRITE_REG(RNGx->SR, ~RNG_SR_SEIS);
 80108e4:	f06f 0340 	mvn.w	r3, #64	; 0x40
 80108e8:	6043      	str	r3, [r0, #4]
	for (int i = 0; i < 12; ++i) {
 80108ea:	2300      	movs	r3, #0
 80108ec:	e001      	b.n	80108f2 <recover_seed_error+0xe>
  return (uint32_t)(READ_REG(RNGx->DR));
 80108ee:	6882      	ldr	r2, [r0, #8]
 80108f0:	3301      	adds	r3, #1
 80108f2:	2b0b      	cmp	r3, #11
 80108f4:	ddfb      	ble.n	80108ee <recover_seed_error+0xa>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 80108f6:	6843      	ldr	r3, [r0, #4]
 80108f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80108fc:	d101      	bne.n	8010902 <recover_seed_error+0x1e>
	return 0;
 80108fe:	2000      	movs	r0, #0
 8010900:	4770      	bx	lr
		return -EIO;
 8010902:	f06f 0004 	mvn.w	r0, #4
}
 8010906:	4770      	bx	lr

08010908 <rng_pool_put>:
	uint8_t first = rngp->first_read;
 8010908:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
 801090a:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
 801090c:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
 8010910:	1a9a      	subs	r2, r3, r2
 8010912:	ea3c 0202 	bics.w	r2, ip, r2
 8010916:	d008      	beq.n	801092a <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
 8010918:	18c2      	adds	r2, r0, r3
 801091a:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
 801091c:	3301      	adds	r3, #1
 801091e:	b25b      	sxtb	r3, r3
 8010920:	ea03 030c 	and.w	r3, r3, ip
 8010924:	7083      	strb	r3, [r0, #2]
	return 0;
 8010926:	2000      	movs	r0, #0
 8010928:	4770      	bx	lr
		return -ENOBUFS;
 801092a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 801092e:	4770      	bx	lr

08010930 <rng_pool_init>:
	rngp->first_alloc = 0U;
 8010930:	2300      	movs	r3, #0
 8010932:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
 8010934:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
 8010936:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
 8010938:	3901      	subs	r1, #1
 801093a:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
 801093c:	7102      	strb	r2, [r0, #4]
}
 801093e:	4770      	bx	lr

08010940 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8010940:	b410      	push	{r4}
	*state = &config->states[0];
 8010942:	6803      	ldr	r3, [r0, #0]
 8010944:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8010946:	e001      	b.n	801094c <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
 8010948:	3408      	adds	r4, #8
 801094a:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 801094c:	6814      	ldr	r4, [r2, #0]
 801094e:	7903      	ldrb	r3, [r0, #4]
 8010950:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010954:	3b01      	subs	r3, #1
 8010956:	f8d0 c000 	ldr.w	ip, [r0]
 801095a:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 801095e:	429c      	cmp	r4, r3
 8010960:	d804      	bhi.n	801096c <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
 8010962:	7963      	ldrb	r3, [r4, #5]
 8010964:	428b      	cmp	r3, r1
 8010966:	d1ef      	bne.n	8010948 <pinctrl_lookup_state+0x8>
			return 0;
 8010968:	2000      	movs	r0, #0
 801096a:	e001      	b.n	8010970 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
 801096c:	f06f 0001 	mvn.w	r0, #1
}
 8010970:	bc10      	pop	{r4}
 8010972:	4770      	bx	lr

08010974 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8010974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010976:	4606      	mov	r6, r0
 8010978:	460f      	mov	r7, r1
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 801097a:	2400      	movs	r4, #0
	uint32_t func = 0;
 801097c:	4625      	mov	r5, r4
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 801097e:	e012      	b.n	80109a6 <pinctrl_configure_pins+0x32>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8010980:	f002 031f 	and.w	r3, r2, #31
 8010984:	2b10      	cmp	r3, #16
 8010986:	d01b      	beq.n	80109c0 <pinctrl_configure_pins+0x4c>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8010988:	0a53      	lsrs	r3, r2, #9
 801098a:	011b      	lsls	r3, r3, #4
 801098c:	b2db      	uxtb	r3, r3
 801098e:	f3c2 1043 	ubfx	r0, r2, #5, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 8010992:	f002 021f 	and.w	r2, r2, #31
 8010996:	4629      	mov	r1, r5
 8010998:	4318      	orrs	r0, r3
 801099a:	f7fa fbe5 	bl	800b168 <stm32_pin_configure>
		if (ret < 0) {
 801099e:	2800      	cmp	r0, #0
 80109a0:	db11      	blt.n	80109c6 <pinctrl_configure_pins+0x52>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 80109a2:	3401      	adds	r4, #1
 80109a4:	b2e4      	uxtb	r4, r4
 80109a6:	42bc      	cmp	r4, r7
 80109a8:	d20c      	bcs.n	80109c4 <pinctrl_configure_pins+0x50>
		mux = pins[i].pinmux;
 80109aa:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 80109ae:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 80109b2:	f012 0f10 	tst.w	r2, #16
 80109b6:	d1e3      	bne.n	8010980 <pinctrl_configure_pins+0xc>
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 80109b8:	685d      	ldr	r5, [r3, #4]
 80109ba:	f045 0520 	orr.w	r5, r5, #32
 80109be:	e7e3      	b.n	8010988 <pinctrl_configure_pins+0x14>
			func = STM32_MODER_ANALOG_MODE;
 80109c0:	2530      	movs	r5, #48	; 0x30
 80109c2:	e7e1      	b.n	8010988 <pinctrl_configure_pins+0x14>
			return ret;
		}
	}

	return 0;
 80109c4:	2000      	movs	r0, #0
}
 80109c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080109c8 <LL_DMA_StructInit>:
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 80109c8:	2300      	movs	r3, #0
 80109ca:	6003      	str	r3, [r0, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 80109cc:	6043      	str	r3, [r0, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80109ce:	6083      	str	r3, [r0, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 80109d0:	60c3      	str	r3, [r0, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 80109d2:	6103      	str	r3, [r0, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 80109d4:	6143      	str	r3, [r0, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80109d6:	6183      	str	r3, [r0, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80109d8:	61c3      	str	r3, [r0, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 80109da:	6203      	str	r3, [r0, #32]
#if defined(DMAMUX1)
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
#else
  DMA_InitStruct->PeriphRequest          = LL_DMA_REQUEST_0;
 80109dc:	6243      	str	r3, [r0, #36]	; 0x24
#endif /* DMAMUX1 */
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 80109de:	6283      	str	r3, [r0, #40]	; 0x28
}
 80109e0:	4770      	bx	lr

080109e2 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80109e2:	680a      	ldr	r2, [r1, #0]
 80109e4:	0912      	lsrs	r2, r2, #4
 80109e6:	3201      	adds	r2, #1
 80109e8:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80109ec:	684b      	ldr	r3, [r1, #4]
 80109ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109f2:	fb03 f000 	mul.w	r0, r3, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 80109f6:	688b      	ldr	r3, [r1, #8]
 80109f8:	0e5b      	lsrs	r3, r3, #25
 80109fa:	3301      	adds	r3, #1
 80109fc:	005b      	lsls	r3, r3, #1
}
 80109fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8010a02:	4770      	bx	lr

08010a04 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8010a04:	b148      	cbz	r0, 8010a1a <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8010a06:	68c3      	ldr	r3, [r0, #12]
 8010a08:	8818      	ldrh	r0, [r3, #0]
 8010a0a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8010a0e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8010a12:	bf14      	ite	ne
 8010a14:	2000      	movne	r0, #0
 8010a16:	2001      	moveq	r0, #1
 8010a18:	4770      	bx	lr
		return false;
 8010a1a:	2000      	movs	r0, #0
}
 8010a1c:	4770      	bx	lr

08010a1e <z_log_msg2_runtime_create>:
{
 8010a1e:	b510      	push	{r4, lr}
 8010a20:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8010a22:	ac0a      	add	r4, sp, #40	; 0x28
 8010a24:	9405      	str	r4, [sp, #20]
 8010a26:	9402      	str	r4, [sp, #8]
 8010a28:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010a2a:	9401      	str	r4, [sp, #4]
 8010a2c:	9c08      	ldr	r4, [sp, #32]
 8010a2e:	9400      	str	r4, [sp, #0]
 8010a30:	f7fe fcb7 	bl	800f3a2 <z_impl_z_log_msg2_runtime_vcreate>
}
 8010a34:	b006      	add	sp, #24
 8010a36:	bd10      	pop	{r4, pc}

08010a38 <arch_system_halt>:
	__asm__ volatile(
 8010a38:	f04f 0210 	mov.w	r2, #16
 8010a3c:	f3ef 8311 	mrs	r3, BASEPRI
 8010a40:	f382 8812 	msr	BASEPRI_MAX, r2
 8010a44:	f3bf 8f6f 	isb	sy
	for (;;) {
 8010a48:	e7fe      	b.n	8010a48 <arch_system_halt+0x10>

08010a4a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8010a4a:	6902      	ldr	r2, [r0, #16]
 8010a4c:	6943      	ldr	r3, [r0, #20]
 8010a4e:	431a      	orrs	r2, r3
 8010a50:	f012 0203 	ands.w	r2, r2, #3
 8010a54:	d10d      	bne.n	8010a72 <create_free_list+0x28>
	slab->free_list = NULL;
 8010a56:	2100      	movs	r1, #0
 8010a58:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 8010a5a:	e005      	b.n	8010a68 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 8010a5c:	6981      	ldr	r1, [r0, #24]
 8010a5e:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 8010a60:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
 8010a62:	6901      	ldr	r1, [r0, #16]
 8010a64:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 8010a66:	3201      	adds	r2, #1
 8010a68:	68c1      	ldr	r1, [r0, #12]
 8010a6a:	4291      	cmp	r1, r2
 8010a6c:	d8f6      	bhi.n	8010a5c <create_free_list+0x12>
	return 0;
 8010a6e:	2000      	movs	r0, #0
 8010a70:	4770      	bx	lr
		return -EINVAL;
 8010a72:	f06f 0015 	mvn.w	r0, #21
}
 8010a76:	4770      	bx	lr

08010a78 <setup_thread_stack>:
{
 8010a78:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8010a7a:	3207      	adds	r2, #7
 8010a7c:	f022 0207 	bic.w	r2, r2, #7
 8010a80:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8010a84:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 8010a88:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
 8010a8a:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	6702      	str	r2, [r0, #112]	; 0x70
}
 8010a90:	18c8      	adds	r0, r1, r3
 8010a92:	bc10      	pop	{r4}
 8010a94:	4770      	bx	lr

08010a96 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a96:	f3ef 8005 	mrs	r0, IPSR
}
 8010a9a:	3800      	subs	r0, #0
 8010a9c:	bf18      	it	ne
 8010a9e:	2001      	movne	r0, #1
 8010aa0:	4770      	bx	lr

08010aa2 <z_impl_k_thread_name_set>:
}
 8010aa2:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8010aa6:	4770      	bx	lr

08010aa8 <k_thread_name_get>:
}
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	4770      	bx	lr

08010aac <z_impl_k_thread_start>:
{
 8010aac:	b508      	push	{r3, lr}
	z_sched_start(thread);
 8010aae:	f7fb fba9 	bl	800c204 <z_sched_start>
}
 8010ab2:	bd08      	pop	{r3, pc}

08010ab4 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 8010ab4:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 8010ab6:	2400      	movs	r4, #0
 8010ab8:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 8010aba:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8010abc:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 8010abe:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 8010ac0:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 8010ac2:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 8010ac4:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 8010ac6:	bc10      	pop	{r4}
 8010ac8:	4770      	bx	lr

08010aca <z_impl_k_thread_create>:
{
 8010aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010acc:	b087      	sub	sp, #28
 8010ace:	4604      	mov	r4, r0
 8010ad0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010ad2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8010ad4:	2700      	movs	r7, #0
 8010ad6:	9705      	str	r7, [sp, #20]
 8010ad8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010ada:	9704      	str	r7, [sp, #16]
 8010adc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010ade:	9703      	str	r7, [sp, #12]
 8010ae0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010ae2:	9702      	str	r7, [sp, #8]
 8010ae4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010ae6:	9701      	str	r7, [sp, #4]
 8010ae8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8010aea:	9700      	str	r7, [sp, #0]
 8010aec:	f7fa fee8 	bl	800b8c0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8010af0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8010af4:	bf08      	it	eq
 8010af6:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 8010afa:	d102      	bne.n	8010b02 <z_impl_k_thread_create+0x38>
}
 8010afc:	4620      	mov	r0, r4
 8010afe:	b007      	add	sp, #28
 8010b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 8010b02:	4632      	mov	r2, r6
 8010b04:	462b      	mov	r3, r5
 8010b06:	4620      	mov	r0, r4
 8010b08:	f7fa fecc 	bl	800b8a4 <schedule_new_thread>
 8010b0c:	e7f6      	b.n	8010afc <z_impl_k_thread_create+0x32>

08010b0e <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8010b0e:	b508      	push	{r3, lr}
 8010b10:	f04f 0210 	mov.w	r2, #16
 8010b14:	f3ef 8311 	mrs	r3, BASEPRI
 8010b18:	f382 8812 	msr	BASEPRI_MAX, r2
 8010b1c:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8010b20:	f7f3 fc66 	bl	80043f0 <arch_cpu_idle>
 8010b24:	e7f4      	b.n	8010b10 <idle+0x2>

08010b26 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 8010b26:	4288      	cmp	r0, r1
 8010b28:	da00      	bge.n	8010b2c <new_prio_for_inheritance+0x6>
 8010b2a:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 8010b2c:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 8010b30:	db01      	blt.n	8010b36 <new_prio_for_inheritance+0x10>
 8010b32:	4608      	mov	r0, r1
 8010b34:	4770      	bx	lr
 8010b36:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 8010b3a:	4770      	bx	lr

08010b3c <adjust_owner_prio>:
{
 8010b3c:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 8010b3e:	6880      	ldr	r0, [r0, #8]
 8010b40:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8010b44:	428b      	cmp	r3, r1
 8010b46:	d101      	bne.n	8010b4c <adjust_owner_prio+0x10>
	return false;
 8010b48:	2000      	movs	r0, #0
}
 8010b4a:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 8010b4c:	f7fb fba8 	bl	800c2a0 <z_set_prio>
 8010b50:	e7fb      	b.n	8010b4a <adjust_owner_prio+0xe>

08010b52 <z_impl_k_mutex_init>:
{
 8010b52:	4603      	mov	r3, r0
	mutex->owner = NULL;
 8010b54:	2000      	movs	r0, #0
 8010b56:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 8010b58:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 8010b5a:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 8010b5c:	605b      	str	r3, [r3, #4]
}
 8010b5e:	4770      	bx	lr

08010b60 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8010b60:	b15a      	cbz	r2, 8010b7a <z_impl_k_sem_init+0x1a>
 8010b62:	428a      	cmp	r2, r1
 8010b64:	d30c      	bcc.n	8010b80 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 8010b66:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 8010b68:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 8010b6a:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 8010b6c:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 8010b6e:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 8010b72:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 8010b74:	6143      	str	r3, [r0, #20]
	return 0;
 8010b76:	2000      	movs	r0, #0
 8010b78:	4770      	bx	lr
		return -EINVAL;
 8010b7a:	f06f 0015 	mvn.w	r0, #21
 8010b7e:	4770      	bx	lr
 8010b80:	f06f 0015 	mvn.w	r0, #21
}
 8010b84:	4770      	bx	lr

08010b86 <cancel_async_locked>:
{
 8010b86:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
 8010b88:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8010b8a:	f012 0f02 	tst.w	r2, #2
 8010b8e:	d009      	beq.n	8010ba4 <cancel_async_locked+0x1e>
	return *flagp;
 8010b90:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
 8010b92:	f012 000f 	ands.w	r0, r2, #15
 8010b96:	d004      	beq.n	8010ba2 <cancel_async_locked+0x1c>
	*flagp |= BIT(bit);
 8010b98:	f042 0202 	orr.w	r2, r2, #2
 8010b9c:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
 8010b9e:	f002 000f 	and.w	r0, r2, #15
}
 8010ba2:	4770      	bx	lr
		queue_remove_locked(work->queue, work);
 8010ba4:	6880      	ldr	r0, [r0, #8]
	*flagp &= ~BIT(bit);
 8010ba6:	f022 0104 	bic.w	r1, r2, #4
 8010baa:	60d9      	str	r1, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
 8010bac:	f012 0f04 	tst.w	r2, #4
 8010bb0:	d0ee      	beq.n	8010b90 <cancel_async_locked+0xa>
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
 8010bb2:	f100 0c80 	add.w	ip, r0, #128	; 0x80
	return list->head;
 8010bb6:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8010bba:	2100      	movs	r1, #0
 8010bbc:	2a00      	cmp	r2, #0
 8010bbe:	d0e7      	beq.n	8010b90 <cancel_async_locked+0xa>
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d002      	beq.n	8010bca <cancel_async_locked+0x44>
 8010bc4:	4611      	mov	r1, r2
 8010bc6:	6812      	ldr	r2, [r2, #0]
 8010bc8:	e7f8      	b.n	8010bbc <cancel_async_locked+0x36>
Z_GENLIST_REMOVE(slist, snode)
 8010bca:	b141      	cbz	r1, 8010bde <cancel_async_locked+0x58>
	return node->next;
 8010bcc:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 8010bce:	600a      	str	r2, [r1, #0]
	return list->tail;
 8010bd0:	f8dc 2004 	ldr.w	r2, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d00c      	beq.n	8010bf2 <cancel_async_locked+0x6c>
	parent->next = child;
 8010bd8:	2200      	movs	r2, #0
 8010bda:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 8010bdc:	e7d8      	b.n	8010b90 <cancel_async_locked+0xa>
	return node->next;
 8010bde:	681a      	ldr	r2, [r3, #0]
	list->head = node;
 8010be0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	return list->tail;
 8010be4:	f8dc 1004 	ldr.w	r1, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 8010be8:	428b      	cmp	r3, r1
 8010bea:	d1f5      	bne.n	8010bd8 <cancel_async_locked+0x52>
	list->tail = node;
 8010bec:	f8cc 2004 	str.w	r2, [ip, #4]
}
 8010bf0:	e7f2      	b.n	8010bd8 <cancel_async_locked+0x52>
	list->tail = node;
 8010bf2:	f8cc 1004 	str.w	r1, [ip, #4]
}
 8010bf6:	e7ef      	b.n	8010bd8 <cancel_async_locked+0x52>

08010bf8 <work_timeout>:
{
 8010bf8:	b510      	push	{r4, lr}
 8010bfa:	b082      	sub	sp, #8
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	f04f 0210 	mov.w	r2, #16
 8010c02:	f3ef 8411 	mrs	r4, BASEPRI
 8010c06:	f382 8812 	msr	BASEPRI_MAX, r2
 8010c0a:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
 8010c0e:	2200      	movs	r2, #0
 8010c10:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
 8010c12:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
 8010c16:	f022 0108 	bic.w	r1, r2, #8
 8010c1a:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 8010c1e:	f012 0f08 	tst.w	r2, #8
 8010c22:	d105      	bne.n	8010c30 <work_timeout+0x38>
	__asm__ volatile(
 8010c24:	f384 8811 	msr	BASEPRI, r4
 8010c28:	f3bf 8f6f 	isb	sy
}
 8010c2c:	b002      	add	sp, #8
 8010c2e:	bd10      	pop	{r4, pc}
 8010c30:	3810      	subs	r0, #16
		queue = dw->queue;
 8010c32:	699b      	ldr	r3, [r3, #24]
 8010c34:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 8010c36:	a901      	add	r1, sp, #4
 8010c38:	f7fa ffd0 	bl	800bbdc <submit_to_queue_locked>
 8010c3c:	e7f2      	b.n	8010c24 <work_timeout+0x2c>

08010c3e <cancel_delayable_async_locked>:
{
 8010c3e:	b510      	push	{r4, lr}
 8010c40:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
 8010c42:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
 8010c44:	f023 0208 	bic.w	r2, r3, #8
 8010c48:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 8010c4a:	f013 0f08 	tst.w	r3, #8
 8010c4e:	d103      	bne.n	8010c58 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
 8010c50:	4620      	mov	r0, r4
 8010c52:	f7ff ff98 	bl	8010b86 <cancel_async_locked>
}
 8010c56:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
 8010c58:	3010      	adds	r0, #16
 8010c5a:	f000 fa24 	bl	80110a6 <z_abort_timeout>
		ret = true;
 8010c5e:	e7f7      	b.n	8010c50 <cancel_delayable_async_locked+0x12>

08010c60 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8010c60:	2300      	movs	r3, #0
 8010c62:	6003      	str	r3, [r0, #0]
 8010c64:	6043      	str	r3, [r0, #4]
 8010c66:	6083      	str	r3, [r0, #8]
 8010c68:	60c3      	str	r3, [r0, #12]
 8010c6a:	6041      	str	r1, [r0, #4]
}
 8010c6c:	4770      	bx	lr

08010c6e <k_work_submit_to_queue>:
{
 8010c6e:	b530      	push	{r4, r5, lr}
 8010c70:	b083      	sub	sp, #12
 8010c72:	9001      	str	r0, [sp, #4]
 8010c74:	4608      	mov	r0, r1
	__asm__ volatile(
 8010c76:	f04f 0310 	mov.w	r3, #16
 8010c7a:	f3ef 8511 	mrs	r5, BASEPRI
 8010c7e:	f383 8812 	msr	BASEPRI_MAX, r3
 8010c82:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 8010c86:	a901      	add	r1, sp, #4
 8010c88:	f7fa ffa8 	bl	800bbdc <submit_to_queue_locked>
 8010c8c:	4604      	mov	r4, r0
	__asm__ volatile(
 8010c8e:	f385 8811 	msr	BASEPRI, r5
 8010c92:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 8010c96:	2800      	cmp	r0, #0
 8010c98:	dc02      	bgt.n	8010ca0 <k_work_submit_to_queue+0x32>
}
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	b003      	add	sp, #12
 8010c9e:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 8010ca0:	f7fb fccc 	bl	800c63c <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	d0f8      	beq.n	8010c9a <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 8010ca8:	f7fb fc1a 	bl	800c4e0 <z_impl_k_yield>
	return ret;
 8010cac:	e7f5      	b.n	8010c9a <k_work_submit_to_queue+0x2c>

08010cae <k_work_init_delayable>:
{
 8010cae:	b538      	push	{r3, r4, r5, lr}
 8010cb0:	4604      	mov	r4, r0
 8010cb2:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 8010cb4:	2230      	movs	r2, #48	; 0x30
 8010cb6:	2100      	movs	r1, #0
 8010cb8:	f000 faff 	bl	80112ba <memset>
 8010cbc:	6065      	str	r5, [r4, #4]
 8010cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010cc2:	60e3      	str	r3, [r4, #12]
}
 8010cc4:	bd38      	pop	{r3, r4, r5, pc}

08010cc6 <k_work_reschedule_for_queue>:
{
 8010cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cc8:	b083      	sub	sp, #12
 8010cca:	9001      	str	r0, [sp, #4]
 8010ccc:	460c      	mov	r4, r1
 8010cce:	4616      	mov	r6, r2
 8010cd0:	461d      	mov	r5, r3
	__asm__ volatile(
 8010cd2:	f04f 0310 	mov.w	r3, #16
 8010cd6:	f3ef 8711 	mrs	r7, BASEPRI
 8010cda:	f383 8812 	msr	BASEPRI_MAX, r3
 8010cde:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
 8010ce2:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
 8010ce4:	f023 0208 	bic.w	r2, r3, #8
 8010ce8:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 8010cea:	f013 0f08 	tst.w	r3, #8
 8010cee:	d10b      	bne.n	8010d08 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
 8010cf0:	4632      	mov	r2, r6
 8010cf2:	462b      	mov	r3, r5
 8010cf4:	4621      	mov	r1, r4
 8010cf6:	a801      	add	r0, sp, #4
 8010cf8:	f7fa ffdc 	bl	800bcb4 <schedule_for_queue_locked>
	__asm__ volatile(
 8010cfc:	f387 8811 	msr	BASEPRI, r7
 8010d00:	f3bf 8f6f 	isb	sy
}
 8010d04:	b003      	add	sp, #12
 8010d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
 8010d08:	f101 0010 	add.w	r0, r1, #16
 8010d0c:	f000 f9cb 	bl	80110a6 <z_abort_timeout>
		ret = true;
 8010d10:	e7ee      	b.n	8010cf0 <k_work_reschedule_for_queue+0x2a>

08010d12 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
 8010d12:	b510      	push	{r4, lr}
	__asm__ volatile(
 8010d14:	f04f 0310 	mov.w	r3, #16
 8010d18:	f3ef 8411 	mrs	r4, BASEPRI
 8010d1c:	f383 8812 	msr	BASEPRI_MAX, r3
 8010d20:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
 8010d24:	f7ff ff8b 	bl	8010c3e <cancel_delayable_async_locked>
	__asm__ volatile(
 8010d28:	f384 8811 	msr	BASEPRI, r4
 8010d2c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
 8010d30:	bd10      	pop	{r4, pc}

08010d32 <thread_active_elsewhere>:
}
 8010d32:	2000      	movs	r0, #0
 8010d34:	4770      	bx	lr

08010d36 <pended_on_thread>:
}
 8010d36:	6880      	ldr	r0, [r0, #8]
 8010d38:	4770      	bx	lr

08010d3a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 8010d3a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8010d3e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 8010d42:	4283      	cmp	r3, r0
 8010d44:	d001      	beq.n	8010d4a <z_sched_prio_cmp+0x10>
		return b2 - b1;
 8010d46:	1ac0      	subs	r0, r0, r3
 8010d48:	4770      	bx	lr
	return 0;
 8010d4a:	2000      	movs	r0, #0
}
 8010d4c:	4770      	bx	lr

08010d4e <z_unpend_thread_no_timeout>:
{
 8010d4e:	b538      	push	{r3, r4, r5, lr}
 8010d50:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8010d52:	2300      	movs	r3, #0
	__asm__ volatile(
 8010d54:	f04f 0210 	mov.w	r2, #16
 8010d58:	f3ef 8511 	mrs	r5, BASEPRI
 8010d5c:	f382 8812 	msr	BASEPRI_MAX, r2
 8010d60:	f3bf 8f6f 	isb	sy
 8010d64:	e010      	b.n	8010d88 <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8010d66:	4620      	mov	r0, r4
 8010d68:	f7ff ffe5 	bl	8010d36 <pended_on_thread>
 8010d6c:	4621      	mov	r1, r4
 8010d6e:	f000 f823 	bl	8010db8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8010d72:	7b63      	ldrb	r3, [r4, #13]
 8010d74:	f023 0302 	bic.w	r3, r3, #2
 8010d78:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8010d7e:	f385 8811 	msr	BASEPRI, r5
 8010d82:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8010d86:	2301      	movs	r3, #1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d0ec      	beq.n	8010d66 <z_unpend_thread_no_timeout+0x18>
}
 8010d8c:	bd38      	pop	{r3, r4, r5, pc}

08010d8e <z_reschedule_irqlock>:
{
 8010d8e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8010d90:	4603      	mov	r3, r0
 8010d92:	b920      	cbnz	r0, 8010d9e <z_reschedule_irqlock+0x10>
 8010d94:	f3ef 8205 	mrs	r2, IPSR
 8010d98:	b942      	cbnz	r2, 8010dac <z_reschedule_irqlock+0x1e>
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	e000      	b.n	8010da0 <z_reschedule_irqlock+0x12>
 8010d9e:	2200      	movs	r2, #0
	if (resched(key)) {
 8010da0:	b932      	cbnz	r2, 8010db0 <z_reschedule_irqlock+0x22>
 8010da2:	f383 8811 	msr	BASEPRI, r3
 8010da6:	f3bf 8f6f 	isb	sy
}
 8010daa:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8010dac:	2200      	movs	r2, #0
 8010dae:	e7f7      	b.n	8010da0 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7f3 fc87 	bl	80046c4 <arch_swap>
	return ret;
 8010db6:	e7f8      	b.n	8010daa <z_reschedule_irqlock+0x1c>

08010db8 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
 8010db8:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 8010dba:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
 8010dbc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8010dbe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 8010dc4:	604b      	str	r3, [r1, #4]
}
 8010dc6:	4770      	bx	lr

08010dc8 <z_unpend_thread>:
{
 8010dc8:	b538      	push	{r3, r4, r5, lr}
 8010dca:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8010dcc:	2300      	movs	r3, #0
	__asm__ volatile(
 8010dce:	f04f 0210 	mov.w	r2, #16
 8010dd2:	f3ef 8511 	mrs	r5, BASEPRI
 8010dd6:	f382 8812 	msr	BASEPRI_MAX, r2
 8010dda:	f3bf 8f6f 	isb	sy
 8010dde:	e010      	b.n	8010e02 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8010de0:	4620      	mov	r0, r4
 8010de2:	f7ff ffa8 	bl	8010d36 <pended_on_thread>
 8010de6:	4621      	mov	r1, r4
 8010de8:	f7ff ffe6 	bl	8010db8 <z_priq_dumb_remove>
 8010dec:	7b63      	ldrb	r3, [r4, #13]
 8010dee:	f023 0302 	bic.w	r3, r3, #2
 8010df2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8010df4:	2300      	movs	r3, #0
 8010df6:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8010df8:	f385 8811 	msr	BASEPRI, r5
 8010dfc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8010e00:	2301      	movs	r3, #1
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d0ec      	beq.n	8010de0 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
 8010e06:	f104 0018 	add.w	r0, r4, #24
 8010e0a:	f000 f94c 	bl	80110a6 <z_abort_timeout>
}
 8010e0e:	bd38      	pop	{r3, r4, r5, pc}

08010e10 <z_priq_dumb_best>:
{
 8010e10:	4603      	mov	r3, r0
	return list->head == list;
 8010e12:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010e14:	4283      	cmp	r3, r0
 8010e16:	d000      	beq.n	8010e1a <z_priq_dumb_best+0xa>
}
 8010e18:	4770      	bx	lr
	struct k_thread *thread = NULL;
 8010e1a:	2000      	movs	r0, #0
	return thread;
 8010e1c:	e7fc      	b.n	8010e18 <z_priq_dumb_best+0x8>

08010e1e <z_ready_thread>:
{
 8010e1e:	b538      	push	{r3, r4, r5, lr}
 8010e20:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8010e22:	2300      	movs	r3, #0
	__asm__ volatile(
 8010e24:	f04f 0210 	mov.w	r2, #16
 8010e28:	f3ef 8511 	mrs	r5, BASEPRI
 8010e2c:	f382 8812 	msr	BASEPRI_MAX, r2
 8010e30:	f3bf 8f6f 	isb	sy
 8010e34:	e004      	b.n	8010e40 <z_ready_thread+0x22>
	__asm__ volatile(
 8010e36:	f385 8811 	msr	BASEPRI, r5
 8010e3a:	f3bf 8f6f 	isb	sy
 8010e3e:	2301      	movs	r3, #1
 8010e40:	b943      	cbnz	r3, 8010e54 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 8010e42:	4620      	mov	r0, r4
 8010e44:	f7ff ff75 	bl	8010d32 <thread_active_elsewhere>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	d1f4      	bne.n	8010e36 <z_ready_thread+0x18>
			ready_thread(thread);
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	f7fb f999 	bl	800c184 <ready_thread>
 8010e52:	e7f0      	b.n	8010e36 <z_ready_thread+0x18>
}
 8010e54:	bd38      	pop	{r3, r4, r5, pc}

08010e56 <z_thread_timeout>:
{
 8010e56:	b570      	push	{r4, r5, r6, lr}
 8010e58:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 8010e5a:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 8010e5e:	2300      	movs	r3, #0
	__asm__ volatile(
 8010e60:	f04f 0210 	mov.w	r2, #16
 8010e64:	f3ef 8611 	mrs	r6, BASEPRI
 8010e68:	f382 8812 	msr	BASEPRI_MAX, r2
 8010e6c:	f3bf 8f6f 	isb	sy
 8010e70:	e011      	b.n	8010e96 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8010e72:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8010e76:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8010e7a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8010e7e:	f023 0310 	bic.w	r3, r3, #16
 8010e82:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 8010e86:	4628      	mov	r0, r5
 8010e88:	f7fb f97c 	bl	800c184 <ready_thread>
	__asm__ volatile(
 8010e8c:	f386 8811 	msr	BASEPRI, r6
 8010e90:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8010e94:	2301      	movs	r3, #1
 8010e96:	b9ab      	cbnz	r3, 8010ec4 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 8010e98:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 8010e9c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8010ea0:	d1f4      	bne.n	8010e8c <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 8010ea2:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d0e3      	beq.n	8010e72 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f7ff ff43 	bl	8010d36 <pended_on_thread>
 8010eb0:	4629      	mov	r1, r5
 8010eb2:	f7ff ff81 	bl	8010db8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8010eb6:	7b6b      	ldrb	r3, [r5, #13]
 8010eb8:	f023 0302 	bic.w	r3, r3, #2
 8010ebc:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	60ab      	str	r3, [r5, #8]
}
 8010ec2:	e7d6      	b.n	8010e72 <z_thread_timeout+0x1c>
}
 8010ec4:	bd70      	pop	{r4, r5, r6, pc}

08010ec6 <add_to_waitq_locked>:
{
 8010ec6:	b570      	push	{r4, r5, r6, lr}
 8010ec8:	4605      	mov	r5, r0
 8010eca:	460e      	mov	r6, r1
	unready_thread(thread);
 8010ecc:	f7fb f9b8 	bl	800c240 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8010ed0:	7b6b      	ldrb	r3, [r5, #13]
 8010ed2:	f043 0302 	orr.w	r3, r3, #2
 8010ed6:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 8010ed8:	b1b6      	cbz	r6, 8010f08 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 8010eda:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 8010edc:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010ede:	42a6      	cmp	r6, r4
 8010ee0:	d019      	beq.n	8010f16 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8010ee2:	b164      	cbz	r4, 8010efe <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f7ff ff27 	bl	8010d3a <z_sched_prio_cmp>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	dc0c      	bgt.n	8010f0a <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8010ef0:	b12c      	cbz	r4, 8010efe <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 8010ef2:	6873      	ldr	r3, [r6, #4]
 8010ef4:	429c      	cmp	r4, r3
 8010ef6:	d002      	beq.n	8010efe <add_to_waitq_locked+0x38>
 8010ef8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8010efa:	2c00      	cmp	r4, #0
 8010efc:	d1f1      	bne.n	8010ee2 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 8010efe:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 8010f00:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 8010f02:	606b      	str	r3, [r5, #4]
	tail->next = node;
 8010f04:	601d      	str	r5, [r3, #0]
	list->tail = node;
 8010f06:	6075      	str	r5, [r6, #4]
}
 8010f08:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 8010f0a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 8010f0c:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8010f0e:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8010f10:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8010f12:	6065      	str	r5, [r4, #4]
}
 8010f14:	e7f8      	b.n	8010f08 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8010f16:	2400      	movs	r4, #0
 8010f18:	e7e3      	b.n	8010ee2 <add_to_waitq_locked+0x1c>

08010f1a <pend>:
{
 8010f1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f1e:	4605      	mov	r5, r0
 8010f20:	460e      	mov	r6, r1
 8010f22:	4691      	mov	r9, r2
 8010f24:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 8010f26:	2400      	movs	r4, #0
	__asm__ volatile(
 8010f28:	f04f 0310 	mov.w	r3, #16
 8010f2c:	f3ef 8711 	mrs	r7, BASEPRI
 8010f30:	f383 8812 	msr	BASEPRI_MAX, r3
 8010f34:	f3bf 8f6f 	isb	sy
 8010f38:	e008      	b.n	8010f4c <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 8010f3a:	4631      	mov	r1, r6
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	f7ff ffc2 	bl	8010ec6 <add_to_waitq_locked>
	__asm__ volatile(
 8010f42:	f387 8811 	msr	BASEPRI, r7
 8010f46:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8010f4a:	2401      	movs	r4, #1
 8010f4c:	2c00      	cmp	r4, #0
 8010f4e:	d0f4      	beq.n	8010f3a <pend+0x20>
	add_thread_timeout(thread, timeout);
 8010f50:	464a      	mov	r2, r9
 8010f52:	4643      	mov	r3, r8
 8010f54:	4628      	mov	r0, r5
 8010f56:	f7fa ffcb 	bl	800bef0 <add_thread_timeout>
}
 8010f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010f5e <z_unpend1_no_timeout>:
{
 8010f5e:	b570      	push	{r4, r5, r6, lr}
 8010f60:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 8010f62:	2300      	movs	r3, #0
	__asm__ volatile(
 8010f64:	f04f 0210 	mov.w	r2, #16
 8010f68:	f3ef 8611 	mrs	r6, BASEPRI
 8010f6c:	f382 8812 	msr	BASEPRI_MAX, r2
 8010f70:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 8010f74:	461c      	mov	r4, r3
 8010f76:	e004      	b.n	8010f82 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 8010f78:	f386 8811 	msr	BASEPRI, r6
 8010f7c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8010f80:	2301      	movs	r3, #1
 8010f82:	b98b      	cbnz	r3, 8010fa8 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 8010f84:	4628      	mov	r0, r5
 8010f86:	f7ff ff43 	bl	8010e10 <z_priq_dumb_best>
		if (thread != NULL) {
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	2800      	cmp	r0, #0
 8010f8e:	d0f3      	beq.n	8010f78 <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8010f90:	f7ff fed1 	bl	8010d36 <pended_on_thread>
 8010f94:	4621      	mov	r1, r4
 8010f96:	f7ff ff0f 	bl	8010db8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8010f9a:	7b63      	ldrb	r3, [r4, #13]
 8010f9c:	f023 0302 	bic.w	r3, r3, #2
 8010fa0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	60a3      	str	r3, [r4, #8]
}
 8010fa6:	e7e7      	b.n	8010f78 <z_unpend1_no_timeout+0x1a>
}
 8010fa8:	4620      	mov	r0, r4
 8010faa:	bd70      	pop	{r4, r5, r6, pc}

08010fac <z_unpend_first_thread>:
{
 8010fac:	b570      	push	{r4, r5, r6, lr}
 8010fae:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 8010fb0:	2300      	movs	r3, #0
	__asm__ volatile(
 8010fb2:	f04f 0210 	mov.w	r2, #16
 8010fb6:	f3ef 8611 	mrs	r6, BASEPRI
 8010fba:	f382 8812 	msr	BASEPRI_MAX, r2
 8010fbe:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 8010fc2:	461c      	mov	r4, r3
 8010fc4:	e004      	b.n	8010fd0 <z_unpend_first_thread+0x24>
	__asm__ volatile(
 8010fc6:	f386 8811 	msr	BASEPRI, r6
 8010fca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8010fce:	2301      	movs	r3, #1
 8010fd0:	b9ab      	cbnz	r3, 8010ffe <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	f7ff ff1c 	bl	8010e10 <z_priq_dumb_best>
		if (thread != NULL) {
 8010fd8:	4604      	mov	r4, r0
 8010fda:	2800      	cmp	r0, #0
 8010fdc:	d0f3      	beq.n	8010fc6 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8010fde:	f7ff feaa 	bl	8010d36 <pended_on_thread>
 8010fe2:	4621      	mov	r1, r4
 8010fe4:	f7ff fee8 	bl	8010db8 <z_priq_dumb_remove>
 8010fe8:	7b63      	ldrb	r3, [r4, #13]
 8010fea:	f023 0302 	bic.w	r3, r3, #2
 8010fee:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	60a3      	str	r3, [r4, #8]
 8010ff4:	f104 0018 	add.w	r0, r4, #24
 8010ff8:	f000 f855 	bl	80110a6 <z_abort_timeout>
 8010ffc:	e7e3      	b.n	8010fc6 <z_unpend_first_thread+0x1a>
}
 8010ffe:	4620      	mov	r0, r4
 8011000:	bd70      	pop	{r4, r5, r6, pc}

08011002 <init_ready_q>:
	sys_dlist_init(&rq->runq);
 8011002:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
 8011004:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
 8011006:	6083      	str	r3, [r0, #8]
}
 8011008:	4770      	bx	lr

0801100a <z_sched_wake>:
{
 801100a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801100e:	4605      	mov	r5, r0
 8011010:	4688      	mov	r8, r1
 8011012:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 8011014:	2300      	movs	r3, #0
	__asm__ volatile(
 8011016:	f04f 0210 	mov.w	r2, #16
 801101a:	f3ef 8611 	mrs	r6, BASEPRI
 801101e:	f382 8812 	msr	BASEPRI_MAX, r2
 8011022:	f3bf 8f6f 	isb	sy
	bool ret = false;
 8011026:	4699      	mov	r9, r3
 8011028:	e004      	b.n	8011034 <z_sched_wake+0x2a>
	__asm__ volatile(
 801102a:	f386 8811 	msr	BASEPRI, r6
 801102e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8011032:	2301      	movs	r3, #1
 8011034:	b9eb      	cbnz	r3, 8011072 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 8011036:	4628      	mov	r0, r5
 8011038:	f7ff feea 	bl	8010e10 <z_priq_dumb_best>
		if (thread != NULL) {
 801103c:	4604      	mov	r4, r0
 801103e:	2800      	cmp	r0, #0
 8011040:	d0f3      	beq.n	801102a <z_sched_wake+0x20>
 8011042:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8011046:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8011048:	f7ff fe75 	bl	8010d36 <pended_on_thread>
 801104c:	4621      	mov	r1, r4
 801104e:	f7ff feb3 	bl	8010db8 <z_priq_dumb_remove>
 8011052:	7b63      	ldrb	r3, [r4, #13]
 8011054:	f023 0302 	bic.w	r3, r3, #2
 8011058:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 801105a:	2300      	movs	r3, #0
 801105c:	60a3      	str	r3, [r4, #8]
 801105e:	f104 0018 	add.w	r0, r4, #24
 8011062:	f000 f820 	bl	80110a6 <z_abort_timeout>
			ready_thread(thread);
 8011066:	4620      	mov	r0, r4
 8011068:	f7fb f88c 	bl	800c184 <ready_thread>
			ret = true;
 801106c:	f04f 0901 	mov.w	r9, #1
 8011070:	e7db      	b.n	801102a <z_sched_wake+0x20>
}
 8011072:	4648      	mov	r0, r9
 8011074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011078 <remove_timeout>:
{
 8011078:	b510      	push	{r4, lr}
 801107a:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 801107c:	f7fb fb4e 	bl	800c71c <next>
 8011080:	b148      	cbz	r0, 8011096 <remove_timeout+0x1e>
 8011082:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 8011084:	6920      	ldr	r0, [r4, #16]
 8011086:	6961      	ldr	r1, [r4, #20]
 8011088:	6913      	ldr	r3, [r2, #16]
 801108a:	181b      	adds	r3, r3, r0
 801108c:	6950      	ldr	r0, [r2, #20]
 801108e:	eb41 0100 	adc.w	r1, r1, r0
 8011092:	6113      	str	r3, [r2, #16]
 8011094:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 8011096:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 8011098:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 801109a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 801109c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801109e:	2300      	movs	r3, #0
 80110a0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 80110a2:	6063      	str	r3, [r4, #4]
}
 80110a4:	bd10      	pop	{r4, pc}

080110a6 <z_abort_timeout>:
{
 80110a6:	b570      	push	{r4, r5, r6, lr}
 80110a8:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 80110aa:	2300      	movs	r3, #0
	__asm__ volatile(
 80110ac:	f04f 0210 	mov.w	r2, #16
 80110b0:	f3ef 8611 	mrs	r6, BASEPRI
 80110b4:	f382 8812 	msr	BASEPRI_MAX, r2
 80110b8:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 80110bc:	f06f 0015 	mvn.w	r0, #21
 80110c0:	e004      	b.n	80110cc <z_abort_timeout+0x26>
	__asm__ volatile(
 80110c2:	f386 8811 	msr	BASEPRI, r6
 80110c6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 80110ca:	2301      	movs	r3, #1
 80110cc:	461d      	mov	r5, r3
 80110ce:	b93b      	cbnz	r3, 80110e0 <z_abort_timeout+0x3a>
	return node->next != NULL;
 80110d0:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d0f5      	beq.n	80110c2 <z_abort_timeout+0x1c>
			remove_timeout(to);
 80110d6:	4620      	mov	r0, r4
 80110d8:	f7ff ffce 	bl	8011078 <remove_timeout>
			ret = 0;
 80110dc:	4628      	mov	r0, r5
 80110de:	e7f0      	b.n	80110c2 <z_abort_timeout+0x1c>
}
 80110e0:	bd70      	pop	{r4, r5, r6, pc}

080110e2 <z_set_timeout_expiry>:
{
 80110e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110e4:	4605      	mov	r5, r0
 80110e6:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 80110e8:	2300      	movs	r3, #0
	__asm__ volatile(
 80110ea:	f04f 0210 	mov.w	r2, #16
 80110ee:	f3ef 8611 	mrs	r6, BASEPRI
 80110f2:	f382 8812 	msr	BASEPRI_MAX, r2
 80110f6:	f3bf 8f6f 	isb	sy
 80110fa:	e00a      	b.n	8011112 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 80110fc:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 80110fe:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8011102:	2801      	cmp	r0, #1
 8011104:	dd00      	ble.n	8011108 <z_set_timeout_expiry+0x26>
 8011106:	b97c      	cbnz	r4, 8011128 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 8011108:	f386 8811 	msr	BASEPRI, r6
 801110c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8011110:	2301      	movs	r3, #1
 8011112:	461c      	mov	r4, r3
 8011114:	b97b      	cbnz	r3, 8011136 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 8011116:	f7fb fb19 	bl	800c74c <next_timeout>
			      || (ticks <= next_to);
 801111a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801111e:	d0ed      	beq.n	80110fc <z_set_timeout_expiry+0x1a>
 8011120:	42a8      	cmp	r0, r5
 8011122:	dbec      	blt.n	80110fe <z_set_timeout_expiry+0x1c>
 8011124:	2401      	movs	r4, #1
 8011126:	e7ea      	b.n	80110fe <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8011128:	4639      	mov	r1, r7
 801112a:	42a8      	cmp	r0, r5
 801112c:	bfa8      	it	ge
 801112e:	4628      	movge	r0, r5
 8011130:	f7f9 ff62 	bl	800aff8 <sys_clock_set_timeout>
 8011134:	e7e8      	b.n	8011108 <z_set_timeout_expiry+0x26>
}
 8011136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011138 <sys_clock_tick_get_32>:
{
 8011138:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 801113a:	f7fb fc1b 	bl	800c974 <sys_clock_tick_get>
}
 801113e:	bd08      	pop	{r3, pc}

08011140 <z_impl_k_uptime_ticks>:
{
 8011140:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 8011142:	f7fb fc17 	bl	800c974 <sys_clock_tick_get>
}
 8011146:	bd08      	pop	{r3, pc}

08011148 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 8011148:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 801114a:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 801114c:	2300      	movs	r3, #0
 801114e:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
 8011150:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 8011154:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 8011156:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 8011158:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 801115a:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 801115c:	6343      	str	r3, [r0, #52]	; 0x34
}
 801115e:	4770      	bx	lr

08011160 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8011160:	b510      	push	{r4, lr}
 8011162:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 8011164:	f7ff ff9f 	bl	80110a6 <z_abort_timeout>

	if (inactive) {
 8011168:	b9a0      	cbnz	r0, 8011194 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 801116a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801116c:	b10b      	cbz	r3, 8011172 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 801116e:	4620      	mov	r0, r4
 8011170:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 8011172:	f104 0018 	add.w	r0, r4, #24
 8011176:	f7ff fef2 	bl	8010f5e <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 801117a:	b158      	cbz	r0, 8011194 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 801117c:	f7ff fe4f 	bl	8010e1e <z_ready_thread>
	__asm__ volatile(
 8011180:	f04f 0310 	mov.w	r3, #16
 8011184:	f3ef 8011 	mrs	r0, BASEPRI
 8011188:	f383 8812 	msr	BASEPRI_MAX, r3
 801118c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8011190:	f7ff fdfd 	bl	8010d8e <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 8011194:	bd10      	pop	{r4, pc}

08011196 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8011196:	b108      	cbz	r0, 801119c <poller_thread+0x6>
 8011198:	3860      	subs	r0, #96	; 0x60
 801119a:	4770      	bx	lr
}
 801119c:	4770      	bx	lr

0801119e <signal_poller>:
{
 801119e:	b538      	push	{r3, r4, r5, lr}
 80111a0:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 80111a2:	6880      	ldr	r0, [r0, #8]
 80111a4:	f7ff fff7 	bl	8011196 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 80111a8:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
 80111aa:	f013 0f02 	tst.w	r3, #2
 80111ae:	d024      	beq.n	80111fa <signal_poller+0x5c>
 80111b0:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 80111b2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80111b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
 80111b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80111ba:	bf08      	it	eq
 80111bc:	f112 0f02 	cmneq.w	r2, #2
 80111c0:	d01d      	beq.n	80111fe <signal_poller+0x60>
	z_unpend_thread(thread);
 80111c2:	f7ff fe01 	bl	8010dc8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 80111c6:	2d08      	cmp	r5, #8
 80111c8:	d009      	beq.n	80111de <signal_poller+0x40>
 80111ca:	2300      	movs	r3, #0
 80111cc:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
 80111ce:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80111d0:	f013 0f1f 	tst.w	r3, #31
 80111d4:	d108      	bne.n	80111e8 <signal_poller+0x4a>
	return node->next != NULL;
 80111d6:	69a3      	ldr	r3, [r4, #24]
 80111d8:	b123      	cbz	r3, 80111e4 <signal_poller+0x46>
 80111da:	2300      	movs	r3, #0
 80111dc:	e005      	b.n	80111ea <signal_poller+0x4c>
 80111de:	f06f 0303 	mvn.w	r3, #3
 80111e2:	e7f3      	b.n	80111cc <signal_poller+0x2e>
 80111e4:	2301      	movs	r3, #1
 80111e6:	e000      	b.n	80111ea <signal_poller+0x4c>
 80111e8:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 80111ea:	b90b      	cbnz	r3, 80111f0 <signal_poller+0x52>
		return 0;
 80111ec:	2000      	movs	r0, #0
 80111ee:	e005      	b.n	80111fc <signal_poller+0x5e>
	z_ready_thread(thread);
 80111f0:	4620      	mov	r0, r4
 80111f2:	f7ff fe14 	bl	8010e1e <z_ready_thread>
	return 0;
 80111f6:	2000      	movs	r0, #0
 80111f8:	e000      	b.n	80111fc <signal_poller+0x5e>
		return 0;
 80111fa:	2000      	movs	r0, #0
}
 80111fc:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 80111fe:	f06f 000a 	mvn.w	r0, #10
 8011202:	e7fb      	b.n	80111fc <signal_poller+0x5e>

08011204 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 8011204:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 8011206:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 8011208:	7823      	ldrb	r3, [r4, #0]
 801120a:	b173      	cbz	r3, 801122a <signal_triggered_work+0x26>
 801120c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8011210:	b15d      	cbz	r5, 801122a <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 8011212:	f1a4 0614 	sub.w	r6, r4, #20
 8011216:	f104 0014 	add.w	r0, r4, #20
 801121a:	f7ff ff44 	bl	80110a6 <z_abort_timeout>
		twork->poll_result = 0;
 801121e:	2300      	movs	r3, #0
 8011220:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 8011222:	4631      	mov	r1, r6
 8011224:	4628      	mov	r0, r5
 8011226:	f7ff fd22 	bl	8010c6e <k_work_submit_to_queue>
	}

	return 0;
}
 801122a:	2000      	movs	r0, #0
 801122c:	bd70      	pop	{r4, r5, r6, pc}

0801122e <signal_poll_event>:
{
 801122e:	b570      	push	{r4, r5, r6, lr}
 8011230:	4604      	mov	r4, r0
 8011232:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 8011234:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 8011236:	b1d6      	cbz	r6, 801126e <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 8011238:	7873      	ldrb	r3, [r6, #1]
 801123a:	2b01      	cmp	r3, #1
 801123c:	d00d      	beq.n	801125a <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 801123e:	2b02      	cmp	r3, #2
 8011240:	d012      	beq.n	8011268 <signal_poll_event+0x3a>
		poller->is_polling = false;
 8011242:	2000      	movs	r0, #0
 8011244:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 8011246:	2300      	movs	r3, #0
 8011248:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 801124a:	68e3      	ldr	r3, [r4, #12]
 801124c:	f3c3 3145 	ubfx	r1, r3, #13, #6
 8011250:	430d      	orrs	r5, r1
 8011252:	f365 3352 	bfi	r3, r5, #13, #6
 8011256:	60e3      	str	r3, [r4, #12]
}
 8011258:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 801125a:	f7ff ffa0 	bl	801119e <signal_poller>
		poller->is_polling = false;
 801125e:	2300      	movs	r3, #0
 8011260:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 8011262:	4298      	cmp	r0, r3
 8011264:	daef      	bge.n	8011246 <signal_poll_event+0x18>
 8011266:	e7f7      	b.n	8011258 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 8011268:	f7ff ffcc 	bl	8011204 <signal_triggered_work>
 801126c:	e7f7      	b.n	801125e <signal_poll_event+0x30>
	int retcode = 0;
 801126e:	2000      	movs	r0, #0
 8011270:	e7e9      	b.n	8011246 <signal_poll_event+0x18>

08011272 <z_handle_obj_poll_events>:
{
 8011272:	b508      	push	{r3, lr}
 8011274:	4603      	mov	r3, r0
	return list->head == list;
 8011276:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 8011278:	4283      	cmp	r3, r0
 801127a:	d009      	beq.n	8011290 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 801127c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 801127e:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 8011280:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8011282:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8011284:	2300      	movs	r3, #0
 8011286:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8011288:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 801128a:	b108      	cbz	r0, 8011290 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 801128c:	f7ff ffcf 	bl	801122e <signal_poll_event>
}
 8011290:	bd08      	pop	{r3, pc}

08011292 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 8011292:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 8011294:	4770      	bx	lr

08011296 <atoi>:
 8011296:	220a      	movs	r2, #10
 8011298:	2100      	movs	r1, #0
 801129a:	f7fc bbf9 	b.w	800da90 <strtol>

0801129e <memcpy>:
 801129e:	440a      	add	r2, r1
 80112a0:	4291      	cmp	r1, r2
 80112a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80112a6:	d100      	bne.n	80112aa <memcpy+0xc>
 80112a8:	4770      	bx	lr
 80112aa:	b510      	push	{r4, lr}
 80112ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80112b4:	4291      	cmp	r1, r2
 80112b6:	d1f9      	bne.n	80112ac <memcpy+0xe>
 80112b8:	bd10      	pop	{r4, pc}

080112ba <memset>:
 80112ba:	4402      	add	r2, r0
 80112bc:	4603      	mov	r3, r0
 80112be:	4293      	cmp	r3, r2
 80112c0:	d100      	bne.n	80112c4 <memset+0xa>
 80112c2:	4770      	bx	lr
 80112c4:	f803 1b01 	strb.w	r1, [r3], #1
 80112c8:	e7f9      	b.n	80112be <memset+0x4>

080112ca <__cvt>:
 80112ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112ce:	b088      	sub	sp, #32
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	461f      	mov	r7, r3
 80112d4:	4614      	mov	r4, r2
 80112d6:	bfb8      	it	lt
 80112d8:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80112dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80112de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80112e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80112e4:	bfb6      	itet	lt
 80112e6:	461f      	movlt	r7, r3
 80112e8:	2300      	movge	r3, #0
 80112ea:	232d      	movlt	r3, #45	; 0x2d
 80112ec:	7013      	strb	r3, [r2, #0]
 80112ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80112f0:	f023 0820 	bic.w	r8, r3, #32
 80112f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80112f8:	d005      	beq.n	8011306 <__cvt+0x3c>
 80112fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80112fe:	d100      	bne.n	8011302 <__cvt+0x38>
 8011300:	3501      	adds	r5, #1
 8011302:	2302      	movs	r3, #2
 8011304:	e000      	b.n	8011308 <__cvt+0x3e>
 8011306:	2303      	movs	r3, #3
 8011308:	aa07      	add	r2, sp, #28
 801130a:	9204      	str	r2, [sp, #16]
 801130c:	aa06      	add	r2, sp, #24
 801130e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011312:	e9cd 3500 	strd	r3, r5, [sp]
 8011316:	4622      	mov	r2, r4
 8011318:	463b      	mov	r3, r7
 801131a:	f7ef fda5 	bl	8000e68 <_dtoa_r>
 801131e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011322:	4606      	mov	r6, r0
 8011324:	d102      	bne.n	801132c <__cvt+0x62>
 8011326:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011328:	07db      	lsls	r3, r3, #31
 801132a:	d522      	bpl.n	8011372 <__cvt+0xa8>
 801132c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011330:	eb06 0905 	add.w	r9, r6, r5
 8011334:	d110      	bne.n	8011358 <__cvt+0x8e>
 8011336:	7833      	ldrb	r3, [r6, #0]
 8011338:	2b30      	cmp	r3, #48	; 0x30
 801133a:	d10a      	bne.n	8011352 <__cvt+0x88>
 801133c:	2200      	movs	r2, #0
 801133e:	2300      	movs	r3, #0
 8011340:	4620      	mov	r0, r4
 8011342:	4639      	mov	r1, r7
 8011344:	f7ef fbba 	bl	8000abc <__aeabi_dcmpeq>
 8011348:	b918      	cbnz	r0, 8011352 <__cvt+0x88>
 801134a:	f1c5 0501 	rsb	r5, r5, #1
 801134e:	f8ca 5000 	str.w	r5, [sl]
 8011352:	f8da 3000 	ldr.w	r3, [sl]
 8011356:	4499      	add	r9, r3
 8011358:	2200      	movs	r2, #0
 801135a:	2300      	movs	r3, #0
 801135c:	4620      	mov	r0, r4
 801135e:	4639      	mov	r1, r7
 8011360:	f7ef fbac 	bl	8000abc <__aeabi_dcmpeq>
 8011364:	b108      	cbz	r0, 801136a <__cvt+0xa0>
 8011366:	f8cd 901c 	str.w	r9, [sp, #28]
 801136a:	2230      	movs	r2, #48	; 0x30
 801136c:	9b07      	ldr	r3, [sp, #28]
 801136e:	454b      	cmp	r3, r9
 8011370:	d307      	bcc.n	8011382 <__cvt+0xb8>
 8011372:	9b07      	ldr	r3, [sp, #28]
 8011374:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011376:	1b9b      	subs	r3, r3, r6
 8011378:	4630      	mov	r0, r6
 801137a:	6013      	str	r3, [r2, #0]
 801137c:	b008      	add	sp, #32
 801137e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011382:	1c59      	adds	r1, r3, #1
 8011384:	9107      	str	r1, [sp, #28]
 8011386:	701a      	strb	r2, [r3, #0]
 8011388:	e7f0      	b.n	801136c <__cvt+0xa2>

0801138a <__exponent>:
 801138a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801138c:	4603      	mov	r3, r0
 801138e:	2900      	cmp	r1, #0
 8011390:	bfb8      	it	lt
 8011392:	4249      	neglt	r1, r1
 8011394:	f803 2b02 	strb.w	r2, [r3], #2
 8011398:	bfb4      	ite	lt
 801139a:	222d      	movlt	r2, #45	; 0x2d
 801139c:	222b      	movge	r2, #43	; 0x2b
 801139e:	2909      	cmp	r1, #9
 80113a0:	7042      	strb	r2, [r0, #1]
 80113a2:	dd2a      	ble.n	80113fa <__exponent+0x70>
 80113a4:	f10d 0407 	add.w	r4, sp, #7
 80113a8:	46a4      	mov	ip, r4
 80113aa:	270a      	movs	r7, #10
 80113ac:	46a6      	mov	lr, r4
 80113ae:	460a      	mov	r2, r1
 80113b0:	fb91 f6f7 	sdiv	r6, r1, r7
 80113b4:	fb07 1516 	mls	r5, r7, r6, r1
 80113b8:	3530      	adds	r5, #48	; 0x30
 80113ba:	2a63      	cmp	r2, #99	; 0x63
 80113bc:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80113c0:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80113c4:	4631      	mov	r1, r6
 80113c6:	dcf1      	bgt.n	80113ac <__exponent+0x22>
 80113c8:	3130      	adds	r1, #48	; 0x30
 80113ca:	f1ae 0502 	sub.w	r5, lr, #2
 80113ce:	f804 1c01 	strb.w	r1, [r4, #-1]
 80113d2:	1c44      	adds	r4, r0, #1
 80113d4:	4629      	mov	r1, r5
 80113d6:	4561      	cmp	r1, ip
 80113d8:	d30a      	bcc.n	80113f0 <__exponent+0x66>
 80113da:	f10d 0209 	add.w	r2, sp, #9
 80113de:	eba2 020e 	sub.w	r2, r2, lr
 80113e2:	4565      	cmp	r5, ip
 80113e4:	bf88      	it	hi
 80113e6:	2200      	movhi	r2, #0
 80113e8:	4413      	add	r3, r2
 80113ea:	1a18      	subs	r0, r3, r0
 80113ec:	b003      	add	sp, #12
 80113ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80113f4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80113f8:	e7ed      	b.n	80113d6 <__exponent+0x4c>
 80113fa:	2330      	movs	r3, #48	; 0x30
 80113fc:	3130      	adds	r1, #48	; 0x30
 80113fe:	7083      	strb	r3, [r0, #2]
 8011400:	70c1      	strb	r1, [r0, #3]
 8011402:	1d03      	adds	r3, r0, #4
 8011404:	e7f1      	b.n	80113ea <__exponent+0x60>

08011406 <_printf_common>:
 8011406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801140a:	4616      	mov	r6, r2
 801140c:	4699      	mov	r9, r3
 801140e:	688a      	ldr	r2, [r1, #8]
 8011410:	690b      	ldr	r3, [r1, #16]
 8011412:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011416:	4293      	cmp	r3, r2
 8011418:	bfb8      	it	lt
 801141a:	4613      	movlt	r3, r2
 801141c:	6033      	str	r3, [r6, #0]
 801141e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011422:	4607      	mov	r7, r0
 8011424:	460c      	mov	r4, r1
 8011426:	b10a      	cbz	r2, 801142c <_printf_common+0x26>
 8011428:	3301      	adds	r3, #1
 801142a:	6033      	str	r3, [r6, #0]
 801142c:	6823      	ldr	r3, [r4, #0]
 801142e:	0699      	lsls	r1, r3, #26
 8011430:	bf42      	ittt	mi
 8011432:	6833      	ldrmi	r3, [r6, #0]
 8011434:	3302      	addmi	r3, #2
 8011436:	6033      	strmi	r3, [r6, #0]
 8011438:	6825      	ldr	r5, [r4, #0]
 801143a:	f015 0506 	ands.w	r5, r5, #6
 801143e:	d106      	bne.n	801144e <_printf_common+0x48>
 8011440:	f104 0a19 	add.w	sl, r4, #25
 8011444:	68e3      	ldr	r3, [r4, #12]
 8011446:	6832      	ldr	r2, [r6, #0]
 8011448:	1a9b      	subs	r3, r3, r2
 801144a:	42ab      	cmp	r3, r5
 801144c:	dc26      	bgt.n	801149c <_printf_common+0x96>
 801144e:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011452:	1e13      	subs	r3, r2, #0
 8011454:	6822      	ldr	r2, [r4, #0]
 8011456:	bf18      	it	ne
 8011458:	2301      	movne	r3, #1
 801145a:	0692      	lsls	r2, r2, #26
 801145c:	d42b      	bmi.n	80114b6 <_printf_common+0xb0>
 801145e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011462:	4649      	mov	r1, r9
 8011464:	4638      	mov	r0, r7
 8011466:	47c0      	blx	r8
 8011468:	3001      	adds	r0, #1
 801146a:	d01e      	beq.n	80114aa <_printf_common+0xa4>
 801146c:	6823      	ldr	r3, [r4, #0]
 801146e:	68e5      	ldr	r5, [r4, #12]
 8011470:	6832      	ldr	r2, [r6, #0]
 8011472:	f003 0306 	and.w	r3, r3, #6
 8011476:	2b04      	cmp	r3, #4
 8011478:	bf08      	it	eq
 801147a:	1aad      	subeq	r5, r5, r2
 801147c:	68a3      	ldr	r3, [r4, #8]
 801147e:	6922      	ldr	r2, [r4, #16]
 8011480:	bf0c      	ite	eq
 8011482:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011486:	2500      	movne	r5, #0
 8011488:	4293      	cmp	r3, r2
 801148a:	bfc4      	itt	gt
 801148c:	1a9b      	subgt	r3, r3, r2
 801148e:	18ed      	addgt	r5, r5, r3
 8011490:	2600      	movs	r6, #0
 8011492:	341a      	adds	r4, #26
 8011494:	42b5      	cmp	r5, r6
 8011496:	d11a      	bne.n	80114ce <_printf_common+0xc8>
 8011498:	2000      	movs	r0, #0
 801149a:	e008      	b.n	80114ae <_printf_common+0xa8>
 801149c:	2301      	movs	r3, #1
 801149e:	4652      	mov	r2, sl
 80114a0:	4649      	mov	r1, r9
 80114a2:	4638      	mov	r0, r7
 80114a4:	47c0      	blx	r8
 80114a6:	3001      	adds	r0, #1
 80114a8:	d103      	bne.n	80114b2 <_printf_common+0xac>
 80114aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80114ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114b2:	3501      	adds	r5, #1
 80114b4:	e7c6      	b.n	8011444 <_printf_common+0x3e>
 80114b6:	18e1      	adds	r1, r4, r3
 80114b8:	1c5a      	adds	r2, r3, #1
 80114ba:	2030      	movs	r0, #48	; 0x30
 80114bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80114c0:	4422      	add	r2, r4
 80114c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80114c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80114ca:	3302      	adds	r3, #2
 80114cc:	e7c7      	b.n	801145e <_printf_common+0x58>
 80114ce:	2301      	movs	r3, #1
 80114d0:	4622      	mov	r2, r4
 80114d2:	4649      	mov	r1, r9
 80114d4:	4638      	mov	r0, r7
 80114d6:	47c0      	blx	r8
 80114d8:	3001      	adds	r0, #1
 80114da:	d0e6      	beq.n	80114aa <_printf_common+0xa4>
 80114dc:	3601      	adds	r6, #1
 80114de:	e7d9      	b.n	8011494 <_printf_common+0x8e>

080114e0 <__sprintf_chk>:
 80114e0:	b408      	push	{r3}
 80114e2:	b517      	push	{r0, r1, r2, r4, lr}
 80114e4:	ab05      	add	r3, sp, #20
 80114e6:	1e14      	subs	r4, r2, #0
 80114e8:	f853 1b04 	ldr.w	r1, [r3], #4
 80114ec:	9301      	str	r3, [sp, #4]
 80114ee:	da07      	bge.n	8011500 <__sprintf_chk+0x20>
 80114f0:	461a      	mov	r2, r3
 80114f2:	f7fc fafb 	bl	800daec <vsiprintf>
 80114f6:	b003      	add	sp, #12
 80114f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114fc:	b001      	add	sp, #4
 80114fe:	4770      	bx	lr
 8011500:	460a      	mov	r2, r1
 8011502:	4621      	mov	r1, r4
 8011504:	f7fc face 	bl	800daa4 <vsniprintf>
 8011508:	2800      	cmp	r0, #0
 801150a:	dbf4      	blt.n	80114f6 <__sprintf_chk+0x16>
 801150c:	42a0      	cmp	r0, r4
 801150e:	d3f2      	bcc.n	80114f6 <__sprintf_chk+0x16>
 8011510:	f7f4 f932 	bl	8005778 <__chk_fail>

08011514 <strnlen>:
 8011514:	b510      	push	{r4, lr}
 8011516:	4602      	mov	r2, r0
 8011518:	4401      	add	r1, r0
 801151a:	428a      	cmp	r2, r1
 801151c:	4613      	mov	r3, r2
 801151e:	d003      	beq.n	8011528 <strnlen+0x14>
 8011520:	781c      	ldrb	r4, [r3, #0]
 8011522:	3201      	adds	r2, #1
 8011524:	2c00      	cmp	r4, #0
 8011526:	d1f8      	bne.n	801151a <strnlen+0x6>
 8011528:	1a18      	subs	r0, r3, r0
 801152a:	bd10      	pop	{r4, pc}

0801152c <__strtok_r>:
 801152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801152e:	b908      	cbnz	r0, 8011534 <__strtok_r+0x8>
 8011530:	6810      	ldr	r0, [r2, #0]
 8011532:	b188      	cbz	r0, 8011558 <__strtok_r+0x2c>
 8011534:	4604      	mov	r4, r0
 8011536:	4620      	mov	r0, r4
 8011538:	f814 5b01 	ldrb.w	r5, [r4], #1
 801153c:	460f      	mov	r7, r1
 801153e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011542:	b91e      	cbnz	r6, 801154c <__strtok_r+0x20>
 8011544:	b965      	cbnz	r5, 8011560 <__strtok_r+0x34>
 8011546:	6015      	str	r5, [r2, #0]
 8011548:	4628      	mov	r0, r5
 801154a:	e005      	b.n	8011558 <__strtok_r+0x2c>
 801154c:	42b5      	cmp	r5, r6
 801154e:	d1f6      	bne.n	801153e <__strtok_r+0x12>
 8011550:	2b00      	cmp	r3, #0
 8011552:	d1f0      	bne.n	8011536 <__strtok_r+0xa>
 8011554:	6014      	str	r4, [r2, #0]
 8011556:	7003      	strb	r3, [r0, #0]
 8011558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801155a:	461c      	mov	r4, r3
 801155c:	e00c      	b.n	8011578 <__strtok_r+0x4c>
 801155e:	b915      	cbnz	r5, 8011566 <__strtok_r+0x3a>
 8011560:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011564:	460e      	mov	r6, r1
 8011566:	f816 5b01 	ldrb.w	r5, [r6], #1
 801156a:	42ab      	cmp	r3, r5
 801156c:	d1f7      	bne.n	801155e <__strtok_r+0x32>
 801156e:	2b00      	cmp	r3, #0
 8011570:	d0f3      	beq.n	801155a <__strtok_r+0x2e>
 8011572:	2300      	movs	r3, #0
 8011574:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011578:	6014      	str	r4, [r2, #0]
 801157a:	e7ed      	b.n	8011558 <__strtok_r+0x2c>

0801157c <_vsniprintf_r>:
 801157c:	b530      	push	{r4, r5, lr}
 801157e:	4614      	mov	r4, r2
 8011580:	2c00      	cmp	r4, #0
 8011582:	b09b      	sub	sp, #108	; 0x6c
 8011584:	4605      	mov	r5, r0
 8011586:	461a      	mov	r2, r3
 8011588:	da05      	bge.n	8011596 <_vsniprintf_r+0x1a>
 801158a:	238b      	movs	r3, #139	; 0x8b
 801158c:	6003      	str	r3, [r0, #0]
 801158e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011592:	b01b      	add	sp, #108	; 0x6c
 8011594:	bd30      	pop	{r4, r5, pc}
 8011596:	f44f 7302 	mov.w	r3, #520	; 0x208
 801159a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801159e:	bf14      	ite	ne
 80115a0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80115a4:	4623      	moveq	r3, r4
 80115a6:	9302      	str	r3, [sp, #8]
 80115a8:	9305      	str	r3, [sp, #20]
 80115aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115ae:	9100      	str	r1, [sp, #0]
 80115b0:	9104      	str	r1, [sp, #16]
 80115b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80115b6:	4669      	mov	r1, sp
 80115b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80115ba:	f7fc fdf5 	bl	800e1a8 <_svfiprintf_r>
 80115be:	1c43      	adds	r3, r0, #1
 80115c0:	bfbc      	itt	lt
 80115c2:	238b      	movlt	r3, #139	; 0x8b
 80115c4:	602b      	strlt	r3, [r5, #0]
 80115c6:	2c00      	cmp	r4, #0
 80115c8:	d0e3      	beq.n	8011592 <_vsniprintf_r+0x16>
 80115ca:	9b00      	ldr	r3, [sp, #0]
 80115cc:	2200      	movs	r2, #0
 80115ce:	701a      	strb	r2, [r3, #0]
 80115d0:	e7df      	b.n	8011592 <_vsniprintf_r+0x16>

080115d2 <quorem>:
 80115d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115d6:	6903      	ldr	r3, [r0, #16]
 80115d8:	690c      	ldr	r4, [r1, #16]
 80115da:	42a3      	cmp	r3, r4
 80115dc:	4607      	mov	r7, r0
 80115de:	db7d      	blt.n	80116dc <quorem+0x10a>
 80115e0:	3c01      	subs	r4, #1
 80115e2:	f101 0814 	add.w	r8, r1, #20
 80115e6:	f100 0514 	add.w	r5, r0, #20
 80115ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80115ee:	9301      	str	r3, [sp, #4]
 80115f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80115f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115f8:	3301      	adds	r3, #1
 80115fa:	429a      	cmp	r2, r3
 80115fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011600:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011604:	fbb2 f6f3 	udiv	r6, r2, r3
 8011608:	d32e      	bcc.n	8011668 <quorem+0x96>
 801160a:	f04f 0e00 	mov.w	lr, #0
 801160e:	4640      	mov	r0, r8
 8011610:	46ac      	mov	ip, r5
 8011612:	46f2      	mov	sl, lr
 8011614:	f850 2b04 	ldr.w	r2, [r0], #4
 8011618:	b293      	uxth	r3, r2
 801161a:	fb06 e303 	mla	r3, r6, r3, lr
 801161e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011622:	0c12      	lsrs	r2, r2, #16
 8011624:	b29b      	uxth	r3, r3
 8011626:	fb06 e202 	mla	r2, r6, r2, lr
 801162a:	ebaa 0303 	sub.w	r3, sl, r3
 801162e:	f8dc a000 	ldr.w	sl, [ip]
 8011632:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011636:	b292      	uxth	r2, r2
 8011638:	fa13 f38a 	uxtah	r3, r3, sl
 801163c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011640:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011644:	b29b      	uxth	r3, r3
 8011646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801164a:	4581      	cmp	r9, r0
 801164c:	f84c 3b04 	str.w	r3, [ip], #4
 8011650:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011654:	d2de      	bcs.n	8011614 <quorem+0x42>
 8011656:	f855 300b 	ldr.w	r3, [r5, fp]
 801165a:	b92b      	cbnz	r3, 8011668 <quorem+0x96>
 801165c:	9b01      	ldr	r3, [sp, #4]
 801165e:	3b04      	subs	r3, #4
 8011660:	429d      	cmp	r5, r3
 8011662:	461a      	mov	r2, r3
 8011664:	d32e      	bcc.n	80116c4 <quorem+0xf2>
 8011666:	613c      	str	r4, [r7, #16]
 8011668:	4638      	mov	r0, r7
 801166a:	f000 f886 	bl	801177a <__mcmp>
 801166e:	2800      	cmp	r0, #0
 8011670:	db24      	blt.n	80116bc <quorem+0xea>
 8011672:	3601      	adds	r6, #1
 8011674:	4628      	mov	r0, r5
 8011676:	f04f 0c00 	mov.w	ip, #0
 801167a:	f858 2b04 	ldr.w	r2, [r8], #4
 801167e:	f8d0 e000 	ldr.w	lr, [r0]
 8011682:	b293      	uxth	r3, r2
 8011684:	ebac 0303 	sub.w	r3, ip, r3
 8011688:	0c12      	lsrs	r2, r2, #16
 801168a:	fa13 f38e 	uxtah	r3, r3, lr
 801168e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011692:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011696:	b29b      	uxth	r3, r3
 8011698:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801169c:	45c1      	cmp	r9, r8
 801169e:	f840 3b04 	str.w	r3, [r0], #4
 80116a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80116a6:	d2e8      	bcs.n	801167a <quorem+0xa8>
 80116a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80116ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80116b0:	b922      	cbnz	r2, 80116bc <quorem+0xea>
 80116b2:	3b04      	subs	r3, #4
 80116b4:	429d      	cmp	r5, r3
 80116b6:	461a      	mov	r2, r3
 80116b8:	d30a      	bcc.n	80116d0 <quorem+0xfe>
 80116ba:	613c      	str	r4, [r7, #16]
 80116bc:	4630      	mov	r0, r6
 80116be:	b003      	add	sp, #12
 80116c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c4:	6812      	ldr	r2, [r2, #0]
 80116c6:	3b04      	subs	r3, #4
 80116c8:	2a00      	cmp	r2, #0
 80116ca:	d1cc      	bne.n	8011666 <quorem+0x94>
 80116cc:	3c01      	subs	r4, #1
 80116ce:	e7c7      	b.n	8011660 <quorem+0x8e>
 80116d0:	6812      	ldr	r2, [r2, #0]
 80116d2:	3b04      	subs	r3, #4
 80116d4:	2a00      	cmp	r2, #0
 80116d6:	d1f0      	bne.n	80116ba <quorem+0xe8>
 80116d8:	3c01      	subs	r4, #1
 80116da:	e7eb      	b.n	80116b4 <quorem+0xe2>
 80116dc:	2000      	movs	r0, #0
 80116de:	e7ee      	b.n	80116be <quorem+0xec>

080116e0 <__hi0bits>:
 80116e0:	0c02      	lsrs	r2, r0, #16
 80116e2:	0412      	lsls	r2, r2, #16
 80116e4:	4603      	mov	r3, r0
 80116e6:	b9ca      	cbnz	r2, 801171c <__hi0bits+0x3c>
 80116e8:	0403      	lsls	r3, r0, #16
 80116ea:	2010      	movs	r0, #16
 80116ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80116f0:	bf04      	itt	eq
 80116f2:	021b      	lsleq	r3, r3, #8
 80116f4:	3008      	addeq	r0, #8
 80116f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80116fa:	bf04      	itt	eq
 80116fc:	011b      	lsleq	r3, r3, #4
 80116fe:	3004      	addeq	r0, #4
 8011700:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011704:	bf04      	itt	eq
 8011706:	009b      	lsleq	r3, r3, #2
 8011708:	3002      	addeq	r0, #2
 801170a:	2b00      	cmp	r3, #0
 801170c:	db05      	blt.n	801171a <__hi0bits+0x3a>
 801170e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8011712:	f100 0001 	add.w	r0, r0, #1
 8011716:	bf08      	it	eq
 8011718:	2020      	moveq	r0, #32
 801171a:	4770      	bx	lr
 801171c:	2000      	movs	r0, #0
 801171e:	e7e5      	b.n	80116ec <__hi0bits+0xc>

08011720 <__lo0bits>:
 8011720:	6803      	ldr	r3, [r0, #0]
 8011722:	4602      	mov	r2, r0
 8011724:	f013 0007 	ands.w	r0, r3, #7
 8011728:	d00b      	beq.n	8011742 <__lo0bits+0x22>
 801172a:	07d9      	lsls	r1, r3, #31
 801172c:	d421      	bmi.n	8011772 <__lo0bits+0x52>
 801172e:	0798      	lsls	r0, r3, #30
 8011730:	bf49      	itett	mi
 8011732:	085b      	lsrmi	r3, r3, #1
 8011734:	089b      	lsrpl	r3, r3, #2
 8011736:	2001      	movmi	r0, #1
 8011738:	6013      	strmi	r3, [r2, #0]
 801173a:	bf5c      	itt	pl
 801173c:	6013      	strpl	r3, [r2, #0]
 801173e:	2002      	movpl	r0, #2
 8011740:	4770      	bx	lr
 8011742:	b299      	uxth	r1, r3
 8011744:	b909      	cbnz	r1, 801174a <__lo0bits+0x2a>
 8011746:	0c1b      	lsrs	r3, r3, #16
 8011748:	2010      	movs	r0, #16
 801174a:	b2d9      	uxtb	r1, r3
 801174c:	b909      	cbnz	r1, 8011752 <__lo0bits+0x32>
 801174e:	3008      	adds	r0, #8
 8011750:	0a1b      	lsrs	r3, r3, #8
 8011752:	0719      	lsls	r1, r3, #28
 8011754:	bf04      	itt	eq
 8011756:	091b      	lsreq	r3, r3, #4
 8011758:	3004      	addeq	r0, #4
 801175a:	0799      	lsls	r1, r3, #30
 801175c:	bf04      	itt	eq
 801175e:	089b      	lsreq	r3, r3, #2
 8011760:	3002      	addeq	r0, #2
 8011762:	07d9      	lsls	r1, r3, #31
 8011764:	d403      	bmi.n	801176e <__lo0bits+0x4e>
 8011766:	085b      	lsrs	r3, r3, #1
 8011768:	f100 0001 	add.w	r0, r0, #1
 801176c:	d003      	beq.n	8011776 <__lo0bits+0x56>
 801176e:	6013      	str	r3, [r2, #0]
 8011770:	4770      	bx	lr
 8011772:	2000      	movs	r0, #0
 8011774:	4770      	bx	lr
 8011776:	2020      	movs	r0, #32
 8011778:	4770      	bx	lr

0801177a <__mcmp>:
 801177a:	690a      	ldr	r2, [r1, #16]
 801177c:	4603      	mov	r3, r0
 801177e:	6900      	ldr	r0, [r0, #16]
 8011780:	1a80      	subs	r0, r0, r2
 8011782:	b530      	push	{r4, r5, lr}
 8011784:	d10d      	bne.n	80117a2 <__mcmp+0x28>
 8011786:	3314      	adds	r3, #20
 8011788:	3114      	adds	r1, #20
 801178a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801178e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011792:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011796:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801179a:	4295      	cmp	r5, r2
 801179c:	d002      	beq.n	80117a4 <__mcmp+0x2a>
 801179e:	d304      	bcc.n	80117aa <__mcmp+0x30>
 80117a0:	2001      	movs	r0, #1
 80117a2:	bd30      	pop	{r4, r5, pc}
 80117a4:	42a3      	cmp	r3, r4
 80117a6:	d3f4      	bcc.n	8011792 <__mcmp+0x18>
 80117a8:	e7fb      	b.n	80117a2 <__mcmp+0x28>
 80117aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117ae:	e7f8      	b.n	80117a2 <__mcmp+0x28>

080117b0 <_calloc_r>:
 80117b0:	b538      	push	{r3, r4, r5, lr}
 80117b2:	fb02 f501 	mul.w	r5, r2, r1
 80117b6:	4629      	mov	r1, r5
 80117b8:	f7fb fd00 	bl	800d1bc <_malloc_r>
 80117bc:	4604      	mov	r4, r0
 80117be:	b118      	cbz	r0, 80117c8 <_calloc_r+0x18>
 80117c0:	462a      	mov	r2, r5
 80117c2:	2100      	movs	r1, #0
 80117c4:	f7ff fd79 	bl	80112ba <memset>
 80117c8:	4620      	mov	r0, r4
 80117ca:	bd38      	pop	{r3, r4, r5, pc}

080117cc <__ssputs_r>:
 80117cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117d0:	688e      	ldr	r6, [r1, #8]
 80117d2:	429e      	cmp	r6, r3
 80117d4:	4682      	mov	sl, r0
 80117d6:	460c      	mov	r4, r1
 80117d8:	4690      	mov	r8, r2
 80117da:	461f      	mov	r7, r3
 80117dc:	d838      	bhi.n	8011850 <__ssputs_r+0x84>
 80117de:	898a      	ldrh	r2, [r1, #12]
 80117e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80117e4:	d032      	beq.n	801184c <__ssputs_r+0x80>
 80117e6:	6825      	ldr	r5, [r4, #0]
 80117e8:	6909      	ldr	r1, [r1, #16]
 80117ea:	eba5 0901 	sub.w	r9, r5, r1
 80117ee:	6965      	ldr	r5, [r4, #20]
 80117f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80117f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80117f8:	3301      	adds	r3, #1
 80117fa:	444b      	add	r3, r9
 80117fc:	106d      	asrs	r5, r5, #1
 80117fe:	429d      	cmp	r5, r3
 8011800:	bf38      	it	cc
 8011802:	461d      	movcc	r5, r3
 8011804:	0553      	lsls	r3, r2, #21
 8011806:	d531      	bpl.n	801186c <__ssputs_r+0xa0>
 8011808:	4629      	mov	r1, r5
 801180a:	f7fb fcd7 	bl	800d1bc <_malloc_r>
 801180e:	4606      	mov	r6, r0
 8011810:	b950      	cbnz	r0, 8011828 <__ssputs_r+0x5c>
 8011812:	230c      	movs	r3, #12
 8011814:	f8ca 3000 	str.w	r3, [sl]
 8011818:	89a3      	ldrh	r3, [r4, #12]
 801181a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801181e:	81a3      	strh	r3, [r4, #12]
 8011820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011828:	6921      	ldr	r1, [r4, #16]
 801182a:	464a      	mov	r2, r9
 801182c:	f7ff fd37 	bl	801129e <memcpy>
 8011830:	89a3      	ldrh	r3, [r4, #12]
 8011832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801183a:	81a3      	strh	r3, [r4, #12]
 801183c:	6126      	str	r6, [r4, #16]
 801183e:	6165      	str	r5, [r4, #20]
 8011840:	444e      	add	r6, r9
 8011842:	eba5 0509 	sub.w	r5, r5, r9
 8011846:	6026      	str	r6, [r4, #0]
 8011848:	60a5      	str	r5, [r4, #8]
 801184a:	463e      	mov	r6, r7
 801184c:	42be      	cmp	r6, r7
 801184e:	d900      	bls.n	8011852 <__ssputs_r+0x86>
 8011850:	463e      	mov	r6, r7
 8011852:	6820      	ldr	r0, [r4, #0]
 8011854:	4632      	mov	r2, r6
 8011856:	4641      	mov	r1, r8
 8011858:	f000 f8ad 	bl	80119b6 <memmove>
 801185c:	68a3      	ldr	r3, [r4, #8]
 801185e:	1b9b      	subs	r3, r3, r6
 8011860:	60a3      	str	r3, [r4, #8]
 8011862:	6823      	ldr	r3, [r4, #0]
 8011864:	4433      	add	r3, r6
 8011866:	6023      	str	r3, [r4, #0]
 8011868:	2000      	movs	r0, #0
 801186a:	e7db      	b.n	8011824 <__ssputs_r+0x58>
 801186c:	462a      	mov	r2, r5
 801186e:	f000 f8bc 	bl	80119ea <_realloc_r>
 8011872:	4606      	mov	r6, r0
 8011874:	2800      	cmp	r0, #0
 8011876:	d1e1      	bne.n	801183c <__ssputs_r+0x70>
 8011878:	6921      	ldr	r1, [r4, #16]
 801187a:	4650      	mov	r0, sl
 801187c:	f7fb fc54 	bl	800d128 <_free_r>
 8011880:	e7c7      	b.n	8011812 <__ssputs_r+0x46>

08011882 <__sfputc_r>:
 8011882:	6893      	ldr	r3, [r2, #8]
 8011884:	3b01      	subs	r3, #1
 8011886:	2b00      	cmp	r3, #0
 8011888:	b410      	push	{r4}
 801188a:	6093      	str	r3, [r2, #8]
 801188c:	da07      	bge.n	801189e <__sfputc_r+0x1c>
 801188e:	6994      	ldr	r4, [r2, #24]
 8011890:	42a3      	cmp	r3, r4
 8011892:	db01      	blt.n	8011898 <__sfputc_r+0x16>
 8011894:	290a      	cmp	r1, #10
 8011896:	d102      	bne.n	801189e <__sfputc_r+0x1c>
 8011898:	bc10      	pop	{r4}
 801189a:	f7fc beb5 	b.w	800e608 <__swbuf_r>
 801189e:	6813      	ldr	r3, [r2, #0]
 80118a0:	1c58      	adds	r0, r3, #1
 80118a2:	6010      	str	r0, [r2, #0]
 80118a4:	7019      	strb	r1, [r3, #0]
 80118a6:	4608      	mov	r0, r1
 80118a8:	bc10      	pop	{r4}
 80118aa:	4770      	bx	lr

080118ac <__sfputs_r>:
 80118ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ae:	4606      	mov	r6, r0
 80118b0:	460f      	mov	r7, r1
 80118b2:	4614      	mov	r4, r2
 80118b4:	18d5      	adds	r5, r2, r3
 80118b6:	42ac      	cmp	r4, r5
 80118b8:	d101      	bne.n	80118be <__sfputs_r+0x12>
 80118ba:	2000      	movs	r0, #0
 80118bc:	e007      	b.n	80118ce <__sfputs_r+0x22>
 80118be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118c2:	463a      	mov	r2, r7
 80118c4:	4630      	mov	r0, r6
 80118c6:	f7ff ffdc 	bl	8011882 <__sfputc_r>
 80118ca:	1c43      	adds	r3, r0, #1
 80118cc:	d1f3      	bne.n	80118b6 <__sfputs_r+0xa>
 80118ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080118d0 <abort>:
 80118d0:	b508      	push	{r3, lr}
 80118d2:	2006      	movs	r0, #6
 80118d4:	f7fd f916 	bl	800eb04 <raise>
 80118d8:	2001      	movs	r0, #1
 80118da:	f7f3 ff2d 	bl	8005738 <_exit>

080118de <__sfmoreglue>:
 80118de:	b570      	push	{r4, r5, r6, lr}
 80118e0:	2268      	movs	r2, #104	; 0x68
 80118e2:	1e4d      	subs	r5, r1, #1
 80118e4:	4355      	muls	r5, r2
 80118e6:	460e      	mov	r6, r1
 80118e8:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80118ec:	f7fb fc66 	bl	800d1bc <_malloc_r>
 80118f0:	4604      	mov	r4, r0
 80118f2:	b140      	cbz	r0, 8011906 <__sfmoreglue+0x28>
 80118f4:	2100      	movs	r1, #0
 80118f6:	e9c0 1600 	strd	r1, r6, [r0]
 80118fa:	300c      	adds	r0, #12
 80118fc:	60a0      	str	r0, [r4, #8]
 80118fe:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011902:	f7ff fcda 	bl	80112ba <memset>
 8011906:	4620      	mov	r0, r4
 8011908:	bd70      	pop	{r4, r5, r6, pc}

0801190a <_fwalk_reent>:
 801190a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801190e:	4606      	mov	r6, r0
 8011910:	4688      	mov	r8, r1
 8011912:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011916:	2700      	movs	r7, #0
 8011918:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801191c:	f1b9 0901 	subs.w	r9, r9, #1
 8011920:	d505      	bpl.n	801192e <_fwalk_reent+0x24>
 8011922:	6824      	ldr	r4, [r4, #0]
 8011924:	2c00      	cmp	r4, #0
 8011926:	d1f7      	bne.n	8011918 <_fwalk_reent+0xe>
 8011928:	4638      	mov	r0, r7
 801192a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801192e:	89ab      	ldrh	r3, [r5, #12]
 8011930:	2b01      	cmp	r3, #1
 8011932:	d907      	bls.n	8011944 <_fwalk_reent+0x3a>
 8011934:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011938:	3301      	adds	r3, #1
 801193a:	d003      	beq.n	8011944 <_fwalk_reent+0x3a>
 801193c:	4629      	mov	r1, r5
 801193e:	4630      	mov	r0, r6
 8011940:	47c0      	blx	r8
 8011942:	4307      	orrs	r7, r0
 8011944:	3568      	adds	r5, #104	; 0x68
 8011946:	e7e9      	b.n	801191c <_fwalk_reent+0x12>

08011948 <__swhatbuf_r>:
 8011948:	b570      	push	{r4, r5, r6, lr}
 801194a:	460e      	mov	r6, r1
 801194c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011950:	2900      	cmp	r1, #0
 8011952:	b096      	sub	sp, #88	; 0x58
 8011954:	4614      	mov	r4, r2
 8011956:	461d      	mov	r5, r3
 8011958:	da08      	bge.n	801196c <__swhatbuf_r+0x24>
 801195a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801195e:	2200      	movs	r2, #0
 8011960:	602a      	str	r2, [r5, #0]
 8011962:	061a      	lsls	r2, r3, #24
 8011964:	d410      	bmi.n	8011988 <__swhatbuf_r+0x40>
 8011966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801196a:	e00e      	b.n	801198a <__swhatbuf_r+0x42>
 801196c:	466a      	mov	r2, sp
 801196e:	f7fd f905 	bl	800eb7c <_fstat_r>
 8011972:	2800      	cmp	r0, #0
 8011974:	dbf1      	blt.n	801195a <__swhatbuf_r+0x12>
 8011976:	9a01      	ldr	r2, [sp, #4]
 8011978:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801197c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011980:	425a      	negs	r2, r3
 8011982:	415a      	adcs	r2, r3
 8011984:	602a      	str	r2, [r5, #0]
 8011986:	e7ee      	b.n	8011966 <__swhatbuf_r+0x1e>
 8011988:	2340      	movs	r3, #64	; 0x40
 801198a:	2000      	movs	r0, #0
 801198c:	6023      	str	r3, [r4, #0]
 801198e:	b016      	add	sp, #88	; 0x58
 8011990:	bd70      	pop	{r4, r5, r6, pc}

08011992 <__ascii_mbtowc>:
 8011992:	b082      	sub	sp, #8
 8011994:	b901      	cbnz	r1, 8011998 <__ascii_mbtowc+0x6>
 8011996:	a901      	add	r1, sp, #4
 8011998:	b142      	cbz	r2, 80119ac <__ascii_mbtowc+0x1a>
 801199a:	b14b      	cbz	r3, 80119b0 <__ascii_mbtowc+0x1e>
 801199c:	7813      	ldrb	r3, [r2, #0]
 801199e:	600b      	str	r3, [r1, #0]
 80119a0:	7812      	ldrb	r2, [r2, #0]
 80119a2:	1e10      	subs	r0, r2, #0
 80119a4:	bf18      	it	ne
 80119a6:	2001      	movne	r0, #1
 80119a8:	b002      	add	sp, #8
 80119aa:	4770      	bx	lr
 80119ac:	4610      	mov	r0, r2
 80119ae:	e7fb      	b.n	80119a8 <__ascii_mbtowc+0x16>
 80119b0:	f06f 0001 	mvn.w	r0, #1
 80119b4:	e7f8      	b.n	80119a8 <__ascii_mbtowc+0x16>

080119b6 <memmove>:
 80119b6:	4288      	cmp	r0, r1
 80119b8:	b510      	push	{r4, lr}
 80119ba:	eb01 0402 	add.w	r4, r1, r2
 80119be:	d902      	bls.n	80119c6 <memmove+0x10>
 80119c0:	4284      	cmp	r4, r0
 80119c2:	4623      	mov	r3, r4
 80119c4:	d807      	bhi.n	80119d6 <memmove+0x20>
 80119c6:	1e43      	subs	r3, r0, #1
 80119c8:	42a1      	cmp	r1, r4
 80119ca:	d008      	beq.n	80119de <memmove+0x28>
 80119cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80119d4:	e7f8      	b.n	80119c8 <memmove+0x12>
 80119d6:	4402      	add	r2, r0
 80119d8:	4601      	mov	r1, r0
 80119da:	428a      	cmp	r2, r1
 80119dc:	d100      	bne.n	80119e0 <memmove+0x2a>
 80119de:	bd10      	pop	{r4, pc}
 80119e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80119e8:	e7f7      	b.n	80119da <memmove+0x24>

080119ea <_realloc_r>:
 80119ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ec:	4607      	mov	r7, r0
 80119ee:	4614      	mov	r4, r2
 80119f0:	460e      	mov	r6, r1
 80119f2:	b921      	cbnz	r1, 80119fe <_realloc_r+0x14>
 80119f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80119f8:	4611      	mov	r1, r2
 80119fa:	f7fb bbdf 	b.w	800d1bc <_malloc_r>
 80119fe:	b922      	cbnz	r2, 8011a0a <_realloc_r+0x20>
 8011a00:	f7fb fb92 	bl	800d128 <_free_r>
 8011a04:	4625      	mov	r5, r4
 8011a06:	4628      	mov	r0, r5
 8011a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a0a:	f000 f88e 	bl	8011b2a <_malloc_usable_size_r>
 8011a0e:	42a0      	cmp	r0, r4
 8011a10:	d20f      	bcs.n	8011a32 <_realloc_r+0x48>
 8011a12:	4621      	mov	r1, r4
 8011a14:	4638      	mov	r0, r7
 8011a16:	f7fb fbd1 	bl	800d1bc <_malloc_r>
 8011a1a:	4605      	mov	r5, r0
 8011a1c:	2800      	cmp	r0, #0
 8011a1e:	d0f2      	beq.n	8011a06 <_realloc_r+0x1c>
 8011a20:	4631      	mov	r1, r6
 8011a22:	4622      	mov	r2, r4
 8011a24:	f7ff fc3b 	bl	801129e <memcpy>
 8011a28:	4631      	mov	r1, r6
 8011a2a:	4638      	mov	r0, r7
 8011a2c:	f7fb fb7c 	bl	800d128 <_free_r>
 8011a30:	e7e9      	b.n	8011a06 <_realloc_r+0x1c>
 8011a32:	4635      	mov	r5, r6
 8011a34:	e7e7      	b.n	8011a06 <_realloc_r+0x1c>

08011a36 <_raise_r>:
 8011a36:	291f      	cmp	r1, #31
 8011a38:	b538      	push	{r3, r4, r5, lr}
 8011a3a:	4604      	mov	r4, r0
 8011a3c:	460d      	mov	r5, r1
 8011a3e:	d904      	bls.n	8011a4a <_raise_r+0x14>
 8011a40:	2316      	movs	r3, #22
 8011a42:	6003      	str	r3, [r0, #0]
 8011a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a48:	bd38      	pop	{r3, r4, r5, pc}
 8011a4a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011a4c:	b112      	cbz	r2, 8011a54 <_raise_r+0x1e>
 8011a4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a52:	b94b      	cbnz	r3, 8011a68 <_raise_r+0x32>
 8011a54:	4620      	mov	r0, r4
 8011a56:	f000 f816 	bl	8011a86 <_getpid_r>
 8011a5a:	462a      	mov	r2, r5
 8011a5c:	4601      	mov	r1, r0
 8011a5e:	4620      	mov	r0, r4
 8011a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a64:	f7fd b856 	b.w	800eb14 <_kill_r>
 8011a68:	2b01      	cmp	r3, #1
 8011a6a:	d00a      	beq.n	8011a82 <_raise_r+0x4c>
 8011a6c:	1c59      	adds	r1, r3, #1
 8011a6e:	d103      	bne.n	8011a78 <_raise_r+0x42>
 8011a70:	2316      	movs	r3, #22
 8011a72:	6003      	str	r3, [r0, #0]
 8011a74:	2001      	movs	r0, #1
 8011a76:	e7e7      	b.n	8011a48 <_raise_r+0x12>
 8011a78:	2400      	movs	r4, #0
 8011a7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a7e:	4628      	mov	r0, r5
 8011a80:	4798      	blx	r3
 8011a82:	2000      	movs	r0, #0
 8011a84:	e7e0      	b.n	8011a48 <_raise_r+0x12>

08011a86 <_getpid_r>:
 8011a86:	f7fd bd7f 	b.w	800f588 <_getpid>

08011a8a <__sread>:
 8011a8a:	b510      	push	{r4, lr}
 8011a8c:	460c      	mov	r4, r1
 8011a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a92:	f7fd f8a7 	bl	800ebe4 <_read_r>
 8011a96:	2800      	cmp	r0, #0
 8011a98:	bfab      	itete	ge
 8011a9a:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a9c:	89a3      	ldrhlt	r3, [r4, #12]
 8011a9e:	181b      	addge	r3, r3, r0
 8011aa0:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011aa4:	bfac      	ite	ge
 8011aa6:	6563      	strge	r3, [r4, #84]	; 0x54
 8011aa8:	81a3      	strhlt	r3, [r4, #12]
 8011aaa:	bd10      	pop	{r4, pc}

08011aac <__swrite>:
 8011aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ab0:	461f      	mov	r7, r3
 8011ab2:	898b      	ldrh	r3, [r1, #12]
 8011ab4:	05db      	lsls	r3, r3, #23
 8011ab6:	4605      	mov	r5, r0
 8011ab8:	460c      	mov	r4, r1
 8011aba:	4616      	mov	r6, r2
 8011abc:	d505      	bpl.n	8011aca <__swrite+0x1e>
 8011abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ac2:	2302      	movs	r3, #2
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	f7fd f87b 	bl	800ebc0 <_lseek_r>
 8011aca:	89a3      	ldrh	r3, [r4, #12]
 8011acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ad4:	81a3      	strh	r3, [r4, #12]
 8011ad6:	4632      	mov	r2, r6
 8011ad8:	463b      	mov	r3, r7
 8011ada:	4628      	mov	r0, r5
 8011adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ae0:	f7fd b82a 	b.w	800eb38 <_write_r>

08011ae4 <__sseek>:
 8011ae4:	b510      	push	{r4, lr}
 8011ae6:	460c      	mov	r4, r1
 8011ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aec:	f7fd f868 	bl	800ebc0 <_lseek_r>
 8011af0:	1c43      	adds	r3, r0, #1
 8011af2:	89a3      	ldrh	r3, [r4, #12]
 8011af4:	bf15      	itete	ne
 8011af6:	6560      	strne	r0, [r4, #84]	; 0x54
 8011af8:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011afc:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011b00:	81a3      	strheq	r3, [r4, #12]
 8011b02:	bf18      	it	ne
 8011b04:	81a3      	strhne	r3, [r4, #12]
 8011b06:	bd10      	pop	{r4, pc}

08011b08 <__sclose>:
 8011b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b0c:	f7fd b826 	b.w	800eb5c <_close_r>

08011b10 <__ascii_wctomb>:
 8011b10:	4603      	mov	r3, r0
 8011b12:	4608      	mov	r0, r1
 8011b14:	b141      	cbz	r1, 8011b28 <__ascii_wctomb+0x18>
 8011b16:	2aff      	cmp	r2, #255	; 0xff
 8011b18:	d904      	bls.n	8011b24 <__ascii_wctomb+0x14>
 8011b1a:	228a      	movs	r2, #138	; 0x8a
 8011b1c:	601a      	str	r2, [r3, #0]
 8011b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b22:	4770      	bx	lr
 8011b24:	700a      	strb	r2, [r1, #0]
 8011b26:	2001      	movs	r0, #1
 8011b28:	4770      	bx	lr

08011b2a <_malloc_usable_size_r>:
 8011b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b2e:	1f18      	subs	r0, r3, #4
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	bfbc      	itt	lt
 8011b34:	580b      	ldrlt	r3, [r1, r0]
 8011b36:	18c0      	addlt	r0, r0, r3
 8011b38:	4770      	bx	lr
