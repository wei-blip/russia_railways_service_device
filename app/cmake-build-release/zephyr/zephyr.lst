
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	00 23 00 20 ed 1f 00 08 a9 1a 00 08 c1 1f 00 08     .#. ............
 8000010:	c1 1f 00 08 c1 1f 00 08 c1 1f 00 08 00 00 00 00     ................
	...
 800002c:	e9 1b 00 08 c1 1f 00 08 00 00 00 00 59 1b 00 08     ............Y...
 800003c:	ed 7c 00 08                                         .|..

08000040 <_irq_vector_table>:
 8000040:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000050:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000060:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000070:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000080:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000090:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 80000a0:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 80000b0:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 80000c0:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 80000d0:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 80000e0:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 80000f0:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000100:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000110:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000120:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000130:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000140:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000150:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000160:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000170:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000180:	7d 1d 00 08 7d 1d 00 08 7d 1d 00 08 7d 1d 00 08     }...}...}...}...
 8000190:	7d 1d 00 08                                         }...

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b80c 	b.w	8000270 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f808 	bl	8000274 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__aeabi_idiv0>:
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop

08000274 <__udivmoddi4>:
 8000274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800027a:	4688      	mov	r8, r1
 800027c:	468e      	mov	lr, r1
 800027e:	4615      	mov	r5, r2
 8000280:	4604      	mov	r4, r0
 8000282:	4619      	mov	r1, r3
 8000284:	2b00      	cmp	r3, #0
 8000286:	f040 80c7 	bne.w	8000418 <__udivmoddi4+0x1a4>
 800028a:	4542      	cmp	r2, r8
 800028c:	fab2 f782 	clz	r7, r2
 8000290:	d946      	bls.n	8000320 <__udivmoddi4+0xac>
 8000292:	b14f      	cbz	r7, 80002a8 <__udivmoddi4+0x34>
 8000294:	f1c7 0c20 	rsb	ip, r7, #32
 8000298:	fa08 f307 	lsl.w	r3, r8, r7
 800029c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002a0:	40bd      	lsls	r5, r7
 80002a2:	ea4c 0e03 	orr.w	lr, ip, r3
 80002a6:	40bc      	lsls	r4, r7
 80002a8:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002ac:	fa1f fc85 	uxth.w	ip, r5
 80002b0:	fbbe f9f8 	udiv	r9, lr, r8
 80002b4:	0c22      	lsrs	r2, r4, #16
 80002b6:	fb08 e319 	mls	r3, r8, r9, lr
 80002ba:	fb09 fa0c 	mul.w	sl, r9, ip
 80002be:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80002c2:	459a      	cmp	sl, r3
 80002c4:	d928      	bls.n	8000318 <__udivmoddi4+0xa4>
 80002c6:	18eb      	adds	r3, r5, r3
 80002c8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80002cc:	d204      	bcs.n	80002d8 <__udivmoddi4+0x64>
 80002ce:	459a      	cmp	sl, r3
 80002d0:	d902      	bls.n	80002d8 <__udivmoddi4+0x64>
 80002d2:	f1a9 0002 	sub.w	r0, r9, #2
 80002d6:	442b      	add	r3, r5
 80002d8:	eba3 030a 	sub.w	r3, r3, sl
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb3 f2f8 	udiv	r2, r3, r8
 80002e2:	fb08 3312 	mls	r3, r8, r2, r3
 80002e6:	fb02 fc0c 	mul.w	ip, r2, ip
 80002ea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ee:	45a4      	cmp	ip, r4
 80002f0:	d914      	bls.n	800031c <__udivmoddi4+0xa8>
 80002f2:	192c      	adds	r4, r5, r4
 80002f4:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80002f8:	d203      	bcs.n	8000302 <__udivmoddi4+0x8e>
 80002fa:	45a4      	cmp	ip, r4
 80002fc:	d901      	bls.n	8000302 <__udivmoddi4+0x8e>
 80002fe:	1e93      	subs	r3, r2, #2
 8000300:	442c      	add	r4, r5
 8000302:	eba4 040c 	sub.w	r4, r4, ip
 8000306:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800030a:	b11e      	cbz	r6, 8000314 <__udivmoddi4+0xa0>
 800030c:	40fc      	lsrs	r4, r7
 800030e:	2300      	movs	r3, #0
 8000310:	6034      	str	r4, [r6, #0]
 8000312:	6073      	str	r3, [r6, #4]
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	4648      	mov	r0, r9
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0x64>
 800031c:	4613      	mov	r3, r2
 800031e:	e7f0      	b.n	8000302 <__udivmoddi4+0x8e>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xb0>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	bb8f      	cbnz	r7, 800038a <__udivmoddi4+0x116>
 8000326:	eba8 0302 	sub.w	r3, r8, r2
 800032a:	2101      	movs	r1, #1
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	b2aa      	uxth	r2, r5
 8000332:	fbb3 fcfe 	udiv	ip, r3, lr
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fb0e 331c 	mls	r3, lr, ip, r3
 800033c:	fb0c f802 	mul.w	r8, ip, r2
 8000340:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000344:	4598      	cmp	r8, r3
 8000346:	d963      	bls.n	8000410 <__udivmoddi4+0x19c>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d204      	bcs.n	800035a <__udivmoddi4+0xe6>
 8000350:	4598      	cmp	r8, r3
 8000352:	d902      	bls.n	800035a <__udivmoddi4+0xe6>
 8000354:	f1ac 0002 	sub.w	r0, ip, #2
 8000358:	442b      	add	r3, r5
 800035a:	eba3 0308 	sub.w	r3, r3, r8
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb3 fcfe 	udiv	ip, r3, lr
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	fb0c f202 	mul.w	r2, ip, r2
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	42a2      	cmp	r2, r4
 8000372:	d94f      	bls.n	8000414 <__udivmoddi4+0x1a0>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 800037a:	d204      	bcs.n	8000386 <__udivmoddi4+0x112>
 800037c:	42a2      	cmp	r2, r4
 800037e:	d902      	bls.n	8000386 <__udivmoddi4+0x112>
 8000380:	f1ac 0302 	sub.w	r3, ip, #2
 8000384:	442c      	add	r4, r5
 8000386:	1aa4      	subs	r4, r4, r2
 8000388:	e7bd      	b.n	8000306 <__udivmoddi4+0x92>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	fa28 f90c 	lsr.w	r9, r8, ip
 8000392:	fa08 f307 	lsl.w	r3, r8, r7
 8000396:	fa20 fc0c 	lsr.w	ip, r0, ip
 800039a:	40bd      	lsls	r5, r7
 800039c:	ea4c 0203 	orr.w	r2, ip, r3
 80003a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a4:	b2ab      	uxth	r3, r5
 80003a6:	fbb9 fcfe 	udiv	ip, r9, lr
 80003aa:	0c11      	lsrs	r1, r2, #16
 80003ac:	fb0e 901c 	mls	r0, lr, ip, r9
 80003b0:	fb0c f803 	mul.w	r8, ip, r3
 80003b4:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 80003b8:	4580      	cmp	r8, r0
 80003ba:	fa04 f407 	lsl.w	r4, r4, r7
 80003be:	d923      	bls.n	8000408 <__udivmoddi4+0x194>
 80003c0:	1828      	adds	r0, r5, r0
 80003c2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80003c6:	d204      	bcs.n	80003d2 <__udivmoddi4+0x15e>
 80003c8:	4580      	cmp	r8, r0
 80003ca:	d902      	bls.n	80003d2 <__udivmoddi4+0x15e>
 80003cc:	f1ac 0102 	sub.w	r1, ip, #2
 80003d0:	4428      	add	r0, r5
 80003d2:	eba0 0008 	sub.w	r0, r0, r8
 80003d6:	b292      	uxth	r2, r2
 80003d8:	fbb0 fcfe 	udiv	ip, r0, lr
 80003dc:	fb0e 001c 	mls	r0, lr, ip, r0
 80003e0:	fb0c f803 	mul.w	r8, ip, r3
 80003e4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 80003e8:	4598      	cmp	r8, r3
 80003ea:	d90f      	bls.n	800040c <__udivmoddi4+0x198>
 80003ec:	18eb      	adds	r3, r5, r3
 80003ee:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80003f2:	d204      	bcs.n	80003fe <__udivmoddi4+0x18a>
 80003f4:	4598      	cmp	r8, r3
 80003f6:	d902      	bls.n	80003fe <__udivmoddi4+0x18a>
 80003f8:	f1ac 0202 	sub.w	r2, ip, #2
 80003fc:	442b      	add	r3, r5
 80003fe:	eba3 0308 	sub.w	r3, r3, r8
 8000402:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000406:	e791      	b.n	800032c <__udivmoddi4+0xb8>
 8000408:	4661      	mov	r1, ip
 800040a:	e7e2      	b.n	80003d2 <__udivmoddi4+0x15e>
 800040c:	4662      	mov	r2, ip
 800040e:	e7f6      	b.n	80003fe <__udivmoddi4+0x18a>
 8000410:	4660      	mov	r0, ip
 8000412:	e7a2      	b.n	800035a <__udivmoddi4+0xe6>
 8000414:	4663      	mov	r3, ip
 8000416:	e7b6      	b.n	8000386 <__udivmoddi4+0x112>
 8000418:	4543      	cmp	r3, r8
 800041a:	d905      	bls.n	8000428 <__udivmoddi4+0x1b4>
 800041c:	b10e      	cbz	r6, 8000422 <__udivmoddi4+0x1ae>
 800041e:	e9c6 0800 	strd	r0, r8, [r6]
 8000422:	2100      	movs	r1, #0
 8000424:	4608      	mov	r0, r1
 8000426:	e775      	b.n	8000314 <__udivmoddi4+0xa0>
 8000428:	fab3 fc83 	clz	ip, r3
 800042c:	f1bc 0f00 	cmp.w	ip, #0
 8000430:	d110      	bne.n	8000454 <__udivmoddi4+0x1e0>
 8000432:	4543      	cmp	r3, r8
 8000434:	d301      	bcc.n	800043a <__udivmoddi4+0x1c6>
 8000436:	4282      	cmp	r2, r0
 8000438:	d80a      	bhi.n	8000450 <__udivmoddi4+0x1dc>
 800043a:	1a84      	subs	r4, r0, r2
 800043c:	eb68 0303 	sbc.w	r3, r8, r3
 8000440:	2001      	movs	r0, #1
 8000442:	469e      	mov	lr, r3
 8000444:	2e00      	cmp	r6, #0
 8000446:	d068      	beq.n	800051a <__udivmoddi4+0x2a6>
 8000448:	e9c6 4e00 	strd	r4, lr, [r6]
 800044c:	2100      	movs	r1, #0
 800044e:	e761      	b.n	8000314 <__udivmoddi4+0xa0>
 8000450:	4660      	mov	r0, ip
 8000452:	e7f7      	b.n	8000444 <__udivmoddi4+0x1d0>
 8000454:	f1cc 0e20 	rsb	lr, ip, #32
 8000458:	fa03 f30c 	lsl.w	r3, r3, ip
 800045c:	fa22 f40e 	lsr.w	r4, r2, lr
 8000460:	431c      	orrs	r4, r3
 8000462:	fa20 f10e 	lsr.w	r1, r0, lr
 8000466:	fa08 f30c 	lsl.w	r3, r8, ip
 800046a:	fa28 fb0e 	lsr.w	fp, r8, lr
 800046e:	4319      	orrs	r1, r3
 8000470:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000474:	fa02 f50c 	lsl.w	r5, r2, ip
 8000478:	fbbb f8f9 	udiv	r8, fp, r9
 800047c:	b2a3      	uxth	r3, r4
 800047e:	fb09 bb18 	mls	fp, r9, r8, fp
 8000482:	0c0a      	lsrs	r2, r1, #16
 8000484:	fb08 fa03 	mul.w	sl, r8, r3
 8000488:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 800048c:	4592      	cmp	sl, r2
 800048e:	fa00 f70c 	lsl.w	r7, r0, ip
 8000492:	d93e      	bls.n	8000512 <__udivmoddi4+0x29e>
 8000494:	18a2      	adds	r2, r4, r2
 8000496:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x232>
 800049c:	4592      	cmp	sl, r2
 800049e:	d902      	bls.n	80004a6 <__udivmoddi4+0x232>
 80004a0:	f1a8 0002 	sub.w	r0, r8, #2
 80004a4:	4422      	add	r2, r4
 80004a6:	eba2 020a 	sub.w	r2, r2, sl
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb2 f8f9 	udiv	r8, r2, r9
 80004b0:	fb09 2218 	mls	r2, r9, r8, r2
 80004b4:	fb08 f303 	mul.w	r3, r8, r3
 80004b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80004bc:	4293      	cmp	r3, r2
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x2a2>
 80004c0:	18a2      	adds	r2, r4, r2
 80004c2:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80004c6:	d204      	bcs.n	80004d2 <__udivmoddi4+0x25e>
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x25e>
 80004cc:	f1a8 0102 	sub.w	r1, r8, #2
 80004d0:	4422      	add	r2, r4
 80004d2:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 80004d6:	fba0 9805 	umull	r9, r8, r0, r5
 80004da:	1ad2      	subs	r2, r2, r3
 80004dc:	4542      	cmp	r2, r8
 80004de:	464b      	mov	r3, r9
 80004e0:	4641      	mov	r1, r8
 80004e2:	d302      	bcc.n	80004ea <__udivmoddi4+0x276>
 80004e4:	d106      	bne.n	80004f4 <__udivmoddi4+0x280>
 80004e6:	454f      	cmp	r7, r9
 80004e8:	d204      	bcs.n	80004f4 <__udivmoddi4+0x280>
 80004ea:	ebb9 0305 	subs.w	r3, r9, r5
 80004ee:	eb68 0104 	sbc.w	r1, r8, r4
 80004f2:	3801      	subs	r0, #1
 80004f4:	b18e      	cbz	r6, 800051a <__udivmoddi4+0x2a6>
 80004f6:	1afc      	subs	r4, r7, r3
 80004f8:	eb62 0701 	sbc.w	r7, r2, r1
 80004fc:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000500:	fa24 f30c 	lsr.w	r3, r4, ip
 8000504:	ea4e 0303 	orr.w	r3, lr, r3
 8000508:	fa27 f70c 	lsr.w	r7, r7, ip
 800050c:	e9c6 3700 	strd	r3, r7, [r6]
 8000510:	e79c      	b.n	800044c <__udivmoddi4+0x1d8>
 8000512:	4640      	mov	r0, r8
 8000514:	e7c7      	b.n	80004a6 <__udivmoddi4+0x232>
 8000516:	4641      	mov	r1, r8
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x25e>
 800051a:	4631      	mov	r1, r6
 800051c:	e6fa      	b.n	8000314 <__udivmoddi4+0xa0>

0800051e <strcmp>:
 800051e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000526:	2a01      	cmp	r2, #1
 8000528:	bf28      	it	cs
 800052a:	429a      	cmpcs	r2, r3
 800052c:	d0f7      	beq.n	800051e <strcmp>
 800052e:	1ad0      	subs	r0, r2, r3
 8000530:	4770      	bx	lr

08000532 <strlen>:
 8000532:	4603      	mov	r3, r0
 8000534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000538:	2a00      	cmp	r2, #0
 800053a:	d1fb      	bne.n	8000534 <strlen+0x2>
 800053c:	1a18      	subs	r0, r3, r0
 800053e:	3801      	subs	r0, #1
 8000540:	4770      	bx	lr
 8000542:	0000      	movs	r0, r0
 8000544:	0000      	movs	r0, r0
	...

08000548 <per_meas>:
    }
}

void per_meas(const struct device *lora_dev, struct lora_modem_config *lora_cfg,
  const struct device *uart_dev)
{
 8000548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800054c:	ed2d 8b02 	vpush	{d8}
 8000550:	b08b      	sub	sp, #44	; 0x2c
    int8_t snr = 0;
 8000552:	2300      	movs	r3, #0
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000554:	4d64      	ldr	r5, [pc, #400]	; (80006e8 <per_meas+0x1a0>)
 8000556:	f88d 3015 	strb.w	r3, [sp, #21]
    int16_t rssi = 0;
 800055a:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint32_t i = 0;
    volatile int32_t ret = 0;
 800055e:	9306      	str	r3, [sp, #24]
 8000560:	f3bf 8f5b 	dmb	ish
 8000564:	f8d5 9000 	ldr.w	r9, [r5]
 8000568:	f3bf 8f5b 	dmb	ish
    atomic_val_t per_num = atomic_get(&atomic_per_num);
    atomic_t atomic_packet_count = ATOMIC_INIT(0);
    struct print_data_elem_s print_data = {0};
 800056c:	e9cd 3307 	strd	r3, r3, [sp, #28]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000570:	4e5e      	ldr	r6, [pc, #376]	; (80006ec <per_meas+0x1a4>)
 8000572:	9309      	str	r3, [sp, #36]	; 0x24
{
 8000574:	4604      	mov	r4, r0
 8000576:	460d      	mov	r5, r1
 8000578:	4617      	mov	r7, r2
 800057a:	f3bf 8f5b 	dmb	ish
 800057e:	e856 2f00 	ldrex	r2, [r6]
 8000582:	2a01      	cmp	r2, #1
 8000584:	d103      	bne.n	800058e <per_meas+0x46>
 8000586:	e846 3100 	strex	r1, r3, [r6]
 800058a:	2900      	cmp	r1, #0
 800058c:	d1f7      	bne.n	800057e <per_meas+0x36>
 800058e:	f3bf 8f5b 	dmb	ish
void lora_rx_error_timeout_cb(const struct device *dev);

static inline void send_to_terminal(const struct device *dev, uint8_t *buf_tx)
{
    /* Set atomic_uart_tx_done in false */
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000592:	d111      	bne.n	80005b8 <per_meas+0x70>
 8000594:	4698      	mov	r8, r3
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8000596:	200a      	movs	r0, #10
 8000598:	2100      	movs	r1, #0
 800059a:	f008 ffab 	bl	80094f4 <z_impl_k_sleep>
 800059e:	f3bf 8f5b 	dmb	ish
 80005a2:	e856 3f00 	ldrex	r3, [r6]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d103      	bne.n	80005b2 <per_meas+0x6a>
 80005aa:	e846 8200 	strex	r2, r8, [r6]
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d1f7      	bne.n	80005a2 <per_meas+0x5a>
 80005b2:	f3bf 8f5b 	dmb	ish
 80005b6:	d0ee      	beq.n	8000596 <per_meas+0x4e>
        k_sleep(K_MSEC(1));
    }
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 80005b8:	484d      	ldr	r0, [pc, #308]	; (80006f0 <per_meas+0x1a8>)
 80005ba:	f7ff ffba 	bl	8000532 <strlen>
 80005be:	4602      	mov	r2, r0
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	494b      	ldr	r1, [pc, #300]	; (80006f0 <per_meas+0x1a8>)
 80005c4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80005c8:	4638      	mov	r0, r7
 80005ca:	2300      	movs	r3, #0
 80005cc:	47c0      	blx	r8
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&timeout, K_SYSCALL_UART_TX);
	}
#endif
	compiler_barrier();
	return z_impl_uart_tx(dev, buf, len, timeout);
 80005ce:	e003      	b.n	80005d8 <per_meas+0x90>
 80005d0:	200a      	movs	r0, #10
 80005d2:	2100      	movs	r1, #0
 80005d4:	f008 ff8e 	bl	80094f4 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80005d8:	f3bf 8f5b 	dmb	ish
 80005dc:	6833      	ldr	r3, [r6, #0]
 80005de:	f3bf 8f5b 	dmb	ish
    /* Wait while uart transaction will be ended */
    while (!atomic_get(&atomic_uart_tx_done)) {
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f4      	beq.n	80005d0 <per_meas+0x88>
  lora_recv_error_timeout_cb error_timeout_cb)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->recv_async(dev, cb, error_timeout_cb);
 80005e6:	68a3      	ldr	r3, [r4, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4611      	mov	r1, r2
 80005ee:	4620      	mov	r0, r4
 80005f0:	4798      	blx	r3
    send_to_terminal(uart_dev, "Start PER measurement...\n");

    /* If receive is running then stop it */
    lora_recv_async(lora_dev, NULL, NULL);

    while (i < per_num) {
 80005f2:	f1b9 0f00 	cmp.w	r9, #0
 80005f6:	d06c      	beq.n	80006d2 <per_meas+0x18a>
 80005f8:	ed9f 8b39 	vldr	d8, [pc, #228]	; 80006e0 <per_meas+0x198>
		arch_syscall_invoke2(*(uintptr_t *)&dst, *(uintptr_t *)&len, K_SYSCALL_SYS_RAND_GET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_sys_rand_get(dst, len);
 80005fc:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80006f8 <per_meas+0x1b0>
	return api->recv(dev, data, size, timeout, rssi, snr);
 8000600:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 80006fc <per_meas+0x1b4>
    uint32_t i = 0;
 8000604:	f04f 0800 	mov.w	r8, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000608:	4a3a      	ldr	r2, [pc, #232]	; (80006f4 <per_meas+0x1ac>)
 800060a:	f3bf 8f5b 	dmb	ish
 800060e:	2601      	movs	r6, #1
 8000610:	e852 3f00 	ldrex	r3, [r2]
 8000614:	42b3      	cmp	r3, r6
 8000616:	d103      	bne.n	8000620 <per_meas+0xd8>
 8000618:	e842 6100 	strex	r1, r6, [r2]
 800061c:	2900      	cmp	r1, #0
 800061e:	d1f7      	bne.n	8000610 <per_meas+0xc8>
 8000620:	f3bf 8f5b 	dmb	ish
        if (atomic_cas(&atomic_cur_state, STATE_PER_MEAS, STATE_PER_MEAS)) {
 8000624:	d155      	bne.n	80006d2 <per_meas+0x18a>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8000626:	f3bf 8f5b 	dmb	ish
 800062a:	ab07      	add	r3, sp, #28
 800062c:	e853 2f00 	ldrex	r2, [r3]
 8000630:	4432      	add	r2, r6
 8000632:	e843 2100 	strex	r1, r2, [r3]
 8000636:	2900      	cmp	r1, #0
 8000638:	d1f8      	bne.n	800062c <per_meas+0xe4>
 800063a:	f3bf 8f5b 	dmb	ish
 800063e:	2104      	movs	r1, #4
 8000640:	4650      	mov	r0, sl
 8000642:	f001 fe89 	bl	8002358 <z_impl_sys_rand_get>
            atomic_inc(&atomic_packet_count);
            sys_rand_get(radio_buf_tx, RADIO_BUF_LEN);

            lora_cfg->tx = true;
 8000646:	736e      	strb	r6, [r5, #13]
	return api->config(dev, config);
 8000648:	68a3      	ldr	r3, [r4, #8]
 800064a:	4629      	mov	r1, r5
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4620      	mov	r0, r4
 8000650:	4798      	blx	r3
            do {
                ret = lora_config(lora_dev, lora_cfg);
 8000652:	9006      	str	r0, [sp, #24]
            } while (ret);
 8000654:	9e06      	ldr	r6, [sp, #24]
 8000656:	2e00      	cmp	r6, #0
 8000658:	d1f6      	bne.n	8000648 <per_meas+0x100>
	return api->send(dev, data, data_len);
 800065a:	68a3      	ldr	r3, [r4, #8]
 800065c:	2204      	movs	r2, #4
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	4651      	mov	r1, sl
 8000662:	4620      	mov	r0, r4
 8000664:	4798      	blx	r3

            ret = lora_send(lora_dev, radio_buf_tx, RADIO_BUF_LEN);

            lora_cfg->tx = false;
 8000666:	736e      	strb	r6, [r5, #13]
            ret = lora_send(lora_dev, radio_buf_tx, RADIO_BUF_LEN);
 8000668:	9006      	str	r0, [sp, #24]
	return api->config(dev, config);
 800066a:	68a3      	ldr	r3, [r4, #8]
 800066c:	4629      	mov	r1, r5
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4620      	mov	r0, r4
 8000672:	4798      	blx	r3
            do {
                ret = lora_config(lora_dev, lora_cfg);
 8000674:	9006      	str	r0, [sp, #24]
            } while (ret);
 8000676:	9b06      	ldr	r3, [sp, #24]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1f6      	bne.n	800066a <per_meas+0x122>
	return api->recv(dev, data, size, timeout, rssi, snr);
 800067c:	ed8d 8b00 	vstr	d8, [sp]
 8000680:	f10d 0215 	add.w	r2, sp, #21
 8000684:	68a3      	ldr	r3, [r4, #8]
 8000686:	9203      	str	r2, [sp, #12]
 8000688:	f10d 0216 	add.w	r2, sp, #22
 800068c:	9202      	str	r2, [sp, #8]
 800068e:	4659      	mov	r1, fp
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	2204      	movs	r2, #4
 8000694:	4620      	mov	r0, r4
 8000696:	4798      	blx	r3

            ret = lora_recv(lora_dev, radio_buf_rx, RADIO_BUF_LEN,
 8000698:	9006      	str	r0, [sp, #24]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800069a:	f3bf 8f5b 	dmb	ish
 800069e:	9b07      	ldr	r3, [sp, #28]
 80006a0:	f3bf 8f5b 	dmb	ish
                            K_SECONDS(RECV_TIMEOUT_SEC), &rssi, &snr);

            print_data.packet_num = atomic_get(&atomic_packet_count);
 80006a4:	9309      	str	r3, [sp, #36]	; 0x24
            print_data.rssi = rssi;
 80006a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80006aa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            print_data.snr = snr;

            print_per_status(uart_dev, ret, &print_data);
 80006ae:	9906      	ldr	r1, [sp, #24]
            print_data.snr = snr;
 80006b0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80006b4:	f88d 3020 	strb.w	r3, [sp, #32]
            print_per_status(uart_dev, ret, &print_data);
 80006b8:	aa08      	add	r2, sp, #32
 80006ba:	4638      	mov	r0, r7
 80006bc:	f000 fd96 	bl	80011ec <print_per_status>
            i++;
 80006c0:	f108 0801 	add.w	r8, r8, #1
 80006c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006c8:	2100      	movs	r1, #0
 80006ca:	f008 ff13 	bl	80094f4 <z_impl_k_sleep>
    while (i < per_num) {
 80006ce:	45c8      	cmp	r8, r9
 80006d0:	d19a      	bne.n	8000608 <per_meas+0xc0>
            k_sleep(K_MSEC(300));
        } else {
            break;
        }
    }
}
 80006d2:	b00b      	add	sp, #44	; 0x2c
 80006d4:	ecbd 8b02 	vpop	{d8}
 80006d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006dc:	f3af 8000 	nop.w
 80006e0:	00011170 	.word	0x00011170
 80006e4:	00000000 	.word	0x00000000
 80006e8:	200007b8 	.word	0x200007b8
 80006ec:	20000154 	.word	0x20000154
 80006f0:	0800be50 	.word	0x0800be50
 80006f4:	20000150 	.word	0x20000150
 80006f8:	20000840 	.word	0x20000840
 80006fc:	2000083c 	.word	0x2000083c

08000700 <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
 8000700:	b500      	push	{lr}
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8000702:	230a      	movs	r3, #10
 8000704:	b083      	sub	sp, #12
 8000706:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8000720 <RtcSetAlarm+0x20>
 800070a:	fba0 2303 	umull	r2, r3, r0, r3
		arch_syscall_invoke5(*(uintptr_t *)&timer, parm0.split.lo, parm0.split.hi, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <RtcSetAlarm+0x28>)
 8000710:	ed8d 7b00 	vstr	d7, [sp]
 8000714:	f009 f97e 	bl	8009a14 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8000718:	b003      	add	sp, #12
 800071a:	f85d fb04 	ldr.w	pc, [sp], #4
 800071e:	bf00      	nop
	...
 8000728:	200003f8 	.word	0x200003f8
 800072c:	00000000 	.word	0x00000000

08000730 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8000730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000734:	ed2d 8b02 	vpush	{d8}
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 8000738:	ed9f 8b51 	vldr	d8, [pc, #324]	; 8000880 <work_queue_main+0x150>
 800073c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800088c <work_queue_main+0x15c>
{
 8000740:	b087      	sub	sp, #28
 8000742:	4605      	mov	r5, r0
 8000744:	f100 09d0 	add.w	r9, r0, #208	; 0xd0
 8000748:	f100 0ad8 	add.w	sl, r0, #216	; 0xd8

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 800074c:	2700      	movs	r7, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 800074e:	f04f 0310 	mov.w	r3, #16
 8000752:	f3ef 8611 	mrs	r6, BASEPRI
 8000756:	f383 8812 	msr	BASEPRI_MAX, r3
 800075a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 800075e:	f8d5 40c8 	ldr.w	r4, [r5, #200]	; 0xc8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 8000762:	2c00      	cmp	r4, #0
 8000764:	d063      	beq.n	800082e <work_queue_main+0xfe>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8000766:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
	return node->next;
 800076a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 800076c:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8000770:	4294      	cmp	r4, r2
	list->tail = node;
 8000772:	bf08      	it	eq
 8000774:	f8c5 30cc 	streq.w	r3, [r5, #204]	; 0xcc
	*flagp |= BIT(bit);
 8000778:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
			handler = work->handler;
 800077c:	6862      	ldr	r2, [r4, #4]
	*flagp |= BIT(bit);
 800077e:	f043 0302 	orr.w	r3, r3, #2
 8000782:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
	*flagp &= ~BIT(bit);
 8000786:	68e3      	ldr	r3, [r4, #12]
 8000788:	f023 0304 	bic.w	r3, r3, #4
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000792:	f386 8811 	msr	BASEPRI, r6
 8000796:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 800079a:	4620      	mov	r0, r4
 800079c:	4790      	blx	r2
	__asm__ volatile(
 800079e:	f04f 0310 	mov.w	r3, #16
 80007a2:	f3ef 8211 	mrs	r2, BASEPRI
 80007a6:	f383 8812 	msr	BASEPRI_MAX, r3
 80007aa:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 80007ae:	68e3      	ldr	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80007b0:	0798      	lsls	r0, r3, #30
	*flagp &= ~BIT(bit);
 80007b2:	f023 0101 	bic.w	r1, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80007b6:	d40f      	bmi.n	80007d8 <work_queue_main+0xa8>
	*flagp &= ~BIT(bit);
 80007b8:	60e1      	str	r1, [r4, #12]
 80007ba:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80007be:	f023 0302 	bic.w	r3, r3, #2
 80007c2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
	__asm__ volatile(
 80007c6:	f382 8811 	msr	BASEPRI, r2
 80007ca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	d4bd      	bmi.n	800074e <work_queue_main+0x1e>
	z_impl_k_yield();
 80007d2:	f008 fdf1 	bl	80093b8 <z_impl_k_yield>
}
 80007d6:	e7ba      	b.n	800074e <work_queue_main+0x1e>
	return list->head;
 80007d8:	f8d8 0000 	ldr.w	r0, [r8]
	*flagp &= ~BIT(bit);
 80007dc:	f023 0303 	bic.w	r3, r3, #3
 80007e0:	60e3      	str	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d0e9      	beq.n	80007ba <work_queue_main+0x8a>
		if (wc->work == work) {
 80007e6:	6843      	ldr	r3, [r0, #4]
	return node->next;
 80007e8:	6806      	ldr	r6, [r0, #0]
 80007ea:	429c      	cmp	r4, r3
 80007ec:	f04f 0b00 	mov.w	fp, #0
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 80007f0:	4601      	mov	r1, r0
		if (wc->work == work) {
 80007f2:	d008      	beq.n	8000806 <work_queue_main+0xd6>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d0e0      	beq.n	80007ba <work_queue_main+0x8a>
 80007f8:	4630      	mov	r0, r6
 80007fa:	468b      	mov	fp, r1
		if (wc->work == work) {
 80007fc:	6843      	ldr	r3, [r0, #4]
 80007fe:	6836      	ldr	r6, [r6, #0]
 8000800:	429c      	cmp	r4, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 8000802:	4601      	mov	r1, r0
		if (wc->work == work) {
 8000804:	d1f6      	bne.n	80007f4 <work_queue_main+0xc4>
 8000806:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 8000808:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800080c:	f1bb 0f00 	cmp.w	fp, #0
 8000810:	d02d      	beq.n	800086e <work_queue_main+0x13e>
 8000812:	4298      	cmp	r0, r3
	parent->next = child;
 8000814:	f8cb 1000 	str.w	r1, [fp]
	list->tail = node;
 8000818:	bf08      	it	eq
 800081a:	f8c8 b004 	streq.w	fp, [r8, #4]
	parent->next = child;
 800081e:	f840 7b08 	str.w	r7, [r0], #8
 8000822:	9205      	str	r2, [sp, #20]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8000824:	f008 f862 	bl	80088ec <z_impl_k_sem_give>
}
 8000828:	9a05      	ldr	r2, [sp, #20]
 800082a:	4659      	mov	r1, fp
 800082c:	e7e2      	b.n	80007f4 <work_queue_main+0xc4>
	return (*flagp & BIT(bit)) != 0U;
 800082e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	*flagp &= ~BIT(bit);
 8000832:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
 8000836:	075c      	lsls	r4, r3, #29
	*flagp &= ~BIT(bit);
 8000838:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
		} else if (flag_test_and_clear(&queue->flags,
 800083c:	d408      	bmi.n	8000850 <work_queue_main+0x120>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800083e:	ed8d 8b00 	vstr	d8, [sp]
 8000842:	9702      	str	r7, [sp, #8]
 8000844:	464a      	mov	r2, r9
 8000846:	4631      	mov	r1, r6
 8000848:	480f      	ldr	r0, [pc, #60]	; (8000888 <work_queue_main+0x158>)
 800084a:	f008 ff1d 	bl	8009688 <z_sched_wait>
			continue;
 800084e:	e77e      	b.n	800074e <work_queue_main+0x1e>
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 8000850:	2200      	movs	r2, #0
 8000852:	2101      	movs	r1, #1
 8000854:	4650      	mov	r0, sl
 8000856:	f008 fee3 	bl	8009620 <z_sched_wake>
 800085a:	2800      	cmp	r0, #0
 800085c:	d0ef      	beq.n	800083e <work_queue_main+0x10e>
 800085e:	2200      	movs	r2, #0
 8000860:	2101      	movs	r1, #1
 8000862:	4650      	mov	r0, sl
 8000864:	f008 fedc 	bl	8009620 <z_sched_wake>
 8000868:	2800      	cmp	r0, #0
 800086a:	d1f1      	bne.n	8000850 <work_queue_main+0x120>
 800086c:	e7e7      	b.n	800083e <work_queue_main+0x10e>
Z_GENLIST_REMOVE(slist, snode)
 800086e:	4298      	cmp	r0, r3
	list->head = node;
 8000870:	f8c8 1000 	str.w	r1, [r8]
Z_GENLIST_REMOVE(slist, snode)
 8000874:	d1d3      	bne.n	800081e <work_queue_main+0xee>
	list->tail = node;
 8000876:	f8c8 1004 	str.w	r1, [r8, #4]
}
 800087a:	e7d0      	b.n	800081e <work_queue_main+0xee>
 800087c:	f3af 8000 	nop.w
 8000880:	ffffffff 	.word	0xffffffff
 8000884:	ffffffff 	.word	0xffffffff
 8000888:	20000e10 	.word	0x20000e10
 800088c:	20000e14 	.word	0x20000e14

08000890 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 8000890:	b530      	push	{r4, r5, lr}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	4604      	mov	r4, r0
	list->head = NULL;
 8000896:	2000      	movs	r0, #0
	list->tail = NULL;
 8000898:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
 800089c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800089e:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 80008a2:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
 80008a6:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 80008aa:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 80008ae:	b30d      	cbz	r5, 80008f4 <k_work_queue_start+0x64>
 80008b0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 80008b2:	2800      	cmp	r0, #0
 80008b4:	f240 1001 	movw	r0, #257	; 0x101
 80008b8:	bf08      	it	eq
 80008ba:	2001      	moveq	r0, #1
	*flagp = flags;
 80008bc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80008f8 <k_work_queue_start+0x68>
 80008c0:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80008c4:	2000      	movs	r0, #0
 80008c6:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80008ca:	9303      	str	r3, [sp, #12]
 80008cc:	9004      	str	r0, [sp, #16]
 80008ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <k_work_queue_start+0x70>)
 80008d4:	9400      	str	r4, [sp, #0]
 80008d6:	4620      	mov	r0, r4
 80008d8:	f007 fe54 	bl	8008584 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 80008dc:	b125      	cbz	r5, 80008e8 <k_work_queue_start+0x58>
 80008de:	6829      	ldr	r1, [r5, #0]
 80008e0:	b111      	cbz	r1, 80008e8 <k_work_queue_start+0x58>
	return z_impl_k_thread_name_set(thread, str);
 80008e2:	4620      	mov	r0, r4
 80008e4:	f007 fe18 	bl	8008518 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 80008e8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 80008ea:	b009      	add	sp, #36	; 0x24
 80008ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80008f0:	f007 be16 	b.w	8008520 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 80008f4:	2001      	movs	r0, #1
 80008f6:	e7e1      	b.n	80008bc <k_work_queue_start+0x2c>
 80008f8:	ffffffff 	.word	0xffffffff
 80008fc:	ffffffff 	.word	0xffffffff
 8000900:	08000731 	.word	0x08000731
 8000904:	00000000 	.word	0x00000000

08000908 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8000908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800090c:	ed2d 8b02 	vpush	{d8}
 8000910:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8000912:	f008 fb1d 	bl	8008f50 <z_time_slice>
	__asm__ volatile(
 8000916:	f04f 0310 	mov.w	r3, #16
 800091a:	f3ef 8511 	mrs	r5, BASEPRI
 800091e:	f383 8812 	msr	BASEPRI_MAX, r3
 8000922:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8000926:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80009fc <sys_clock_announce+0xf4>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800092a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8000a00 <sys_clock_announce+0xf8>
 800092e:	f8d9 4000 	ldr.w	r4, [r9]
 8000932:	f8c8 6000 	str.w	r6, [r8]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8000936:	454c      	cmp	r4, r9
 8000938:	d04d      	beq.n	80009d6 <sys_clock_announce+0xce>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
 800093a:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 80009f0 <sys_clock_announce+0xe8>
 800093e:	4f2e      	ldr	r7, [pc, #184]	; (80009f8 <sys_clock_announce+0xf0>)
 8000940:	462b      	mov	r3, r5
		curr_tick += dt;
 8000942:	e9d7 2100 	ldrd	r2, r1, [r7]
		remove_timeout(t);
 8000946:	4620      	mov	r0, r4
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8000948:	ea4f 7ce6 	mov.w	ip, r6, asr #31
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 800094c:	461d      	mov	r5, r3
 800094e:	b354      	cbz	r4, 80009a6 <sys_clock_announce+0x9e>
 8000950:	6923      	ldr	r3, [r4, #16]
 8000952:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8000956:	429e      	cmp	r6, r3
 8000958:	eb7c 0b0e 	sbcs.w	fp, ip, lr
		announce_remaining -= dt;
 800095c:	eba6 0a03 	sub.w	sl, r6, r3
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8000960:	db3d      	blt.n	80009de <sys_clock_announce+0xd6>
		curr_tick += dt;
 8000962:	189a      	adds	r2, r3, r2
 8000964:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
		t->dticks = 0;
 8000968:	ed84 8b04 	vstr	d8, [r4, #16]
		curr_tick += dt;
 800096c:	e9c7 2300 	strd	r2, r3, [r7]
		announce_remaining -= dt;
 8000970:	f8c8 a000 	str.w	sl, [r8]
		remove_timeout(t);
 8000974:	f008 feba 	bl	80096ec <remove_timeout>
	__asm__ volatile(
 8000978:	f385 8811 	msr	BASEPRI, r5
 800097c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 8000980:	68a3      	ldr	r3, [r4, #8]
 8000982:	4798      	blx	r3
	__asm__ volatile(
 8000984:	f04f 0310 	mov.w	r3, #16
 8000988:	f3ef 8511 	mrs	r5, BASEPRI
 800098c:	f383 8812 	msr	BASEPRI_MAX, r3
 8000990:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8000994:	f8d9 4000 	ldr.w	r4, [r9]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8000998:	f8d8 6000 	ldr.w	r6, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800099c:	454c      	cmp	r4, r9
	k.key = arch_irq_lock();
 800099e:	462b      	mov	r3, r5
 80009a0:	d1cf      	bne.n	8000942 <sys_clock_announce+0x3a>
 80009a2:	ea4f 7ce6 	mov.w	ip, r6, asr #31

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
	}

	curr_tick += announce_remaining;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	199b      	adds	r3, r3, r6
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
	announce_remaining = 0;
 80009ae:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
 80009b2:	eb43 030c 	adc.w	r3, r3, ip
 80009b6:	607b      	str	r3, [r7, #4]
	announce_remaining = 0;
 80009b8:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
 80009bc:	f008 feb2 	bl	8009724 <next_timeout>
 80009c0:	4621      	mov	r1, r4
 80009c2:	f007 f9b9 	bl	8007d38 <sys_clock_set_timeout>
	__asm__ volatile(
 80009c6:	f385 8811 	msr	BASEPRI, r5
 80009ca:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80009ce:	ecbd 8b02 	vpop	{d8}
 80009d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009d6:	4f08      	ldr	r7, [pc, #32]	; (80009f8 <sys_clock_announce+0xf0>)
 80009d8:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 80009dc:	e7e3      	b.n	80009a6 <sys_clock_announce+0x9e>
		first()->dticks -= announce_remaining;
 80009de:	1b9b      	subs	r3, r3, r6
 80009e0:	eb6e 010c 	sbc.w	r1, lr, ip
 80009e4:	6123      	str	r3, [r4, #16]
 80009e6:	6161      	str	r1, [r4, #20]
 80009e8:	e7dd      	b.n	80009a6 <sys_clock_announce+0x9e>
 80009ea:	bf00      	nop
 80009ec:	f3af 8000 	nop.w
	...
 80009f8:	200006c8 	.word	0x200006c8
 80009fc:	20000320 	.word	0x20000320
 8000a00:	20000e28 	.word	0x20000e28

08000a04 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <lora_receive_cb>:

void lora_receive_cb(const struct device *dev, uint8_t *data, uint16_t size, int16_t rssi, int8_t snr)
{
 8000a08:	b510      	push	{r4, lr}
 8000a0a:	4604      	mov	r4, r0
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	490b      	ldr	r1, [pc, #44]	; (8000a3c <lora_receive_cb+0x34>)
 8000a10:	f00a fbe6 	bl	800b1e0 <memcpy>
	return api->recv_async(dev, cb, error_timeout_cb);
 8000a14:	68a3      	ldr	r3, [r4, #8]
 8000a16:	2200      	movs	r2, #0
 8000a18:	691b      	ldr	r3, [r3, #16]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	4798      	blx	r3
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8000a20:	f3bf 8f5b 	dmb	ish
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <lora_receive_cb+0x38>)
 8000a26:	2203      	movs	r2, #3
 8000a28:	e853 1f00 	ldrex	r1, [r3]
 8000a2c:	e843 2000 	strex	r0, r2, [r3]
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d1f9      	bne.n	8000a28 <lora_receive_cb+0x20>
 8000a34:	f3bf 8f5b 	dmb	ish
    memcpy(data, radio_buf_tx, size);
    lora_recv_async(dev, NULL, NULL);
    atomic_set(&atomic_cur_state, STATE_TRANSMIT);
}
 8000a38:	bd10      	pop	{r4, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000840 	.word	0x20000840
 8000a40:	20000150 	.word	0x20000150

08000a44 <lora_rx_error_timeout_cb>:

void lora_rx_error_timeout_cb(const struct device *dev)
{

}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <print_modem_cfg>:
    }
}


void print_modem_cfg(const struct device *dev, struct lora_modem_config *cfg)
{
 8000a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static uint8_t cfg_buf[UART_TX_BUF_LEN] = {0};

    sprintf(cfg_buf, "Current modem configuration:\n");
 8000a4c:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 8000cf4 <print_modem_cfg+0x2ac>
 8000a50:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8000ce0 <print_modem_cfg+0x298>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000a54:	4ca1      	ldr	r4, [pc, #644]	; (8000cdc <print_modem_cfg+0x294>)
{
 8000a56:	4606      	mov	r6, r0
 8000a58:	460f      	mov	r7, r1
    sprintf(cfg_buf, "Current modem configuration:\n");
 8000a5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000a5e:	46c4      	mov	ip, r8
 8000a60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000a64:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8000a68:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
{
 8000a6c:	b084      	sub	sp, #16
    sprintf(cfg_buf, "Current modem configuration:\n");
 8000a6e:	f8ac 3000 	strh.w	r3, [ip]
 8000a72:	2500      	movs	r5, #0
 8000a74:	f3bf 8f5b 	dmb	ish
 8000a78:	e854 3f00 	ldrex	r3, [r4]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d112      	bne.n	8000aa6 <print_modem_cfg+0x5e>
 8000a80:	e844 5200 	strex	r2, r5, [r4]
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	d00e      	beq.n	8000aa6 <print_modem_cfg+0x5e>
 8000a88:	e7f6      	b.n	8000a78 <print_modem_cfg+0x30>
	return z_impl_k_sleep(timeout);
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f008 fd31 	bl	80094f4 <z_impl_k_sleep>
 8000a92:	f3bf 8f5b 	dmb	ish
 8000a96:	e854 3f00 	ldrex	r3, [r4]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d103      	bne.n	8000aa6 <print_modem_cfg+0x5e>
 8000a9e:	e844 5200 	strex	r2, r5, [r4]
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	d1f7      	bne.n	8000a96 <print_modem_cfg+0x4e>
 8000aa6:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000aaa:	d0ee      	beq.n	8000a8a <print_modem_cfg+0x42>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000aac:	488c      	ldr	r0, [pc, #560]	; (8000ce0 <print_modem_cfg+0x298>)
 8000aae:	f7ff fd40 	bl	8000532 <strlen>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	68b3      	ldr	r3, [r6, #8]
 8000ab6:	498a      	ldr	r1, [pc, #552]	; (8000ce0 <print_modem_cfg+0x298>)
 8000ab8:	685d      	ldr	r5, [r3, #4]
 8000aba:	4630      	mov	r0, r6
 8000abc:	2300      	movs	r3, #0
 8000abe:	47a8      	blx	r5
 8000ac0:	e003      	b.n	8000aca <print_modem_cfg+0x82>
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f008 fd15 	bl	80094f4 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000aca:	f3bf 8f5b 	dmb	ish
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0f4      	beq.n	8000ac2 <print_modem_cfg+0x7a>
    send_to_terminal(dev, cfg_buf);

    sprintf(cfg_buf, "Frequency: %lu kHz\n", (cfg->frequency)/1000);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	4a82      	ldr	r2, [pc, #520]	; (8000ce4 <print_modem_cfg+0x29c>)
 8000adc:	4880      	ldr	r0, [pc, #512]	; (8000ce0 <print_modem_cfg+0x298>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	099b      	lsrs	r3, r3, #6
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2240      	movs	r2, #64	; 0x40
 8000ae8:	4b7f      	ldr	r3, [pc, #508]	; (8000ce8 <print_modem_cfg+0x2a0>)
 8000aea:	2100      	movs	r1, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000aec:	2500      	movs	r5, #0
 8000aee:	f00a fb8d 	bl	800b20c <__sprintf_chk>
 8000af2:	f3bf 8f5b 	dmb	ish
 8000af6:	e854 3f00 	ldrex	r3, [r4]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d112      	bne.n	8000b24 <print_modem_cfg+0xdc>
 8000afe:	e844 5200 	strex	r2, r5, [r4]
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	d00e      	beq.n	8000b24 <print_modem_cfg+0xdc>
 8000b06:	e7f6      	b.n	8000af6 <print_modem_cfg+0xae>
 8000b08:	200a      	movs	r0, #10
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f008 fcf2 	bl	80094f4 <z_impl_k_sleep>
 8000b10:	f3bf 8f5b 	dmb	ish
 8000b14:	e854 3f00 	ldrex	r3, [r4]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d103      	bne.n	8000b24 <print_modem_cfg+0xdc>
 8000b1c:	e844 5200 	strex	r2, r5, [r4]
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	d1f7      	bne.n	8000b14 <print_modem_cfg+0xcc>
 8000b24:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000b28:	d0ee      	beq.n	8000b08 <print_modem_cfg+0xc0>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000b2a:	486d      	ldr	r0, [pc, #436]	; (8000ce0 <print_modem_cfg+0x298>)
 8000b2c:	f7ff fd01 	bl	8000532 <strlen>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68b3      	ldr	r3, [r6, #8]
 8000b34:	496a      	ldr	r1, [pc, #424]	; (8000ce0 <print_modem_cfg+0x298>)
 8000b36:	685d      	ldr	r5, [r3, #4]
 8000b38:	4630      	mov	r0, r6
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	47a8      	blx	r5
 8000b3e:	e003      	b.n	8000b48 <print_modem_cfg+0x100>
 8000b40:	200a      	movs	r0, #10
 8000b42:	2100      	movs	r1, #0
 8000b44:	f008 fcd6 	bl	80094f4 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000b48:	f3bf 8f5b 	dmb	ish
 8000b4c:	6823      	ldr	r3, [r4, #0]
 8000b4e:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f4      	beq.n	8000b40 <print_modem_cfg+0xf8>
    send_to_terminal(dev, cfg_buf);

    switch (cfg->bandwidth) {
 8000b56:	7939      	ldrb	r1, [r7, #4]
 8000b58:	2901      	cmp	r1, #1
 8000b5a:	d058      	beq.n	8000c0e <print_modem_cfg+0x1c6>
 8000b5c:	2902      	cmp	r1, #2
 8000b5e:	d04c      	beq.n	8000bfa <print_modem_cfg+0x1b2>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d042      	beq.n	8000bea <print_modem_cfg+0x1a2>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000b64:	f3bf 8f5b 	dmb	ish
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e854 2f00 	ldrex	r2, [r4]
 8000b6e:	2a01      	cmp	r2, #1
 8000b70:	d103      	bne.n	8000b7a <print_modem_cfg+0x132>
 8000b72:	e844 3100 	strex	r1, r3, [r4]
 8000b76:	2900      	cmp	r1, #0
 8000b78:	d1f7      	bne.n	8000b6a <print_modem_cfg+0x122>
 8000b7a:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000b7e:	d111      	bne.n	8000ba4 <print_modem_cfg+0x15c>
 8000b80:	461d      	mov	r5, r3
 8000b82:	200a      	movs	r0, #10
 8000b84:	2100      	movs	r1, #0
 8000b86:	f008 fcb5 	bl	80094f4 <z_impl_k_sleep>
 8000b8a:	f3bf 8f5b 	dmb	ish
 8000b8e:	e854 3f00 	ldrex	r3, [r4]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d103      	bne.n	8000b9e <print_modem_cfg+0x156>
 8000b96:	e844 5200 	strex	r2, r5, [r4]
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d1f7      	bne.n	8000b8e <print_modem_cfg+0x146>
 8000b9e:	f3bf 8f5b 	dmb	ish
 8000ba2:	d0ee      	beq.n	8000b82 <print_modem_cfg+0x13a>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000ba4:	484e      	ldr	r0, [pc, #312]	; (8000ce0 <print_modem_cfg+0x298>)
 8000ba6:	f7ff fcc4 	bl	8000532 <strlen>
 8000baa:	4602      	mov	r2, r0
 8000bac:	68b3      	ldr	r3, [r6, #8]
 8000bae:	494c      	ldr	r1, [pc, #304]	; (8000ce0 <print_modem_cfg+0x298>)
 8000bb0:	685d      	ldr	r5, [r3, #4]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	47a8      	blx	r5
 8000bb8:	e003      	b.n	8000bc2 <print_modem_cfg+0x17a>
 8000bba:	200a      	movs	r0, #10
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	f008 fc99 	bl	80094f4 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000bc2:	f3bf 8f5b 	dmb	ish
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f4      	beq.n	8000bba <print_modem_cfg+0x172>
            sprintf(cfg_buf, "Bandwidth: %u kHz\n", 500);
            break;
    }
    send_to_terminal(dev, cfg_buf);

    switch (cfg->datarate) {
 8000bd0:	797b      	ldrb	r3, [r7, #5]
 8000bd2:	3b06      	subs	r3, #6
 8000bd4:	2b06      	cmp	r3, #6
 8000bd6:	d82c      	bhi.n	8000c32 <print_modem_cfg+0x1ea>
 8000bd8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000bdc:	01080103 	.word	0x01080103
 8000be0:	006f00fe 	.word	0x006f00fe
 8000be4:	0069006c 	.word	0x0069006c
 8000be8:	0022      	.short	0x0022
            sprintf(cfg_buf, "Bandwidth: %u kHz\n", 125);
 8000bea:	237d      	movs	r3, #125	; 0x7d
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2240      	movs	r2, #64	; 0x40
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <print_modem_cfg+0x2a4>)
 8000bf2:	483b      	ldr	r0, [pc, #236]	; (8000ce0 <print_modem_cfg+0x298>)
 8000bf4:	f00a fb0a 	bl	800b20c <__sprintf_chk>
            break;
 8000bf8:	e7b4      	b.n	8000b64 <print_modem_cfg+0x11c>
            sprintf(cfg_buf, "Bandwidth: %u kHz\n", 500);
 8000bfa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2240      	movs	r2, #64	; 0x40
 8000c02:	4b3a      	ldr	r3, [pc, #232]	; (8000cec <print_modem_cfg+0x2a4>)
 8000c04:	4836      	ldr	r0, [pc, #216]	; (8000ce0 <print_modem_cfg+0x298>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	f00a fb00 	bl	800b20c <__sprintf_chk>
            break;
 8000c0c:	e7aa      	b.n	8000b64 <print_modem_cfg+0x11c>
            sprintf(cfg_buf, "Bandwidth: %u kHz\n", 250);
 8000c0e:	23fa      	movs	r3, #250	; 0xfa
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2240      	movs	r2, #64	; 0x40
 8000c14:	4b35      	ldr	r3, [pc, #212]	; (8000cec <print_modem_cfg+0x2a4>)
 8000c16:	4832      	ldr	r0, [pc, #200]	; (8000ce0 <print_modem_cfg+0x298>)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	f00a faf7 	bl	800b20c <__sprintf_chk>
            break;
 8000c1e:	e7a1      	b.n	8000b64 <print_modem_cfg+0x11c>
            break;
        case SF_11:
            sprintf(cfg_buf, "Datarate: SF_11\n");
            break;
        case SF_12:
            sprintf(cfg_buf, "Datarate: SF_12\n");
 8000c20:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8000cf8 <print_modem_cfg+0x2b0>
 8000c24:	4d2e      	ldr	r5, [pc, #184]	; (8000ce0 <print_modem_cfg+0x298>)
 8000c26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c2c:	f8dc 3000 	ldr.w	r3, [ip]
 8000c30:	702b      	strb	r3, [r5, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000c32:	2300      	movs	r3, #0
 8000c34:	f3bf 8f5b 	dmb	ish
 8000c38:	e854 2f00 	ldrex	r2, [r4]
 8000c3c:	2a01      	cmp	r2, #1
 8000c3e:	d103      	bne.n	8000c48 <print_modem_cfg+0x200>
 8000c40:	e844 3100 	strex	r1, r3, [r4]
 8000c44:	2900      	cmp	r1, #0
 8000c46:	d1f7      	bne.n	8000c38 <print_modem_cfg+0x1f0>
 8000c48:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000c4c:	d111      	bne.n	8000c72 <print_modem_cfg+0x22a>
 8000c4e:	461d      	mov	r5, r3
 8000c50:	200a      	movs	r0, #10
 8000c52:	2100      	movs	r1, #0
 8000c54:	f008 fc4e 	bl	80094f4 <z_impl_k_sleep>
 8000c58:	f3bf 8f5b 	dmb	ish
 8000c5c:	e854 3f00 	ldrex	r3, [r4]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d103      	bne.n	8000c6c <print_modem_cfg+0x224>
 8000c64:	e844 5200 	strex	r2, r5, [r4]
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	d1f7      	bne.n	8000c5c <print_modem_cfg+0x214>
 8000c6c:	f3bf 8f5b 	dmb	ish
 8000c70:	d0ee      	beq.n	8000c50 <print_modem_cfg+0x208>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000c72:	481b      	ldr	r0, [pc, #108]	; (8000ce0 <print_modem_cfg+0x298>)
 8000c74:	f7ff fc5d 	bl	8000532 <strlen>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68b3      	ldr	r3, [r6, #8]
 8000c7c:	4918      	ldr	r1, [pc, #96]	; (8000ce0 <print_modem_cfg+0x298>)
 8000c7e:	685d      	ldr	r5, [r3, #4]
 8000c80:	4630      	mov	r0, r6
 8000c82:	2300      	movs	r3, #0
 8000c84:	47a8      	blx	r5
 8000c86:	e003      	b.n	8000c90 <print_modem_cfg+0x248>
 8000c88:	200a      	movs	r0, #10
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	f008 fc32 	bl	80094f4 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000c90:	f3bf 8f5b 	dmb	ish
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f4      	beq.n	8000c88 <print_modem_cfg+0x240>
            break;
    }
    send_to_terminal(dev, cfg_buf);

    switch (cfg->coding_rate) {
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d817      	bhi.n	8000cd6 <print_modem_cfg+0x28e>
 8000ca6:	e8df f003 	tbb	[pc, r3]
 8000caa:	9491      	.short	0x9491
 8000cac:	0d8e      	.short	0x0d8e
            sprintf(cfg_buf, "Datarate: SF_11\n");
 8000cae:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8000cfc <print_modem_cfg+0x2b4>
 8000cb2:	e7b7      	b.n	8000c24 <print_modem_cfg+0x1dc>
            sprintf(cfg_buf, "Datarate: SF_10\n");
 8000cb4:	f8df c048 	ldr.w	ip, [pc, #72]	; 8000d00 <print_modem_cfg+0x2b8>
 8000cb8:	e7b4      	b.n	8000c24 <print_modem_cfg+0x1dc>
            sprintf(cfg_buf, "Datarate: SF_9\n");
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <print_modem_cfg+0x2a8>)
 8000cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cbe:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
            break;
 8000cc2:	e7b6      	b.n	8000c32 <print_modem_cfg+0x1ea>
            break;
        case CR_4_7:
            sprintf(cfg_buf, "Coding rate: 4/7\n");
            break;
        case CR_4_8:
            sprintf(cfg_buf, "Coding rate: 4/8\n");
 8000cc4:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8000d04 <print_modem_cfg+0x2bc>
 8000cc8:	4d05      	ldr	r5, [pc, #20]	; (8000ce0 <print_modem_cfg+0x298>)
 8000cca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd0:	f8dc 3000 	ldr.w	r3, [ip]
 8000cd4:	802b      	strh	r3, [r5, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	e01a      	b.n	8000d10 <print_modem_cfg+0x2c8>
 8000cda:	bf00      	nop
 8000cdc:	20000154 	.word	0x20000154
 8000ce0:	200007bc 	.word	0x200007bc
 8000ce4:	10624dd3 	.word	0x10624dd3
 8000ce8:	0800bc50 	.word	0x0800bc50
 8000cec:	0800bc64 	.word	0x0800bc64
 8000cf0:	0800bca8 	.word	0x0800bca8
 8000cf4:	0800bc30 	.word	0x0800bc30
 8000cf8:	0800bce0 	.word	0x0800bce0
 8000cfc:	0800bccc 	.word	0x0800bccc
 8000d00:	0800bcb8 	.word	0x0800bcb8
 8000d04:	0800bd30 	.word	0x0800bd30
 8000d08:	200a      	movs	r0, #10
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	f008 fbf2 	bl	80094f4 <z_impl_k_sleep>
 8000d10:	f3bf 8f5b 	dmb	ish
 8000d14:	e854 3f00 	ldrex	r3, [r4]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d103      	bne.n	8000d24 <print_modem_cfg+0x2dc>
 8000d1c:	e844 5200 	strex	r2, r5, [r4]
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d1f7      	bne.n	8000d14 <print_modem_cfg+0x2cc>
 8000d24:	f3bf 8f5b 	dmb	ish
 8000d28:	bf0c      	ite	eq
 8000d2a:	2301      	moveq	r3, #1
 8000d2c:	2300      	movne	r3, #0
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000d2e:	d0eb      	beq.n	8000d08 <print_modem_cfg+0x2c0>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000d30:	48a0      	ldr	r0, [pc, #640]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000d32:	9303      	str	r3, [sp, #12]
 8000d34:	f7ff fbfd 	bl	8000532 <strlen>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68b1      	ldr	r1, [r6, #8]
 8000d3c:	9b03      	ldr	r3, [sp, #12]
 8000d3e:	684d      	ldr	r5, [r1, #4]
 8000d40:	499c      	ldr	r1, [pc, #624]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000d42:	4630      	mov	r0, r6
 8000d44:	47a8      	blx	r5
 8000d46:	e003      	b.n	8000d50 <print_modem_cfg+0x308>
 8000d48:	200a      	movs	r0, #10
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f008 fbd2 	bl	80094f4 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000d50:	f3bf 8f5b 	dmb	ish
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f4      	beq.n	8000d48 <print_modem_cfg+0x300>
            break;
    }
    send_to_terminal(dev, cfg_buf);

    sprintf(cfg_buf, "Preamble length: %u symb\n", cfg->preamble_len);
 8000d5e:	893a      	ldrh	r2, [r7, #8]
 8000d60:	9200      	str	r2, [sp, #0]
 8000d62:	4b95      	ldr	r3, [pc, #596]	; (8000fb8 <print_modem_cfg+0x570>)
 8000d64:	4893      	ldr	r0, [pc, #588]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000d66:	2240      	movs	r2, #64	; 0x40
 8000d68:	2100      	movs	r1, #0
 8000d6a:	f00a fa4f 	bl	800b20c <__sprintf_chk>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000d6e:	2500      	movs	r5, #0
 8000d70:	e003      	b.n	8000d7a <print_modem_cfg+0x332>
 8000d72:	200a      	movs	r0, #10
 8000d74:	2100      	movs	r1, #0
 8000d76:	f008 fbbd 	bl	80094f4 <z_impl_k_sleep>
 8000d7a:	f3bf 8f5b 	dmb	ish
 8000d7e:	e854 3f00 	ldrex	r3, [r4]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d103      	bne.n	8000d8e <print_modem_cfg+0x346>
 8000d86:	e844 5200 	strex	r2, r5, [r4]
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	d1f7      	bne.n	8000d7e <print_modem_cfg+0x336>
 8000d8e:	f3bf 8f5b 	dmb	ish
 8000d92:	bf0c      	ite	eq
 8000d94:	2301      	moveq	r3, #1
 8000d96:	2300      	movne	r3, #0
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000d98:	d0eb      	beq.n	8000d72 <print_modem_cfg+0x32a>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000d9a:	4886      	ldr	r0, [pc, #536]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000d9c:	9303      	str	r3, [sp, #12]
 8000d9e:	f7ff fbc8 	bl	8000532 <strlen>
 8000da2:	4602      	mov	r2, r0
 8000da4:	68b1      	ldr	r1, [r6, #8]
 8000da6:	9b03      	ldr	r3, [sp, #12]
 8000da8:	684d      	ldr	r5, [r1, #4]
 8000daa:	4982      	ldr	r1, [pc, #520]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000dac:	4630      	mov	r0, r6
 8000dae:	47a8      	blx	r5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000db0:	f3bf 8f5b 	dmb	ish
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000dba:	b9e3      	cbnz	r3, 8000df6 <print_modem_cfg+0x3ae>
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	200a      	movs	r0, #10
 8000dc0:	f008 fb98 	bl	80094f4 <z_impl_k_sleep>
 8000dc4:	e7f4      	b.n	8000db0 <print_modem_cfg+0x368>
            sprintf(cfg_buf, "Coding rate: 4/7\n");
 8000dc6:	f8df c208 	ldr.w	ip, [pc, #520]	; 8000fd0 <print_modem_cfg+0x588>
 8000dca:	e77d      	b.n	8000cc8 <print_modem_cfg+0x280>
            sprintf(cfg_buf, "Coding rate: 4/5\n");
 8000dcc:	f8df c204 	ldr.w	ip, [pc, #516]	; 8000fd4 <print_modem_cfg+0x58c>
 8000dd0:	e77a      	b.n	8000cc8 <print_modem_cfg+0x280>
            sprintf(cfg_buf, "Coding rate: 4/6\n");
 8000dd2:	f8df c204 	ldr.w	ip, [pc, #516]	; 8000fd8 <print_modem_cfg+0x590>
 8000dd6:	e777      	b.n	8000cc8 <print_modem_cfg+0x280>
            sprintf(cfg_buf, "Datarate: SF_8\n");
 8000dd8:	4b78      	ldr	r3, [pc, #480]	; (8000fbc <print_modem_cfg+0x574>)
 8000dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ddc:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
            break;
 8000de0:	e727      	b.n	8000c32 <print_modem_cfg+0x1ea>
            sprintf(cfg_buf, "Datarate: SF_6\n");
 8000de2:	4b77      	ldr	r3, [pc, #476]	; (8000fc0 <print_modem_cfg+0x578>)
 8000de4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000de6:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
            break;
 8000dea:	e722      	b.n	8000c32 <print_modem_cfg+0x1ea>
            sprintf(cfg_buf, "Datarate: SF_7\n");
 8000dec:	4b75      	ldr	r3, [pc, #468]	; (8000fc4 <print_modem_cfg+0x57c>)
 8000dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df0:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
            break;
 8000df4:	e71d      	b.n	8000c32 <print_modem_cfg+0x1ea>
    send_to_terminal(dev, cfg_buf);

    if (cfg->fixed_len) {
 8000df6:	7afb      	ldrb	r3, [r7, #11]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d036      	beq.n	8000e6a <print_modem_cfg+0x422>
        sprintf(cfg_buf, "Fixed length: true\n");
 8000dfc:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8000fdc <print_modem_cfg+0x594>
 8000e00:	4d6c      	ldr	r5, [pc, #432]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000e02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e08:	f8dc 3000 	ldr.w	r3, [ip]
 8000e0c:	602b      	str	r3, [r5, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000e0e:	f04f 0800 	mov.w	r8, #0
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000e12:	e003      	b.n	8000e1c <print_modem_cfg+0x3d4>
 8000e14:	200a      	movs	r0, #10
 8000e16:	2100      	movs	r1, #0
 8000e18:	f008 fb6c 	bl	80094f4 <z_impl_k_sleep>
 8000e1c:	f3bf 8f5b 	dmb	ish
 8000e20:	e854 3f00 	ldrex	r3, [r4]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d103      	bne.n	8000e30 <print_modem_cfg+0x3e8>
 8000e28:	e844 8200 	strex	r2, r8, [r4]
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d1f7      	bne.n	8000e20 <print_modem_cfg+0x3d8>
 8000e30:	f3bf 8f5b 	dmb	ish
 8000e34:	bf0c      	ite	eq
 8000e36:	2301      	moveq	r3, #1
 8000e38:	2300      	movne	r3, #0
 8000e3a:	d0eb      	beq.n	8000e14 <print_modem_cfg+0x3cc>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000e3c:	485d      	ldr	r0, [pc, #372]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000e3e:	9303      	str	r3, [sp, #12]
 8000e40:	f7ff fb77 	bl	8000532 <strlen>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68b1      	ldr	r1, [r6, #8]
 8000e48:	9b03      	ldr	r3, [sp, #12]
 8000e4a:	684d      	ldr	r5, [r1, #4]
 8000e4c:	4959      	ldr	r1, [pc, #356]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000e4e:	4630      	mov	r0, r6
 8000e50:	47a8      	blx	r5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000e52:	f3bf 8f5b 	dmb	ish
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d13b      	bne.n	8000ed8 <print_modem_cfg+0x490>
 8000e60:	2100      	movs	r1, #0
 8000e62:	200a      	movs	r0, #10
 8000e64:	f008 fb46 	bl	80094f4 <z_impl_k_sleep>
 8000e68:	e7f3      	b.n	8000e52 <print_modem_cfg+0x40a>
        send_to_terminal(dev, cfg_buf);

        sprintf(cfg_buf, "Payload length: %u\n", cfg->payload_len);
        send_to_terminal(dev, cfg_buf);
    } else {
        sprintf(cfg_buf, "Fixed length: false\n");
 8000e6a:	f8df c174 	ldr.w	ip, [pc, #372]	; 8000fe0 <print_modem_cfg+0x598>
 8000e6e:	4d51      	ldr	r5, [pc, #324]	; (8000fb4 <print_modem_cfg+0x56c>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000e70:	4698      	mov	r8, r3
 8000e72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e78:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8000e7c:	f845 0b04 	str.w	r0, [r5], #4
 8000e80:	7029      	strb	r1, [r5, #0]
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000e82:	e003      	b.n	8000e8c <print_modem_cfg+0x444>
 8000e84:	200a      	movs	r0, #10
 8000e86:	2100      	movs	r1, #0
 8000e88:	f008 fb34 	bl	80094f4 <z_impl_k_sleep>
 8000e8c:	f3bf 8f5b 	dmb	ish
 8000e90:	e854 3f00 	ldrex	r3, [r4]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d103      	bne.n	8000ea0 <print_modem_cfg+0x458>
 8000e98:	e844 8200 	strex	r2, r8, [r4]
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d1f7      	bne.n	8000e90 <print_modem_cfg+0x448>
 8000ea0:	f3bf 8f5b 	dmb	ish
 8000ea4:	bf0c      	ite	eq
 8000ea6:	2301      	moveq	r3, #1
 8000ea8:	2300      	movne	r3, #0
 8000eaa:	d0eb      	beq.n	8000e84 <print_modem_cfg+0x43c>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000eac:	4841      	ldr	r0, [pc, #260]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000eae:	9303      	str	r3, [sp, #12]
 8000eb0:	f7ff fb3f 	bl	8000532 <strlen>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68b1      	ldr	r1, [r6, #8]
 8000eb8:	9b03      	ldr	r3, [sp, #12]
 8000eba:	684d      	ldr	r5, [r1, #4]
 8000ebc:	493d      	ldr	r1, [pc, #244]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	47a8      	blx	r5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000ec2:	f3bf 8f5b 	dmb	ish
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000ecc:	bb13      	cbnz	r3, 8000f14 <print_modem_cfg+0x4cc>
 8000ece:	2100      	movs	r1, #0
 8000ed0:	200a      	movs	r0, #10
 8000ed2:	f008 fb0f 	bl	80094f4 <z_impl_k_sleep>
 8000ed6:	e7f4      	b.n	8000ec2 <print_modem_cfg+0x47a>
        sprintf(cfg_buf, "Payload length: %u\n", cfg->payload_len);
 8000ed8:	7aba      	ldrb	r2, [r7, #10]
 8000eda:	9200      	str	r2, [sp, #0]
 8000edc:	4b3a      	ldr	r3, [pc, #232]	; (8000fc8 <print_modem_cfg+0x580>)
 8000ede:	4835      	ldr	r0, [pc, #212]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000ee0:	2240      	movs	r2, #64	; 0x40
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f00a f992 	bl	800b20c <__sprintf_chk>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8000ee8:	2500      	movs	r5, #0
 8000eea:	f3bf 8f5b 	dmb	ish
 8000eee:	e854 3f00 	ldrex	r3, [r4]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d103      	bne.n	8000efe <print_modem_cfg+0x4b6>
 8000ef6:	e844 5200 	strex	r2, r5, [r4]
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	d1f7      	bne.n	8000eee <print_modem_cfg+0x4a6>
 8000efe:	f3bf 8f5b 	dmb	ish
 8000f02:	bf0c      	ite	eq
 8000f04:	2301      	moveq	r3, #1
 8000f06:	2300      	movne	r3, #0
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8000f08:	d123      	bne.n	8000f52 <print_modem_cfg+0x50a>
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f008 faf1 	bl	80094f4 <z_impl_k_sleep>
 8000f12:	e7ea      	b.n	8000eea <print_modem_cfg+0x4a2>
        send_to_terminal(dev, cfg_buf);
    }

    sprintf(cfg_buf, "TX power: %d dBm\n", cfg->tx_power);
 8000f14:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8000f18:	9200      	str	r2, [sp, #0]
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <print_modem_cfg+0x584>)
 8000f1c:	4825      	ldr	r0, [pc, #148]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000f1e:	2240      	movs	r2, #64	; 0x40
 8000f20:	2100      	movs	r1, #0
 8000f22:	f00a f973 	bl	800b20c <__sprintf_chk>
 8000f26:	2500      	movs	r5, #0
 8000f28:	f3bf 8f5b 	dmb	ish
 8000f2c:	e854 3f00 	ldrex	r3, [r4]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d103      	bne.n	8000f3c <print_modem_cfg+0x4f4>
 8000f34:	e844 5200 	strex	r2, r5, [r4]
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	d1f7      	bne.n	8000f2c <print_modem_cfg+0x4e4>
 8000f3c:	f3bf 8f5b 	dmb	ish
 8000f40:	bf0c      	ite	eq
 8000f42:	2301      	moveq	r3, #1
 8000f44:	2300      	movne	r3, #0
 8000f46:	d11b      	bne.n	8000f80 <print_modem_cfg+0x538>
 8000f48:	2100      	movs	r1, #0
 8000f4a:	200a      	movs	r0, #10
 8000f4c:	f008 fad2 	bl	80094f4 <z_impl_k_sleep>
 8000f50:	e7ea      	b.n	8000f28 <print_modem_cfg+0x4e0>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000f52:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000f54:	9303      	str	r3, [sp, #12]
 8000f56:	f7ff faec 	bl	8000532 <strlen>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	68b1      	ldr	r1, [r6, #8]
 8000f5e:	9b03      	ldr	r3, [sp, #12]
 8000f60:	684d      	ldr	r5, [r1, #4]
 8000f62:	4914      	ldr	r1, [pc, #80]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000f64:	4630      	mov	r0, r6
 8000f66:	47a8      	blx	r5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000f68:	f3bf 8f5b 	dmb	ish
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1ce      	bne.n	8000f14 <print_modem_cfg+0x4cc>
 8000f76:	2100      	movs	r1, #0
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f008 fabb 	bl	80094f4 <z_impl_k_sleep>
 8000f7e:	e7f3      	b.n	8000f68 <print_modem_cfg+0x520>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000f82:	9303      	str	r3, [sp, #12]
 8000f84:	f7ff fad5 	bl	8000532 <strlen>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68b1      	ldr	r1, [r6, #8]
 8000f8c:	9b03      	ldr	r3, [sp, #12]
 8000f8e:	684d      	ldr	r5, [r1, #4]
 8000f90:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <print_modem_cfg+0x56c>)
 8000f92:	4630      	mov	r0, r6
 8000f94:	47a8      	blx	r5
 8000f96:	f3bf 8f5b 	dmb	ish
 8000f9a:	6823      	ldr	r3, [r4, #0]
 8000f9c:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8000fa0:	b923      	cbnz	r3, 8000fac <print_modem_cfg+0x564>
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	200a      	movs	r0, #10
 8000fa6:	f008 faa5 	bl	80094f4 <z_impl_k_sleep>
 8000faa:	e7f4      	b.n	8000f96 <print_modem_cfg+0x54e>
    send_to_terminal(dev, cfg_buf);
}
 8000fac:	b004      	add	sp, #16
 8000fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200007bc 	.word	0x200007bc
 8000fb8:	0800bd44 	.word	0x0800bd44
 8000fbc:	0800bc98 	.word	0x0800bc98
 8000fc0:	0800bc78 	.word	0x0800bc78
 8000fc4:	0800bc88 	.word	0x0800bc88
 8000fc8:	0800bd74 	.word	0x0800bd74
 8000fcc:	0800bd88 	.word	0x0800bd88
 8000fd0:	0800bd1c 	.word	0x0800bd1c
 8000fd4:	0800bcf4 	.word	0x0800bcf4
 8000fd8:	0800bd08 	.word	0x0800bd08
 8000fdc:	0800bd60 	.word	0x0800bd60
 8000fe0:	0800bd9c 	.word	0x0800bd9c

08000fe4 <change_modem_datarate>:
{
 8000fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe6:	461f      	mov	r7, r3
 8000fe8:	6883      	ldr	r3, [r0, #8]
 8000fea:	460d      	mov	r5, r1
 8000fec:	4616      	mov	r6, r2
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4604      	mov	r4, r0
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4798      	blx	r3
    lora_cfg->datarate = new_dr;
 8000ff8:	716e      	strb	r6, [r5, #5]
	return api->config(dev, config);
 8000ffa:	68a3      	ldr	r3, [r4, #8]
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4620      	mov	r0, r4
 8001002:	4798      	blx	r3
    if (!lora_config(lora_dev, lora_cfg)) {
 8001004:	b3b0      	cbz	r0, 8001074 <change_modem_datarate+0x90>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001006:	f3bf 8f5b 	dmb	ish
 800100a:	4c1d      	ldr	r4, [pc, #116]	; (8001080 <change_modem_datarate+0x9c>)
 800100c:	2500      	movs	r5, #0
 800100e:	e854 3f00 	ldrex	r3, [r4]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d114      	bne.n	8001040 <change_modem_datarate+0x5c>
 8001016:	e844 5200 	strex	r2, r5, [r4]
 800101a:	2a00      	cmp	r2, #0
 800101c:	d1f7      	bne.n	800100e <change_modem_datarate+0x2a>
 800101e:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001022:	d110      	bne.n	8001046 <change_modem_datarate+0x62>
 8001024:	200a      	movs	r0, #10
 8001026:	2100      	movs	r1, #0
 8001028:	f008 fa64 	bl	80094f4 <z_impl_k_sleep>
 800102c:	f3bf 8f5b 	dmb	ish
 8001030:	e854 2f00 	ldrex	r2, [r4]
 8001034:	2a01      	cmp	r2, #1
 8001036:	d103      	bne.n	8001040 <change_modem_datarate+0x5c>
 8001038:	e844 5300 	strex	r3, r5, [r4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f7      	bne.n	8001030 <change_modem_datarate+0x4c>
 8001040:	f3bf 8f5b 	dmb	ish
 8001044:	d0ee      	beq.n	8001024 <change_modem_datarate+0x40>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001046:	480f      	ldr	r0, [pc, #60]	; (8001084 <change_modem_datarate+0xa0>)
 8001048:	f7ff fa73 	bl	8000532 <strlen>
 800104c:	4602      	mov	r2, r0
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	2300      	movs	r3, #0
 8001052:	684d      	ldr	r5, [r1, #4]
 8001054:	490b      	ldr	r1, [pc, #44]	; (8001084 <change_modem_datarate+0xa0>)
 8001056:	4638      	mov	r0, r7
 8001058:	47a8      	blx	r5
 800105a:	e003      	b.n	8001064 <change_modem_datarate+0x80>
 800105c:	200a      	movs	r0, #10
 800105e:	2100      	movs	r1, #0
 8001060:	f008 fa48 	bl	80094f4 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001064:	f3bf 8f5b 	dmb	ish
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f4      	beq.n	800105c <change_modem_datarate+0x78>
}
 8001072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        print_modem_cfg(uart_dev, lora_cfg);
 8001074:	4629      	mov	r1, r5
 8001076:	4638      	mov	r0, r7
}
 8001078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        print_modem_cfg(uart_dev, lora_cfg);
 800107c:	f7ff bce4 	b.w	8000a48 <print_modem_cfg>
 8001080:	20000154 	.word	0x20000154
 8001084:	0800bdb4 	.word	0x0800bdb4

08001088 <change_modem_frequency>:
{
 8001088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108a:	461e      	mov	r6, r3
	return api->recv_async(dev, cb, error_timeout_cb);
 800108c:	6883      	ldr	r3, [r0, #8]
 800108e:	4615      	mov	r5, r2
 8001090:	2200      	movs	r2, #0
 8001092:	4604      	mov	r4, r0
 8001094:	460f      	mov	r7, r1
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	4611      	mov	r1, r2
 800109a:	4798      	blx	r3
    lora_cfg->frequency = (new_freq_khz*1000);
 800109c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a0:	fb03 f505 	mul.w	r5, r3, r5
	return api->config(dev, config);
 80010a4:	68a3      	ldr	r3, [r4, #8]
 80010a6:	603d      	str	r5, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4620      	mov	r0, r4
 80010ac:	4639      	mov	r1, r7
 80010ae:	4798      	blx	r3
    if (!lora_config(lora_dev, lora_cfg)) {
 80010b0:	b3b0      	cbz	r0, 8001120 <change_modem_frequency+0x98>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80010b2:	f3bf 8f5b 	dmb	ish
 80010b6:	4c1d      	ldr	r4, [pc, #116]	; (800112c <change_modem_frequency+0xa4>)
 80010b8:	2500      	movs	r5, #0
 80010ba:	e854 3f00 	ldrex	r3, [r4]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d114      	bne.n	80010ec <change_modem_frequency+0x64>
 80010c2:	e844 5200 	strex	r2, r5, [r4]
 80010c6:	2a00      	cmp	r2, #0
 80010c8:	d1f7      	bne.n	80010ba <change_modem_frequency+0x32>
 80010ca:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 80010ce:	d110      	bne.n	80010f2 <change_modem_frequency+0x6a>
 80010d0:	200a      	movs	r0, #10
 80010d2:	2100      	movs	r1, #0
 80010d4:	f008 fa0e 	bl	80094f4 <z_impl_k_sleep>
 80010d8:	f3bf 8f5b 	dmb	ish
 80010dc:	e854 2f00 	ldrex	r2, [r4]
 80010e0:	2a01      	cmp	r2, #1
 80010e2:	d103      	bne.n	80010ec <change_modem_frequency+0x64>
 80010e4:	e844 5300 	strex	r3, r5, [r4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f7      	bne.n	80010dc <change_modem_frequency+0x54>
 80010ec:	f3bf 8f5b 	dmb	ish
 80010f0:	d0ee      	beq.n	80010d0 <change_modem_frequency+0x48>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 80010f2:	480f      	ldr	r0, [pc, #60]	; (8001130 <change_modem_frequency+0xa8>)
 80010f4:	f7ff fa1d 	bl	8000532 <strlen>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68b1      	ldr	r1, [r6, #8]
 80010fc:	2300      	movs	r3, #0
 80010fe:	684d      	ldr	r5, [r1, #4]
 8001100:	490b      	ldr	r1, [pc, #44]	; (8001130 <change_modem_frequency+0xa8>)
 8001102:	4630      	mov	r0, r6
 8001104:	47a8      	blx	r5
 8001106:	e003      	b.n	8001110 <change_modem_frequency+0x88>
 8001108:	200a      	movs	r0, #10
 800110a:	2100      	movs	r1, #0
 800110c:	f008 f9f2 	bl	80094f4 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001110:	f3bf 8f5b 	dmb	ish
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f4      	beq.n	8001108 <change_modem_frequency+0x80>
}
 800111e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        print_modem_cfg(uart_dev, lora_cfg);
 8001120:	4639      	mov	r1, r7
 8001122:	4630      	mov	r0, r6
}
 8001124:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        print_modem_cfg(uart_dev, lora_cfg);
 8001128:	f7ff bc8e 	b.w	8000a48 <print_modem_cfg>
 800112c:	20000154 	.word	0x20000154
 8001130:	0800bdd8 	.word	0x0800bdd8

08001134 <incr_decr_modem_frequency>:
{
 8001134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001136:	461e      	mov	r6, r3
	return api->recv_async(dev, cb, error_timeout_cb);
 8001138:	6883      	ldr	r3, [r0, #8]
 800113a:	460c      	mov	r4, r1
 800113c:	4617      	mov	r7, r2
 800113e:	2200      	movs	r2, #0
 8001140:	4611      	mov	r1, r2
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	4605      	mov	r5, r0
 8001146:	4798      	blx	r3
        lora_cfg->frequency += FREQUENCY_STEP_HZ;
 8001148:	6822      	ldr	r2, [r4, #0]
    if (incr) {
 800114a:	2f00      	cmp	r7, #0
 800114c:	d046      	beq.n	80011dc <incr_decr_modem_frequency+0xa8>
        lora_cfg->frequency += FREQUENCY_STEP_HZ;
 800114e:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8001152:	32a0      	adds	r2, #160	; 0xa0
	return api->config(dev, config);
 8001154:	68ab      	ldr	r3, [r5, #8]
 8001156:	6022      	str	r2, [r4, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4628      	mov	r0, r5
 800115c:	4621      	mov	r1, r4
 800115e:	4798      	blx	r3
    if (!lora_config(lora_dev, lora_cfg)) {
 8001160:	b3b0      	cbz	r0, 80011d0 <incr_decr_modem_frequency+0x9c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001162:	f3bf 8f5b 	dmb	ish
 8001166:	4c1f      	ldr	r4, [pc, #124]	; (80011e4 <incr_decr_modem_frequency+0xb0>)
 8001168:	2500      	movs	r5, #0
 800116a:	e854 3f00 	ldrex	r3, [r4]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d114      	bne.n	800119c <incr_decr_modem_frequency+0x68>
 8001172:	e844 5200 	strex	r2, r5, [r4]
 8001176:	2a00      	cmp	r2, #0
 8001178:	d1f7      	bne.n	800116a <incr_decr_modem_frequency+0x36>
 800117a:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 800117e:	d110      	bne.n	80011a2 <incr_decr_modem_frequency+0x6e>
 8001180:	200a      	movs	r0, #10
 8001182:	2100      	movs	r1, #0
 8001184:	f008 f9b6 	bl	80094f4 <z_impl_k_sleep>
 8001188:	f3bf 8f5b 	dmb	ish
 800118c:	e854 2f00 	ldrex	r2, [r4]
 8001190:	2a01      	cmp	r2, #1
 8001192:	d103      	bne.n	800119c <incr_decr_modem_frequency+0x68>
 8001194:	e844 5300 	strex	r3, r5, [r4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f7      	bne.n	800118c <incr_decr_modem_frequency+0x58>
 800119c:	f3bf 8f5b 	dmb	ish
 80011a0:	d0ee      	beq.n	8001180 <incr_decr_modem_frequency+0x4c>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 80011a2:	4811      	ldr	r0, [pc, #68]	; (80011e8 <incr_decr_modem_frequency+0xb4>)
 80011a4:	f7ff f9c5 	bl	8000532 <strlen>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68b1      	ldr	r1, [r6, #8]
 80011ac:	2300      	movs	r3, #0
 80011ae:	684d      	ldr	r5, [r1, #4]
 80011b0:	490d      	ldr	r1, [pc, #52]	; (80011e8 <incr_decr_modem_frequency+0xb4>)
 80011b2:	4630      	mov	r0, r6
 80011b4:	47a8      	blx	r5
 80011b6:	e003      	b.n	80011c0 <incr_decr_modem_frequency+0x8c>
 80011b8:	200a      	movs	r0, #10
 80011ba:	2100      	movs	r1, #0
 80011bc:	f008 f99a 	bl	80094f4 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80011c0:	f3bf 8f5b 	dmb	ish
 80011c4:	6823      	ldr	r3, [r4, #0]
 80011c6:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f4      	beq.n	80011b8 <incr_decr_modem_frequency+0x84>
}
 80011ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        print_modem_cfg(uart_dev, lora_cfg);
 80011d0:	4621      	mov	r1, r4
 80011d2:	4630      	mov	r0, r6
}
 80011d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        print_modem_cfg(uart_dev, lora_cfg);
 80011d8:	f7ff bc36 	b.w	8000a48 <print_modem_cfg>
        lora_cfg->frequency -= FREQUENCY_STEP_HZ;
 80011dc:	f5a2 32c3 	sub.w	r2, r2, #99840	; 0x18600
 80011e0:	3aa0      	subs	r2, #160	; 0xa0
 80011e2:	e7b7      	b.n	8001154 <incr_decr_modem_frequency+0x20>
 80011e4:	20000154 	.word	0x20000154
 80011e8:	0800bdd8 	.word	0x0800bdd8

080011ec <print_per_status>:


void print_per_status(const struct device *uart_dev, int ret, struct print_data_elem_s *print_data)
{
 80011ec:	b570      	push	{r4, r5, r6, lr}
    static uint8_t per_buf[UART_TX_BUF_LEN] = {0};
    if ((ret < 0) || ret != RADIO_BUF_LEN) {
        sprintf(per_buf, "Packet %lu/%ld is missing!!!\n", print_data->packet_num, atomic_per_num);
 80011ee:	4b44      	ldr	r3, [pc, #272]	; (8001300 <print_per_status+0x114>)
 80011f0:	6854      	ldr	r4, [r2, #4]
 80011f2:	681d      	ldr	r5, [r3, #0]
    if ((ret < 0) || ret != RADIO_BUF_LEN) {
 80011f4:	2904      	cmp	r1, #4
{
 80011f6:	b084      	sub	sp, #16
 80011f8:	4606      	mov	r6, r0
    if ((ret < 0) || ret != RADIO_BUF_LEN) {
 80011fa:	d03d      	beq.n	8001278 <print_per_status+0x8c>
        sprintf(per_buf, "Packet %lu/%ld is missing!!!\n", print_data->packet_num, atomic_per_num);
 80011fc:	e9cd 4500 	strd	r4, r5, [sp]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001200:	4c40      	ldr	r4, [pc, #256]	; (8001304 <print_per_status+0x118>)
 8001202:	4b41      	ldr	r3, [pc, #260]	; (8001308 <print_per_status+0x11c>)
 8001204:	4841      	ldr	r0, [pc, #260]	; (800130c <print_per_status+0x120>)
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	2100      	movs	r1, #0
 800120a:	2500      	movs	r5, #0
 800120c:	f009 fffe 	bl	800b20c <__sprintf_chk>
 8001210:	f3bf 8f5b 	dmb	ish
 8001214:	e854 3f00 	ldrex	r3, [r4]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d112      	bne.n	8001242 <print_per_status+0x56>
 800121c:	e844 5200 	strex	r2, r5, [r4]
 8001220:	2a00      	cmp	r2, #0
 8001222:	d00e      	beq.n	8001242 <print_per_status+0x56>
 8001224:	e7f6      	b.n	8001214 <print_per_status+0x28>
 8001226:	200a      	movs	r0, #10
 8001228:	2100      	movs	r1, #0
 800122a:	f008 f963 	bl	80094f4 <z_impl_k_sleep>
 800122e:	f3bf 8f5b 	dmb	ish
 8001232:	e854 3f00 	ldrex	r3, [r4]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d103      	bne.n	8001242 <print_per_status+0x56>
 800123a:	e844 5200 	strex	r2, r5, [r4]
 800123e:	2a00      	cmp	r2, #0
 8001240:	d1f7      	bne.n	8001232 <print_per_status+0x46>
 8001242:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 8001246:	d0ee      	beq.n	8001226 <print_per_status+0x3a>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 8001248:	4830      	ldr	r0, [pc, #192]	; (800130c <print_per_status+0x120>)
 800124a:	f7ff f972 	bl	8000532 <strlen>
 800124e:	4602      	mov	r2, r0
 8001250:	68b1      	ldr	r1, [r6, #8]
 8001252:	2300      	movs	r3, #0
 8001254:	684d      	ldr	r5, [r1, #4]
 8001256:	492d      	ldr	r1, [pc, #180]	; (800130c <print_per_status+0x120>)
 8001258:	4630      	mov	r0, r6
 800125a:	47a8      	blx	r5
 800125c:	e003      	b.n	8001266 <print_per_status+0x7a>
 800125e:	200a      	movs	r0, #10
 8001260:	2100      	movs	r1, #0
 8001262:	f008 f947 	bl	80094f4 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001266:	f3bf 8f5b 	dmb	ish
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f4      	beq.n	800125e <print_per_status+0x72>
    } else {
        sprintf(per_buf, "Packet %lu/%ld is received\n rssi: %d\n snr: %d\n", print_data->packet_num,
                atomic_per_num, print_data->rssi, print_data->snr);
        send_to_terminal(uart_dev, per_buf);
    }
}
 8001274:	b004      	add	sp, #16
 8001276:	bd70      	pop	{r4, r5, r6, pc}
        sprintf(per_buf, "Packet %lu/%ld is received\n rssi: %d\n snr: %d\n", print_data->packet_num,
 8001278:	f992 3000 	ldrsb.w	r3, [r2]
 800127c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001280:	9400      	str	r4, [sp, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001282:	4c20      	ldr	r4, [pc, #128]	; (8001304 <print_per_status+0x118>)
 8001284:	9303      	str	r3, [sp, #12]
 8001286:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <print_per_status+0x124>)
 800128c:	481f      	ldr	r0, [pc, #124]	; (800130c <print_per_status+0x120>)
 800128e:	2240      	movs	r2, #64	; 0x40
 8001290:	2100      	movs	r1, #0
 8001292:	2500      	movs	r5, #0
 8001294:	f009 ffba 	bl	800b20c <__sprintf_chk>
 8001298:	f3bf 8f5b 	dmb	ish
 800129c:	e854 3f00 	ldrex	r3, [r4]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d112      	bne.n	80012ca <print_per_status+0xde>
 80012a4:	e844 5200 	strex	r2, r5, [r4]
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	d00e      	beq.n	80012ca <print_per_status+0xde>
 80012ac:	e7f6      	b.n	800129c <print_per_status+0xb0>
 80012ae:	200a      	movs	r0, #10
 80012b0:	2100      	movs	r1, #0
 80012b2:	f008 f91f 	bl	80094f4 <z_impl_k_sleep>
 80012b6:	f3bf 8f5b 	dmb	ish
 80012ba:	e854 3f00 	ldrex	r3, [r4]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d103      	bne.n	80012ca <print_per_status+0xde>
 80012c2:	e844 5200 	strex	r2, r5, [r4]
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d1f7      	bne.n	80012ba <print_per_status+0xce>
 80012ca:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 80012ce:	d0ee      	beq.n	80012ae <print_per_status+0xc2>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 80012d0:	480e      	ldr	r0, [pc, #56]	; (800130c <print_per_status+0x120>)
 80012d2:	f7ff f92e 	bl	8000532 <strlen>
 80012d6:	4602      	mov	r2, r0
 80012d8:	68b1      	ldr	r1, [r6, #8]
 80012da:	2300      	movs	r3, #0
 80012dc:	684d      	ldr	r5, [r1, #4]
 80012de:	490b      	ldr	r1, [pc, #44]	; (800130c <print_per_status+0x120>)
 80012e0:	4630      	mov	r0, r6
 80012e2:	47a8      	blx	r5
 80012e4:	e003      	b.n	80012ee <print_per_status+0x102>
 80012e6:	200a      	movs	r0, #10
 80012e8:	2100      	movs	r1, #0
 80012ea:	f008 f903 	bl	80094f4 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80012ee:	f3bf 8f5b 	dmb	ish
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f4      	beq.n	80012e6 <print_per_status+0xfa>
 80012fc:	e7ba      	b.n	8001274 <print_per_status+0x88>
 80012fe:	bf00      	nop
 8001300:	200007b8 	.word	0x200007b8
 8001304:	20000154 	.word	0x20000154
 8001308:	0800be00 	.word	0x0800be00
 800130c:	200007fc 	.word	0x200007fc
 8001310:	0800be20 	.word	0x0800be20

08001314 <stop_session>:
	return api->recv_async(dev, cb, error_timeout_cb);
 8001314:	6883      	ldr	r3, [r0, #8]


void stop_session(const struct device *lora_dev, const struct device *uart_dev) {
 8001316:	b570      	push	{r4, r5, r6, lr}
 8001318:	2200      	movs	r2, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800131a:	4c1c      	ldr	r4, [pc, #112]	; (800138c <stop_session+0x78>)
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	460e      	mov	r6, r1
 8001320:	2500      	movs	r5, #0
 8001322:	4611      	mov	r1, r2
 8001324:	4798      	blx	r3
 8001326:	f3bf 8f5b 	dmb	ish
 800132a:	e854 3f00 	ldrex	r3, [r4]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d112      	bne.n	8001358 <stop_session+0x44>
 8001332:	e844 5200 	strex	r2, r5, [r4]
 8001336:	2a00      	cmp	r2, #0
 8001338:	d00e      	beq.n	8001358 <stop_session+0x44>
 800133a:	e7f6      	b.n	800132a <stop_session+0x16>
 800133c:	200a      	movs	r0, #10
 800133e:	2100      	movs	r1, #0
 8001340:	f008 f8d8 	bl	80094f4 <z_impl_k_sleep>
 8001344:	f3bf 8f5b 	dmb	ish
 8001348:	e854 3f00 	ldrex	r3, [r4]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d103      	bne.n	8001358 <stop_session+0x44>
 8001350:	e844 5200 	strex	r2, r5, [r4]
 8001354:	2a00      	cmp	r2, #0
 8001356:	d1f7      	bne.n	8001348 <stop_session+0x34>
 8001358:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 800135c:	d0ee      	beq.n	800133c <stop_session+0x28>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 800135e:	480c      	ldr	r0, [pc, #48]	; (8001390 <stop_session+0x7c>)
 8001360:	f7ff f8e7 	bl	8000532 <strlen>
 8001364:	4602      	mov	r2, r0
 8001366:	68b1      	ldr	r1, [r6, #8]
 8001368:	2300      	movs	r3, #0
 800136a:	684d      	ldr	r5, [r1, #4]
 800136c:	4908      	ldr	r1, [pc, #32]	; (8001390 <stop_session+0x7c>)
 800136e:	4630      	mov	r0, r6
 8001370:	47a8      	blx	r5
 8001372:	e003      	b.n	800137c <stop_session+0x68>
 8001374:	200a      	movs	r0, #10
 8001376:	2100      	movs	r1, #0
 8001378:	f008 f8bc 	bl	80094f4 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800137c:	f3bf 8f5b 	dmb	ish
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f4      	beq.n	8001374 <stop_session+0x60>
    lora_recv_async(lora_dev, NULL, NULL);
    send_to_terminal(uart_dev, "Session stopped, modem released.\n");
}
 800138a:	bd70      	pop	{r4, r5, r6, pc}
 800138c:	20000154 	.word	0x20000154
 8001390:	0800be6c 	.word	0x0800be6c

08001394 <event_cb>:
/**
 * Structs and enums area end
 * */

void event_cb(const struct device* dev, struct uart_event* evt, void* user_data) {
    switch (evt->type) {
 8001394:	780b      	ldrb	r3, [r1, #0]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d003      	beq.n	80013a2 <event_cb+0xe>
 800139a:	2b05      	cmp	r3, #5
 800139c:	d011      	beq.n	80013c2 <event_cb+0x2e>
 800139e:	b11b      	cbz	r3, 80013a8 <event_cb+0x14>
            uart_rx_disable(dev);
            break;
        case UART_RX_STOPPED:
            break;
    }
}
 80013a0:	4770      	bx	lr
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
 80013a2:	6883      	ldr	r3, [r0, #8]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	4718      	bx	r3
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <event_cb+0x34>)
 80013aa:	f3bf 8f5b 	dmb	ish
 80013ae:	2201      	movs	r2, #1
 80013b0:	e853 1f00 	ldrex	r1, [r3]
 80013b4:	e843 2000 	strex	r0, r2, [r3]
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1f9      	bne.n	80013b0 <event_cb+0x1c>
 80013bc:	f3bf 8f5b 	dmb	ish
 80013c0:	4770      	bx	lr
            k_work_submit(&work_uart_data_proc);
 80013c2:	4802      	ldr	r0, [pc, #8]	; (80013cc <event_cb+0x38>)
 80013c4:	f007 bbfa 	b.w	8008bbc <k_work_submit>
 80013c8:	20000154 	.word	0x20000154
 80013cc:	20000884 	.word	0x20000884

080013d0 <work_uart_data_proc_handler>:


void work_uart_data_proc_handler(struct k_work *item)
{
 80013d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 80013d4:	48a1      	ldr	r0, [pc, #644]	; (800165c <work_uart_data_proc_handler+0x28c>)
    const struct device* uart_dev = device_get_binding(CURRENT_UART_DEVICE);
    struct parsed_frame_s parsed_frame = {0};
    /* Select current command */
    parsed_frame.cmd_ptr = strtok((char*)(&uart_buf_rx), "=");
 80013d6:	4da2      	ldr	r5, [pc, #648]	; (8001660 <work_uart_data_proc_handler+0x290>)
 80013d8:	f006 ff78 	bl	80082cc <z_impl_device_get_binding>
 80013dc:	49a1      	ldr	r1, [pc, #644]	; (8001664 <work_uart_data_proc_handler+0x294>)
 80013de:	4606      	mov	r6, r0
 80013e0:	4628      	mov	r0, r5
 80013e2:	f008 ff75 	bl	800a2d0 <strtok>
 80013e6:	4604      	mov	r4, r0
    /* Select command argument */
    parsed_frame.arg = atoi(strtok((char*)(&uart_buf_rx[strlen(parsed_frame.cmd_ptr) + 1]), "\n"));
 80013e8:	f7ff f8a3 	bl	8000532 <strlen>
 80013ec:	3001      	adds	r0, #1
 80013ee:	499e      	ldr	r1, [pc, #632]	; (8001668 <work_uart_data_proc_handler+0x298>)
 80013f0:	4428      	add	r0, r5
 80013f2:	f008 ff6d 	bl	800a2d0 <strtok>
 80013f6:	f009 feef 	bl	800b1d8 <atoi>

    if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_PER)) { /* Set PER measurement */
 80013fa:	499c      	ldr	r1, [pc, #624]	; (800166c <work_uart_data_proc_handler+0x29c>)
    parsed_frame.arg = atoi(strtok((char*)(&uart_buf_rx[strlen(parsed_frame.cmd_ptr) + 1]), "\n"));
 80013fc:	4607      	mov	r7, r0
    if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_PER)) { /* Set PER measurement */
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff f88d 	bl	800051e <strcmp>
 8001404:	bb00      	cbnz	r0, 8001448 <work_uart_data_proc_handler+0x78>
 8001406:	f3bf 8f5b 	dmb	ish
 800140a:	4b99      	ldr	r3, [pc, #612]	; (8001670 <work_uart_data_proc_handler+0x2a0>)
 800140c:	2201      	movs	r2, #1
 800140e:	e853 1f00 	ldrex	r1, [r3]
 8001412:	e843 2000 	strex	r0, r2, [r3]
 8001416:	2800      	cmp	r0, #0
 8001418:	d1f9      	bne.n	800140e <work_uart_data_proc_handler+0x3e>
 800141a:	f3bf 8f5b 	dmb	ish
 800141e:	f3bf 8f5b 	dmb	ish
 8001422:	4b94      	ldr	r3, [pc, #592]	; (8001674 <work_uart_data_proc_handler+0x2a4>)
 8001424:	e853 2f00 	ldrex	r2, [r3]
 8001428:	e843 7100 	strex	r1, r7, [r3]
 800142c:	2900      	cmp	r1, #0
 800142e:	d1f9      	bne.n	8001424 <work_uart_data_proc_handler+0x54>
 8001430:	f3bf 8f5b 	dmb	ish
	return api->rx_enable(dev, buf, len, timeout);
 8001434:	68b3      	ldr	r3, [r6, #8]
 8001436:	498a      	ldr	r1, [pc, #552]	; (8001660 <work_uart_data_proc_handler+0x290>)
 8001438:	68dc      	ldr	r4, [r3, #12]
 800143a:	4630      	mov	r0, r6
 800143c:	46a4      	mov	ip, r4
 800143e:	2300      	movs	r3, #0

    } else {
        atomic_set(&atomic_cur_state, STATE_IDLE);
    }
    uart_rx_enable(uart_dev, uart_buf_rx, UART_RX_BUF_LEN, TIMEOUT);
}
 8001440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001444:	2240      	movs	r2, #64	; 0x40
 8001446:	4760      	bx	ip
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_STOP_RECEIVE_SESSION)) { /* Stop receive */
 8001448:	498b      	ldr	r1, [pc, #556]	; (8001678 <work_uart_data_proc_handler+0x2a8>)
 800144a:	4620      	mov	r0, r4
 800144c:	f7ff f867 	bl	800051e <strcmp>
 8001450:	4605      	mov	r5, r0
 8001452:	2800      	cmp	r0, #0
 8001454:	d13f      	bne.n	80014d6 <work_uart_data_proc_handler+0x106>
 8001456:	f3bf 8f5b 	dmb	ish
 800145a:	4b85      	ldr	r3, [pc, #532]	; (8001670 <work_uart_data_proc_handler+0x2a0>)
 800145c:	2209      	movs	r2, #9
 800145e:	e853 1f00 	ldrex	r1, [r3]
 8001462:	e843 2000 	strex	r0, r2, [r3]
 8001466:	2800      	cmp	r0, #0
 8001468:	d1f9      	bne.n	800145e <work_uart_data_proc_handler+0x8e>
 800146a:	f3bf 8f5b 	dmb	ish
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800146e:	f3bf 8f5b 	dmb	ish
 8001472:	4c82      	ldr	r4, [pc, #520]	; (800167c <work_uart_data_proc_handler+0x2ac>)
 8001474:	e854 3f00 	ldrex	r3, [r4]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d112      	bne.n	80014a2 <work_uart_data_proc_handler+0xd2>
 800147c:	e844 5200 	strex	r2, r5, [r4]
 8001480:	2a00      	cmp	r2, #0
 8001482:	d00e      	beq.n	80014a2 <work_uart_data_proc_handler+0xd2>
 8001484:	e7f6      	b.n	8001474 <work_uart_data_proc_handler+0xa4>
 8001486:	200a      	movs	r0, #10
 8001488:	2100      	movs	r1, #0
 800148a:	f008 f833 	bl	80094f4 <z_impl_k_sleep>
 800148e:	f3bf 8f5b 	dmb	ish
 8001492:	e854 3f00 	ldrex	r3, [r4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d103      	bne.n	80014a2 <work_uart_data_proc_handler+0xd2>
 800149a:	e844 5200 	strex	r2, r5, [r4]
 800149e:	2a00      	cmp	r2, #0
 80014a0:	d1f7      	bne.n	8001492 <work_uart_data_proc_handler+0xc2>
 80014a2:	f3bf 8f5b 	dmb	ish
    while (atomic_cas(&atomic_uart_tx_done, true, false)) {
 80014a6:	d0ee      	beq.n	8001486 <work_uart_data_proc_handler+0xb6>
    uart_tx(dev, buf_tx, strlen(buf_tx), TX_TIMEOUT_US);
 80014a8:	4875      	ldr	r0, [pc, #468]	; (8001680 <work_uart_data_proc_handler+0x2b0>)
 80014aa:	f7ff f842 	bl	8000532 <strlen>
 80014ae:	4602      	mov	r2, r0
	return api->tx(dev, buf, len, timeout);
 80014b0:	68b1      	ldr	r1, [r6, #8]
 80014b2:	2300      	movs	r3, #0
 80014b4:	684d      	ldr	r5, [r1, #4]
 80014b6:	4972      	ldr	r1, [pc, #456]	; (8001680 <work_uart_data_proc_handler+0x2b0>)
 80014b8:	4630      	mov	r0, r6
 80014ba:	47a8      	blx	r5
 80014bc:	e003      	b.n	80014c6 <work_uart_data_proc_handler+0xf6>
 80014be:	200a      	movs	r0, #10
 80014c0:	2100      	movs	r1, #0
 80014c2:	f008 f817 	bl	80094f4 <z_impl_k_sleep>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80014c6:	f3bf 8f5b 	dmb	ish
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	f3bf 8f5b 	dmb	ish
    while (!atomic_get(&atomic_uart_tx_done)) {
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f4      	beq.n	80014be <work_uart_data_proc_handler+0xee>
 80014d4:	e7ae      	b.n	8001434 <work_uart_data_proc_handler+0x64>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_GET_CFG)) { /* Get lora modem configuration parameters */
 80014d6:	496b      	ldr	r1, [pc, #428]	; (8001684 <work_uart_data_proc_handler+0x2b4>)
 80014d8:	4620      	mov	r0, r4
 80014da:	f7ff f820 	bl	800051e <strcmp>
 80014de:	b178      	cbz	r0, 8001500 <work_uart_data_proc_handler+0x130>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_INCR_FREQ)) { /* Increment current frequency on 100 kHz */
 80014e0:	4969      	ldr	r1, [pc, #420]	; (8001688 <work_uart_data_proc_handler+0x2b8>)
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff f81b 	bl	800051e <strcmp>
 80014e8:	b9a8      	cbnz	r0, 8001516 <work_uart_data_proc_handler+0x146>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80014ea:	f3bf 8f5b 	dmb	ish
 80014ee:	4b60      	ldr	r3, [pc, #384]	; (8001670 <work_uart_data_proc_handler+0x2a0>)
 80014f0:	2206      	movs	r2, #6
 80014f2:	e853 1f00 	ldrex	r1, [r3]
 80014f6:	e843 2000 	strex	r0, r2, [r3]
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d098      	beq.n	8001430 <work_uart_data_proc_handler+0x60>
 80014fe:	e7f8      	b.n	80014f2 <work_uart_data_proc_handler+0x122>
 8001500:	4b5b      	ldr	r3, [pc, #364]	; (8001670 <work_uart_data_proc_handler+0x2a0>)
 8001502:	f3bf 8f5b 	dmb	ish
 8001506:	2204      	movs	r2, #4
 8001508:	e853 1f00 	ldrex	r1, [r3]
 800150c:	e843 2000 	strex	r0, r2, [r3]
 8001510:	2800      	cmp	r0, #0
 8001512:	d08d      	beq.n	8001430 <work_uart_data_proc_handler+0x60>
 8001514:	e7f8      	b.n	8001508 <work_uart_data_proc_handler+0x138>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_DECR_FREQ)) { /* Decrement current frequency on 100 kHz */
 8001516:	495d      	ldr	r1, [pc, #372]	; (800168c <work_uart_data_proc_handler+0x2bc>)
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff f800 	bl	800051e <strcmp>
 800151e:	b1d8      	cbz	r0, 8001558 <work_uart_data_proc_handler+0x188>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_SET_FREQ)) { /* Change frequency value in lora configuration param */
 8001520:	495b      	ldr	r1, [pc, #364]	; (8001690 <work_uart_data_proc_handler+0x2c0>)
 8001522:	4620      	mov	r0, r4
 8001524:	f7fe fffb 	bl	800051e <strcmp>
 8001528:	bb10      	cbnz	r0, 8001570 <work_uart_data_proc_handler+0x1a0>
 800152a:	f3bf 8f5b 	dmb	ish
 800152e:	4b59      	ldr	r3, [pc, #356]	; (8001694 <work_uart_data_proc_handler+0x2c4>)
 8001530:	e853 2f00 	ldrex	r2, [r3]
 8001534:	e843 7100 	strex	r1, r7, [r3]
 8001538:	2900      	cmp	r1, #0
 800153a:	d1f9      	bne.n	8001530 <work_uart_data_proc_handler+0x160>
 800153c:	f3bf 8f5b 	dmb	ish
 8001540:	f3bf 8f5b 	dmb	ish
 8001544:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <work_uart_data_proc_handler+0x2a0>)
 8001546:	2205      	movs	r2, #5
 8001548:	e853 1f00 	ldrex	r1, [r3]
 800154c:	e843 2000 	strex	r0, r2, [r3]
 8001550:	2800      	cmp	r0, #0
 8001552:	f43f af6d 	beq.w	8001430 <work_uart_data_proc_handler+0x60>
 8001556:	e7f7      	b.n	8001548 <work_uart_data_proc_handler+0x178>
 8001558:	4b45      	ldr	r3, [pc, #276]	; (8001670 <work_uart_data_proc_handler+0x2a0>)
 800155a:	f3bf 8f5b 	dmb	ish
 800155e:	2207      	movs	r2, #7
 8001560:	e853 1f00 	ldrex	r1, [r3]
 8001564:	e843 2000 	strex	r0, r2, [r3]
 8001568:	2800      	cmp	r0, #0
 800156a:	f43f af61 	beq.w	8001430 <work_uart_data_proc_handler+0x60>
 800156e:	e7f7      	b.n	8001560 <work_uart_data_proc_handler+0x190>
    } else if (!strcmp(parsed_frame.cmd_ptr, COMMAND_TYPE_SET_SF)) { /* Change SF value in lora configuration param */
 8001570:	4949      	ldr	r1, [pc, #292]	; (8001698 <work_uart_data_proc_handler+0x2c8>)
 8001572:	4620      	mov	r0, r4
 8001574:	f7fe ffd3 	bl	800051e <strcmp>
 8001578:	2800      	cmp	r0, #0
 800157a:	d162      	bne.n	8001642 <work_uart_data_proc_handler+0x272>
        switch (parsed_frame.arg) {
 800157c:	1fbb      	subs	r3, r7, #6
 800157e:	2b06      	cmp	r3, #6
 8001580:	d811      	bhi.n	80015a6 <work_uart_data_proc_handler+0x1d6>
 8001582:	e8df f003 	tbb	[pc, r3]
 8001586:	323d      	.short	0x323d
 8001588:	1c274853 	.word	0x1c274853
 800158c:	04          	.byte	0x04
 800158d:	00          	.byte	0x00
 800158e:	4b43      	ldr	r3, [pc, #268]	; (800169c <work_uart_data_proc_handler+0x2cc>)
 8001590:	f3bf 8f5b 	dmb	ish
 8001594:	220c      	movs	r2, #12
 8001596:	e853 1f00 	ldrex	r1, [r3]
 800159a:	e843 2000 	strex	r0, r2, [r3]
 800159e:	2800      	cmp	r0, #0
 80015a0:	d1f9      	bne.n	8001596 <work_uart_data_proc_handler+0x1c6>
 80015a2:	f3bf 8f5b 	dmb	ish
 80015a6:	f3bf 8f5b 	dmb	ish
 80015aa:	4b31      	ldr	r3, [pc, #196]	; (8001670 <work_uart_data_proc_handler+0x2a0>)
 80015ac:	2208      	movs	r2, #8
 80015ae:	e853 1f00 	ldrex	r1, [r3]
 80015b2:	e843 2000 	strex	r0, r2, [r3]
 80015b6:	2800      	cmp	r0, #0
 80015b8:	f43f af3a 	beq.w	8001430 <work_uart_data_proc_handler+0x60>
 80015bc:	e7f7      	b.n	80015ae <work_uart_data_proc_handler+0x1de>
 80015be:	4b37      	ldr	r3, [pc, #220]	; (800169c <work_uart_data_proc_handler+0x2cc>)
 80015c0:	f3bf 8f5b 	dmb	ish
 80015c4:	220b      	movs	r2, #11
 80015c6:	e853 1f00 	ldrex	r1, [r3]
 80015ca:	e843 2000 	strex	r0, r2, [r3]
 80015ce:	2800      	cmp	r0, #0
 80015d0:	d0e7      	beq.n	80015a2 <work_uart_data_proc_handler+0x1d2>
 80015d2:	e7f8      	b.n	80015c6 <work_uart_data_proc_handler+0x1f6>
 80015d4:	4b31      	ldr	r3, [pc, #196]	; (800169c <work_uart_data_proc_handler+0x2cc>)
 80015d6:	f3bf 8f5b 	dmb	ish
 80015da:	220a      	movs	r2, #10
 80015dc:	e853 1f00 	ldrex	r1, [r3]
 80015e0:	e843 2000 	strex	r0, r2, [r3]
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d0dc      	beq.n	80015a2 <work_uart_data_proc_handler+0x1d2>
 80015e8:	e7f8      	b.n	80015dc <work_uart_data_proc_handler+0x20c>
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <work_uart_data_proc_handler+0x2cc>)
 80015ec:	f3bf 8f5b 	dmb	ish
 80015f0:	2207      	movs	r2, #7
 80015f2:	e853 1f00 	ldrex	r1, [r3]
 80015f6:	e843 2000 	strex	r0, r2, [r3]
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d0d1      	beq.n	80015a2 <work_uart_data_proc_handler+0x1d2>
 80015fe:	e7f8      	b.n	80015f2 <work_uart_data_proc_handler+0x222>
 8001600:	4b26      	ldr	r3, [pc, #152]	; (800169c <work_uart_data_proc_handler+0x2cc>)
 8001602:	f3bf 8f5b 	dmb	ish
 8001606:	2206      	movs	r2, #6
 8001608:	e853 1f00 	ldrex	r1, [r3]
 800160c:	e843 2000 	strex	r0, r2, [r3]
 8001610:	2800      	cmp	r0, #0
 8001612:	d0c6      	beq.n	80015a2 <work_uart_data_proc_handler+0x1d2>
 8001614:	e7f8      	b.n	8001608 <work_uart_data_proc_handler+0x238>
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <work_uart_data_proc_handler+0x2cc>)
 8001618:	f3bf 8f5b 	dmb	ish
 800161c:	2209      	movs	r2, #9
 800161e:	e853 1f00 	ldrex	r1, [r3]
 8001622:	e843 2000 	strex	r0, r2, [r3]
 8001626:	2800      	cmp	r0, #0
 8001628:	d0bb      	beq.n	80015a2 <work_uart_data_proc_handler+0x1d2>
 800162a:	e7f8      	b.n	800161e <work_uart_data_proc_handler+0x24e>
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <work_uart_data_proc_handler+0x2cc>)
 800162e:	f3bf 8f5b 	dmb	ish
 8001632:	2208      	movs	r2, #8
 8001634:	e853 1f00 	ldrex	r1, [r3]
 8001638:	e843 2000 	strex	r0, r2, [r3]
 800163c:	2800      	cmp	r0, #0
 800163e:	d0b0      	beq.n	80015a2 <work_uart_data_proc_handler+0x1d2>
 8001640:	e7f8      	b.n	8001634 <work_uart_data_proc_handler+0x264>
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <work_uart_data_proc_handler+0x2a0>)
 8001644:	f3bf 8f5b 	dmb	ish
 8001648:	2200      	movs	r2, #0
 800164a:	e853 1f00 	ldrex	r1, [r3]
 800164e:	e843 2000 	strex	r0, r2, [r3]
 8001652:	2800      	cmp	r0, #0
 8001654:	f43f aeec 	beq.w	8001430 <work_uart_data_proc_handler+0x60>
 8001658:	e7f7      	b.n	800164a <work_uart_data_proc_handler+0x27a>
 800165a:	bf00      	nop
 800165c:	0800be90 	.word	0x0800be90
 8001660:	20000844 	.word	0x20000844
 8001664:	0800be98 	.word	0x0800be98
 8001668:	0800be1c 	.word	0x0800be1c
 800166c:	0800be9c 	.word	0x0800be9c
 8001670:	20000150 	.word	0x20000150
 8001674:	200007b8 	.word	0x200007b8
 8001678:	0800bea0 	.word	0x0800bea0
 800167c:	20000154 	.word	0x20000154
 8001680:	0800bea8 	.word	0x0800bea8
 8001684:	0800bed8 	.word	0x0800bed8
 8001688:	0800bee0 	.word	0x0800bee0
 800168c:	0800bee8 	.word	0x0800bee8
 8001690:	0800bef0 	.word	0x0800bef0
 8001694:	20000158 	.word	0x20000158
 8001698:	0800bf00 	.word	0x0800bf00
 800169c:	2000015c 	.word	0x2000015c

080016a0 <common_task>:


_Noreturn void common_task(void)
{
 80016a0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80016a4:	b087      	sub	sp, #28
    volatile int32_t ret = 0;
 80016a6:	2300      	movs	r3, #0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80016a8:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8001934 <common_task+0x294>
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	f3bf 8f5b 	dmb	ish
 80016b2:	f8d9 2000 	ldr.w	r2, [r9]
 80016b6:	f3bf 8f5b 	dmb	ish
    struct lora_modem_config lora_cfg = {
 80016ba:	f88d 300c 	strb.w	r3, [sp, #12]
 80016be:	4b94      	ldr	r3, [pc, #592]	; (8001910 <common_task+0x270>)
 80016c0:	9202      	str	r2, [sp, #8]
 80016c2:	f3bf 8f5b 	dmb	ish
 80016c6:	6819      	ldr	r1, [r3, #0]
 80016c8:	4a92      	ldr	r2, [pc, #584]	; (8001914 <common_task+0x274>)
 80016ca:	f3bf 8f5b 	dmb	ish
 80016ce:	2301      	movs	r3, #1
 80016d0:	f88d 300e 	strb.w	r3, [sp, #14]
 80016d4:	2314      	movs	r3, #20
      .tx = false,
      .frequency = atomic_get(&atomic_freq),
      .bandwidth = BW_125_KHZ,
      .datarate = atomic_get(&atomic_sf),
 80016d6:	f88d 100d 	strb.w	r1, [sp, #13]
    struct lora_modem_config lora_cfg = {
 80016da:	9204      	str	r2, [sp, #16]
 80016dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 80016e0:	488d      	ldr	r0, [pc, #564]	; (8001918 <common_task+0x278>)
 80016e2:	f006 fe27 	bl	8008334 <z_device_is_ready>
    /**
     * Radio initialization area begin
     * */
    /* Init radio */
    lora_dev = DEVICE_DT_GET(DEFAULT_RADIO_NODE);
    if (!device_is_ready(lora_dev)) {
 80016e6:	2800      	cmp	r0, #0
 80016e8:	f000 80f7 	beq.w	80018da <common_task+0x23a>
	return api->config(dev, config);
 80016ec:	4f8a      	ldr	r7, [pc, #552]	; (8001918 <common_task+0x278>)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	a902      	add	r1, sp, #8
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4638      	mov	r0, r7
 80016f6:	4798      	blx	r3
        LOG_DBG("Device not ready: %s", lora_dev->name);
        k_sleep(K_FOREVER);
    }

    ret = lora_config(lora_dev, &lora_cfg);
 80016f8:	9001      	str	r0, [sp, #4]
    if (ret < 0) {
 80016fa:	9b01      	ldr	r3, [sp, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f2c0 80fa 	blt.w	80018f6 <common_task+0x256>
    * */

    /**
     * UART initialization area begin
     * */
    k_work_init(&work_uart_data_proc, work_uart_data_proc_handler);
 8001702:	4986      	ldr	r1, [pc, #536]	; (800191c <common_task+0x27c>)
 8001704:	4886      	ldr	r0, [pc, #536]	; (8001920 <common_task+0x280>)
 8001706:	f007 fa2f 	bl	8008b68 <k_work_init>
 800170a:	4886      	ldr	r0, [pc, #536]	; (8001924 <common_task+0x284>)
 800170c:	f006 fdde 	bl	80082cc <z_impl_device_get_binding>
 8001710:	4683      	mov	fp, r0
 8001712:	f006 fe0f 	bl	8008334 <z_device_is_ready>

    /* Init UART*/
    uart_dev = device_get_binding(CURRENT_UART_DEVICE);
    if (!device_is_ready(uart_dev)) {
 8001716:	2800      	cmp	r0, #0
 8001718:	f000 80e6 	beq.w	80018e8 <common_task+0x248>
	if (api->callback_set == NULL) {
 800171c:	f8db 3008 	ldr.w	r3, [fp, #8]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	b11b      	cbz	r3, 800172c <common_task+0x8c>
	return api->callback_set(dev, callback, user_data);
 8001724:	4980      	ldr	r1, [pc, #512]	; (8001928 <common_task+0x288>)
 8001726:	2200      	movs	r2, #0
 8001728:	4658      	mov	r0, fp
 800172a:	4798      	blx	r3
 800172c:	4c7f      	ldr	r4, [pc, #508]	; (800192c <common_task+0x28c>)
                break;

            /* For abort PER measurement
             * After execution this case will be started receive */
            case STATE_STOP:
                stop_session(lora_dev, uart_dev);
 800172e:	4d7a      	ldr	r5, [pc, #488]	; (8001918 <common_task+0x278>)
	return api->send(dev, data, data_len);
 8001730:	f8df a204 	ldr.w	sl, [pc, #516]	; 8001938 <common_task+0x298>
	return api->recv_async(dev, cb, error_timeout_cb);
 8001734:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800193c <common_task+0x29c>
 8001738:	f3bf 8f5b 	dmb	ish
 800173c:	6822      	ldr	r2, [r4, #0]
 800173e:	f3bf 8f5b 	dmb	ish
        switch (atomic_get(&atomic_cur_state)) {
 8001742:	3a01      	subs	r2, #1
 8001744:	2a08      	cmp	r2, #8
 8001746:	f200 80dd 	bhi.w	8001904 <common_task+0x264>
 800174a:	e8df f002 	tbb	[pc, r2]
 800174e:	9fb3      	.short	0x9fb3
 8001750:	41536a7a 	.word	0x41536a7a
 8001754:	172f      	.short	0x172f
 8001756:	05          	.byte	0x05
 8001757:	00          	.byte	0x00
                stop_session(lora_dev, uart_dev);
 8001758:	4659      	mov	r1, fp
 800175a:	4628      	mov	r0, r5
 800175c:	f7ff fdda 	bl	8001314 <stop_session>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001760:	f3bf 8f5b 	dmb	ish
 8001764:	2302      	movs	r3, #2
 8001766:	e854 2f00 	ldrex	r2, [r4]
 800176a:	2a09      	cmp	r2, #9
 800176c:	d103      	bne.n	8001776 <common_task+0xd6>
 800176e:	e844 3100 	strex	r1, r3, [r4]
 8001772:	2900      	cmp	r1, #0
 8001774:	d1f7      	bne.n	8001766 <common_task+0xc6>
 8001776:	f3bf 8f5b 	dmb	ish
 800177a:	e7dd      	b.n	8001738 <common_task+0x98>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800177c:	4b64      	ldr	r3, [pc, #400]	; (8001910 <common_task+0x270>)
 800177e:	f3bf 8f5b 	dmb	ish
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	f3bf 8f5b 	dmb	ish
                change_modem_datarate(lora_dev, &lora_cfg, atomic_get(&atomic_sf), uart_dev);
 8001788:	465b      	mov	r3, fp
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	a902      	add	r1, sp, #8
 800178e:	4628      	mov	r0, r5
 8001790:	f7ff fc28 	bl	8000fe4 <change_modem_datarate>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001794:	f3bf 8f5b 	dmb	ish
 8001798:	2302      	movs	r3, #2
 800179a:	e854 2f00 	ldrex	r2, [r4]
 800179e:	2a08      	cmp	r2, #8
 80017a0:	d1e9      	bne.n	8001776 <common_task+0xd6>
 80017a2:	e844 3100 	strex	r1, r3, [r4]
 80017a6:	2900      	cmp	r1, #0
 80017a8:	d0e5      	beq.n	8001776 <common_task+0xd6>
 80017aa:	e7f6      	b.n	800179a <common_task+0xfa>
                incr_decr_modem_frequency(lora_dev, &lora_cfg, false, uart_dev);
 80017ac:	465b      	mov	r3, fp
 80017ae:	2200      	movs	r2, #0
 80017b0:	a902      	add	r1, sp, #8
 80017b2:	4628      	mov	r0, r5
 80017b4:	f7ff fcbe 	bl	8001134 <incr_decr_modem_frequency>
 80017b8:	f3bf 8f5b 	dmb	ish
 80017bc:	2302      	movs	r3, #2
 80017be:	e854 2f00 	ldrex	r2, [r4]
 80017c2:	2a07      	cmp	r2, #7
 80017c4:	d1d7      	bne.n	8001776 <common_task+0xd6>
 80017c6:	e844 3100 	strex	r1, r3, [r4]
 80017ca:	2900      	cmp	r1, #0
 80017cc:	d0d3      	beq.n	8001776 <common_task+0xd6>
 80017ce:	e7f6      	b.n	80017be <common_task+0x11e>
                incr_decr_modem_frequency(lora_dev, &lora_cfg, true, uart_dev);
 80017d0:	465b      	mov	r3, fp
 80017d2:	2201      	movs	r2, #1
 80017d4:	a902      	add	r1, sp, #8
 80017d6:	4628      	mov	r0, r5
 80017d8:	f7ff fcac 	bl	8001134 <incr_decr_modem_frequency>
 80017dc:	f3bf 8f5b 	dmb	ish
 80017e0:	2302      	movs	r3, #2
 80017e2:	e854 2f00 	ldrex	r2, [r4]
 80017e6:	2a06      	cmp	r2, #6
 80017e8:	d1c5      	bne.n	8001776 <common_task+0xd6>
 80017ea:	e844 3100 	strex	r1, r3, [r4]
 80017ee:	2900      	cmp	r1, #0
 80017f0:	d0c1      	beq.n	8001776 <common_task+0xd6>
 80017f2:	e7f6      	b.n	80017e2 <common_task+0x142>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80017f4:	f3bf 8f5b 	dmb	ish
                change_modem_frequency(lora_dev, &lora_cfg, atomic_get(&atomic_freq), uart_dev);
 80017f8:	465b      	mov	r3, fp
 80017fa:	f8d9 2000 	ldr.w	r2, [r9]
 80017fe:	f3bf 8f5b 	dmb	ish
 8001802:	a902      	add	r1, sp, #8
 8001804:	4628      	mov	r0, r5
 8001806:	f7ff fc3f 	bl	8001088 <change_modem_frequency>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800180a:	f3bf 8f5b 	dmb	ish
 800180e:	2302      	movs	r3, #2
 8001810:	e854 2f00 	ldrex	r2, [r4]
 8001814:	2a05      	cmp	r2, #5
 8001816:	d1ae      	bne.n	8001776 <common_task+0xd6>
 8001818:	e844 3100 	strex	r1, r3, [r4]
 800181c:	2900      	cmp	r1, #0
 800181e:	d0aa      	beq.n	8001776 <common_task+0xd6>
 8001820:	e7f6      	b.n	8001810 <common_task+0x170>
                print_modem_cfg(uart_dev, &lora_cfg);
 8001822:	a902      	add	r1, sp, #8
 8001824:	4658      	mov	r0, fp
 8001826:	f7ff f90f 	bl	8000a48 <print_modem_cfg>
 800182a:	f3bf 8f5b 	dmb	ish
 800182e:	2302      	movs	r3, #2
 8001830:	e854 2f00 	ldrex	r2, [r4]
 8001834:	2a04      	cmp	r2, #4
 8001836:	d19e      	bne.n	8001776 <common_task+0xd6>
 8001838:	e844 3100 	strex	r1, r3, [r4]
 800183c:	2900      	cmp	r1, #0
 800183e:	d09a      	beq.n	8001776 <common_task+0xd6>
 8001840:	e7f6      	b.n	8001830 <common_task+0x190>
	return api->config(dev, config);
 8001842:	68be      	ldr	r6, [r7, #8]
                lora_cfg.tx = true;
 8001844:	2201      	movs	r2, #1
 8001846:	6833      	ldr	r3, [r6, #0]
 8001848:	f88d 2015 	strb.w	r2, [sp, #21]
 800184c:	a902      	add	r1, sp, #8
 800184e:	4628      	mov	r0, r5
 8001850:	4798      	blx	r3
 8001852:	2100      	movs	r1, #0
 8001854:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001858:	f007 fe4c 	bl	80094f4 <z_impl_k_sleep>
	return api->send(dev, data, data_len);
 800185c:	6873      	ldr	r3, [r6, #4]
 800185e:	2204      	movs	r2, #4
 8001860:	4651      	mov	r1, sl
 8001862:	4628      	mov	r0, r5
 8001864:	4798      	blx	r3
	return api->recv_async(dev, cb, error_timeout_cb);
 8001866:	6933      	ldr	r3, [r6, #16]
 8001868:	4931      	ldr	r1, [pc, #196]	; (8001930 <common_task+0x290>)
 800186a:	4642      	mov	r2, r8
 800186c:	4628      	mov	r0, r5
 800186e:	4798      	blx	r3
 8001870:	f3bf 8f5b 	dmb	ish
 8001874:	2302      	movs	r3, #2
 8001876:	e854 2f00 	ldrex	r2, [r4]
 800187a:	2a03      	cmp	r2, #3
 800187c:	f47f af7b 	bne.w	8001776 <common_task+0xd6>
 8001880:	e844 3100 	strex	r1, r3, [r4]
 8001884:	2900      	cmp	r1, #0
 8001886:	f43f af76 	beq.w	8001776 <common_task+0xd6>
 800188a:	e7f4      	b.n	8001876 <common_task+0x1d6>
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4928      	ldr	r1, [pc, #160]	; (8001930 <common_task+0x290>)
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	4642      	mov	r2, r8
 8001894:	4628      	mov	r0, r5
 8001896:	4798      	blx	r3
 8001898:	f3bf 8f5b 	dmb	ish
 800189c:	2300      	movs	r3, #0
 800189e:	e854 2f00 	ldrex	r2, [r4]
 80018a2:	2a02      	cmp	r2, #2
 80018a4:	f47f af67 	bne.w	8001776 <common_task+0xd6>
 80018a8:	e844 3100 	strex	r1, r3, [r4]
 80018ac:	2900      	cmp	r1, #0
 80018ae:	f43f af62 	beq.w	8001776 <common_task+0xd6>
 80018b2:	e7f4      	b.n	800189e <common_task+0x1fe>
                per_meas(lora_dev, &lora_cfg, uart_dev);
 80018b4:	465a      	mov	r2, fp
 80018b6:	a902      	add	r1, sp, #8
 80018b8:	4628      	mov	r0, r5
 80018ba:	f7fe fe45 	bl	8000548 <per_meas>
 80018be:	f3bf 8f5b 	dmb	ish
 80018c2:	2302      	movs	r3, #2
 80018c4:	e854 2f00 	ldrex	r2, [r4]
 80018c8:	2a01      	cmp	r2, #1
 80018ca:	f47f af54 	bne.w	8001776 <common_task+0xd6>
 80018ce:	e844 3100 	strex	r1, r3, [r4]
 80018d2:	2900      	cmp	r1, #0
 80018d4:	f43f af4f 	beq.w	8001776 <common_task+0xd6>
 80018d8:	e7f4      	b.n	80018c4 <common_task+0x224>
 80018da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e2:	f007 fe07 	bl	80094f4 <z_impl_k_sleep>
 80018e6:	e701      	b.n	80016ec <common_task+0x4c>
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f0:	f007 fe00 	bl	80094f4 <z_impl_k_sleep>
 80018f4:	e712      	b.n	800171c <common_task+0x7c>
 80018f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018fe:	f007 fdf9 	bl	80094f4 <z_impl_k_sleep>
 8001902:	e6fe      	b.n	8001702 <common_task+0x62>
 8001904:	2100      	movs	r1, #0
 8001906:	2064      	movs	r0, #100	; 0x64
 8001908:	f007 fdf4 	bl	80094f4 <z_impl_k_sleep>
                atomic_cas(&atomic_cur_state, STATE_STOP, STATE_RECV);
                break;

            default:
                k_sleep(K_MSEC(10));
                break;
 800190c:	e714      	b.n	8001738 <common_task+0x98>
 800190e:	bf00      	nop
 8001910:	2000015c 	.word	0x2000015c
 8001914:	0104000c 	.word	0x0104000c
 8001918:	0800b8ac 	.word	0x0800b8ac
 800191c:	080013d1 	.word	0x080013d1
 8001920:	20000884 	.word	0x20000884
 8001924:	0800be90 	.word	0x0800be90
 8001928:	08001395 	.word	0x08001395
 800192c:	20000150 	.word	0x20000150
 8001930:	08000a09 	.word	0x08000a09
 8001934:	20000158 	.word	0x20000158
 8001938:	20000840 	.word	0x20000840
 800193c:	08000a45 	.word	0x08000a45

08001940 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8001940:	468c      	mov	ip, r1
 8001942:	4604      	mov	r4, r0
 8001944:	4611      	mov	r1, r2
 8001946:	b508      	push	{r3, lr}
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8001948:	461a      	mov	r2, r3
 800194a:	4660      	mov	r0, ip
 800194c:	47a0      	blx	r4
	return z_impl_z_current_get();
 800194e:	f007 fde9 	bl	8009524 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8001952:	f000 fb61 	bl	8002018 <z_impl_k_thread_abort>
 8001956:	bf00      	nop

08001958 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop

0800195c <stm32l4_init>:
	__asm__ volatile(
 800195c:	f04f 0210 	mov.w	r2, #16
 8001960:	f3ef 8311 	mrs	r3, BASEPRI
 8001964:	f382 8812 	msr	BASEPRI_MAX, r2
 8001968:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800196c:	f383 8811 	msr	BASEPRI, r3
 8001970:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8001974:	4b02      	ldr	r3, [pc, #8]	; (8001980 <stm32l4_init+0x24>)
 8001976:	4a03      	ldr	r2, [pc, #12]	; (8001984 <stm32l4_init+0x28>)
 8001978:	601a      	str	r2, [r3, #0]

	return 0;
}
 800197a:	2000      	movs	r0, #0
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	2000031c 	.word	0x2000031c
 8001984:	003d0900 	.word	0x003d0900

08001988 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8001988:	2000      	movs	r0, #0
 800198a:	4770      	bx	lr

0800198c <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 800198c:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 800198e:	f000 f815 	bl	80019bc <__do_global_ctors_aux>
	__do_init_array_aux();
}
 8001992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__do_init_array_aux();
 8001996:	f000 b801 	b.w	800199c <__do_init_array_aux>
 800199a:	bf00      	nop

0800199c <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
 800199c:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
 800199e:	4c05      	ldr	r4, [pc, #20]	; (80019b4 <__do_init_array_aux+0x18>)
 80019a0:	4d05      	ldr	r5, [pc, #20]	; (80019b8 <__do_init_array_aux+0x1c>)
 80019a2:	42ac      	cmp	r4, r5
 80019a4:	d204      	bcs.n	80019b0 <__do_init_array_aux+0x14>
		func < __init_array_end;
		func++) {
		(*func)();
 80019a6:	f854 3b04 	ldr.w	r3, [r4], #4
 80019aa:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 80019ac:	42ac      	cmp	r4, r5
 80019ae:	d3fa      	bcc.n	80019a6 <__do_init_array_aux+0xa>
	}
}
 80019b0:	bd38      	pop	{r3, r4, r5, pc}
 80019b2:	bf00      	nop
 80019b4:	0800bb74 	.word	0x0800bb74
 80019b8:	0800bb74 	.word	0x0800bb74

080019bc <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
 80019bc:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 80019be:	4d06      	ldr	r5, [pc, #24]	; (80019d8 <__do_global_ctors_aux+0x1c>)
 80019c0:	682c      	ldr	r4, [r5, #0]

	while (nCtors >= 1U) {
 80019c2:	b144      	cbz	r4, 80019d6 <__do_global_ctors_aux+0x1a>
 80019c4:	1c63      	adds	r3, r4, #1
 80019c6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		__CTOR_LIST__[nCtors--]();
 80019ca:	3c01      	subs	r4, #1
 80019cc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80019d0:	4798      	blx	r3
	while (nCtors >= 1U) {
 80019d2:	2c00      	cmp	r4, #0
 80019d4:	d1f9      	bne.n	80019ca <__do_global_ctors_aux+0xe>
	}
}
 80019d6:	bd38      	pop	{r3, r4, r5, pc}
 80019d8:	0800bb6c 	.word	0x0800bb6c

080019dc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 80019dc:	4901      	ldr	r1, [pc, #4]	; (80019e4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 80019de:	2210      	movs	r2, #16
	str	r2, [r1]
 80019e0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 80019e2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 80019e4:	e000ed10 	.word	0xe000ed10

080019e8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 80019e8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 80019ea:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 80019ec:	f380 8811 	msr	BASEPRI, r0
	isb
 80019f0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 80019f4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 80019f8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 80019fa:	b662      	cpsie	i
	isb
 80019fc:	f3bf 8f6f 	isb	sy

	bx	lr
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop

08001a04 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8001a04:	f006 bcb6 	b.w	8008374 <z_fatal_error>

08001a08 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8001a08:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8001a0a:	6800      	ldr	r0, [r0, #0]
 8001a0c:	f006 bcb2 	b.w	8008374 <z_fatal_error>

08001a10 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8001a10:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db08      	blt.n	8001a28 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	4905      	ldr	r1, [pc, #20]	; (8001a2c <arch_irq_enable+0x1c>)
 8001a18:	095b      	lsrs	r3, r3, #5
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f000 001f 	and.w	r0, r0, #31
 8001a20:	fa02 f000 	lsl.w	r0, r2, r0
 8001a24:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 8001a30:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0d      	blt.n	8001a52 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	4906      	ldr	r1, [pc, #24]	; (8001a54 <arch_irq_disable+0x24>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	3320      	adds	r3, #32
 8001a3e:	f000 001f 	and.w	r0, r0, #31
 8001a42:	fa02 f000 	lsl.w	r0, r2, r0
 8001a46:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a4e:	f3bf 8f6f 	isb	sy
}
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100

08001a58 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <arch_irq_is_enabled+0x18>)
 8001a5a:	0942      	lsrs	r2, r0, #5
 8001a5c:	f000 001f 	and.w	r0, r0, #31
 8001a60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a64:	2301      	movs	r3, #1
 8001a66:	fa03 f000 	lsl.w	r0, r3, r0
}
 8001a6a:	4010      	ands	r0, r2
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8001a74:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8001a76:	b243      	sxtb	r3, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	0109      	lsls	r1, r1, #4
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	b2c9      	uxtb	r1, r1
  if ((int32_t)(IRQn) >= 0)
 8001a7e:	db06      	blt.n	8001a8e <z_arm_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a84:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001a88:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8001a8c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <z_arm_irq_priority_set+0x28>)
 8001a90:	f000 000f 	and.w	r0, r0, #15
 8001a94:	4403      	add	r3, r0
 8001a96:	7619      	strb	r1, [r3, #24]
}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ecfc 	.word	0xe000ecfc

08001aa0 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f7ff bfae 	b.w	8001a04 <z_arm_fatal_error>

08001aa8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8001aa8:	b508      	push	{r3, lr}
	handler();
 8001aaa:	f000 f805 	bl	8001ab8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8001aae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8001ab2:	f000 b977 	b.w	8001da4 <z_arm_exc_exit>
 8001ab6:	bf00      	nop

08001ab8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8001ab8:	bf30      	wfi
    b z_SysNmiOnReset
 8001aba:	f7ff bffd 	b.w	8001ab8 <z_SysNmiOnReset>
 8001abe:	bf00      	nop

08001ac0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001ac0:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8001ac2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <z_arm_prep_c+0x58>)
 8001ac6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001aca:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001acc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ad0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8001ad4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8001ad8:	4910      	ldr	r1, [pc, #64]	; (8001b1c <z_arm_prep_c+0x5c>)
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8001ada:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 8001ae2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8001ae6:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 8001aea:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8001af2:	6348      	str	r0, [r1, #52]	; 0x34
  __ASM volatile ("dsb 0xF":::"memory");
 8001af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001af8:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 8001afc:	2300      	movs	r3, #0
 8001afe:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8001b02:	f006 fc71 	bl	80083e8 <z_bss_zero>
	z_data_copy();
 8001b06:	f007 fdd7 	bl	80096b8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8001b0a:	f000 fa63 	bl	8001fd4 <z_arm_interrupt_init>
	z_cstart();
 8001b0e:	f006 fc75 	bl	80083fc <z_cstart>
 8001b12:	bf00      	nop
 8001b14:	08000000 	.word	0x08000000
 8001b18:	e000ed00 	.word	0xe000ed00
 8001b1c:	e000ef00 	.word	0xe000ef00

08001b20 <arch_swap>:
 *
 * On ARMv6-M, the intlock key is represented by the PRIMASK register,
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
 8001b20:	b410      	push	{r4}
	/* store off key and return value */
	_current->arch.basepri = key;
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8001b24:	4c0a      	ldr	r4, [pc, #40]	; (8001b50 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8001b26:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8001b28:	6824      	ldr	r4, [r4, #0]

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001b2a:	490a      	ldr	r1, [pc, #40]	; (8001b54 <arch_swap+0x34>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8001b2c:	e9c3 041e 	strd	r0, r4, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001b30:	684b      	ldr	r3, [r1, #4]
 8001b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b36:	2000      	movs	r0, #0
 8001b38:	604b      	str	r3, [r1, #4]
 8001b3a:	f380 8811 	msr	BASEPRI, r0
 8001b3e:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8001b42:	6893      	ldr	r3, [r2, #8]
}
 8001b44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b48:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8001b4a:	4770      	bx	lr
 8001b4c:	20000de0 	.word	0x20000de0
 8001b50:	0800c484 	.word	0x0800c484
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8001b58:	4921      	ldr	r1, [pc, #132]	; (8001be0 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8001b5a:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
 8001b5c:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8001b60:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8001b64:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8001b66:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8001b6a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 8001b6e:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
 8001b72:	d103      	bne.n	8001b7c <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8001b74:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
 8001b78:	ec80 8a10 	vstmia	r0, {s16-s31}

08001b7c <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001b7c:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8001b7e:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8001b82:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8001b86:	4f17      	ldr	r7, [pc, #92]	; (8001be4 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8001b88:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8001b8c:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8001b8e:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8001b90:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
 8001b92:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8001b96:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8001b98:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8001b9a:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8001b9c:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 8001ba0:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
 8001ba4:	d003      	beq.n	8001bae <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 8001ba6:	2300      	movs	r3, #0
    vmsr fpscr, r3
 8001ba8:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
 8001bac:	e003      	b.n	8001bb6 <in_fp_endif>

08001bae <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8001bae:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
 8001bb2:	ec90 8a10 	vldmia	r0, {s16-s31}

08001bb6 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 8001bb6:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
 8001bba:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 8001bbe:	f383 8814 	msr	CONTROL, r3
    isb
 8001bc2:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8001bc6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8001bc8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8001bca:	f000 fa47 	bl	800205c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8001bce:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8001bd2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8001bd6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8001bda:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8001bde:	4770      	bx	lr
    ldr r1, =_kernel
 8001be0:	20000de0 	.word	0x20000de0
    ldr v4, =_SCS_ICSR
 8001be4:	e000ed04 	.word	0xe000ed04

08001be8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8001be8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8001bec:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8001bee:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8001bf2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8001bf6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8001bf8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8001bfc:	2902      	cmp	r1, #2
    beq _oops
 8001bfe:	d0ff      	beq.n	8001c00 <_oops>

08001c00 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8001c00:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8001c02:	f7ff ff01 	bl	8001a08 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8001c06:	bd01      	pop	{r0, pc}

08001c08 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8001c08:	7b01      	ldrb	r1, [r0, #12]
{
 8001c0a:	b410      	push	{r4}
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8001c0c:	f011 0402 	ands.w	r4, r1, #2
 8001c10:	d005      	beq.n	8001c1e <arch_new_thread+0x16>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
 8001c12:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8001c14:	3160      	adds	r1, #96	; 0x60
 8001c16:	6681      	str	r1, [r0, #104]	; 0x68
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
 8001c18:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8001c1a:	3960      	subs	r1, #96	; 0x60
 8001c1c:	66c1      	str	r1, [r0, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8001c1e:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8001c22:	9b01      	ldr	r3, [sp, #4]
 8001c24:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8001c28:	9b02      	ldr	r3, [sp, #8]
 8001c2a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8001c2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c32:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->a4 = (uint32_t)p3;
 8001c36:	9b03      	ldr	r3, [sp, #12]
 8001c38:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <arch_new_thread+0x68>)
 8001c3e:	f023 0301 	bic.w	r3, r3, #1
 8001c42:	f842 3c08 	str.w	r3, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8001c46:	2100      	movs	r1, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8001c48:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8001c4a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8001c4c:	6781      	str	r1, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
 8001c4e:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8001c52:	b92c      	cbnz	r4, 8001c60 <arch_new_thread+0x58>
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
 8001c54:	23fd      	movs	r3, #253	; 0xfd
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8001c56:	f85d 4b04 	ldr.w	r4, [sp], #4
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
 8001c5a:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
}
 8001c5e:	4770      	bx	lr
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8001c60:	f64f 5308 	movw	r3, #64776	; 0xfd08
}
 8001c64:	f85d 4b04 	ldr.w	r4, [sp], #4
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8001c68:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	08001941 	.word	0x08001941

08001c74 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * Adjust the MPU stack guard size together with the FPU
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
 8001c74:	b430      	push	{r4, r5}
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8001c76:	7b03      	ldrb	r3, [r0, #12]
		if ((thread->arch.mode &
 8001c78:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8001c7c:	079d      	lsls	r5, r3, #30
		if ((thread->arch.mode &
 8001c7e:	f002 0408 	and.w	r4, r2, #8
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8001c82:	d403      	bmi.n	8001c8c <z_arm_mpu_stack_guard_and_fpu_adjust+0x18>
 8001c84:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
 8001c88:	06c9      	lsls	r1, r1, #27
 8001c8a:	d40b      	bmi.n	8001ca4 <z_arm_mpu_stack_guard_and_fpu_adjust+0x30>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
 8001c8c:	4d16      	ldr	r5, [pc, #88]	; (8001ce8 <z_arm_mpu_stack_guard_and_fpu_adjust+0x74>)
 8001c8e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001c90:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001c94:	6369      	str	r1, [r5, #52]	; 0x34
		if ((thread->arch.mode &
 8001c96:	b1c4      	cbz	r4, 8001cca <z_arm_mpu_stack_guard_and_fpu_adjust+0x56>

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	7303      	strb	r3, [r0, #12]
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
}
 8001c9e:	bc30      	pop	{r4, r5}
		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
 8001ca0:	2080      	movs	r0, #128	; 0x80
}
 8001ca2:	4770      	bx	lr
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
 8001ca4:	4910      	ldr	r1, [pc, #64]	; (8001ce8 <z_arm_mpu_stack_guard_and_fpu_adjust+0x74>)
 8001ca6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001ca8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001cac:	634b      	str	r3, [r1, #52]	; 0x34
		if ((thread->arch.mode &
 8001cae:	b1bc      	cbz	r4, 8001ce0 <z_arm_mpu_stack_guard_and_fpu_adjust+0x6c>
				thread->stack_info.size +=
 8001cb0:	e9d0 131a 	ldrd	r1, r3, [r0, #104]	; 0x68
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8001cb4:	f022 0208 	bic.w	r2, r2, #8
				thread->stack_info.start -=
 8001cb8:	3960      	subs	r1, #96	; 0x60
				thread->stack_info.size +=
 8001cba:	3360      	adds	r3, #96	; 0x60
 8001cbc:	e9c0 131a 	strd	r1, r3, [r0, #104]	; 0x68
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8001cc0:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
}
 8001cc4:	bc30      	pop	{r4, r5}
	return MPU_GUARD_ALIGN_AND_SIZE;
 8001cc6:	2020      	movs	r0, #32
}
 8001cc8:	4770      	bx	lr
				thread->stack_info.size -=
 8001cca:	e9d0 411a 	ldrd	r4, r1, [r0, #104]	; 0x68
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8001cce:	f042 0208 	orr.w	r2, r2, #8
				thread->stack_info.start +=
 8001cd2:	3460      	adds	r4, #96	; 0x60
				thread->stack_info.size -=
 8001cd4:	3960      	subs	r1, #96	; 0x60
 8001cd6:	e9c0 411a 	strd	r4, r1, [r0, #104]	; 0x68
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8001cda:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
				thread->stack_info.start +=
 8001cde:	e7db      	b.n	8001c98 <z_arm_mpu_stack_guard_and_fpu_adjust+0x24>
	return MPU_GUARD_ALIGN_AND_SIZE;
 8001ce0:	2020      	movs	r0, #32
}
 8001ce2:	bc30      	pop	{r4, r5}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ef00 	.word	0xe000ef00

08001cec <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <z_check_thread_stack_fail+0x44>)
 8001cee:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
 8001cf0:	b1db      	cbz	r3, 8001d2a <z_check_thread_stack_fail+0x3e>
{
 8001cf2:	b410      	push	{r4}
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
 8001cf4:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8001cf8:	4602      	mov	r2, r0
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 8001cfa:	f014 0f08 	tst.w	r4, #8
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8001cfe:	6e98      	ldr	r0, [r3, #104]	; 0x68
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 8001d00:	bf14      	ite	ne
 8001d02:	2380      	movne	r3, #128	; 0x80
 8001d04:	2320      	moveq	r3, #32
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8001d06:	f112 0f16 	cmn.w	r2, #22
 8001d0a:	d008      	beq.n	8001d1e <z_check_thread_stack_fail+0x32>
 8001d0c:	1ac3      	subs	r3, r0, r3
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d903      	bls.n	8001d1a <z_check_thread_stack_fail+0x2e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8001d12:	2000      	movs	r0, #0
}
 8001d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d18:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8001d1a:	4282      	cmp	r2, r0
 8001d1c:	d2f9      	bcs.n	8001d12 <z_check_thread_stack_fail+0x26>
	return 0;
 8001d1e:	4281      	cmp	r1, r0
 8001d20:	bf28      	it	cs
 8001d22:	2000      	movcs	r0, #0
}
 8001d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d28:	4770      	bx	lr
	return 0;
 8001d2a:	4618      	mov	r0, r3
}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000de0 	.word	0x20000de0

08001d34 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8001d34:	b508      	push	{r3, lr}
 8001d36:	4614      	mov	r4, r2
 8001d38:	460d      	mov	r5, r1
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001d40:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8001d44:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001d48:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
 8001d4c:	f3bf 8f6f 	isb	sy
 8001d50:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8001d54:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <arch_switch_to_main_thread+0x44>)
 8001d56:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8001d58:	f000 f980 	bl	800205c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f385 8809 	msr	PSP, r5
 8001d62:	2100      	movs	r1, #0
 8001d64:	b663      	cpsie	if
 8001d66:	f381 8811 	msr	BASEPRI, r1
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2300      	movs	r3, #0
 8001d72:	f7ff fde5 	bl	8001940 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8001d76:	bf00      	nop
 8001d78:	20000de0 	.word	0x20000de0

08001d7c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8001d7c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8001d7e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001d82:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8001d86:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8001d8a:	4904      	ldr	r1, [pc, #16]	; (8001d9c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001d8c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8001d8e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001d90:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001d92:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8001d96:	4902      	ldr	r1, [pc, #8]	; (8001da0 <_isr_wrapper+0x24>)
	bx r1
 8001d98:	4708      	bx	r1
 8001d9a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001d9c:	0800b8c4 	.word	0x0800b8c4
	ldr r1, =z_arm_int_exit
 8001da0:	08001da5 	.word	0x08001da5

08001da4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8001da6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8001da8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8001daa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001dac:	d003      	beq.n	8001db6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8001dae:	4903      	ldr	r1, [pc, #12]	; (8001dbc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001db4:	600a      	str	r2, [r1, #0]

08001db6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8001db6:	4770      	bx	lr
	ldr r3, =_kernel
 8001db8:	20000de0 	.word	0x20000de0
	ldr r1, =_SCS_ICSR
 8001dbc:	e000ed04 	.word	0xe000ed04

08001dc0 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8001dc0:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <mem_manage_fault+0x6c>)
 8001dc4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001dc6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001dc8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8001dca:	07ad      	lsls	r5, r5, #30
{
 8001dcc:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001dce:	d503      	bpl.n	8001dd8 <mem_manage_fault+0x18>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 8001dd0:	6b5d      	ldr	r5, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8001dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dd4:	0612      	lsls	r2, r2, #24
 8001dd6:	d421      	bmi.n	8001e1c <mem_manage_fault+0x5c>
	uint32_t mmfar = -EINVAL;
 8001dd8:	f06f 0515 	mvn.w	r5, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <mem_manage_fault+0x6c>)
 8001dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8001de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de4:	06d1      	lsls	r1, r2, #27
 8001de6:	d40b      	bmi.n	8001e00 <mem_manage_fault+0x40>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001dea:	079a      	lsls	r2, r3, #30
 8001dec:	d408      	bmi.n	8001e00 <mem_manage_fault+0x40>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8001dee:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <mem_manage_fault+0x6c>)
 8001df2:	6a93      	ldr	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8001df4:	2100      	movs	r1, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8001df6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001dfa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8001dfc:	7021      	strb	r1, [r4, #0]

	return reason;
}
 8001dfe:	bd38      	pop	{r3, r4, r5, pc}
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <mem_manage_fault+0x6c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	051b      	lsls	r3, r3, #20
 8001e06:	d5f2      	bpl.n	8001dee <mem_manage_fault+0x2e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8001e08:	4601      	mov	r1, r0
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	f7ff ff6e 	bl	8001cec <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d0ec      	beq.n	8001dee <mem_manage_fault+0x2e>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001e14:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8001e18:	2002      	movs	r0, #2
 8001e1a:	e7e9      	b.n	8001df0 <mem_manage_fault+0x30>
			if (from_hard_fault != 0) {
 8001e1c:	2900      	cmp	r1, #0
 8001e1e:	d0dd      	beq.n	8001ddc <mem_manage_fault+0x1c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8001e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
 8001e28:	e7d8      	b.n	8001ddc <mem_manage_fault+0x1c>
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <bus_fault.constprop.0+0x3c>)
 8001e32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8001e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8001e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e38:	0592      	lsls	r2, r2, #22
 8001e3a:	d508      	bpl.n	8001e4e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8001e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8001e3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e40:	0412      	lsls	r2, r2, #16
 8001e42:	d504      	bpl.n	8001e4e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8001e44:	b118      	cbz	r0, 8001e4e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8001e46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <bus_fault.constprop.0+0x3c>)
 8001e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8001e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e54:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <bus_fault.constprop.0+0x3c>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8001e58:	bf58      	it	pl
 8001e5a:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001e5c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8001e5e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001e60:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8001e64:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8001e66:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8001e70:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001e72:	4b4e      	ldr	r3, [pc, #312]	; (8001fac <z_arm_fault+0x13c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
{
 8001e76:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e7c:	2500      	movs	r5, #0
 8001e7e:	f385 8811 	msr	BASEPRI, r5
 8001e82:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001e86:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
 8001e8a:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
 8001e8e:	d169      	bne.n	8001f64 <z_arm_fault+0xf4>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8001e90:	f002 040c 	and.w	r4, r2, #12
 8001e94:	2c08      	cmp	r4, #8
 8001e96:	d065      	beq.n	8001f64 <z_arm_fault+0xf4>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8001e98:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8001e9a:	bf47      	ittee	mi
 8001e9c:	460c      	movmi	r4, r1
	*nested_exc = false;
 8001e9e:	462e      	movmi	r6, r5
			ptr_esf = (z_arch_esf_t *)msp;
 8001ea0:	4604      	movpl	r4, r0
			*nested_exc = true;
 8001ea2:	2601      	movpl	r6, #1
	*recoverable = false;
 8001ea4:	2200      	movs	r2, #0
	switch (fault) {
 8001ea6:	3b03      	subs	r3, #3
	*recoverable = false;
 8001ea8:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d866      	bhi.n	8001f7e <z_arm_fault+0x10e>
 8001eb0:	e8df f003 	tbb	[pc, r3]
 8001eb4:	0225313b 	.word	0x0225313b
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001eb8:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <z_arm_fault+0x13c>)
		reason = usage_fault(esf);
 8001eba:	2500      	movs	r5, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8001ebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8001ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8001ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eca:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8001ece:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8001ed4:	2268      	movs	r2, #104	; 0x68
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	a802      	add	r0, sp, #8
 8001eda:	f009 f981 	bl	800b1e0 <memcpy>
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8001ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (nested_exc) {
 8001ee0:	2e00      	cmp	r6, #0
 8001ee2:	d042      	beq.n	8001f6a <z_arm_fault+0xfa>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8001ee4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ee8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001eec:	b90a      	cbnz	r2, 8001ef2 <z_arm_fault+0x82>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	9309      	str	r3, [sp, #36]	; 0x24
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
 8001ef2:	a902      	add	r1, sp, #8
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	f7ff fd85 	bl	8001a04 <z_arm_fatal_error>
}
 8001efa:	b01c      	add	sp, #112	; 0x70
 8001efc:	bd70      	pop	{r4, r5, r6, pc}
		reason = bus_fault(esf, 0, recoverable);
 8001efe:	f10d 0107 	add.w	r1, sp, #7
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff ff94 	bl	8001e30 <bus_fault.constprop.0>
	if (recoverable) {
 8001f08:	f89d 3007 	ldrb.w	r3, [sp, #7]
		reason = bus_fault(esf, 0, recoverable);
 8001f0c:	4605      	mov	r5, r0
	if (recoverable) {
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0e0      	beq.n	8001ed4 <z_arm_fault+0x64>
}
 8001f12:	b01c      	add	sp, #112	; 0x70
 8001f14:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 8001f16:	f10d 0207 	add.w	r2, sp, #7
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff ff4f 	bl	8001dc0 <mem_manage_fault>
	if (recoverable) {
 8001f22:	f89d 3007 	ldrb.w	r3, [sp, #7]
		reason = mem_manage_fault(esf, 0, recoverable);
 8001f26:	4605      	mov	r5, r0
		break;
 8001f28:	e7f1      	b.n	8001f0e <z_arm_fault+0x9e>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <z_arm_fault+0x13c>)
 8001f2c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001f2e:	f015 0502 	ands.w	r5, r5, #2
 8001f32:	d124      	bne.n	8001f7e <z_arm_fault+0x10e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8001f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f36:	2a00      	cmp	r2, #0
 8001f38:	dbcc      	blt.n	8001ed4 <z_arm_fault+0x64>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8001f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3c:	0052      	lsls	r2, r2, #1
 8001f3e:	d5c9      	bpl.n	8001ed4 <z_arm_fault+0x64>
	uint16_t fault_insn = *(ret_addr - 1);
 8001f40:	69a2      	ldr	r2, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001f42:	f832 1c02 	ldrh.w	r1, [r2, #-2]
 8001f46:	f64d 7202 	movw	r2, #57090	; 0xdf02
 8001f4a:	4291      	cmp	r1, r2
 8001f4c:	d023      	beq.n	8001f96 <z_arm_fault+0x126>
		} else if (SCB_MMFSR != 0) {
 8001f4e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001f52:	b9b2      	cbnz	r2, 8001f82 <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
 8001f54:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001f58:	b9fa      	cbnz	r2, 8001f9a <z_arm_fault+0x12a>
		} else if (SCB_UFSR != 0) {
 8001f5a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	2a00      	cmp	r2, #0
 8001f60:	d0b8      	beq.n	8001ed4 <z_arm_fault+0x64>
 8001f62:	e7ab      	b.n	8001ebc <z_arm_fault+0x4c>
	*nested_exc = false;
 8001f64:	462e      	mov	r6, r5
		return NULL;
 8001f66:	462c      	mov	r4, r5
 8001f68:	e79c      	b.n	8001ea4 <z_arm_fault+0x34>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001f6a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
	z_arm_fatal_error(reason, &esf_copy);
 8001f72:	a902      	add	r1, sp, #8
 8001f74:	4628      	mov	r0, r5
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001f76:	9309      	str	r3, [sp, #36]	; 0x24
	z_arm_fatal_error(reason, &esf_copy);
 8001f78:	f7ff fd44 	bl	8001a04 <z_arm_fatal_error>
 8001f7c:	e7bd      	b.n	8001efa <z_arm_fault+0x8a>
	switch (fault) {
 8001f7e:	2500      	movs	r5, #0
 8001f80:	e7a8      	b.n	8001ed4 <z_arm_fault+0x64>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001f82:	f10d 0207 	add.w	r2, sp, #7
 8001f86:	2101      	movs	r1, #1
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff ff19 	bl	8001dc0 <mem_manage_fault>
	if (recoverable) {
 8001f8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reason = mem_manage_fault(esf, 1, recoverable);
 8001f92:	4605      	mov	r5, r0
 8001f94:	e7bb      	b.n	8001f0e <z_arm_fault+0x9e>
			reason = esf->basic.r0;
 8001f96:	6825      	ldr	r5, [r4, #0]
 8001f98:	e79c      	b.n	8001ed4 <z_arm_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
 8001f9a:	f10d 0107 	add.w	r1, sp, #7
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff ff46 	bl	8001e30 <bus_fault.constprop.0>
	if (recoverable) {
 8001fa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reason = bus_fault(esf, 1, recoverable);
 8001fa8:	4605      	mov	r5, r0
 8001faa:	e7b0      	b.n	8001f0e <z_arm_fault+0x9e>
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001fb0:	4a02      	ldr	r2, [pc, #8]	; (8001fbc <z_arm_fault_init+0xc>)
 8001fb2:	6953      	ldr	r3, [r2, #20]
 8001fb4:	f043 0310 	orr.w	r3, r3, #16
 8001fb8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001fc0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001fc4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8001fc8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8001fca:	4672      	mov	r2, lr
	bl z_arm_fault
 8001fcc:	f7ff ff50 	bl	8001e70 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8001fd0:	bd01      	pop	{r0, pc}
 8001fd2:	bf00      	nop

08001fd4 <z_arm_interrupt_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	2110      	movs	r1, #16
 8001fda:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8001fdc:	3301      	adds	r3, #1
 8001fde:	2b55      	cmp	r3, #85	; 0x55
 8001fe0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8001fe4:	d1f9      	bne.n	8001fda <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100

08001fec <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001fec:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001fee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8001ff2:	4808      	ldr	r0, [pc, #32]	; (8002014 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8001ff4:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8001ff8:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8001ffa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8001ffe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8002002:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8002004:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8002006:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800200a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800200e:	f7ff fd57 	bl	8001ac0 <z_arm_prep_c>
 8002012:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8002014:	20002500 	.word	0x20002500

08002018 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <z_impl_k_thread_abort+0x24>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4283      	cmp	r3, r0
 800201e:	d001      	beq.n	8002024 <z_impl_k_thread_abort+0xc>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8002020:	f007 ba96 	b.w	8009550 <z_thread_abort>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002024:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f9      	beq.n	8002020 <z_impl_k_thread_abort+0x8>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <z_impl_k_thread_abort+0x28>)
 800202e:	6853      	ldr	r3, [r2, #4]
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	6053      	str	r3, [r2, #4]
	z_thread_abort(thread);
 8002036:	f007 ba8b 	b.w	8009550 <z_thread_abort>
 800203a:	bf00      	nop
 800203c:	20000de0 	.word	0x20000de0
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8002044:	4b02      	ldr	r3, [pc, #8]	; (8002050 <z_arm_configure_static_mpu_regions+0xc>)
 8002046:	4a03      	ldr	r2, [pc, #12]	; (8002054 <z_arm_configure_static_mpu_regions+0x10>)
 8002048:	4803      	ldr	r0, [pc, #12]	; (8002058 <z_arm_configure_static_mpu_regions+0x14>)
 800204a:	2101      	movs	r1, #1
 800204c:	f000 b864 	b.w	8002118 <arm_core_mpu_configure_static_mpu_regions>
 8002050:	20028000 	.word	0x20028000
 8002054:	20000000 	.word	0x20000000
 8002058:	0800bf18 	.word	0x0800bf18

0800205c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 800205c:	b510      	push	{r4, lr}
 800205e:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
 8002060:	f7ff fe08 	bl	8001c74 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8002064:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <z_arm_configure_dynamic_mpu_regions+0x24>)
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8002068:	4c06      	ldr	r4, [pc, #24]	; (8002084 <z_arm_configure_dynamic_mpu_regions+0x28>)
 800206a:	609c      	str	r4, [r3, #8]
		guard_start = thread->stack_info.start - guard_size;
 800206c:	1a12      	subs	r2, r2, r0
	dynamic_regions[region_num].size = guard_size;
 800206e:	e9c3 2000 	strd	r2, r0, [r3]
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
}
 8002072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002076:	2101      	movs	r1, #1
 8002078:	4618      	mov	r0, r3
 800207a:	f000 b857 	b.w	800212c <arm_core_mpu_configure_dynamic_mpu_regions>
 800207e:	bf00      	nop
 8002080:	20000894 	.word	0x20000894
 8002084:	150b0000 	.word	0x150b0000

08002088 <mpu_configure_regions>:
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8002088:	2900      	cmp	r1, #0
 800208a:	d041      	beq.n	8002110 <mpu_configure_regions+0x88>
{
 800208c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 800208e:	4f21      	ldr	r7, [pc, #132]	; (8002114 <mpu_configure_regions+0x8c>)
 8002090:	4684      	mov	ip, r0
	for (i = 0; i < regions_num; i++) {
 8002092:	f04f 0e00 	mov.w	lr, #0
		if (regions[i].size == 0U) {
 8002096:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800209a:	b36c      	cbz	r4, 80020f8 <mpu_configure_regions+0x70>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 800209c:	f8dc 5000 	ldr.w	r5, [ip]
 80020a0:	b153      	cbz	r3, 80020b8 <mpu_configure_regions+0x30>
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
		&&
 80020a2:	2c1f      	cmp	r4, #31
 80020a4:	d904      	bls.n	80020b0 <mpu_configure_regions+0x28>
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 80020a6:	ea44 0005 	orr.w	r0, r4, r5
		((part->size & (part->size - 1U)) == 0U)
 80020aa:	1e66      	subs	r6, r4, #1
		&&
 80020ac:	4230      	tst	r0, r6
 80020ae:	d003      	beq.n	80020b8 <mpu_configure_regions+0x30>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
 80020b0:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80020b4:	4610      	mov	r0, r2
 80020b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80020b8:	2c20      	cmp	r4, #32
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80020ba:	f8dc 6008 	ldr.w	r6, [ip, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80020be:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
 80020c0:	d922      	bls.n	8002108 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
 80020c2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80020c6:	d821      	bhi.n	800210c <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80020c8:	3c01      	subs	r4, #1
 80020ca:	fab4 f484 	clz	r4, r4
 80020ce:	f1c4 041f 	rsb	r4, r4, #31
 80020d2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80020d4:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80020d6:	ea44 0406 	orr.w	r4, r4, r6
 80020da:	d8e9      	bhi.n	80020b0 <mpu_configure_regions+0x28>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80020dc:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 80020e0:	4315      	orrs	r5, r2
 80020e2:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80020e6:	f044 0401 	orr.w	r4, r4, #1
 80020ea:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80020ee:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 80020f2:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80020f4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 80020f8:	f10e 0e01 	add.w	lr, lr, #1
 80020fc:	458e      	cmp	lr, r1
 80020fe:	f10c 0c0c 	add.w	ip, ip, #12
 8002102:	d1c8      	bne.n	8002096 <mpu_configure_regions+0xe>
}
 8002104:	4610      	mov	r0, r2
 8002106:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return REGION_32B;
 8002108:	2408      	movs	r4, #8
 800210a:	e7e3      	b.n	80020d4 <mpu_configure_regions+0x4c>
		return REGION_4G;
 800210c:	243e      	movs	r4, #62	; 0x3e
 800210e:	e7e1      	b.n	80020d4 <mpu_configure_regions+0x4c>
 8002110:	4610      	mov	r0, r2
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8002118:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 800211a:	4c03      	ldr	r4, [pc, #12]	; (8002128 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 800211c:	2301      	movs	r3, #1
 800211e:	7822      	ldrb	r2, [r4, #0]
 8002120:	f7ff ffb2 	bl	8002088 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8002124:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8002126:	bd10      	pop	{r4, pc}
 8002128:	20000e3c 	.word	0x20000e3c

0800212c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 800212c:	b508      	push	{r3, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8002130:	2300      	movs	r3, #0
 8002132:	7812      	ldrb	r2, [r2, #0]
 8002134:	f7ff ffa8 	bl	8002088 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8002138:	f110 0f16 	cmn.w	r0, #22
 800213c:	d009      	beq.n	8002152 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800213e:	2807      	cmp	r0, #7
 8002140:	dc07      	bgt.n	8002152 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
 8002144:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
 8002148:	3001      	adds	r0, #1
 800214a:	2808      	cmp	r0, #8
  MPU->RASR = 0U;
 800214c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002150:	d1f8      	bne.n	8002144 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8002152:	bd08      	pop	{r3, pc}
 8002154:	20000e3c 	.word	0x20000e3c
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <z_arm_mpu_init+0x6c>)
{
 800215e:	b410      	push	{r4}
	if (mpu_config.num_regions > get_num_regions()) {
 8002160:	681c      	ldr	r4, [r3, #0]
 8002162:	2c08      	cmp	r4, #8
 8002164:	d82c      	bhi.n	80021c0 <z_arm_mpu_init+0x64>
  __ASM volatile ("dmb 0xF":::"memory");
 8002166:	f3bf 8f5f 	dmb	sy
	MPU->CTRL = 0;
 800216a:	4818      	ldr	r0, [pc, #96]	; (80021cc <z_arm_mpu_init+0x70>)
 800216c:	2200      	movs	r2, #0
 800216e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002172:	b31c      	cbz	r4, 80021bc <z_arm_mpu_init+0x60>
 8002174:	6859      	ldr	r1, [r3, #4]
 8002176:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800217a:	680b      	ldr	r3, [r1, #0]
 800217c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8002180:	4313      	orrs	r3, r2
 8002182:	f043 0310 	orr.w	r3, r3, #16
 8002186:	310c      	adds	r1, #12
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002188:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800218c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002190:	3201      	adds	r2, #1
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	42a2      	cmp	r2, r4
 8002198:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 800219c:	d1eb      	bne.n	8002176 <z_arm_mpu_init+0x1a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	480b      	ldr	r0, [pc, #44]	; (80021d0 <z_arm_mpu_init+0x74>)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <z_arm_mpu_init+0x70>)
	static_regions_num = mpu_config.num_regions;
 80021a4:	7002      	strb	r2, [r0, #0]
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80021a6:	2105      	movs	r1, #5
 80021a8:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 80021ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021b0:	f3bf 8f6f 	isb	sy
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80021b4:	2000      	movs	r0, #0
}
 80021b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021ba:	4770      	bx	lr
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80021bc:	4622      	mov	r2, r4
 80021be:	e7ef      	b.n	80021a0 <z_arm_mpu_init+0x44>
		return -1;
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c4:	e7f7      	b.n	80021b6 <z_arm_mpu_init+0x5a>
 80021c6:	bf00      	nop
 80021c8:	0800bf5c 	.word	0x0800bf5c
 80021cc:	e000ed00 	.word	0xe000ed00
 80021d0:	20000e3c 	.word	0x20000e3c

080021d4 <malloc_prepare>:
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
 80021d4:	2000      	movs	r0, #0
 80021d6:	4770      	bx	lr

080021d8 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop

080021e0 <_stdin_hook_default>:
}

static unsigned char _stdin_hook_default(void)
{
	return 0;
}
 80021e0:	2000      	movs	r0, #0
 80021e2:	4770      	bx	lr

080021e4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 80021e6:	1e0f      	subs	r7, r1, #0
 80021e8:	dd0f      	ble.n	800220a <z_impl_zephyr_write_stdout+0x26>
 80021ea:	1e7d      	subs	r5, r7, #1
 80021ec:	4e08      	ldr	r6, [pc, #32]	; (8002210 <z_impl_zephyr_write_stdout+0x2c>)
 80021ee:	1e44      	subs	r4, r0, #1
 80021f0:	4405      	add	r5, r0
		if (*(buf + i) == '\n') {
 80021f2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80021f6:	280a      	cmp	r0, #10
 80021f8:	d103      	bne.n	8002202 <z_impl_zephyr_write_stdout+0x1e>
			_stdout_hook('\r');
 80021fa:	6833      	ldr	r3, [r6, #0]
 80021fc:	200d      	movs	r0, #13
 80021fe:	4798      	blx	r3
		}
		_stdout_hook(*(buf + i));
 8002200:	7820      	ldrb	r0, [r4, #0]
 8002202:	6833      	ldr	r3, [r6, #0]
 8002204:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8002206:	42ac      	cmp	r4, r5
 8002208:	d1f3      	bne.n	80021f2 <z_impl_zephyr_write_stdout+0xe>
	}
	return nbytes;
}
 800220a:	4638      	mov	r0, r7
 800220c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800220e:	bf00      	nop
 8002210:	20000164 	.word	0x20000164

08002214 <_read>:
#include <syscalls/zephyr_write_stdout_mrsh.c>
#endif

#ifndef CONFIG_POSIX_API
int _read(int fd, char *buf, int nbytes)
{
 8002214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002216:	b083      	sub	sp, #12
 8002218:	9101      	str	r1, [sp, #4]
	for (i = 0; i < nbytes; i++) {
 800221a:	2a00      	cmp	r2, #0
 800221c:	dd16      	ble.n	800224c <_read+0x38>
 800221e:	3a01      	subs	r2, #1
 8002220:	4f0b      	ldr	r7, [pc, #44]	; (8002250 <_read+0x3c>)
 8002222:	460e      	mov	r6, r1
 8002224:	1e4c      	subs	r4, r1, #1
 8002226:	188d      	adds	r5, r1, r2
 8002228:	e003      	b.n	8002232 <_read+0x1e>
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 800222a:	280d      	cmp	r0, #13
 800222c:	d00b      	beq.n	8002246 <_read+0x32>
	for (i = 0; i < nbytes; i++) {
 800222e:	42ac      	cmp	r4, r5
 8002230:	d009      	beq.n	8002246 <_read+0x32>
		*(buf + i) = _stdin_hook();
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8002236:	4623      	mov	r3, r4
 8002238:	3302      	adds	r3, #2
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 800223a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 800223c:	f804 0f01 	strb.w	r0, [r4, #1]!
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8002240:	eba3 0306 	sub.w	r3, r3, r6
 8002244:	d1f1      	bne.n	800222a <_read+0x16>
	ARG_UNUSED(fd);

	return zephyr_read_stdin(buf, nbytes);
}
 8002246:	4618      	mov	r0, r3
 8002248:	b003      	add	sp, #12
 800224a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < nbytes; i++) {
 800224c:	2300      	movs	r3, #0
	return zephyr_read_stdin(buf, nbytes);
 800224e:	e7fa      	b.n	8002246 <_read+0x32>
 8002250:	20000160 	.word	0x20000160

08002254 <_write>:
__weak FUNC_ALIAS(_read, read, int);

int _write(int fd, const void *buf, int nbytes)
{
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	4617      	mov	r7, r2
	for (i = 0; i < nbytes; i++) {
 8002258:	2a00      	cmp	r2, #0
 800225a:	dd0f      	ble.n	800227c <_write+0x28>
 800225c:	1e55      	subs	r5, r2, #1
 800225e:	4e08      	ldr	r6, [pc, #32]	; (8002280 <_write+0x2c>)
 8002260:	1e4c      	subs	r4, r1, #1
 8002262:	440d      	add	r5, r1
		if (*(buf + i) == '\n') {
 8002264:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002268:	280a      	cmp	r0, #10
 800226a:	d103      	bne.n	8002274 <_write+0x20>
			_stdout_hook('\r');
 800226c:	6833      	ldr	r3, [r6, #0]
 800226e:	200d      	movs	r0, #13
 8002270:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 8002272:	7820      	ldrb	r0, [r4, #0]
 8002274:	6833      	ldr	r3, [r6, #0]
 8002276:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8002278:	42ac      	cmp	r4, r5
 800227a:	d1f3      	bne.n	8002264 <_write+0x10>
	ARG_UNUSED(fd);

	return zephyr_write_stdout(buf, nbytes);
}
 800227c:	4638      	mov	r0, r7
 800227e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002280:	20000164 	.word	0x20000164

08002284 <_close>:
 8002284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop

0800228c <_lseek>:
__weak FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800228c:	2000      	movs	r0, #0
 800228e:	4770      	bx	lr

08002290 <_isatty>:
#endif

int _isatty(int file)
{
	return file <= 2;
}
 8002290:	2802      	cmp	r0, #2
 8002292:	bfcc      	ite	gt
 8002294:	2000      	movgt	r0, #0
 8002296:	2001      	movle	r0, #1
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <_kill>:
__weak FUNC_ALIAS(_isatty, isatty, int);

int _kill(int i, int j)
{
	return 0;
}
 800229c:	2000      	movs	r0, #0
 800229e:	4770      	bx	lr

080022a0 <_getpid>:
__weak FUNC_ALIAS(_kill, kill, int);

int _getpid(void)
{
	return 0;
}
 80022a0:	2000      	movs	r0, #0
 80022a2:	4770      	bx	lr

080022a4 <_fstat>:
__weak FUNC_ALIAS(_getpid, getpid, int);

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80022a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a8:	604b      	str	r3, [r1, #4]
	return 0;
}
 80022aa:	2000      	movs	r0, #0
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop

080022b0 <_exit>:
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (*(buf + i) == '\n') {
 80022b2:	4c0b      	ldr	r4, [pc, #44]	; (80022e0 <_exit+0x30>)
 80022b4:	4e0b      	ldr	r6, [pc, #44]	; (80022e4 <_exit+0x34>)
 80022b6:	1d27      	adds	r7, r4, #4
 80022b8:	2565      	movs	r5, #101	; 0x65
		_stdout_hook(*(buf + i));
 80022ba:	6833      	ldr	r3, [r6, #0]
 80022bc:	4628      	mov	r0, r5
 80022be:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 80022c0:	42bc      	cmp	r4, r7
 80022c2:	d00b      	beq.n	80022dc <_exit+0x2c>
		if (*(buf + i) == '\n') {
 80022c4:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80022c8:	2d0a      	cmp	r5, #10
 80022ca:	d1f6      	bne.n	80022ba <_exit+0xa>
			_stdout_hook('\r');
 80022cc:	6833      	ldr	r3, [r6, #0]
 80022ce:	200d      	movs	r0, #13
 80022d0:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 80022d2:	6833      	ldr	r3, [r6, #0]
 80022d4:	4628      	mov	r0, r5
 80022d6:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 80022d8:	42bc      	cmp	r4, r7
 80022da:	d1f3      	bne.n	80022c4 <_exit+0x14>
	_write(1, "exit\n", 5);
	while (1) {
 80022dc:	e7fe      	b.n	80022dc <_exit+0x2c>
 80022de:	bf00      	nop
 80022e0:	0800bf24 	.word	0x0800bf24
 80022e4:	20000164 	.word	0x20000164

080022e8 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 80022e8:	b430      	push	{r4, r5}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 80022ea:	4c08      	ldr	r4, [pc, #32]	; (800230c <_sbrk+0x24>)

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80022ec:	4d08      	ldr	r5, [pc, #32]	; (8002310 <_sbrk+0x28>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
 80022ee:	6823      	ldr	r3, [r4, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80022f0:	f1c5 5100 	rsb	r1, r5, #536870912	; 0x20000000
 80022f4:	18c2      	adds	r2, r0, r3
 80022f6:	f501 3120 	add.w	r1, r1, #163840	; 0x28000
 80022fa:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
 80022fc:	bf3a      	itte	cc
 80022fe:	1958      	addcc	r0, r3, r5
		heap_sz += count;
 8002300:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 8002302:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8002306:	bc30      	pop	{r4, r5}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	200008a0 	.word	0x200008a0
 8002310:	200031a0 	.word	0x200031a0

08002314 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002314:	b510      	push	{r4, lr}
 8002316:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 8002318:	2014      	movs	r0, #20
 800231a:	f007 ff1b 	bl	800a154 <malloc>
 800231e:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 8002320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
 8002324:	f006 b9fe 	b.w	8008724 <z_impl_k_mutex_init>

08002328 <__retarget_lock_acquire_recursive>:

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
 8002328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800232c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return z_impl_k_mutex_lock(mutex, timeout);
 8002330:	f006 ba00 	b.w	8008734 <z_impl_k_mutex_lock>

08002334 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
 8002334:	f006 ba82 	b.w	800883c <z_impl_k_mutex_unlock>

08002338 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 8002338:	f006 b808 	b.w	800834c <z_impl_z_errno>

0800233c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
 800233c:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800233e:	211d      	movs	r1, #29
 8002340:	4804      	ldr	r0, [pc, #16]	; (8002354 <__chk_fail+0x18>)
 8002342:	f7ff ff4f 	bl	80021e4 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
 8002346:	4040      	eors	r0, r0
 8002348:	f380 8811 	msr	BASEPRI, r0
 800234c:	f04f 0003 	mov.w	r0, #3
 8002350:	df02      	svc	2
	CODE_UNREACHABLE;
 8002352:	bf00      	nop
 8002354:	0800bf2c 	.word	0x0800bf2c

08002358 <z_impl_sys_rand_get>:
	return 0;
}

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
void z_impl_sys_rand_get(void *dst, size_t outlen)
{
 8002358:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *dev = entropy_driver;
 800235a:	4e14      	ldr	r6, [pc, #80]	; (80023ac <z_impl_sys_rand_get+0x54>)
 800235c:	6833      	ldr	r3, [r6, #0]
{
 800235e:	b083      	sub	sp, #12
 8002360:	4605      	mov	r5, r0
 8002362:	460c      	mov	r4, r1
	if (unlikely(!dev)) {
 8002364:	b14b      	cbz	r3, 800237a <z_impl_sys_rand_get+0x22>
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
 8002366:	6899      	ldr	r1, [r3, #8]
 8002368:	b2a2      	uxth	r2, r4
 800236a:	680e      	ldr	r6, [r1, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	4629      	mov	r1, r5
 8002370:	47b0      	blx	r6
	if (unlikely(ret < 0)) {
 8002372:	2800      	cmp	r0, #0
 8002374:	db07      	blt.n	8002386 <z_impl_sys_rand_get+0x2e>
	rand_get(dst, outlen, false);
}
 8002376:	b003      	add	sp, #12
 8002378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800237a:	480d      	ldr	r0, [pc, #52]	; (80023b0 <z_impl_sys_rand_get+0x58>)
 800237c:	f005 ffa6 	bl	80082cc <z_impl_device_get_binding>
 8002380:	4603      	mov	r3, r0
		entropy_driver = dev;
 8002382:	6030      	str	r0, [r6, #0]
 8002384:	e7ef      	b.n	8002366 <z_impl_sys_rand_get+0xe>
		while (len < outlen) {
 8002386:	2c00      	cmp	r4, #0
 8002388:	d0f5      	beq.n	8002376 <z_impl_sys_rand_get+0x1e>
		uint32_t len = 0;
 800238a:	2600      	movs	r6, #0
			size_t copylen = outlen - len;
 800238c:	1ba7      	subs	r7, r4, r6
			if (copylen > blocksize) {
 800238e:	2f04      	cmp	r7, #4
 8002390:	bf28      	it	cs
 8002392:	2704      	movcs	r7, #4
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8002394:	f005 fd96 	bl	8007ec4 <sys_clock_cycle_get_32>
 8002398:	463a      	mov	r2, r7
			random_num = k_cycle_get_32();
 800239a:	9001      	str	r0, [sp, #4]
 800239c:	a901      	add	r1, sp, #4
 800239e:	19a8      	adds	r0, r5, r6
			len += copylen;
 80023a0:	443e      	add	r6, r7
 80023a2:	f008 ff1d 	bl	800b1e0 <memcpy>
		while (len < outlen) {
 80023a6:	42b4      	cmp	r4, r6
 80023a8:	d8f0      	bhi.n	800238c <z_impl_sys_rand_get+0x34>
 80023aa:	e7e4      	b.n	8002376 <z_impl_sys_rand_get+0x1e>
 80023ac:	200008a4 	.word	0x200008a4
 80023b0:	0800bf7c 	.word	0x0800bf7c

080023b4 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 80023b4:	2200      	movs	r2, #0
{
 80023b6:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 80023b8:	4611      	mov	r1, r2
 80023ba:	2006      	movs	r0, #6
 80023bc:	f7ff fb5a 	bl	8001a74 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 80023c0:	2200      	movs	r2, #0
 80023c2:	4611      	mov	r1, r2
 80023c4:	2007      	movs	r0, #7
 80023c6:	f7ff fb55 	bl	8001a74 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 80023ca:	2200      	movs	r2, #0
 80023cc:	4611      	mov	r1, r2
 80023ce:	2008      	movs	r0, #8
 80023d0:	f7ff fb50 	bl	8001a74 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80023d4:	2200      	movs	r2, #0
 80023d6:	4611      	mov	r1, r2
 80023d8:	2009      	movs	r0, #9
 80023da:	f7ff fb4b 	bl	8001a74 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80023de:	2200      	movs	r2, #0
 80023e0:	4611      	mov	r1, r2
 80023e2:	200a      	movs	r0, #10
 80023e4:	f7ff fb46 	bl	8001a74 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 80023e8:	2200      	movs	r2, #0
 80023ea:	4611      	mov	r1, r2
 80023ec:	2017      	movs	r0, #23
 80023ee:	f7ff fb41 	bl	8001a74 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 80023f2:	2200      	movs	r2, #0
 80023f4:	2028      	movs	r0, #40	; 0x28
 80023f6:	4611      	mov	r1, r2
 80023f8:	f7ff fb3c 	bl	8001a74 <z_arm_irq_priority_set>
}
 80023fc:	2000      	movs	r0, #0
 80023fe:	bd08      	pop	{r3, pc}

08002400 <__stm32_exti_isr_15_10>:
{
 8002400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002404:	6907      	ldr	r7, [r0, #16]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002406:	4d0e      	ldr	r5, [pc, #56]	; (8002440 <__stm32_exti_isr_15_10+0x40>)
	for (line = min; line < max; line++) {
 8002408:	240a      	movs	r4, #10
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800240a:	2601      	movs	r6, #1
			data->cb[line].cb(line, data->cb[line].data);
 800240c:	f107 0804 	add.w	r8, r7, #4
 8002410:	e002      	b.n	8002418 <__stm32_exti_isr_15_10+0x18>
	for (line = min; line < max; line++) {
 8002412:	3401      	adds	r4, #1
 8002414:	2c10      	cmp	r4, #16
 8002416:	d011      	beq.n	800243c <__stm32_exti_isr_15_10+0x3c>
 8002418:	696a      	ldr	r2, [r5, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800241a:	fa06 f304 	lsl.w	r3, r6, r4
 800241e:	ea33 0202 	bics.w	r2, r3, r2
 8002422:	d1f6      	bne.n	8002412 <__stm32_exti_isr_15_10+0x12>
			if (!data->cb[line].cb) {
 8002424:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002428:	616b      	str	r3, [r5, #20]
			data->cb[line].cb(line, data->cb[line].data);
 800242a:	4620      	mov	r0, r4
			if (!data->cb[line].cb) {
 800242c:	2a00      	cmp	r2, #0
 800242e:	d0f0      	beq.n	8002412 <__stm32_exti_isr_15_10+0x12>
			data->cb[line].cb(line, data->cb[line].data);
 8002430:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
	for (line = min; line < max; line++) {
 8002434:	3401      	adds	r4, #1
			data->cb[line].cb(line, data->cb[line].data);
 8002436:	4790      	blx	r2
	for (line = min; line < max; line++) {
 8002438:	2c10      	cmp	r4, #16
 800243a:	d1ed      	bne.n	8002418 <__stm32_exti_isr_15_10+0x18>
}
 800243c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002440:	40010400 	.word	0x40010400

08002444 <__stm32_exti_isr_0>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <__stm32_exti_isr_0+0x1c>)
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	07d2      	lsls	r2, r2, #31
 800244a:	d400      	bmi.n	800244e <__stm32_exti_isr_0+0xa>
}
 800244c:	4770      	bx	lr
 800244e:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 8002450:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002452:	2001      	movs	r0, #1
 8002454:	6158      	str	r0, [r3, #20]
 8002456:	2a00      	cmp	r2, #0
 8002458:	d0f8      	beq.n	800244c <__stm32_exti_isr_0+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 800245a:	6849      	ldr	r1, [r1, #4]
 800245c:	2000      	movs	r0, #0
 800245e:	4710      	bx	r2
 8002460:	40010400 	.word	0x40010400

08002464 <__stm32_exti_isr_1>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <__stm32_exti_isr_1+0x1c>)
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	0792      	lsls	r2, r2, #30
 800246a:	d400      	bmi.n	800246e <__stm32_exti_isr_1+0xa>
}
 800246c:	4770      	bx	lr
 800246e:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 8002470:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002472:	2002      	movs	r0, #2
 8002474:	6158      	str	r0, [r3, #20]
 8002476:	2a00      	cmp	r2, #0
 8002478:	d0f8      	beq.n	800246c <__stm32_exti_isr_1+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 800247a:	68c9      	ldr	r1, [r1, #12]
 800247c:	2001      	movs	r0, #1
 800247e:	4710      	bx	r2
 8002480:	40010400 	.word	0x40010400

08002484 <__stm32_exti_isr_2>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <__stm32_exti_isr_2+0x1c>)
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	0752      	lsls	r2, r2, #29
 800248a:	d400      	bmi.n	800248e <__stm32_exti_isr_2+0xa>
}
 800248c:	4770      	bx	lr
 800248e:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 8002490:	690a      	ldr	r2, [r1, #16]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002492:	2004      	movs	r0, #4
 8002494:	6158      	str	r0, [r3, #20]
 8002496:	2a00      	cmp	r2, #0
 8002498:	d0f8      	beq.n	800248c <__stm32_exti_isr_2+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 800249a:	6949      	ldr	r1, [r1, #20]
 800249c:	2002      	movs	r0, #2
 800249e:	4710      	bx	r2
 80024a0:	40010400 	.word	0x40010400

080024a4 <__stm32_exti_isr_3>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <__stm32_exti_isr_3+0x1c>)
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	0712      	lsls	r2, r2, #28
 80024aa:	d400      	bmi.n	80024ae <__stm32_exti_isr_3+0xa>
}
 80024ac:	4770      	bx	lr
 80024ae:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 80024b0:	698a      	ldr	r2, [r1, #24]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80024b2:	2008      	movs	r0, #8
 80024b4:	6158      	str	r0, [r3, #20]
 80024b6:	2a00      	cmp	r2, #0
 80024b8:	d0f8      	beq.n	80024ac <__stm32_exti_isr_3+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 80024ba:	69c9      	ldr	r1, [r1, #28]
 80024bc:	2003      	movs	r0, #3
 80024be:	4710      	bx	r2
 80024c0:	40010400 	.word	0x40010400

080024c4 <__stm32_exti_isr_4>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <__stm32_exti_isr_4+0x1c>)
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	06d2      	lsls	r2, r2, #27
 80024ca:	d400      	bmi.n	80024ce <__stm32_exti_isr_4+0xa>
}
 80024cc:	4770      	bx	lr
 80024ce:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 80024d0:	6a0a      	ldr	r2, [r1, #32]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80024d2:	2010      	movs	r0, #16
 80024d4:	6158      	str	r0, [r3, #20]
 80024d6:	2a00      	cmp	r2, #0
 80024d8:	d0f8      	beq.n	80024cc <__stm32_exti_isr_4+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 80024da:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80024dc:	2004      	movs	r0, #4
 80024de:	4710      	bx	r2
 80024e0:	40010400 	.word	0x40010400

080024e4 <__stm32_exti_isr_9_5>:
{
 80024e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024e8:	6907      	ldr	r7, [r0, #16]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80024ea:	4d0e      	ldr	r5, [pc, #56]	; (8002524 <__stm32_exti_isr_9_5+0x40>)
	for (line = min; line < max; line++) {
 80024ec:	2405      	movs	r4, #5
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80024ee:	2601      	movs	r6, #1
			data->cb[line].cb(line, data->cb[line].data);
 80024f0:	f107 0804 	add.w	r8, r7, #4
 80024f4:	e002      	b.n	80024fc <__stm32_exti_isr_9_5+0x18>
	for (line = min; line < max; line++) {
 80024f6:	3401      	adds	r4, #1
 80024f8:	2c0a      	cmp	r4, #10
 80024fa:	d011      	beq.n	8002520 <__stm32_exti_isr_9_5+0x3c>
 80024fc:	696a      	ldr	r2, [r5, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80024fe:	fa06 f304 	lsl.w	r3, r6, r4
 8002502:	ea33 0202 	bics.w	r2, r3, r2
 8002506:	d1f6      	bne.n	80024f6 <__stm32_exti_isr_9_5+0x12>
			if (!data->cb[line].cb) {
 8002508:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800250c:	616b      	str	r3, [r5, #20]
			data->cb[line].cb(line, data->cb[line].data);
 800250e:	4620      	mov	r0, r4
			if (!data->cb[line].cb) {
 8002510:	2a00      	cmp	r2, #0
 8002512:	d0f0      	beq.n	80024f6 <__stm32_exti_isr_9_5+0x12>
			data->cb[line].cb(line, data->cb[line].data);
 8002514:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
	for (line = min; line < max; line++) {
 8002518:	3401      	adds	r4, #1
			data->cb[line].cb(line, data->cb[line].data);
 800251a:	4790      	blx	r2
	for (line = min; line < max; line++) {
 800251c:	2c0a      	cmp	r4, #10
 800251e:	d1ed      	bne.n	80024fc <__stm32_exti_isr_9_5+0x18>
}
 8002520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002524:	40010400 	.word	0x40010400

08002528 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002528:	4a06      	ldr	r2, [pc, #24]	; (8002544 <stm32_exti_enable+0x1c>)
	irqnum = exti_irq_table[line];
 800252a:	4907      	ldr	r1, [pc, #28]	; (8002548 <stm32_exti_enable+0x20>)
{
 800252c:	b410      	push	{r4}
	LL_EXTI_EnableIT_0_31(1 << line);
 800252e:	2301      	movs	r3, #1
 8002530:	6814      	ldr	r4, [r2, #0]
 8002532:	4083      	lsls	r3, r0
 8002534:	4323      	orrs	r3, r4
	irq_enable(irqnum);
 8002536:	5608      	ldrsb	r0, [r1, r0]
}
 8002538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800253c:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 800253e:	f7ff ba67 	b.w	8001a10 <arch_irq_enable>
 8002542:	bf00      	nop
 8002544:	40010400 	.word	0x40010400
 8002548:	0800bfa0 	.word	0x0800bfa0

0800254c <stm32_exti_disable>:
	if (line < 32) {
 800254c:	281f      	cmp	r0, #31
 800254e:	dc07      	bgt.n	8002560 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002550:	4904      	ldr	r1, [pc, #16]	; (8002564 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8002552:	2201      	movs	r2, #1
 8002554:	680b      	ldr	r3, [r1, #0]
 8002556:	fa02 f000 	lsl.w	r0, r2, r0
 800255a:	ea23 0000 	bic.w	r0, r3, r0
 800255e:	6008      	str	r0, [r1, #0]
}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40010400 	.word	0x40010400

08002568 <stm32_exti_trigger>:
	switch (trigger) {
 8002568:	2903      	cmp	r1, #3
 800256a:	d80d      	bhi.n	8002588 <stm32_exti_trigger+0x20>
 800256c:	e8df f001 	tbb	[pc, r1]
 8002570:	020d1925 	.word	0x020d1925
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <stm32_exti_trigger+0x6c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8002576:	2301      	movs	r3, #1
 8002578:	6891      	ldr	r1, [r2, #8]
 800257a:	fa03 f000 	lsl.w	r0, r3, r0
 800257e:	4301      	orrs	r1, r0
 8002580:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002582:	68d3      	ldr	r3, [r2, #12]
 8002584:	4318      	orrs	r0, r3
 8002586:	60d0      	str	r0, [r2, #12]
}
 8002588:	4770      	bx	lr
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <stm32_exti_trigger+0x6c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800258c:	2201      	movs	r2, #1
 800258e:	68d9      	ldr	r1, [r3, #12]
 8002590:	fa02 f000 	lsl.w	r0, r2, r0
 8002594:	4301      	orrs	r1, r0
 8002596:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	ea22 0000 	bic.w	r0, r2, r0
 800259e:	6098      	str	r0, [r3, #8]
}
 80025a0:	4770      	bx	lr
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <stm32_exti_trigger+0x6c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80025a4:	2201      	movs	r2, #1
 80025a6:	6899      	ldr	r1, [r3, #8]
 80025a8:	fa02 f000 	lsl.w	r0, r2, r0
 80025ac:	4301      	orrs	r1, r0
 80025ae:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	ea22 0000 	bic.w	r0, r2, r0
 80025b6:	60d8      	str	r0, [r3, #12]
}
 80025b8:	4770      	bx	lr
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <stm32_exti_trigger+0x6c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 80025bc:	2201      	movs	r2, #1
 80025be:	6899      	ldr	r1, [r3, #8]
 80025c0:	fa02 f000 	lsl.w	r0, r2, r0
 80025c4:	ea21 0100 	bic.w	r1, r1, r0
 80025c8:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	ea22 0000 	bic.w	r0, r2, r0
 80025d0:	60d8      	str	r0, [r3, #12]
}
 80025d2:	4770      	bx	lr
 80025d4:	40010400 	.word	0x40010400

080025d8 <stm32_exti_set_callback>:
	if (data->cb[line].cb) {
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <stm32_exti_set_callback+0x24>)
{
 80025da:	b410      	push	{r4}
	if (data->cb[line].cb) {
 80025dc:	f853 4030 	ldr.w	r4, [r3, r0, lsl #3]
 80025e0:	b944      	cbnz	r4, 80025f4 <stm32_exti_set_callback+0x1c>
	data->cb[line].cb = cb;
 80025e2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 80025e6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	return 0;
 80025ea:	4620      	mov	r0, r4
	data->cb[line].data = arg;
 80025ec:	605a      	str	r2, [r3, #4]
}
 80025ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025f2:	4770      	bx	lr
		return -EBUSY;
 80025f4:	f06f 000f 	mvn.w	r0, #15
 80025f8:	e7f9      	b.n	80025ee <stm32_exti_set_callback+0x16>
 80025fa:	bf00      	nop
 80025fc:	200008a8 	.word	0x200008a8

08002600 <stm32_exti_unset_callback>:
	data->cb[line].cb = NULL;
 8002600:	4a03      	ldr	r2, [pc, #12]	; (8002610 <stm32_exti_unset_callback+0x10>)
	data->cb[line].data = NULL;
 8002602:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
	data->cb[line].cb = NULL;
 8002606:	2300      	movs	r3, #0
 8002608:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	data->cb[line].data = NULL;
 800260c:	604b      	str	r3, [r1, #4]
}
 800260e:	4770      	bx	lr
 8002610:	200008a8 	.word	0x200008a8

08002614 <stm32_clock_control_get_subsys_rate>:
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8002614:	680b      	ldr	r3, [r1, #0]
 8002616:	2b04      	cmp	r3, #4
 8002618:	d804      	bhi.n	8002624 <stm32_clock_control_get_subsys_rate+0x10>
	uint32_t ahb_clock = SystemCoreClock;
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <stm32_clock_control_get_subsys_rate+0x1c>)
 800261c:	681b      	ldr	r3, [r3, #0]
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 800261e:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8002620:	2000      	movs	r0, #0
		break;
 8002622:	4770      	bx	lr
	switch (pclken->bus) {
 8002624:	2b06      	cmp	r3, #6
 8002626:	d0f8      	beq.n	800261a <stm32_clock_control_get_subsys_rate+0x6>
 8002628:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	2000031c 	.word	0x2000031c

08002634 <stm32_clock_control_on>:
	switch (pclken->bus) {
 8002634:	680b      	ldr	r3, [r1, #0]
{
 8002636:	b086      	sub	sp, #24
	switch (pclken->bus) {
 8002638:	2b06      	cmp	r3, #6
 800263a:	d84d      	bhi.n	80026d8 <stm32_clock_control_on+0xa4>
 800263c:	e8df f003 	tbb	[pc, r3]
 8002640:	34281c10 	.word	0x34281c10
 8002644:	4c40      	.short	0x4c40
 8002646:	04          	.byte	0x04
 8002647:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002648:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <stm32_clock_control_on+0xac>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 800264a:	684b      	ldr	r3, [r1, #4]
 800264c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800264e:	4319      	orrs	r1, r3
 8002650:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002652:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002654:	4013      	ands	r3, r2
 8002656:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002658:	9b01      	ldr	r3, [sp, #4]
	return 0;
 800265a:	2000      	movs	r0, #0
}
 800265c:	b006      	add	sp, #24
 800265e:	4770      	bx	lr
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002660:	4a1f      	ldr	r2, [pc, #124]	; (80026e0 <stm32_clock_control_on+0xac>)
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8002662:	684b      	ldr	r3, [r1, #4]
 8002664:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002666:	4319      	orrs	r1, r3
 8002668:	6491      	str	r1, [r2, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800266a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800266c:	4013      	ands	r3, r2
 800266e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8002670:	9b05      	ldr	r3, [sp, #20]
 8002672:	2000      	movs	r0, #0
}
 8002674:	b006      	add	sp, #24
 8002676:	4770      	bx	lr
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002678:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <stm32_clock_control_on+0xac>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 800267a:	684b      	ldr	r3, [r1, #4]
 800267c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800267e:	4319      	orrs	r1, r3
 8002680:	64d1      	str	r1, [r2, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002682:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002684:	4013      	ands	r3, r2
 8002686:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002688:	9b00      	ldr	r3, [sp, #0]
	return 0;
 800268a:	2000      	movs	r0, #0
}
 800268c:	b006      	add	sp, #24
 800268e:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002690:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <stm32_clock_control_on+0xac>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8002692:	684b      	ldr	r3, [r1, #4]
 8002694:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8002696:	4319      	orrs	r1, r3
 8002698:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800269a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800269c:	4013      	ands	r3, r2
 800269e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80026a0:	9b02      	ldr	r3, [sp, #8]
	return 0;
 80026a2:	2000      	movs	r0, #0
}
 80026a4:	b006      	add	sp, #24
 80026a6:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80026a8:	4a0d      	ldr	r2, [pc, #52]	; (80026e0 <stm32_clock_control_on+0xac>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80026aa:	684b      	ldr	r3, [r1, #4]
 80026ac:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80026ae:	4319      	orrs	r1, r3
 80026b0:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026b2:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80026b4:	4013      	ands	r3, r2
 80026b6:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 80026b8:	9b04      	ldr	r3, [sp, #16]
	return 0;
 80026ba:	2000      	movs	r0, #0
}
 80026bc:	b006      	add	sp, #24
 80026be:	4770      	bx	lr
  SET_BIT(RCC->APB1ENR2, Periphs);
 80026c0:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <stm32_clock_control_on+0xac>)
		LL_APB1_GRP2_EnableClock(pclken->enr);
 80026c2:	684b      	ldr	r3, [r1, #4]
 80026c4:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80026c6:	4319      	orrs	r1, r3
 80026c8:	65d1      	str	r1, [r2, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80026ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026cc:	4013      	ands	r3, r2
 80026ce:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80026d0:	9b03      	ldr	r3, [sp, #12]
	return 0;
 80026d2:	2000      	movs	r0, #0
}
 80026d4:	b006      	add	sp, #24
 80026d6:	4770      	bx	lr
	switch (pclken->bus) {
 80026d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80026dc:	e7be      	b.n	800265c <stm32_clock_control_on+0x28>
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000

080026e4 <stm32_clock_control_off>:
	switch (pclken->bus) {
 80026e4:	680b      	ldr	r3, [r1, #0]
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d835      	bhi.n	8002756 <stm32_clock_control_off+0x72>
 80026ea:	e8df f003 	tbb	[pc, r3]
 80026ee:	140c      	.short	0x140c
 80026f0:	342c241c 	.word	0x342c241c
 80026f4:	04          	.byte	0x04
 80026f5:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 80026f6:	4a19      	ldr	r2, [pc, #100]	; (800275c <stm32_clock_control_off+0x78>)
 80026f8:	6849      	ldr	r1, [r1, #4]
 80026fa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80026fc:	ea23 0301 	bic.w	r3, r3, r1
	return 0;
 8002700:	2000      	movs	r0, #0
 8002702:	6513      	str	r3, [r2, #80]	; 0x50
}
 8002704:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <stm32_clock_control_off+0x78>)
 8002708:	6849      	ldr	r1, [r1, #4]
 800270a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800270c:	ea23 0301 	bic.w	r3, r3, r1
 8002710:	2000      	movs	r0, #0
 8002712:	6493      	str	r3, [r2, #72]	; 0x48
 8002714:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8002716:	4a11      	ldr	r2, [pc, #68]	; (800275c <stm32_clock_control_off+0x78>)
 8002718:	6849      	ldr	r1, [r1, #4]
 800271a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800271c:	ea23 0301 	bic.w	r3, r3, r1
 8002720:	2000      	movs	r0, #0
 8002722:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002724:	4770      	bx	lr
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002726:	4a0d      	ldr	r2, [pc, #52]	; (800275c <stm32_clock_control_off+0x78>)
 8002728:	6849      	ldr	r1, [r1, #4]
 800272a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800272c:	ea23 0301 	bic.w	r3, r3, r1
 8002730:	2000      	movs	r0, #0
 8002732:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002734:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002736:	4a09      	ldr	r2, [pc, #36]	; (800275c <stm32_clock_control_off+0x78>)
 8002738:	6849      	ldr	r1, [r1, #4]
 800273a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800273c:	ea23 0301 	bic.w	r3, r3, r1
 8002740:	2000      	movs	r0, #0
 8002742:	6613      	str	r3, [r2, #96]	; 0x60
}
 8002744:	4770      	bx	lr
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8002746:	4a05      	ldr	r2, [pc, #20]	; (800275c <stm32_clock_control_off+0x78>)
 8002748:	6849      	ldr	r1, [r1, #4]
 800274a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800274c:	ea23 0301 	bic.w	r3, r3, r1
 8002750:	2000      	movs	r0, #0
 8002752:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002754:	4770      	bx	lr
	switch (pclken->bus) {
 8002756:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800275a:	4770      	bx	lr
 800275c:	40021000 	.word	0x40021000

08002760 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8002760:	b510      	push	{r4, lr}
 8002762:	b086      	sub	sp, #24
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 8002764:	2300      	movs	r3, #0
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8002766:	e9cd 3300 	strd	r3, r3, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 800276a:	9302      	str	r3, [sp, #8]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 800276c:	f000 f83c 	bl	80027e8 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8002770:	a803      	add	r0, sp, #12
 8002772:	f000 f831 	bl	80027d8 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002776:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <stm32_clock_control_init+0x74>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	0551      	lsls	r1, r2, #21
 800277c:	d406      	bmi.n	800278c <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002784:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	0552      	lsls	r2, r2, #21
 800278a:	d5fc      	bpl.n	8002786 <stm32_clock_control_init+0x26>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800278c:	4c11      	ldr	r4, [pc, #68]	; (80027d4 <stm32_clock_control_init+0x74>)
 800278e:	68a3      	ldr	r3, [r4, #8]
 8002790:	f023 0303 	bic.w	r3, r3, #3
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800279a:	68a3      	ldr	r3, [r4, #8]
 800279c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027a0:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80027a2:	68a3      	ldr	r3, [r4, #8]
 80027a4:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d1fa      	bne.n	80027a2 <stm32_clock_control_init+0x42>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027b2:	6023      	str	r3, [r4, #0]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 80027b4:	4669      	mov	r1, sp
 80027b6:	a803      	add	r0, sp, #12
 80027b8:	f005 fd24 	bl	8008204 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c2:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80027c4:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80027c6:	2000      	movs	r0, #0
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6023      	str	r3, [r4, #0]
 80027ce:	b006      	add	sp, #24
 80027d0:	bd10      	pop	{r4, pc}
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000

080027d8 <config_pll_init>:
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 80027d8:	2100      	movs	r1, #0
 80027da:	2214      	movs	r2, #20
 80027dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/* set power boost mode for sys clock greater than 80MHz */
	if (sys_clock_hw_cycles_per_sec() >= MHZ(80)) {
		LL_PWR_EnableRange1BoostMode();
	}
#endif /* PWR_CR5_R1MODE */
}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop

080027e8 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <config_enable_default_clocks+0x1c>)
 80027ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027f0:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80027f4:	b082      	sub	sp, #8
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80027fc:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 80027fe:	b002      	add	sp, #8
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000

08002808 <dma_stm32_config_irq_0>:

static void dma_stm32_config_irq_0(const struct device *dev)
{
	ARG_UNUSED(dev);

	DMA_STM32_IRQ_CONNECT(0, 0);
 8002808:	2200      	movs	r2, #0
{
 800280a:	b508      	push	{r3, lr}
	DMA_STM32_IRQ_CONNECT(0, 0);
 800280c:	4611      	mov	r1, r2
 800280e:	200b      	movs	r0, #11
 8002810:	f7ff f930 	bl	8001a74 <z_arm_irq_priority_set>
 8002814:	200b      	movs	r0, #11
 8002816:	f7ff f8fb 	bl	8001a10 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(0, 1);
 800281a:	2200      	movs	r2, #0
 800281c:	4611      	mov	r1, r2
 800281e:	200c      	movs	r0, #12
 8002820:	f7ff f928 	bl	8001a74 <z_arm_irq_priority_set>
 8002824:	200c      	movs	r0, #12
 8002826:	f7ff f8f3 	bl	8001a10 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 2);
 800282a:	2200      	movs	r2, #0
 800282c:	4611      	mov	r1, r2
 800282e:	200d      	movs	r0, #13
 8002830:	f7ff f920 	bl	8001a74 <z_arm_irq_priority_set>
 8002834:	200d      	movs	r0, #13
 8002836:	f7ff f8eb 	bl	8001a10 <arch_irq_enable>
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
	DMA_STM32_IRQ_CONNECT(0, 3);
 800283a:	2200      	movs	r2, #0
 800283c:	4611      	mov	r1, r2
 800283e:	200e      	movs	r0, #14
 8002840:	f7ff f918 	bl	8001a74 <z_arm_irq_priority_set>
 8002844:	200e      	movs	r0, #14
 8002846:	f7ff f8e3 	bl	8001a10 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 4);
 800284a:	2200      	movs	r2, #0
 800284c:	4611      	mov	r1, r2
 800284e:	200f      	movs	r0, #15
 8002850:	f7ff f910 	bl	8001a74 <z_arm_irq_priority_set>
 8002854:	200f      	movs	r0, #15
 8002856:	f7ff f8db 	bl	8001a10 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 5)
	DMA_STM32_IRQ_CONNECT(0, 5);
 800285a:	2200      	movs	r2, #0
 800285c:	4611      	mov	r1, r2
 800285e:	2010      	movs	r0, #16
 8002860:	f7ff f908 	bl	8001a74 <z_arm_irq_priority_set>
 8002864:	2010      	movs	r0, #16
 8002866:	f7ff f8d3 	bl	8001a10 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 6)
	DMA_STM32_IRQ_CONNECT(0, 6);
 800286a:	2200      	movs	r2, #0
 800286c:	2011      	movs	r0, #17
 800286e:	4611      	mov	r1, r2
 8002870:	f7ff f900 	bl	8001a74 <z_arm_irq_priority_set>
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
/* Either 5 or 6 or 7 or 8 channels for DMA across all stm32 series. */
}
 8002874:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_STM32_IRQ_CONNECT(0, 6);
 8002878:	2011      	movs	r0, #17
 800287a:	f7ff b8c9 	b.w	8001a10 <arch_irq_enable>
 800287e:	bf00      	nop

08002880 <dma_stm32_get_status>:
	const struct dma_stm32_config *config = dev->config;
 8002880:	6843      	ldr	r3, [r0, #4]
{
 8002882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (id >= config->max_streams) {
 8002886:	695d      	ldr	r5, [r3, #20]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8002888:	691f      	ldr	r7, [r3, #16]
	id = id - STREAM_OFFSET;
 800288a:	1e48      	subs	r0, r1, #1
	if (id >= config->max_streams) {
 800288c:	4285      	cmp	r5, r0
 800288e:	d917      	bls.n	80028c0 <dma_stm32_get_status+0x40>
	stream = &config->streams[id];
 8002890:	699d      	ldr	r5, [r3, #24]
 8002892:	4614      	mov	r4, r2
 8002894:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002898:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800289c:	ea4f 08c2 	mov.w	r8, r2, lsl #3
	stat->pending_length = LL_DMA_GetDataLength(dma, dma_stm32_id_to_stream(id));
 80028a0:	f000 fb4a 	bl	8002f38 <dma_stm32_id_to_stream>
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <dma_stm32_get_status+0x48>)
	stat->dir = stream->direction;
 80028a6:	f855 2008 	ldr.w	r2, [r5, r8]
 80028aa:	5c1b      	ldrb	r3, [r3, r0]
 80028ac:	443b      	add	r3, r7
	return 0;
 80028ae:	2000      	movs	r0, #0
 80028b0:	685b      	ldr	r3, [r3, #4]
	stat->dir = stream->direction;
 80028b2:	7062      	strb	r2, [r4, #1]
	stat->busy = stream->busy;
 80028b4:	79b2      	ldrb	r2, [r6, #6]
 80028b6:	7022      	strb	r2, [r4, #0]
 80028b8:	b29b      	uxth	r3, r3
	stat->pending_length = LL_DMA_GetDataLength(dma, dma_stm32_id_to_stream(id));
 80028ba:	6063      	str	r3, [r4, #4]
}
 80028bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
 80028c0:	f06f 0015 	mvn.w	r0, #21
 80028c4:	e7fa      	b.n	80028bc <dma_stm32_get_status+0x3c>
 80028c6:	bf00      	nop
 80028c8:	0800bfc8 	.word	0x0800bfc8

080028cc <dma_stm32_init>:
{
 80028cc:	b570      	push	{r4, r5, r6, lr}
	const struct dma_stm32_config *config = dev->config;
 80028ce:	6846      	ldr	r6, [r0, #4]
{
 80028d0:	4604      	mov	r4, r0
 80028d2:	4d12      	ldr	r5, [pc, #72]	; (800291c <dma_stm32_init+0x50>)
 80028d4:	4628      	mov	r0, r5
 80028d6:	f005 fd2d 	bl	8008334 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 80028da:	b1e0      	cbz	r0, 8002916 <dma_stm32_init+0x4a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 80028dc:	68ab      	ldr	r3, [r5, #8]
 80028de:	4628      	mov	r0, r5
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4631      	mov	r1, r6
 80028e4:	4798      	blx	r3
	if (clock_control_on(clk,
 80028e6:	4605      	mov	r5, r0
 80028e8:	b9a8      	cbnz	r0, 8002916 <dma_stm32_init+0x4a>
	config->config_irq(dev);
 80028ea:	68b3      	ldr	r3, [r6, #8]
 80028ec:	4620      	mov	r0, r4
 80028ee:	4798      	blx	r3
	for (uint32_t i = 0; i < config->max_streams; i++) {
 80028f0:	6972      	ldr	r2, [r6, #20]
 80028f2:	b14a      	cbz	r2, 8002908 <dma_stm32_init+0x3c>
 80028f4:	69b3      	ldr	r3, [r6, #24]
 80028f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80028fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		config->streams[i].busy = false;
 80028fe:	4629      	mov	r1, r5
 8002900:	7199      	strb	r1, [r3, #6]
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8002902:	3318      	adds	r3, #24
 8002904:	4293      	cmp	r3, r2
 8002906:	d1fb      	bne.n	8002900 <dma_stm32_init+0x34>
	((struct dma_stm32_data *)dev->data)->dma_ctx.magic = 0;
 8002908:	6923      	ldr	r3, [r4, #16]
 800290a:	2200      	movs	r2, #0
	((struct dma_stm32_data *)dev->data)->dma_ctx.dma_channels = 0;
 800290c:	e9c3 2200 	strd	r2, r2, [r3]
	((struct dma_stm32_data *)dev->data)->dma_ctx.atomic = 0;
 8002910:	609a      	str	r2, [r3, #8]
}
 8002912:	4628      	mov	r0, r5
 8002914:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8002916:	f06f 0504 	mvn.w	r5, #4
 800291a:	e7fa      	b.n	8002912 <dma_stm32_init+0x46>
 800291c:	0800b78c 	.word	0x0800b78c

08002920 <dma_stm32_irq_handler>:
	const struct dma_stm32_config *config = dev->config;
 8002920:	6843      	ldr	r3, [r0, #4]
{
 8002922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	stream = &config->streams[id];
 8002926:	699c      	ldr	r4, [r3, #24]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8002928:	691f      	ldr	r7, [r3, #16]
	stream = &config->streams[id];
 800292a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800292e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
		stream->busy = false;
 8002932:	2300      	movs	r3, #0
{
 8002934:	b082      	sub	sp, #8
 8002936:	4606      	mov	r6, r0
		stream->busy = false;
 8002938:	71a3      	strb	r3, [r4, #6]
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 800293a:	4638      	mov	r0, r7
{
 800293c:	460d      	mov	r5, r1
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 800293e:	f000 fb29 	bl	8002f94 <stm32_dma_is_ht_irq_active>
	callback_arg = id + STREAM_OFFSET;
 8002942:	f105 0801 	add.w	r8, r5, #1
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 8002946:	b180      	cbz	r0, 800296a <dma_stm32_irq_handler+0x4a>
		if (!stream->hal_override) {
 8002948:	7963      	ldrb	r3, [r4, #5]
 800294a:	b14b      	cbz	r3, 8002960 <dma_stm32_irq_handler+0x40>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 800294c:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 8002950:	2300      	movs	r3, #0
		stream->dma_callback(dev, stream->user_data,
 8002952:	4642      	mov	r2, r8
 8002954:	4630      	mov	r0, r6
 8002956:	46ac      	mov	ip, r5
}
 8002958:	b002      	add	sp, #8
 800295a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		stream->dma_callback(dev, stream->user_data,
 800295e:	4760      	bx	ip
			dma_stm32_clear_ht(dma, id);
 8002960:	4629      	mov	r1, r5
 8002962:	4638      	mov	r0, r7
 8002964:	f000 faee 	bl	8002f44 <dma_stm32_clear_ht>
 8002968:	e7f0      	b.n	800294c <dma_stm32_irq_handler+0x2c>
	} else if (stm32_dma_is_tc_irq_active(dma, id)) {
 800296a:	4629      	mov	r1, r5
 800296c:	4638      	mov	r0, r7
 800296e:	f000 faf7 	bl	8002f60 <stm32_dma_is_tc_irq_active>
 8002972:	b138      	cbz	r0, 8002984 <dma_stm32_irq_handler+0x64>
		if (!stream->hal_override) {
 8002974:	7963      	ldrb	r3, [r4, #5]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1e8      	bne.n	800294c <dma_stm32_irq_handler+0x2c>
			dma_stm32_clear_tc(dma, id);
 800297a:	4629      	mov	r1, r5
 800297c:	4638      	mov	r0, r7
 800297e:	f000 fae7 	bl	8002f50 <dma_stm32_clear_tc>
 8002982:	e7e3      	b.n	800294c <dma_stm32_irq_handler+0x2c>
	} else if (stm32_dma_is_unexpected_irq_happened(dma, id)) {
 8002984:	4638      	mov	r0, r7
 8002986:	4629      	mov	r1, r5
 8002988:	f000 fb24 	bl	8002fd4 <stm32_dma_is_unexpected_irq_happened>
 800298c:	b120      	cbz	r0, 8002998 <dma_stm32_irq_handler+0x78>
		stream->dma_callback(dev, stream->user_data,
 800298e:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 8002992:	f06f 0304 	mvn.w	r3, #4
 8002996:	e7dc      	b.n	8002952 <dma_stm32_irq_handler+0x32>
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8002998:	6873      	ldr	r3, [r6, #4]
	stm32_dma_dump_stream_irq(dma, id);
 800299a:	4629      	mov	r1, r5
 800299c:	6918      	ldr	r0, [r3, #16]
 800299e:	f000 fadd 	bl	8002f5c <stm32_dma_dump_stream_irq>
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80029a2:	6873      	ldr	r3, [r6, #4]
	dma_stm32_clear_tc(dma, id);
 80029a4:	4629      	mov	r1, r5
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80029a6:	6918      	ldr	r0, [r3, #16]
	dma_stm32_clear_tc(dma, id);
 80029a8:	9001      	str	r0, [sp, #4]
 80029aa:	f000 fad1 	bl	8002f50 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 80029ae:	9801      	ldr	r0, [sp, #4]
 80029b0:	4629      	mov	r1, r5
 80029b2:	f000 fac7 	bl	8002f44 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 80029b6:	9801      	ldr	r0, [sp, #4]
 80029b8:	4629      	mov	r1, r5
 80029ba:	f000 fb05 	bl	8002fc8 <stm32_dma_clear_stream_irq>
 80029be:	e7e6      	b.n	800298e <dma_stm32_irq_handler+0x6e>

080029c0 <dma_stm32_irq_0_0>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 0);
 80029c0:	2100      	movs	r1, #0
 80029c2:	f7ff bfad 	b.w	8002920 <dma_stm32_irq_handler>
 80029c6:	bf00      	nop

080029c8 <dma_stm32_irq_0_1>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 1);
 80029c8:	2101      	movs	r1, #1
 80029ca:	f7ff bfa9 	b.w	8002920 <dma_stm32_irq_handler>
 80029ce:	bf00      	nop

080029d0 <dma_stm32_irq_0_2>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 2);
 80029d0:	2102      	movs	r1, #2
 80029d2:	f7ff bfa5 	b.w	8002920 <dma_stm32_irq_handler>
 80029d6:	bf00      	nop

080029d8 <dma_stm32_irq_0_3>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 3);
 80029d8:	2103      	movs	r1, #3
 80029da:	f7ff bfa1 	b.w	8002920 <dma_stm32_irq_handler>
 80029de:	bf00      	nop

080029e0 <dma_stm32_irq_0_4>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 4);
 80029e0:	2104      	movs	r1, #4
 80029e2:	f7ff bf9d 	b.w	8002920 <dma_stm32_irq_handler>
 80029e6:	bf00      	nop

080029e8 <dma_stm32_irq_0_5>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 5);
 80029e8:	2105      	movs	r1, #5
 80029ea:	f7ff bf99 	b.w	8002920 <dma_stm32_irq_handler>
 80029ee:	bf00      	nop

080029f0 <dma_stm32_irq_0_6>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 6);
 80029f0:	2106      	movs	r1, #6
 80029f2:	f7ff bf95 	b.w	8002920 <dma_stm32_irq_handler>
 80029f6:	bf00      	nop

080029f8 <dma_stm32_start>:
	const struct dma_stm32_config *config = dev->config;
 80029f8:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80029fa:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
	id = id - STREAM_OFFSET;
 80029fe:	3901      	subs	r1, #1
	if (id >= config->max_streams) {
 8002a00:	428a      	cmp	r2, r1
 8002a02:	d915      	bls.n	8002a30 <dma_stm32_start+0x38>
{
 8002a04:	b500      	push	{lr}
 8002a06:	b083      	sub	sp, #12
	dma_stm32_clear_tc(dma, id);
 8002a08:	e9cd 0100 	strd	r0, r1, [sp]
 8002a0c:	f000 faa0 	bl	8002f50 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 8002a10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a14:	f000 fa96 	bl	8002f44 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 8002a18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a1c:	f000 fad4 	bl	8002fc8 <stm32_dma_clear_stream_irq>
	stm32_dma_enable_stream(dma, id);
 8002a20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a24:	f000 fad8 	bl	8002fd8 <stm32_dma_enable_stream>
	return 0;
 8002a28:	2000      	movs	r0, #0
}
 8002a2a:	b003      	add	sp, #12
 8002a2c:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
 8002a30:	f06f 0015 	mvn.w	r0, #21
}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop

08002a38 <dma_stm32_stop>:
	const struct dma_stm32_config *config = dev->config;
 8002a38:	6842      	ldr	r2, [r0, #4]
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 8002a3a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
{
 8002a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 8002a42:	00db      	lsls	r3, r3, #3
{
 8002a44:	4607      	mov	r7, r0
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 8002a46:	6990      	ldr	r0, [r2, #24]
 8002a48:	3b18      	subs	r3, #24
 8002a4a:	eb00 0803 	add.w	r8, r0, r3
	if (id >= config->max_streams) {
 8002a4e:	e9d2 6304 	ldrd	r6, r3, [r2, #16]
	id = id - STREAM_OFFSET;
 8002a52:	1e4d      	subs	r5, r1, #1
	if (id >= config->max_streams) {
 8002a54:	42ab      	cmp	r3, r5
{
 8002a56:	b082      	sub	sp, #8
	if (id >= config->max_streams) {
 8002a58:	d92b      	bls.n	8002ab2 <dma_stm32_stop+0x7a>
	LL_DMA_DisableIT_TC(dma, dma_stm32_id_to_stream(id));
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f000 fa6c 	bl	8002f38 <dma_stm32_id_to_stream>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <dma_stm32_stop+0x80>)
 8002a62:	5c1a      	ldrb	r2, [r3, r0]
 8002a64:	5993      	ldr	r3, [r2, r6]
 8002a66:	f023 0302 	bic.w	r3, r3, #2
 8002a6a:	5193      	str	r3, [r2, r6]
 8002a6c:	f241 348a 	movw	r4, #5002	; 0x138a
 8002a70:	e005      	b.n	8002a7e <dma_stm32_stop+0x46>
		if (count++ > (5 * 1000)) {
 8002a72:	3c01      	subs	r4, #1
 8002a74:	d009      	beq.n	8002a8a <dma_stm32_stop+0x52>
	return z_impl_k_sleep(timeout);
 8002a76:	200a      	movs	r0, #10
 8002a78:	2100      	movs	r1, #0
 8002a7a:	f006 fd3b 	bl	80094f4 <z_impl_k_sleep>
		if (stm32_dma_disable_stream(dma, id) == 0) {
 8002a7e:	4629      	mov	r1, r5
 8002a80:	4630      	mov	r0, r6
 8002a82:	f000 fab7 	bl	8002ff4 <stm32_dma_disable_stream>
 8002a86:	2800      	cmp	r0, #0
 8002a88:	d1f3      	bne.n	8002a72 <dma_stm32_stop+0x3a>
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8002a8a:	687b      	ldr	r3, [r7, #4]
	dma_stm32_clear_tc(dma, id);
 8002a8c:	4629      	mov	r1, r5
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8002a8e:	6918      	ldr	r0, [r3, #16]
	dma_stm32_clear_tc(dma, id);
 8002a90:	9001      	str	r0, [sp, #4]
 8002a92:	f000 fa5d 	bl	8002f50 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 8002a96:	9801      	ldr	r0, [sp, #4]
 8002a98:	4629      	mov	r1, r5
 8002a9a:	f000 fa53 	bl	8002f44 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 8002a9e:	9801      	ldr	r0, [sp, #4]
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	f000 fa91 	bl	8002fc8 <stm32_dma_clear_stream_irq>
	stream->busy = false;
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f888 0006 	strb.w	r0, [r8, #6]
}
 8002aac:	b002      	add	sp, #8
 8002aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
 8002ab2:	f06f 0015 	mvn.w	r0, #21
 8002ab6:	e7f9      	b.n	8002aac <dma_stm32_stop+0x74>
 8002ab8:	0800bfc8 	.word	0x0800bfc8

08002abc <dma_stm32_reload>:
{
 8002abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct dma_stm32_config *config = dev->config;
 8002ac0:	6840      	ldr	r0, [r0, #4]
{
 8002ac2:	4699      	mov	r9, r3
	if (id >= config->max_streams) {
 8002ac4:	6943      	ldr	r3, [r0, #20]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8002ac6:	6906      	ldr	r6, [r0, #16]
{
 8002ac8:	b083      	sub	sp, #12
	id = id - STREAM_OFFSET;
 8002aca:	1e4d      	subs	r5, r1, #1
	if (id >= config->max_streams) {
 8002acc:	42ab      	cmp	r3, r5
{
 8002ace:	9201      	str	r2, [sp, #4]
	if (id >= config->max_streams) {
 8002ad0:	d91e      	bls.n	8002b10 <dma_stm32_reload+0x54>
	stream = &config->streams[id];
 8002ad2:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8002ad6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8002ada:	ea4f 0bc7 	mov.w	fp, r7, lsl #3
 8002ade:	f241 348a 	movw	r4, #5002	; 0x138a
 8002ae2:	eb0a 07c7 	add.w	r7, sl, r7, lsl #3
	int count = 0;
 8002ae6:	e005      	b.n	8002af4 <dma_stm32_reload+0x38>
		if (count++ > (5 * 1000)) {
 8002ae8:	3c01      	subs	r4, #1
 8002aea:	d056      	beq.n	8002b9a <dma_stm32_reload+0xde>
 8002aec:	200a      	movs	r0, #10
 8002aee:	2100      	movs	r1, #0
 8002af0:	f006 fd00 	bl	80094f4 <z_impl_k_sleep>
		if (stm32_dma_disable_stream(dma, id) == 0) {
 8002af4:	4629      	mov	r1, r5
 8002af6:	4630      	mov	r0, r6
 8002af8:	f000 fa7c 	bl	8002ff4 <stm32_dma_disable_stream>
 8002afc:	4680      	mov	r8, r0
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d1f2      	bne.n	8002ae8 <dma_stm32_reload+0x2c>
	switch (stream->direction) {
 8002b02:	f85a 200b 	ldr.w	r2, [sl, fp]
 8002b06:	2a01      	cmp	r2, #1
 8002b08:	d008      	beq.n	8002b1c <dma_stm32_reload+0x60>
 8002b0a:	f032 0302 	bics.w	r3, r2, #2
 8002b0e:	d02c      	beq.n	8002b6a <dma_stm32_reload+0xae>
 8002b10:	f06f 0815 	mvn.w	r8, #21
}
 8002b14:	4640      	mov	r0, r8
 8002b16:	b003      	add	sp, #12
 8002b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), src);
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f000 fa0b 	bl	8002f38 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8002b22:	4c21      	ldr	r4, [pc, #132]	; (8002ba8 <dma_stm32_reload+0xec>)
 8002b24:	9b01      	ldr	r3, [sp, #4]
 8002b26:	5c22      	ldrb	r2, [r4, r0]
 8002b28:	4432      	add	r2, r6
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), dst);
 8002b2a:	4628      	mov	r0, r5
 8002b2c:	60d3      	str	r3, [r2, #12]
 8002b2e:	f000 fa03 	bl	8002f38 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8002b32:	5c22      	ldrb	r2, [r4, r0]
 8002b34:	4432      	add	r2, r6
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8002b36:	4628      	mov	r0, r5
 8002b38:	f8c2 9008 	str.w	r9, [r2, #8]
	if (stream->source_periph) {
 8002b3c:	793a      	ldrb	r2, [r7, #4]
 8002b3e:	b33a      	cbz	r2, 8002b90 <dma_stm32_reload+0xd4>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8002b40:	f000 f9fa 	bl	8002f38 <dma_stm32_id_to_stream>
 8002b44:	68ba      	ldr	r2, [r7, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8002b46:	5c20      	ldrb	r0, [r4, r0]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8002b48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b4e:	4430      	add	r0, r6
 8002b50:	6841      	ldr	r1, [r0, #4]
 8002b52:	0c09      	lsrs	r1, r1, #16
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	430a      	orrs	r2, r1
 8002b58:	6042      	str	r2, [r0, #4]
	stm32_dma_enable_stream(dma, id);
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	4630      	mov	r0, r6
 8002b5e:	f000 fa3b 	bl	8002fd8 <stm32_dma_enable_stream>
}
 8002b62:	4640      	mov	r0, r8
 8002b64:	b003      	add	sp, #12
 8002b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), src);
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	f000 f9e4 	bl	8002f38 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8002b70:	4c0d      	ldr	r4, [pc, #52]	; (8002ba8 <dma_stm32_reload+0xec>)
 8002b72:	9b01      	ldr	r3, [sp, #4]
 8002b74:	5c22      	ldrb	r2, [r4, r0]
 8002b76:	4432      	add	r2, r6
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), dst);
 8002b78:	4628      	mov	r0, r5
 8002b7a:	6093      	str	r3, [r2, #8]
 8002b7c:	f000 f9dc 	bl	8002f38 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8002b80:	5c22      	ldrb	r2, [r4, r0]
 8002b82:	4432      	add	r2, r6
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8002b84:	4628      	mov	r0, r5
 8002b86:	f8c2 900c 	str.w	r9, [r2, #12]
	if (stream->source_periph) {
 8002b8a:	793a      	ldrb	r2, [r7, #4]
 8002b8c:	2a00      	cmp	r2, #0
 8002b8e:	d1d7      	bne.n	8002b40 <dma_stm32_reload+0x84>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8002b90:	f000 f9d2 	bl	8002f38 <dma_stm32_id_to_stream>
 8002b94:	68fa      	ldr	r2, [r7, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8002b96:	5c20      	ldrb	r0, [r4, r0]
 8002b98:	e7d6      	b.n	8002b48 <dma_stm32_reload+0x8c>
		return -EBUSY;
 8002b9a:	f06f 080f 	mvn.w	r8, #15
}
 8002b9e:	4640      	mov	r0, r8
 8002ba0:	b003      	add	sp, #12
 8002ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ba6:	bf00      	nop
 8002ba8:	0800bfc8 	.word	0x0800bfc8

08002bac <dma_stm32_configure>:
{
 8002bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct dma_stm32_config *dev_config = dev->config;
 8002bb0:	6844      	ldr	r4, [r0, #4]
{
 8002bb2:	b08f      	sub	sp, #60	; 0x3c
 8002bb4:	4617      	mov	r7, r2
 8002bb6:	4682      	mov	sl, r0
	LL_DMA_StructInit(&DMA_InitStruct);
 8002bb8:	a803      	add	r0, sp, #12
	struct dma_stm32_stream *stream =
 8002bba:	f8d4 b018 	ldr.w	fp, [r4, #24]
	DMA_TypeDef *dma = (DMA_TypeDef *)dev_config->base;
 8002bbe:	6926      	ldr	r6, [r4, #16]
				&dev_config->streams[id - STREAM_OFFSET];
 8002bc0:	eb01 0841 	add.w	r8, r1, r1, lsl #1
	id = id - STREAM_OFFSET;
 8002bc4:	1e4d      	subs	r5, r1, #1
	LL_DMA_StructInit(&DMA_InitStruct);
 8002bc6:	f005 fa57 	bl	8008078 <LL_DMA_StructInit>
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 8002bca:	887b      	ldrh	r3, [r7, #2]
				&dev_config->streams[id - STREAM_OFFSET];
 8002bcc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 8002bd0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
				&dev_config->streams[id - STREAM_OFFSET];
 8002bd4:	f1a8 0818 	sub.w	r8, r8, #24
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 8002bd8:	f5b3 6ffe 	cmp.w	r3, #2032	; 0x7f0
	struct dma_stm32_stream *stream =
 8002bdc:	eb0b 0908 	add.w	r9, fp, r8
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 8002be0:	f000 8088 	beq.w	8002cf4 <dma_stm32_configure+0x148>
	if (id >= dev_config->max_streams) {
 8002be4:	6963      	ldr	r3, [r4, #20]
 8002be6:	42ab      	cmp	r3, r5
 8002be8:	d97e      	bls.n	8002ce8 <dma_stm32_configure+0x13c>
	if (stream->busy) {
 8002bea:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002bee:	f241 348a 	movw	r4, #5002	; 0x138a
 8002bf2:	b13b      	cbz	r3, 8002c04 <dma_stm32_configure+0x58>
 8002bf4:	e0a3      	b.n	8002d3e <dma_stm32_configure+0x192>
		if (count++ > (5 * 1000)) {
 8002bf6:	3c01      	subs	r4, #1
 8002bf8:	f000 80a1 	beq.w	8002d3e <dma_stm32_configure+0x192>
 8002bfc:	200a      	movs	r0, #10
 8002bfe:	2100      	movs	r1, #0
 8002c00:	f006 fc78 	bl	80094f4 <z_impl_k_sleep>
		if (stm32_dma_disable_stream(dma, id) == 0) {
 8002c04:	4629      	mov	r1, r5
 8002c06:	4630      	mov	r0, r6
 8002c08:	f000 f9f4 	bl	8002ff4 <stm32_dma_disable_stream>
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d1f2      	bne.n	8002bf6 <dma_stm32_configure+0x4a>
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8002c10:	f8da 2004 	ldr.w	r2, [sl, #4]
 8002c14:	9001      	str	r0, [sp, #4]
	dma_stm32_clear_tc(dma, id);
 8002c16:	4629      	mov	r1, r5
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8002c18:	6910      	ldr	r0, [r2, #16]
	dma_stm32_clear_tc(dma, id);
 8002c1a:	9000      	str	r0, [sp, #0]
 8002c1c:	f000 f998 	bl	8002f50 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 8002c20:	9800      	ldr	r0, [sp, #0]
 8002c22:	4629      	mov	r1, r5
 8002c24:	f000 f98e 	bl	8002f44 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 8002c28:	4629      	mov	r1, r5
 8002c2a:	9800      	ldr	r0, [sp, #0]
 8002c2c:	f000 f9cc 	bl	8002fc8 <stm32_dma_clear_stream_irq>
	if (config->head_block->block_size > DMA_STM32_MAX_DATA_ITEMS) {
 8002c30:	6939      	ldr	r1, [r7, #16]
 8002c32:	9b01      	ldr	r3, [sp, #4]
 8002c34:	694a      	ldr	r2, [r1, #20]
 8002c36:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002c3a:	d255      	bcs.n	8002ce8 <dma_stm32_configure+0x13c>
	if ((config->dest_data_size != config->source_data_size)) {
 8002c3c:	88fc      	ldrh	r4, [r7, #6]
 8002c3e:	f8b7 c004 	ldrh.w	ip, [r7, #4]
 8002c42:	4564      	cmp	r4, ip
 8002c44:	d150      	bne.n	8002ce8 <dma_stm32_configure+0x13c>
	if (config->source_data_size != 4U &&
 8002c46:	2c04      	cmp	r4, #4
 8002c48:	d002      	beq.n	8002c50 <dma_stm32_configure+0xa4>
	    config->source_data_size != 2U &&
 8002c4a:	1e62      	subs	r2, r4, #1
 8002c4c:	2a01      	cmp	r2, #1
 8002c4e:	d84b      	bhi.n	8002ce8 <dma_stm32_configure+0x13c>
	if (config->head_block->source_reload_en !=
 8002c50:	7f0a      	ldrb	r2, [r1, #28]
 8002c52:	f3c2 1080 	ubfx	r0, r2, #6, #1
 8002c56:	ebb0 1fd2 	cmp.w	r0, r2, lsr #7
 8002c5a:	d145      	bne.n	8002ce8 <dma_stm32_configure+0x13c>
	stream->direction	= config->channel_direction;
 8002c5c:	883a      	ldrh	r2, [r7, #0]
	stream->dma_callback	= config->dma_callback;
 8002c5e:	69b8      	ldr	r0, [r7, #24]
 8002c60:	f8c9 0014 	str.w	r0, [r9, #20]
	stream->direction	= config->channel_direction;
 8002c64:	f3c2 12c2 	ubfx	r2, r2, #7, #3
	stream->user_data       = config->user_data;
 8002c68:	6978      	ldr	r0, [r7, #20]
	stream->busy		= true;
 8002c6a:	f04f 0e01 	mov.w	lr, #1
 8002c6e:	f889 e006 	strb.w	lr, [r9, #6]
	stream->direction	= config->channel_direction;
 8002c72:	f84b 2008 	str.w	r2, [fp, r8]
	stream->user_data       = config->user_data;
 8002c76:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((config->head_block->dest_address == 0)) {
 8002c7a:	e9d1 e000 	ldrd	lr, r0, [r1]
	if (stream->direction == MEMORY_TO_PERIPHERAL) {
 8002c7e:	2a01      	cmp	r2, #1
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 8002c80:	bf0c      	ite	eq
 8002c82:	e9cd 0e03 	strdeq	r0, lr, [sp, #12]
		DMA_InitStruct.MemoryOrM2MDstAddress =
 8002c86:	e9cd e003 	strdne	lr, r0, [sp, #12]
	ret = dma_stm32_get_priority(config->channel_priority,
 8002c8a:	6838      	ldr	r0, [r7, #0]
	switch (priority) {
 8002c8c:	f3c0 3083 	ubfx	r0, r0, #14, #4
	stream->dst_size	= config->dest_data_size;
 8002c90:	e9c9 c402 	strd	ip, r4, [r9, #8]
	switch (priority) {
 8002c94:	2803      	cmp	r0, #3
 8002c96:	d827      	bhi.n	8002ce8 <dma_stm32_configure+0x13c>
 8002c98:	e8df f000 	tbb	[pc, r0]
 8002c9c:	024a463a 	.word	0x024a463a
		*ll_priority = LL_DMA_PRIORITY_VERYHIGH;
 8002ca0:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8002ca4:	900d      	str	r0, [sp, #52]	; 0x34
	switch (direction) {
 8002ca6:	2a01      	cmp	r2, #1
 8002ca8:	d036      	beq.n	8002d18 <dma_stm32_configure+0x16c>
 8002caa:	2a02      	cmp	r2, #2
 8002cac:	d044      	beq.n	8002d38 <dma_stm32_configure+0x18c>
 8002cae:	b9da      	cbnz	r2, 8002ce8 <dma_stm32_configure+0x13c>
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_MEMORY;
 8002cb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cb4:	9205      	str	r2, [sp, #20]
		memory_addr_adj = config->head_block->dest_addr_adj;
 8002cb6:	7f0a      	ldrb	r2, [r1, #28]
 8002cb8:	f3c2 1e01 	ubfx	lr, r2, #4, #2
		periph_addr_adj = config->head_block->source_addr_adj;
 8002cbc:	f3c2 0a81 	ubfx	sl, r2, #2, #2
	switch (increment) {
 8002cc0:	f1be 0f01 	cmp.w	lr, #1
	ret = dma_stm32_get_memory_increment(memory_addr_adj,
 8002cc4:	fa5f f08e 	uxtb.w	r0, lr
	switch (increment) {
 8002cc8:	d03f      	beq.n	8002d4a <dma_stm32_configure+0x19e>
 8002cca:	2802      	cmp	r0, #2
 8002ccc:	d040      	beq.n	8002d50 <dma_stm32_configure+0x1a4>
 8002cce:	b958      	cbnz	r0, 8002ce8 <dma_stm32_configure+0x13c>
		*ll_increment = LL_DMA_MEMORY_INCREMENT;
 8002cd0:	2080      	movs	r0, #128	; 0x80
 8002cd2:	9008      	str	r0, [sp, #32]
	switch (increment) {
 8002cd4:	f1ba 0f01 	cmp.w	sl, #1
	ret = dma_stm32_get_periph_increment(periph_addr_adj,
 8002cd8:	fa5f f08a 	uxtb.w	r0, sl
	switch (increment) {
 8002cdc:	d035      	beq.n	8002d4a <dma_stm32_configure+0x19e>
 8002cde:	2802      	cmp	r0, #2
 8002ce0:	f000 8095 	beq.w	8002e0e <dma_stm32_configure+0x262>
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	d036      	beq.n	8002d56 <dma_stm32_configure+0x1aa>
		return -EINVAL;
 8002ce8:	f06f 0315 	mvn.w	r3, #21
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	b00f      	add	sp, #60	; 0x3c
 8002cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		stream->busy = true;
 8002cf4:	2301      	movs	r3, #1
		stream->dma_callback = config->dma_callback;
 8002cf6:	69b9      	ldr	r1, [r7, #24]
		stream->user_data = config->user_data;
 8002cf8:	697a      	ldr	r2, [r7, #20]
		stream->busy = true;
 8002cfa:	f889 3006 	strb.w	r3, [r9, #6]
		stream->hal_override = true;
 8002cfe:	f889 3005 	strb.w	r3, [r9, #5]
		return 0;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
		stream->user_data = config->user_data;
 8002d06:	e9c9 2104 	strd	r2, r1, [r9, #16]
}
 8002d0a:	b00f      	add	sp, #60	; 0x3c
 8002d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*ll_priority = LL_DMA_PRIORITY_LOW;
 8002d10:	2000      	movs	r0, #0
	switch (direction) {
 8002d12:	2a01      	cmp	r2, #1
		*ll_priority = LL_DMA_PRIORITY_LOW;
 8002d14:	900d      	str	r0, [sp, #52]	; 0x34
	switch (direction) {
 8002d16:	d1c8      	bne.n	8002caa <dma_stm32_configure+0xfe>
		memory_addr_adj = config->head_block->source_addr_adj;
 8002d18:	7f0a      	ldrb	r2, [r1, #28]
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8002d1a:	2010      	movs	r0, #16
 8002d1c:	9005      	str	r0, [sp, #20]
		memory_addr_adj = config->head_block->source_addr_adj;
 8002d1e:	f3c2 0e81 	ubfx	lr, r2, #2, #2
		periph_addr_adj = config->head_block->dest_addr_adj;
 8002d22:	f3c2 1a01 	ubfx	sl, r2, #4, #2
		break;
 8002d26:	e7cb      	b.n	8002cc0 <dma_stm32_configure+0x114>
		*ll_priority = LL_DMA_PRIORITY_MEDIUM;
 8002d28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d2c:	900d      	str	r0, [sp, #52]	; 0x34
	if (ret < 0) {
 8002d2e:	e7ba      	b.n	8002ca6 <dma_stm32_configure+0xfa>
		*ll_priority = LL_DMA_PRIORITY_HIGH;
 8002d30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d34:	900d      	str	r0, [sp, #52]	; 0x34
	if (ret < 0) {
 8002d36:	e7b6      	b.n	8002ca6 <dma_stm32_configure+0xfa>
		*ll_direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8002d38:	2200      	movs	r2, #0
 8002d3a:	9205      	str	r2, [sp, #20]
	if (ret < 0) {
 8002d3c:	e7bb      	b.n	8002cb6 <dma_stm32_configure+0x10a>
		return -EBUSY;
 8002d3e:	f06f 030f 	mvn.w	r3, #15
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	b00f      	add	sp, #60	; 0x3c
 8002d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
 8002d4a:	f06f 0385 	mvn.w	r3, #133	; 0x85
 8002d4e:	e7cd      	b.n	8002cec <dma_stm32_configure+0x140>
		*ll_increment = LL_DMA_MEMORY_NOINCREMENT;
 8002d50:	2000      	movs	r0, #0
 8002d52:	9008      	str	r0, [sp, #32]
	if (ret < 0) {
 8002d54:	e7be      	b.n	8002cd4 <dma_stm32_configure+0x128>
		*ll_increment = LL_DMA_PERIPH_INCREMENT;
 8002d56:	2040      	movs	r0, #64	; 0x40
 8002d58:	9007      	str	r0, [sp, #28]
	stream->source_periph = (stream->direction == PERIPHERAL_TO_MEMORY);
 8002d5a:	f85b 0008 	ldr.w	r0, [fp, r8]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8002d5e:	6949      	ldr	r1, [r1, #20]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = table_p_size[index];
 8002d60:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8002e18 <dma_stm32_configure+0x26c>
 8002d64:	9300      	str	r3, [sp, #0]
		DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8002d66:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d6a:	bf14      	ite	ne
 8002d6c:	2220      	movne	r2, #32
 8002d6e:	2200      	moveq	r2, #0
 8002d70:	9206      	str	r2, [sp, #24]
	stream->source_periph = (stream->direction == PERIPHERAL_TO_MEMORY);
 8002d72:	f1a0 0202 	sub.w	r2, r0, #2
 8002d76:	fab2 f282 	clz	r2, r2
 8002d7a:	0952      	lsrs	r2, r2, #5
 8002d7c:	f889 2004 	strb.w	r2, [r9, #4]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8002d80:	f1bc 0f00 	cmp.w	ip, #0
 8002d84:	fa9c f2ac 	rbit	r2, ip
 8002d88:	fab2 f282 	clz	r2, r2
 8002d8c:	bf08      	it	eq
 8002d8e:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
 8002d92:	2c00      	cmp	r4, #0
	DMA_InitStruct.PeriphOrM2MSrcDataSize = table_p_size[index];
 8002d94:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8002d98:	9209      	str	r2, [sp, #36]	; 0x24
 8002d9a:	fa94 f2a4 	rbit	r2, r4
	DMA_InitStruct.MemoryOrM2MDstDataSize = table_m_size[index];
 8002d9e:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8002e1c <dma_stm32_configure+0x270>
 8002da2:	fab2 f282 	clz	r2, r2
 8002da6:	bf08      	it	eq
 8002da8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
	if (stream->source_periph) {
 8002dac:	2802      	cmp	r0, #2
	DMA_InitStruct.MemoryOrM2MDstDataSize = table_m_size[index];
 8002dae:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8002db2:	920a      	str	r2, [sp, #40]	; 0x28
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 8002db4:	783a      	ldrb	r2, [r7, #0]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8002db6:	bf18      	it	ne
 8002db8:	fbb1 f1f4 	udivne	r1, r1, r4
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 8002dbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	LL_DMA_Init(dma, dma_stm32_id_to_stream(id), &DMA_InitStruct);
 8002dc0:	4628      	mov	r0, r5
		DMA_InitStruct.NbData = config->head_block->block_size /
 8002dc2:	bf08      	it	eq
 8002dc4:	fbb1 f1fc 	udiveq	r1, r1, ip
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 8002dc8:	920c      	str	r2, [sp, #48]	; 0x30
 8002dca:	910b      	str	r1, [sp, #44]	; 0x2c
	LL_DMA_Init(dma, dma_stm32_id_to_stream(id), &DMA_InitStruct);
 8002dcc:	f000 f8b4 	bl	8002f38 <dma_stm32_id_to_stream>
 8002dd0:	aa03      	add	r2, sp, #12
 8002dd2:	4601      	mov	r1, r0
 8002dd4:	4630      	mov	r0, r6
 8002dd6:	f005 f911 	bl	8007ffc <LL_DMA_Init>
	LL_DMA_EnableIT_TC(dma, dma_stm32_id_to_stream(id));
 8002dda:	4628      	mov	r0, r5
 8002ddc:	f000 f8ac 	bl	8002f38 <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8002de0:	4c0c      	ldr	r4, [pc, #48]	; (8002e14 <dma_stm32_configure+0x268>)
	if (config->head_block->source_reload_en) {
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	5c21      	ldrb	r1, [r4, r0]
 8002de6:	7f17      	ldrb	r7, [r2, #28]
 8002de8:	598a      	ldr	r2, [r1, r6]
 8002dea:	9b00      	ldr	r3, [sp, #0]
 8002dec:	f042 0202 	orr.w	r2, r2, #2
 8002df0:	f017 0f40 	tst.w	r7, #64	; 0x40
 8002df4:	518a      	str	r2, [r1, r6]
 8002df6:	f43f af79 	beq.w	8002cec <dma_stm32_configure+0x140>
		LL_DMA_EnableIT_HT(dma, dma_stm32_id_to_stream(id));
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	f000 f89c 	bl	8002f38 <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8002e00:	5c21      	ldrb	r1, [r4, r0]
}
 8002e02:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8002e04:	598a      	ldr	r2, [r1, r6]
 8002e06:	f042 0204 	orr.w	r2, r2, #4
 8002e0a:	518a      	str	r2, [r1, r6]
}
 8002e0c:	e76e      	b.n	8002cec <dma_stm32_configure+0x140>
		*ll_increment = LL_DMA_PERIPH_NOINCREMENT;
 8002e0e:	2000      	movs	r0, #0
 8002e10:	9007      	str	r0, [sp, #28]
	if (ret < 0) {
 8002e12:	e7a2      	b.n	8002d5a <dma_stm32_configure+0x1ae>
 8002e14:	0800bfc8 	.word	0x0800bfc8
 8002e18:	0800c018 	.word	0x0800c018
 8002e1c:	0800c00c 	.word	0x0800c00c

08002e20 <LL_DMA_IsActiveFlag_TC1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8002e20:	6800      	ldr	r0, [r0, #0]
}
 8002e22:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002e26:	4770      	bx	lr

08002e28 <LL_DMA_IsActiveFlag_TC2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8002e28:	6800      	ldr	r0, [r0, #0]
}
 8002e2a:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8002e2e:	4770      	bx	lr

08002e30 <LL_DMA_IsActiveFlag_TC3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8002e30:	6800      	ldr	r0, [r0, #0]
}
 8002e32:	f3c0 2040 	ubfx	r0, r0, #9, #1
 8002e36:	4770      	bx	lr

08002e38 <LL_DMA_IsActiveFlag_TC4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 8002e38:	6800      	ldr	r0, [r0, #0]
}
 8002e3a:	f3c0 3040 	ubfx	r0, r0, #13, #1
 8002e3e:	4770      	bx	lr

08002e40 <LL_DMA_IsActiveFlag_TC5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 8002e40:	6800      	ldr	r0, [r0, #0]
}
 8002e42:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002e46:	4770      	bx	lr

08002e48 <LL_DMA_IsActiveFlag_TC6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 8002e48:	6800      	ldr	r0, [r0, #0]
}
 8002e4a:	f3c0 5040 	ubfx	r0, r0, #21, #1
 8002e4e:	4770      	bx	lr

08002e50 <LL_DMA_IsActiveFlag_TC7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
 8002e50:	6800      	ldr	r0, [r0, #0]
}
 8002e52:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8002e56:	4770      	bx	lr

08002e58 <LL_DMA_IsActiveFlag_HT1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 8002e58:	6800      	ldr	r0, [r0, #0]
}
 8002e5a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002e5e:	4770      	bx	lr

08002e60 <LL_DMA_IsActiveFlag_HT2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2)) ? 1UL : 0UL);
 8002e60:	6800      	ldr	r0, [r0, #0]
}
 8002e62:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8002e66:	4770      	bx	lr

08002e68 <LL_DMA_IsActiveFlag_HT3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3)) ? 1UL : 0UL);
 8002e68:	6800      	ldr	r0, [r0, #0]
}
 8002e6a:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8002e6e:	4770      	bx	lr

08002e70 <LL_DMA_IsActiveFlag_HT4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4)) ? 1UL : 0UL);
 8002e70:	6800      	ldr	r0, [r0, #0]
}
 8002e72:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8002e76:	4770      	bx	lr

08002e78 <LL_DMA_IsActiveFlag_HT5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5)) ? 1UL : 0UL);
 8002e78:	6800      	ldr	r0, [r0, #0]
}
 8002e7a:	f3c0 4080 	ubfx	r0, r0, #18, #1
 8002e7e:	4770      	bx	lr

08002e80 <LL_DMA_IsActiveFlag_HT6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6)) ? 1UL : 0UL);
 8002e80:	6800      	ldr	r0, [r0, #0]
}
 8002e82:	f3c0 5080 	ubfx	r0, r0, #22, #1
 8002e86:	4770      	bx	lr

08002e88 <LL_DMA_IsActiveFlag_HT7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7)) ? 1UL : 0UL);
 8002e88:	6800      	ldr	r0, [r0, #0]
}
 8002e8a:	f3c0 6080 	ubfx	r0, r0, #26, #1
 8002e8e:	4770      	bx	lr

08002e90 <LL_DMA_ClearFlag_TC1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8002e90:	2302      	movs	r3, #2
 8002e92:	6043      	str	r3, [r0, #4]
}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop

08002e98 <LL_DMA_ClearFlag_TC2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8002e98:	2320      	movs	r3, #32
 8002e9a:	6043      	str	r3, [r0, #4]
}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop

08002ea0 <LL_DMA_ClearFlag_TC3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8002ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea4:	6043      	str	r3, [r0, #4]
}
 8002ea6:	4770      	bx	lr

08002ea8 <LL_DMA_ClearFlag_TC4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8002ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eac:	6043      	str	r3, [r0, #4]
}
 8002eae:	4770      	bx	lr

08002eb0 <LL_DMA_ClearFlag_TC5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8002eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb4:	6043      	str	r3, [r0, #4]
}
 8002eb6:	4770      	bx	lr

08002eb8 <LL_DMA_ClearFlag_TC6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8002eb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ebc:	6043      	str	r3, [r0, #4]
}
 8002ebe:	4770      	bx	lr

08002ec0 <LL_DMA_ClearFlag_TC7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8002ec0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ec4:	6043      	str	r3, [r0, #4]
}
 8002ec6:	4770      	bx	lr

08002ec8 <LL_DMA_ClearFlag_HT1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8002ec8:	2304      	movs	r3, #4
 8002eca:	6043      	str	r3, [r0, #4]
}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop

08002ed0 <LL_DMA_ClearFlag_HT2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF2);
 8002ed0:	2340      	movs	r3, #64	; 0x40
 8002ed2:	6043      	str	r3, [r0, #4]
}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop

08002ed8 <LL_DMA_ClearFlag_HT3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 8002ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002edc:	6043      	str	r3, [r0, #4]
}
 8002ede:	4770      	bx	lr

08002ee0 <LL_DMA_ClearFlag_HT4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF4);
 8002ee0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ee4:	6043      	str	r3, [r0, #4]
}
 8002ee6:	4770      	bx	lr

08002ee8 <LL_DMA_ClearFlag_HT5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 8002ee8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002eec:	6043      	str	r3, [r0, #4]
}
 8002eee:	4770      	bx	lr

08002ef0 <LL_DMA_ClearFlag_HT6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8002ef0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ef4:	6043      	str	r3, [r0, #4]
}
 8002ef6:	4770      	bx	lr

08002ef8 <LL_DMA_ClearFlag_HT7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
 8002ef8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002efc:	6043      	str	r3, [r0, #4]
}
 8002efe:	4770      	bx	lr

08002f00 <LL_DMA_ClearFlag_TE1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8002f00:	2308      	movs	r3, #8
 8002f02:	6043      	str	r3, [r0, #4]
}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop

08002f08 <LL_DMA_ClearFlag_TE2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	6043      	str	r3, [r0, #4]
}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop

08002f10 <LL_DMA_ClearFlag_TE3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 8002f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f14:	6043      	str	r3, [r0, #4]
}
 8002f16:	4770      	bx	lr

08002f18 <LL_DMA_ClearFlag_TE4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
 8002f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1c:	6043      	str	r3, [r0, #4]
}
 8002f1e:	4770      	bx	lr

08002f20 <LL_DMA_ClearFlag_TE5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
 8002f20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f24:	6043      	str	r3, [r0, #4]
}
 8002f26:	4770      	bx	lr

08002f28 <LL_DMA_ClearFlag_TE6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF6);
 8002f28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002f2c:	6043      	str	r3, [r0, #4]
}
 8002f2e:	4770      	bx	lr

08002f30 <LL_DMA_ClearFlag_TE7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF7);
 8002f30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f34:	6043      	str	r3, [r0, #4]
}
 8002f36:	4770      	bx	lr

08002f38 <dma_stm32_id_to_stream>:
#endif /* LL_DMA_CHANNEL_6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(stream_nr));

	return stream_nr[id];
 8002f38:	4b01      	ldr	r3, [pc, #4]	; (8002f40 <dma_stm32_id_to_stream+0x8>)
}
 8002f3a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002f3e:	4770      	bx	lr
 8002f40:	0800c0b8 	.word	0x0800c0b8

08002f44 <dma_stm32_clear_ht>:
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8002f44:	4b01      	ldr	r3, [pc, #4]	; (8002f4c <dma_stm32_clear_ht+0x8>)
 8002f46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f4a:	4718      	bx	r3
 8002f4c:	0800c09c 	.word	0x0800c09c

08002f50 <dma_stm32_clear_tc>:
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8002f50:	4b01      	ldr	r3, [pc, #4]	; (8002f58 <dma_stm32_clear_tc+0x8>)
 8002f52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f56:	4718      	bx	r3
 8002f58:	0800c080 	.word	0x0800c080

08002f5c <stm32_dma_dump_stream_irq>:
	LOG_INF("tc: %d, ht: %d, te: %d, gi: %d",
		dma_stm32_is_tc_active(dma, id),
		dma_stm32_is_ht_active(dma, id),
		dma_stm32_is_te_active(dma, id),
		dma_stm32_is_gi_active(dma, id));
}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop

08002f60 <stm32_dma_is_tc_irq_active>:

bool stm32_dma_is_tc_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8002f60:	b508      	push	{r3, lr}
	return stream_nr[id];
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <stm32_dma_is_tc_irq_active+0x28>)
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8002f64:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <stm32_dma_is_tc_irq_active+0x2c>)
 8002f66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f6a:	5cd2      	ldrb	r2, [r2, r3]
 8002f6c:	5883      	ldr	r3, [r0, r2]
                   DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 8002f6e:	f013 0302 	ands.w	r3, r3, #2
 8002f72:	d007      	beq.n	8002f84 <stm32_dma_is_tc_irq_active+0x24>
	return func[id](DMAx);
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <stm32_dma_is_tc_irq_active+0x30>)
 8002f76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f7a:	4798      	blx	r3
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 8002f7c:	3800      	subs	r0, #0
 8002f7e:	bf18      	it	ne
 8002f80:	2001      	movne	r0, #1
	       dma_stm32_is_tc_active(dma, id);
}
 8002f82:	bd08      	pop	{r3, pc}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd08      	pop	{r3, pc}
 8002f88:	0800c0b8 	.word	0x0800c0b8
 8002f8c:	0800c024 	.word	0x0800c024
 8002f90:	0800c048 	.word	0x0800c048

08002f94 <stm32_dma_is_ht_irq_active>:

bool stm32_dma_is_ht_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8002f94:	b508      	push	{r3, lr}
	return stream_nr[id];
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <stm32_dma_is_ht_irq_active+0x28>)
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8002f98:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <stm32_dma_is_ht_irq_active+0x2c>)
 8002f9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f9e:	5cd2      	ldrb	r2, [r2, r3]
 8002fa0:	5883      	ldr	r3, [r0, r2]
                   DMA_CCR_HTIE) == (DMA_CCR_HTIE)) ? 1UL : 0UL);
 8002fa2:	f013 0304 	ands.w	r3, r3, #4
 8002fa6:	d007      	beq.n	8002fb8 <stm32_dma_is_ht_irq_active+0x24>
	return func[id](DMAx);
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <stm32_dma_is_ht_irq_active+0x30>)
 8002faa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002fae:	4798      	blx	r3
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8002fb0:	3800      	subs	r0, #0
 8002fb2:	bf18      	it	ne
 8002fb4:	2001      	movne	r0, #1
	       dma_stm32_is_ht_active(dma, id);
}
 8002fb6:	bd08      	pop	{r3, pc}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd08      	pop	{r3, pc}
 8002fbc:	0800c0b8 	.word	0x0800c0b8
 8002fc0:	0800c024 	.word	0x0800c024
 8002fc4:	0800c064 	.word	0x0800c064

08002fc8 <stm32_dma_clear_stream_irq>:
 8002fc8:	4b01      	ldr	r3, [pc, #4]	; (8002fd0 <stm32_dma_clear_stream_irq+0x8>)
 8002fca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002fce:	4718      	bx	r3
 8002fd0:	0800c02c 	.word	0x0800c02c

08002fd4 <stm32_dma_is_unexpected_irq_happened>:

bool stm32_dma_is_unexpected_irq_happened(DMA_TypeDef *dma, uint32_t id)
{
	/* Preserve for future amending. */
	return false;
}
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	4770      	bx	lr

08002fd8 <stm32_dma_enable_stream>:
	return stream_nr[id];
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <stm32_dma_enable_stream+0x14>)
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8002fda:	4a05      	ldr	r2, [pc, #20]	; (8002ff0 <stm32_dma_enable_stream+0x18>)
 8002fdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002fe0:	5cd2      	ldrb	r2, [r2, r3]
 8002fe2:	5883      	ldr	r3, [r0, r2]
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	5083      	str	r3, [r0, r2]

void stm32_dma_enable_stream(DMA_TypeDef *dma, uint32_t id)
{
	LL_DMA_EnableChannel(dma, dma_stm32_id_to_stream(id));
}
 8002fea:	4770      	bx	lr
 8002fec:	0800c0b8 	.word	0x0800c0b8
 8002ff0:	0800c024 	.word	0x0800c024

08002ff4 <stm32_dma_disable_stream>:
	return stream_nr[id];
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <stm32_dma_disable_stream+0x24>)
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <stm32_dma_disable_stream+0x28>)
 8002ff8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ffc:	5cd3      	ldrb	r3, [r2, r3]
 8002ffe:	58c2      	ldr	r2, [r0, r3]
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	50c2      	str	r2, [r0, r3]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8003006:	58c3      	ldr	r3, [r0, r3]
int stm32_dma_disable_stream(DMA_TypeDef *dma, uint32_t id)
{
	LL_DMA_DisableChannel(dma, dma_stm32_id_to_stream(id));

	if (!LL_DMA_IsEnabledChannel(dma, dma_stm32_id_to_stream(id))) {
		return 0;
 8003008:	f013 0f01 	tst.w	r3, #1
	}

	return -EAGAIN;
}
 800300c:	bf14      	ite	ne
 800300e:	f06f 000a 	mvnne.w	r0, #10
 8003012:	2000      	moveq	r0, #0
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	0800c0b8 	.word	0x0800c0b8
 800301c:	0800c024 	.word	0x0800c024

08003020 <gpio_stm32_port_get_raw>:
}

static int gpio_stm32_port_get_raw(const struct device *dev, uint32_t *value)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003020:	6843      	ldr	r3, [r0, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8003024:	691b      	ldr	r3, [r3, #16]

	*value = LL_GPIO_ReadInputPort(gpio);
 8003026:	600b      	str	r3, [r1, #0]

	return 0;
}
 8003028:	2000      	movs	r0, #0
 800302a:	4770      	bx	lr

0800302c <gpio_stm32_port_set_masked_raw>:
static int gpio_stm32_port_set_masked_raw(const struct device *dev,
					  gpio_port_pins_t mask,
					  gpio_port_value_t value)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800302c:	6843      	ldr	r3, [r0, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
{
 8003030:	b410      	push	{r4}
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8003032:	695c      	ldr	r4, [r3, #20]
	uint32_t port_value;

	z_stm32_hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);

	port_value = LL_GPIO_ReadOutputPort(gpio);
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8003034:	4062      	eors	r2, r4
 8003036:	400a      	ands	r2, r1
 8003038:	4062      	eors	r2, r4

	z_stm32_hsem_unlock(CFG_HW_GPIO_SEMID);

	return 0;
}
 800303a:	2000      	movs	r0, #0
 800303c:	f85d 4b04 	ldr.w	r4, [sp], #4
  WRITE_REG(GPIOx->ODR, PortValue);
 8003040:	615a      	str	r2, [r3, #20]
 8003042:	4770      	bx	lr

08003044 <gpio_stm32_port_set_bits_raw>:

static int gpio_stm32_port_set_bits_raw(const struct device *dev,
					gpio_port_pins_t pins)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003044:	6843      	ldr	r3, [r0, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
	 * Skip it and use CMSIS API directly. Valid also on other series.
	 */
	WRITE_REG(gpio->BSRR, pins);

	return 0;
}
 8003048:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 800304a:	6199      	str	r1, [r3, #24]
}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop

08003050 <gpio_stm32_port_clear_bits_raw>:

static int gpio_stm32_port_clear_bits_raw(const struct device *dev,
					  gpio_port_pins_t pins)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003050:	6843      	ldr	r3, [r0, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
	/* On other series, LL abstraction is needed  */
	LL_GPIO_ResetOutputPin(gpio, pins);
#endif

	return 0;
}
 8003054:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8003056:	6299      	str	r1, [r3, #40]	; 0x28
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop

0800305c <gpio_stm32_port_toggle_bits>:

static int gpio_stm32_port_toggle_bits(const struct device *dev,
				       gpio_port_pins_t pins)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800305c:	6843      	ldr	r3, [r0, #4]
 800305e:	685a      	ldr	r2, [r3, #4]
	/*
	 * On F1 series, using LL API requires a costly pin mask translation.
	 * Skip it and use CMSIS API directly. Valid also on other series.
	 */
	z_stm32_hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8003060:	6953      	ldr	r3, [r2, #20]
 8003062:	4059      	eors	r1, r3
	z_stm32_hsem_unlock(CFG_HW_GPIO_SEMID);

	return 0;
}
 8003064:	2000      	movs	r0, #0
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8003066:	6151      	str	r1, [r2, #20]
}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop

0800306c <gpio_stm32_manage_callback>:
}

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 800306c:	b470      	push	{r4, r5, r6}
	struct gpio_stm32_data *data = dev->data;
 800306e:	6905      	ldr	r5, [r0, #16]
	return list->head;
 8003070:	68ae      	ldr	r6, [r5, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8003072:	b1e6      	cbz	r6, 80030ae <gpio_stm32_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 8003074:	4633      	mov	r3, r6
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8003076:	2400      	movs	r4, #0
 8003078:	e000      	b.n	800307c <gpio_stm32_manage_callback+0x10>
 800307a:	4603      	mov	r3, r0
 800307c:	4299      	cmp	r1, r3
 800307e:	d00d      	beq.n	800309c <gpio_stm32_manage_callback+0x30>
	return node->next;
 8003080:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8003082:	461c      	mov	r4, r3
 8003084:	2800      	cmp	r0, #0
 8003086:	d1f8      	bne.n	800307a <gpio_stm32_manage_callback+0xe>
			if (!set) {
				return -EINVAL;
 8003088:	f06f 0015 	mvn.w	r0, #21
			if (!set) {
 800308c:	b122      	cbz	r2, 8003098 <gpio_stm32_manage_callback+0x2c>
Z_GENLIST_PREPEND(slist, snode)
 800308e:	68e8      	ldr	r0, [r5, #12]
	parent->next = child;
 8003090:	600e      	str	r6, [r1, #0]
	list->head = node;
 8003092:	60a9      	str	r1, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
 8003094:	b198      	cbz	r0, 80030be <gpio_stm32_manage_callback+0x52>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8003096:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 8003098:	bc70      	pop	{r4, r5, r6}
 800309a:	4770      	bx	lr
	return node->next;
 800309c:	680b      	ldr	r3, [r1, #0]
	return list->tail;
 800309e:	68e8      	ldr	r0, [r5, #12]
Z_GENLIST_REMOVE(slist, snode)
 80030a0:	b184      	cbz	r4, 80030c4 <gpio_stm32_manage_callback+0x58>
 80030a2:	4281      	cmp	r1, r0
	parent->next = child;
 80030a4:	6023      	str	r3, [r4, #0]
	list->tail = node;
 80030a6:	bf08      	it	eq
 80030a8:	60ec      	streq	r4, [r5, #12]
	parent->next = child;
 80030aa:	2300      	movs	r3, #0
 80030ac:	600b      	str	r3, [r1, #0]
	if (set) {
 80030ae:	2a00      	cmp	r2, #0
 80030b0:	d0f1      	beq.n	8003096 <gpio_stm32_manage_callback+0x2a>
Z_GENLIST_PREPEND(slist, snode)
 80030b2:	68e8      	ldr	r0, [r5, #12]
	return list->head;
 80030b4:	68ae      	ldr	r6, [r5, #8]
	parent->next = child;
 80030b6:	600e      	str	r6, [r1, #0]
	list->head = node;
 80030b8:	60a9      	str	r1, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d1eb      	bne.n	8003096 <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 80030be:	60e9      	str	r1, [r5, #12]
 80030c0:	bc70      	pop	{r4, r5, r6}
 80030c2:	4770      	bx	lr
Z_GENLIST_REMOVE(slist, snode)
 80030c4:	4281      	cmp	r1, r0
	list->head = node;
 80030c6:	60ab      	str	r3, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
 80030c8:	d1ef      	bne.n	80030aa <gpio_stm32_manage_callback+0x3e>
	list->tail = node;
 80030ca:	60eb      	str	r3, [r5, #12]
}
 80030cc:	e7ed      	b.n	80030aa <gpio_stm32_manage_callback+0x3e>
 80030ce:	bf00      	nop

080030d0 <gpio_stm32_pin_interrupt_configure>:
{
 80030d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (mode == GPIO_INT_MODE_DISABLED) {
 80030d4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 80030d8:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 80030da:	6900      	ldr	r0, [r0, #16]
{
 80030dc:	b083      	sub	sp, #12
 80030de:	460c      	mov	r4, r1
	if (mode == GPIO_INT_MODE_DISABLED) {
 80030e0:	d057      	beq.n	8003192 <gpio_stm32_pin_interrupt_configure+0xc2>
	if (mode == GPIO_INT_MODE_LEVEL) {
 80030e2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80030e6:	d07d      	beq.n	80031e4 <gpio_stm32_pin_interrupt_configure+0x114>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 80030e8:	4602      	mov	r2, r0
 80030ea:	4940      	ldr	r1, [pc, #256]	; (80031ec <gpio_stm32_pin_interrupt_configure+0x11c>)
 80030ec:	4620      	mov	r0, r4
 80030ee:	461d      	mov	r5, r3
 80030f0:	f7ff fa72 	bl	80025d8 <stm32_exti_set_callback>
 80030f4:	4606      	mov	r6, r0
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d171      	bne.n	80031de <gpio_stm32_pin_interrupt_configure+0x10e>
	struct stm32_pclken pclken = {
 80030fa:	4b3d      	ldr	r3, [pc, #244]	; (80031f0 <gpio_stm32_pin_interrupt_configure+0x120>)
	gpio_stm32_enable_int(cfg->port, pin);
 80030fc:	f8d7 8008 	ldr.w	r8, [r7, #8]
	struct stm32_pclken pclken = {
 8003100:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003104:	466f      	mov	r7, sp
 8003106:	e887 0003 	stmia.w	r7, {r0, r1}
 800310a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80031f8 <gpio_stm32_pin_interrupt_configure+0x128>
 800310e:	4648      	mov	r0, r9
 8003110:	f005 f910 	bl	8008334 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8003114:	b130      	cbz	r0, 8003124 <gpio_stm32_pin_interrupt_configure+0x54>
	return api->on(dev, sys);
 8003116:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800311a:	4639      	mov	r1, r7
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4648      	mov	r0, r9
 8003120:	4798      	blx	r3
	if (ret != 0) {
 8003122:	b1a0      	cbz	r0, 800314e <gpio_stm32_pin_interrupt_configure+0x7e>
	switch (trig) {
 8003124:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8003128:	d02f      	beq.n	800318a <gpio_stm32_pin_interrupt_configure+0xba>
 800312a:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 800312e:	d02e      	beq.n	800318e <gpio_stm32_pin_interrupt_configure+0xbe>
 8003130:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8003134:	bf14      	ite	ne
 8003136:	2100      	movne	r1, #0
 8003138:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 800313a:	4620      	mov	r0, r4
 800313c:	f7ff fa14 	bl	8002568 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff f9f1 	bl	8002528 <stm32_exti_enable>
}
 8003146:	4630      	mov	r0, r6
 8003148:	b003      	add	sp, #12
 800314a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800314e:	f004 0203 	and.w	r2, r4, #3
 8003152:	3204      	adds	r2, #4
 8003154:	0093      	lsls	r3, r2, #2
 8003156:	220f      	movs	r2, #15
 8003158:	409a      	lsls	r2, r3
 800315a:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800315e:	b2d3      	uxtb	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003166:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800316a:	0c11      	lsrs	r1, r2, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8003170:	fab1 f181 	clz	r1, r1
 8003174:	fa08 f801 	lsl.w	r8, r8, r1
 8003178:	6899      	ldr	r1, [r3, #8]
 800317a:	ea21 4212 	bic.w	r2, r1, r2, lsr #16
 800317e:	ea48 0202 	orr.w	r2, r8, r2
	switch (trig) {
 8003182:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	d1cf      	bne.n	800312a <gpio_stm32_pin_interrupt_configure+0x5a>
		edge = STM32_EXTI_TRIG_RISING;
 800318a:	2101      	movs	r1, #1
 800318c:	e7d5      	b.n	800313a <gpio_stm32_pin_interrupt_configure+0x6a>
		edge = STM32_EXTI_TRIG_BOTH;
 800318e:	2103      	movs	r1, #3
 8003190:	e7d3      	b.n	800313a <gpio_stm32_pin_interrupt_configure+0x6a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8003192:	f001 0303 	and.w	r3, r1, #3
 8003196:	3304      	adds	r3, #4
 8003198:	009a      	lsls	r2, r3, #2
 800319a:	230f      	movs	r3, #15
 800319c:	4093      	lsls	r3, r2
 800319e:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	4913      	ldr	r1, [pc, #76]	; (80031f4 <gpio_stm32_pin_interrupt_configure+0x124>)
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80031a6:	68b8      	ldr	r0, [r7, #8]
 80031a8:	3202      	adds	r2, #2
 80031aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80031ae:	0c19      	lsrs	r1, r3, #16
 80031b0:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 80031b8:	fab2 f282 	clz	r2, r2
 80031bc:	40d3      	lsrs	r3, r2
 80031be:	4298      	cmp	r0, r3
 80031c0:	d001      	beq.n	80031c6 <gpio_stm32_pin_interrupt_configure+0xf6>
	int err = 0;
 80031c2:	2600      	movs	r6, #0
 80031c4:	e7bf      	b.n	8003146 <gpio_stm32_pin_interrupt_configure+0x76>
			stm32_exti_disable(pin);
 80031c6:	4620      	mov	r0, r4
 80031c8:	f7ff f9c0 	bl	800254c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80031cc:	4620      	mov	r0, r4
 80031ce:	f7ff fa17 	bl	8002600 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80031d2:	2100      	movs	r1, #0
 80031d4:	4620      	mov	r0, r4
 80031d6:	f7ff f9c7 	bl	8002568 <stm32_exti_trigger>
	int err = 0;
 80031da:	2600      	movs	r6, #0
 80031dc:	e7b3      	b.n	8003146 <gpio_stm32_pin_interrupt_configure+0x76>
		err = -EBUSY;
 80031de:	f06f 060f 	mvn.w	r6, #15
	return err;
 80031e2:	e7b0      	b.n	8003146 <gpio_stm32_pin_interrupt_configure+0x76>
		err = -ENOTSUP;
 80031e4:	f06f 0685 	mvn.w	r6, #133	; 0x85
 80031e8:	e7ad      	b.n	8003146 <gpio_stm32_pin_interrupt_configure+0x76>
 80031ea:	bf00      	nop
 80031ec:	080033ad 	.word	0x080033ad
 80031f0:	0800bc08 	.word	0x0800bc08
 80031f4:	40010000 	.word	0x40010000
 80031f8:	0800b78c 	.word	0x0800b78c

080031fc <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 80031fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80031fe:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8003200:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003202:	6866      	ldr	r6, [r4, #4]
 8003204:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8003206:	f3c2 1580 	ubfx	r5, r2, #6, #1
 800320a:	ea26 0600 	bic.w	r6, r6, r0
 800320e:	408d      	lsls	r5, r1
 8003210:	4335      	orrs	r5, r6
 8003212:	6065      	str	r5, [r4, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003214:	68a7      	ldr	r7, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	fa90 f6a0 	rbit	r6, r0
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800321a:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800321e:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  if (value == 0U)
 8003222:	b13e      	cbz	r6, 8003234 <gpio_stm32_configure_raw.isra.0+0x38>
  return __builtin_clz(value);
 8003224:	fab6 f686 	clz	r6, r6
 8003228:	0076      	lsls	r6, r6, #1
 800322a:	2503      	movs	r5, #3
 800322c:	fa05 f606 	lsl.w	r6, r5, r6
 8003230:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003238:	2d00      	cmp	r5, #0
 800323a:	d054      	beq.n	80032e6 <gpio_stm32_configure_raw.isra.0+0xea>
  return __builtin_clz(value);
 800323c:	fab5 f585 	clz	r5, r5
 8003240:	006d      	lsls	r5, r5, #1
 8003242:	fa0e f505 	lsl.w	r5, lr, r5
 8003246:	433d      	orrs	r5, r7
 8003248:	60a5      	str	r5, [r4, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800324a:	68e7      	ldr	r7, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	fa90 f6a0 	rbit	r6, r0
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8003250:	f3c2 2241 	ubfx	r2, r2, #9, #2
  if (value == 0U)
 8003254:	b13e      	cbz	r6, 8003266 <gpio_stm32_configure_raw.isra.0+0x6a>
  return __builtin_clz(value);
 8003256:	fab6 f686 	clz	r6, r6
 800325a:	0076      	lsls	r6, r6, #1
 800325c:	2503      	movs	r5, #3
 800325e:	fa05 f606 	lsl.w	r6, r5, r6
 8003262:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800326a:	b3d5      	cbz	r5, 80032e2 <gpio_stm32_configure_raw.isra.0+0xe6>
  return __builtin_clz(value);
 800326c:	fab5 f585 	clz	r5, r5
 8003270:	006d      	lsls	r5, r5, #1
 8003272:	fa02 f505 	lsl.w	r5, r2, r5
 8003276:	433d      	orrs	r5, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8003278:	f1bc 0f20 	cmp.w	ip, #32
 800327c:	60e5      	str	r5, [r4, #12]
 800327e:	d018      	beq.n	80032b2 <gpio_stm32_configure_raw.isra.0+0xb6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003284:	6821      	ldr	r1, [r4, #0]
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8003286:	ea4f 131c 	mov.w	r3, ip, lsr #4
  if (value == 0U)
 800328a:	b13a      	cbz	r2, 800329c <gpio_stm32_configure_raw.isra.0+0xa0>
  return __builtin_clz(value);
 800328c:	fab2 f282 	clz	r2, r2
 8003290:	0052      	lsls	r2, r2, #1
 8003292:	2503      	movs	r5, #3
 8003294:	fa05 f202 	lsl.w	r2, r5, r2
 8003298:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80032a0:	b318      	cbz	r0, 80032ea <gpio_stm32_configure_raw.isra.0+0xee>
  return __builtin_clz(value);
 80032a2:	fab0 f080 	clz	r0, r0
 80032a6:	0040      	lsls	r0, r0, #1
 80032a8:	fa03 f000 	lsl.w	r0, r3, r0
 80032ac:	4308      	orrs	r0, r1
 80032ae:	6020      	str	r0, [r4, #0]
}
 80032b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (pin < 8) {
 80032b2:	2907      	cmp	r1, #7
 80032b4:	dc1f      	bgt.n	80032f6 <gpio_stm32_configure_raw.isra.0+0xfa>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80032ba:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 80032bc:	b13a      	cbz	r2, 80032ce <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 80032be:	fab2 f282 	clz	r2, r2
 80032c2:	0092      	lsls	r2, r2, #2
 80032c4:	250f      	movs	r5, #15
 80032c6:	fa05 f202 	lsl.w	r2, r5, r2
 80032ca:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 80032d2:	b34a      	cbz	r2, 8003328 <gpio_stm32_configure_raw.isra.0+0x12c>
  return __builtin_clz(value);
 80032d4:	fab2 f282 	clz	r2, r2
 80032d8:	0092      	lsls	r2, r2, #2
 80032da:	4093      	lsls	r3, r2
 80032dc:	430b      	orrs	r3, r1
 80032de:	6223      	str	r3, [r4, #32]
}
 80032e0:	e7ce      	b.n	8003280 <gpio_stm32_configure_raw.isra.0+0x84>
 80032e2:	2540      	movs	r5, #64	; 0x40
 80032e4:	e7c5      	b.n	8003272 <gpio_stm32_configure_raw.isra.0+0x76>
 80032e6:	2540      	movs	r5, #64	; 0x40
 80032e8:	e7ab      	b.n	8003242 <gpio_stm32_configure_raw.isra.0+0x46>
 80032ea:	2040      	movs	r0, #64	; 0x40
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80032ec:	fa03 f000 	lsl.w	r0, r3, r0
 80032f0:	4308      	orrs	r0, r1
 80032f2:	6020      	str	r0, [r4, #0]
}
 80032f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80032f6:	0a02      	lsrs	r2, r0, #8
 80032f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 80032fe:	b139      	cbz	r1, 8003310 <gpio_stm32_configure_raw.isra.0+0x114>
  return __builtin_clz(value);
 8003300:	fab1 f181 	clz	r1, r1
 8003304:	0089      	lsls	r1, r1, #2
 8003306:	260f      	movs	r6, #15
 8003308:	fa06 f101 	lsl.w	r1, r6, r1
 800330c:	ea25 0501 	bic.w	r5, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003314:	b132      	cbz	r2, 8003324 <gpio_stm32_configure_raw.isra.0+0x128>
  return __builtin_clz(value);
 8003316:	fab2 f282 	clz	r2, r2
 800331a:	0092      	lsls	r2, r2, #2
 800331c:	4093      	lsls	r3, r2
 800331e:	432b      	orrs	r3, r5
 8003320:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003322:	e7ad      	b.n	8003280 <gpio_stm32_configure_raw.isra.0+0x84>
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	e7f9      	b.n	800331c <gpio_stm32_configure_raw.isra.0+0x120>
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	e7d6      	b.n	80032da <gpio_stm32_configure_raw.isra.0+0xde>

0800332c <gpio_stm32_config>:
{
 800332c:	b508      	push	{r3, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 800332e:	0593      	lsls	r3, r2, #22
 8003330:	d511      	bpl.n	8003356 <gpio_stm32_config+0x2a>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8003332:	0793      	lsls	r3, r2, #30
 8003334:	d41f      	bmi.n	8003376 <gpio_stm32_config+0x4a>
		if ((flags & GPIO_PULL_UP) != 0) {
 8003336:	06d3      	lsls	r3, r2, #27
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8003338:	f04f 0c10 	mov.w	ip, #16
		if ((flags & GPIO_PULL_UP) != 0) {
 800333c:	d521      	bpl.n	8003382 <gpio_stm32_config+0x56>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800333e:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8003342:	0513      	lsls	r3, r2, #20
	const struct gpio_stm32_config *cfg = dev->config;
 8003344:	6840      	ldr	r0, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8003346:	d423      	bmi.n	8003390 <gpio_stm32_config+0x64>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8003348:	0552      	lsls	r2, r2, #21
 800334a:	d509      	bpl.n	8003360 <gpio_stm32_config+0x34>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800334c:	6842      	ldr	r2, [r0, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800334e:	2301      	movs	r3, #1
 8003350:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 8003352:	6293      	str	r3, [r2, #40]	; 0x28
	return 0;
 8003354:	e004      	b.n	8003360 <gpio_stm32_config+0x34>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8003356:	05d3      	lsls	r3, r2, #23
	const struct gpio_stm32_config *cfg = dev->config;
 8003358:	6840      	ldr	r0, [r0, #4]
	} else if  ((flags & GPIO_INPUT) != 0) {
 800335a:	d407      	bmi.n	800336c <gpio_stm32_config+0x40>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800335c:	f04f 0c30 	mov.w	ip, #48	; 0x30
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8003360:	2300      	movs	r3, #0
 8003362:	4662      	mov	r2, ip
 8003364:	f7ff ff4a 	bl	80031fc <gpio_stm32_configure_raw.isra.0>
	return 0;
 8003368:	2000      	movs	r0, #0
}
 800336a:	bd08      	pop	{r3, pc}
		if ((flags & GPIO_PULL_UP) != 0) {
 800336c:	06d3      	lsls	r3, r2, #27
 800336e:	d514      	bpl.n	800339a <gpio_stm32_config+0x6e>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8003370:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8003374:	e7f4      	b.n	8003360 <gpio_stm32_config+0x34>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8003376:	0753      	lsls	r3, r2, #29
 8003378:	d515      	bpl.n	80033a6 <gpio_stm32_config+0x7a>
		if ((flags & GPIO_PULL_UP) != 0) {
 800337a:	06d3      	lsls	r3, r2, #27
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800337c:	f04f 0c50 	mov.w	ip, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8003380:	d4dd      	bmi.n	800333e <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8003382:	0693      	lsls	r3, r2, #26
 8003384:	d5dd      	bpl.n	8003342 <gpio_stm32_config+0x16>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8003386:	0513      	lsls	r3, r2, #20
	const struct gpio_stm32_config *cfg = dev->config;
 8003388:	6840      	ldr	r0, [r0, #4]
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800338a:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800338e:	d5db      	bpl.n	8003348 <gpio_stm32_config+0x1c>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003390:	6842      	ldr	r2, [r0, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003392:	2301      	movs	r3, #1
 8003394:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 8003396:	6193      	str	r3, [r2, #24]
	return 0;
 8003398:	e7e2      	b.n	8003360 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800339a:	f012 0c20 	ands.w	ip, r2, #32
 800339e:	bf18      	it	ne
 80033a0:	f44f 6c80 	movne.w	ip, #1024	; 0x400
 80033a4:	e7dc      	b.n	8003360 <gpio_stm32_config+0x34>
				return -ENOTSUP;
 80033a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80033aa:	bd08      	pop	{r3, pc}

080033ac <gpio_stm32_isr>:
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 80033ac:	688b      	ldr	r3, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80033ae:	b18b      	cbz	r3, 80033d4 <gpio_stm32_isr+0x28>
{
 80033b0:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 80033b2:	2201      	movs	r2, #1
 80033b4:	684e      	ldr	r6, [r1, #4]
	return node->next;
 80033b6:	681c      	ldr	r4, [r3, #0]
 80033b8:	fa02 f500 	lsl.w	r5, r2, r0
		if (cb->pin_mask & pins) {
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	402a      	ands	r2, r5
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 80033c0:	4619      	mov	r1, r3
 80033c2:	4630      	mov	r0, r6
		if (cb->pin_mask & pins) {
 80033c4:	d001      	beq.n	80033ca <gpio_stm32_isr+0x1e>
			cb->handler(port, cb, cb->pin_mask & pins);
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80033ca:	b114      	cbz	r4, 80033d2 <gpio_stm32_isr+0x26>
 80033cc:	4623      	mov	r3, r4
 80033ce:	6824      	ldr	r4, [r4, #0]
 80033d0:	e7f4      	b.n	80033bc <gpio_stm32_isr+0x10>
}
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop

080033d8 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 80033d8:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
	int ret;

	data->dev = dev;
 80033da:	6903      	ldr	r3, [r0, #16]
					(clock_control_subsys_t *)&cfg->pclken);
 80033dc:	6844      	ldr	r4, [r0, #4]
	data->dev = dev;
 80033de:	6058      	str	r0, [r3, #4]
 80033e0:	4d08      	ldr	r5, [pc, #32]	; (8003404 <gpio_stm32_init+0x2c>)
 80033e2:	4628      	mov	r0, r5
 80033e4:	f004 ffa6 	bl	8008334 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80033e8:	b140      	cbz	r0, 80033fc <gpio_stm32_init+0x24>
	return api->on(dev, sys);
 80033ea:	68ab      	ldr	r3, [r5, #8]
 80033ec:	340c      	adds	r4, #12
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4621      	mov	r1, r4
 80033f2:	4628      	mov	r0, r5
 80033f4:	4798      	blx	r3
 80033f6:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 80033fa:	bd38      	pop	{r3, r4, r5, pc}
 80033fc:	f06f 0012 	mvn.w	r0, #18
 8003400:	bd38      	pop	{r3, r4, r5, pc}
 8003402:	bf00      	nop
 8003404:	0800b78c 	.word	0x0800b78c

08003408 <gpio_stm32_configure>:
{
 8003408:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 800340a:	6840      	ldr	r0, [r0, #4]
 800340c:	f7ff fef6 	bl	80031fc <gpio_stm32_configure_raw.isra.0>
}
 8003410:	2000      	movs	r0, #0
 8003412:	bd08      	pop	{r3, pc}

08003414 <dma_callback>:
			 uint32_t channel, int status)
{
	/* arg directly holds the spi device */
	struct spi_stm32_data *data = arg;

	if (status != 0) {
 8003414:	b13b      	cbz	r3, 8003426 <dma_callback+0x12>
		LOG_ERR("DMA callback error with channel %d.", channel);
		data->status_flags |= SPI_STM32_DMA_ERROR_FLAG;
 8003416:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	67cb      	str	r3, [r1, #124]	; 0x7c
	z_impl_k_sem_give(sem);
 800341e:	f101 0064 	add.w	r0, r1, #100	; 0x64
 8003422:	f005 ba63 	b.w	80088ec <z_impl_k_sem_give>
	} else {
		/* identify the origin of this callback */
		if (channel == data->dma_tx.channel) {
 8003426:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 800342a:	4293      	cmp	r3, r2
 800342c:	d00d      	beq.n	800344a <dma_callback+0x36>
			/* this part of the transfer ends */
			data->status_flags |= SPI_STM32_DMA_TX_DONE_FLAG;
		} else if (channel == data->dma_rx.channel) {
 800342e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8003432:	4293      	cmp	r3, r2
			/* this part of the transfer ends */
			data->status_flags |= SPI_STM32_DMA_RX_DONE_FLAG;
 8003434:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 8003436:	bf0c      	ite	eq
 8003438:	f043 0302 	orreq.w	r3, r3, #2
		} else {
			LOG_ERR("DMA callback channel %d is not valid.",
								channel);
			data->status_flags |= SPI_STM32_DMA_ERROR_FLAG;
 800343c:	f043 0301 	orrne.w	r3, r3, #1
 8003440:	67cb      	str	r3, [r1, #124]	; 0x7c
 8003442:	f101 0064 	add.w	r0, r1, #100	; 0x64
 8003446:	f005 ba51 	b.w	80088ec <z_impl_k_sem_give>
			data->status_flags |= SPI_STM32_DMA_TX_DONE_FLAG;
 800344a:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 800344c:	f043 0304 	orr.w	r3, r3, #4
 8003450:	67cb      	str	r3, [r1, #124]	; 0x7c
 8003452:	f101 0064 	add.w	r0, r1, #100	; 0x64
 8003456:	f005 ba49 	b.w	80088ec <z_impl_k_sem_give>
 800345a:	bf00      	nop

0800345c <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 800345c:	b508      	push	{r3, lr}
 800345e:	2023      	movs	r0, #35	; 0x23
 8003460:	2200      	movs	r2, #0
 8003462:	2105      	movs	r1, #5
 8003464:	f7fe fb06 	bl	8001a74 <z_arm_irq_priority_set>
 8003468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800346c:	2023      	movs	r0, #35	; 0x23
 800346e:	f7fe bacf 	b.w	8001a10 <arch_irq_enable>
 8003472:	bf00      	nop

08003474 <spi_stm32_configure.isra.0>:
static int spi_stm32_configure(const struct device *dev,
 8003474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint32_t scaler[] = {
 8003478:	4d5e      	ldr	r5, [pc, #376]	; (80035f4 <spi_stm32_configure.isra.0+0x180>)
static int spi_stm32_configure(const struct device *dev,
 800347a:	460f      	mov	r7, r1
 800347c:	4616      	mov	r6, r2
 800347e:	4680      	mov	r8, r0
	const uint32_t scaler[] = {
 8003480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
static int spi_stm32_configure(const struct device *dev,
 8003482:	b08a      	sub	sp, #40	; 0x28
	const uint32_t scaler[] = {
 8003484:	ac02      	add	r4, sp, #8
 8003486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003488:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800348c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	42b3      	cmp	r3, r6
 8003494:	f000 80a3 	beq.w	80035de <spi_stm32_configure.isra.0+0x16a>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8003498:	88b3      	ldrh	r3, [r6, #4]
 800349a:	f3c3 1245 	ubfx	r2, r3, #5, #6
 800349e:	2a08      	cmp	r2, #8
 80034a0:	d002      	beq.n	80034a8 <spi_stm32_configure.isra.0+0x34>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 80034a2:	2a10      	cmp	r2, #16
 80034a4:	f040 80a2 	bne.w	80035ec <spi_stm32_configure.isra.0+0x178>
	SPI_TypeDef *spi = cfg->spi;
 80034a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 80034ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80034b0:	6863      	ldr	r3, [r4, #4]
 80034b2:	bf14      	ite	ne
 80034b4:	f043 0310 	orrne.w	r3, r3, #16
 80034b8:	f023 0310 	biceq.w	r3, r3, #16
 80034bc:	6063      	str	r3, [r4, #4]
 80034be:	4d4e      	ldr	r5, [pc, #312]	; (80035f8 <spi_stm32_configure.isra.0+0x184>)
 80034c0:	4628      	mov	r0, r5
 80034c2:	f004 ff37 	bl	8008334 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 80034c6:	2800      	cmp	r0, #0
 80034c8:	f000 808d 	beq.w	80035e6 <spi_stm32_configure.isra.0+0x172>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80034cc:	68ab      	ldr	r3, [r5, #8]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8088 	beq.w	80035e6 <spi_stm32_configure.isra.0+0x172>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80034d6:	4641      	mov	r1, r8
 80034d8:	4628      	mov	r0, r5
 80034da:	aa01      	add	r2, sp, #4
 80034dc:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 80034de:	2800      	cmp	r0, #0
 80034e0:	f2c0 8081 	blt.w	80035e6 <spi_stm32_configure.isra.0+0x172>
		uint32_t clk = clock >> br;
 80034e4:	9801      	ldr	r0, [sp, #4]
		if (clk <= config->frequency) {
 80034e6:	6831      	ldr	r1, [r6, #0]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80034e8:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 80034ea:	fa20 f203 	lsr.w	r2, r0, r3
		if (clk <= config->frequency) {
 80034ee:	428a      	cmp	r2, r1
 80034f0:	d907      	bls.n	8003502 <spi_stm32_configure.isra.0+0x8e>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80034f2:	3301      	adds	r3, #1
 80034f4:	2b09      	cmp	r3, #9
 80034f6:	d1f8      	bne.n	80034ea <spi_stm32_configure.isra.0+0x76>
		return -EINVAL;
 80034f8:	f06f 0015 	mvn.w	r0, #21
}
 80034fc:	b00a      	add	sp, #40	; 0x28
 80034fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003502:	6822      	ldr	r2, [r4, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8003504:	a90a      	add	r1, sp, #40	; 0x28
 8003506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350a:	6022      	str	r2, [r4, #0]
 800350c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8003510:	6822      	ldr	r2, [r4, #0]
 8003512:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003516:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800351a:	431a      	orrs	r2, r3
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 800351c:	88b3      	ldrh	r3, [r6, #4]
 800351e:	6022      	str	r2, [r4, #0]
 8003520:	079a      	lsls	r2, r3, #30
 8003522:	d441      	bmi.n	80035a8 <spi_stm32_configure.isra.0+0x134>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	f022 0202 	bic.w	r2, r2, #2
 800352a:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800352c:	6822      	ldr	r2, [r4, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 800352e:	0758      	lsls	r0, r3, #29
 8003530:	bf4c      	ite	mi
 8003532:	f042 0201 	orrmi.w	r2, r2, #1
 8003536:	f022 0201 	bicpl.w	r2, r2, #1
 800353a:	6022      	str	r2, [r4, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800353c:	6822      	ldr	r2, [r4, #0]
 800353e:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8003542:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8003544:	6822      	ldr	r2, [r4, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8003546:	06d9      	lsls	r1, r3, #27
 8003548:	bf4c      	ite	mi
 800354a:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 800354e:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 8003552:	6022      	str	r2, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800355a:	6022      	str	r2, [r4, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 800355c:	68b2      	ldr	r2, [r6, #8]
 800355e:	f003 0101 	and.w	r1, r3, #1
 8003562:	b332      	cbz	r2, 80035b2 <spi_stm32_configure.isra.0+0x13e>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356a:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800356c:	6862      	ldr	r2, [r4, #4]
 800356e:	f022 0204 	bic.w	r2, r2, #4
 8003572:	6062      	str	r2, [r4, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8003574:	b341      	cbz	r1, 80035c8 <spi_stm32_configure.isra.0+0x154>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	f422 7282 	bic.w	r2, r2, #260	; 0x104
 800357c:	6022      	str	r2, [r4, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 800357e:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8003582:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8003584:	6863      	ldr	r3, [r4, #4]
 8003586:	bf06      	itte	eq
 8003588:	f423 6370 	biceq.w	r3, r3, #3840	; 0xf00
 800358c:	f443 63e0 	orreq.w	r3, r3, #1792	; 0x700
 8003590:	f443 6370 	orrne.w	r3, r3, #3840	; 0xf00
 8003594:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003596:	6863      	ldr	r3, [r4, #4]
	return 0;
 8003598:	2000      	movs	r0, #0
 800359a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800359e:	6063      	str	r3, [r4, #4]
	data->ctx.config = config;
 80035a0:	603e      	str	r6, [r7, #0]
}
 80035a2:	b00a      	add	sp, #40	; 0x28
 80035a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	f042 0202 	orr.w	r2, r2, #2
 80035ae:	6022      	str	r2, [r4, #0]
}
 80035b0:	e7bc      	b.n	800352c <spi_stm32_configure.isra.0+0xb8>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80035b2:	6822      	ldr	r2, [r4, #0]
 80035b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 80035b8:	b959      	cbnz	r1, 80035d2 <spi_stm32_configure.isra.0+0x15e>
 80035ba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80035be:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80035c0:	6862      	ldr	r2, [r4, #4]
 80035c2:	f042 0204 	orr.w	r2, r2, #4
 80035c6:	6062      	str	r2, [r4, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 80035c8:	6822      	ldr	r2, [r4, #0]
 80035ca:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 80035ce:	6022      	str	r2, [r4, #0]
}
 80035d0:	e7d5      	b.n	800357e <spi_stm32_configure.isra.0+0x10a>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80035d2:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80035d4:	6862      	ldr	r2, [r4, #4]
 80035d6:	f022 0204 	bic.w	r2, r2, #4
 80035da:	6062      	str	r2, [r4, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 80035dc:	e7cb      	b.n	8003576 <spi_stm32_configure.isra.0+0x102>
		return 0;
 80035de:	2000      	movs	r0, #0
}
 80035e0:	b00a      	add	sp, #40	; 0x28
 80035e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 80035e6:	f06f 0004 	mvn.w	r0, #4
 80035ea:	e787      	b.n	80034fc <spi_stm32_configure.isra.0+0x88>
		return -ENOTSUP;
 80035ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80035f0:	e784      	b.n	80034fc <spi_stm32_configure.isra.0+0x88>
 80035f2:	bf00      	nop
 80035f4:	0800bc10 	.word	0x0800bc10
 80035f8:	0800b78c 	.word	0x0800b78c

080035fc <spi_stm32_release>:
{
 80035fc:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 80035fe:	6904      	ldr	r4, [r0, #16]
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	b1a3      	cbz	r3, 800362e <spi_stm32_release+0x32>
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	b193      	cbz	r3, 800362e <spi_stm32_release+0x32>
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	b182      	cbz	r2, 800362e <spi_stm32_release+0x32>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 800360c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 800360e:	f006 f99f 	bl	8009950 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
 8003616:	6818      	ldr	r0, [r3, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003618:	791b      	ldrb	r3, [r3, #4]
 800361a:	2101      	movs	r1, #1
 800361c:	4099      	lsls	r1, r3
 800361e:	6903      	ldr	r3, [r0, #16]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 8003624:	6883      	ldr	r3, [r0, #8]
 8003626:	bf0c      	ite	eq
 8003628:	691b      	ldreq	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 800362a:	68db      	ldrne	r3, [r3, #12]
 800362c:	4798      	blx	r3
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 800362e:	69a3      	ldr	r3, [r4, #24]
 8003630:	b10b      	cbz	r3, 8003636 <spi_stm32_release+0x3a>
}
 8003632:	2000      	movs	r0, #0
 8003634:	bd10      	pop	{r4, pc}
		ctx->owner = NULL;
 8003636:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 8003638:	f104 0010 	add.w	r0, r4, #16
 800363c:	f005 f956 	bl	80088ec <z_impl_k_sem_give>
 8003640:	2000      	movs	r0, #0
 8003642:	bd10      	pop	{r4, pc}

08003644 <spi_stm32_complete.isra.0>:
static void spi_stm32_complete(const struct device *dev, int status)
 8003644:	b570      	push	{r4, r5, r6, lr}
	SPI_TypeDef *spi = cfg->spi;
 8003646:	6884      	ldr	r4, [r0, #8]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8003648:	6863      	ldr	r3, [r4, #4]
 800364a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
static void spi_stm32_complete(const struct device *dev, int status)
 800364e:	460d      	mov	r5, r1
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8003650:	6809      	ldr	r1, [r1, #0]
 8003652:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8003654:	6863      	ldr	r3, [r4, #4]
 8003656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800365a:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 800365c:	6863      	ldr	r3, [r4, #4]
 800365e:	f023 0320 	bic.w	r3, r3, #32
 8003662:	b082      	sub	sp, #8
 8003664:	4616      	mov	r6, r2
 8003666:	6063      	str	r3, [r4, #4]
 8003668:	b1d9      	cbz	r1, 80036a2 <spi_stm32_complete.isra.0+0x5e>
 800366a:	688b      	ldr	r3, [r1, #8]
 800366c:	b1cb      	cbz	r3, 80036a2 <spi_stm32_complete.isra.0+0x5e>
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	b1ba      	cbz	r2, 80036a2 <spi_stm32_complete.isra.0+0x5e>
			if (!force_off &&
 8003672:	888a      	ldrh	r2, [r1, #4]
 8003674:	04d0      	lsls	r0, r2, #19
 8003676:	d414      	bmi.n	80036a2 <spi_stm32_complete.isra.0+0x5e>
			k_busy_wait(ctx->config->cs->delay);
 8003678:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 800367a:	f006 f969 	bl	8009950 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 800367e:	682b      	ldr	r3, [r5, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 8003682:	6818      	ldr	r0, [r3, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003684:	791a      	ldrb	r2, [r3, #4]
 8003686:	6903      	ldr	r3, [r0, #16]
 8003688:	2101      	movs	r1, #1
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4091      	lsls	r1, r2
 800368e:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 8003690:	6883      	ldr	r3, [r0, #8]
 8003692:	bf0c      	ite	eq
 8003694:	691b      	ldreq	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 8003696:	68db      	ldrne	r3, [r3, #12]
 8003698:	4798      	blx	r3
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800369a:	68a3      	ldr	r3, [r4, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 800369c:	07d9      	lsls	r1, r3, #31
 800369e:	d503      	bpl.n	80036a8 <spi_stm32_complete.isra.0+0x64>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 80036a0:	68e3      	ldr	r3, [r4, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80036a2:	68a3      	ldr	r3, [r4, #8]
 80036a4:	07d9      	lsls	r1, r3, #31
 80036a6:	d4fb      	bmi.n	80036a0 <spi_stm32_complete.isra.0+0x5c>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 80036ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b2:	d015      	beq.n	80036e0 <spi_stm32_complete.isra.0+0x9c>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 80036b4:	68a3      	ldr	r3, [r4, #8]
 80036b6:	069b      	lsls	r3, r3, #26
 80036b8:	d506      	bpl.n	80036c8 <spi_stm32_complete.isra.0+0x84>
  tmpreg_sr = SPIx->SR;
 80036ba:	68a3      	ldr	r3, [r4, #8]
 80036bc:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 80036be:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c6:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ce:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 80036d0:	642e      	str	r6, [r5, #64]	; 0x40
	z_impl_k_sem_give(sem);
 80036d2:	f105 0028 	add.w	r0, r5, #40	; 0x28
}
 80036d6:	b002      	add	sp, #8
 80036d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80036dc:	f005 b906 	b.w	80088ec <z_impl_k_sem_give>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80036e0:	68a3      	ldr	r3, [r4, #8]
 80036e2:	061a      	lsls	r2, r3, #24
 80036e4:	d5e6      	bpl.n	80036b4 <spi_stm32_complete.isra.0+0x70>
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	061a      	lsls	r2, r3, #24
 80036ea:	d4f9      	bmi.n	80036e0 <spi_stm32_complete.isra.0+0x9c>
 80036ec:	e7e2      	b.n	80036b4 <spi_stm32_complete.isra.0+0x70>
 80036ee:	bf00      	nop

080036f0 <spi_stm32_isr>:
{
 80036f0:	b470      	push	{r4, r5, r6}
	const struct spi_stm32_config *cfg = dev->config;
 80036f2:	6844      	ldr	r4, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 80036f4:	6901      	ldr	r1, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 80036f6:	68a3      	ldr	r3, [r4, #8]
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 80036f8:	689a      	ldr	r2, [r3, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 80036fa:	f412 7fb8 	tst.w	r2, #368	; 0x170
{
 80036fe:	b083      	sub	sp, #12
	if (sr & SPI_STM32_ERR_MSK) {
 8003700:	f040 8134 	bne.w	800396c <spi_stm32_isr+0x27c>
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 8003704:	6d8c      	ldr	r4, [r1, #88]	; 0x58
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8003706:	b1c4      	cbz	r4, 800373a <spi_stm32_isr+0x4a>
	uint16_t operation = data->ctx.config->operation;
 8003708:	680d      	ldr	r5, [r1, #0]
 800370a:	88aa      	ldrh	r2, [r5, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 800370c:	07d6      	lsls	r6, r2, #31
 800370e:	d51d      	bpl.n	800374c <spi_stm32_isr+0x5c>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003710:	689d      	ldr	r5, [r3, #8]
 8003712:	07ad      	lsls	r5, r5, #30
 8003714:	d55d      	bpl.n	80037d2 <spi_stm32_isr+0xe2>
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 8003716:	2c00      	cmp	r4, #0
 8003718:	d05b      	beq.n	80037d2 <spi_stm32_isr+0xe2>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800371a:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800371e:	2a08      	cmp	r2, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8003720:	6d4d      	ldr	r5, [r1, #84]	; 0x54
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8003722:	f000 8113 	beq.w	800394c <spi_stm32_isr+0x25c>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8003726:	882a      	ldrh	r2, [r5, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8003728:	819a      	strh	r2, [r3, #12]
	ctx->tx_len -= len;
 800372a:	3c01      	subs	r4, #1
 800372c:	658c      	str	r4, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800372e:	2c00      	cmp	r4, #0
 8003730:	f000 812c 	beq.w	800398c <spi_stm32_isr+0x29c>
		ctx->tx_buf += dfs * len;
 8003734:	3502      	adds	r5, #2
 8003736:	654d      	str	r5, [r1, #84]	; 0x54
 8003738:	e04f      	b.n	80037da <spi_stm32_isr+0xea>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800373a:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 800373c:	2a00      	cmp	r2, #0
 800373e:	d1e3      	bne.n	8003708 <spi_stm32_isr+0x18>
		spi_stm32_complete(dev, err);
 8003740:	6901      	ldr	r1, [r0, #16]
 8003742:	6840      	ldr	r0, [r0, #4]
}
 8003744:	b003      	add	sp, #12
 8003746:	bc70      	pop	{r4, r5, r6}
		spi_stm32_complete(dev, err);
 8003748:	f7ff bf7c 	b.w	8003644 <spi_stm32_complete.isra.0>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800374c:	689e      	ldr	r6, [r3, #8]
 800374e:	07b6      	lsls	r6, r6, #30
 8003750:	d5fc      	bpl.n	800374c <spi_stm32_isr+0x5c>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8003752:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8003756:	2a08      	cmp	r2, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8003758:	6d4e      	ldr	r6, [r1, #84]	; 0x54
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800375a:	d07c      	beq.n	8003856 <spi_stm32_isr+0x166>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 800375c:	2e00      	cmp	r6, #0
 800375e:	f000 808d 	beq.w	800387c <spi_stm32_isr+0x18c>
 8003762:	2c00      	cmp	r4, #0
 8003764:	d064      	beq.n	8003830 <spi_stm32_isr+0x140>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8003766:	8832      	ldrh	r2, [r6, #0]
  *spidr = TxData;
 8003768:	819a      	strh	r2, [r3, #12]
	ctx->tx_len -= len;
 800376a:	3c01      	subs	r4, #1
 800376c:	658c      	str	r4, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800376e:	2c00      	cmp	r4, #0
 8003770:	f000 808d 	beq.w	800388e <spi_stm32_isr+0x19e>
		ctx->tx_buf += dfs * len;
 8003774:	3602      	adds	r6, #2
 8003776:	654e      	str	r6, [r1, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003778:	689a      	ldr	r2, [r3, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 800377a:	07d6      	lsls	r6, r2, #31
 800377c:	d5fc      	bpl.n	8003778 <spi_stm32_isr+0x88>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800377e:	88ac      	ldrh	r4, [r5, #4]
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8003780:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8003782:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
 8003784:	f3c4 1445 	ubfx	r4, r4, #5, #6
 8003788:	2c08      	cmp	r4, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 800378a:	68dc      	ldr	r4, [r3, #12]
 800378c:	d052      	beq.n	8003834 <spi_stm32_isr+0x144>
 800378e:	b11d      	cbz	r5, 8003798 <spi_stm32_isr+0xa8>
 8003790:	2a00      	cmp	r2, #0
 8003792:	d03d      	beq.n	8003810 <spi_stm32_isr+0x120>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8003794:	802c      	strh	r4, [r5, #0]
 8003796:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 8003798:	2a00      	cmp	r2, #0
 800379a:	d039      	beq.n	8003810 <spi_stm32_isr+0x120>
	ctx->rx_len -= len;
 800379c:	3a01      	subs	r2, #1
 800379e:	660a      	str	r2, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 80037a0:	2a00      	cmp	r2, #0
 80037a2:	d131      	bne.n	8003808 <spi_stm32_isr+0x118>
		--ctx->rx_count;
 80037a4:	e9d1 4213 	ldrd	r4, r2, [r1, #76]	; 0x4c
		++ctx->current_rx;
 80037a8:	3408      	adds	r4, #8
		--ctx->rx_count;
 80037aa:	3a01      	subs	r2, #1
 80037ac:	e9c1 4213 	strd	r4, r2, [r1, #76]	; 0x4c
	while (*count) {
 80037b0:	b932      	cbnz	r2, 80037c0 <spi_stm32_isr+0xd0>
 80037b2:	e094      	b.n	80038de <spi_stm32_isr+0x1ee>
		++(*current);
 80037b4:	3408      	adds	r4, #8
		--(*count);
 80037b6:	e9c1 4213 	strd	r4, r2, [r1, #76]	; 0x4c
	while (*count) {
 80037ba:	2a00      	cmp	r2, #0
 80037bc:	f000 808f 	beq.w	80038de <spi_stm32_isr+0x1ee>
		if (((*current)->len / dfs) != 0) {
 80037c0:	6865      	ldr	r5, [r4, #4]
 80037c2:	2d01      	cmp	r5, #1
		--(*count);
 80037c4:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
		if (((*current)->len / dfs) != 0) {
 80037c8:	d9f4      	bls.n	80037b4 <spi_stm32_isr+0xc4>
			*buf_len = (*current)->len / dfs;
 80037ca:	086d      	lsrs	r5, r5, #1
			return (*current)->buf;
 80037cc:	6822      	ldr	r2, [r4, #0]
			*buf_len = (*current)->len / dfs;
 80037ce:	660d      	str	r5, [r1, #96]	; 0x60
			return (*current)->buf;
 80037d0:	e01d      	b.n	800380e <spi_stm32_isr+0x11e>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d8:	605a      	str	r2, [r3, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80037da:	689a      	ldr	r2, [r3, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 80037dc:	07d4      	lsls	r4, r2, #31
 80037de:	d517      	bpl.n	8003810 <spi_stm32_isr+0x120>
	return !!(ctx->rx_buf && ctx->rx_len);
 80037e0:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 80037e2:	b1aa      	cbz	r2, 8003810 <spi_stm32_isr+0x120>
 80037e4:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 80037e6:	b19c      	cbz	r4, 8003810 <spi_stm32_isr+0x120>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80037e8:	680c      	ldr	r4, [r1, #0]
 80037ea:	88a4      	ldrh	r4, [r4, #4]
 80037ec:	f3c4 1445 	ubfx	r4, r4, #5, #6
 80037f0:	2c08      	cmp	r4, #8
 80037f2:	f000 808e 	beq.w	8003912 <spi_stm32_isr+0x222>
  return (uint16_t)(READ_REG(SPIx->DR));
 80037f6:	68dc      	ldr	r4, [r3, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 80037f8:	8014      	strh	r4, [r2, #0]
	if (!ctx->rx_len) {
 80037fa:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 80037fc:	b142      	cbz	r2, 8003810 <spi_stm32_isr+0x120>
	ctx->rx_len -= len;
 80037fe:	3a01      	subs	r2, #1
 8003800:	660a      	str	r2, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 8003802:	2a00      	cmp	r2, #0
 8003804:	f000 80ea 	beq.w	80039dc <spi_stm32_isr+0x2ec>
	} else if (ctx->rx_buf) {
 8003808:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800380a:	b10a      	cbz	r2, 8003810 <spi_stm32_isr+0x120>
		ctx->rx_buf += dfs * len;
 800380c:	3202      	adds	r2, #2
 800380e:	65ca      	str	r2, [r1, #92]	; 0x5c
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8003810:	689a      	ldr	r2, [r3, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8003812:	f412 7fb8 	tst.w	r2, #368	; 0x170
 8003816:	f040 80f5 	bne.w	8003a04 <spi_stm32_isr+0x314>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800381a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800381c:	b113      	cbz	r3, 8003824 <spi_stm32_isr+0x134>
}
 800381e:	b003      	add	sp, #12
 8003820:	bc70      	pop	{r4, r5, r6}
 8003822:	4770      	bx	lr
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8003824:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8003826:	2a00      	cmp	r2, #0
 8003828:	d08a      	beq.n	8003740 <spi_stm32_isr+0x50>
}
 800382a:	b003      	add	sp, #12
 800382c:	bc70      	pop	{r4, r5, r6}
 800382e:	4770      	bx	lr
  *spidr = TxData;
 8003830:	819c      	strh	r4, [r3, #12]
	if (!ctx->tx_len) {
 8003832:	e7a1      	b.n	8003778 <spi_stm32_isr+0x88>
	return !!(ctx->rx_buf && ctx->rx_len);
 8003834:	b11d      	cbz	r5, 800383e <spi_stm32_isr+0x14e>
 8003836:	2a00      	cmp	r2, #0
 8003838:	d0ea      	beq.n	8003810 <spi_stm32_isr+0x120>
  return (uint8_t)(READ_REG(SPIx->DR));
 800383a:	702c      	strb	r4, [r5, #0]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800383c:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800383e:	2a00      	cmp	r2, #0
 8003840:	d0e6      	beq.n	8003810 <spi_stm32_isr+0x120>
	ctx->rx_len -= len;
 8003842:	3a01      	subs	r2, #1
 8003844:	660a      	str	r2, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 8003846:	2a00      	cmp	r2, #0
 8003848:	d038      	beq.n	80038bc <spi_stm32_isr+0x1cc>
	} else if (ctx->rx_buf) {
 800384a:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800384c:	2a00      	cmp	r2, #0
 800384e:	d0df      	beq.n	8003810 <spi_stm32_isr+0x120>
		ctx->rx_buf += dfs * len;
 8003850:	3201      	adds	r2, #1
 8003852:	65ca      	str	r2, [r1, #92]	; 0x5c
 8003854:	e7dc      	b.n	8003810 <spi_stm32_isr+0x120>
	return !!(ctx->tx_buf && ctx->tx_len);
 8003856:	2e00      	cmp	r6, #0
 8003858:	d059      	beq.n	800390e <spi_stm32_isr+0x21e>
 800385a:	b104      	cbz	r4, 800385e <spi_stm32_isr+0x16e>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800385c:	7834      	ldrb	r4, [r6, #0]
  *spidr = TxData;
 800385e:	731c      	strb	r4, [r3, #12]
	if (!ctx->tx_len) {
 8003860:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003862:	2a00      	cmp	r2, #0
 8003864:	d03e      	beq.n	80038e4 <spi_stm32_isr+0x1f4>
	ctx->tx_len -= len;
 8003866:	3a01      	subs	r2, #1
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8003868:	680d      	ldr	r5, [r1, #0]
 800386a:	658a      	str	r2, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800386c:	2a00      	cmp	r2, #0
 800386e:	d03b      	beq.n	80038e8 <spi_stm32_isr+0x1f8>
	} else if (ctx->tx_buf) {
 8003870:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8003872:	2a00      	cmp	r2, #0
 8003874:	d080      	beq.n	8003778 <spi_stm32_isr+0x88>
		ctx->tx_buf += dfs * len;
 8003876:	3201      	adds	r2, #1
 8003878:	654a      	str	r2, [r1, #84]	; 0x54
 800387a:	e77d      	b.n	8003778 <spi_stm32_isr+0x88>
  *spidr = TxData;
 800387c:	819e      	strh	r6, [r3, #12]
	if (!ctx->tx_len) {
 800387e:	2c00      	cmp	r4, #0
 8003880:	f43f af7a 	beq.w	8003778 <spi_stm32_isr+0x88>
	ctx->tx_len -= len;
 8003884:	3c01      	subs	r4, #1
 8003886:	658c      	str	r4, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 8003888:	2c00      	cmp	r4, #0
 800388a:	f47f af75 	bne.w	8003778 <spi_stm32_isr+0x88>
		++ctx->current_tx;
 800388e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
		--ctx->tx_count;
 8003890:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		++ctx->current_tx;
 8003892:	3408      	adds	r4, #8
		--ctx->tx_count;
 8003894:	3a01      	subs	r2, #1
		++ctx->current_tx;
 8003896:	644c      	str	r4, [r1, #68]	; 0x44
		--ctx->tx_count;
 8003898:	648a      	str	r2, [r1, #72]	; 0x48
	while (*count) {
 800389a:	b92a      	cbnz	r2, 80038a8 <spi_stm32_isr+0x1b8>
 800389c:	e034      	b.n	8003908 <spi_stm32_isr+0x218>
		++(*current);
 800389e:	3408      	adds	r4, #8
		--(*count);
 80038a0:	e9c1 4211 	strd	r4, r2, [r1, #68]	; 0x44
	while (*count) {
 80038a4:	2a00      	cmp	r2, #0
 80038a6:	d02f      	beq.n	8003908 <spi_stm32_isr+0x218>
		if (((*current)->len / dfs) != 0) {
 80038a8:	6866      	ldr	r6, [r4, #4]
 80038aa:	2e01      	cmp	r6, #1
		--(*count);
 80038ac:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
		if (((*current)->len / dfs) != 0) {
 80038b0:	d9f5      	bls.n	800389e <spi_stm32_isr+0x1ae>
			*buf_len = (*current)->len / dfs;
 80038b2:	0876      	lsrs	r6, r6, #1
			return (*current)->buf;
 80038b4:	6822      	ldr	r2, [r4, #0]
			*buf_len = (*current)->len / dfs;
 80038b6:	658e      	str	r6, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 80038b8:	654a      	str	r2, [r1, #84]	; 0x54
 80038ba:	e75d      	b.n	8003778 <spi_stm32_isr+0x88>
		--ctx->rx_count;
 80038bc:	e9d1 4213 	ldrd	r4, r2, [r1, #76]	; 0x4c
		++ctx->current_rx;
 80038c0:	3408      	adds	r4, #8
		--ctx->rx_count;
 80038c2:	3a01      	subs	r2, #1
 80038c4:	e9c1 4213 	strd	r4, r2, [r1, #76]	; 0x4c
	while (*count) {
 80038c8:	b14a      	cbz	r2, 80038de <spi_stm32_isr+0x1ee>
		if (((*current)->len / dfs) != 0) {
 80038ca:	6865      	ldr	r5, [r4, #4]
		--(*count);
 80038cc:	3a01      	subs	r2, #1
		if (((*current)->len / dfs) != 0) {
 80038ce:	2d00      	cmp	r5, #0
 80038d0:	f47f af7c 	bne.w	80037cc <spi_stm32_isr+0xdc>
		++(*current);
 80038d4:	3408      	adds	r4, #8
		--(*count);
 80038d6:	e9c1 4213 	strd	r4, r2, [r1, #76]	; 0x4c
	while (*count) {
 80038da:	2a00      	cmp	r2, #0
 80038dc:	d1f5      	bne.n	80038ca <spi_stm32_isr+0x1da>
	*buf_len = 0;
 80038de:	2200      	movs	r2, #0
 80038e0:	660a      	str	r2, [r1, #96]	; 0x60
	return NULL;
 80038e2:	e794      	b.n	800380e <spi_stm32_isr+0x11e>
 80038e4:	680d      	ldr	r5, [r1, #0]
 80038e6:	e747      	b.n	8003778 <spi_stm32_isr+0x88>
		++ctx->current_tx;
 80038e8:	6c4c      	ldr	r4, [r1, #68]	; 0x44
		--ctx->tx_count;
 80038ea:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		++ctx->current_tx;
 80038ec:	3408      	adds	r4, #8
		--ctx->tx_count;
 80038ee:	3a01      	subs	r2, #1
		++ctx->current_tx;
 80038f0:	644c      	str	r4, [r1, #68]	; 0x44
		--ctx->tx_count;
 80038f2:	648a      	str	r2, [r1, #72]	; 0x48
	while (*count) {
 80038f4:	b142      	cbz	r2, 8003908 <spi_stm32_isr+0x218>
		if (((*current)->len / dfs) != 0) {
 80038f6:	6866      	ldr	r6, [r4, #4]
		--(*count);
 80038f8:	3a01      	subs	r2, #1
		if (((*current)->len / dfs) != 0) {
 80038fa:	2e00      	cmp	r6, #0
 80038fc:	d1da      	bne.n	80038b4 <spi_stm32_isr+0x1c4>
		++(*current);
 80038fe:	3408      	adds	r4, #8
		--(*count);
 8003900:	e9c1 4211 	strd	r4, r2, [r1, #68]	; 0x44
	while (*count) {
 8003904:	2a00      	cmp	r2, #0
 8003906:	d1f6      	bne.n	80038f6 <spi_stm32_isr+0x206>
	*buf_len = 0;
 8003908:	2200      	movs	r2, #0
 800390a:	658a      	str	r2, [r1, #88]	; 0x58
	return NULL;
 800390c:	e7d4      	b.n	80038b8 <spi_stm32_isr+0x1c8>
 800390e:	4634      	mov	r4, r6
 8003910:	e7a5      	b.n	800385e <spi_stm32_isr+0x16e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8003912:	68dc      	ldr	r4, [r3, #12]
 8003914:	7014      	strb	r4, [r2, #0]
	if (!ctx->rx_len) {
 8003916:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8003918:	2a00      	cmp	r2, #0
 800391a:	f43f af79 	beq.w	8003810 <spi_stm32_isr+0x120>
	ctx->rx_len -= len;
 800391e:	3a01      	subs	r2, #1
 8003920:	660a      	str	r2, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 8003922:	2a00      	cmp	r2, #0
 8003924:	d191      	bne.n	800384a <spi_stm32_isr+0x15a>
		--ctx->rx_count;
 8003926:	e9d1 4213 	ldrd	r4, r2, [r1, #76]	; 0x4c
		++ctx->current_rx;
 800392a:	3408      	adds	r4, #8
		--ctx->rx_count;
 800392c:	3a01      	subs	r2, #1
 800392e:	e9c1 4213 	strd	r4, r2, [r1, #76]	; 0x4c
	while (*count) {
 8003932:	2a00      	cmp	r2, #0
 8003934:	d0d3      	beq.n	80038de <spi_stm32_isr+0x1ee>
		if (((*current)->len / dfs) != 0) {
 8003936:	6865      	ldr	r5, [r4, #4]
		--(*count);
 8003938:	3a01      	subs	r2, #1
		if (((*current)->len / dfs) != 0) {
 800393a:	2d00      	cmp	r5, #0
 800393c:	f47f af46 	bne.w	80037cc <spi_stm32_isr+0xdc>
		++(*current);
 8003940:	3408      	adds	r4, #8
		--(*count);
 8003942:	e9c1 4213 	strd	r4, r2, [r1, #76]	; 0x4c
	while (*count) {
 8003946:	2a00      	cmp	r2, #0
 8003948:	d1f5      	bne.n	8003936 <spi_stm32_isr+0x246>
 800394a:	e7c8      	b.n	80038de <spi_stm32_isr+0x1ee>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800394c:	782a      	ldrb	r2, [r5, #0]
  *spidr = TxData;
 800394e:	731a      	strb	r2, [r3, #12]
	if (!ctx->tx_len) {
 8003950:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003952:	2a00      	cmp	r2, #0
 8003954:	f43f af41 	beq.w	80037da <spi_stm32_isr+0xea>
	ctx->tx_len -= len;
 8003958:	3a01      	subs	r2, #1
 800395a:	658a      	str	r2, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800395c:	b35a      	cbz	r2, 80039b6 <spi_stm32_isr+0x2c6>
	} else if (ctx->tx_buf) {
 800395e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8003960:	2a00      	cmp	r2, #0
 8003962:	f43f af3a 	beq.w	80037da <spi_stm32_isr+0xea>
		ctx->tx_buf += dfs * len;
 8003966:	3201      	adds	r2, #1
 8003968:	654a      	str	r2, [r1, #84]	; 0x54
 800396a:	e736      	b.n	80037da <spi_stm32_isr+0xea>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	0652      	lsls	r2, r2, #25
 8003970:	d505      	bpl.n	800397e <spi_stm32_isr+0x28e>
  tmpreg = SPIx->DR;
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	9200      	str	r2, [sp, #0]
  (void) tmpreg;
 8003976:	9a00      	ldr	r2, [sp, #0]
  tmpreg = SPIx->SR;
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	9300      	str	r3, [sp, #0]
  (void) tmpreg;
 800397c:	9b00      	ldr	r3, [sp, #0]
		spi_stm32_complete(dev, err);
 800397e:	f06f 0204 	mvn.w	r2, #4
 8003982:	4620      	mov	r0, r4
}
 8003984:	b003      	add	sp, #12
 8003986:	bc70      	pop	{r4, r5, r6}
		spi_stm32_complete(dev, err);
 8003988:	f7ff be5c 	b.w	8003644 <spi_stm32_complete.isra.0>
		--ctx->tx_count;
 800398c:	e9d1 4211 	ldrd	r4, r2, [r1, #68]	; 0x44
		++ctx->current_tx;
 8003990:	3408      	adds	r4, #8
		--ctx->tx_count;
 8003992:	3a01      	subs	r2, #1
 8003994:	e9c1 4211 	strd	r4, r2, [r1, #68]	; 0x44
	while (*count) {
 8003998:	b922      	cbnz	r2, 80039a4 <spi_stm32_isr+0x2b4>
 800399a:	e01c      	b.n	80039d6 <spi_stm32_isr+0x2e6>
		++(*current);
 800399c:	3408      	adds	r4, #8
		--(*count);
 800399e:	e9c1 4211 	strd	r4, r2, [r1, #68]	; 0x44
	while (*count) {
 80039a2:	b1c2      	cbz	r2, 80039d6 <spi_stm32_isr+0x2e6>
		if (((*current)->len / dfs) != 0) {
 80039a4:	6865      	ldr	r5, [r4, #4]
 80039a6:	2d01      	cmp	r5, #1
		--(*count);
 80039a8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
		if (((*current)->len / dfs) != 0) {
 80039ac:	d9f6      	bls.n	800399c <spi_stm32_isr+0x2ac>
			*buf_len = (*current)->len / dfs;
 80039ae:	086d      	lsrs	r5, r5, #1
			return (*current)->buf;
 80039b0:	6822      	ldr	r2, [r4, #0]
			*buf_len = (*current)->len / dfs;
 80039b2:	658d      	str	r5, [r1, #88]	; 0x58
			return (*current)->buf;
 80039b4:	e7d8      	b.n	8003968 <spi_stm32_isr+0x278>
		--ctx->tx_count;
 80039b6:	e9d1 4211 	ldrd	r4, r2, [r1, #68]	; 0x44
		++ctx->current_tx;
 80039ba:	3408      	adds	r4, #8
		--ctx->tx_count;
 80039bc:	3a01      	subs	r2, #1
 80039be:	e9c1 4211 	strd	r4, r2, [r1, #68]	; 0x44
	while (*count) {
 80039c2:	b142      	cbz	r2, 80039d6 <spi_stm32_isr+0x2e6>
		if (((*current)->len / dfs) != 0) {
 80039c4:	6865      	ldr	r5, [r4, #4]
		--(*count);
 80039c6:	3a01      	subs	r2, #1
		if (((*current)->len / dfs) != 0) {
 80039c8:	2d00      	cmp	r5, #0
 80039ca:	d1f1      	bne.n	80039b0 <spi_stm32_isr+0x2c0>
		++(*current);
 80039cc:	3408      	adds	r4, #8
		--(*count);
 80039ce:	e9c1 4211 	strd	r4, r2, [r1, #68]	; 0x44
	while (*count) {
 80039d2:	2a00      	cmp	r2, #0
 80039d4:	d1f6      	bne.n	80039c4 <spi_stm32_isr+0x2d4>
	*buf_len = 0;
 80039d6:	2200      	movs	r2, #0
 80039d8:	658a      	str	r2, [r1, #88]	; 0x58
	return NULL;
 80039da:	e7c5      	b.n	8003968 <spi_stm32_isr+0x278>
		--ctx->rx_count;
 80039dc:	e9d1 4213 	ldrd	r4, r2, [r1, #76]	; 0x4c
		++ctx->current_rx;
 80039e0:	3408      	adds	r4, #8
		--ctx->rx_count;
 80039e2:	3a01      	subs	r2, #1
 80039e4:	e9c1 4213 	strd	r4, r2, [r1, #76]	; 0x4c
	while (*count) {
 80039e8:	b932      	cbnz	r2, 80039f8 <spi_stm32_isr+0x308>
 80039ea:	e778      	b.n	80038de <spi_stm32_isr+0x1ee>
		++(*current);
 80039ec:	3408      	adds	r4, #8
		--(*count);
 80039ee:	e9c1 4213 	strd	r4, r2, [r1, #76]	; 0x4c
	while (*count) {
 80039f2:	2a00      	cmp	r2, #0
 80039f4:	f43f af73 	beq.w	80038de <spi_stm32_isr+0x1ee>
		if (((*current)->len / dfs) != 0) {
 80039f8:	6865      	ldr	r5, [r4, #4]
 80039fa:	2d01      	cmp	r5, #1
		--(*count);
 80039fc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
		if (((*current)->len / dfs) != 0) {
 8003a00:	d9f4      	bls.n	80039ec <spi_stm32_isr+0x2fc>
 8003a02:	e6e2      	b.n	80037ca <spi_stm32_isr+0xda>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	0652      	lsls	r2, r2, #25
 8003a08:	d508      	bpl.n	8003a1c <spi_stm32_isr+0x32c>
  tmpreg = SPIx->DR;
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003a0e:	9a01      	ldr	r2, [sp, #4]
  tmpreg = SPIx->SR;
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003a14:	9b01      	ldr	r3, [sp, #4]
 8003a16:	f06f 0204 	mvn.w	r2, #4
 8003a1a:	e691      	b.n	8003740 <spi_stm32_isr+0x50>
 8003a1c:	f06f 0204 	mvn.w	r2, #4
 8003a20:	e68e      	b.n	8003740 <spi_stm32_isr+0x50>
 8003a22:	bf00      	nop

08003a24 <spi_stm32_transceive>:
{
 8003a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct spi_stm32_data *data = dev->data;
 8003a28:	6906      	ldr	r6, [r0, #16]
{
 8003a2a:	461f      	mov	r7, r3
	SPI_TypeDef *spi = cfg->spi;
 8003a2c:	6843      	ldr	r3, [r0, #4]
 8003a2e:	689d      	ldr	r5, [r3, #8]
	if ((data->dma_tx.dma_dev != NULL)
 8003a30:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
{
 8003a34:	b083      	sub	sp, #12
 8003a36:	4680      	mov	r8, r0
 8003a38:	460c      	mov	r4, r1
 8003a3a:	4691      	mov	r9, r2
	if ((data->dma_tx.dma_dev != NULL)
 8003a3c:	b123      	cbz	r3, 8003a48 <spi_stm32_transceive+0x24>
	 && (data->dma_rx.dma_dev != NULL)) {
 8003a3e:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f040 80bb 	bne.w	8003bbe <spi_stm32_transceive+0x19a>
	if (!tx_bufs && !rx_bufs) {
 8003a48:	f1b9 0f00 	cmp.w	r9, #0
 8003a4c:	d023      	beq.n	8003a96 <spi_stm32_transceive+0x72>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8003a4e:	88a3      	ldrh	r3, [r4, #4]
 8003a50:	0499      	lsls	r1, r3, #18
 8003a52:	d504      	bpl.n	8003a5e <spi_stm32_transceive+0x3a>
 8003a54:	69b3      	ldr	r3, [r6, #24]
 8003a56:	b913      	cbnz	r3, 8003a5e <spi_stm32_transceive+0x3a>
		(k_sem_count_get(&ctx->lock) == 0) &&
 8003a58:	6873      	ldr	r3, [r6, #4]
 8003a5a:	429c      	cmp	r4, r3
 8003a5c:	d008      	beq.n	8003a70 <spi_stm32_transceive+0x4c>
	return z_impl_k_sem_take(sem, timeout);
 8003a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a62:	f106 0010 	add.w	r0, r6, #16
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a6a:	f004 ff69 	bl	8008940 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8003a6e:	6074      	str	r4, [r6, #4]
	ret = spi_stm32_configure(dev, config);
 8003a70:	4622      	mov	r2, r4
 8003a72:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8003a76:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003a7a:	f7ff fcfb 	bl	8003474 <spi_stm32_configure.isra.0>
	if (ret) {
 8003a7e:	4604      	mov	r4, r0
 8003a80:	b168      	cbz	r0, 8003a9e <spi_stm32_transceive+0x7a>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8003a82:	6833      	ldr	r3, [r6, #0]
 8003a84:	889b      	ldrh	r3, [r3, #4]
 8003a86:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8003a8a:	f000 808f 	beq.w	8003bac <spi_stm32_transceive+0x188>
}
 8003a8e:	4620      	mov	r0, r4
 8003a90:	b003      	add	sp, #12
 8003a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!tx_bufs && !rx_bufs) {
 8003a96:	2f00      	cmp	r7, #0
 8003a98:	d1d9      	bne.n	8003a4e <spi_stm32_transceive+0x2a>
		return 0;
 8003a9a:	463c      	mov	r4, r7
 8003a9c:	e7f7      	b.n	8003a8e <spi_stm32_transceive+0x6a>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8003a9e:	f1b9 0f00 	cmp.w	r9, #0
 8003aa2:	f000 82a2 	beq.w	8003fea <spi_stm32_transceive+0x5c6>
 8003aa6:	f8d9 2000 	ldr.w	r2, [r9]
 8003aaa:	6472      	str	r2, [r6, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8003aac:	2a00      	cmp	r2, #0
 8003aae:	f000 82b3 	beq.w	8004018 <spi_stm32_transceive+0x5f4>
 8003ab2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003ab6:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8003ab8:	b933      	cbnz	r3, 8003ac8 <spi_stm32_transceive+0xa4>
 8003aba:	e298      	b.n	8003fee <spi_stm32_transceive+0x5ca>
		++(*current);
 8003abc:	3208      	adds	r2, #8
		--(*count);
 8003abe:	e9c6 2311 	strd	r2, r3, [r6, #68]	; 0x44
	while (*count) {
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8293 	beq.w	8003fee <spi_stm32_transceive+0x5ca>
		if (((*current)->len / dfs) != 0) {
 8003ac8:	6851      	ldr	r1, [r2, #4]
		--(*count);
 8003aca:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8003acc:	2900      	cmp	r1, #0
 8003ace:	d0f5      	beq.n	8003abc <spi_stm32_transceive+0x98>
			return (*current)->buf;
 8003ad0:	6813      	ldr	r3, [r2, #0]
			*buf_len = (*current)->len / dfs;
 8003ad2:	65b1      	str	r1, [r6, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 8003ad4:	6573      	str	r3, [r6, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8003ad6:	2f00      	cmp	r7, #0
 8003ad8:	f000 8282 	beq.w	8003fe0 <spi_stm32_transceive+0x5bc>
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	64f2      	str	r2, [r6, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8003ae0:	2a00      	cmp	r2, #0
 8003ae2:	f000 829b 	beq.w	800401c <spi_stm32_transceive+0x5f8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8003aea:	b933      	cbnz	r3, 8003afa <spi_stm32_transceive+0xd6>
 8003aec:	e27a      	b.n	8003fe4 <spi_stm32_transceive+0x5c0>
		++(*current);
 8003aee:	3208      	adds	r2, #8
		--(*count);
 8003af0:	e9c6 2313 	strd	r2, r3, [r6, #76]	; 0x4c
	while (*count) {
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8275 	beq.w	8003fe4 <spi_stm32_transceive+0x5c0>
		if (((*current)->len / dfs) != 0) {
 8003afa:	6851      	ldr	r1, [r2, #4]
		--(*count);
 8003afc:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8003afe:	2900      	cmp	r1, #0
 8003b00:	d0f5      	beq.n	8003aee <spi_stm32_transceive+0xca>
			return (*current)->buf;
 8003b02:	6813      	ldr	r3, [r2, #0]
			*buf_len = (*current)->len / dfs;
 8003b04:	6631      	str	r1, [r6, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
 8003b06:	65f3      	str	r3, [r6, #92]	; 0x5c
	ctx->sync_status = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6433      	str	r3, [r6, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003b0c:	68ab      	ldr	r3, [r5, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 8003b0e:	07da      	lsls	r2, r3, #31
 8003b10:	d503      	bpl.n	8003b1a <spi_stm32_transceive+0xf6>
  return (uint8_t)(READ_REG(SPIx->DR));
 8003b12:	68eb      	ldr	r3, [r5, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003b14:	68ab      	ldr	r3, [r5, #8]
 8003b16:	07db      	lsls	r3, r3, #31
 8003b18:	d4fb      	bmi.n	8003b12 <spi_stm32_transceive+0xee>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003b1a:	682b      	ldr	r3, [r5, #0]
	struct spi_stm32_data *data = dev->data;
 8003b1c:	f8d8 4010 	ldr.w	r4, [r8, #16]
 8003b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b24:	602b      	str	r3, [r5, #0]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	b19b      	cbz	r3, 8003b52 <spi_stm32_transceive+0x12e>
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	b18b      	cbz	r3, 8003b52 <spi_stm32_transceive+0x12e>
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	b178      	cbz	r0, 8003b52 <spi_stm32_transceive+0x12e>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003b32:	791a      	ldrb	r2, [r3, #4]
 8003b34:	6903      	ldr	r3, [r0, #16]
 8003b36:	2101      	movs	r1, #1
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4091      	lsls	r1, r2
 8003b3c:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 8003b3e:	6883      	ldr	r3, [r0, #8]
 8003b40:	bf14      	ite	ne
 8003b42:	691b      	ldrne	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 8003b44:	68db      	ldreq	r3, [r3, #12]
 8003b46:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8003b4e:	f005 feff 	bl	8009950 <z_impl_k_busy_wait>
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8003b52:	686b      	ldr	r3, [r5, #4]
 8003b54:	f043 0320 	orr.w	r3, r3, #32
 8003b58:	606b      	str	r3, [r5, #4]
	if (rx_bufs) {
 8003b5a:	b11f      	cbz	r7, 8003b64 <spi_stm32_transceive+0x140>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8003b5c:	686b      	ldr	r3, [r5, #4]
 8003b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b62:	606b      	str	r3, [r5, #4]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8003b64:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8003b66:	6db2      	ldr	r2, [r6, #88]	; 0x58
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8003b68:	6869      	ldr	r1, [r5, #4]
			     ctx->config->frequency;
 8003b6a:	4630      	mov	r0, r6
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	bf38      	it	cc
 8003b70:	4613      	movcc	r3, r2
			     ctx->config->frequency;
 8003b72:	f850 2b28 	ldr.w	r2, [r0], #40
 8003b76:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8003b7a:	6814      	ldr	r4, [r2, #0]
 8003b7c:	6069      	str	r1, [r5, #4]
 8003b7e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003b82:	210a      	movs	r1, #10
 8003b84:	fb03 f202 	mul.w	r2, r3, r2
 8003b88:	fbb2 f2f4 	udiv	r2, r2, r4
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
 8003b8c:	f102 03c8 	add.w	r3, r2, #200	; 0xc8
 8003b90:	fba3 2301 	umull	r2, r3, r3, r1
	return z_impl_k_sem_take(sem, timeout);
 8003b94:	f004 fed4 	bl	8008940 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	f040 8245 	bne.w	8004028 <spi_stm32_transceive+0x604>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8003b9e:	6833      	ldr	r3, [r6, #0]
	status = ctx->sync_status;
 8003ba0:	6c34      	ldr	r4, [r6, #64]	; 0x40
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8003ba2:	889b      	ldrh	r3, [r3, #4]
 8003ba4:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8003ba8:	f47f af71 	bne.w	8003a8e <spi_stm32_transceive+0x6a>
		ctx->owner = NULL;
 8003bac:	6073      	str	r3, [r6, #4]
	z_impl_k_sem_give(sem);
 8003bae:	f106 0010 	add.w	r0, r6, #16
 8003bb2:	f004 fe9b 	bl	80088ec <z_impl_k_sem_give>
}
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	b003      	add	sp, #12
 8003bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!tx_bufs && !rx_bufs) {
 8003bbe:	2a00      	cmp	r2, #0
 8003bc0:	f000 821b 	beq.w	8003ffa <spi_stm32_transceive+0x5d6>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8003bc4:	88a3      	ldrh	r3, [r4, #4]
 8003bc6:	049a      	lsls	r2, r3, #18
 8003bc8:	d504      	bpl.n	8003bd4 <spi_stm32_transceive+0x1b0>
 8003bca:	69b3      	ldr	r3, [r6, #24]
 8003bcc:	b913      	cbnz	r3, 8003bd4 <spi_stm32_transceive+0x1b0>
		(k_sem_count_get(&ctx->lock) == 0) &&
 8003bce:	6873      	ldr	r3, [r6, #4]
 8003bd0:	429c      	cmp	r4, r3
 8003bd2:	d008      	beq.n	8003be6 <spi_stm32_transceive+0x1c2>
	return z_impl_k_sem_take(sem, timeout);
 8003bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bd8:	f106 0010 	add.w	r0, r6, #16
 8003bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003be0:	f004 feae 	bl	8008940 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8003be4:	6074      	str	r4, [r6, #4]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
 8003be6:	f106 0064 	add.w	r0, r6, #100	; 0x64
 8003bea:	f004 fed5 	bl	8008998 <z_impl_k_sem_reset>
	ret = spi_stm32_configure(dev, config);
 8003bee:	4622      	mov	r2, r4
 8003bf0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8003bf4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003bf8:	f7ff fc3c 	bl	8003474 <spi_stm32_configure.isra.0>
	if (ret) {
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	f47f af3f 	bne.w	8003a82 <spi_stm32_transceive+0x5e>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8003c04:	f1b9 0f00 	cmp.w	r9, #0
 8003c08:	f000 8201 	beq.w	800400e <spi_stm32_transceive+0x5ea>
 8003c0c:	f8d9 3000 	ldr.w	r3, [r9]
 8003c10:	6473      	str	r3, [r6, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8206 	beq.w	8004024 <spi_stm32_transceive+0x600>
 8003c18:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003c1c:	64b2      	str	r2, [r6, #72]	; 0x48
	while (*count) {
 8003c1e:	b932      	cbnz	r2, 8003c2e <spi_stm32_transceive+0x20a>
 8003c20:	e1f7      	b.n	8004012 <spi_stm32_transceive+0x5ee>
		++(*current);
 8003c22:	3308      	adds	r3, #8
		--(*count);
 8003c24:	e9c6 3211 	strd	r3, r2, [r6, #68]	; 0x44
	while (*count) {
 8003c28:	2a00      	cmp	r2, #0
 8003c2a:	f000 81f2 	beq.w	8004012 <spi_stm32_transceive+0x5ee>
		if (((*current)->len / dfs) != 0) {
 8003c2e:	6859      	ldr	r1, [r3, #4]
		--(*count);
 8003c30:	3a01      	subs	r2, #1
		if (((*current)->len / dfs) != 0) {
 8003c32:	2900      	cmp	r1, #0
 8003c34:	d0f5      	beq.n	8003c22 <spi_stm32_transceive+0x1fe>
			return (*current)->buf;
 8003c36:	681b      	ldr	r3, [r3, #0]
			*buf_len = (*current)->len / dfs;
 8003c38:	65b1      	str	r1, [r6, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 8003c3a:	6573      	str	r3, [r6, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8003c3c:	2f00      	cmp	r7, #0
 8003c3e:	f000 81e1 	beq.w	8004004 <spi_stm32_transceive+0x5e0>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	64f3      	str	r3, [r6, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 81ea 	beq.w	8004020 <spi_stm32_transceive+0x5fc>
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6532      	str	r2, [r6, #80]	; 0x50
	while (*count) {
 8003c50:	b932      	cbnz	r2, 8003c60 <spi_stm32_transceive+0x23c>
 8003c52:	e1d9      	b.n	8004008 <spi_stm32_transceive+0x5e4>
		++(*current);
 8003c54:	3308      	adds	r3, #8
		--(*count);
 8003c56:	e9c6 3213 	strd	r3, r2, [r6, #76]	; 0x4c
	while (*count) {
 8003c5a:	2a00      	cmp	r2, #0
 8003c5c:	f000 81d4 	beq.w	8004008 <spi_stm32_transceive+0x5e4>
		if (((*current)->len / dfs) != 0) {
 8003c60:	6859      	ldr	r1, [r3, #4]
		--(*count);
 8003c62:	3a01      	subs	r2, #1
		if (((*current)->len / dfs) != 0) {
 8003c64:	2900      	cmp	r1, #0
 8003c66:	d0f5      	beq.n	8003c54 <spi_stm32_transceive+0x230>
			return (*current)->buf;
 8003c68:	681b      	ldr	r3, [r3, #0]
			*buf_len = (*current)->len / dfs;
 8003c6a:	6631      	str	r1, [r6, #96]	; 0x60
	struct spi_stm32_data *data = dev->data;
 8003c6c:	f8d8 a010 	ldr.w	sl, [r8, #16]
	ctx->rx_buf = (uint8_t *)
 8003c70:	65f3      	str	r3, [r6, #92]	; 0x5c
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8003c72:	f8da 3000 	ldr.w	r3, [sl]
	ctx->sync_status = 0;
 8003c76:	2200      	movs	r2, #0
 8003c78:	6432      	str	r2, [r6, #64]	; 0x40
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8003c7a:	b1b3      	cbz	r3, 8003caa <spi_stm32_transceive+0x286>
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	b1a3      	cbz	r3, 8003caa <spi_stm32_transceive+0x286>
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	b190      	cbz	r0, 8003caa <spi_stm32_transceive+0x286>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003c84:	791a      	ldrb	r2, [r3, #4]
 8003c86:	6903      	ldr	r3, [r0, #16]
 8003c88:	2101      	movs	r1, #1
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4091      	lsls	r1, r2
 8003c8e:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 8003c90:	6883      	ldr	r3, [r0, #8]
 8003c92:	bf14      	ite	ne
 8003c94:	691b      	ldrne	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 8003c96:	68db      	ldreq	r3, [r3, #12]
 8003c98:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 8003c9a:	f8da 3000 	ldr.w	r3, [sl]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8003ca2:	f005 fe55 	bl	8009950 <z_impl_k_busy_wait>
	struct spi_stm32_data *data = dev->data;
 8003ca6:	f8d8 a010 	ldr.w	sl, [r8, #16]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003caa:	682b      	ldr	r3, [r5, #0]
		} else if (data->ctx.tx_len == 0) {
 8003cac:	6db4      	ldr	r4, [r6, #88]	; 0x58
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
 8003cae:	f8d6 9060 	ldr.w	r9, [r6, #96]	; 0x60
 8003cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	464c      	mov	r4, r9
 8003cba:	602b      	str	r3, [r5, #0]
 8003cbc:	2c00      	cmp	r4, #0
 8003cbe:	f000 8123 	beq.w	8003f08 <spi_stm32_transceive+0x4e4>
		} else if (data->ctx.tx_len == 0) {
 8003cc2:	b112      	cbz	r2, 8003cca <spi_stm32_transceive+0x2a6>
			dma_len = MIN(data->ctx.tx_len, data->ctx.rx_len);
 8003cc4:	4294      	cmp	r4, r2
 8003cc6:	bf28      	it	cs
 8003cc8:	4614      	movcs	r4, r2
		data->status_flags = 0;
 8003cca:	2100      	movs	r1, #0
	ret = spi_stm32_dma_rx_load(dev, data->ctx.rx_buf, dma_segment_len);
 8003ccc:	f8da b05c 	ldr.w	fp, [sl, #92]	; 0x5c
 8003cd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
		data->status_flags = 0;
 8003cd4:	67f1      	str	r1, [r6, #124]	; 0x7c
	blk_cfg = &stream->dma_blk_cfg;
 8003cd6:	f10a 09a4 	add.w	r9, sl, #164	; 0xa4
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 8003cda:	2220      	movs	r2, #32
 8003cdc:	4648      	mov	r0, r9
	dma_segment_len = len / data->dma_rx.dma_cfg.dest_data_size;
 8003cde:	f8ba 708e 	ldrh.w	r7, [sl, #142]	; 0x8e
 8003ce2:	9301      	str	r3, [sp, #4]
 8003ce4:	fbb4 f7f7 	udiv	r7, r4, r7
 8003ce8:	f007 fa88 	bl	800b1fc <memset>
	if (buf == NULL) {
 8003cec:	9b01      	ldr	r3, [sp, #4]
	blk_cfg->block_size = len;
 8003cee:	f8ca 70b8 	str.w	r7, [sl, #184]	; 0xb8
	if (buf == NULL) {
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	f1bb 0f00 	cmp.w	fp, #0
 8003cf8:	f000 8127 	beq.w	8003f4a <spi_stm32_transceive+0x526>
		if (data->dma_rx.dst_addr_increment) {
 8003cfc:	f89a 20c6 	ldrb.w	r2, [sl, #198]	; 0xc6
		blk_cfg->dest_address = (uint32_t)buf;
 8003d00:	f8ca b0a8 	str.w	fp, [sl, #168]	; 0xa8
		if (data->dma_rx.dst_addr_increment) {
 8003d04:	2a00      	cmp	r2, #0
 8003d06:	f000 8113 	beq.w	8003f30 <spi_stm32_transceive+0x50c>
			blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8003d0a:	f89a 20c0 	ldrb.w	r2, [sl, #192]	; 0xc0
 8003d0e:	f361 1205 	bfi	r2, r1, #4, #2
 8003d12:	f88a 20c0 	strb.w	r2, [sl, #192]	; 0xc0
  return (uint32_t) &(SPIx->DR);
 8003d16:	689b      	ldr	r3, [r3, #8]
	blk_cfg->fifo_mode_control = data->dma_rx.fifo_threshold;
 8003d18:	f8da 20c8 	ldr.w	r2, [sl, #200]	; 0xc8
	stream->dma_cfg.head_block = blk_cfg;
 8003d1c:	f8ca 9098 	str.w	r9, [sl, #152]	; 0x98
 8003d20:	330c      	adds	r3, #12
	blk_cfg->source_address = ll_func_dma_get_reg_addr(cfg->spi, SPI_STM32_DMA_RX);
 8003d22:	f8ca 30a4 	str.w	r3, [sl, #164]	; 0xa4
	if (data->dma_rx.src_addr_increment) {
 8003d26:	f89a 30c5 	ldrb.w	r3, [sl, #197]	; 0xc5
	stream->dma_cfg.user_data = data;
 8003d2a:	f8ca a09c 	str.w	sl, [sl, #156]	; 0x9c
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2300      	movne	r3, #0
 8003d34:	2302      	moveq	r3, #2
	blk_cfg->fifo_mode_control = data->dma_rx.fifo_threshold;
 8003d36:	f002 020f 	and.w	r2, r2, #15
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d40:	f8ba 20c0 	ldrh.w	r2, [sl, #192]	; 0xc0
			     struct dma_config *config)
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	return api->config(dev, channel, config);
 8003d44:	e9da 0120 	ldrd	r0, r1, [sl, #128]	; 0x80
 8003d48:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8003d4c:	f022 020c 	bic.w	r2, r2, #12
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8aa 30c0 	strh.w	r3, [sl, #192]	; 0xc0
 8003d56:	6883      	ldr	r3, [r0, #8]
 8003d58:	f10a 0288 	add.w	r2, sl, #136	; 0x88
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4798      	blx	r3
	if (ret != 0) {
 8003d60:	4601      	mov	r1, r0
 8003d62:	2800      	cmp	r0, #0
 8003d64:	f040 80d6 	bne.w	8003f14 <spi_stm32_transceive+0x4f0>
	return dma_start(data->dma_rx.dma_dev, data->dma_rx.channel);
 8003d68:	e9da 0120 	ldrd	r0, r1, [sl, #128]	; 0x80
static inline int z_impl_dma_start(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	return api->start(dev, channel);
 8003d6c:	6883      	ldr	r3, [r0, #8]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4798      	blx	r3
	if (ret != 0) {
 8003d72:	4601      	mov	r1, r0
 8003d74:	2800      	cmp	r0, #0
 8003d76:	f040 80cd 	bne.w	8003f14 <spi_stm32_transceive+0x4f0>
	dma_segment_len = len / data->dma_tx.dma_cfg.source_data_size;
 8003d7a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003d7e:	9001      	str	r0, [sp, #4]
	blk_cfg = &stream->dma_blk_cfg;
 8003d80:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003d84:	4618      	mov	r0, r3
 8003d86:	2220      	movs	r2, #32
	dma_segment_len = len / data->dma_tx.dma_cfg.source_data_size;
 8003d88:	f8ba 90d8 	ldrh.w	r9, [sl, #216]	; 0xd8
	ret = spi_stm32_dma_tx_load(dev, data->ctx.tx_buf, dma_segment_len);
 8003d8c:	f8da b054 	ldr.w	fp, [sl, #84]	; 0x54
 8003d90:	f8d8 a004 	ldr.w	sl, [r8, #4]
	dma_segment_len = len / data->dma_tx.dma_cfg.source_data_size;
 8003d94:	fbb4 f9f9 	udiv	r9, r4, r9
 8003d98:	f007 fa30 	bl	800b1fc <memset>
	if (buf == NULL) {
 8003d9c:	9901      	ldr	r1, [sp, #4]
	blk_cfg->block_size = len;
 8003d9e:	f8c7 9104 	str.w	r9, [r7, #260]	; 0x104
 8003da2:	4603      	mov	r3, r0
	if (buf == NULL) {
 8003da4:	f1bb 0f00 	cmp.w	fp, #0
 8003da8:	f000 80e4 	beq.w	8003f74 <spi_stm32_transceive+0x550>
		if (data->dma_tx.src_addr_increment) {
 8003dac:	f897 2111 	ldrb.w	r2, [r7, #273]	; 0x111
		blk_cfg->source_address = (uint32_t)buf;
 8003db0:	f8c7 b0f0 	str.w	fp, [r7, #240]	; 0xf0
		if (data->dma_tx.src_addr_increment) {
 8003db4:	2a00      	cmp	r2, #0
 8003db6:	f000 80d5 	beq.w	8003f64 <spi_stm32_transceive+0x540>
			blk_cfg->source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8003dba:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8003dbe:	f361 0283 	bfi	r2, r1, #2, #2
 8003dc2:	f887 210c 	strb.w	r2, [r7, #268]	; 0x10c
 8003dc6:	f8da 2008 	ldr.w	r2, [sl, #8]
	stream->dma_cfg.head_block = blk_cfg;
 8003dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (data->dma_tx.dst_addr_increment) {
 8003dce:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
	ret = dma_config(data->dma_tx.dma_dev, data->dma_tx.channel,
 8003dd2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
	stream->dma_cfg.user_data = data;
 8003dd6:	f8c7 70e8 	str.w	r7, [r7, #232]	; 0xe8
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8003dda:	2b00      	cmp	r3, #0
	blk_cfg->fifo_mode_control = data->dma_tx.fifo_threshold;
 8003ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de0:	f102 020c 	add.w	r2, r2, #12
 8003de4:	f003 010f 	and.w	r1, r3, #15
	blk_cfg->dest_address = ll_func_dma_get_reg_addr(cfg->spi, SPI_STM32_DMA_TX);
 8003de8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8003dec:	bf18      	it	ne
 8003dee:	2300      	movne	r3, #0
	blk_cfg->fifo_mode_control = data->dma_tx.fifo_threshold;
 8003df0:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8003df4:	bf08      	it	eq
 8003df6:	2302      	moveq	r3, #2
	blk_cfg->fifo_mode_control = data->dma_tx.fifo_threshold;
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	f422 6273 	bic.w	r2, r2, #3888	; 0xf30
 8003dfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
	return api->config(dev, channel, config);
 8003e08:	6883      	ldr	r3, [r0, #8]
 8003e0a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8003e14:	4798      	blx	r3
	if (ret != 0) {
 8003e16:	4601      	mov	r1, r0
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d17b      	bne.n	8003f14 <spi_stm32_transceive+0x4f0>
	return dma_start(data->dma_tx.dma_dev, data->dma_tx.channel);
 8003e1c:	e9d7 0133 	ldrd	r0, r1, [r7, #204]	; 0xcc
	return api->start(dev, channel);
 8003e20:	6883      	ldr	r3, [r0, #8]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4798      	blx	r3
		if (ret != 0) {
 8003e26:	4601      	mov	r1, r0
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d173      	bne.n	8003f14 <spi_stm32_transceive+0x4f0>
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8003e2c:	686b      	ldr	r3, [r5, #4]
 8003e2e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	606b      	str	r3, [r5, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8003e38:	686b      	ldr	r3, [r5, #4]
 8003e3a:	f043 0302 	orr.w	r3, r3, #2
 8003e3e:	606b      	str	r3, [r5, #4]
		res = k_sem_take(&data->status_sem, K_MSEC(1000));
 8003e40:	f107 0964 	add.w	r9, r7, #100	; 0x64
 8003e44:	e006      	b.n	8003e54 <spi_stm32_transceive+0x430>
		if (data->status_flags & SPI_STM32_DMA_ERROR_FLAG) {
 8003e46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e48:	07db      	lsls	r3, r3, #31
 8003e4a:	d479      	bmi.n	8003f40 <spi_stm32_transceive+0x51c>
		if (data->status_flags & SPI_STM32_DMA_DONE_FLAG) {
 8003e4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e4e:	f013 0f06 	tst.w	r3, #6
 8003e52:	d129      	bne.n	8003ea8 <spi_stm32_transceive+0x484>
	return z_impl_k_sem_take(sem, timeout);
 8003e54:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e58:	2300      	movs	r3, #0
 8003e5a:	4648      	mov	r0, r9
 8003e5c:	f004 fd70 	bl	8008940 <z_impl_k_sem_take>
		if (res != 0) {
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d0f0      	beq.n	8003e46 <spi_stm32_transceive+0x422>
 8003e64:	f8d8 a010 	ldr.w	sl, [r8, #16]
 8003e68:	4604      	mov	r4, r0
	spi_stm32_complete(dev, ret);
 8003e6a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003e6e:	4651      	mov	r1, sl
 8003e70:	4622      	mov	r2, r4
 8003e72:	f7ff fbe7 	bl	8003644 <spi_stm32_complete.isra.0>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003e76:	682b      	ldr	r3, [r5, #0]
	dma_stop(data->dma_rx.dma_dev, data->dma_rx.channel);
 8003e78:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
 8003e7c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 8003e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e84:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8003e86:	686b      	ldr	r3, [r5, #4]
 8003e88:	f023 0302 	bic.w	r3, r3, #2
 8003e8c:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8003e8e:	686b      	ldr	r3, [r5, #4]
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	606b      	str	r3, [r5, #4]
static inline int z_impl_dma_stop(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	return api->stop(dev, channel);
 8003e96:	6883      	ldr	r3, [r0, #8]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	4798      	blx	r3
	dma_stop(data->dma_tx.dma_dev, data->dma_tx.channel);
 8003e9c:	e9d6 0133 	ldrd	r0, r1, [r6, #204]	; 0xcc
 8003ea0:	6883      	ldr	r3, [r0, #8]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4798      	blx	r3
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&channel, K_SYSCALL_DMA_STOP);
	}
#endif
	compiler_barrier();
	return z_impl_dma_stop(dev, channel);
 8003ea6:	e5ec      	b.n	8003a82 <spi_stm32_transceive+0x5e>
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8003ea8:	68ab      	ldr	r3, [r5, #8]
		while (LL_SPI_GetTxFIFOLevel(spi) > 0) {
 8003eaa:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8003eae:	d1fb      	bne.n	8003ea8 <spi_stm32_transceive+0x484>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003eb0:	68ab      	ldr	r3, [r5, #8]
 8003eb2:	079f      	lsls	r7, r3, #30
 8003eb4:	d5fc      	bpl.n	8003eb0 <spi_stm32_transceive+0x48c>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8003eb6:	68ab      	ldr	r3, [r5, #8]
 8003eb8:	0618      	lsls	r0, r3, #24
 8003eba:	d4f9      	bmi.n	8003eb0 <spi_stm32_transceive+0x48c>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8003ebc:	686b      	ldr	r3, [r5, #4]
	if (!ctx->tx_len) {
 8003ebe:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003ec0:	f023 0302 	bic.w	r3, r3, #2
 8003ec4:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8003ec6:	686b      	ldr	r3, [r5, #4]
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	606b      	str	r3, [r5, #4]
 8003ece:	b14a      	cbz	r2, 8003ee4 <spi_stm32_transceive+0x4c0>
	if (len > ctx->tx_len) {
 8003ed0:	4294      	cmp	r4, r2
 8003ed2:	d807      	bhi.n	8003ee4 <spi_stm32_transceive+0x4c0>
	ctx->tx_len -= len;
 8003ed4:	1b12      	subs	r2, r2, r4
 8003ed6:	65b2      	str	r2, [r6, #88]	; 0x58
	if (!ctx->tx_len) {
 8003ed8:	2a00      	cmp	r2, #0
 8003eda:	d06d      	beq.n	8003fb8 <spi_stm32_transceive+0x594>
	} else if (ctx->tx_buf) {
 8003edc:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8003ede:	b10b      	cbz	r3, 8003ee4 <spi_stm32_transceive+0x4c0>
		ctx->tx_buf += dfs * len;
 8003ee0:	4423      	add	r3, r4
 8003ee2:	6573      	str	r3, [r6, #84]	; 0x54
	if (!ctx->rx_len) {
 8003ee4:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8003ee6:	b1e3      	cbz	r3, 8003f22 <spi_stm32_transceive+0x4fe>
	if (len > ctx->rx_len) {
 8003ee8:	429c      	cmp	r4, r3
 8003eea:	d839      	bhi.n	8003f60 <spi_stm32_transceive+0x53c>
	ctx->rx_len -= len;
 8003eec:	1b1b      	subs	r3, r3, r4
 8003eee:	6633      	str	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d04c      	beq.n	8003f8e <spi_stm32_transceive+0x56a>
	} else if (ctx->rx_buf) {
 8003ef4:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8003ef6:	b399      	cbz	r1, 8003f60 <spi_stm32_transceive+0x53c>
		ctx->rx_buf += dfs * len;
 8003ef8:	4421      	add	r1, r4
 8003efa:	65f1      	str	r1, [r6, #92]	; 0x5c
 8003efc:	461c      	mov	r4, r3
	struct spi_stm32_data *data = dev->data;
 8003efe:	f8d8 a010 	ldr.w	sl, [r8, #16]
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
 8003f02:	2c00      	cmp	r4, #0
 8003f04:	f47f aedd 	bne.w	8003cc2 <spi_stm32_transceive+0x29e>
 8003f08:	4614      	mov	r4, r2
 8003f0a:	2a00      	cmp	r2, #0
 8003f0c:	f47f aedd 	bne.w	8003cca <spi_stm32_transceive+0x2a6>
 8003f10:	4614      	mov	r4, r2
 8003f12:	e7aa      	b.n	8003e6a <spi_stm32_transceive+0x446>
 8003f14:	f8d8 a010 	ldr.w	sl, [r8, #16]
 8003f18:	460c      	mov	r4, r1
 8003f1a:	e7a6      	b.n	8003e6a <spi_stm32_transceive+0x446>
	*buf_len = 0;
 8003f1c:	2300      	movs	r3, #0
		ctx->rx_buf = (uint8_t *)
 8003f1e:	e9c6 3317 	strd	r3, r3, [r6, #92]	; 0x5c
	struct spi_stm32_data *data = dev->data;
 8003f22:	f8d8 a010 	ldr.w	sl, [r8, #16]
 8003f26:	4614      	mov	r4, r2
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
 8003f28:	2a00      	cmp	r2, #0
 8003f2a:	f47f aece 	bne.w	8003cca <spi_stm32_transceive+0x2a6>
 8003f2e:	e7ef      	b.n	8003f10 <spi_stm32_transceive+0x4ec>
			blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8003f30:	f89a 20c0 	ldrb.w	r2, [sl, #192]	; 0xc0
 8003f34:	2102      	movs	r1, #2
 8003f36:	f361 1205 	bfi	r2, r1, #4, #2
 8003f3a:	f88a 20c0 	strb.w	r2, [sl, #192]	; 0xc0
 8003f3e:	e6ea      	b.n	8003d16 <spi_stm32_transceive+0x2f2>
 8003f40:	f8d8 a010 	ldr.w	sl, [r8, #16]
			return -EIO;
 8003f44:	f06f 0404 	mvn.w	r4, #4
 8003f48:	e78f      	b.n	8003e6a <spi_stm32_transceive+0x446>
		blk_cfg->dest_address = (uint32_t)&dummy_rx_tx_buffer;
 8003f4a:	4a39      	ldr	r2, [pc, #228]	; (8004030 <spi_stm32_transceive+0x60c>)
 8003f4c:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8003f50:	f89a 20c0 	ldrb.w	r2, [sl, #192]	; 0xc0
 8003f54:	2102      	movs	r1, #2
 8003f56:	f361 1205 	bfi	r2, r1, #4, #2
 8003f5a:	f88a 20c0 	strb.w	r2, [sl, #192]	; 0xc0
 8003f5e:	e6da      	b.n	8003d16 <spi_stm32_transceive+0x2f2>
 8003f60:	461c      	mov	r4, r3
 8003f62:	e7cc      	b.n	8003efe <spi_stm32_transceive+0x4da>
			blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8003f64:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8003f68:	2102      	movs	r1, #2
 8003f6a:	f361 0283 	bfi	r2, r1, #2, #2
 8003f6e:	f887 210c 	strb.w	r2, [r7, #268]	; 0x10c
 8003f72:	e728      	b.n	8003dc6 <spi_stm32_transceive+0x3a2>
		dummy_rx_tx_buffer = 0;
 8003f74:	4a2e      	ldr	r2, [pc, #184]	; (8004030 <spi_stm32_transceive+0x60c>)
		blk_cfg->source_address = (uint32_t)&dummy_rx_tx_buffer;
 8003f76:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
		dummy_rx_tx_buffer = 0;
 8003f7a:	f8c2 b000 	str.w	fp, [r2]
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8003f7e:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8003f82:	2102      	movs	r1, #2
 8003f84:	f361 0283 	bfi	r2, r1, #2, #2
 8003f88:	f887 210c 	strb.w	r2, [r7, #268]	; 0x10c
 8003f8c:	e71b      	b.n	8003dc6 <spi_stm32_transceive+0x3a2>
		++ctx->current_rx;
 8003f8e:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8003f90:	6d33      	ldr	r3, [r6, #80]	; 0x50
		++ctx->current_rx;
 8003f92:	3108      	adds	r1, #8
		--ctx->rx_count;
 8003f94:	3b01      	subs	r3, #1
		++ctx->current_rx;
 8003f96:	64f1      	str	r1, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8003f98:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8003f9a:	b92b      	cbnz	r3, 8003fa8 <spi_stm32_transceive+0x584>
 8003f9c:	e7be      	b.n	8003f1c <spi_stm32_transceive+0x4f8>
		++(*current);
 8003f9e:	3108      	adds	r1, #8
		--(*count);
 8003fa0:	e9c6 1313 	strd	r1, r3, [r6, #76]	; 0x4c
	while (*count) {
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0b9      	beq.n	8003f1c <spi_stm32_transceive+0x4f8>
		if (((*current)->len / dfs) != 0) {
 8003fa8:	684c      	ldr	r4, [r1, #4]
		--(*count);
 8003faa:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8003fac:	2c00      	cmp	r4, #0
 8003fae:	d0f6      	beq.n	8003f9e <spi_stm32_transceive+0x57a>
		ctx->rx_buf = (uint8_t *)
 8003fb0:	680b      	ldr	r3, [r1, #0]
			*buf_len = (*current)->len / dfs;
 8003fb2:	e9c6 3417 	strd	r3, r4, [r6, #92]	; 0x5c
			return (*current)->buf;
 8003fb6:	e7a2      	b.n	8003efe <spi_stm32_transceive+0x4da>
		++ctx->current_tx;
 8003fb8:	6c71      	ldr	r1, [r6, #68]	; 0x44
		--ctx->tx_count;
 8003fba:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		++ctx->current_tx;
 8003fbc:	3108      	adds	r1, #8
		--ctx->tx_count;
 8003fbe:	3b01      	subs	r3, #1
		++ctx->current_tx;
 8003fc0:	6471      	str	r1, [r6, #68]	; 0x44
		--ctx->tx_count;
 8003fc2:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8003fc4:	b923      	cbnz	r3, 8003fd0 <spi_stm32_transceive+0x5ac>
 8003fc6:	e015      	b.n	8003ff4 <spi_stm32_transceive+0x5d0>
		++(*current);
 8003fc8:	3108      	adds	r1, #8
		--(*count);
 8003fca:	e9c6 1311 	strd	r1, r3, [r6, #68]	; 0x44
	while (*count) {
 8003fce:	b18b      	cbz	r3, 8003ff4 <spi_stm32_transceive+0x5d0>
		if (((*current)->len / dfs) != 0) {
 8003fd0:	6848      	ldr	r0, [r1, #4]
		--(*count);
 8003fd2:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d0f7      	beq.n	8003fc8 <spi_stm32_transceive+0x5a4>
			return (*current)->buf;
 8003fd8:	680b      	ldr	r3, [r1, #0]
			*buf_len = (*current)->len / dfs;
 8003fda:	65b0      	str	r0, [r6, #88]	; 0x58
		if (((*current)->len / dfs) != 0) {
 8003fdc:	4602      	mov	r2, r0
			return (*current)->buf;
 8003fde:	e780      	b.n	8003ee2 <spi_stm32_transceive+0x4be>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8003fe0:	e9c6 7713 	strd	r7, r7, [r6, #76]	; 0x4c
	*buf_len = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	6633      	str	r3, [r6, #96]	; 0x60
	return NULL;
 8003fe8:	e58d      	b.n	8003b06 <spi_stm32_transceive+0xe2>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8003fea:	e9c6 9911 	strd	r9, r9, [r6, #68]	; 0x44
	*buf_len = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	65b3      	str	r3, [r6, #88]	; 0x58
	return NULL;
 8003ff2:	e56f      	b.n	8003ad4 <spi_stm32_transceive+0xb0>
	*buf_len = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	65b3      	str	r3, [r6, #88]	; 0x58
	return NULL;
 8003ff8:	e773      	b.n	8003ee2 <spi_stm32_transceive+0x4be>
	if (!tx_bufs && !rx_bufs) {
 8003ffa:	2f00      	cmp	r7, #0
 8003ffc:	f47f ade2 	bne.w	8003bc4 <spi_stm32_transceive+0x1a0>
		return 0;
 8004000:	463c      	mov	r4, r7
 8004002:	e544      	b.n	8003a8e <spi_stm32_transceive+0x6a>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8004004:	e9c6 7713 	strd	r7, r7, [r6, #76]	; 0x4c
	*buf_len = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	6633      	str	r3, [r6, #96]	; 0x60
	return NULL;
 800400c:	e62e      	b.n	8003c6c <spi_stm32_transceive+0x248>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800400e:	e9c6 9911 	strd	r9, r9, [r6, #68]	; 0x44
	*buf_len = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	65b3      	str	r3, [r6, #88]	; 0x58
	return NULL;
 8004016:	e610      	b.n	8003c3a <spi_stm32_transceive+0x216>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8004018:	64b2      	str	r2, [r6, #72]	; 0x48
	while (*count) {
 800401a:	e7e8      	b.n	8003fee <spi_stm32_transceive+0x5ca>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800401c:	6532      	str	r2, [r6, #80]	; 0x50
	while (*count) {
 800401e:	e7e1      	b.n	8003fe4 <spi_stm32_transceive+0x5c0>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8004020:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8004022:	e7f1      	b.n	8004008 <spi_stm32_transceive+0x5e4>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8004024:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8004026:	e7f4      	b.n	8004012 <spi_stm32_transceive+0x5ee>
		return -ETIMEDOUT;
 8004028:	f06f 0473 	mvn.w	r4, #115	; 0x73
 800402c:	e529      	b.n	8003a82 <spi_stm32_transceive+0x5e>
 800402e:	bf00      	nop
 8004030:	20000a3c 	.word	0x20000a3c

08004034 <spi_stm32_init>:
{
 8004034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8004038:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 800403a:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 800403e:	b082      	sub	sp, #8
 8004040:	4604      	mov	r4, r0
 8004042:	4e4f      	ldr	r6, [pc, #316]	; (8004180 <spi_stm32_init+0x14c>)
 8004044:	4630      	mov	r0, r6
 8004046:	f004 f975 	bl	8008334 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800404a:	2800      	cmp	r0, #0
 800404c:	f000 8095 	beq.w	800417a <spi_stm32_init+0x146>
	return api->on(dev, sys);
 8004050:	68b3      	ldr	r3, [r6, #8]
 8004052:	4630      	mov	r0, r6
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4641      	mov	r1, r8
 8004058:	4798      	blx	r3
	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800405a:	4607      	mov	r7, r0
 800405c:	2800      	cmp	r0, #0
 800405e:	f040 808c 	bne.w	800417a <spi_stm32_init+0x146>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8004062:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8004066:	aa01      	add	r2, sp, #4
 8004068:	4639      	mov	r1, r7
 800406a:	f003 ff5d 	bl	8007f28 <pinctrl_lookup_state>
	if (ret < 0) {
 800406e:	2800      	cmp	r0, #0
 8004070:	db5b      	blt.n	800412a <spi_stm32_init+0xf6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8004072:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8004074:	463a      	mov	r2, r7
 8004076:	7919      	ldrb	r1, [r3, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	f003 ff77 	bl	8007f6c <pinctrl_configure_pins>
		if (err < 0) {
 800407e:	2800      	cmp	r0, #0
 8004080:	db53      	blt.n	800412a <spi_stm32_init+0xf6>
	cfg->irq_config(dev);
 8004082:	4620      	mov	r0, r4
 8004084:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004088:	4798      	blx	r3
	if ((data->dma_rx.dma_dev != NULL) &&
 800408a:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 800408e:	b118      	cbz	r0, 8004098 <spi_stm32_init+0x64>
 8004090:	f004 f950 	bl	8008334 <z_device_is_ready>
 8004094:	2800      	cmp	r0, #0
 8004096:	d042      	beq.n	800411e <spi_stm32_init+0xea>
	if ((data->dma_tx.dma_dev != NULL) &&
 8004098:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
 800409c:	b118      	cbz	r0, 80040a6 <spi_stm32_init+0x72>
 800409e:	f004 f949 	bl	8008334 <z_device_is_ready>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d03b      	beq.n	800411e <spi_stm32_init+0xea>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 80040a6:	e9d5 4302 	ldrd	r4, r3, [r5, #8]
 80040aa:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80040ae:	429c      	cmp	r4, r3
 80040b0:	d240      	bcs.n	8004134 <spi_stm32_init+0x100>
 80040b2:	3408      	adds	r4, #8
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80040b4:	f04f 0801 	mov.w	r8, #1
 80040b8:	e02a      	b.n	8004110 <spi_stm32_init+0xdc>
 80040ba:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80040be:	f814 1c04 	ldrb.w	r1, [r4, #-4]
 80040c2:	f814 3c03 	ldrb.w	r3, [r4, #-3]
	struct gpio_driver_data *data =
 80040c6:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
 80040ca:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80040ce:	f8de c000 	ldr.w	ip, [lr]
	return api->pin_configure(port, pin, flags);
 80040d2:	f8d9 9000 	ldr.w	r9, [r9]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80040d6:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
 80040d8:	bf54      	ite	pl
 80040da:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80040de:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80040e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80040e6:	fa08 fa01 	lsl.w	sl, r8, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80040ea:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80040ec:	bf4c      	ite	mi
 80040ee:	ea4c 030a 	orrmi.w	r3, ip, sl
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80040f2:	ea2c 030a 	bicpl.w	r3, ip, sl
 80040f6:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
 80040fa:	47c8      	blx	r9
		if (ret < 0) {
 80040fc:	2800      	cmp	r0, #0
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 80040fe:	f104 0408 	add.w	r4, r4, #8
		if (ret < 0) {
 8004102:	db12      	blt.n	800412a <spi_stm32_init+0xf6>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8004104:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8004108:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800410c:	429e      	cmp	r6, r3
 800410e:	d211      	bcs.n	8004134 <spi_stm32_init+0x100>
		if (!device_is_ready(cs_gpio->port)) {
 8004110:	f854 0c08 	ldr.w	r0, [r4, #-8]
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_DEVICE_IS_READY);
	}
#endif
	compiler_barrier();
 8004114:	4626      	mov	r6, r4
 8004116:	f004 f90d 	bl	8008334 <z_device_is_ready>
 800411a:	2800      	cmp	r0, #0
 800411c:	d1cd      	bne.n	80040ba <spi_stm32_init+0x86>
		return -ENODEV;
 800411e:	f06f 0712 	mvn.w	r7, #18
}
 8004122:	4638      	mov	r0, r7
 8004124:	b002      	add	sp, #8
 8004126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (err < 0) {
 800412a:	4607      	mov	r7, r0
}
 800412c:	4638      	mov	r0, r7
 800412e:	b002      	add	sp, #8
 8004130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8004134:	682b      	ldr	r3, [r5, #0]
 8004136:	b1a3      	cbz	r3, 8004162 <spi_stm32_init+0x12e>
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	b193      	cbz	r3, 8004162 <spi_stm32_init+0x12e>
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	b182      	cbz	r2, 8004162 <spi_stm32_init+0x12e>
			k_busy_wait(ctx->config->cs->delay);
 8004140:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8004142:	f005 fc05 	bl	8009950 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8004146:	682b      	ldr	r3, [r5, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 800414a:	6818      	ldr	r0, [r3, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800414c:	791a      	ldrb	r2, [r3, #4]
 800414e:	6903      	ldr	r3, [r0, #16]
 8004150:	2101      	movs	r1, #1
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4091      	lsls	r1, r2
 8004156:	4219      	tst	r1, r3
	return api->port_set_bits_raw(port, pins);
 8004158:	6883      	ldr	r3, [r0, #8]
 800415a:	bf14      	ite	ne
 800415c:	68db      	ldrne	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 800415e:	691b      	ldreq	r3, [r3, #16]
 8004160:	4798      	blx	r3
	if (!k_sem_count_get(&ctx->lock)) {
 8004162:	69ab      	ldr	r3, [r5, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1dc      	bne.n	8004122 <spi_stm32_init+0xee>
		ctx->owner = NULL;
 8004168:	606b      	str	r3, [r5, #4]
	z_impl_k_sem_give(sem);
 800416a:	f105 0010 	add.w	r0, r5, #16
 800416e:	f004 fbbd 	bl	80088ec <z_impl_k_sem_give>
 8004172:	4638      	mov	r0, r7
 8004174:	b002      	add	sp, #8
 8004176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EIO;
 800417a:	f06f 0704 	mvn.w	r7, #4
 800417e:	e7d0      	b.n	8004122 <spi_stm32_init+0xee>
 8004180:	0800b78c 	.word	0x0800b78c

08004184 <timer_work_handler>:
	TimerIrqHandler();
 8004184:	f000 bedc 	b.w	8004f40 <TimerIrqHandler>

08004188 <timer_callback>:
	k_work_submit(&timer_work);
 8004188:	4801      	ldr	r0, [pc, #4]	; (8004190 <timer_callback+0x8>)
 800418a:	f004 bd17 	b.w	8008bbc <k_work_submit>
 800418e:	bf00      	nop
 8004190:	20000298 	.word	0x20000298

08004194 <RtcGetTimerValue>:
{
 8004194:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8004196:	f005 fbc3 	bl	8009920 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800419a:	220a      	movs	r2, #10
 800419c:	2300      	movs	r3, #0
 800419e:	f7fc f84f 	bl	8000240 <__aeabi_uldivmod>
}
 80041a2:	bd08      	pop	{r3, pc}

080041a4 <RtcGetTimerElapsedTime>:
{
 80041a4:	b508      	push	{r3, lr}
 80041a6:	f005 fbbb 	bl	8009920 <z_impl_k_uptime_ticks>
 80041aa:	220a      	movs	r2, #10
 80041ac:	2300      	movs	r3, #0
 80041ae:	f7fc f847 	bl	8000240 <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 80041b2:	4b02      	ldr	r3, [pc, #8]	; (80041bc <RtcGetTimerElapsedTime+0x18>)
 80041b4:	681b      	ldr	r3, [r3, #0]
}
 80041b6:	1ac0      	subs	r0, r0, r3
 80041b8:	bd08      	pop	{r3, pc}
 80041ba:	bf00      	nop
 80041bc:	20000a40 	.word	0x20000a40

080041c0 <RtcGetMinimumTimeout>:
}
 80041c0:	2001      	movs	r0, #1
 80041c2:	4770      	bx	lr

080041c4 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
 80041c4:	4801      	ldr	r0, [pc, #4]	; (80041cc <RtcStopAlarm+0x8>)
 80041c6:	f005 bc79 	b.w	8009abc <z_impl_k_timer_stop>
 80041ca:	bf00      	nop
 80041cc:	200003f8 	.word	0x200003f8

080041d0 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 80041d0:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80041d2:	f005 fba5 	bl	8009920 <z_impl_k_uptime_ticks>
 80041d6:	220a      	movs	r2, #10
 80041d8:	2300      	movs	r3, #0
 80041da:	f7fc f831 	bl	8000240 <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 80041de:	4b01      	ldr	r3, [pc, #4]	; (80041e4 <RtcSetTimerContext+0x14>)
 80041e0:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 80041e2:	bd08      	pop	{r3, pc}
 80041e4:	20000a40 	.word	0x20000a40

080041e8 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
 80041e8:	4b01      	ldr	r3, [pc, #4]	; (80041f0 <RtcGetTimerContext+0x8>)
}
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	20000a40 	.word	0x20000a40

080041f4 <DelayMsMcu>:
			return t * ((uint64_t)to_hz / from_hz);
 80041f4:	210a      	movs	r1, #10
 80041f6:	fba0 0101 	umull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 80041fa:	f005 b97b 	b.w	80094f4 <z_impl_k_sleep>
 80041fe:	bf00      	nop

08004200 <RtcMs2Tick>:
}

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop

08004204 <RtcTick2Ms>:
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop

08004208 <BoardCriticalSectionBegin>:
	__asm__ volatile(
 8004208:	f04f 0210 	mov.w	r2, #16
 800420c:	f3ef 8311 	mrs	r3, BASEPRI
 8004210:	f382 8812 	msr	BASEPRI_MAX, r2
 8004214:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 8004218:	6003      	str	r3, [r0, #0]
}
 800421a:	4770      	bx	lr

0800421c <BoardCriticalSectionEnd>:
	__asm__ volatile(
 800421c:	6803      	ldr	r3, [r0, #0]
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
 8004226:	4770      	bx	lr

08004228 <sx12xx_ev_rx_error_timeout>:
}

static void sx12xx_ev_rx_error_timeout(void)
{
    LOG_DBG("Receive timeout/error");
    struct k_poll_signal *sig = dev_data.operation_done;
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <sx12xx_ev_rx_error_timeout+0x20>)

    /* Receiving in asynchronous mode */
    if (dev_data.async_rx_error_timeout_cb) {
 800422a:	68da      	ldr	r2, [r3, #12]
{
 800422c:	b510      	push	{r4, lr}
    struct k_poll_signal *sig = dev_data.operation_done;
 800422e:	685c      	ldr	r4, [r3, #4]
    if (dev_data.async_rx_error_timeout_cb) {
 8004230:	b10a      	cbz	r2, 8004236 <sx12xx_ev_rx_error_timeout+0xe>
        /* Run the callback */
        dev_data.async_rx_error_timeout_cb(dev_data.dev);
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	4790      	blx	r2
    }

    /* Raise signal if provided */
    if (sig) {
 8004236:	b12c      	cbz	r4, 8004244 <sx12xx_ev_rx_error_timeout+0x1c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8004238:	2100      	movs	r1, #0
 800423a:	4620      	mov	r0, r4
        k_poll_signal_raise(sig, 0);
    }
}
 800423c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004240:	f005 bf40 	b.w	800a0c4 <z_impl_k_poll_signal_raise>
 8004244:	bd10      	pop	{r4, pc}
 8004246:	bf00      	nop
 8004248:	20000a44 	.word	0x20000a44

0800424c <sx12xx_ev_rx_done>:
{
 800424c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (dev_data.async_rx_cb) {
 8004250:	4c27      	ldr	r4, [pc, #156]	; (80042f0 <sx12xx_ev_rx_done+0xa4>)
 8004252:	68a5      	ldr	r5, [r4, #8]
{
 8004254:	b084      	sub	sp, #16
 8004256:	4684      	mov	ip, r0
 8004258:	4617      	mov	r7, r2
 800425a:	461e      	mov	r6, r3
	if (dev_data.async_rx_cb) {
 800425c:	b16d      	cbz	r5, 800427a <sx12xx_ev_rx_done+0x2e>
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
 800425e:	6820      	ldr	r0, [r4, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	4613      	mov	r3, r2
 8004264:	460a      	mov	r2, r1
 8004266:	4661      	mov	r1, ip
 8004268:	47a8      	blx	r5
		Radio.Rx(0);
 800426a:	4b22      	ldr	r3, [pc, #136]	; (80042f4 <sx12xx_ev_rx_done+0xa8>)
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426e:	9303      	str	r3, [sp, #12]
 8004270:	2000      	movs	r0, #0
}
 8004272:	b004      	add	sp, #16
 8004274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Radio.Rx(0);
 8004278:	4718      	bx	r3
 800427a:	f104 0544 	add.w	r5, r4, #68	; 0x44
 800427e:	2302      	movs	r3, #2
	struct k_poll_signal *sig = dev_data.operation_done;
 8004280:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8004284:	f3bf 8f5b 	dmb	ish
 8004288:	e855 2f00 	ldrex	r2, [r5]
 800428c:	2a01      	cmp	r2, #1
 800428e:	d103      	bne.n	8004298 <sx12xx_ev_rx_done+0x4c>
 8004290:	e845 3000 	strex	r0, r3, [r5]
 8004294:	2800      	cmp	r0, #0
 8004296:	d1f7      	bne.n	8004288 <sx12xx_ev_rx_done+0x3c>
 8004298:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 800429c:	d125      	bne.n	80042ea <sx12xx_ev_rx_done+0x9e>
	if (size < *dev_data.rx_params.size) {
 800429e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042a0:	781a      	ldrb	r2, [r3, #0]
 80042a2:	428a      	cmp	r2, r1
 80042a4:	d902      	bls.n	80042ac <sx12xx_ev_rx_done+0x60>
		*dev_data.rx_params.size = size;
 80042a6:	7019      	strb	r1, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
 80042a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042aa:	781a      	ldrb	r2, [r3, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80042ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80042ae:	4661      	mov	r1, ip
 80042b0:	f006 ff96 	bl	800b1e0 <memcpy>
	if (dev_data.rx_params.rssi) {
 80042b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042b6:	b103      	cbz	r3, 80042ba <sx12xx_ev_rx_done+0x6e>
		*dev_data.rx_params.rssi = rssi;
 80042b8:	801f      	strh	r7, [r3, #0]
	if (dev_data.rx_params.snr) {
 80042ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042bc:	b103      	cbz	r3, 80042c0 <sx12xx_ev_rx_done+0x74>
		*dev_data.rx_params.snr = snr;
 80042be:	701e      	strb	r6, [r3, #0]
	Radio.Sleep();
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <sx12xx_ev_rx_done+0xa8>)
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	4798      	blx	r3
	dev_data.operation_done = NULL;
 80042c6:	2100      	movs	r1, #0
 80042c8:	6061      	str	r1, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80042ca:	f3bf 8f5b 	dmb	ish
 80042ce:	e855 3f00 	ldrex	r3, [r5]
 80042d2:	e845 1200 	strex	r2, r1, [r5]
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	d1f9      	bne.n	80042ce <sx12xx_ev_rx_done+0x82>
 80042da:	f3bf 8f5b 	dmb	ish
 80042de:	4640      	mov	r0, r8
}
 80042e0:	b004      	add	sp, #16
 80042e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042e6:	f005 beed 	b.w	800a0c4 <z_impl_k_poll_signal_raise>
 80042ea:	b004      	add	sp, #16
 80042ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f0:	20000a44 	.word	0x20000a44
 80042f4:	0800c208 	.word	0x0800c208

080042f8 <sx12xx_ev_tx_done>:
{
 80042f8:	b570      	push	{r4, r5, r6, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 80042fa:	4d14      	ldr	r5, [pc, #80]	; (800434c <sx12xx_ev_tx_done+0x54>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80042fc:	2302      	movs	r3, #2
 80042fe:	f105 0444 	add.w	r4, r5, #68	; 0x44
 8004302:	686e      	ldr	r6, [r5, #4]
 8004304:	f3bf 8f5b 	dmb	ish
 8004308:	e854 2f00 	ldrex	r2, [r4]
 800430c:	2a01      	cmp	r2, #1
 800430e:	d103      	bne.n	8004318 <sx12xx_ev_tx_done+0x20>
 8004310:	e844 3100 	strex	r1, r3, [r4]
 8004314:	2900      	cmp	r1, #0
 8004316:	d1f7      	bne.n	8004308 <sx12xx_ev_tx_done+0x10>
 8004318:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 800431c:	d114      	bne.n	8004348 <sx12xx_ev_tx_done+0x50>
	Radio.Sleep();
 800431e:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <sx12xx_ev_tx_done+0x58>)
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	4798      	blx	r3
	data->operation_done = NULL;
 8004324:	2100      	movs	r1, #0
 8004326:	6069      	str	r1, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8004328:	f3bf 8f5b 	dmb	ish
 800432c:	e854 3f00 	ldrex	r3, [r4]
 8004330:	e844 1200 	strex	r2, r1, [r4]
 8004334:	2a00      	cmp	r2, #0
 8004336:	d1f9      	bne.n	800432c <sx12xx_ev_tx_done+0x34>
 8004338:	f3bf 8f5b 	dmb	ish
		if (sig) {
 800433c:	b126      	cbz	r6, 8004348 <sx12xx_ev_tx_done+0x50>
 800433e:	4630      	mov	r0, r6
}
 8004340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004344:	f005 bebe 	b.w	800a0c4 <z_impl_k_poll_signal_raise>
 8004348:	bd70      	pop	{r4, r5, r6, pc}
 800434a:	bf00      	nop
 800434c:	20000a44 	.word	0x20000a44
 8004350:	0800c208 	.word	0x0800c208

08004354 <sx12xx_ev_tx_timed_out>:
{
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8004356:	4c15      	ldr	r4, [pc, #84]	; (80043ac <sx12xx_ev_tx_timed_out+0x58>)
    dev_data.events.TxTimeout = NULL;
 8004358:	2600      	movs	r6, #0
 800435a:	6166      	str	r6, [r4, #20]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800435c:	f104 0544 	add.w	r5, r4, #68	; 0x44
 8004360:	2302      	movs	r3, #2
	struct k_poll_signal *sig = dev_data.operation_done;
 8004362:	6867      	ldr	r7, [r4, #4]
 8004364:	f3bf 8f5b 	dmb	ish
 8004368:	e855 2f00 	ldrex	r2, [r5]
 800436c:	2a01      	cmp	r2, #1
 800436e:	d103      	bne.n	8004378 <sx12xx_ev_tx_timed_out+0x24>
 8004370:	e845 3100 	strex	r1, r3, [r5]
 8004374:	2900      	cmp	r1, #0
 8004376:	d1f7      	bne.n	8004368 <sx12xx_ev_tx_timed_out+0x14>
 8004378:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 800437c:	d114      	bne.n	80043a8 <sx12xx_ev_tx_timed_out+0x54>
	Radio.Sleep();
 800437e:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <sx12xx_ev_tx_timed_out+0x5c>)
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	4798      	blx	r3
	data->operation_done = NULL;
 8004384:	6066      	str	r6, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8004386:	f3bf 8f5b 	dmb	ish
 800438a:	e855 3f00 	ldrex	r3, [r5]
 800438e:	e845 6200 	strex	r2, r6, [r5]
 8004392:	2a00      	cmp	r2, #0
 8004394:	d1f9      	bne.n	800438a <sx12xx_ev_tx_timed_out+0x36>
 8004396:	f3bf 8f5b 	dmb	ish
		if (sig) {
 800439a:	b12f      	cbz	r7, 80043a8 <sx12xx_ev_tx_timed_out+0x54>
 800439c:	4631      	mov	r1, r6
 800439e:	4638      	mov	r0, r7
}
 80043a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043a4:	f005 be8e 	b.w	800a0c4 <z_impl_k_poll_signal_raise>
 80043a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000a44 	.word	0x20000a44
 80043b0:	0800c208 	.word	0x0800c208

080043b4 <__sx12xx_configure_pin>:
{
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4605      	mov	r5, r0
 80043b8:	4616      	mov	r6, r2
 80043ba:	4608      	mov	r0, r1
 80043bc:	461c      	mov	r4, r3
	return z_impl_device_get_binding(name);
 80043be:	f003 ff85 	bl	80082cc <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 80043c2:	6028      	str	r0, [r5, #0]
	if (!(*dev)) {
 80043c4:	b300      	cbz	r0, 8004408 <__sx12xx_configure_pin+0x54>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80043c6:	04e2      	lsls	r2, r4, #19
	const struct gpio_driver_api *api =
 80043c8:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
 80043ca:	6905      	ldr	r5, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80043cc:	d506      	bpl.n	80043dc <__sx12xx_configure_pin+0x28>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 80043ce:	f414 6f40 	tst.w	r4, #3072	; 0xc00
 80043d2:	d003      	beq.n	80043dc <__sx12xx_configure_pin+0x28>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80043d4:	07e3      	lsls	r3, r4, #31
 80043d6:	d50f      	bpl.n	80043f8 <__sx12xx_configure_pin+0x44>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80043d8:	f484 6440 	eor.w	r4, r4, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80043dc:	f424 5280 	bic.w	r2, r4, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80043e0:	07e4      	lsls	r4, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80043e2:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80043e4:	d50b      	bpl.n	80043fe <__sx12xx_configure_pin+0x4a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80043e6:	2401      	movs	r4, #1
 80043e8:	40b4      	lsls	r4, r6
 80043ea:	4323      	orrs	r3, r4
 80043ec:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
 80043ee:	680b      	ldr	r3, [r1, #0]
 80043f0:	4631      	mov	r1, r6
}
 80043f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80043f6:	4718      	bx	r3
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	f424 5280 	bic.w	r2, r4, #4096	; 0x1000
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80043fe:	2401      	movs	r4, #1
 8004400:	40b4      	lsls	r4, r6
 8004402:	ea23 0304 	bic.w	r3, r3, r4
 8004406:	e7f1      	b.n	80043ec <__sx12xx_configure_pin+0x38>
 8004408:	f06f 0004 	mvn.w	r0, #4
 800440c:	bd70      	pop	{r4, r5, r6, pc}
 800440e:	bf00      	nop

08004410 <sx12xx_lora_send>:

int sx12xx_lora_send(const struct device *dev, uint8_t *data,
		     uint32_t data_len)
{
 8004410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		&done);
	uint32_t air_time;
	int ret;

	/* Validate that we have a TX configuration */
	if (!dev_data.tx_cfg.frequency) {
 8004414:	4d41      	ldr	r5, [pc, #260]	; (800451c <sx12xx_lora_send+0x10c>)
{
 8004416:	b08e      	sub	sp, #56	; 0x38
 8004418:	468a      	mov	sl, r1
	if (!dev_data.tx_cfg.frequency) {
 800441a:	6b69      	ldr	r1, [r5, #52]	; 0x34
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 800441c:	2400      	movs	r4, #0
 800441e:	ab05      	add	r3, sp, #20
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8004420:	2701      	movs	r7, #1
 8004422:	940c      	str	r4, [sp, #48]	; 0x30
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8004424:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004428:	e9cd 4407 	strd	r4, r4, [sp, #28]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800442c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004430:	940b      	str	r4, [sp, #44]	; 0x2c
 8004432:	930d      	str	r3, [sp, #52]	; 0x34
 8004434:	f88d 7031 	strb.w	r7, [sp, #49]	; 0x31
	if (!dev_data.tx_cfg.frequency) {
 8004438:	2900      	cmp	r1, #0
 800443a:	d068      	beq.n	800450e <sx12xx_lora_send+0xfe>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800443c:	f3bf 8f5b 	dmb	ish
 8004440:	f105 0844 	add.w	r8, r5, #68	; 0x44
 8004444:	e858 1f00 	ldrex	r1, [r8]
 8004448:	42a1      	cmp	r1, r4
 800444a:	d103      	bne.n	8004454 <sx12xx_lora_send+0x44>
 800444c:	e848 7000 	strex	r0, r7, [r8]
 8004450:	2800      	cmp	r0, #0
 8004452:	d1f7      	bne.n	8004444 <sx12xx_lora_send+0x34>
 8004454:	f3bf 8f5b 	dmb	ish

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8004458:	d15c      	bne.n	8004514 <sx12xx_lora_send+0x104>
	}

	/* Store signal */
	dev_data.operation_done = async;

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 800445a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004520 <sx12xx_lora_send+0x110>
	dev_data.operation_done = async;
 800445e:	606b      	str	r3, [r5, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8004460:	b2d6      	uxtb	r6, r2
 8004462:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8004466:	4631      	mov	r1, r6
 8004468:	4638      	mov	r0, r7
 800446a:	4798      	blx	r3

	Radio.Send(data, data_len);
 800446c:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8004470:	4650      	mov	r0, sl
 8004472:	4631      	mov	r1, r6
 8004474:	4798      	blx	r3
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8004476:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 800447e:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004488:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
 800448c:	f8d9 6024 	ldr.w	r6, [r9, #36]	; 0x24
 8004490:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
 8004494:	4638      	mov	r0, r7
 8004496:	47b0      	blx	r6
 8004498:	230a      	movs	r3, #10
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 800449a:	40b8      	lsls	r0, r7
 800449c:	fba0 2303 	umull	r2, r3, r0, r3
	return z_impl_k_poll(events, num_events, timeout);
 80044a0:	4639      	mov	r1, r7
 80044a2:	a809      	add	r0, sp, #36	; 0x24
 80044a4:	f005 fd4c 	bl	8009f40 <z_impl_k_poll>
	if (ret < 0) {
 80044a8:	42a0      	cmp	r0, r4
 80044aa:	db03      	blt.n	80044b4 <sx12xx_lora_send+0xa4>
	return 0;
 80044ac:	4620      	mov	r0, r4
}
 80044ae:	b00e      	add	sp, #56	; 0x38
 80044b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b4:	2302      	movs	r3, #2
 80044b6:	f3bf 8f5b 	dmb	ish
 80044ba:	e858 2f00 	ldrex	r2, [r8]
 80044be:	42ba      	cmp	r2, r7
 80044c0:	d103      	bne.n	80044ca <sx12xx_lora_send+0xba>
 80044c2:	e848 3100 	strex	r1, r3, [r8]
 80044c6:	2900      	cmp	r1, #0
 80044c8:	d1f7      	bne.n	80044ba <sx12xx_lora_send+0xaa>
 80044ca:	f3bf 8f5b 	dmb	ish
 80044ce:	bf0c      	ite	eq
 80044d0:	463e      	moveq	r6, r7
 80044d2:	4626      	movne	r6, r4
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 80044d4:	d111      	bne.n	80044fa <sx12xx_lora_send+0xea>
	Radio.Sleep();
 80044d6:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80044da:	4798      	blx	r3
	data->operation_done = NULL;
 80044dc:	606c      	str	r4, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80044de:	f3bf 8f5b 	dmb	ish
 80044e2:	e858 3f00 	ldrex	r3, [r8]
 80044e6:	e848 4200 	strex	r2, r4, [r8]
 80044ea:	2a00      	cmp	r2, #0
 80044ec:	d1f9      	bne.n	80044e2 <sx12xx_lora_send+0xd2>
 80044ee:	f3bf 8f5b 	dmb	ish
	return 0;
 80044f2:	4620      	mov	r0, r4
}
 80044f4:	b00e      	add	sp, #56	; 0x38
 80044f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004502:	4639      	mov	r1, r7
 8004504:	a809      	add	r0, sp, #36	; 0x24
 8004506:	f005 fd1b 	bl	8009f40 <z_impl_k_poll>
	return 0;
 800450a:	4630      	mov	r0, r6
 800450c:	e7cf      	b.n	80044ae <sx12xx_lora_send+0x9e>
		return -EINVAL;
 800450e:	f06f 0015 	mvn.w	r0, #21
 8004512:	e7cc      	b.n	80044ae <sx12xx_lora_send+0x9e>
		return -EBUSY;
 8004514:	f06f 000f 	mvn.w	r0, #15
 8004518:	e7c9      	b.n	80044ae <sx12xx_lora_send+0x9e>
 800451a:	bf00      	nop
 800451c:	20000a44 	.word	0x20000a44
 8004520:	0800c208 	.word	0x0800c208

08004524 <sx12xx_lora_send_async>:
{
 8004524:	b530      	push	{r4, r5, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8004526:	4c12      	ldr	r4, [pc, #72]	; (8004570 <sx12xx_lora_send_async+0x4c>)
 8004528:	f3bf 8f5b 	dmb	ish
 800452c:	b083      	sub	sp, #12
 800452e:	460d      	mov	r5, r1
 8004530:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 8004534:	2001      	movs	r0, #1
 8004536:	e85c 1f00 	ldrex	r1, [ip]
 800453a:	2900      	cmp	r1, #0
 800453c:	d104      	bne.n	8004548 <sx12xx_lora_send_async+0x24>
 800453e:	e84c 0e00 	strex	lr, r0, [ip]
 8004542:	f1be 0f00 	cmp.w	lr, #0
 8004546:	d1f6      	bne.n	8004536 <sx12xx_lora_send_async+0x12>
 8004548:	f3bf 8f5b 	dmb	ish
	if (!modem_acquire(&dev_data)) {
 800454c:	d10c      	bne.n	8004568 <sx12xx_lora_send_async+0x44>
	dev_data.operation_done = async;
 800454e:	6063      	str	r3, [r4, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8004550:	4c08      	ldr	r4, [pc, #32]	; (8004574 <sx12xx_lora_send_async+0x50>)
 8004552:	b2d1      	uxtb	r1, r2
 8004554:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004556:	9101      	str	r1, [sp, #4]
 8004558:	4798      	blx	r3
	Radio.Send(data, data_len);
 800455a:	4628      	mov	r0, r5
 800455c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800455e:	9901      	ldr	r1, [sp, #4]
 8004560:	4798      	blx	r3

	return 0;
 8004562:	2000      	movs	r0, #0
}
 8004564:	b003      	add	sp, #12
 8004566:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 8004568:	f06f 000f 	mvn.w	r0, #15
 800456c:	e7fa      	b.n	8004564 <sx12xx_lora_send_async+0x40>
 800456e:	bf00      	nop
 8004570:	20000a44 	.word	0x20000a44
 8004574:	0800c208 	.word	0x0800c208

08004578 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8004578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800457c:	b08d      	sub	sp, #52	; 0x34
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 800457e:	2400      	movs	r4, #0
 8004580:	ab03      	add	r3, sp, #12
 8004582:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8004586:	e9cd 4405 	strd	r4, r4, [sp, #20]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800458a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800458e:	4d34      	ldr	r5, [pc, #208]	; (8004660 <sx12xx_lora_recv+0xe8>)
 8004590:	940a      	str	r4, [sp, #40]	; 0x28
 8004592:	2701      	movs	r7, #1
{
 8004594:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8004598:	9409      	str	r4, [sp, #36]	; 0x24
 800459a:	930b      	str	r3, [sp, #44]	; 0x2c
 800459c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 80045a0:	f105 0844 	add.w	r8, r5, #68	; 0x44
 80045a4:	f3bf 8f5b 	dmb	ish
 80045a8:	e858 2f00 	ldrex	r2, [r8]
 80045ac:	42a2      	cmp	r2, r4
 80045ae:	d103      	bne.n	80045b8 <sx12xx_lora_recv+0x40>
 80045b0:	e848 7000 	strex	r0, r7, [r8]
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d1f7      	bne.n	80045a8 <sx12xx_lora_recv+0x30>
 80045b8:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 80045bc:	d14d      	bne.n	800465a <sx12xx_lora_recv+0xe2>
		return -EBUSY;
	}

	dev_data.async_rx_cb = NULL;
	/* Store operation signal */
	dev_data.operation_done = &done;
 80045be:	606b      	str	r3, [r5, #4]
	/* Set data output location */
	dev_data.rx_params.buf = data;
	dev_data.rx_params.size = &size;
	dev_data.rx_params.rssi = rssi;
 80045c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
	dev_data.rx_params.snr = snr;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 80045c2:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8004664 <sx12xx_lora_recv+0xec>
	dev_data.rx_params.rssi = rssi;
 80045c6:	652b      	str	r3, [r5, #80]	; 0x50
	dev_data.rx_params.snr = snr;
 80045c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045ca:	656b      	str	r3, [r5, #84]	; 0x54
	dev_data.rx_params.size = &size;
 80045cc:	f10d 0307 	add.w	r3, sp, #7
	dev_data.rx_params.buf = data;
 80045d0:	64a9      	str	r1, [r5, #72]	; 0x48
	dev_data.rx_params.size = &size;
 80045d2:	64eb      	str	r3, [r5, #76]	; 0x4c
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 80045d4:	21ff      	movs	r1, #255	; 0xff
 80045d6:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
	dev_data.async_rx_cb = NULL;
 80045da:	60ac      	str	r4, [r5, #8]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 80045dc:	4638      	mov	r0, r7
 80045de:	4798      	blx	r3
	Radio.Rx(0);
 80045e0:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 80045e4:	4620      	mov	r0, r4
 80045e6:	4798      	blx	r3
 80045e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80045ec:	4639      	mov	r1, r7
 80045ee:	a807      	add	r0, sp, #28
 80045f0:	f005 fca6 	bl	8009f40 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 80045f4:	1e06      	subs	r6, r0, #0
 80045f6:	db05      	blt.n	8004604 <sx12xx_lora_recv+0x8c>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 80045f8:	f89d 6007 	ldrb.w	r6, [sp, #7]
}
 80045fc:	4630      	mov	r0, r6
 80045fe:	b00d      	add	sp, #52	; 0x34
 8004600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004604:	2302      	movs	r3, #2
 8004606:	f3bf 8f5b 	dmb	ish
 800460a:	e858 2f00 	ldrex	r2, [r8]
 800460e:	42ba      	cmp	r2, r7
 8004610:	d103      	bne.n	800461a <sx12xx_lora_recv+0xa2>
 8004612:	e848 3100 	strex	r1, r3, [r8]
 8004616:	2900      	cmp	r1, #0
 8004618:	d1f7      	bne.n	800460a <sx12xx_lora_recv+0x92>
 800461a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 800461e:	d111      	bne.n	8004644 <sx12xx_lora_recv+0xcc>
	Radio.Sleep();
 8004620:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8004624:	4798      	blx	r3
	data->operation_done = NULL;
 8004626:	606c      	str	r4, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8004628:	f3bf 8f5b 	dmb	ish
 800462c:	e858 3f00 	ldrex	r3, [r8]
 8004630:	e848 4200 	strex	r2, r4, [r8]
 8004634:	2a00      	cmp	r2, #0
 8004636:	d1f9      	bne.n	800462c <sx12xx_lora_recv+0xb4>
 8004638:	f3bf 8f5b 	dmb	ish
}
 800463c:	4630      	mov	r0, r6
 800463e:	b00d      	add	sp, #52	; 0x34
 8004640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800464c:	4639      	mov	r1, r7
 800464e:	a807      	add	r0, sp, #28
 8004650:	f005 fc76 	bl	8009f40 <z_impl_k_poll>
			return size;
 8004654:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8004658:	e7d0      	b.n	80045fc <sx12xx_lora_recv+0x84>
		return -EBUSY;
 800465a:	f06f 060f 	mvn.w	r6, #15
 800465e:	e7cd      	b.n	80045fc <sx12xx_lora_recv+0x84>
 8004660:	20000a44 	.word	0x20000a44
 8004664:	0800c208 	.word	0x0800c208

08004668 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb,
  lora_recv_error_timeout_cb error_timeout_cb)
{
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	460e      	mov	r6, r1
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 800466c:	b1ea      	cbz	r2, 80046aa <sx12xx_lora_recv_async+0x42>
 800466e:	2900      	cmp	r1, #0
 8004670:	d03d      	beq.n	80046ee <sx12xx_lora_recv_async+0x86>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8004672:	f3bf 8f5b 	dmb	ish
 8004676:	4b21      	ldr	r3, [pc, #132]	; (80046fc <sx12xx_lora_recv_async+0x94>)
 8004678:	2001      	movs	r0, #1
 800467a:	f103 0c44 	add.w	ip, r3, #68	; 0x44
 800467e:	e85c 4f00 	ldrex	r4, [ip]
 8004682:	2c00      	cmp	r4, #0
 8004684:	d103      	bne.n	800468e <sx12xx_lora_recv_async+0x26>
 8004686:	e84c 0100 	strex	r1, r0, [ip]
 800468a:	2900      	cmp	r1, #0
 800468c:	d1f7      	bne.n	800467e <sx12xx_lora_recv_async+0x16>
 800468e:	f3bf 8f5b 	dmb	ish
		}
		return 0;
	}

	/* Ensure available */
	if (!modem_acquire(&dev_data)) {
 8004692:	d12f      	bne.n	80046f4 <sx12xx_lora_recv_async+0x8c>
	/* Store parameters */
	dev_data.async_rx_cb = cb;
   dev_data.async_rx_error_timeout_cb = error_timeout_cb;

	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8004694:	4c1a      	ldr	r4, [pc, #104]	; (8004700 <sx12xx_lora_recv_async+0x98>)
   dev_data.async_rx_error_timeout_cb = error_timeout_cb;
 8004696:	e9c3 6202 	strd	r6, r2, [r3, #8]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 800469a:	21ff      	movs	r1, #255	; 0xff
 800469c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800469e:	4798      	blx	r3
	Radio.Rx(0);
 80046a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046a2:	2000      	movs	r0, #0
 80046a4:	4798      	blx	r3

	return 0;
 80046a6:	2000      	movs	r0, #0
}
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 80046aa:	bb01      	cbnz	r1, 80046ee <sx12xx_lora_recv_async+0x86>
 80046ac:	f3bf 8f5b 	dmb	ish
 80046b0:	4d12      	ldr	r5, [pc, #72]	; (80046fc <sx12xx_lora_recv_async+0x94>)
 80046b2:	2302      	movs	r3, #2
 80046b4:	f105 0444 	add.w	r4, r5, #68	; 0x44
 80046b8:	e854 2f00 	ldrex	r2, [r4]
 80046bc:	2a01      	cmp	r2, #1
 80046be:	d103      	bne.n	80046c8 <sx12xx_lora_recv_async+0x60>
 80046c0:	e844 3100 	strex	r1, r3, [r4]
 80046c4:	2900      	cmp	r1, #0
 80046c6:	d1f7      	bne.n	80046b8 <sx12xx_lora_recv_async+0x50>
 80046c8:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 80046cc:	d10f      	bne.n	80046ee <sx12xx_lora_recv_async+0x86>
	Radio.Sleep();
 80046ce:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <sx12xx_lora_recv_async+0x98>)
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	4798      	blx	r3
	data->operation_done = NULL;
 80046d4:	606e      	str	r6, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80046d6:	f3bf 8f5b 	dmb	ish
 80046da:	e854 3f00 	ldrex	r3, [r4]
 80046de:	e844 6200 	strex	r2, r6, [r4]
 80046e2:	2a00      	cmp	r2, #0
 80046e4:	d1f9      	bne.n	80046da <sx12xx_lora_recv_async+0x72>
 80046e6:	f3bf 8f5b 	dmb	ish
		return 0;
 80046ea:	4630      	mov	r0, r6
}
 80046ec:	bd70      	pop	{r4, r5, r6, pc}
      return -EINVAL;
 80046ee:	f06f 0015 	mvn.w	r0, #21
}
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 80046f4:	f06f 000f 	mvn.w	r0, #15
}
 80046f8:	bd70      	pop	{r4, r5, r6, pc}
 80046fa:	bf00      	nop
 80046fc:	20000a44 	.word	0x20000a44
 8004700:	0800c208 	.word	0x0800c208

08004704 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8004704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8004708:	4e3e      	ldr	r6, [pc, #248]	; (8004804 <sx12xx_lora_config+0x100>)
 800470a:	f3bf 8f5b 	dmb	ish
 800470e:	b08c      	sub	sp, #48	; 0x30
 8004710:	460c      	mov	r4, r1
 8004712:	f106 0544 	add.w	r5, r6, #68	; 0x44
 8004716:	f04f 0801 	mov.w	r8, #1
 800471a:	e855 3f00 	ldrex	r3, [r5]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <sx12xx_lora_config+0x26>
 8004722:	e845 8200 	strex	r2, r8, [r5]
 8004726:	2a00      	cmp	r2, #0
 8004728:	d1f7      	bne.n	800471a <sx12xx_lora_config+0x16>
 800472a:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 800472e:	d165      	bne.n	80047fc <sx12xx_lora_config+0xf8>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8004730:	4f35      	ldr	r7, [pc, #212]	; (8004808 <sx12xx_lora_config+0x104>)
 8004732:	6820      	ldr	r0, [r4, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4798      	blx	r3

	if (config->tx) {
 8004738:	7b63      	ldrb	r3, [r4, #13]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d13c      	bne.n	80047b8 <sx12xx_lora_config+0xb4>
				  config->coding_rate, config->preamble_len,
				  config->fixed_len, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */

        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 800473e:	7ae3      	ldrb	r3, [r4, #11]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d137      	bne.n	80047b4 <sx12xx_lora_config+0xb0>
 8004744:	461a      	mov	r2, r3

		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 8004746:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800474a:	230a      	movs	r3, #10
 800474c:	9302      	str	r3, [sp, #8]
 800474e:	8923      	ldrh	r3, [r4, #8]
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	930b      	str	r3, [sp, #44]	; 0x2c
 8004756:	2300      	movs	r3, #0
 8004758:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800475c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004760:	2001      	movs	r0, #1
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	9009      	str	r0, [sp, #36]	; 0x24
 8004766:	79a3      	ldrb	r3, [r4, #6]
 8004768:	7962      	ldrb	r2, [r4, #5]
 800476a:	7921      	ldrb	r1, [r4, #4]
 800476c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800476e:	47a0      	blx	r4
 8004770:	f3bf 8f5b 	dmb	ish
 8004774:	2302      	movs	r3, #2
 8004776:	e855 2f00 	ldrex	r2, [r5]
 800477a:	2a01      	cmp	r2, #1
 800477c:	d103      	bne.n	8004786 <sx12xx_lora_config+0x82>
 800477e:	e845 3100 	strex	r1, r3, [r5]
 8004782:	2900      	cmp	r1, #0
 8004784:	d1f7      	bne.n	8004776 <sx12xx_lora_config+0x72>
 8004786:	f3bf 8f5b 	dmb	ish
 800478a:	bf0c      	ite	eq
 800478c:	2001      	moveq	r0, #1
 800478e:	2000      	movne	r0, #0
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8004790:	d10d      	bne.n	80047ae <sx12xx_lora_config+0xaa>
	Radio.Sleep();
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	4798      	blx	r3
	data->operation_done = NULL;
 8004796:	2000      	movs	r0, #0
 8004798:	6070      	str	r0, [r6, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800479a:	f3bf 8f5b 	dmb	ish
 800479e:	e855 3f00 	ldrex	r3, [r5]
 80047a2:	e845 0200 	strex	r2, r0, [r5]
 80047a6:	2a00      	cmp	r2, #0
 80047a8:	d1f9      	bne.n	800479e <sx12xx_lora_config+0x9a>
 80047aa:	f3bf 8f5b 	dmb	ish
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
	return 0;
}
 80047ae:	b00c      	add	sp, #48	; 0x30
 80047b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 80047b4:	7aa2      	ldrb	r2, [r4, #10]
 80047b6:	e7c6      	b.n	8004746 <sx12xx_lora_config+0x42>
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 80047b8:	f8cd 8010 	str.w	r8, [sp, #16]
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 80047bc:	6820      	ldr	r0, [r4, #0]
 80047be:	6861      	ldr	r1, [r4, #4]
 80047c0:	68a2      	ldr	r2, [r4, #8]
 80047c2:	68e3      	ldr	r3, [r4, #12]
 80047c4:	f106 0c34 	add.w	ip, r6, #52	; 0x34
 80047c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 80047cc:	2200      	movs	r2, #0
 80047ce:	e9cd 2206 	strd	r2, r2, [sp, #24]
 80047d2:	9205      	str	r2, [sp, #20]
 80047d4:	7ae3      	ldrb	r3, [r4, #11]
 80047d6:	9303      	str	r3, [sp, #12]
 80047d8:	8923      	ldrh	r3, [r4, #8]
 80047da:	9302      	str	r3, [sp, #8]
 80047dc:	79a3      	ldrb	r3, [r4, #6]
 80047de:	9301      	str	r3, [sp, #4]
 80047e0:	7963      	ldrb	r3, [r4, #5]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80047e8:	9308      	str	r3, [sp, #32]
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80047ee:	f994 100c 	ldrsb.w	r1, [r4, #12]
 80047f2:	7923      	ldrb	r3, [r4, #4]
 80047f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80047f6:	4640      	mov	r0, r8
 80047f8:	47a0      	blx	r4
 80047fa:	e7b9      	b.n	8004770 <sx12xx_lora_config+0x6c>
		return -EBUSY;
 80047fc:	f06f 000f 	mvn.w	r0, #15
 8004800:	e7d5      	b.n	80047ae <sx12xx_lora_config+0xaa>
 8004802:	bf00      	nop
 8004804:	20000a44 	.word	0x20000a44
 8004808:	0800c208 	.word	0x0800c208

0800480c <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 800480c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800480e:	b08b      	sub	sp, #44	; 0x2c
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8004810:	2500      	movs	r5, #0
 8004812:	ae01      	add	r6, sp, #4
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8004814:	9508      	str	r5, [sp, #32]
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8004816:	e9cd 5503 	strd	r5, r5, [sp, #12]
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800481a:	e9cd 5506 	strd	r5, r5, [sp, #24]
 800481e:	9505      	str	r5, [sp, #20]
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8004820:	e9cd 6601 	strd	r6, r6, [sp, #4]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8004824:	4d31      	ldr	r5, [pc, #196]	; (80048ec <sx12xx_lora_test_cw+0xe0>)
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8004826:	9609      	str	r6, [sp, #36]	; 0x24
{
 8004828:	461c      	mov	r4, r3
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800482a:	2301      	movs	r3, #1
{
 800482c:	4608      	mov	r0, r1
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800482e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
{
 8004832:	4611      	mov	r1, r2
 8004834:	f105 0744 	add.w	r7, r5, #68	; 0x44
 8004838:	f3bf 8f5b 	dmb	ish
 800483c:	e857 2f00 	ldrex	r2, [r7]
 8004840:	2a00      	cmp	r2, #0
 8004842:	d104      	bne.n	800484e <sx12xx_lora_test_cw+0x42>
 8004844:	e847 3c00 	strex	ip, r3, [r7]
 8004848:	f1bc 0f00 	cmp.w	ip, #0
 800484c:	d1f6      	bne.n	800483c <sx12xx_lora_test_cw+0x30>
 800484e:	f3bf 8f5b 	dmb	ish
        K_POLL_TYPE_SIGNAL,
        K_POLL_MODE_NOTIFY_ONLY,
        &done);
    int ret;
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8004852:	d148      	bne.n	80048e6 <sx12xx_lora_test_cw+0xda>
		return -EBUSY;
	}

    /* Store signal */
    dev_data.operation_done = &done;
 8004854:	606e      	str	r6, [r5, #4]

    /* Act TX timeout event as successfully end of CW transmission */
    dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8004856:	4e26      	ldr	r6, [pc, #152]	; (80048f0 <sx12xx_lora_test_cw+0xe4>)
    dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;
 8004858:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <sx12xx_lora_test_cw+0xe8>)
 800485a:	616b      	str	r3, [r5, #20]
	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 800485c:	4622      	mov	r2, r4
 800485e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004860:	4798      	blx	r3

    ret = k_poll(&evt, 1, K_MSEC(2000 * duration));
 8004862:	b954      	cbnz	r4, 800487a <sx12xx_lora_test_cw+0x6e>
	compiler_barrier();
 8004864:	4622      	mov	r2, r4
 8004866:	4623      	mov	r3, r4
	return z_impl_k_poll(events, num_events, timeout);
 8004868:	2101      	movs	r1, #1
 800486a:	a805      	add	r0, sp, #20
 800486c:	f005 fb68 	bl	8009f40 <z_impl_k_poll>
    if (ret < 0) {
 8004870:	2800      	cmp	r0, #0
 8004872:	db0f      	blt.n	8004894 <sx12xx_lora_test_cw+0x88>
            k_poll(&evt, 1, K_FOREVER);
        }
        /* Clean up TX timeout event callback */
        dev_data.events.TxTimeout = NULL;
    }
	return 0;
 8004874:	2000      	movs	r0, #0
}
 8004876:	b00b      	add	sp, #44	; 0x2c
 8004878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = k_poll(&evt, 1, K_MSEC(2000 * duration));
 800487a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800487e:	fb02 f404 	mul.w	r4, r2, r4
 8004882:	220a      	movs	r2, #10
 8004884:	fb84 2302 	smull	r2, r3, r4, r2
 8004888:	2101      	movs	r1, #1
 800488a:	a805      	add	r0, sp, #20
 800488c:	f005 fb58 	bl	8009f40 <z_impl_k_poll>
    if (ret < 0) {
 8004890:	2800      	cmp	r0, #0
 8004892:	daef      	bge.n	8004874 <sx12xx_lora_test_cw+0x68>
 8004894:	f3bf 8f5b 	dmb	ish
 8004898:	2302      	movs	r3, #2
 800489a:	e857 2f00 	ldrex	r2, [r7]
 800489e:	2a01      	cmp	r2, #1
 80048a0:	d103      	bne.n	80048aa <sx12xx_lora_test_cw+0x9e>
 80048a2:	e847 3100 	strex	r1, r3, [r7]
 80048a6:	2900      	cmp	r1, #0
 80048a8:	d1f7      	bne.n	800489a <sx12xx_lora_test_cw+0x8e>
 80048aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 80048ae:	d111      	bne.n	80048d4 <sx12xx_lora_test_cw+0xc8>
	Radio.Sleep();
 80048b0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80048b2:	4798      	blx	r3
	data->operation_done = NULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	606b      	str	r3, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80048b8:	f3bf 8f5b 	dmb	ish
 80048bc:	e857 2f00 	ldrex	r2, [r7]
 80048c0:	e847 3100 	strex	r1, r3, [r7]
 80048c4:	2900      	cmp	r1, #0
 80048c6:	d1f9      	bne.n	80048bc <sx12xx_lora_test_cw+0xb0>
 80048c8:	f3bf 8f5b 	dmb	ish
        dev_data.events.TxTimeout = NULL;
 80048cc:	2000      	movs	r0, #0
 80048ce:	6168      	str	r0, [r5, #20]
}
 80048d0:	b00b      	add	sp, #44	; 0x2c
 80048d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048dc:	2101      	movs	r1, #1
 80048de:	a805      	add	r0, sp, #20
 80048e0:	f005 fb2e 	bl	8009f40 <z_impl_k_poll>
 80048e4:	e7f2      	b.n	80048cc <sx12xx_lora_test_cw+0xc0>
		return -EBUSY;
 80048e6:	f06f 000f 	mvn.w	r0, #15
 80048ea:	e7c4      	b.n	8004876 <sx12xx_lora_test_cw+0x6a>
 80048ec:	20000a44 	.word	0x20000a44
 80048f0:	0800c208 	.word	0x0800c208
 80048f4:	08004355 	.word	0x08004355

080048f8 <sx12xx_lora_time_on_air>:

int sx12xx_lora_time_on_air(const struct device *dev,
            const struct lora_modem_config *config,
            uint32_t data_len)
{
    if(config == NULL) {
 80048f8:	b191      	cbz	r1, 8004920 <sx12xx_lora_time_on_air+0x28>
{
 80048fa:	b530      	push	{r4, r5, lr}
        return -EINVAL;
    }
    return (int) Radio.TimeOnAir(MODEM_LORA, config->bandwidth,
 80048fc:	4c0a      	ldr	r4, [pc, #40]	; (8004928 <sx12xx_lora_time_on_air+0x30>)
 80048fe:	7acd      	ldrb	r5, [r1, #11]
 8004900:	890b      	ldrh	r3, [r1, #8]
{
 8004902:	b085      	sub	sp, #20
    return (int) Radio.TimeOnAir(MODEM_LORA, config->bandwidth,
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	9202      	str	r2, [sp, #8]
 8004908:	2001      	movs	r0, #1
 800490a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800490c:	9501      	str	r5, [sp, #4]
 800490e:	9003      	str	r0, [sp, #12]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	798b      	ldrb	r3, [r1, #6]
 8004914:	4614      	mov	r4, r2
 8004916:	794a      	ldrb	r2, [r1, #5]
 8004918:	7909      	ldrb	r1, [r1, #4]
 800491a:	47a0      	blx	r4
                                 config->datarate, config->coding_rate,
                                 config->preamble_len,
                                 config->fixed_len, (uint8_t) data_len, true);
}
 800491c:	b005      	add	sp, #20
 800491e:	bd30      	pop	{r4, r5, pc}
        return -EINVAL;
 8004920:	f06f 0015 	mvn.w	r0, #21
}
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	0800c208 	.word	0x0800c208

0800492c <sx12xx_lora_is_channel_free>:
int sx12xx_lora_is_channel_free(const struct device *dev,
            const struct lora_modem_config *config,
            int16_t rssi_theshold, uint32_t timeout)
{
    bool is_free;
    if(config == NULL) {
 800492c:	2900      	cmp	r1, #0
 800492e:	d03e      	beq.n	80049ae <sx12xx_lora_is_channel_free+0x82>
{
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8004932:	4e20      	ldr	r6, [pc, #128]	; (80049b4 <sx12xx_lora_is_channel_free+0x88>)
 8004934:	f3bf 8f5b 	dmb	ish
 8004938:	f106 0444 	add.w	r4, r6, #68	; 0x44
 800493c:	2001      	movs	r0, #1
 800493e:	e854 5f00 	ldrex	r5, [r4]
 8004942:	2d00      	cmp	r5, #0
 8004944:	d103      	bne.n	800494e <sx12xx_lora_is_channel_free+0x22>
 8004946:	e844 0700 	strex	r7, r0, [r4]
 800494a:	2f00      	cmp	r7, #0
 800494c:	d1f7      	bne.n	800493e <sx12xx_lora_is_channel_free+0x12>
 800494e:	f3bf 8f5b 	dmb	ish
        return -EINVAL;
    }
    if (!modem_acquire(&dev_data)) {
 8004952:	d129      	bne.n	80049a8 <sx12xx_lora_is_channel_free+0x7c>
        125000, /* BW_125_KHZ = 0 */
        250000, /* BW_250_KHZ */
        500000, /* BW_500_KHZ */
    };

    is_free = Radio.IsChannelFree(config->frequency, rx_bw[config->bandwidth],
 8004954:	790d      	ldrb	r5, [r1, #4]
 8004956:	6808      	ldr	r0, [r1, #0]
 8004958:	4f17      	ldr	r7, [pc, #92]	; (80049b8 <sx12xx_lora_is_channel_free+0x8c>)
 800495a:	4918      	ldr	r1, [pc, #96]	; (80049bc <sx12xx_lora_is_channel_free+0x90>)
 800495c:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8004960:	693d      	ldr	r5, [r7, #16]
 8004962:	47a8      	blx	r5
 8004964:	f3bf 8f5b 	dmb	ish
 8004968:	4605      	mov	r5, r0
 800496a:	2302      	movs	r3, #2
 800496c:	e854 2f00 	ldrex	r2, [r4]
 8004970:	2a01      	cmp	r2, #1
 8004972:	d103      	bne.n	800497c <sx12xx_lora_is_channel_free+0x50>
 8004974:	e844 3100 	strex	r1, r3, [r4]
 8004978:	2900      	cmp	r1, #0
 800497a:	d1f7      	bne.n	800496c <sx12xx_lora_is_channel_free+0x40>
 800497c:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8004980:	d10f      	bne.n	80049a2 <sx12xx_lora_is_channel_free+0x76>
	Radio.Sleep();
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004984:	4798      	blx	r3
	data->operation_done = NULL;
 8004986:	2300      	movs	r3, #0
 8004988:	6073      	str	r3, [r6, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800498a:	f3bf 8f5b 	dmb	ish
 800498e:	e854 2f00 	ldrex	r2, [r4]
 8004992:	e844 3100 	strex	r1, r3, [r4]
 8004996:	2900      	cmp	r1, #0
 8004998:	d1f9      	bne.n	800498e <sx12xx_lora_is_channel_free+0x62>
 800499a:	f3bf 8f5b 	dmb	ish
                            rssi_theshold, timeout);
    if (!modem_release(&dev_data)) {
        /* Not receiving or already being stopped */
        return -EINVAL;
    }
    return is_free ? 1 : 0;
 800499e:	4628      	mov	r0, r5
}
 80049a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -EINVAL;
 80049a2:	f06f 0015 	mvn.w	r0, #21
}
 80049a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -EBUSY;
 80049a8:	f06f 000f 	mvn.w	r0, #15
}
 80049ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -EINVAL;
 80049ae:	f06f 0015 	mvn.w	r0, #21
}
 80049b2:	4770      	bx	lr
 80049b4:	20000a44 	.word	0x20000a44
 80049b8:	0800c208 	.word	0x0800c208
 80049bc:	0800c1f4 	.word	0x0800c1f4

080049c0 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <sx12xx_init+0x40>)
 80049c4:	f3bf 8f5b 	dmb	ish
 80049c8:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80049cc:	2400      	movs	r4, #0
 80049ce:	e852 1f00 	ldrex	r1, [r2]
 80049d2:	e842 4500 	strex	r5, r4, [r2]
 80049d6:	2d00      	cmp	r5, #0
 80049d8:	d1f9      	bne.n	80049ce <sx12xx_init+0xe>
 80049da:	f3bf 8f5b 	dmb	ish
	dev_data.dev = dev;
	dev_data.events.TxDone = sx12xx_ev_tx_done;
	dev_data.events.RxDone = sx12xx_ev_rx_done;
  dev_data.events.RxError = sx12xx_ev_rx_error_timeout;
  dev_data.events.RxTimeout = sx12xx_ev_rx_error_timeout;
	Radio.Init(&dev_data.events);
 80049de:	4d09      	ldr	r5, [pc, #36]	; (8004a04 <sx12xx_init+0x44>)
  dev_data.events.RxError = sx12xx_ev_rx_error_timeout;
 80049e0:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <sx12xx_init+0x48>)
	dev_data.events.TxDone = sx12xx_ev_tx_done;
 80049e2:	490a      	ldr	r1, [pc, #40]	; (8004a0c <sx12xx_init+0x4c>)
 80049e4:	6119      	str	r1, [r3, #16]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 80049e6:	490a      	ldr	r1, [pc, #40]	; (8004a10 <sx12xx_init+0x50>)
 80049e8:	6199      	str	r1, [r3, #24]
  dev_data.events.RxTimeout = sx12xx_ev_rx_error_timeout;
 80049ea:	e9c3 2207 	strd	r2, r2, [r3, #28]
	dev_data.dev = dev;
 80049ee:	6018      	str	r0, [r3, #0]
	Radio.Init(&dev_data.events);
 80049f0:	682a      	ldr	r2, [r5, #0]
 80049f2:	f103 0010 	add.w	r0, r3, #16
 80049f6:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 80049f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80049fa:	4798      	blx	r3

	return 0;
}
 80049fc:	4620      	mov	r0, r4
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	20000a44 	.word	0x20000a44
 8004a04:	0800c208 	.word	0x0800c208
 8004a08:	08004229 	.word	0x08004229
 8004a0c:	080042f9 	.word	0x080042f9
 8004a10:	0800424d 	.word	0x0800424d

08004a14 <SX1276CheckRfFrequency>:

bool SX127xCheckRfFrequency(uint32_t frequency)
{
	/* TODO */
	return true;
}
 8004a14:	2001      	movs	r0, #1
 8004a16:	4770      	bx	lr

08004a18 <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <sx127x_dio_work_handle+0x10>)

	(*DioIrq[dio])(NULL);
 8004a1a:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <sx127x_dio_work_handle+0x14>)
	int dio = work - dev_data.dio_work;
 8004a1c:	1ac0      	subs	r0, r0, r3
 8004a1e:	1103      	asrs	r3, r0, #4
	(*DioIrq[dio])(NULL);
 8004a20:	2000      	movs	r0, #0
 8004a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a26:	4718      	bx	r3
 8004a28:	20000af0 	.word	0x20000af0
 8004a2c:	200002a8 	.word	0x200002a8

08004a30 <sx127x_irq_callback>:
}

static void sx127x_irq_callback(const struct device *dev,
				struct gpio_callback *cb, uint32_t pins)
{
 8004a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a34:	4c10      	ldr	r4, [pc, #64]	; (8004a78 <sx127x_irq_callback+0x48>)
 8004a36:	4e11      	ldr	r6, [pc, #68]	; (8004a7c <sx127x_irq_callback+0x4c>)
 8004a38:	2a00      	cmp	r2, #0
 8004a3a:	f104 0510 	add.w	r5, r4, #16
 8004a3e:	fa92 f7a2 	rbit	r7, r2
 8004a42:	fab7 f787 	clz	r7, r7
 8004a46:	4680      	mov	r8, r0
 8004a48:	bf08      	it	eq
 8004a4a:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	unsigned int i, pin;

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8004a4e:	46a9      	mov	r9, r5
		if (dev == dev_data.dio_dev[i] &&
 8004a50:	f854 3b04 	ldr.w	r3, [r4], #4
 8004a54:	4543      	cmp	r3, r8
 8004a56:	d007      	beq.n	8004a68 <sx127x_irq_callback+0x38>
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8004a58:	454c      	cmp	r4, r9
 8004a5a:	f105 0510 	add.w	r5, r5, #16
 8004a5e:	f106 0608 	add.w	r6, r6, #8
 8004a62:	d1f5      	bne.n	8004a50 <sx127x_irq_callback+0x20>
		    pin == sx127x_dios[i].pin) {
			k_work_submit(&dev_data.dio_work[i]);
		}
	}
}
 8004a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    pin == sx127x_dios[i].pin) {
 8004a68:	7933      	ldrb	r3, [r6, #4]
		if (dev == dev_data.dio_dev[i] &&
 8004a6a:	42bb      	cmp	r3, r7
 8004a6c:	d1f4      	bne.n	8004a58 <sx127x_irq_callback+0x28>
			k_work_submit(&dev_data.dio_work[i]);
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f004 f8a4 	bl	8008bbc <k_work_submit>
 8004a74:	e7f0      	b.n	8004a58 <sx127x_irq_callback+0x28>
 8004a76:	bf00      	nop
 8004a78:	20000ae0 	.word	0x20000ae0
 8004a7c:	0800c274 	.word	0x0800c274

08004a80 <SX1276WriteBuffer>:
{
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
}

void SX127xWriteBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 8004a80:	b530      	push	{r4, r5, lr}
 8004a82:	b089      	sub	sp, #36	; 0x24
	const struct spi_buf buf[2] = {
 8004a84:	f10d 0507 	add.w	r5, sp, #7
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8004a88:	4c0b      	ldr	r4, [pc, #44]	; (8004ab8 <SX1276WriteBuffer+0x38>)
	const struct spi_buf buf[2] = {
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e9cd 5304 	strd	r5, r3, [sp, #16]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 8004a90:	f060 007f 	orn	r0, r0, #127	; 0x7f
	struct spi_buf_set tx = {
 8004a94:	ad04      	add	r5, sp, #16
 8004a96:	2302      	movs	r3, #2
 8004a98:	f88d 0007 	strb.w	r0, [sp, #7]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 8004a9c:	e9cd 1206 	strd	r1, r2, [sp, #24]
	struct spi_buf_set tx = {
 8004aa0:	e9cd 5302 	strd	r5, r3, [sp, #8]
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8004aa4:	6860      	ldr	r0, [r4, #4]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8004aa6:	6882      	ldr	r2, [r0, #8]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	6815      	ldr	r5, [r2, #0]
 8004aac:	f104 0108 	add.w	r1, r4, #8
 8004ab0:	aa02      	add	r2, sp, #8
 8004ab2:	47a8      	blx	r5

	ret = sx127x_write(addr, buffer, size);
	if (ret < 0) {
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}
 8004ab4:	b009      	add	sp, #36	; 0x24
 8004ab6:	bd30      	pop	{r4, r5, pc}
 8004ab8:	20000acc 	.word	0x20000acc

08004abc <SX1276ReadBuffer>:

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 8004abc:	b530      	push	{r4, r5, lr}
 8004abe:	b08b      	sub	sp, #44	; 0x2c
	const struct spi_buf buf[2] = {
 8004ac0:	f10d 0307 	add.w	r3, sp, #7
	struct spi_buf_set tx = {
 8004ac4:	ad06      	add	r5, sp, #24
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8004ac6:	4c0b      	ldr	r4, [pc, #44]	; (8004af4 <SX1276ReadBuffer+0x38>)
	const struct spi_buf buf[2] = {
 8004ac8:	9306      	str	r3, [sp, #24]
	struct spi_buf_set tx = {
 8004aca:	2302      	movs	r3, #2
 8004acc:	e9cd 5302 	strd	r5, r3, [sp, #8]
		const struct spi_buf_set rx = {
 8004ad0:	e9cd 5304 	strd	r5, r3, [sp, #16]
	const struct spi_buf buf[2] = {
 8004ad4:	2301      	movs	r3, #1
	int ret;

	ret = sx127x_read(addr, buffer, size);
 8004ad6:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 8004ada:	9108      	str	r1, [sp, #32]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8004adc:	6860      	ldr	r0, [r4, #4]
	return sx127x_transceive(reg_addr, false, data, len);
 8004ade:	9209      	str	r2, [sp, #36]	; 0x24
	const struct spi_buf buf[2] = {
 8004ae0:	9307      	str	r3, [sp, #28]
 8004ae2:	6882      	ldr	r2, [r0, #8]
 8004ae4:	ab04      	add	r3, sp, #16
 8004ae6:	6815      	ldr	r5, [r2, #0]
 8004ae8:	f104 0108 	add.w	r1, r4, #8
 8004aec:	aa02      	add	r2, sp, #8
 8004aee:	47a8      	blx	r5
	if (ret < 0) {
		LOG_ERR("Unable to read address: 0x%x", addr);
	}
}
 8004af0:	b00b      	add	sp, #44	; 0x2c
 8004af2:	bd30      	pop	{r4, r5, pc}
 8004af4:	20000acc 	.word	0x20000acc

08004af8 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	4605      	mov	r5, r0
 8004afc:	b08a      	sub	sp, #40	; 0x28
 8004afe:	482f      	ldr	r0, [pc, #188]	; (8004bbc <sx127x_lora_init+0xc4>)
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 8004b00:	4c2f      	ldr	r4, [pc, #188]	; (8004bc0 <sx127x_lora_init+0xc8>)
 8004b02:	f003 fbe3 	bl	80082cc <z_impl_device_get_binding>
 8004b06:	6060      	str	r0, [r4, #4]
	if (!dev_data.spi) {
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d054      	beq.n	8004bb6 <sx127x_lora_init+0xbe>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 8004b0c:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <sx127x_lora_init+0xcc>)
 8004b0e:	f44f 7680 	mov.w	r6, #256	; 0x100
 8004b12:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004b16:	482c      	ldr	r0, [pc, #176]	; (8004bc8 <sx127x_lora_init+0xd0>)
 8004b18:	f003 fbd8 	bl	80082cc <z_impl_device_get_binding>
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8004b1c:	4a2b      	ldr	r2, [pc, #172]	; (8004bcc <sx127x_lora_init+0xd4>)
 8004b1e:	6010      	str	r0, [r2, #0]
	if (!spi_cs.gpio_dev) {
 8004b20:	2800      	cmp	r0, #0
 8004b22:	d045      	beq.n	8004bb0 <sx127x_lora_init+0xb8>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 8004b24:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8004b28:	8093      	strh	r3, [r2, #4]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
	spi_cs.delay = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	6093      	str	r3, [r2, #8]

	dev_data.spi_cfg.cs = &spi_cs;
 8004b2e:	6122      	str	r2, [r4, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 8004b30:	4927      	ldr	r1, [pc, #156]	; (8004bd0 <sx127x_lora_init+0xd8>)
 8004b32:	f641 2307 	movw	r3, #6663	; 0x1a07
 8004b36:	2208      	movs	r2, #8
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f7ff fc3b 	bl	80043b4 <__sx12xx_configure_pin>
	if (ret) {
 8004b3e:	b108      	cbz	r0, 8004b44 <sx127x_lora_init+0x4c>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 8004b40:	b00a      	add	sp, #40	; 0x28
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
 8004b44:	2100      	movs	r1, #0
 8004b46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b4a:	f004 fcd3 	bl	80094f4 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8004b4e:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004b50:	6903      	ldr	r3, [r0, #16]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	05db      	lsls	r3, r3, #23
	return api->port_clear_bits_raw(port, pins);
 8004b56:	6883      	ldr	r3, [r0, #8]
 8004b58:	4631      	mov	r1, r6
 8004b5a:	bf54      	ite	pl
 8004b5c:	691b      	ldrpl	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 8004b5e:	68db      	ldrmi	r3, [r3, #12]
 8004b60:	4798      	blx	r3
 8004b62:	2100      	movs	r1, #0
 8004b64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b68:	f004 fcc4 	bl	80094f4 <z_impl_k_sleep>
	struct spi_buf_set tx = {
 8004b6c:	aa06      	add	r2, sp, #24
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e9cd 2302 	strd	r2, r3, [sp, #8]
		const struct spi_buf_set rx = {
 8004b74:	e9cd 2304 	strd	r2, r3, [sp, #16]
	const struct spi_buf buf[2] = {
 8004b78:	2101      	movs	r1, #1
 8004b7a:	2042      	movs	r0, #66	; 0x42
 8004b7c:	f10d 0207 	add.w	r2, sp, #7
 8004b80:	f10d 0306 	add.w	r3, sp, #6
 8004b84:	f88d 0007 	strb.w	r0, [sp, #7]
 8004b88:	9107      	str	r1, [sp, #28]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8004b8a:	6860      	ldr	r0, [r4, #4]
	const struct spi_buf buf[2] = {
 8004b8c:	9109      	str	r1, [sp, #36]	; 0x24
 8004b8e:	9206      	str	r2, [sp, #24]
 8004b90:	9308      	str	r3, [sp, #32]
 8004b92:	6882      	ldr	r2, [r0, #8]
 8004b94:	490f      	ldr	r1, [pc, #60]	; (8004bd4 <sx127x_lora_init+0xdc>)
 8004b96:	6814      	ldr	r4, [r2, #0]
 8004b98:	ab04      	add	r3, sp, #16
 8004b9a:	aa02      	add	r2, sp, #8
 8004b9c:	47a0      	blx	r4
	if (ret < 0) {
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	db06      	blt.n	8004bb0 <sx127x_lora_init+0xb8>
	ret = sx12xx_init(dev);
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f7ff ff0c 	bl	80049c0 <sx12xx_init>
	if (ret < 0) {
 8004ba8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
 8004bac:	b00a      	add	sp, #40	; 0x28
 8004bae:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8004bb0:	f06f 0004 	mvn.w	r0, #4
 8004bb4:	e7c4      	b.n	8004b40 <sx127x_lora_init+0x48>
		return -EINVAL;
 8004bb6:	f06f 0015 	mvn.w	r0, #21
 8004bba:	e7c1      	b.n	8004b40 <sx127x_lora_init+0x48>
 8004bbc:	0800c1a0 	.word	0x0800c1a0
 8004bc0:	20000acc 	.word	0x20000acc
 8004bc4:	0007a120 	.word	0x0007a120
 8004bc8:	0800c0fc 	.word	0x0800c0fc
 8004bcc:	20000b30 	.word	0x20000b30
 8004bd0:	0800c0f4 	.word	0x0800c0f4
 8004bd4:	20000ad4 	.word	0x20000ad4

08004bd8 <SX1276GetBoardTcxoWakeupTime>:
}
 8004bd8:	2000      	movs	r0, #0
 8004bda:	4770      	bx	lr

08004bdc <SX1276SetAntSwLowPower>:
}
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop

08004be0 <SX1276SetBoardTcxo>:
}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop

08004be4 <SX1276SetAntSw>:
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop

08004be8 <SX1276Reset>:
{
 8004be8:	b510      	push	{r4, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 8004bea:	4c10      	ldr	r4, [pc, #64]	; (8004c2c <SX1276Reset+0x44>)
 8004bec:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004bee:	6903      	ldr	r3, [r0, #16]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	05da      	lsls	r2, r3, #23
	return api->port_set_bits_raw(port, pins);
 8004bf4:	6883      	ldr	r3, [r0, #8]
 8004bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bfa:	bf54      	ite	pl
 8004bfc:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8004bfe:	691b      	ldrmi	r3, [r3, #16]
 8004c00:	4798      	blx	r3
 8004c02:	2100      	movs	r1, #0
 8004c04:	200a      	movs	r0, #10
 8004c06:	f004 fc75 	bl	80094f4 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8004c0a:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004c0c:	6903      	ldr	r3, [r0, #16]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	05db      	lsls	r3, r3, #23
	return api->port_set_bits_raw(port, pins);
 8004c12:	6883      	ldr	r3, [r0, #8]
 8004c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c18:	bf4c      	ite	mi
 8004c1a:	68db      	ldrmi	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8004c1c:	691b      	ldrpl	r3, [r3, #16]
 8004c1e:	4798      	blx	r3
 8004c20:	203c      	movs	r0, #60	; 0x3c
}
 8004c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c26:	2100      	movs	r1, #0
 8004c28:	f004 bc64 	b.w	80094f4 <z_impl_k_sleep>
 8004c2c:	20000acc 	.word	0x20000acc

08004c30 <SX1276IoIrqInit>:
{
 8004c30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c34:	4c31      	ldr	r4, [pc, #196]	; (8004cfc <SX1276IoIrqInit+0xcc>)
 8004c36:	4e32      	ldr	r6, [pc, #200]	; (8004d00 <SX1276IoIrqInit+0xd0>)
 8004c38:	4d32      	ldr	r5, [pc, #200]	; (8004d04 <SX1276IoIrqInit+0xd4>)
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8004c3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004d10 <SX1276IoIrqInit+0xe0>
 8004c3e:	f104 0810 	add.w	r8, r4, #16
 8004c42:	f1a0 0904 	sub.w	r9, r0, #4
		if (!irqHandlers[i]) {
 8004c46:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d041      	beq.n	8004cd2 <SX1276IoIrqInit+0xa2>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 8004c4e:	6828      	ldr	r0, [r5, #0]
 8004c50:	f003 fb3c 	bl	80082cc <z_impl_device_get_binding>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8004c54:	4651      	mov	r1, sl
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 8004c56:	6020      	str	r0, [r4, #0]
		if (dev_data.dio_dev[i] == NULL) {
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d044      	beq.n	8004ce6 <SX1276IoIrqInit+0xb6>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	f003 ff83 	bl	8008b68 <k_work_init>
				   | sx127x_dios[i].flags);
 8004c62:	f895 e005 	ldrb.w	lr, [r5, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8004c66:	6820      	ldr	r0, [r4, #0]
 8004c68:	7929      	ldrb	r1, [r5, #4]
 8004c6a:	f44e 2b00 	orr.w	fp, lr, #524288	; 0x80000
 8004c6e:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004c72:	2301      	movs	r3, #1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8004c74:	f01e 0f01 	tst.w	lr, #1
	struct gpio_driver_data *data =
 8004c78:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
 8004c7c:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004c7e:	fa03 f301 	lsl.w	r3, r3, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8004c82:	d032      	beq.n	8004cea <SX1276IoIrqInit+0xba>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004c84:	f8dc 2000 	ldr.w	r2, [ip]
 8004c88:	4313      	orrs	r3, r2
	return api->pin_configure(port, pin, flags);
 8004c8a:	465a      	mov	r2, fp
 8004c8c:	f8cc 3000 	str.w	r3, [ip]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	4798      	blx	r3
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8004c94:	6820      	ldr	r0, [r4, #0]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8004c96:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <SX1276IoIrqInit+0xd8>)
 8004c98:	6073      	str	r3, [r6, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8004c9a:	6883      	ldr	r3, [r0, #8]
				   BIT(sx127x_dios[i].pin));
 8004c9c:	f895 b004 	ldrb.w	fp, [r5, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	fa02 f70b 	lsl.w	r7, r2, fp
	callback->pin_mask = pin_mask;
 8004ca8:	60b7      	str	r7, [r6, #8]
	if (api->manage_callback == NULL) {
 8004caa:	b1e3      	cbz	r3, 8004ce6 <SX1276IoIrqInit+0xb6>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8004cac:	4631      	mov	r1, r6
 8004cae:	4798      	blx	r3
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	db18      	blt.n	8004ce6 <SX1276IoIrqInit+0xb6>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8004cb4:	6820      	ldr	r0, [r4, #0]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8004cb6:	6903      	ldr	r3, [r0, #16]
 8004cb8:	681b      	ldr	r3, [r3, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8004cba:	421f      	tst	r7, r3
	const struct gpio_driver_api *api =
 8004cbc:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8004cbe:	4659      	mov	r1, fp
 8004cc0:	699f      	ldr	r7, [r3, #24]
 8004cc2:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8004cc6:	bf0c      	ite	eq
 8004cc8:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8004ccc:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8004cd0:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8004cd2:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <SX1276IoIrqInit+0xdc>)
 8004cd4:	3404      	adds	r4, #4
 8004cd6:	429c      	cmp	r4, r3
 8004cd8:	f106 060c 	add.w	r6, r6, #12
 8004cdc:	f105 0508 	add.w	r5, r5, #8
 8004ce0:	f108 0810 	add.w	r8, r8, #16
 8004ce4:	d1af      	bne.n	8004c46 <SX1276IoIrqInit+0x16>
}
 8004ce6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8004cea:	f8dc 3000 	ldr.w	r3, [ip]
 8004cee:	f04f 0e01 	mov.w	lr, #1
 8004cf2:	fa0e fe01 	lsl.w	lr, lr, r1
 8004cf6:	ea23 030e 	bic.w	r3, r3, lr
 8004cfa:	e7c6      	b.n	8004c8a <SX1276IoIrqInit+0x5a>
 8004cfc:	20000ae0 	.word	0x20000ae0
 8004d00:	20000a9c 	.word	0x20000a9c
 8004d04:	0800c274 	.word	0x0800c274
 8004d08:	08004a31 	.word	0x08004a31
 8004d0c:	20000af0 	.word	0x20000af0
 8004d10:	08004a19 	.word	0x08004a19

08004d14 <SX1276SetRfTxPower>:
{
 8004d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d18:	b08a      	sub	sp, #40	; 0x28
	struct spi_buf_set tx = {
 8004d1a:	2302      	movs	r3, #2
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8004d1c:	4e39      	ldr	r6, [pc, #228]	; (8004e04 <SX1276SetRfTxPower+0xf0>)
	struct spi_buf_set tx = {
 8004d1e:	9303      	str	r3, [sp, #12]
		const struct spi_buf_set rx = {
 8004d20:	9305      	str	r3, [sp, #20]
	const struct spi_buf buf[2] = {
 8004d22:	f10d 0307 	add.w	r3, sp, #7
	uint8_t pa_config = 0;
 8004d26:	2100      	movs	r1, #0
	const struct spi_buf buf[2] = {
 8004d28:	2201      	movs	r2, #1
	struct spi_buf_set tx = {
 8004d2a:	ad06      	add	r5, sp, #24
 8004d2c:	244d      	movs	r4, #77	; 0x4d
	const struct spi_buf buf[2] = {
 8004d2e:	9306      	str	r3, [sp, #24]
 8004d30:	f10d 0306 	add.w	r3, sp, #6
 8004d34:	f88d 4007 	strb.w	r4, [sp, #7]
	uint8_t pa_config = 0;
 8004d38:	f88d 1005 	strb.w	r1, [sp, #5]
{
 8004d3c:	4604      	mov	r4, r0
	uint8_t pa_dac = 0;
 8004d3e:	f88d 1006 	strb.w	r1, [sp, #6]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8004d42:	6870      	ldr	r0, [r6, #4]
	const struct spi_buf buf[2] = {
 8004d44:	9207      	str	r2, [sp, #28]
 8004d46:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
 8004d48:	9502      	str	r5, [sp, #8]
		const struct spi_buf_set rx = {
 8004d4a:	9504      	str	r5, [sp, #16]
	const struct spi_buf buf[2] = {
 8004d4c:	9308      	str	r3, [sp, #32]
 8004d4e:	6883      	ldr	r3, [r0, #8]
 8004d50:	aa02      	add	r2, sp, #8
 8004d52:	681f      	ldr	r7, [r3, #0]
 8004d54:	f106 0108 	add.w	r1, r6, #8
 8004d58:	ab04      	add	r3, sp, #16
 8004d5a:	47b8      	blx	r7
	if (ret < 0) {
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	db44      	blt.n	8004dea <SX1276SetRfTxPower+0xd6>
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8004d60:	2c14      	cmp	r4, #20
 8004d62:	4623      	mov	r3, r4
 8004d64:	bfa8      	it	ge
 8004d66:	2314      	movge	r3, #20
 8004d68:	2b02      	cmp	r3, #2
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8004d6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 8004d6e:	f99d 1005 	ldrsb.w	r1, [sp, #5]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8004d72:	bfb8      	it	lt
 8004d74:	2302      	movlt	r3, #2
		if (power > 17) {
 8004d76:	2c11      	cmp	r4, #17
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8004d78:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8004d7c:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8004d80:	b2db      	uxtb	r3, r3
		if (power > 17) {
 8004d82:	dc35      	bgt.n	8004df0 <SX1276SetRfTxPower+0xdc>
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8004d84:	3b02      	subs	r3, #2
 8004d86:	430b      	orrs	r3, r1
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8004d88:	f042 0204 	orr.w	r2, r2, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8004d8c:	f88d 3005 	strb.w	r3, [sp, #5]
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8004d90:	f88d 2006 	strb.w	r2, [sp, #6]
	const struct spi_buf buf[2] = {
 8004d94:	ab02      	add	r3, sp, #8
 8004d96:	9306      	str	r3, [sp, #24]
 8004d98:	2389      	movs	r3, #137	; 0x89
 8004d9a:	2401      	movs	r4, #1
 8004d9c:	f88d 3008 	strb.w	r3, [sp, #8]
	struct spi_buf_set tx = {
 8004da0:	2702      	movs	r7, #2
	const struct spi_buf buf[2] = {
 8004da2:	f10d 0305 	add.w	r3, sp, #5
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8004da6:	6870      	ldr	r0, [r6, #4]
	struct spi_buf_set tx = {
 8004da8:	9504      	str	r5, [sp, #16]
	const struct spi_buf buf[2] = {
 8004daa:	9407      	str	r4, [sp, #28]
 8004dac:	9409      	str	r4, [sp, #36]	; 0x24
 8004dae:	9308      	str	r3, [sp, #32]
	struct spi_buf_set tx = {
 8004db0:	9705      	str	r7, [sp, #20]
 8004db2:	6883      	ldr	r3, [r0, #8]
 8004db4:	4914      	ldr	r1, [pc, #80]	; (8004e08 <SX1276SetRfTxPower+0xf4>)
 8004db6:	f8d3 8000 	ldr.w	r8, [r3]
 8004dba:	aa04      	add	r2, sp, #16
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	47c0      	blx	r8
	if (ret < 0) {
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	db12      	blt.n	8004dea <SX1276SetRfTxPower+0xd6>
	const struct spi_buf buf[2] = {
 8004dc4:	ab02      	add	r3, sp, #8
 8004dc6:	9306      	str	r3, [sp, #24]
 8004dc8:	f10d 0306 	add.w	r3, sp, #6
 8004dcc:	9308      	str	r3, [sp, #32]
 8004dce:	23cd      	movs	r3, #205	; 0xcd
	struct spi_buf_set tx = {
 8004dd0:	e9cd 5704 	strd	r5, r7, [sp, #16]
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8004dd4:	6870      	ldr	r0, [r6, #4]
	const struct spi_buf buf[2] = {
 8004dd6:	9407      	str	r4, [sp, #28]
 8004dd8:	9409      	str	r4, [sp, #36]	; 0x24
 8004dda:	f88d 3008 	strb.w	r3, [sp, #8]
 8004dde:	6883      	ldr	r3, [r0, #8]
 8004de0:	4909      	ldr	r1, [pc, #36]	; (8004e08 <SX1276SetRfTxPower+0xf4>)
 8004de2:	681c      	ldr	r4, [r3, #0]
 8004de4:	aa04      	add	r2, sp, #16
 8004de6:	2300      	movs	r3, #0
 8004de8:	47a0      	blx	r4
}
 8004dea:	b00a      	add	sp, #40	; 0x28
 8004dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8004df0:	3b05      	subs	r3, #5
 8004df2:	430b      	orrs	r3, r1
			pa_dac |= SX127X_PADAC_20DBM_ON;
 8004df4:	f042 0207 	orr.w	r2, r2, #7
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8004df8:	f88d 3005 	strb.w	r3, [sp, #5]
			pa_dac |= SX127X_PADAC_20DBM_ON;
 8004dfc:	f88d 2006 	strb.w	r2, [sp, #6]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8004e00:	e7c8      	b.n	8004d94 <SX1276SetRfTxPower+0x80>
 8004e02:	bf00      	nop
 8004e04:	20000acc 	.word	0x20000acc
 8004e08:	20000ad4 	.word	0x20000ad4

08004e0c <SX1276GetDio1PinState>:
{
 8004e0c:	b510      	push	{r4, lr}
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <SX1276GetDio1PinState+0x30>)
 8004e10:	6998      	ldr	r0, [r3, #24]
{
 8004e12:	b082      	sub	sp, #8
	const struct gpio_driver_data *const data =
 8004e14:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
 8004e16:	6883      	ldr	r3, [r0, #8]
 8004e18:	a901      	add	r1, sp, #4
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4798      	blx	r3
	if (ret == 0) {
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d004      	beq.n	8004e2c <SX1276GetDio1PinState+0x20>
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 8004e22:	bfcc      	ite	gt
 8004e24:	2001      	movgt	r0, #1
 8004e26:	2000      	movle	r0, #0
}
 8004e28:	b002      	add	sp, #8
 8004e2a:	bd10      	pop	{r4, pc}
		*value ^= data->invert;
 8004e2c:	9801      	ldr	r0, [sp, #4]
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8004e32:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8004e36:	b002      	add	sp, #8
 8004e38:	bd10      	pop	{r4, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000acc 	.word	0x20000acc

08004e40 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8004e40:	b13a      	cbz	r2, 8004e52 <memcpy1+0x12>
 8004e42:	3801      	subs	r0, #1
 8004e44:	440a      	add	r2, r1
    {
        *dst++ = *src++;
 8004e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e4a:	f800 3f01 	strb.w	r3, [r0, #1]!
    while( size-- )
 8004e4e:	4291      	cmp	r1, r2
 8004e50:	d1f9      	bne.n	8004e46 <memcpy1+0x6>
    }
}
 8004e52:	4770      	bx	lr

08004e54 <TimerInit>:
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
    obj->Timestamp = 0;
 8004e54:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
 8004e56:	e9c0 3300 	strd	r3, r3, [r0]
    obj->IsStarted = false;
    obj->IsNext2Expire = false;
    obj->Callback = callback;
    obj->Context = NULL;
 8004e5a:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
 8004e5e:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
 8004e60:	6143      	str	r3, [r0, #20]
}
 8004e62:	4770      	bx	lr

08004e64 <TimerStart>:
{
    obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 8004e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e66:	b083      	sub	sp, #12
 8004e68:	4605      	mov	r5, r0
    uint32_t elapsedTime = 0;

    CRITICAL_SECTION_BEGIN( );
 8004e6a:	a801      	add	r0, sp, #4
 8004e6c:	f7ff f9cc 	bl	8004208 <BoardCriticalSectionBegin>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8004e70:	b13d      	cbz	r5, 8004e82 <TimerStart+0x1e>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8004e72:	4e32      	ldr	r6, [pc, #200]	; (8004f3c <TimerStart+0xd8>)
 8004e74:	6834      	ldr	r4, [r6, #0]

    while( cur != NULL )
 8004e76:	b914      	cbnz	r4, 8004e7e <TimerStart+0x1a>
 8004e78:	e044      	b.n	8004f04 <TimerStart+0xa0>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 8004e7a:	6964      	ldr	r4, [r4, #20]
    while( cur != NULL )
 8004e7c:	b134      	cbz	r4, 8004e8c <TimerStart+0x28>
        if( cur == obj )
 8004e7e:	42a5      	cmp	r5, r4
 8004e80:	d1fb      	bne.n	8004e7a <TimerStart+0x16>
        CRITICAL_SECTION_END( );
 8004e82:	a801      	add	r0, sp, #4
 8004e84:	f7ff f9ca 	bl	800421c <BoardCriticalSectionEnd>
}
 8004e88:	b003      	add	sp, #12
 8004e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    obj->Timestamp = obj->ReloadValue;
 8004e8c:	686b      	ldr	r3, [r5, #4]
 8004e8e:	602b      	str	r3, [r5, #0]
    obj->IsStarted = true;
 8004e90:	2701      	movs	r7, #1
 8004e92:	812f      	strh	r7, [r5, #8]
        elapsedTime = RtcGetTimerElapsedTime( );
 8004e94:	f7ff f986 	bl	80041a4 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8004e98:	682b      	ldr	r3, [r5, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8004e9a:	6831      	ldr	r1, [r6, #0]
        obj->Timestamp += elapsedTime;
 8004e9c:	4418      	add	r0, r3
 8004e9e:	6028      	str	r0, [r5, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8004ea0:	680b      	ldr	r3, [r1, #0]
 8004ea2:	4298      	cmp	r0, r3
 8004ea4:	d214      	bcs.n	8004ed0 <TimerStart+0x6c>
        cur->IsNext2Expire = false;
 8004ea6:	724c      	strb	r4, [r1, #9]
    obj->Next = cur;
 8004ea8:	6169      	str	r1, [r5, #20]
    TimerListHead = obj;
 8004eaa:	6035      	str	r5, [r6, #0]
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
    int32_t minTicks= RtcGetMinimumTimeout( );
 8004eac:	f7ff f988 	bl	80041c0 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 8004eb0:	726f      	strb	r7, [r5, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8004eb2:	682e      	ldr	r6, [r5, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8004eb4:	4604      	mov	r4, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8004eb6:	f7ff f975 	bl	80041a4 <RtcGetTimerElapsedTime>
 8004eba:	4420      	add	r0, r4
 8004ebc:	4286      	cmp	r6, r0
 8004ebe:	d337      	bcc.n	8004f30 <TimerStart+0xcc>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 8004ec0:	6828      	ldr	r0, [r5, #0]
 8004ec2:	f7fb fc1d 	bl	8000700 <RtcSetAlarm>
        CRITICAL_SECTION_END( );
 8004ec6:	a801      	add	r0, sp, #4
 8004ec8:	f7ff f9a8 	bl	800421c <BoardCriticalSectionEnd>
}
 8004ecc:	b003      	add	sp, #12
 8004ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TimerEvent_t* next = TimerListHead->Next;
 8004ed0:	694b      	ldr	r3, [r1, #20]
    while( cur->Next != NULL )
 8004ed2:	b96b      	cbnz	r3, 8004ef0 <TimerStart+0x8c>
 8004ed4:	460b      	mov	r3, r1
    obj->Next = NULL;
 8004ed6:	2200      	movs	r2, #0
    cur->Next = obj;
 8004ed8:	615d      	str	r5, [r3, #20]
        CRITICAL_SECTION_END( );
 8004eda:	a801      	add	r0, sp, #4
    obj->Next = NULL;
 8004edc:	616a      	str	r2, [r5, #20]
        CRITICAL_SECTION_END( );
 8004ede:	f7ff f99d 	bl	800421c <BoardCriticalSectionEnd>
}
 8004ee2:	b003      	add	sp, #12
 8004ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            next = next->Next;
 8004ee6:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
 8004ee8:	4619      	mov	r1, r3
 8004eea:	2a00      	cmp	r2, #0
 8004eec:	d0f3      	beq.n	8004ed6 <TimerStart+0x72>
 8004eee:	4613      	mov	r3, r2
        if( obj->Timestamp > next->Timestamp )
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4290      	cmp	r0, r2
 8004ef4:	d8f7      	bhi.n	8004ee6 <TimerStart+0x82>
            cur->Next = obj;
 8004ef6:	614d      	str	r5, [r1, #20]
        CRITICAL_SECTION_END( );
 8004ef8:	a801      	add	r0, sp, #4
            obj->Next = next;
 8004efa:	616b      	str	r3, [r5, #20]
        CRITICAL_SECTION_END( );
 8004efc:	f7ff f98e 	bl	800421c <BoardCriticalSectionEnd>
}
 8004f00:	b003      	add	sp, #12
 8004f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    obj->Timestamp = obj->ReloadValue;
 8004f04:	686b      	ldr	r3, [r5, #4]
 8004f06:	602b      	str	r3, [r5, #0]
    obj->IsStarted = true;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	812b      	strh	r3, [r5, #8]
        RtcSetTimerContext( );
 8004f0c:	f7ff f960 	bl	80041d0 <RtcSetTimerContext>
    TimerEvent_t* cur = TimerListHead;
 8004f10:	6833      	ldr	r3, [r6, #0]
    if( cur != NULL )
 8004f12:	b103      	cbz	r3, 8004f16 <TimerStart+0xb2>
        cur->IsNext2Expire = false;
 8004f14:	725c      	strb	r4, [r3, #9]
    obj->Next = cur;
 8004f16:	616b      	str	r3, [r5, #20]
    TimerListHead = obj;
 8004f18:	6035      	str	r5, [r6, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8004f1a:	f7ff f951 	bl	80041c0 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	726b      	strb	r3, [r5, #9]
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8004f22:	682e      	ldr	r6, [r5, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8004f24:	4604      	mov	r4, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8004f26:	f7ff f93d 	bl	80041a4 <RtcGetTimerElapsedTime>
 8004f2a:	4420      	add	r0, r4
 8004f2c:	4286      	cmp	r6, r0
 8004f2e:	d2c7      	bcs.n	8004ec0 <TimerStart+0x5c>
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8004f30:	f7ff f938 	bl	80041a4 <RtcGetTimerElapsedTime>
 8004f34:	4420      	add	r0, r4
 8004f36:	6028      	str	r0, [r5, #0]
 8004f38:	e7c3      	b.n	8004ec2 <TimerStart+0x5e>
 8004f3a:	bf00      	nop
 8004f3c:	20000b3c 	.word	0x20000b3c

08004f40 <TimerIrqHandler>:
{
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old =  RtcGetTimerContext( );
 8004f42:	f7ff f951 	bl	80041e8 <RtcGetTimerContext>
    if( TimerListHead != NULL )
 8004f46:	4c27      	ldr	r4, [pc, #156]	; (8004fe4 <TimerIrqHandler+0xa4>)
    uint32_t old =  RtcGetTimerContext( );
 8004f48:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8004f4a:	f7ff f941 	bl	80041d0 <RtcSetTimerContext>
    if( TimerListHead != NULL )
 8004f4e:	6827      	ldr	r7, [r4, #0]
 8004f50:	2f00      	cmp	r7, #0
 8004f52:	d02f      	beq.n	8004fb4 <TimerIrqHandler+0x74>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8004f54:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8004f58:	f1bc 0f00 	cmp.w	ip, #0
 8004f5c:	d00c      	beq.n	8004f78 <TimerIrqHandler+0x38>
    uint32_t deltaContext = now - old; // intentional wrap around
 8004f5e:	1b46      	subs	r6, r0, r5
 8004f60:	4663      	mov	r3, ip
                next->Timestamp -= deltaContext;
 8004f62:	1a28      	subs	r0, r5, r0
            if( next->Timestamp > deltaContext )
 8004f64:	6819      	ldr	r1, [r3, #0]
 8004f66:	42b1      	cmp	r1, r6
                next->Timestamp = 0;
 8004f68:	f04f 0200 	mov.w	r2, #0
                next->Timestamp -= deltaContext;
 8004f6c:	bf88      	it	hi
 8004f6e:	1842      	addhi	r2, r0, r1
 8004f70:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f5      	bne.n	8004f64 <TimerIrqHandler+0x24>
        ExecuteCallBack( cur->Callback, cur->Context );
 8004f78:	68fb      	ldr	r3, [r7, #12]
        TimerListHead = TimerListHead->Next;
 8004f7a:	f8c4 c000 	str.w	ip, [r4]
        cur->IsStarted = false;
 8004f7e:	2600      	movs	r6, #0
 8004f80:	723e      	strb	r6, [r7, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8004f82:	b1cb      	cbz	r3, 8004fb8 <TimerIrqHandler+0x78>
 8004f84:	6938      	ldr	r0, [r7, #16]
 8004f86:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	b953      	cbnz	r3, 8004fa2 <TimerIrqHandler+0x62>
 8004f8c:	e012      	b.n	8004fb4 <TimerIrqHandler+0x74>
        cur = TimerListHead;
 8004f8e:	6823      	ldr	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
 8004f90:	68da      	ldr	r2, [r3, #12]
        TimerListHead = TimerListHead->Next;
 8004f92:	6959      	ldr	r1, [r3, #20]
 8004f94:	6021      	str	r1, [r4, #0]
        cur->IsStarted = false;
 8004f96:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8004f98:	b16a      	cbz	r2, 8004fb6 <TimerIrqHandler+0x76>
 8004f9a:	6918      	ldr	r0, [r3, #16]
 8004f9c:	4790      	blx	r2
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	b143      	cbz	r3, 8004fb4 <TimerIrqHandler+0x74>
 8004fa2:	681d      	ldr	r5, [r3, #0]
 8004fa4:	f7ff f8fe 	bl	80041a4 <RtcGetTimerElapsedTime>
 8004fa8:	4285      	cmp	r5, r0
 8004faa:	d3f0      	bcc.n	8004f8e <TimerIrqHandler+0x4e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8004fac:	6824      	ldr	r4, [r4, #0]
 8004fae:	b10c      	cbz	r4, 8004fb4 <TimerIrqHandler+0x74>
 8004fb0:	7a63      	ldrb	r3, [r4, #9]
 8004fb2:	b113      	cbz	r3, 8004fba <TimerIrqHandler+0x7a>
}
 8004fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
 8004fb6:	e7fe      	b.n	8004fb6 <TimerIrqHandler+0x76>
        ExecuteCallBack( cur->Callback, cur->Context );
 8004fb8:	e7fe      	b.n	8004fb8 <TimerIrqHandler+0x78>
    int32_t minTicks= RtcGetMinimumTimeout( );
 8004fba:	f7ff f901 	bl	80041c0 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	7263      	strb	r3, [r4, #9]
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8004fc2:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8004fc4:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8004fc6:	f7ff f8ed 	bl	80041a4 <RtcGetTimerElapsedTime>
 8004fca:	4428      	add	r0, r5
 8004fcc:	4286      	cmp	r6, r0
 8004fce:	d304      	bcc.n	8004fda <TimerIrqHandler+0x9a>
    RtcSetAlarm( obj->Timestamp );
 8004fd0:	6820      	ldr	r0, [r4, #0]
}
 8004fd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    RtcSetAlarm( obj->Timestamp );
 8004fd6:	f7fb bb93 	b.w	8000700 <RtcSetAlarm>
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8004fda:	f7ff f8e3 	bl	80041a4 <RtcGetTimerElapsedTime>
 8004fde:	4428      	add	r0, r5
 8004fe0:	6020      	str	r0, [r4, #0]
 8004fe2:	e7f6      	b.n	8004fd2 <TimerIrqHandler+0x92>
 8004fe4:	20000b3c 	.word	0x20000b3c

08004fe8 <TimerStop>:
{
 8004fe8:	b570      	push	{r4, r5, r6, lr}
    TimerEvent_t* prev = TimerListHead;
 8004fea:	4d22      	ldr	r5, [pc, #136]	; (8005074 <TimerStop+0x8c>)
{
 8004fec:	b082      	sub	sp, #8
 8004fee:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8004ff0:	a801      	add	r0, sp, #4
 8004ff2:	f7ff f909 	bl	8004208 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 8004ff6:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8004ff8:	b15b      	cbz	r3, 8005012 <TimerStop+0x2a>
 8004ffa:	b154      	cbz	r4, 8005012 <TimerStop+0x2a>
    obj->IsStarted = false;
 8004ffc:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
 8004ffe:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
 8005000:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8005002:	d102      	bne.n	800500a <TimerStop+0x22>
 8005004:	e011      	b.n	800502a <TimerStop+0x42>
            if( cur == obj )
 8005006:	429c      	cmp	r4, r3
 8005008:	d008      	beq.n	800501c <TimerStop+0x34>
                cur = cur->Next;
 800500a:	461a      	mov	r2, r3
 800500c:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f9      	bne.n	8005006 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 8005012:	a801      	add	r0, sp, #4
 8005014:	f7ff f902 	bl	800421c <BoardCriticalSectionEnd>
}
 8005018:	b002      	add	sp, #8
 800501a:	bd70      	pop	{r4, r5, r6, pc}
                if( cur->Next != NULL )
 800501c:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
 800501e:	6153      	str	r3, [r2, #20]
        CRITICAL_SECTION_END( );
 8005020:	a801      	add	r0, sp, #4
 8005022:	f7ff f8fb 	bl	800421c <BoardCriticalSectionEnd>
}
 8005026:	b002      	add	sp, #8
 8005028:	bd70      	pop	{r4, r5, r6, pc}
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800502a:	7a59      	ldrb	r1, [r3, #9]
            if( TimerListHead->Next != NULL )
 800502c:	695c      	ldr	r4, [r3, #20]
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800502e:	b189      	cbz	r1, 8005054 <TimerStop+0x6c>
            TimerListHead->IsNext2Expire = false;
 8005030:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 8005032:	b1ac      	cbz	r4, 8005060 <TimerStop+0x78>
                TimerListHead = TimerListHead->Next;
 8005034:	602c      	str	r4, [r5, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8005036:	f7ff f8c3 	bl	80041c0 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 800503a:	2301      	movs	r3, #1
 800503c:	7263      	strb	r3, [r4, #9]
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800503e:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8005040:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8005042:	f7ff f8af 	bl	80041a4 <RtcGetTimerElapsedTime>
 8005046:	4428      	add	r0, r5
 8005048:	4286      	cmp	r6, r0
 800504a:	d30d      	bcc.n	8005068 <TimerStop+0x80>
    RtcSetAlarm( obj->Timestamp );
 800504c:	6820      	ldr	r0, [r4, #0]
 800504e:	f7fb fb57 	bl	8000700 <RtcSetAlarm>
}
 8005052:	e7de      	b.n	8005012 <TimerStop+0x2a>
        CRITICAL_SECTION_END( );
 8005054:	a801      	add	r0, sp, #4
                TimerListHead = NULL;
 8005056:	602c      	str	r4, [r5, #0]
        CRITICAL_SECTION_END( );
 8005058:	f7ff f8e0 	bl	800421c <BoardCriticalSectionEnd>
}
 800505c:	b002      	add	sp, #8
 800505e:	bd70      	pop	{r4, r5, r6, pc}
                RtcStopAlarm( );
 8005060:	f7ff f8b0 	bl	80041c4 <RtcStopAlarm>
                TimerListHead = NULL;
 8005064:	602c      	str	r4, [r5, #0]
 8005066:	e7d4      	b.n	8005012 <TimerStop+0x2a>
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8005068:	f7ff f89c 	bl	80041a4 <RtcGetTimerElapsedTime>
 800506c:	4428      	add	r0, r5
 800506e:	6020      	str	r0, [r4, #0]
 8005070:	e7ed      	b.n	800504e <TimerStop+0x66>
 8005072:	bf00      	nop
 8005074:	20000b3c 	.word	0x20000b3c

08005078 <TimerSetValue>:
{
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
 800507c:	4608      	mov	r0, r1
 800507e:	f7ff f8bf 	bl	8004200 <RtcMs2Tick>
 8005082:	4604      	mov	r4, r0
    TimerStop( obj );
 8005084:	4628      	mov	r0, r5
 8005086:	f7ff ffaf 	bl	8004fe8 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800508a:	f7ff f899 	bl	80041c0 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800508e:	42a0      	cmp	r0, r4
 8005090:	bf38      	it	cc
 8005092:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
 8005094:	e9c5 0000 	strd	r0, r0, [r5]
}
 8005098:	bd38      	pop	{r3, r4, r5, pc}
 800509a:	bf00      	nop

0800509c <TimerGetCurrentTime>:
{
 800509c:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 800509e:	f7ff f879 	bl	8004194 <RtcGetTimerValue>
}
 80050a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
 80050a6:	f7ff b8ad 	b.w	8004204 <RtcTick2Ms>
 80050aa:	bf00      	nop

080050ac <TimerGetElapsedTime>:
    if ( past == 0 )
 80050ac:	b900      	cbnz	r0, 80050b0 <TimerGetElapsedTime+0x4>
}
 80050ae:	4770      	bx	lr
{
 80050b0:	b510      	push	{r4, lr}
 80050b2:	4604      	mov	r4, r0
    uint32_t nowInTicks = RtcGetTimerValue( );
 80050b4:	f7ff f86e 	bl	8004194 <RtcGetTimerValue>
 80050b8:	4603      	mov	r3, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 80050ba:	4620      	mov	r0, r4
    uint32_t nowInTicks = RtcGetTimerValue( );
 80050bc:	461c      	mov	r4, r3
    uint32_t pastInTicks = RtcMs2Tick( past );
 80050be:	f7ff f89f 	bl	8004200 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 80050c2:	1a20      	subs	r0, r4, r0
}
 80050c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
 80050c8:	f7ff b89c 	b.w	8004204 <RtcTick2Ms>

080050cc <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
 80050cc:	f7ff b892 	b.w	80041f4 <DelayMsMcu>

080050d0 <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void* context )
{
 80050d0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80050d2:	4c42      	ldr	r4, [pc, #264]	; (80051dc <SX1276OnDio2Irq+0x10c>)
 80050d4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
 80050d8:	2b01      	cmp	r3, #1
{
 80050da:	b082      	sub	sp, #8
    switch( SX1276.Settings.State )
 80050dc:	d007      	beq.n	80050ee <SX1276OnDio2Irq+0x1e>
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d103      	bne.n	80050ea <SX1276OnDio2Irq+0x1a>
            default:
                break;
            }
            break;
        case RF_TX_RUNNING:
            switch( SX1276.Settings.Modem )
 80050e2:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 80050e6:	2d01      	cmp	r5, #1
 80050e8:	d029      	beq.n	800513e <SX1276OnDio2Irq+0x6e>
            }
            break;
        default:
            break;
    }
}
 80050ea:	b002      	add	sp, #8
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 80050ee:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 80050f2:	b34d      	cbz	r5, 8005148 <SX1276OnDio2Irq+0x78>
 80050f4:	2d01      	cmp	r5, #1
 80050f6:	d1f8      	bne.n	80050ea <SX1276OnDio2Irq+0x1a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80050f8:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f4      	beq.n	80050ea <SX1276OnDio2Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005100:	2302      	movs	r3, #2
    SX1276WriteBuffer( addr, &data, 1 );
 8005102:	462a      	mov	r2, r5
 8005104:	f10d 0107 	add.w	r1, sp, #7
 8005108:	2012      	movs	r0, #18
 800510a:	f88d 3007 	strb.w	r3, [sp, #7]
 800510e:	f7ff fcb7 	bl	8004a80 <SX1276WriteBuffer>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005112:	4b33      	ldr	r3, [pc, #204]	; (80051e0 <SX1276OnDio2Irq+0x110>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0e7      	beq.n	80050ea <SX1276OnDio2Irq+0x1a>
 800511a:	695c      	ldr	r4, [r3, #20]
 800511c:	2c00      	cmp	r4, #0
 800511e:	d0e4      	beq.n	80050ea <SX1276OnDio2Irq+0x1a>
    SX1276ReadBuffer( addr, &data, 1 );
 8005120:	201c      	movs	r0, #28
 8005122:	462a      	mov	r2, r5
 8005124:	f10d 0107 	add.w	r1, sp, #7
 8005128:	f7ff fcc8 	bl	8004abc <SX1276ReadBuffer>
    return data;
 800512c:	f89d 0007 	ldrb.w	r0, [sp, #7]
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005130:	4623      	mov	r3, r4
 8005132:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
 8005136:	b002      	add	sp, #8
 8005138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800513c:	4718      	bx	r3
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800513e:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
 8005142:	2a00      	cmp	r2, #0
 8005144:	d0d1      	beq.n	80050ea <SX1276OnDio2Irq+0x1a>
 8005146:	e7dc      	b.n	8005102 <SX1276OnDio2Irq+0x32>
                if( SX1276.DIO4.port == NULL )
 8005148:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800514a:	2a00      	cmp	r2, #0
 800514c:	d043      	beq.n	80051d6 <SX1276OnDio2Irq+0x106>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800514e:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0c9      	beq.n	80050ea <SX1276OnDio2Irq+0x1a>
 8005156:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1c5      	bne.n	80050ea <SX1276OnDio2Irq+0x1a>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800515e:	2601      	movs	r6, #1
                    TimerStop( &RxTimeoutSyncWord );
 8005160:	4820      	ldr	r0, [pc, #128]	; (80051e4 <SX1276OnDio2Irq+0x114>)
 8005162:	f7ff ff41 	bl	8004fe8 <TimerStop>
    SX1276ReadBuffer( addr, &data, 1 );
 8005166:	4632      	mov	r2, r6
 8005168:	f10d 0107 	add.w	r1, sp, #7
 800516c:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800516e:	f884 610d 	strb.w	r6, [r4, #269]	; 0x10d
    SX1276ReadBuffer( addr, &data, 1 );
 8005172:	f7ff fca3 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005176:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800517a:	40f3      	lsrs	r3, r6
 800517c:	425b      	negs	r3, r3
    SX1276ReadBuffer( addr, &data, 1 );
 800517e:	4632      	mov	r2, r6
 8005180:	f10d 0107 	add.w	r1, sp, #7
 8005184:	201b      	movs	r0, #27
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005186:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
    SX1276ReadBuffer( addr, &data, 1 );
 800518a:	f7ff fc97 	bl	8004abc <SX1276ReadBuffer>
 800518e:	4632      	mov	r2, r6
 8005190:	f10d 0107 	add.w	r1, sp, #7
 8005194:	201c      	movs	r0, #28
    return data;
 8005196:	f89d 5007 	ldrb.w	r5, [sp, #7]
    SX1276ReadBuffer( addr, &data, 1 );
 800519a:	f7ff fc8f 	bl	8004abc <SX1276ReadBuffer>
    return data;
 800519e:	f89d 0007 	ldrb.w	r0, [sp, #7]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80051a2:	ea40 2305 	orr.w	r3, r0, r5, lsl #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80051a6:	f643 5509 	movw	r5, #15625	; 0x3d09
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 80051aa:	0a1b      	lsrs	r3, r3, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80051ac:	fb05 f000 	mul.w	r0, r5, r0
 80051b0:	3080      	adds	r0, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80051b2:	fb05 f303 	mul.w	r3, r5, r3
 80051b6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
    SX1276ReadBuffer( addr, &data, 1 );
 80051ba:	4632      	mov	r2, r6
 80051bc:	f10d 0107 	add.w	r1, sp, #7
 80051c0:	200c      	movs	r0, #12
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80051c2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    SX1276ReadBuffer( addr, &data, 1 );
 80051c6:	f7ff fc79 	bl	8004abc <SX1276ReadBuffer>
    return data;
 80051ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
 80051d4:	e789      	b.n	80050ea <SX1276OnDio2Irq+0x1a>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80051d6:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 80051da:	e7bc      	b.n	8005156 <SX1276OnDio2Irq+0x86>
 80051dc:	20000c74 	.word	0x20000c74
 80051e0:	20000b40 	.word	0x20000b40
 80051e4:	20000b44 	.word	0x20000b44

080051e8 <SX1276OnDio1Irq>:
{
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	b082      	sub	sp, #8
    SX1276ReadBuffer( addr, &data, 1 );
 80051ec:	2201      	movs	r2, #1
 80051ee:	f10d 0107 	add.w	r1, sp, #7
 80051f2:	203e      	movs	r0, #62	; 0x3e
    switch( SX1276.Settings.State )
 80051f4:	4c4f      	ldr	r4, [pc, #316]	; (8005334 <SX1276OnDio1Irq+0x14c>)
    SX1276ReadBuffer( addr, &data, 1 );
 80051f6:	f7ff fc61 	bl	8004abc <SX1276ReadBuffer>
 80051fa:	2201      	movs	r2, #1
 80051fc:	f10d 0107 	add.w	r1, sp, #7
 8005200:	203f      	movs	r0, #63	; 0x3f
 8005202:	f7ff fc5b 	bl	8004abc <SX1276ReadBuffer>
    switch( SX1276.Settings.State )
 8005206:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
 800520a:	2d01      	cmp	r5, #1
 800520c:	d006      	beq.n	800521c <SX1276OnDio1Irq+0x34>
 800520e:	2d02      	cmp	r5, #2
 8005210:	d102      	bne.n	8005218 <SX1276OnDio1Irq+0x30>
            switch( SX1276.Settings.Modem )
 8005212:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 8005216:	b32d      	cbz	r5, 8005264 <SX1276OnDio1Irq+0x7c>
}
 8005218:	b002      	add	sp, #8
 800521a:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800521c:	f894 60e1 	ldrb.w	r6, [r4, #225]	; 0xe1
 8005220:	2e00      	cmp	r6, #0
 8005222:	d039      	beq.n	8005298 <SX1276OnDio1Irq+0xb0>
 8005224:	2e01      	cmp	r6, #1
 8005226:	d1f7      	bne.n	8005218 <SX1276OnDio1Irq+0x30>
                if( SX1276GetDio1PinState( ) == 0 )
 8005228:	f7ff fdf0 	bl	8004e0c <SX1276GetDio1PinState>
 800522c:	2800      	cmp	r0, #0
 800522e:	d0f3      	beq.n	8005218 <SX1276OnDio1Irq+0x30>
                TimerStop( &RxTimeoutTimer );
 8005230:	4841      	ldr	r0, [pc, #260]	; (8005338 <SX1276OnDio1Irq+0x150>)
 8005232:	f7ff fed9 	bl	8004fe8 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8005236:	2380      	movs	r3, #128	; 0x80
    SX1276WriteBuffer( addr, &data, 1 );
 8005238:	4632      	mov	r2, r6
 800523a:	f10d 0107 	add.w	r1, sp, #7
 800523e:	2012      	movs	r0, #18
 8005240:	f88d 3007 	strb.w	r3, [sp, #7]
 8005244:	f7ff fc1c 	bl	8004a80 <SX1276WriteBuffer>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005248:	4b3c      	ldr	r3, [pc, #240]	; (800533c <SX1276OnDio1Irq+0x154>)
 800524a:	681b      	ldr	r3, [r3, #0]
                SX1276.Settings.State = RF_IDLE;
 800524c:	2200      	movs	r2, #0
 800524e:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0e0      	beq.n	8005218 <SX1276OnDio1Irq+0x30>
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0dd      	beq.n	8005218 <SX1276OnDio1Irq+0x30>
}
 800525c:	b002      	add	sp, #8
 800525e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
 8005262:	4718      	bx	r3
                if( SX1276GetDio1PinState( ) == 1 )
 8005264:	f7ff fdd2 	bl	8004e0c <SX1276GetDio1PinState>
 8005268:	2801      	cmp	r0, #1
 800526a:	d0d5      	beq.n	8005218 <SX1276OnDio1Irq+0x30>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800526c:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
 8005270:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8005274:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8005278:	4931      	ldr	r1, [pc, #196]	; (8005340 <SX1276OnDio1Irq+0x158>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800527a:	1a1b      	subs	r3, r3, r0
 800527c:	4293      	cmp	r3, r2
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800527e:	4401      	add	r1, r0
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8005280:	dd39      	ble.n	80052f6 <SX1276OnDio1Irq+0x10e>
    SX1276WriteBuffer( 0, buffer, size );
 8005282:	4628      	mov	r0, r5
 8005284:	f7ff fbfc 	bl	8004a80 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8005288:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 800528c:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8005290:	4413      	add	r3, r2
 8005292:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 8005296:	e7bf      	b.n	8005218 <SX1276OnDio1Irq+0x30>
                if( SX1276GetDio1PinState( ) == 0 )
 8005298:	f7ff fdb8 	bl	8004e0c <SX1276GetDio1PinState>
 800529c:	2800      	cmp	r0, #0
 800529e:	d0bb      	beq.n	8005218 <SX1276OnDio1Irq+0x30>
                TimerStop( &RxTimeoutSyncWord );
 80052a0:	4828      	ldr	r0, [pc, #160]	; (8005344 <SX1276OnDio1Irq+0x15c>)
 80052a2:	f7ff fea1 	bl	8004fe8 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80052a6:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
 80052aa:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
 80052ae:	ea52 0301 	orrs.w	r3, r2, r1
 80052b2:	d10b      	bne.n	80052cc <SX1276OnDio1Irq+0xe4>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80052b4:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
    SX1276ReadBuffer( 0, buffer, size );
 80052b8:	462a      	mov	r2, r5
                    if( SX1276.Settings.Fsk.FixLen == false )
 80052ba:	bb70      	cbnz	r0, 800531a <SX1276OnDio1Irq+0x132>
    SX1276ReadBuffer( 0, buffer, size );
 80052bc:	f504 718b 	add.w	r1, r4, #278	; 0x116
 80052c0:	f7ff fbfc 	bl	8004abc <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80052c4:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
 80052c8:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
 80052cc:	f894 011a 	ldrb.w	r0, [r4, #282]	; 0x11a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80052d0:	4b1b      	ldr	r3, [pc, #108]	; (8005340 <SX1276OnDio1Irq+0x158>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80052d2:	1a52      	subs	r2, r2, r1
 80052d4:	4282      	cmp	r2, r0
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80052d6:	4419      	add	r1, r3
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80052d8:	db16      	blt.n	8005308 <SX1276OnDio1Irq+0x120>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80052da:	1e42      	subs	r2, r0, #1
    SX1276ReadBuffer( 0, buffer, size );
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	2000      	movs	r0, #0
 80052e0:	f7ff fbec 	bl	8004abc <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80052e4:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 80052e8:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
 80052ec:	3a01      	subs	r2, #1
 80052ee:	4413      	add	r3, r2
 80052f0:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 80052f4:	e790      	b.n	8005218 <SX1276OnDio1Irq+0x30>
    SX1276WriteBuffer( 0, buffer, size );
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	4628      	mov	r0, r5
 80052fa:	f7ff fbc1 	bl	8004a80 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80052fe:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8005302:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
 8005306:	e787      	b.n	8005218 <SX1276OnDio1Irq+0x30>
    SX1276ReadBuffer( 0, buffer, size );
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	2000      	movs	r0, #0
 800530c:	f7ff fbd6 	bl	8004abc <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005310:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8005314:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 8005318:	e77e      	b.n	8005218 <SX1276OnDio1Irq+0x30>
    SX1276ReadBuffer( addr, &data, 1 );
 800531a:	f10d 0107 	add.w	r1, sp, #7
 800531e:	2032      	movs	r0, #50	; 0x32
 8005320:	f7ff fbcc 	bl	8004abc <SX1276ReadBuffer>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8005324:	f89d 2007 	ldrb.w	r2, [sp, #7]
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8005328:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800532c:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
 8005330:	e7cc      	b.n	80052cc <SX1276OnDio1Irq+0xe4>
 8005332:	bf00      	nop
 8005334:	20000c74 	.word	0x20000c74
 8005338:	20000b5c 	.word	0x20000b5c
 800533c:	20000b40 	.word	0x20000b40
 8005340:	20000b74 	.word	0x20000b74
 8005344:	20000b44 	.word	0x20000b44

08005348 <SX1276OnDio0Irq>:
{
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	b082      	sub	sp, #8
    SX1276ReadBuffer( addr, &data, 1 );
 800534c:	2201      	movs	r2, #1
 800534e:	f10d 0107 	add.w	r1, sp, #7
 8005352:	203e      	movs	r0, #62	; 0x3e
    switch( SX1276.Settings.State )
 8005354:	4cbf      	ldr	r4, [pc, #764]	; (8005654 <SX1276OnDio0Irq+0x30c>)
    SX1276ReadBuffer( addr, &data, 1 );
 8005356:	f7ff fbb1 	bl	8004abc <SX1276ReadBuffer>
 800535a:	2201      	movs	r2, #1
 800535c:	f10d 0107 	add.w	r1, sp, #7
 8005360:	203f      	movs	r0, #63	; 0x3f
 8005362:	f7ff fbab 	bl	8004abc <SX1276ReadBuffer>
    switch( SX1276.Settings.State )
 8005366:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
    volatile uint8_t irqFlags = 0;
 800536a:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 800536c:	2d01      	cmp	r5, #1
    volatile uint8_t irqFlags = 0;
 800536e:	f88d 3006 	strb.w	r3, [sp, #6]
    switch( SX1276.Settings.State )
 8005372:	d014      	beq.n	800539e <SX1276OnDio0Irq+0x56>
 8005374:	2d02      	cmp	r5, #2
 8005376:	d118      	bne.n	80053aa <SX1276OnDio0Irq+0x62>
            TimerStop( &TxTimeoutTimer );
 8005378:	48b7      	ldr	r0, [pc, #732]	; (8005658 <SX1276OnDio0Irq+0x310>)
 800537a:	f7ff fe35 	bl	8004fe8 <TimerStop>
            switch( SX1276.Settings.Modem )
 800537e:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
 8005382:	2a01      	cmp	r2, #1
 8005384:	d043      	beq.n	800540e <SX1276OnDio0Irq+0xc6>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8005386:	4bb5      	ldr	r3, [pc, #724]	; (800565c <SX1276OnDio0Irq+0x314>)
 8005388:	681b      	ldr	r3, [r3, #0]
                SX1276.Settings.State = RF_IDLE;
 800538a:	2200      	movs	r2, #0
 800538c:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8005390:	b15b      	cbz	r3, 80053aa <SX1276OnDio0Irq+0x62>
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	b14b      	cbz	r3, 80053aa <SX1276OnDio0Irq+0x62>
}
 8005396:	b002      	add	sp, #8
 8005398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
 800539c:	4718      	bx	r3
            switch( SX1276.Settings.Modem )
 800539e:	f894 60e1 	ldrb.w	r6, [r4, #225]	; 0xe1
 80053a2:	2e00      	cmp	r6, #0
 80053a4:	d03c      	beq.n	8005420 <SX1276OnDio0Irq+0xd8>
 80053a6:	2e01      	cmp	r6, #1
 80053a8:	d001      	beq.n	80053ae <SX1276OnDio0Irq+0x66>
}
 80053aa:	b002      	add	sp, #8
 80053ac:	bd70      	pop	{r4, r5, r6, pc}
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 80053ae:	2340      	movs	r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 80053b0:	4632      	mov	r2, r6
 80053b2:	2012      	movs	r0, #18
 80053b4:	f10d 0107 	add.w	r1, sp, #7
 80053b8:	f88d 3007 	strb.w	r3, [sp, #7]
 80053bc:	f7ff fb60 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80053c0:	4632      	mov	r2, r6
 80053c2:	f10d 0107 	add.w	r1, sp, #7
 80053c6:	2012      	movs	r0, #18
 80053c8:	f7ff fb78 	bl	8004abc <SX1276ReadBuffer>
    return data;
 80053cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80053d0:	f88d 3006 	strb.w	r3, [sp, #6]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80053d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80053d8:	069b      	lsls	r3, r3, #26
 80053da:	d574      	bpl.n	80054c6 <SX1276OnDio0Irq+0x17e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80053dc:	2320      	movs	r3, #32
    SX1276WriteBuffer( addr, &data, 1 );
 80053de:	4632      	mov	r2, r6
 80053e0:	f10d 0107 	add.w	r1, sp, #7
 80053e4:	2012      	movs	r0, #18
 80053e6:	f88d 3007 	strb.w	r3, [sp, #7]
 80053ea:	f7ff fb49 	bl	8004a80 <SX1276WriteBuffer>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 80053ee:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 80053f2:	b90b      	cbnz	r3, 80053f8 <SX1276OnDio0Irq+0xb0>
                            SX1276.Settings.State = RF_IDLE;
 80053f4:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 80053f8:	4899      	ldr	r0, [pc, #612]	; (8005660 <SX1276OnDio0Irq+0x318>)
 80053fa:	f7ff fdf5 	bl	8004fe8 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80053fe:	4b97      	ldr	r3, [pc, #604]	; (800565c <SX1276OnDio0Irq+0x314>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0d1      	beq.n	80053aa <SX1276OnDio0Irq+0x62>
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1c4      	bne.n	8005396 <SX1276OnDio0Irq+0x4e>
 800540c:	e7cd      	b.n	80053aa <SX1276OnDio0Irq+0x62>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800540e:	2308      	movs	r3, #8
    SX1276WriteBuffer( addr, &data, 1 );
 8005410:	f10d 0107 	add.w	r1, sp, #7
 8005414:	2012      	movs	r0, #18
 8005416:	f88d 3007 	strb.w	r3, [sp, #7]
 800541a:	f7ff fb31 	bl	8004a80 <SX1276WriteBuffer>
 800541e:	e7b2      	b.n	8005386 <SX1276OnDio0Irq+0x3e>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8005420:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	f040 80bf 	bne.w	80055a8 <SX1276OnDio0Irq+0x260>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800542a:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
 800542e:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8005432:	ea52 0103 	orrs.w	r1, r2, r3
 8005436:	d10c      	bne.n	8005452 <SX1276OnDio0Irq+0x10a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8005438:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
 800543c:	2800      	cmp	r0, #0
 800543e:	f040 80ea 	bne.w	8005616 <SX1276OnDio0Irq+0x2ce>
    SX1276ReadBuffer( 0, buffer, size );
 8005442:	2201      	movs	r2, #1
 8005444:	4987      	ldr	r1, [pc, #540]	; (8005664 <SX1276OnDio0Irq+0x31c>)
 8005446:	f7ff fb39 	bl	8004abc <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800544a:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
 800544e:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005452:	4985      	ldr	r1, [pc, #532]	; (8005668 <SX1276OnDio0Irq+0x320>)
 8005454:	1ad2      	subs	r2, r2, r3
    SX1276ReadBuffer( 0, buffer, size );
 8005456:	4419      	add	r1, r3
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	2000      	movs	r0, #0
 800545c:	f7ff fb2e 	bl	8004abc <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005460:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
 8005464:	487e      	ldr	r0, [pc, #504]	; (8005660 <SX1276OnDio0Irq+0x318>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005466:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 800546a:	f7ff fdbd 	bl	8004fe8 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800546e:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 8085 	beq.w	8005582 <SX1276OnDio0Irq+0x23a>
    SX1276ReadBuffer( addr, &data, 1 );
 8005478:	2201      	movs	r2, #1
 800547a:	f10d 0107 	add.w	r1, sp, #7
 800547e:	200d      	movs	r0, #13
 8005480:	f7ff fb1c 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005484:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8005488:	2201      	movs	r2, #1
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800548a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 800548e:	f10d 0107 	add.w	r1, sp, #7
 8005492:	200d      	movs	r0, #13
 8005494:	f88d 3007 	strb.w	r3, [sp, #7]
 8005498:	f7ff faf2 	bl	8004a80 <SX1276WriteBuffer>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800549c:	4b6f      	ldr	r3, [pc, #444]	; (800565c <SX1276OnDio0Irq+0x314>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	b143      	cbz	r3, 80054b4 <SX1276OnDio0Irq+0x16c>
 80054a2:	689d      	ldr	r5, [r3, #8]
 80054a4:	b135      	cbz	r5, 80054b4 <SX1276OnDio0Irq+0x16c>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80054a6:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
 80054aa:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 80054ae:	486e      	ldr	r0, [pc, #440]	; (8005668 <SX1276OnDio0Irq+0x320>)
 80054b0:	2300      	movs	r3, #0
 80054b2:	47a8      	blx	r5
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80054b4:	2300      	movs	r3, #0
 80054b6:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80054ba:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80054be:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
}
 80054c2:	b002      	add	sp, #8
 80054c4:	bd70      	pop	{r4, r5, r6, pc}
    SX1276ReadBuffer( addr, &data, 1 );
 80054c6:	4632      	mov	r2, r6
 80054c8:	f10d 0107 	add.w	r1, sp, #7
 80054cc:	2019      	movs	r0, #25
 80054ce:	f7ff faf5 	bl	8004abc <SX1276ReadBuffer>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80054d2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80054d6:	3302      	adds	r3, #2
 80054d8:	109b      	asrs	r3, r3, #2
    SX1276ReadBuffer( addr, &data, 1 );
 80054da:	4632      	mov	r2, r6
 80054dc:	f10d 0107 	add.w	r1, sp, #7
 80054e0:	201a      	movs	r0, #26
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80054e2:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    SX1276ReadBuffer( addr, &data, 1 );
 80054e6:	f7ff fae9 	bl	8004abc <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80054ea:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
    return data;
 80054ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80054f2:	2a00      	cmp	r2, #0
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80054f4:	ea4f 1113 	mov.w	r1, r3, lsr #4
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80054f8:	db49      	blt.n	800558e <SX1276OnDio0Irq+0x246>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80054fa:	4a5c      	ldr	r2, [pc, #368]	; (800566c <SX1276OnDio0Irq+0x324>)
 80054fc:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8005500:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8005502:	4290      	cmp	r0, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8005504:	bf8c      	ite	hi
 8005506:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8005508:	3ba4      	subls	r3, #164	; 0xa4
 800550a:	440b      	add	r3, r1
 800550c:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
    SX1276ReadBuffer( addr, &data, 1 );
 8005510:	2201      	movs	r2, #1
 8005512:	f10d 0107 	add.w	r1, sp, #7
 8005516:	2013      	movs	r0, #19
 8005518:	f7ff fad0 	bl	8004abc <SX1276ReadBuffer>
    return data;
 800551c:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8005520:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
    SX1276ReadBuffer( addr, &data, 1 );
 8005524:	2201      	movs	r2, #1
 8005526:	f10d 0107 	add.w	r1, sp, #7
 800552a:	2010      	movs	r0, #16
 800552c:	f7ff fac6 	bl	8004abc <SX1276ReadBuffer>
    SX1276WriteBuffer( addr, &data, 1 );
 8005530:	2201      	movs	r2, #1
 8005532:	f10d 0107 	add.w	r1, sp, #7
 8005536:	200d      	movs	r0, #13
 8005538:	f7ff faa2 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( 0, buffer, size );
 800553c:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
 8005540:	4949      	ldr	r1, [pc, #292]	; (8005668 <SX1276OnDio0Irq+0x320>)
 8005542:	2000      	movs	r0, #0
 8005544:	f7ff faba 	bl	8004abc <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8005548:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 800554c:	b90b      	cbnz	r3, 8005552 <SX1276OnDio0Irq+0x20a>
                        SX1276.Settings.State = RF_IDLE;
 800554e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 8005552:	4843      	ldr	r0, [pc, #268]	; (8005660 <SX1276OnDio0Irq+0x318>)
 8005554:	f7ff fd48 	bl	8004fe8 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8005558:	4b40      	ldr	r3, [pc, #256]	; (800565c <SX1276OnDio0Irq+0x314>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f43f af24 	beq.w	80053aa <SX1276OnDio0Irq+0x62>
 8005562:	689d      	ldr	r5, [r3, #8]
 8005564:	2d00      	cmp	r5, #0
 8005566:	f43f af20 	beq.w	80053aa <SX1276OnDio0Irq+0x62>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800556a:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
 800556e:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
 8005572:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8005576:	483c      	ldr	r0, [pc, #240]	; (8005668 <SX1276OnDio0Irq+0x320>)
 8005578:	46ac      	mov	ip, r5
}
 800557a:	b002      	add	sp, #8
 800557c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8005580:	4760      	bx	ip
                    TimerStop( &RxTimeoutSyncWord );
 8005582:	483b      	ldr	r0, [pc, #236]	; (8005670 <SX1276OnDio0Irq+0x328>)
                    SX1276.Settings.State = RF_IDLE;
 8005584:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 8005588:	f7ff fd2e 	bl	8004fe8 <TimerStop>
 800558c:	e786      	b.n	800549c <SX1276OnDio0Irq+0x154>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800558e:	441a      	add	r2, r3
 8005590:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8005594:	4b35      	ldr	r3, [pc, #212]	; (800566c <SX1276OnDio0Irq+0x324>)
 8005596:	b292      	uxth	r2, r2
 8005598:	4298      	cmp	r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800559a:	bf8c      	ite	hi
 800559c:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800559e:	3aa4      	subls	r2, #164	; 0xa4
 80055a0:	188b      	adds	r3, r1, r2
 80055a2:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
 80055a6:	e7b3      	b.n	8005510 <SX1276OnDio0Irq+0x1c8>
    SX1276ReadBuffer( addr, &data, 1 );
 80055a8:	462a      	mov	r2, r5
 80055aa:	f10d 0107 	add.w	r1, sp, #7
 80055ae:	203f      	movs	r0, #63	; 0x3f
 80055b0:	f7ff fa84 	bl	8004abc <SX1276ReadBuffer>
    return data;
 80055b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80055b8:	f88d 3006 	strb.w	r3, [sp, #6]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80055bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80055c0:	079a      	lsls	r2, r3, #30
 80055c2:	f53f af32 	bmi.w	800542a <SX1276OnDio0Irq+0xe2>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80055c6:	230b      	movs	r3, #11
    SX1276WriteBuffer( addr, &data, 1 );
 80055c8:	462a      	mov	r2, r5
 80055ca:	f10d 0107 	add.w	r1, sp, #7
 80055ce:	203e      	movs	r0, #62	; 0x3e
 80055d0:	f88d 3007 	strb.w	r3, [sp, #7]
 80055d4:	f7ff fa54 	bl	8004a80 <SX1276WriteBuffer>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80055d8:	2310      	movs	r3, #16
    SX1276WriteBuffer( addr, &data, 1 );
 80055da:	462a      	mov	r2, r5
 80055dc:	f10d 0107 	add.w	r1, sp, #7
 80055e0:	203f      	movs	r0, #63	; 0x3f
 80055e2:	f88d 3007 	strb.w	r3, [sp, #7]
 80055e6:	f7ff fa4b 	bl	8004a80 <SX1276WriteBuffer>
                        TimerStop( &RxTimeoutTimer );
 80055ea:	481d      	ldr	r0, [pc, #116]	; (8005660 <SX1276OnDio0Irq+0x318>)
 80055ec:	f7ff fcfc 	bl	8004fe8 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80055f0:	f894 6102 	ldrb.w	r6, [r4, #258]	; 0x102
 80055f4:	b9d6      	cbnz	r6, 800562c <SX1276OnDio0Irq+0x2e4>
                            TimerStop( &RxTimeoutSyncWord );
 80055f6:	481e      	ldr	r0, [pc, #120]	; (8005670 <SX1276OnDio0Irq+0x328>)
 80055f8:	f7ff fcf6 	bl	8004fe8 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80055fc:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8005600:	4b16      	ldr	r3, [pc, #88]	; (800565c <SX1276OnDio0Irq+0x314>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f43f af55 	beq.w	80054b4 <SX1276OnDio0Irq+0x16c>
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	f43f af51 	beq.w	80054b4 <SX1276OnDio0Irq+0x16c>
                            RadioEvents->RxError( );
 8005612:	4798      	blx	r3
 8005614:	e74e      	b.n	80054b4 <SX1276OnDio0Irq+0x16c>
    SX1276ReadBuffer( addr, &data, 1 );
 8005616:	2201      	movs	r2, #1
 8005618:	f10d 0107 	add.w	r1, sp, #7
 800561c:	2032      	movs	r0, #50	; 0x32
 800561e:	f7ff fa4d 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005622:	f89d 2007 	ldrb.w	r2, [sp, #7]
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8005626:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
 800562a:	e710      	b.n	800544e <SX1276OnDio0Irq+0x106>
    SX1276ReadBuffer( addr, &data, 1 );
 800562c:	462a      	mov	r2, r5
 800562e:	f10d 0107 	add.w	r1, sp, #7
 8005632:	200d      	movs	r0, #13
 8005634:	f7ff fa42 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005638:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800563c:	462a      	mov	r2, r5
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800563e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8005642:	f10d 0107 	add.w	r1, sp, #7
 8005646:	200d      	movs	r0, #13
 8005648:	f88d 3007 	strb.w	r3, [sp, #7]
 800564c:	f7ff fa18 	bl	8004a80 <SX1276WriteBuffer>
 8005650:	e7d6      	b.n	8005600 <SX1276OnDio0Irq+0x2b8>
 8005652:	bf00      	nop
 8005654:	20000c74 	.word	0x20000c74
 8005658:	20000db8 	.word	0x20000db8
 800565c:	20000b40 	.word	0x20000b40
 8005660:	20000b5c 	.word	0x20000b5c
 8005664:	20000d8a 	.word	0x20000d8a
 8005668:	20000b74 	.word	0x20000b74
 800566c:	1f4add40 	.word	0x1f4add40
 8005670:	20000b44 	.word	0x20000b44

08005674 <SX1276SetOpMode>:
{
 8005674:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 8005676:	4604      	mov	r4, r0
{
 8005678:	b082      	sub	sp, #8
    if( opMode == RF_OPMODE_SLEEP )
 800567a:	b9c0      	cbnz	r0, 80056ae <SX1276SetOpMode+0x3a>
        SX1276SetAntSwLowPower( true );
 800567c:	2001      	movs	r0, #1
 800567e:	f7ff faad 	bl	8004bdc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8005682:	2201      	movs	r2, #1
 8005684:	4610      	mov	r0, r2
 8005686:	f10d 0107 	add.w	r1, sp, #7
 800568a:	f7ff fa17 	bl	8004abc <SX1276ReadBuffer>
    return data;
 800568e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8005692:	2201      	movs	r2, #1
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8005694:	f021 0107 	bic.w	r1, r1, #7
 8005698:	ea41 0304 	orr.w	r3, r1, r4
    SX1276WriteBuffer( addr, &data, 1 );
 800569c:	4610      	mov	r0, r2
 800569e:	f10d 0107 	add.w	r1, sp, #7
 80056a2:	f88d 3007 	strb.w	r3, [sp, #7]
 80056a6:	f7ff f9eb 	bl	8004a80 <SX1276WriteBuffer>
}
 80056aa:	b002      	add	sp, #8
 80056ac:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 80056ae:	2001      	movs	r0, #1
 80056b0:	f7ff fa96 	bl	8004be0 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 80056b4:	2000      	movs	r0, #0
 80056b6:	f7ff fa91 	bl	8004bdc <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 80056ba:	4620      	mov	r0, r4
 80056bc:	f7ff fa92 	bl	8004be4 <SX1276SetAntSw>
 80056c0:	e7df      	b.n	8005682 <SX1276SetOpMode+0xe>
 80056c2:	bf00      	nop

080056c4 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <SX1276OnDio4Irq+0x18>)
 80056c6:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 80056ca:	b92a      	cbnz	r2, 80056d8 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 80056cc:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80056d0:	b912      	cbnz	r2, 80056d8 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	20000c74 	.word	0x20000c74

080056e0 <SX1276OnDio3Irq>:
{
 80056e0:	b530      	push	{r4, r5, lr}
    switch( SX1276.Settings.Modem )
 80056e2:	4b1d      	ldr	r3, [pc, #116]	; (8005758 <SX1276OnDio3Irq+0x78>)
 80056e4:	f893 40e1 	ldrb.w	r4, [r3, #225]	; 0xe1
 80056e8:	2c01      	cmp	r4, #1
{
 80056ea:	b083      	sub	sp, #12
    switch( SX1276.Settings.Modem )
 80056ec:	d001      	beq.n	80056f2 <SX1276OnDio3Irq+0x12>
}
 80056ee:	b003      	add	sp, #12
 80056f0:	bd30      	pop	{r4, r5, pc}
    SX1276ReadBuffer( addr, &data, 1 );
 80056f2:	2012      	movs	r0, #18
 80056f4:	4622      	mov	r2, r4
 80056f6:	f10d 0107 	add.w	r1, sp, #7
 80056fa:	f7ff f9df 	bl	8004abc <SX1276ReadBuffer>
    return data;
 80056fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8005702:	f010 0501 	ands.w	r5, r0, #1
 8005706:	d014      	beq.n	8005732 <SX1276OnDio3Irq+0x52>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8005708:	2305      	movs	r3, #5
    SX1276WriteBuffer( addr, &data, 1 );
 800570a:	4622      	mov	r2, r4
 800570c:	f10d 0107 	add.w	r1, sp, #7
 8005710:	2012      	movs	r0, #18
 8005712:	f88d 3007 	strb.w	r3, [sp, #7]
 8005716:	f7ff f9b3 	bl	8004a80 <SX1276WriteBuffer>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800571a:	4b10      	ldr	r3, [pc, #64]	; (800575c <SX1276OnDio3Irq+0x7c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0e5      	beq.n	80056ee <SX1276OnDio3Irq+0xe>
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0e2      	beq.n	80056ee <SX1276OnDio3Irq+0xe>
                RadioEvents->CadDone( true );
 8005728:	4620      	mov	r0, r4
}
 800572a:	b003      	add	sp, #12
 800572c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                RadioEvents->CadDone( false );
 8005730:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8005732:	2304      	movs	r3, #4
    SX1276WriteBuffer( addr, &data, 1 );
 8005734:	4622      	mov	r2, r4
 8005736:	f10d 0107 	add.w	r1, sp, #7
 800573a:	2012      	movs	r0, #18
 800573c:	f88d 3007 	strb.w	r3, [sp, #7]
 8005740:	f7ff f99e 	bl	8004a80 <SX1276WriteBuffer>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <SX1276OnDio3Irq+0x7c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0d0      	beq.n	80056ee <SX1276OnDio3Irq+0xe>
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0cd      	beq.n	80056ee <SX1276OnDio3Irq+0xe>
                RadioEvents->CadDone( false );
 8005752:	4628      	mov	r0, r5
 8005754:	e7e9      	b.n	800572a <SX1276OnDio3Irq+0x4a>
 8005756:	bf00      	nop
 8005758:	20000c74 	.word	0x20000c74
 800575c:	20000b40 	.word	0x20000b40

08005760 <SX1276GetStatus>:
    return SX1276.Settings.State;
 8005760:	4b01      	ldr	r3, [pc, #4]	; (8005768 <SX1276GetStatus+0x8>)
}
 8005762:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 8005766:	4770      	bx	lr
 8005768:	20000c74 	.word	0x20000c74

0800576c <SX1276SetChannel>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800576c:	4918      	ldr	r1, [pc, #96]	; (80057d0 <SX1276SetChannel+0x64>)
{
 800576e:	b510      	push	{r4, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8005770:	fba1 2300 	umull	r2, r3, r1, r0
 8005774:	0b1b      	lsrs	r3, r3, #12
 8005776:	f643 5409 	movw	r4, #15625	; 0x3d09
 800577a:	fb04 0213 	mls	r2, r4, r3, r0
 800577e:	f641 6484 	movw	r4, #7812	; 0x1e84
 8005782:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8005786:	fba1 2404 	umull	r2, r4, r1, r4
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800578a:	021b      	lsls	r3, r3, #8
{
 800578c:	b082      	sub	sp, #8
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800578e:	eb03 3414 	add.w	r4, r3, r4, lsr #12
    SX1276.Settings.Channel = freq;
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <SX1276SetChannel+0x68>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8005794:	0c21      	lsrs	r1, r4, #16
 8005796:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276.Settings.Channel = freq;
 800579a:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    SX1276WriteBuffer( addr, &data, 1 );
 800579e:	f10d 0107 	add.w	r1, sp, #7
 80057a2:	2201      	movs	r2, #1
 80057a4:	2006      	movs	r0, #6
 80057a6:	f7ff f96b 	bl	8004a80 <SX1276WriteBuffer>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 80057aa:	0a23      	lsrs	r3, r4, #8
    SX1276WriteBuffer( addr, &data, 1 );
 80057ac:	f10d 0107 	add.w	r1, sp, #7
 80057b0:	2201      	movs	r2, #1
 80057b2:	2007      	movs	r0, #7
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 80057b4:	f88d 3007 	strb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80057b8:	f7ff f962 	bl	8004a80 <SX1276WriteBuffer>
 80057bc:	2201      	movs	r2, #1
 80057be:	f10d 0107 	add.w	r1, sp, #7
 80057c2:	2008      	movs	r0, #8
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 80057c4:	f88d 4007 	strb.w	r4, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80057c8:	f7ff f95a 	bl	8004a80 <SX1276WriteBuffer>
}
 80057cc:	b002      	add	sp, #8
 80057ce:	bd10      	pop	{r4, pc}
 80057d0:	431bde83 	.word	0x431bde83
 80057d4:	20000c74 	.word	0x20000c74

080057d8 <RxChainCalibration>:
{
 80057d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057da:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 80057dc:	2201      	movs	r2, #1
 80057de:	f10d 0107 	add.w	r1, sp, #7
 80057e2:	2009      	movs	r0, #9
 80057e4:	f7ff f96a 	bl	8004abc <SX1276ReadBuffer>
 80057e8:	2201      	movs	r2, #1
 80057ea:	f10d 0107 	add.w	r1, sp, #7
 80057ee:	2006      	movs	r0, #6
    return data;
 80057f0:	f89d 6007 	ldrb.w	r6, [sp, #7]
    SX1276ReadBuffer( addr, &data, 1 );
 80057f4:	f7ff f962 	bl	8004abc <SX1276ReadBuffer>
 80057f8:	2201      	movs	r2, #1
 80057fa:	f10d 0107 	add.w	r1, sp, #7
 80057fe:	2007      	movs	r0, #7
    return data;
 8005800:	f89d 5007 	ldrb.w	r5, [sp, #7]
    SX1276ReadBuffer( addr, &data, 1 );
 8005804:	f7ff f95a 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005808:	f89d 4007 	ldrb.w	r4, [sp, #7]
    SX1276ReadBuffer( addr, &data, 1 );
 800580c:	2201      	movs	r2, #1
 800580e:	f10d 0107 	add.w	r1, sp, #7
 8005812:	2008      	movs	r0, #8
 8005814:	f7ff f952 	bl	8004abc <SX1276ReadBuffer>
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8005818:	0224      	lsls	r4, r4, #8
    return data;
 800581a:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800581e:	f643 5209 	movw	r2, #15625	; 0x3d09
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005822:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8005826:	fb02 f303 	mul.w	r3, r2, r3
 800582a:	2100      	movs	r1, #0
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800582c:	0a2d      	lsrs	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800582e:	3380      	adds	r3, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8005830:	fb02 f505 	mul.w	r5, r2, r5
 8005834:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8005838:	2201      	movs	r2, #1
 800583a:	f10d 0107 	add.w	r1, sp, #7
 800583e:	2009      	movs	r0, #9
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8005840:	eb05 2513 	add.w	r5, r5, r3, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 8005844:	f7ff f91c 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8005848:	2201      	movs	r2, #1
 800584a:	f10d 0107 	add.w	r1, sp, #7
 800584e:	203b      	movs	r0, #59	; 0x3b
 8005850:	f7ff f934 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005854:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8005858:	2201      	movs	r2, #1
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800585a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 800585e:	f10d 0107 	add.w	r1, sp, #7
 8005862:	203b      	movs	r0, #59	; 0x3b
 8005864:	f88d 3007 	strb.w	r3, [sp, #7]
 8005868:	f7ff f90a 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 800586c:	2201      	movs	r2, #1
 800586e:	f10d 0107 	add.w	r1, sp, #7
 8005872:	203b      	movs	r0, #59	; 0x3b
 8005874:	f7ff f922 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005878:	f89d 3007 	ldrb.w	r3, [sp, #7]
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800587c:	f013 0420 	ands.w	r4, r3, #32
 8005880:	d1f4      	bne.n	800586c <RxChainCalibration+0x94>
    SX1276.Settings.Channel = freq;
 8005882:	4b23      	ldr	r3, [pc, #140]	; (8005910 <RxChainCalibration+0x138>)
 8005884:	4f23      	ldr	r7, [pc, #140]	; (8005914 <RxChainCalibration+0x13c>)
 8005886:	f8c3 70e4 	str.w	r7, [r3, #228]	; 0xe4
    SX1276WriteBuffer( addr, &data, 1 );
 800588a:	2201      	movs	r2, #1
 800588c:	23d9      	movs	r3, #217	; 0xd9
 800588e:	f10d 0107 	add.w	r1, sp, #7
 8005892:	2006      	movs	r0, #6
 8005894:	f88d 3007 	strb.w	r3, [sp, #7]
 8005898:	f7ff f8f2 	bl	8004a80 <SX1276WriteBuffer>
 800589c:	2201      	movs	r2, #1
 800589e:	f10d 0107 	add.w	r1, sp, #7
 80058a2:	2007      	movs	r0, #7
 80058a4:	f88d 4007 	strb.w	r4, [sp, #7]
 80058a8:	f7ff f8ea 	bl	8004a80 <SX1276WriteBuffer>
 80058ac:	2201      	movs	r2, #1
 80058ae:	f10d 0107 	add.w	r1, sp, #7
 80058b2:	2008      	movs	r0, #8
 80058b4:	f88d 4007 	strb.w	r4, [sp, #7]
 80058b8:	f7ff f8e2 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80058bc:	2201      	movs	r2, #1
 80058be:	f10d 0107 	add.w	r1, sp, #7
 80058c2:	203b      	movs	r0, #59	; 0x3b
 80058c4:	f7ff f8fa 	bl	8004abc <SX1276ReadBuffer>
    return data;
 80058c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80058cc:	2201      	movs	r2, #1
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80058ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 80058d2:	f10d 0107 	add.w	r1, sp, #7
 80058d6:	203b      	movs	r0, #59	; 0x3b
 80058d8:	f88d 3007 	strb.w	r3, [sp, #7]
 80058dc:	f7ff f8d0 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80058e0:	2201      	movs	r2, #1
 80058e2:	f10d 0107 	add.w	r1, sp, #7
 80058e6:	203b      	movs	r0, #59	; 0x3b
 80058e8:	f7ff f8e8 	bl	8004abc <SX1276ReadBuffer>
    return data;
 80058ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80058f0:	069b      	lsls	r3, r3, #26
 80058f2:	d4f5      	bmi.n	80058e0 <RxChainCalibration+0x108>
    SX1276WriteBuffer( addr, &data, 1 );
 80058f4:	2201      	movs	r2, #1
 80058f6:	f10d 0107 	add.w	r1, sp, #7
 80058fa:	2009      	movs	r0, #9
 80058fc:	f88d 6007 	strb.w	r6, [sp, #7]
 8005900:	f7ff f8be 	bl	8004a80 <SX1276WriteBuffer>
    SX1276SetChannel( initialFreq );
 8005904:	4628      	mov	r0, r5
}
 8005906:	b003      	add	sp, #12
 8005908:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    SX1276SetChannel( initialFreq );
 800590c:	f7ff bf2e 	b.w	800576c <SX1276SetChannel>
 8005910:	20000c74 	.word	0x20000c74
 8005914:	33bca100 	.word	0x33bca100

08005918 <SX1276GetTimeOnAir>:
{
 8005918:	b570      	push	{r4, r5, r6, lr}
 800591a:	f8bd c010 	ldrh.w	ip, [sp, #16]
 800591e:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8005922:	f89d e018 	ldrb.w	lr, [sp, #24]
 8005926:	f89d 501c 	ldrb.w	r5, [sp, #28]
    switch( modem )
 800592a:	2800      	cmp	r0, #0
 800592c:	d041      	beq.n	80059b2 <SX1276GetTimeOnAir+0x9a>
 800592e:	2801      	cmp	r0, #1
 8005930:	d13d      	bne.n	80059ae <SX1276GetTimeOnAir+0x96>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005932:	1f50      	subs	r0, r2, #5
 8005934:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
 8005936:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800593a:	d956      	bls.n	80059ea <SX1276GetTimeOnAir+0xd2>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800593c:	2900      	cmp	r1, #0
 800593e:	d04d      	beq.n	80059dc <SX1276GetTimeOnAir+0xc4>
 8005940:	2901      	cmp	r1, #1
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005942:	bf03      	ittte	eq
 8005944:	f1a2 060c 	subeq.w	r6, r2, #12
 8005948:	fab6 f686 	clzeq	r6, r6
 800594c:	0976      	lsreq	r6, r6, #5
    bool    lowDatareOptimize = false;
 800594e:	2600      	movne	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005950:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8005954:	b10d      	cbz	r5, 800595a <SX1276GetTimeOnAir+0x42>
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005956:	f10e 0e10 	add.w	lr, lr, #16
                            ( crcOn ? 16 : 0 ) -
 800595a:	ebae 0e82 	sub.w	lr, lr, r2, lsl #2
                            ( 4 * datarate ) +
 800595e:	0090      	lsls	r0, r2, #2
                            ( fixLen ? 0 : 20 );
 8005960:	b90c      	cbnz	r4, 8005966 <SX1276GetTimeOnAir+0x4e>
                            ( 4 * datarate ) +
 8005962:	f10e 0e14 	add.w	lr, lr, #20
    if( datarate <= 6 )
 8005966:	2a06      	cmp	r2, #6
            ceilDenominator = 4 * ( datarate - 2 );
 8005968:	f1a2 0402 	sub.w	r4, r2, #2
    if( datarate <= 6 )
 800596c:	d845      	bhi.n	80059fa <SX1276GetTimeOnAir+0xe2>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800596e:	f1be 0f00 	cmp.w	lr, #0
 8005972:	bfac      	ite	ge
 8005974:	eb00 020e 	addge.w	r2, r0, lr
 8005978:	1c02      	addlt	r2, r0, #0
 800597a:	3a01      	subs	r2, #1
 800597c:	fb92 f2f0 	sdiv	r2, r2, r0
 8005980:	fb03 cc02 	mla	ip, r3, r2, ip
        intermediate += 2;
 8005984:	f10c 0c0e 	add.w	ip, ip, #14
    switch( bw )
 8005988:	2902      	cmp	r1, #2
 800598a:	d84a      	bhi.n	8005a22 <SX1276GetTimeOnAir+0x10a>
 800598c:	4b25      	ldr	r3, [pc, #148]	; (8005a24 <SX1276GetTimeOnAir+0x10c>)
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800598e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005992:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8005996:	f10c 0001 	add.w	r0, ip, #1
 800599a:	fa00 fc04 	lsl.w	ip, r0, r4
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800599e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    return ( numerator + denominator - 1 ) / denominator;
 80059a2:	1e50      	subs	r0, r2, #1
 80059a4:	fb03 000c 	mla	r0, r3, ip, r0
 80059a8:	fbb0 f0f2 	udiv	r0, r0, r2
}
 80059ac:	bd70      	pop	{r4, r5, r6, pc}
    switch( modem )
 80059ae:	2000      	movs	r0, #0
}
 80059b0:	bd70      	pop	{r4, r5, r6, pc}
    return ( preambleLen << 3 ) +
 80059b2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 80059b6:	b90c      	cbnz	r4, 80059bc <SX1276GetTimeOnAir+0xa4>
    return ( preambleLen << 3 ) +
 80059b8:	f10c 0c08 	add.w	ip, ip, #8
           ( ( fixLen == false ) ? 8 : 0 ) +
 80059bc:	f10c 0c18 	add.w	ip, ip, #24
               ( ( crcOn == true ) ? 2 : 0 ) 
 80059c0:	b10d      	cbz	r5, 80059c6 <SX1276GetTimeOnAir+0xae>
               ( 0 ) + // Address filter size
 80059c2:	f10e 0e02 	add.w	lr, lr, #2
             ( syncWordLength << 3 ) +
 80059c6:	eb0c 0ece 	add.w	lr, ip, lr, lsl #3
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 80059ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    return ( numerator + denominator - 1 ) / denominator;
 80059ce:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80059d2:	fb00 cc0e 	mla	ip, r0, lr, ip
 80059d6:	fbbc f0f2 	udiv	r0, ip, r2
}
 80059da:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80059dc:	f1a2 060b 	sub.w	r6, r2, #11
 80059e0:	2e01      	cmp	r6, #1
 80059e2:	bf8c      	ite	hi
 80059e4:	2600      	movhi	r6, #0
 80059e6:	2601      	movls	r6, #1
 80059e8:	e7b2      	b.n	8005950 <SX1276GetTimeOnAir+0x38>
        if( preambleLen < 12 )
 80059ea:	f1bc 0f0c 	cmp.w	ip, #12
 80059ee:	bf38      	it	cc
 80059f0:	f04f 0c0c 	movcc.w	ip, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80059f4:	2900      	cmp	r1, #0
 80059f6:	d1a3      	bne.n	8005940 <SX1276GetTimeOnAir+0x28>
 80059f8:	e7f0      	b.n	80059dc <SX1276GetTimeOnAir+0xc4>
        ceilNumerator += 8;
 80059fa:	f10e 0e08 	add.w	lr, lr, #8
        if( lowDatareOptimize == true )
 80059fe:	b176      	cbz	r6, 8005a1e <SX1276GetTimeOnAir+0x106>
            ceilDenominator = 4 * ( datarate - 2 );
 8005a00:	00a2      	lsls	r2, r4, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005a02:	f1be 0f00 	cmp.w	lr, #0
 8005a06:	bfac      	ite	ge
 8005a08:	eb02 000e 	addge.w	r0, r2, lr
 8005a0c:	1c10      	addlt	r0, r2, #0
 8005a0e:	3801      	subs	r0, #1
 8005a10:	fb90 f2f2 	sdiv	r2, r0, r2
 8005a14:	fb03 cc02 	mla	ip, r3, r2, ip
    int32_t intermediate =
 8005a18:	f10c 0c0c 	add.w	ip, ip, #12
    if( datarate <= 6 )
 8005a1c:	e7b4      	b.n	8005988 <SX1276GetTimeOnAir+0x70>
            ceilDenominator = 4 * datarate;
 8005a1e:	4602      	mov	r2, r0
 8005a20:	e7ef      	b.n	8005a02 <SX1276GetTimeOnAir+0xea>
    return ( numerator + denominator - 1 ) / denominator;
 8005a22:	deff      	udf	#255	; 0xff
 8005a24:	0800c2b4 	.word	0x0800c2b4

08005a28 <SX1276Send>:
{
 8005a28:	b5b0      	push	{r4, r5, r7, lr}
    switch( SX1276.Settings.Modem )
 8005a2a:	4c99      	ldr	r4, [pc, #612]	; (8005c90 <SX1276Send+0x268>)
{
 8005a2c:	b084      	sub	sp, #16
    switch( SX1276.Settings.Modem )
 8005a2e:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
{
 8005a32:	f88d 1007 	strb.w	r1, [sp, #7]
 8005a36:	4607      	mov	r7, r0
    switch( SX1276.Settings.Modem )
 8005a38:	2d00      	cmp	r5, #0
 8005a3a:	f000 80bb 	beq.w	8005bb4 <SX1276Send+0x18c>
 8005a3e:	2d01      	cmp	r5, #1
 8005a40:	d14d      	bne.n	8005ade <SX1276Send+0xb6>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8005a42:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
    SX1276ReadBuffer( addr, &data, 1 );
 8005a46:	f10d 010f 	add.w	r1, sp, #15
 8005a4a:	462a      	mov	r2, r5
 8005a4c:	9100      	str	r1, [sp, #0]
 8005a4e:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80e4 	beq.w	8005c1e <SX1276Send+0x1f6>
    SX1276ReadBuffer( addr, &data, 1 );
 8005a56:	f7ff f831 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005a5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 8005a5e:	9900      	ldr	r1, [sp, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8005a60:	f023 0341 	bic.w	r3, r3, #65	; 0x41
    SX1276WriteBuffer( addr, &data, 1 );
 8005a64:	462a      	mov	r2, r5
 8005a66:	2033      	movs	r0, #51	; 0x33
 8005a68:	f88d 300f 	strb.w	r3, [sp, #15]
 8005a6c:	f7ff f808 	bl	8004a80 <SX1276WriteBuffer>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8005a70:	2319      	movs	r3, #25
    SX1276WriteBuffer( addr, &data, 1 );
 8005a72:	462a      	mov	r2, r5
 8005a74:	9900      	ldr	r1, [sp, #0]
 8005a76:	f88d 300f 	strb.w	r3, [sp, #15]
 8005a7a:	203b      	movs	r0, #59	; 0x3b
 8005a7c:	f7ff f800 	bl	8004a80 <SX1276WriteBuffer>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8005a80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8005a84:	9900      	ldr	r1, [sp, #0]
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8005a86:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
    SX1276WriteBuffer( addr, &data, 1 );
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	2022      	movs	r0, #34	; 0x22
 8005a8e:	f88d 300f 	strb.w	r3, [sp, #15]
 8005a92:	2500      	movs	r5, #0
 8005a94:	9100      	str	r1, [sp, #0]
 8005a96:	f7fe fff3 	bl	8004a80 <SX1276WriteBuffer>
 8005a9a:	9900      	ldr	r1, [sp, #0]
 8005a9c:	f88d 500f 	strb.w	r5, [sp, #15]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	200e      	movs	r0, #14
 8005aa4:	f7fe ffec 	bl	8004a80 <SX1276WriteBuffer>
 8005aa8:	9900      	ldr	r1, [sp, #0]
 8005aaa:	f88d 500f 	strb.w	r5, [sp, #15]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	200d      	movs	r0, #13
 8005ab2:	f7fe ffe5 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	9900      	ldr	r1, [sp, #0]
 8005aba:	4610      	mov	r0, r2
 8005abc:	f7fe fffe 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005ac0:	f89d 300f 	ldrb.w	r3, [sp, #15]
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8005ac4:	f033 05f8 	bics.w	r5, r3, #248	; 0xf8
 8005ac8:	f000 80cf 	beq.w	8005c6a <SX1276Send+0x242>
    SX1276WriteBuffer( 0, buffer, size );
 8005acc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005ad0:	4639      	mov	r1, r7
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f7fe ffd4 	bl	8004a80 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8005ad8:	f8d4 5134 	ldr.w	r5, [r4, #308]	; 0x134
        break;
 8005adc:	e000      	b.n	8005ae0 <SX1276Send+0xb8>
    switch( SX1276.Settings.Modem )
 8005ade:	2500      	movs	r5, #0
    TimerStop( &RxTimeoutTimer );
 8005ae0:	486c      	ldr	r0, [pc, #432]	; (8005c94 <SX1276Send+0x26c>)
 8005ae2:	f7ff fa81 	bl	8004fe8 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	486b      	ldr	r0, [pc, #428]	; (8005c98 <SX1276Send+0x270>)
 8005aea:	f7ff fac5 	bl	8005078 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8005aee:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 8005af2:	b375      	cbz	r5, 8005b52 <SX1276Send+0x12a>
 8005af4:	2d01      	cmp	r5, #1
 8005af6:	d121      	bne.n	8005b3c <SX1276Send+0x114>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005af8:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 809f 	beq.w	8005c40 <SX1276Send+0x218>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8005b02:	23f5      	movs	r3, #245	; 0xf5
    SX1276WriteBuffer( addr, &data, 1 );
 8005b04:	462a      	mov	r2, r5
 8005b06:	f10d 010f 	add.w	r1, sp, #15
 8005b0a:	2011      	movs	r0, #17
 8005b0c:	f88d 300f 	strb.w	r3, [sp, #15]
 8005b10:	f7fe ffb6 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8005b14:	462a      	mov	r2, r5
 8005b16:	f10d 010f 	add.w	r1, sp, #15
 8005b1a:	2040      	movs	r0, #64	; 0x40
 8005b1c:	f7fe ffce 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005b20:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 8005b24:	462a      	mov	r2, r5
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8005b26:	f003 0333 	and.w	r3, r3, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8005b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8005b2e:	f10d 010f 	add.w	r1, sp, #15
 8005b32:	2040      	movs	r0, #64	; 0x40
 8005b34:	f88d 300f 	strb.w	r3, [sp, #15]
 8005b38:	f7fe ffa2 	bl	8004a80 <SX1276WriteBuffer>
    SX1276.Settings.State = RF_TX_RUNNING;
 8005b3c:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8005b3e:	4856      	ldr	r0, [pc, #344]	; (8005c98 <SX1276Send+0x270>)
    SX1276.Settings.State = RF_TX_RUNNING;
 8005b40:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8005b44:	f7ff f98e 	bl	8004e64 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8005b48:	2003      	movs	r0, #3
 8005b4a:	f7ff fd93 	bl	8005674 <SX1276SetOpMode>
}
 8005b4e:	b004      	add	sp, #16
 8005b50:	bdb0      	pop	{r4, r5, r7, pc}
    SX1276ReadBuffer( addr, &data, 1 );
 8005b52:	2201      	movs	r2, #1
 8005b54:	f10d 010f 	add.w	r1, sp, #15
 8005b58:	2040      	movs	r0, #64	; 0x40
 8005b5a:	f7fe ffaf 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005b5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 8005b62:	2201      	movs	r2, #1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005b64:	f003 0303 	and.w	r3, r3, #3
    SX1276WriteBuffer( addr, &data, 1 );
 8005b68:	f10d 010f 	add.w	r1, sp, #15
 8005b6c:	2040      	movs	r0, #64	; 0x40
 8005b6e:	f88d 300f 	strb.w	r3, [sp, #15]
 8005b72:	f7fe ff85 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8005b76:	2201      	movs	r2, #1
 8005b78:	f10d 010f 	add.w	r1, sp, #15
 8005b7c:	2041      	movs	r0, #65	; 0x41
 8005b7e:	f7fe ff9d 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005b82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 8005b86:	2201      	movs	r2, #1
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8005b88:	f003 033e 	and.w	r3, r3, #62	; 0x3e
    SX1276WriteBuffer( addr, &data, 1 );
 8005b8c:	f10d 010f 	add.w	r1, sp, #15
 8005b90:	2041      	movs	r0, #65	; 0x41
 8005b92:	f88d 300f 	strb.w	r3, [sp, #15]
 8005b96:	f7fe ff73 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f10d 010f 	add.w	r1, sp, #15
 8005ba0:	2035      	movs	r0, #53	; 0x35
 8005ba2:	f7fe ff8b 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005ba6:	f89d 300f 	ldrb.w	r3, [sp, #15]
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8005baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bae:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
        break;
 8005bb2:	e7c3      	b.n	8005b3c <SX1276Send+0x114>
            if( SX1276.Settings.Fsk.FixLen == false )
 8005bb4:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.Size = size;
 8005bb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8005bbc:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 8005bc0:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    SX1276WriteBuffer( 0, buffer, size );
 8005bc4:	2201      	movs	r2, #1
            if( SX1276.Settings.Fsk.FixLen == false )
 8005bc6:	b1d8      	cbz	r0, 8005c00 <SX1276Send+0x1d8>
    SX1276WriteBuffer( addr, &data, 1 );
 8005bc8:	f10d 010f 	add.w	r1, sp, #15
 8005bcc:	2032      	movs	r0, #50	; 0x32
 8005bce:	f88d 300f 	strb.w	r3, [sp, #15]
 8005bd2:	f7fe ff55 	bl	8004a80 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 8005bd6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005bda:	1e53      	subs	r3, r2, #1
 8005bdc:	2b3f      	cmp	r3, #63	; 0x3f
 8005bde:	d818      	bhi.n	8005c12 <SX1276Send+0x1ea>
    SX1276WriteBuffer( 0, buffer, size );
 8005be0:	4639      	mov	r1, r7
 8005be2:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8005be4:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
    SX1276WriteBuffer( 0, buffer, size );
 8005be8:	f7fe ff4a 	bl	8004a80 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8005bec:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8005bf0:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8005bf4:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
 8005bfe:	e76f      	b.n	8005ae0 <SX1276Send+0xb8>
    SX1276WriteBuffer( 0, buffer, size );
 8005c00:	f10d 0107 	add.w	r1, sp, #7
 8005c04:	f7fe ff3c 	bl	8004a80 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 8005c08:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005c0c:	1e53      	subs	r3, r2, #1
 8005c0e:	2b3f      	cmp	r3, #63	; 0x3f
 8005c10:	d9e6      	bls.n	8005be0 <SX1276Send+0x1b8>
                memcpy1( RxTxBuffer, buffer, size );
 8005c12:	4822      	ldr	r0, [pc, #136]	; (8005c9c <SX1276Send+0x274>)
 8005c14:	4639      	mov	r1, r7
 8005c16:	f7ff f913 	bl	8004e40 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	e7e0      	b.n	8005be0 <SX1276Send+0x1b8>
    SX1276ReadBuffer( addr, &data, 1 );
 8005c1e:	f7fe ff4d 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005c22:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 8005c26:	9900      	ldr	r1, [sp, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8005c28:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8005c2c:	f043 0301 	orr.w	r3, r3, #1
    SX1276WriteBuffer( addr, &data, 1 );
 8005c30:	462a      	mov	r2, r5
 8005c32:	2033      	movs	r0, #51	; 0x33
 8005c34:	f88d 300f 	strb.w	r3, [sp, #15]
 8005c38:	f7fe ff22 	bl	8004a80 <SX1276WriteBuffer>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8005c3c:	231d      	movs	r3, #29
 8005c3e:	e718      	b.n	8005a72 <SX1276Send+0x4a>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8005c40:	23f7      	movs	r3, #247	; 0xf7
    SX1276WriteBuffer( addr, &data, 1 );
 8005c42:	462a      	mov	r2, r5
 8005c44:	2011      	movs	r0, #17
 8005c46:	f10d 010f 	add.w	r1, sp, #15
 8005c4a:	f88d 300f 	strb.w	r3, [sp, #15]
 8005c4e:	f7fe ff17 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8005c52:	462a      	mov	r2, r5
 8005c54:	f10d 010f 	add.w	r1, sp, #15
 8005c58:	2040      	movs	r0, #64	; 0x40
 8005c5a:	f7fe ff2f 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005c5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 8005c62:	462a      	mov	r2, r5
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8005c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c68:	e75f      	b.n	8005b2a <SX1276Send+0x102>
    TimerStop( &RxTimeoutTimer );
 8005c6a:	480a      	ldr	r0, [pc, #40]	; (8005c94 <SX1276Send+0x26c>)
 8005c6c:	f7ff f9bc 	bl	8004fe8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8005c70:	4809      	ldr	r0, [pc, #36]	; (8005c98 <SX1276Send+0x270>)
 8005c72:	f7ff f9b9 	bl	8004fe8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8005c76:	480a      	ldr	r0, [pc, #40]	; (8005ca0 <SX1276Send+0x278>)
 8005c78:	f7ff f9b6 	bl	8004fe8 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f7ff fcf9 	bl	8005674 <SX1276SetOpMode>
                DelayMs( 1 );
 8005c82:	2001      	movs	r0, #1
    SX1276.Settings.State = RF_IDLE;
 8005c84:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
                DelayMs( 1 );
 8005c88:	f7ff fa20 	bl	80050cc <DelayMs>
 8005c8c:	e71e      	b.n	8005acc <SX1276Send+0xa4>
 8005c8e:	bf00      	nop
 8005c90:	20000c74 	.word	0x20000c74
 8005c94:	20000b5c 	.word	0x20000b5c
 8005c98:	20000db8 	.word	0x20000db8
 8005c9c:	20000b74 	.word	0x20000b74
 8005ca0:	20000b44 	.word	0x20000b44

08005ca4 <SX1276SetSleep>:
{
 8005ca4:	b500      	push	{lr}
    TimerStop( &RxTimeoutTimer );
 8005ca6:	4814      	ldr	r0, [pc, #80]	; (8005cf8 <SX1276SetSleep+0x54>)
{
 8005ca8:	b083      	sub	sp, #12
    TimerStop( &RxTimeoutTimer );
 8005caa:	f7ff f99d 	bl	8004fe8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8005cae:	4813      	ldr	r0, [pc, #76]	; (8005cfc <SX1276SetSleep+0x58>)
 8005cb0:	f7ff f99a 	bl	8004fe8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8005cb4:	4812      	ldr	r0, [pc, #72]	; (8005d00 <SX1276SetSleep+0x5c>)
 8005cb6:	f7ff f997 	bl	8004fe8 <TimerStop>
        SX1276SetAntSwLowPower( true );
 8005cba:	2001      	movs	r0, #1
 8005cbc:	f7fe ff8e 	bl	8004bdc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f10d 0107 	add.w	r1, sp, #7
 8005cc8:	f7fe fef8 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005ccc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	4610      	mov	r0, r2
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8005cd4:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8005cd8:	f10d 0107 	add.w	r1, sp, #7
 8005cdc:	f88d 3007 	strb.w	r3, [sp, #7]
 8005ce0:	f7fe fece 	bl	8004a80 <SX1276WriteBuffer>
    SX1276SetBoardTcxo( false );
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	f7fe ff7b 	bl	8004be0 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <SX1276SetSleep+0x60>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8005cf2:	b003      	add	sp, #12
 8005cf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cf8:	20000b5c 	.word	0x20000b5c
 8005cfc:	20000db8 	.word	0x20000db8
 8005d00:	20000b44 	.word	0x20000b44
 8005d04:	20000c74 	.word	0x20000c74

08005d08 <SX1276SetStby>:
{
 8005d08:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8005d0a:	4808      	ldr	r0, [pc, #32]	; (8005d2c <SX1276SetStby+0x24>)
 8005d0c:	f7ff f96c 	bl	8004fe8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8005d10:	4807      	ldr	r0, [pc, #28]	; (8005d30 <SX1276SetStby+0x28>)
 8005d12:	f7ff f969 	bl	8004fe8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8005d16:	4807      	ldr	r0, [pc, #28]	; (8005d34 <SX1276SetStby+0x2c>)
 8005d18:	f7ff f966 	bl	8004fe8 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	f7ff fca9 	bl	8005674 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8005d22:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <SX1276SetStby+0x30>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8005d2a:	bd08      	pop	{r3, pc}
 8005d2c:	20000b5c 	.word	0x20000b5c
 8005d30:	20000db8 	.word	0x20000db8
 8005d34:	20000b44 	.word	0x20000b44
 8005d38:	20000c74 	.word	0x20000c74

08005d3c <SX1276SetRx>:
{
 8005d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch( SX1276.Settings.Modem )
 8005d40:	4cd2      	ldr	r4, [pc, #840]	; (800608c <SX1276SetRx+0x350>)
{
 8005d42:	b082      	sub	sp, #8
 8005d44:	4606      	mov	r6, r0
    TimerStop( &TxTimeoutTimer );
 8005d46:	48d2      	ldr	r0, [pc, #840]	; (8006090 <SX1276SetRx+0x354>)
 8005d48:	f7ff f94e 	bl	8004fe8 <TimerStop>
    switch( SX1276.Settings.Modem )
 8005d4c:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	d071      	beq.n	8005e38 <SX1276SetRx+0xfc>
 8005d54:	2d01      	cmp	r5, #1
 8005d56:	d14f      	bne.n	8005df8 <SX1276SetRx+0xbc>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8005d58:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
    SX1276ReadBuffer( addr, &data, 1 );
 8005d5c:	f10d 0707 	add.w	r7, sp, #7
 8005d60:	462a      	mov	r2, r5
 8005d62:	4639      	mov	r1, r7
 8005d64:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f040 80bb 	bne.w	8005ee2 <SX1276SetRx+0x1a6>
    SX1276ReadBuffer( addr, &data, 1 );
 8005d6c:	f7fe fea6 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005d70:	f89d 3007 	ldrb.w	r3, [sp, #7]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8005d74:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8005d78:	f043 0301 	orr.w	r3, r3, #1
    SX1276WriteBuffer( addr, &data, 1 );
 8005d7c:	462a      	mov	r2, r5
 8005d7e:	4639      	mov	r1, r7
 8005d80:	2033      	movs	r0, #51	; 0x33
 8005d82:	f88d 3007 	strb.w	r3, [sp, #7]
 8005d86:	f7fe fe7b 	bl	8004a80 <SX1276WriteBuffer>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8005d8a:	231d      	movs	r3, #29
    SX1276WriteBuffer( addr, &data, 1 );
 8005d8c:	462a      	mov	r2, r5
 8005d8e:	4639      	mov	r1, r7
 8005d90:	203b      	movs	r0, #59	; 0x3b
 8005d92:	f88d 3007 	strb.w	r3, [sp, #7]
 8005d96:	f7fe fe73 	bl	8004a80 <SX1276WriteBuffer>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8005d9a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005d9e:	2b08      	cmp	r3, #8
    SX1276ReadBuffer( addr, &data, 1 );
 8005da0:	f04f 0201 	mov.w	r2, #1
 8005da4:	4639      	mov	r1, r7
 8005da6:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8005daa:	f200 80de 	bhi.w	8005f6a <SX1276SetRx+0x22e>
    SX1276ReadBuffer( addr, &data, 1 );
 8005dae:	f7fe fe85 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005db2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8005db6:	2201      	movs	r2, #1
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8005db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	2031      	movs	r0, #49	; 0x31
 8005dc0:	f88d 3007 	strb.w	r3, [sp, #7]
 8005dc4:	f7fe fe5c 	bl	8004a80 <SX1276WriteBuffer>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8005dc8:	2300      	movs	r3, #0
    SX1276WriteBuffer( addr, &data, 1 );
 8005dca:	2201      	movs	r2, #1
 8005dcc:	4639      	mov	r1, r7
 8005dce:	2030      	movs	r0, #48	; 0x30
 8005dd0:	f88d 3007 	strb.w	r3, [sp, #7]
 8005dd4:	f7fe fe54 	bl	8004a80 <SX1276WriteBuffer>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8005dd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	f200 8097 	bhi.w	8005f10 <SX1276SetRx+0x1d4>
 8005de2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005de6:	0142      	.short	0x0142
 8005de8:	01220132 	.word	0x01220132
 8005dec:	01020112 	.word	0x01020112
 8005df0:	008d00f2 	.word	0x008d00f2
 8005df4:	008d008d 	.word	0x008d008d
    switch( SX1276.Settings.Modem )
 8005df8:	f04f 0800 	mov.w	r8, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8005dfc:	48a5      	ldr	r0, [pc, #660]	; (8006094 <SX1276SetRx+0x358>)
 8005dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e02:	2100      	movs	r1, #0
 8005e04:	f005 f9fa 	bl	800b1fc <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
 8005e0e:	2e00      	cmp	r6, #0
 8005e10:	d15f      	bne.n	8005ed2 <SX1276SetRx+0x196>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8005e12:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d052      	beq.n	8005ec0 <SX1276SetRx+0x184>
        if( rxContinuous == true )
 8005e1a:	f1b8 0f00 	cmp.w	r8, #0
 8005e1e:	d105      	bne.n	8005e2c <SX1276SetRx+0xf0>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8005e20:	2006      	movs	r0, #6
}
 8005e22:	b002      	add	sp, #8
 8005e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8005e28:	f7ff bc24 	b.w	8005674 <SX1276SetOpMode>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8005e2c:	2005      	movs	r0, #5
}
 8005e2e:	b002      	add	sp, #8
 8005e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8005e34:	f7ff bc1e 	b.w	8005674 <SX1276SetOpMode>
    SX1276ReadBuffer( addr, &data, 1 );
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f10d 0107 	add.w	r1, sp, #7
 8005e3e:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8005e40:	f894 8102 	ldrb.w	r8, [r4, #258]	; 0x102
    SX1276ReadBuffer( addr, &data, 1 );
 8005e44:	f7fe fe3a 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005e48:	f89d 3007 	ldrb.w	r3, [sp, #7]
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8005e4c:	f003 0303 	and.w	r3, r3, #3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8005e50:	f043 030c 	orr.w	r3, r3, #12
    SX1276WriteBuffer( addr, &data, 1 );
 8005e54:	2201      	movs	r2, #1
 8005e56:	f10d 0107 	add.w	r1, sp, #7
 8005e5a:	2040      	movs	r0, #64	; 0x40
 8005e5c:	f88d 3007 	strb.w	r3, [sp, #7]
 8005e60:	f7fe fe0e 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8005e64:	2201      	movs	r2, #1
 8005e66:	f10d 0107 	add.w	r1, sp, #7
 8005e6a:	2041      	movs	r0, #65	; 0x41
 8005e6c:	f7fe fe26 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005e70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8005e74:	2201      	movs	r2, #1
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8005e76:	f063 033e 	orn	r3, r3, #62	; 0x3e
    SX1276WriteBuffer( addr, &data, 1 );
 8005e7a:	f10d 0107 	add.w	r1, sp, #7
 8005e7e:	2041      	movs	r0, #65	; 0x41
 8005e80:	f88d 3007 	strb.w	r3, [sp, #7]
 8005e84:	f7fe fdfc 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f10d 0107 	add.w	r1, sp, #7
 8005e8e:	2035      	movs	r0, #53	; 0x35
 8005e90:	f7fe fe14 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005e94:	f89d 3007 	ldrb.w	r3, [sp, #7]
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8005e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e9c:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
    SX1276WriteBuffer( addr, &data, 1 );
 8005ea0:	f10d 0107 	add.w	r1, sp, #7
 8005ea4:	231e      	movs	r3, #30
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	200d      	movs	r0, #13
 8005eaa:	f88d 3007 	strb.w	r3, [sp, #7]
 8005eae:	f7fe fde7 	bl	8004a80 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8005eb2:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8005eb6:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8005eba:	f8a4 5116 	strh.w	r5, [r4, #278]	; 0x116
        break;
 8005ebe:	e79d      	b.n	8005dfc <SX1276SetRx+0xc0>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8005ec0:	2005      	movs	r0, #5
 8005ec2:	f7ff fbd7 	bl	8005674 <SX1276SetOpMode>
        if( rxContinuous == false )
 8005ec6:	f1b8 0f00 	cmp.w	r8, #0
 8005eca:	d073      	beq.n	8005fb4 <SX1276SetRx+0x278>
}
 8005ecc:	b002      	add	sp, #8
 8005ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005ed2:	4871      	ldr	r0, [pc, #452]	; (8006098 <SX1276SetRx+0x35c>)
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	f7ff f8cf 	bl	8005078 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8005eda:	486f      	ldr	r0, [pc, #444]	; (8006098 <SX1276SetRx+0x35c>)
 8005edc:	f7fe ffc2 	bl	8004e64 <TimerStart>
 8005ee0:	e797      	b.n	8005e12 <SX1276SetRx+0xd6>
    SX1276ReadBuffer( addr, &data, 1 );
 8005ee2:	f7fe fdeb 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005ee6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8005eea:	462a      	mov	r2, r5
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8005eec:	f043 0341 	orr.w	r3, r3, #65	; 0x41
    SX1276WriteBuffer( addr, &data, 1 );
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	2033      	movs	r0, #51	; 0x33
 8005ef4:	f88d 3007 	strb.w	r3, [sp, #7]
 8005ef8:	f7fe fdc2 	bl	8004a80 <SX1276WriteBuffer>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8005efc:	2319      	movs	r3, #25
 8005efe:	e745      	b.n	8005d8c <SX1276SetRx+0x50>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8005f00:	2340      	movs	r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8005f02:	2201      	movs	r2, #1
 8005f04:	4639      	mov	r1, r7
 8005f06:	202f      	movs	r0, #47	; 0x2f
 8005f08:	f88d 3007 	strb.w	r3, [sp, #7]
 8005f0c:	f7fe fdb8 	bl	8004a80 <SX1276WriteBuffer>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005f10:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8005f14:	f894 8132 	ldrb.w	r8, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005f18:	b3d3      	cbz	r3, 8005f90 <SX1276SetRx+0x254>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8005f1a:	231d      	movs	r3, #29
    SX1276WriteBuffer( addr, &data, 1 );
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	4639      	mov	r1, r7
 8005f20:	2011      	movs	r0, #17
 8005f22:	f88d 3007 	strb.w	r3, [sp, #7]
 8005f26:	f7fe fdab 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	4639      	mov	r1, r7
 8005f2e:	2040      	movs	r0, #64	; 0x40
 8005f30:	f7fe fdc4 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005f34:	f89d 3007 	ldrb.w	r3, [sp, #7]
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8005f38:	f003 0333 	and.w	r3, r3, #51	; 0x33
    SX1276WriteBuffer( addr, &data, 1 );
 8005f3c:	4639      	mov	r1, r7
 8005f3e:	2201      	movs	r2, #1
 8005f40:	2040      	movs	r0, #64	; 0x40
 8005f42:	f88d 3007 	strb.w	r3, [sp, #7]
 8005f46:	2500      	movs	r5, #0
 8005f48:	f7fe fd9a 	bl	8004a80 <SX1276WriteBuffer>
 8005f4c:	4639      	mov	r1, r7
 8005f4e:	2201      	movs	r2, #1
 8005f50:	200f      	movs	r0, #15
 8005f52:	f88d 5007 	strb.w	r5, [sp, #7]
 8005f56:	f7fe fd93 	bl	8004a80 <SX1276WriteBuffer>
 8005f5a:	4639      	mov	r1, r7
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	200d      	movs	r0, #13
 8005f60:	f88d 5007 	strb.w	r5, [sp, #7]
 8005f64:	f7fe fd8c 	bl	8004a80 <SX1276WriteBuffer>
        break;
 8005f68:	e748      	b.n	8005dfc <SX1276SetRx+0xc0>
    SX1276ReadBuffer( addr, &data, 1 );
 8005f6a:	f7fe fda7 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005f6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8005f72:	2201      	movs	r2, #1
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8005f74:	f063 037f 	orn	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 8005f78:	4639      	mov	r1, r7
 8005f7a:	2031      	movs	r0, #49	; 0x31
 8005f7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8005f80:	f7fe fd7e 	bl	8004a80 <SX1276WriteBuffer>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005f84:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8005f88:	f894 8132 	ldrb.w	r8, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1c4      	bne.n	8005f1a <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8005f90:	231f      	movs	r3, #31
    SX1276WriteBuffer( addr, &data, 1 );
 8005f92:	2201      	movs	r2, #1
 8005f94:	4639      	mov	r1, r7
 8005f96:	2011      	movs	r0, #17
 8005f98:	f88d 3007 	strb.w	r3, [sp, #7]
 8005f9c:	f7fe fd70 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	4639      	mov	r1, r7
 8005fa4:	2040      	movs	r0, #64	; 0x40
 8005fa6:	f7fe fd89 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8005faa:	f89d 3007 	ldrb.w	r3, [sp, #7]
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8005fae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb2:	e7c3      	b.n	8005f3c <SX1276SetRx+0x200>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8005fb4:	4839      	ldr	r0, [pc, #228]	; (800609c <SX1276SetRx+0x360>)
 8005fb6:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
 8005fba:	f7ff f85d 	bl	8005078 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8005fbe:	4837      	ldr	r0, [pc, #220]	; (800609c <SX1276SetRx+0x360>)
}
 8005fc0:	b002      	add	sp, #8
 8005fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            TimerStart( &RxTimeoutSyncWord );
 8005fc6:	f7fe bf4d 	b.w	8004e64 <TimerStart>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005fca:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 8005fcc:	2201      	movs	r2, #1
 8005fce:	4639      	mov	r1, r7
 8005fd0:	202f      	movs	r0, #47	; 0x2f
 8005fd2:	f88d 3007 	strb.w	r3, [sp, #7]
 8005fd6:	f7fe fd53 	bl	8004a80 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8005fda:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8005fde:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8005fe2:	30c6      	adds	r0, #198	; 0xc6
 8005fe4:	f7ff fbc2 	bl	800576c <SX1276SetChannel>
                    break;
 8005fe8:	e792      	b.n	8005f10 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005fea:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 8005fec:	2201      	movs	r2, #1
 8005fee:	4639      	mov	r1, r7
 8005ff0:	202f      	movs	r0, #47	; 0x2f
 8005ff2:	f88d 3007 	strb.w	r3, [sp, #7]
 8005ff6:	f7fe fd43 	bl	8004a80 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8005ffa:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8005ffe:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8006002:	3012      	adds	r0, #18
 8006004:	f7ff fbb2 	bl	800576c <SX1276SetChannel>
                    break;
 8006008:	e782      	b.n	8005f10 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800600a:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 800600c:	2201      	movs	r2, #1
 800600e:	4639      	mov	r1, r7
 8006010:	202f      	movs	r0, #47	; 0x2f
 8006012:	f88d 3007 	strb.w	r3, [sp, #7]
 8006016:	f7fe fd33 	bl	8004a80 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 800601a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 800601e:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8006022:	305e      	adds	r0, #94	; 0x5e
 8006024:	f7ff fba2 	bl	800576c <SX1276SetChannel>
                    break;
 8006028:	e772      	b.n	8005f10 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800602a:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 800602c:	2201      	movs	r2, #1
 800602e:	4639      	mov	r1, r7
 8006030:	202f      	movs	r0, #47	; 0x2f
 8006032:	f88d 3007 	strb.w	r3, [sp, #7]
 8006036:	f7fe fd23 	bl	8004a80 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800603a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 800603e:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8006042:	3004      	adds	r0, #4
 8006044:	f7ff fb92 	bl	800576c <SX1276SetChannel>
                    break;
 8006048:	e762      	b.n	8005f10 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800604a:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 800604c:	2201      	movs	r2, #1
 800604e:	4639      	mov	r1, r7
 8006050:	202f      	movs	r0, #47	; 0x2f
 8006052:	f88d 3007 	strb.w	r3, [sp, #7]
 8006056:	f7fe fd13 	bl	8004a80 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800605a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 800605e:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8006062:	3034      	adds	r0, #52	; 0x34
 8006064:	f7ff fb82 	bl	800576c <SX1276SetChannel>
                    break;
 8006068:	e752      	b.n	8005f10 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800606a:	2348      	movs	r3, #72	; 0x48
    SX1276WriteBuffer( addr, &data, 1 );
 800606c:	2201      	movs	r2, #1
 800606e:	4639      	mov	r1, r7
 8006070:	202f      	movs	r0, #47	; 0x2f
 8006072:	f88d 3007 	strb.w	r3, [sp, #7]
 8006076:	f7fe fd03 	bl	8004a80 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 800607a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 800607e:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8006082:	3002      	adds	r0, #2
 8006084:	f7ff fb72 	bl	800576c <SX1276SetChannel>
                    break;
 8006088:	e742      	b.n	8005f10 <SX1276SetRx+0x1d4>
 800608a:	bf00      	nop
 800608c:	20000c74 	.word	0x20000c74
 8006090:	20000db8 	.word	0x20000db8
 8006094:	20000b74 	.word	0x20000b74
 8006098:	20000b5c 	.word	0x20000b5c
 800609c:	20000b44 	.word	0x20000b44

080060a0 <SX1276SetModem>:
{
 80060a0:	b530      	push	{r4, r5, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 80060a2:	2201      	movs	r2, #1
{
 80060a4:	b083      	sub	sp, #12
 80060a6:	4604      	mov	r4, r0
    SX1276ReadBuffer( addr, &data, 1 );
 80060a8:	f10d 0107 	add.w	r1, sp, #7
 80060ac:	4610      	mov	r0, r2
 80060ae:	f7fe fd05 	bl	8004abc <SX1276ReadBuffer>
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80060b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if( SX1276.Settings.Modem == modem )
 80060b6:	ebb4 1fd3 	cmp.w	r4, r3, lsr #7
 80060ba:	d079      	beq.n	80061b0 <SX1276SetModem+0x110>
    SX1276.Settings.Modem = modem;
 80060bc:	4b3f      	ldr	r3, [pc, #252]	; (80061bc <SX1276SetModem+0x11c>)
    switch( SX1276.Settings.Modem )
 80060be:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
 80060c0:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 80060c4:	d03a      	beq.n	800613c <SX1276SetModem+0x9c>
        SX1276SetAntSwLowPower( true );
 80060c6:	2001      	movs	r0, #1
 80060c8:	f7fe fd88 	bl	8004bdc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 80060cc:	2201      	movs	r2, #1
 80060ce:	f10d 0107 	add.w	r1, sp, #7
 80060d2:	4610      	mov	r0, r2
 80060d4:	f7fe fcf2 	bl	8004abc <SX1276ReadBuffer>
    return data;
 80060d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80060dc:	2201      	movs	r2, #1
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80060de:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 80060e2:	f10d 0107 	add.w	r1, sp, #7
 80060e6:	4610      	mov	r0, r2
 80060e8:	f88d 3007 	strb.w	r3, [sp, #7]
 80060ec:	f7fe fcc8 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80060f0:	2201      	movs	r2, #1
 80060f2:	f10d 0107 	add.w	r1, sp, #7
 80060f6:	4610      	mov	r0, r2
 80060f8:	f7fe fce0 	bl	8004abc <SX1276ReadBuffer>
    return data;
 80060fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006100:	2201      	movs	r2, #1
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8006102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 8006106:	f10d 0107 	add.w	r1, sp, #7
 800610a:	4610      	mov	r0, r2
 800610c:	f88d 3007 	strb.w	r3, [sp, #7]
 8006110:	f7fe fcb6 	bl	8004a80 <SX1276WriteBuffer>
 8006114:	f10d 0107 	add.w	r1, sp, #7
 8006118:	2300      	movs	r3, #0
 800611a:	2201      	movs	r2, #1
 800611c:	2040      	movs	r0, #64	; 0x40
 800611e:	f88d 3007 	strb.w	r3, [sp, #7]
 8006122:	f7fe fcad 	bl	8004a80 <SX1276WriteBuffer>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8006126:	2330      	movs	r3, #48	; 0x30
    SX1276WriteBuffer( addr, &data, 1 );
 8006128:	2201      	movs	r2, #1
 800612a:	f10d 0107 	add.w	r1, sp, #7
 800612e:	2041      	movs	r0, #65	; 0x41
 8006130:	f88d 3007 	strb.w	r3, [sp, #7]
 8006134:	f7fe fca4 	bl	8004a80 <SX1276WriteBuffer>
}
 8006138:	b003      	add	sp, #12
 800613a:	bd30      	pop	{r4, r5, pc}
        SX1276SetAntSwLowPower( true );
 800613c:	4620      	mov	r0, r4
 800613e:	f7fe fd4d 	bl	8004bdc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8006142:	4622      	mov	r2, r4
 8006144:	f10d 0107 	add.w	r1, sp, #7
 8006148:	4620      	mov	r0, r4
 800614a:	f7fe fcb7 	bl	8004abc <SX1276ReadBuffer>
    return data;
 800614e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006152:	4622      	mov	r2, r4
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006154:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8006158:	f10d 0107 	add.w	r1, sp, #7
 800615c:	4620      	mov	r0, r4
 800615e:	f88d 3007 	strb.w	r3, [sp, #7]
 8006162:	f7fe fc8d 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006166:	4622      	mov	r2, r4
 8006168:	f10d 0107 	add.w	r1, sp, #7
 800616c:	4620      	mov	r0, r4
 800616e:	f7fe fca5 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006172:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006176:	4622      	mov	r2, r4
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8006178:	f063 037f 	orn	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 800617c:	f10d 0107 	add.w	r1, sp, #7
 8006180:	4620      	mov	r0, r4
 8006182:	f88d 3007 	strb.w	r3, [sp, #7]
 8006186:	2500      	movs	r5, #0
 8006188:	f7fe fc7a 	bl	8004a80 <SX1276WriteBuffer>
 800618c:	4622      	mov	r2, r4
 800618e:	f10d 0107 	add.w	r1, sp, #7
 8006192:	2040      	movs	r0, #64	; 0x40
 8006194:	f88d 5007 	strb.w	r5, [sp, #7]
 8006198:	f7fe fc72 	bl	8004a80 <SX1276WriteBuffer>
 800619c:	4622      	mov	r2, r4
 800619e:	f10d 0107 	add.w	r1, sp, #7
 80061a2:	2041      	movs	r0, #65	; 0x41
 80061a4:	f88d 5007 	strb.w	r5, [sp, #7]
 80061a8:	f7fe fc6a 	bl	8004a80 <SX1276WriteBuffer>
}
 80061ac:	b003      	add	sp, #12
 80061ae:	bd30      	pop	{r4, r5, pc}
 80061b0:	09da      	lsrs	r2, r3, #7
 80061b2:	4b02      	ldr	r3, [pc, #8]	; (80061bc <SX1276SetModem+0x11c>)
 80061b4:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 80061b8:	b003      	add	sp, #12
 80061ba:	bd30      	pop	{r4, r5, pc}
 80061bc:	20000c74 	.word	0x20000c74

080061c0 <SX1276Init>:
{
 80061c0:	b530      	push	{r4, r5, lr}
    RadioEvents = events;
 80061c2:	4b24      	ldr	r3, [pc, #144]	; (8006254 <SX1276Init+0x94>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80061c4:	4924      	ldr	r1, [pc, #144]	; (8006258 <SX1276Init+0x98>)
 80061c6:	4c25      	ldr	r4, [pc, #148]	; (800625c <SX1276Init+0x9c>)
{
 80061c8:	b083      	sub	sp, #12
 80061ca:	4602      	mov	r2, r0
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80061cc:	4824      	ldr	r0, [pc, #144]	; (8006260 <SX1276Init+0xa0>)
    RadioEvents = events;
 80061ce:	601a      	str	r2, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80061d0:	f7fe fe40 	bl	8004e54 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80061d4:	4920      	ldr	r1, [pc, #128]	; (8006258 <SX1276Init+0x98>)
 80061d6:	4823      	ldr	r0, [pc, #140]	; (8006264 <SX1276Init+0xa4>)
 80061d8:	f7fe fe3c 	bl	8004e54 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80061dc:	491e      	ldr	r1, [pc, #120]	; (8006258 <SX1276Init+0x98>)
 80061de:	4822      	ldr	r0, [pc, #136]	; (8006268 <SX1276Init+0xa8>)
 80061e0:	f7fe fe38 	bl	8004e54 <TimerInit>
    SX1276Reset( );
 80061e4:	f7fe fd00 	bl	8004be8 <SX1276Reset>
    RxChainCalibration( );
 80061e8:	f7ff faf6 	bl	80057d8 <RxChainCalibration>
        SX1276SetAntSwLowPower( true );
 80061ec:	2001      	movs	r0, #1
 80061ee:	f7fe fcf5 	bl	8004bdc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 80061f2:	2201      	movs	r2, #1
 80061f4:	4610      	mov	r0, r2
 80061f6:	f10d 0107 	add.w	r1, sp, #7
 80061fa:	f7fe fc5f 	bl	8004abc <SX1276ReadBuffer>
    return data;
 80061fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006202:	2201      	movs	r2, #1
 8006204:	4610      	mov	r0, r2
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006206:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 800620a:	f10d 0107 	add.w	r1, sp, #7
 800620e:	f88d 3007 	strb.w	r3, [sp, #7]
 8006212:	f7fe fc35 	bl	8004a80 <SX1276WriteBuffer>
    SX1276IoIrqInit( DioIrq );
 8006216:	4815      	ldr	r0, [pc, #84]	; (800626c <SX1276Init+0xac>)
 8006218:	f7fe fd0a 	bl	8004c30 <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800621c:	f104 052d 	add.w	r5, r4, #45	; 0x2d
    SX1276IoIrqInit( DioIrq );
 8006220:	2000      	movs	r0, #0
 8006222:	e001      	b.n	8006228 <SX1276Init+0x68>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8006224:	f814 0f03 	ldrb.w	r0, [r4, #3]!
 8006228:	f7ff ff3a 	bl	80060a0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800622c:	78a3      	ldrb	r3, [r4, #2]
    SX1276WriteBuffer( addr, &data, 1 );
 800622e:	7860      	ldrb	r0, [r4, #1]
 8006230:	f88d 3007 	strb.w	r3, [sp, #7]
 8006234:	2201      	movs	r2, #1
 8006236:	f10d 0107 	add.w	r1, sp, #7
 800623a:	f7fe fc21 	bl	8004a80 <SX1276WriteBuffer>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800623e:	42ac      	cmp	r4, r5
 8006240:	d1f0      	bne.n	8006224 <SX1276Init+0x64>
    SX1276SetModem( MODEM_FSK );
 8006242:	2000      	movs	r0, #0
 8006244:	f7ff ff2c 	bl	80060a0 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8006248:	4b09      	ldr	r3, [pc, #36]	; (8006270 <SX1276Init+0xb0>)
 800624a:	2200      	movs	r2, #0
 800624c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8006250:	b003      	add	sp, #12
 8006252:	bd30      	pop	{r4, r5, pc}
 8006254:	20000b40 	.word	0x20000b40
 8006258:	08006c55 	.word	0x08006c55
 800625c:	0800c370 	.word	0x0800c370
 8006260:	20000db8 	.word	0x20000db8
 8006264:	20000b5c 	.word	0x20000b5c
 8006268:	20000b44 	.word	0x20000b44
 800626c:	200002a8 	.word	0x200002a8
 8006270:	20000c74 	.word	0x20000c74

08006274 <SX1276IsChannelFree>:
{
 8006274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006278:	4605      	mov	r5, r0
 800627a:	b083      	sub	sp, #12
    TimerStop( &RxTimeoutTimer );
 800627c:	484d      	ldr	r0, [pc, #308]	; (80063b4 <SX1276IsChannelFree+0x140>)
    SX1276.Settings.State = RF_IDLE;
 800627e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 80063c4 <SX1276IsChannelFree+0x150>
{
 8006282:	461f      	mov	r7, r3
 8006284:	460e      	mov	r6, r1
 8006286:	4690      	mov	r8, r2
    TimerStop( &RxTimeoutTimer );
 8006288:	f7fe feae 	bl	8004fe8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800628c:	484a      	ldr	r0, [pc, #296]	; (80063b8 <SX1276IsChannelFree+0x144>)
 800628e:	f7fe feab 	bl	8004fe8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8006292:	484a      	ldr	r0, [pc, #296]	; (80063bc <SX1276IsChannelFree+0x148>)
 8006294:	f7fe fea8 	bl	8004fe8 <TimerStop>
        SX1276SetAntSwLowPower( true );
 8006298:	2001      	movs	r0, #1
 800629a:	f7fe fc9f 	bl	8004bdc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 800629e:	2201      	movs	r2, #1
 80062a0:	4610      	mov	r0, r2
 80062a2:	f10d 0107 	add.w	r1, sp, #7
 80062a6:	f7fe fc09 	bl	8004abc <SX1276ReadBuffer>
    return data;
 80062aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80062ae:	2201      	movs	r2, #1
 80062b0:	4610      	mov	r0, r2
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80062b2:	f023 0307 	bic.w	r3, r3, #7
    SX1276.Settings.State = RF_IDLE;
 80062b6:	2400      	movs	r4, #0
    SX1276WriteBuffer( addr, &data, 1 );
 80062b8:	f10d 0107 	add.w	r1, sp, #7
 80062bc:	f88d 3007 	strb.w	r3, [sp, #7]
 80062c0:	f7fe fbde 	bl	8004a80 <SX1276WriteBuffer>
    SX1276SetBoardTcxo( false );
 80062c4:	4620      	mov	r0, r4
 80062c6:	f7fe fc8b 	bl	8004be0 <SX1276SetBoardTcxo>
    SX1276SetModem( MODEM_FSK );
 80062ca:	4620      	mov	r0, r4
    SX1276.Settings.State = RF_IDLE;
 80062cc:	f889 40e0 	strb.w	r4, [r9, #224]	; 0xe0
    SX1276SetModem( MODEM_FSK );
 80062d0:	f7ff fee6 	bl	80060a0 <SX1276SetModem>
    SX1276SetChannel( freq );
 80062d4:	4628      	mov	r0, r5
 80062d6:	f7ff fa49 	bl	800576c <SX1276SetChannel>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80062da:	4a39      	ldr	r2, [pc, #228]	; (80063c0 <SX1276IsChannelFree+0x14c>)
    SX1276SetChannel( freq );
 80062dc:	4620      	mov	r0, r4
 80062de:	f640 2528 	movw	r5, #2600	; 0xa28
 80062e2:	4614      	mov	r4, r2
 80062e4:	e001      	b.n	80062ea <SX1276IsChannelFree+0x76>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80062e6:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80062ea:	42ae      	cmp	r6, r5
 80062ec:	d302      	bcc.n	80062f4 <SX1276IsChannelFree+0x80>
 80062ee:	68a3      	ldr	r3, [r4, #8]
 80062f0:	429e      	cmp	r6, r3
 80062f2:	d303      	bcc.n	80062fc <SX1276IsChannelFree+0x88>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80062f4:	3001      	adds	r0, #1
 80062f6:	2815      	cmp	r0, #21
 80062f8:	d1f5      	bne.n	80062e6 <SX1276IsChannelFree+0x72>
    while( 1 );
 80062fa:	e7fe      	b.n	80062fa <SX1276IsChannelFree+0x86>
            return FskBandwidths[i].RegValue;
 80062fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    SX1276WriteBuffer( addr, &data, 1 );
 8006300:	f10d 0107 	add.w	r1, sp, #7
            return FskBandwidths[i].RegValue;
 8006304:	7914      	ldrb	r4, [r2, #4]
 8006306:	f88d 4007 	strb.w	r4, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800630a:	2201      	movs	r2, #1
 800630c:	2012      	movs	r0, #18
 800630e:	f7fe fbb7 	bl	8004a80 <SX1276WriteBuffer>
 8006312:	2201      	movs	r2, #1
 8006314:	f10d 0107 	add.w	r1, sp, #7
 8006318:	2013      	movs	r0, #19
 800631a:	f88d 4007 	strb.w	r4, [sp, #7]
 800631e:	f7fe fbaf 	bl	8004a80 <SX1276WriteBuffer>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8006322:	2005      	movs	r0, #5
 8006324:	f7ff f9a6 	bl	8005674 <SX1276SetOpMode>
    DelayMs( 1 );
 8006328:	2001      	movs	r0, #1
 800632a:	f7fe fecf 	bl	80050cc <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 800632e:	f7fe feb5 	bl	800509c <TimerGetCurrentTime>
 8006332:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006334:	e007      	b.n	8006346 <SX1276IsChannelFree+0xd2>
    SX1276ReadBuffer( addr, &data, 1 );
 8006336:	f7fe fbc1 	bl	8004abc <SX1276ReadBuffer>
    return data;
 800633a:	f89d 3007 	ldrb.w	r3, [sp, #7]
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800633e:	085b      	lsrs	r3, r3, #1
 8006340:	425b      	negs	r3, r3
        if( rssi > rssiThresh )
 8006342:	4598      	cmp	r8, r3
 8006344:	db34      	blt.n	80063b0 <SX1276IsChannelFree+0x13c>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006346:	4620      	mov	r0, r4
 8006348:	f7fe feb0 	bl	80050ac <TimerGetElapsedTime>
 800634c:	4603      	mov	r3, r0
 800634e:	42bb      	cmp	r3, r7
    SX1276ReadBuffer( addr, &data, 1 );
 8006350:	f04f 0201 	mov.w	r2, #1
 8006354:	f10d 0107 	add.w	r1, sp, #7
 8006358:	f04f 0011 	mov.w	r0, #17
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800635c:	d3eb      	bcc.n	8006336 <SX1276IsChannelFree+0xc2>
    bool status = true;
 800635e:	4614      	mov	r4, r2
    TimerStop( &RxTimeoutTimer );
 8006360:	4814      	ldr	r0, [pc, #80]	; (80063b4 <SX1276IsChannelFree+0x140>)
 8006362:	f7fe fe41 	bl	8004fe8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8006366:	4814      	ldr	r0, [pc, #80]	; (80063b8 <SX1276IsChannelFree+0x144>)
 8006368:	f7fe fe3e 	bl	8004fe8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 800636c:	4813      	ldr	r0, [pc, #76]	; (80063bc <SX1276IsChannelFree+0x148>)
 800636e:	f7fe fe3b 	bl	8004fe8 <TimerStop>
        SX1276SetAntSwLowPower( true );
 8006372:	2001      	movs	r0, #1
 8006374:	f7fe fc32 	bl	8004bdc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8006378:	2201      	movs	r2, #1
 800637a:	f10d 0107 	add.w	r1, sp, #7
 800637e:	4610      	mov	r0, r2
 8006380:	f7fe fb9c 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006384:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006388:	2201      	movs	r2, #1
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800638a:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 800638e:	4610      	mov	r0, r2
 8006390:	f10d 0107 	add.w	r1, sp, #7
 8006394:	f88d 3007 	strb.w	r3, [sp, #7]
 8006398:	f7fe fb72 	bl	8004a80 <SX1276WriteBuffer>
    SX1276SetBoardTcxo( false );
 800639c:	2000      	movs	r0, #0
 800639e:	f7fe fc1f 	bl	8004be0 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4620      	mov	r0, r4
    SX1276.Settings.State = RF_IDLE;
 80063a6:	f889 30e0 	strb.w	r3, [r9, #224]	; 0xe0
}
 80063aa:	b003      	add	sp, #12
 80063ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            status = false;
 80063b0:	2400      	movs	r4, #0
 80063b2:	e7d5      	b.n	8006360 <SX1276IsChannelFree+0xec>
 80063b4:	20000b5c 	.word	0x20000b5c
 80063b8:	20000db8 	.word	0x20000db8
 80063bc:	20000b44 	.word	0x20000b44
 80063c0:	0800c2c0 	.word	0x0800c2c0
 80063c4:	20000c74 	.word	0x20000c74

080063c8 <SX1276Random>:
{
 80063c8:	b530      	push	{r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 80063ca:	2001      	movs	r0, #1
{
 80063cc:	b083      	sub	sp, #12
    SX1276SetModem( MODEM_LORA );
 80063ce:	f7ff fe67 	bl	80060a0 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80063d2:	23ff      	movs	r3, #255	; 0xff
    SX1276WriteBuffer( addr, &data, 1 );
 80063d4:	2201      	movs	r2, #1
 80063d6:	f10d 0107 	add.w	r1, sp, #7
 80063da:	2011      	movs	r0, #17
 80063dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80063e0:	f7fe fb4e 	bl	8004a80 <SX1276WriteBuffer>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80063e4:	2005      	movs	r0, #5
 80063e6:	f7ff f945 	bl	8005674 <SX1276SetOpMode>
 80063ea:	2400      	movs	r4, #0
    uint32_t rnd = 0;
 80063ec:	4625      	mov	r5, r4
        DelayMs( 1 );
 80063ee:	2001      	movs	r0, #1
 80063f0:	f7fe fe6c 	bl	80050cc <DelayMs>
    SX1276ReadBuffer( addr, &data, 1 );
 80063f4:	2201      	movs	r2, #1
 80063f6:	f10d 0107 	add.w	r1, sp, #7
 80063fa:	202c      	movs	r0, #44	; 0x2c
 80063fc:	f7fe fb5e 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006400:	f89d 3007 	ldrb.w	r3, [sp, #7]
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	40a3      	lsls	r3, r4
    for( i = 0; i < 32; i++ )
 800640a:	3401      	adds	r4, #1
 800640c:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800640e:	ea45 0503 	orr.w	r5, r5, r3
    for( i = 0; i < 32; i++ )
 8006412:	d1ec      	bne.n	80063ee <SX1276Random+0x26>
    TimerStop( &RxTimeoutTimer );
 8006414:	4813      	ldr	r0, [pc, #76]	; (8006464 <SX1276Random+0x9c>)
 8006416:	f7fe fde7 	bl	8004fe8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800641a:	4813      	ldr	r0, [pc, #76]	; (8006468 <SX1276Random+0xa0>)
 800641c:	f7fe fde4 	bl	8004fe8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8006420:	4812      	ldr	r0, [pc, #72]	; (800646c <SX1276Random+0xa4>)
 8006422:	f7fe fde1 	bl	8004fe8 <TimerStop>
        SX1276SetAntSwLowPower( true );
 8006426:	2001      	movs	r0, #1
 8006428:	f7fe fbd8 	bl	8004bdc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 800642c:	2201      	movs	r2, #1
 800642e:	4610      	mov	r0, r2
 8006430:	f10d 0107 	add.w	r1, sp, #7
 8006434:	f7fe fb42 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006438:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800643c:	2201      	movs	r2, #1
 800643e:	4610      	mov	r0, r2
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006440:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8006444:	f10d 0107 	add.w	r1, sp, #7
 8006448:	f88d 3007 	strb.w	r3, [sp, #7]
 800644c:	f7fe fb18 	bl	8004a80 <SX1276WriteBuffer>
    SX1276SetBoardTcxo( false );
 8006450:	2000      	movs	r0, #0
 8006452:	f7fe fbc5 	bl	8004be0 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 8006456:	4b06      	ldr	r3, [pc, #24]	; (8006470 <SX1276Random+0xa8>)
 8006458:	2200      	movs	r2, #0
}
 800645a:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_IDLE;
 800645c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8006460:	b003      	add	sp, #12
 8006462:	bd30      	pop	{r4, r5, pc}
 8006464:	20000b5c 	.word	0x20000b5c
 8006468:	20000db8 	.word	0x20000db8
 800646c:	20000b44 	.word	0x20000b44
 8006470:	20000c74 	.word	0x20000c74

08006474 <SX1276SetRxConfig>:
{
 8006474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006478:	b089      	sub	sp, #36	; 0x24
 800647a:	461e      	mov	r6, r3
 800647c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8006486:	9303      	str	r3, [sp, #12]
 8006488:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 800648c:	9302      	str	r3, [sp, #8]
 800648e:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8006492:	9304      	str	r3, [sp, #16]
 8006494:	4604      	mov	r4, r0
 8006496:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800649a:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 800649e:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
 80064a2:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80064a6:	f89d 806c 	ldrb.w	r8, [sp, #108]	; 0x6c
 80064aa:	9305      	str	r3, [sp, #20]
 80064ac:	468b      	mov	fp, r1
 80064ae:	4615      	mov	r5, r2
    SX1276SetModem( modem );
 80064b0:	f7ff fdf6 	bl	80060a0 <SX1276SetModem>
    switch( modem )
 80064b4:	2c00      	cmp	r4, #0
 80064b6:	f000 80c2 	beq.w	800663e <SX1276SetRxConfig+0x1ca>
 80064ba:	2c01      	cmp	r4, #1
 80064bc:	f040 80bb 	bne.w	8006636 <SX1276SetRxConfig+0x1c2>
            if( bandwidth > 2 )
 80064c0:	f1bb 0f02 	cmp.w	fp, #2
 80064c4:	f200 80ba 	bhi.w	800663c <SX1276SetRxConfig+0x1c8>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80064c8:	4bbe      	ldr	r3, [pc, #760]	; (80067c4 <SX1276SetRxConfig+0x350>)
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80064ca:	9a04      	ldr	r2, [sp, #16]
 80064cc:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 80064d0:	2d06      	cmp	r5, #6
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80064d2:	9a05      	ldr	r2, [sp, #20]
 80064d4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80064d8:	f883 8132 	strb.w	r8, [r3, #306]	; 0x132
            SX1276.Settings.LoRa.FixLen = fixLen;
 80064dc:	9a01      	ldr	r2, [sp, #4]
 80064de:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 80064e2:	46a8      	mov	r8, r5
 80064e4:	bf38      	it	cc
 80064e6:	f04f 0806 	movcc.w	r8, #6
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80064ea:	9a03      	ldr	r2, [sp, #12]
 80064ec:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
            bandwidth += 7;
 80064f0:	f10b 0407 	add.w	r4, fp, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80064f4:	f1b8 0f0c 	cmp.w	r8, #12
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80064f8:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80064fa:	f883 9131 	strb.w	r9, [r3, #305]	; 0x131
 80064fe:	bf28      	it	cs
 8006500:	f04f 080c 	movcs.w	r8, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006504:	2c07      	cmp	r4, #7
            SX1276.Settings.LoRa.Datarate = datarate;
 8006506:	e9c3 4548 	strd	r4, r5, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
 800650a:	f883 6129 	strb.w	r6, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800650e:	f8a3 a12a 	strh.w	sl, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8006512:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006516:	f000 811f 	beq.w	8006758 <SX1276SetRxConfig+0x2e4>
 800651a:	2c08      	cmp	r4, #8
 800651c:	f000 814d 	beq.w	80067ba <SX1276SetRxConfig+0x346>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8006520:	2200      	movs	r2, #0
    SX1276ReadBuffer( addr, &data, 1 );
 8006522:	f10d 091f 	add.w	r9, sp, #31
 8006526:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800652a:	4649      	mov	r1, r9
 800652c:	2201      	movs	r2, #1
 800652e:	201d      	movs	r0, #29
 8006530:	f7fe fac4 	bl	8004abc <SX1276ReadBuffer>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006534:	9b01      	ldr	r3, [sp, #4]
 8006536:	ea43 0246 	orr.w	r2, r3, r6, lsl #1
 800653a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800653e:	f88d 201f 	strb.w	r2, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8006542:	4649      	mov	r1, r9
 8006544:	2201      	movs	r2, #1
 8006546:	201d      	movs	r0, #29
 8006548:	f7fe fa9a 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 800654c:	2201      	movs	r2, #1
 800654e:	4649      	mov	r1, r9
 8006550:	201e      	movs	r0, #30
 8006552:	f7fe fab3 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006556:	f89d 201f 	ldrb.w	r2, [sp, #31]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800655a:	f002 0108 	and.w	r1, r2, #8
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800655e:	f3c7 2201 	ubfx	r2, r7, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006562:	430a      	orrs	r2, r1
 8006564:	9902      	ldr	r1, [sp, #8]
 8006566:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800656a:	ea42 1808 	orr.w	r8, r2, r8, lsl #4
    SX1276WriteBuffer( addr, &data, 1 );
 800656e:	4649      	mov	r1, r9
 8006570:	2201      	movs	r2, #1
 8006572:	201e      	movs	r0, #30
 8006574:	f88d 801f 	strb.w	r8, [sp, #31]
 8006578:	f7fe fa82 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 800657c:	2201      	movs	r2, #1
 800657e:	4649      	mov	r1, r9
 8006580:	2026      	movs	r0, #38	; 0x26
 8006582:	f7fe fa9b 	bl	8004abc <SX1276ReadBuffer>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006586:	4b8f      	ldr	r3, [pc, #572]	; (80067c4 <SX1276SetRxConfig+0x350>)
    return data;
 8006588:	f89d 201f 	ldrb.w	r2, [sp, #31]
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800658c:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006590:	f022 0208 	bic.w	r2, r2, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006594:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006598:	f88d 201f 	strb.w	r2, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 800659c:	4649      	mov	r1, r9
 800659e:	2201      	movs	r2, #1
 80065a0:	2026      	movs	r0, #38	; 0x26
 80065a2:	f7fe fa6d 	bl	8004a80 <SX1276WriteBuffer>
 80065a6:	2201      	movs	r2, #1
 80065a8:	4649      	mov	r1, r9
 80065aa:	201f      	movs	r0, #31
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 80065ac:	f88d 701f 	strb.w	r7, [sp, #31]
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80065b0:	ea4f 261a 	mov.w	r6, sl, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 80065b4:	f7fe fa64 	bl	8004a80 <SX1276WriteBuffer>
 80065b8:	2201      	movs	r2, #1
 80065ba:	4649      	mov	r1, r9
 80065bc:	2020      	movs	r0, #32
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80065be:	f88d 601f 	strb.w	r6, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 80065c2:	f7fe fa5d 	bl	8004a80 <SX1276WriteBuffer>
 80065c6:	2201      	movs	r2, #1
 80065c8:	4649      	mov	r1, r9
 80065ca:	2021      	movs	r0, #33	; 0x21
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80065cc:	f88d a01f 	strb.w	sl, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 80065d0:	f7fe fa56 	bl	8004a80 <SX1276WriteBuffer>
            if( fixLen == 1 )
 80065d4:	9a01      	ldr	r2, [sp, #4]
 80065d6:	4b7b      	ldr	r3, [pc, #492]	; (80067c4 <SX1276SetRxConfig+0x350>)
 80065d8:	2a00      	cmp	r2, #0
 80065da:	f040 80e0 	bne.w	800679e <SX1276SetRxConfig+0x32a>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80065de:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
 80065e2:	2a00      	cmp	r2, #0
 80065e4:	f040 80bf 	bne.w	8006766 <SX1276SetRxConfig+0x2f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80065e8:	2c09      	cmp	r4, #9
 80065ea:	f000 809c 	beq.w	8006726 <SX1276SetRxConfig+0x2b2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80065ee:	2303      	movs	r3, #3
    SX1276WriteBuffer( addr, &data, 1 );
 80065f0:	2201      	movs	r2, #1
 80065f2:	4649      	mov	r1, r9
 80065f4:	2036      	movs	r0, #54	; 0x36
 80065f6:	f88d 301f 	strb.w	r3, [sp, #31]
 80065fa:	f7fe fa41 	bl	8004a80 <SX1276WriteBuffer>
            if( datarate == 6 )
 80065fe:	2d06      	cmp	r5, #6
 8006600:	d97d      	bls.n	80066fe <SX1276SetRxConfig+0x28a>
    SX1276ReadBuffer( addr, &data, 1 );
 8006602:	2201      	movs	r2, #1
 8006604:	4649      	mov	r1, r9
 8006606:	2031      	movs	r0, #49	; 0x31
 8006608:	f7fe fa58 	bl	8004abc <SX1276ReadBuffer>
    return data;
 800660c:	f89d 301f 	ldrb.w	r3, [sp, #31]
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006610:	f023 0307 	bic.w	r3, r3, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006614:	f043 0303 	orr.w	r3, r3, #3
    SX1276WriteBuffer( addr, &data, 1 );
 8006618:	2201      	movs	r2, #1
 800661a:	4649      	mov	r1, r9
 800661c:	2031      	movs	r0, #49	; 0x31
 800661e:	f88d 301f 	strb.w	r3, [sp, #31]
 8006622:	f7fe fa2d 	bl	8004a80 <SX1276WriteBuffer>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006626:	230a      	movs	r3, #10
    SX1276WriteBuffer( addr, &data, 1 );
 8006628:	2201      	movs	r2, #1
 800662a:	4649      	mov	r1, r9
 800662c:	2037      	movs	r0, #55	; 0x37
 800662e:	f88d 301f 	strb.w	r3, [sp, #31]
 8006632:	f7fe fa25 	bl	8004a80 <SX1276WriteBuffer>
}
 8006636:	b009      	add	sp, #36	; 0x24
 8006638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                while( 1 );
 800663c:	e7fe      	b.n	800663c <SX1276SetRxConfig+0x1c8>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800663e:	4b61      	ldr	r3, [pc, #388]	; (80067c4 <SX1276SetRxConfig+0x350>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8006640:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006642:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006646:	9a01      	ldr	r2, [sp, #4]
 8006648:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800664c:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800664e:	f883 9101 	strb.w	r9, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8006652:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8006656:	f44f 5efa 	mov.w	lr, #8000	; 0x1f40
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800665a:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800665c:	f883 8102 	strb.w	r8, [r3, #258]	; 0x102
    SX1276WriteBuffer( addr, &data, 1 );
 8006660:	f10d 091f 	add.w	r9, sp, #31
            SX1276.Settings.Fsk.Datarate = datarate;
 8006664:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006668:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800666c:	fb0e f707 	mul.w	r7, lr, r7
 8006670:	4e55      	ldr	r6, [pc, #340]	; (80067c8 <SX1276SetRxConfig+0x354>)
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8006672:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80067d0 <SX1276SetRxConfig+0x35c>
 8006676:	fbb8 f8f5 	udiv	r8, r8, r5
    SX1276WriteBuffer( addr, &data, 1 );
 800667a:	2201      	movs	r2, #1
 800667c:	4649      	mov	r1, r9
 800667e:	2002      	movs	r0, #2
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8006680:	fbb7 f5f5 	udiv	r5, r7, r5
 8006684:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8006688:	ea4f 2518 	mov.w	r5, r8, lsr #8
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800668c:	f8c3 b0f0 	str.w	fp, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8006690:	f8a3 a0fc 	strh.w	sl, [r3, #252]	; 0xfc
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8006694:	f88d 501f 	strb.w	r5, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8006698:	f7fe f9f2 	bl	8004a80 <SX1276WriteBuffer>
 800669c:	2201      	movs	r2, #1
 800669e:	4649      	mov	r1, r9
 80066a0:	2003      	movs	r0, #3
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 80066a2:	f88d 801f 	strb.w	r8, [sp, #31]
 80066a6:	4635      	mov	r5, r6
    SX1276WriteBuffer( addr, &data, 1 );
 80066a8:	f7fe f9ea 	bl	8004a80 <SX1276WriteBuffer>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 80066ac:	4631      	mov	r1, r6
 80066ae:	f640 2228 	movw	r2, #2600	; 0xa28
 80066b2:	e001      	b.n	80066b8 <SX1276SetRxConfig+0x244>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80066b4:	f851 2f08 	ldr.w	r2, [r1, #8]!
 80066b8:	4593      	cmp	fp, r2
 80066ba:	d302      	bcc.n	80066c2 <SX1276SetRxConfig+0x24e>
 80066bc:	688b      	ldr	r3, [r1, #8]
 80066be:	459b      	cmp	fp, r3
 80066c0:	d303      	bcc.n	80066ca <SX1276SetRxConfig+0x256>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80066c2:	3401      	adds	r4, #1
 80066c4:	2c15      	cmp	r4, #21
 80066c6:	d1f5      	bne.n	80066b4 <SX1276SetRxConfig+0x240>
    while( 1 );
 80066c8:	e7fe      	b.n	80066c8 <SX1276SetRxConfig+0x254>
            return FskBandwidths[i].RegValue;
 80066ca:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    SX1276WriteBuffer( addr, &data, 1 );
 80066ce:	2201      	movs	r2, #1
 80066d0:	7923      	ldrb	r3, [r4, #4]
 80066d2:	f88d 301f 	strb.w	r3, [sp, #31]
 80066d6:	4649      	mov	r1, r9
 80066d8:	2012      	movs	r0, #18
 80066da:	f7fe f9d1 	bl	8004a80 <SX1276WriteBuffer>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80066de:	9912      	ldr	r1, [sp, #72]	; 0x48
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80066e0:	2300      	movs	r3, #0
 80066e2:	f640 2228 	movw	r2, #2600	; 0xa28
 80066e6:	e001      	b.n	80066ec <SX1276SetRxConfig+0x278>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80066e8:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80066ec:	4291      	cmp	r1, r2
 80066ee:	d302      	bcc.n	80066f6 <SX1276SetRxConfig+0x282>
 80066f0:	68b2      	ldr	r2, [r6, #8]
 80066f2:	4291      	cmp	r1, r2
 80066f4:	d36e      	bcc.n	80067d4 <SX1276SetRxConfig+0x360>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80066f6:	3301      	adds	r3, #1
 80066f8:	2b15      	cmp	r3, #21
 80066fa:	d1f5      	bne.n	80066e8 <SX1276SetRxConfig+0x274>
    while( 1 );
 80066fc:	e7fe      	b.n	80066fc <SX1276SetRxConfig+0x288>
    SX1276ReadBuffer( addr, &data, 1 );
 80066fe:	4649      	mov	r1, r9
 8006700:	2201      	movs	r2, #1
 8006702:	2031      	movs	r0, #49	; 0x31
 8006704:	f7fe f9da 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006708:	f89d 301f 	ldrb.w	r3, [sp, #31]
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800670c:	f023 0307 	bic.w	r3, r3, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006710:	f043 0305 	orr.w	r3, r3, #5
    SX1276WriteBuffer( addr, &data, 1 );
 8006714:	4649      	mov	r1, r9
 8006716:	2201      	movs	r2, #1
 8006718:	2031      	movs	r0, #49	; 0x31
 800671a:	f88d 301f 	strb.w	r3, [sp, #31]
 800671e:	f7fe f9af 	bl	8004a80 <SX1276WriteBuffer>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006722:	230c      	movs	r3, #12
 8006724:	e780      	b.n	8006628 <SX1276SetRxConfig+0x1b4>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8006726:	4a29      	ldr	r2, [pc, #164]	; (80067cc <SX1276SetRxConfig+0x358>)
 8006728:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800672c:	4293      	cmp	r3, r2
 800672e:	f04f 0302 	mov.w	r3, #2
    SX1276WriteBuffer( addr, &data, 1 );
 8006732:	4649      	mov	r1, r9
 8006734:	f04f 0201 	mov.w	r2, #1
 8006738:	f88d 301f 	strb.w	r3, [sp, #31]
 800673c:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8006740:	d837      	bhi.n	80067b2 <SX1276SetRxConfig+0x33e>
    SX1276WriteBuffer( addr, &data, 1 );
 8006742:	f7fe f99d 	bl	8004a80 <SX1276WriteBuffer>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8006746:	237f      	movs	r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 8006748:	2201      	movs	r2, #1
 800674a:	4649      	mov	r1, r9
 800674c:	203a      	movs	r0, #58	; 0x3a
 800674e:	f88d 301f 	strb.w	r3, [sp, #31]
 8006752:	f7fe f995 	bl	8004a80 <SX1276WriteBuffer>
 8006756:	e752      	b.n	80065fe <SX1276SetRxConfig+0x18a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006758:	f1a8 020b 	sub.w	r2, r8, #11
 800675c:	2a01      	cmp	r2, #1
 800675e:	bf8c      	ite	hi
 8006760:	2200      	movhi	r2, #0
 8006762:	2201      	movls	r2, #1
 8006764:	e6dd      	b.n	8006522 <SX1276SetRxConfig+0xae>
    SX1276ReadBuffer( addr, &data, 1 );
 8006766:	2201      	movs	r2, #1
 8006768:	4649      	mov	r1, r9
 800676a:	2044      	movs	r0, #68	; 0x44
 800676c:	f7fe f9a6 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006770:	f89d 201f 	ldrb.w	r2, [sp, #31]
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006774:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006778:	f88d 201f 	strb.w	r2, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 800677c:	4649      	mov	r1, r9
 800677e:	2201      	movs	r2, #1
 8006780:	2044      	movs	r0, #68	; 0x44
 8006782:	f7fe f97d 	bl	8004a80 <SX1276WriteBuffer>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8006786:	4b0f      	ldr	r3, [pc, #60]	; (80067c4 <SX1276SetRxConfig+0x350>)
 8006788:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800678c:	f88d 201f 	strb.w	r2, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8006790:	4649      	mov	r1, r9
 8006792:	2201      	movs	r2, #1
 8006794:	2024      	movs	r0, #36	; 0x24
 8006796:	f7fe f973 	bl	8004a80 <SX1276WriteBuffer>
 800679a:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <SX1276SetRxConfig+0x350>)
 800679c:	e724      	b.n	80065e8 <SX1276SetRxConfig+0x174>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800679e:	9b03      	ldr	r3, [sp, #12]
 80067a0:	f88d 301f 	strb.w	r3, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 80067a4:	2201      	movs	r2, #1
 80067a6:	4649      	mov	r1, r9
 80067a8:	2022      	movs	r0, #34	; 0x22
 80067aa:	f7fe f969 	bl	8004a80 <SX1276WriteBuffer>
 80067ae:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <SX1276SetRxConfig+0x350>)
 80067b0:	e715      	b.n	80065de <SX1276SetRxConfig+0x16a>
 80067b2:	f7fe f965 	bl	8004a80 <SX1276WriteBuffer>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80067b6:	2364      	movs	r3, #100	; 0x64
 80067b8:	e7c6      	b.n	8006748 <SX1276SetRxConfig+0x2d4>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80067ba:	2d0b      	cmp	r5, #11
 80067bc:	bf94      	ite	ls
 80067be:	2200      	movls	r2, #0
 80067c0:	2201      	movhi	r2, #1
 80067c2:	e6ae      	b.n	8006522 <SX1276SetRxConfig+0xae>
 80067c4:	20000c74 	.word	0x20000c74
 80067c8:	0800c2c0 	.word	0x0800c2c0
 80067cc:	1f4add40 	.word	0x1f4add40
 80067d0:	01e84800 	.word	0x01e84800
            return FskBandwidths[i].RegValue;
 80067d4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    SX1276WriteBuffer( addr, &data, 1 );
 80067d8:	2201      	movs	r2, #1
 80067da:	791b      	ldrb	r3, [r3, #4]
 80067dc:	f88d 301f 	strb.w	r3, [sp, #31]
 80067e0:	4649      	mov	r1, r9
 80067e2:	2013      	movs	r0, #19
 80067e4:	f7fe f94c 	bl	8004a80 <SX1276WriteBuffer>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80067e8:	ea4f 231a 	mov.w	r3, sl, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 80067ec:	2201      	movs	r2, #1
 80067ee:	4649      	mov	r1, r9
 80067f0:	2025      	movs	r0, #37	; 0x25
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80067f2:	f88d 301f 	strb.w	r3, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 80067f6:	f7fe f943 	bl	8004a80 <SX1276WriteBuffer>
 80067fa:	2201      	movs	r2, #1
 80067fc:	4649      	mov	r1, r9
 80067fe:	2026      	movs	r0, #38	; 0x26
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006800:	f88d a01f 	strb.w	sl, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8006804:	f7fe f93c 	bl	8004a80 <SX1276WriteBuffer>
            if( fixLen == 1 )
 8006808:	9b01      	ldr	r3, [sp, #4]
 800680a:	b35b      	cbz	r3, 8006864 <SX1276SetRxConfig+0x3f0>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800680c:	9b03      	ldr	r3, [sp, #12]
 800680e:	f88d 301f 	strb.w	r3, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8006812:	2201      	movs	r2, #1
 8006814:	4649      	mov	r1, r9
 8006816:	2032      	movs	r0, #50	; 0x32
 8006818:	f7fe f932 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 800681c:	2201      	movs	r2, #1
 800681e:	4649      	mov	r1, r9
 8006820:	2030      	movs	r0, #48	; 0x30
 8006822:	f7fe f94b 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006826:	f89d 301f 	ldrb.w	r3, [sp, #31]
                           RF_PACKETCONFIG1_CRC_MASK &
 800682a:	f003 036f 	and.w	r3, r3, #111	; 0x6f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800682e:	9a02      	ldr	r2, [sp, #8]
    SX1276WriteBuffer( addr, &data, 1 );
 8006830:	4649      	mov	r1, r9
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006832:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    SX1276WriteBuffer( addr, &data, 1 );
 8006836:	2030      	movs	r0, #48	; 0x30
 8006838:	2201      	movs	r2, #1
 800683a:	f88d 301f 	strb.w	r3, [sp, #31]
 800683e:	f7fe f91f 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006842:	4649      	mov	r1, r9
 8006844:	2201      	movs	r2, #1
 8006846:	2031      	movs	r0, #49	; 0x31
 8006848:	f7fe f938 	bl	8004abc <SX1276ReadBuffer>
    return data;
 800684c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8006850:	2201      	movs	r2, #1
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8006852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8006856:	4649      	mov	r1, r9
 8006858:	2031      	movs	r0, #49	; 0x31
 800685a:	f88d 301f 	strb.w	r3, [sp, #31]
 800685e:	f7fe f90f 	bl	8004a80 <SX1276WriteBuffer>
        break;
 8006862:	e6e8      	b.n	8006636 <SX1276SetRxConfig+0x1c2>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8006864:	23ff      	movs	r3, #255	; 0xff
    SX1276WriteBuffer( addr, &data, 1 );
 8006866:	2201      	movs	r2, #1
 8006868:	4649      	mov	r1, r9
 800686a:	2032      	movs	r0, #50	; 0x32
 800686c:	f88d 301f 	strb.w	r3, [sp, #31]
 8006870:	f7fe f906 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006874:	2201      	movs	r2, #1
 8006876:	4649      	mov	r1, r9
 8006878:	2030      	movs	r0, #48	; 0x30
 800687a:	f7fe f91f 	bl	8004abc <SX1276ReadBuffer>
    return data;
 800687e:	f89d 301f 	ldrb.w	r3, [sp, #31]
                           RF_PACKETCONFIG1_CRC_MASK &
 8006882:	f003 036f 	and.w	r3, r3, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006886:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800688a:	e7d0      	b.n	800682e <SX1276SetRxConfig+0x3ba>

0800688c <SX1276SetTxConfig>:
{
 800688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	b087      	sub	sp, #28
 8006892:	461e      	mov	r6, r3
 8006894:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800689e:	9302      	str	r3, [sp, #8]
 80068a0:	460d      	mov	r5, r1
 80068a2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80068a6:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 80068aa:	f89d 904c 	ldrb.w	r9, [sp, #76]	; 0x4c
 80068ae:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 80068b2:	f89d 705c 	ldrb.w	r7, [sp, #92]	; 0x5c
 80068b6:	9303      	str	r3, [sp, #12]
 80068b8:	4604      	mov	r4, r0
 80068ba:	4690      	mov	r8, r2
    SX1276SetModem( modem );
 80068bc:	f7ff fbf0 	bl	80060a0 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 80068c0:	4628      	mov	r0, r5
 80068c2:	f7fe fa27 	bl	8004d14 <SX1276SetRfTxPower>
    switch( modem )
 80068c6:	2c00      	cmp	r4, #0
 80068c8:	f000 80a5 	beq.w	8006a16 <SX1276SetTxConfig+0x18a>
 80068cc:	2c01      	cmp	r4, #1
 80068ce:	f040 809e 	bne.w	8006a0e <SX1276SetTxConfig+0x182>
            SX1276.Settings.LoRa.Power = power;
 80068d2:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8006ba0 <SX1276SetTxConfig+0x314>
            if( bandwidth > 2 )
 80068d6:	2e02      	cmp	r6, #2
            SX1276.Settings.LoRa.Power = power;
 80068d8:	f888 511c 	strb.w	r5, [r8, #284]	; 0x11c
            if( bandwidth > 2 )
 80068dc:	f200 809a 	bhi.w	8006a14 <SX1276SetTxConfig+0x188>
            bandwidth += 7;
 80068e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80068e2:	9b03      	ldr	r3, [sp, #12]
 80068e4:	f888 3130 	strb.w	r3, [r8, #304]	; 0x130
 80068e8:	2d06      	cmp	r5, #6
            SX1276.Settings.LoRa.Datarate = datarate;
 80068ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068ec:	f8c8 3124 	str.w	r3, [r8, #292]	; 0x124
 80068f0:	bf38      	it	cc
 80068f2:	2506      	movcc	r5, #6
            SX1276.Settings.LoRa.Coderate = coderate;
 80068f4:	9b01      	ldr	r3, [sp, #4]
 80068f6:	f888 3129 	strb.w	r3, [r8, #297]	; 0x129
            bandwidth += 7;
 80068fa:	3607      	adds	r6, #7
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80068fc:	9b02      	ldr	r3, [sp, #8]
 80068fe:	f888 312f 	strb.w	r3, [r8, #303]	; 0x12f
 8006902:	2d0c      	cmp	r5, #12
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8006904:	9b18      	ldr	r3, [sp, #96]	; 0x60
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8006906:	f888 7131 	strb.w	r7, [r8, #305]	; 0x131
 800690a:	bf28      	it	cs
 800690c:	250c      	movcs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800690e:	2e07      	cmp	r6, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8006910:	f8c8 6120 	str.w	r6, [r8, #288]	; 0x120
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8006914:	f8a8 a12a 	strh.w	sl, [r8, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8006918:	f888 912c 	strb.w	r9, [r8, #300]	; 0x12c
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800691c:	f888 b12e 	strb.w	fp, [r8, #302]	; 0x12e
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8006920:	f8c8 3134 	str.w	r3, [r8, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006924:	f000 80fe 	beq.w	8006b24 <SX1276SetTxConfig+0x298>
 8006928:	2e08      	cmp	r6, #8
 800692a:	f000 8130 	beq.w	8006b8e <SX1276SetTxConfig+0x302>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800692e:	2300      	movs	r3, #0
 8006930:	f888 3128 	strb.w	r3, [r8, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006934:	9b02      	ldr	r3, [sp, #8]
    SX1276ReadBuffer( addr, &data, 1 );
 8006936:	f10d 0417 	add.w	r4, sp, #23
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800693a:	2b00      	cmp	r3, #0
 800693c:	f040 810d 	bne.w	8006b5a <SX1276SetTxConfig+0x2ce>
    SX1276ReadBuffer( addr, &data, 1 );
 8006940:	2201      	movs	r2, #1
 8006942:	4621      	mov	r1, r4
 8006944:	201d      	movs	r0, #29
 8006946:	f7fe f8b9 	bl	8004abc <SX1276ReadBuffer>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800694a:	9b01      	ldr	r3, [sp, #4]
 800694c:	ea49 0943 	orr.w	r9, r9, r3, lsl #1
    SX1276WriteBuffer( addr, &data, 1 );
 8006950:	2201      	movs	r2, #1
 8006952:	4621      	mov	r1, r4
 8006954:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006956:	ea49 1606 	orr.w	r6, r9, r6, lsl #4
 800695a:	f88d 6017 	strb.w	r6, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 800695e:	f7fe f88f 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006962:	2201      	movs	r2, #1
 8006964:	4621      	mov	r1, r4
 8006966:	201e      	movs	r0, #30
 8006968:	f7fe f8a8 	bl	8004abc <SX1276ReadBuffer>
    return data;
 800696c:	f89d 3017 	ldrb.w	r3, [sp, #23]
                           RFLR_MODEMCONFIG2_SF_MASK &
 8006970:	f003 030b 	and.w	r3, r3, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006974:	ea43 0b8b 	orr.w	fp, r3, fp, lsl #2
    SX1276WriteBuffer( addr, &data, 1 );
 8006978:	2201      	movs	r2, #1
 800697a:	4621      	mov	r1, r4
 800697c:	201e      	movs	r0, #30
            SX1276Write( REG_LR_MODEMCONFIG2,
 800697e:	ea4b 1505 	orr.w	r5, fp, r5, lsl #4
 8006982:	f88d 5017 	strb.w	r5, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8006986:	f7fe f87b 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 800698a:	2201      	movs	r2, #1
 800698c:	4621      	mov	r1, r4
 800698e:	2026      	movs	r0, #38	; 0x26
 8006990:	f7fe f894 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006994:	f89d 3017 	ldrb.w	r3, [sp, #23]
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006998:	f898 2128 	ldrb.w	r2, [r8, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800699c:	f023 0308 	bic.w	r3, r3, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80069a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    SX1276WriteBuffer( addr, &data, 1 );
 80069a4:	4621      	mov	r1, r4
 80069a6:	2201      	movs	r2, #1
 80069a8:	2026      	movs	r0, #38	; 0x26
 80069aa:	f88d 3017 	strb.w	r3, [sp, #23]
 80069ae:	f7fe f867 	bl	8004a80 <SX1276WriteBuffer>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80069b2:	ea4f 231a 	mov.w	r3, sl, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 80069b6:	2201      	movs	r2, #1
 80069b8:	4621      	mov	r1, r4
 80069ba:	2020      	movs	r0, #32
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80069bc:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 80069c0:	f7fe f85e 	bl	8004a80 <SX1276WriteBuffer>
 80069c4:	2201      	movs	r2, #1
 80069c6:	4621      	mov	r1, r4
 80069c8:	2021      	movs	r0, #33	; 0x21
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80069ca:	f88d a017 	strb.w	sl, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 80069ce:	f7fe f857 	bl	8004a80 <SX1276WriteBuffer>
            if( datarate == 6 )
 80069d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069d4:	2b06      	cmp	r3, #6
 80069d6:	f240 80ac 	bls.w	8006b32 <SX1276SetTxConfig+0x2a6>
    SX1276ReadBuffer( addr, &data, 1 );
 80069da:	2201      	movs	r2, #1
 80069dc:	4621      	mov	r1, r4
 80069de:	2031      	movs	r0, #49	; 0x31
 80069e0:	f7fe f86c 	bl	8004abc <SX1276ReadBuffer>
    return data;
 80069e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80069e8:	f023 0307 	bic.w	r3, r3, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80069ec:	f043 0303 	orr.w	r3, r3, #3
    SX1276WriteBuffer( addr, &data, 1 );
 80069f0:	2201      	movs	r2, #1
 80069f2:	4621      	mov	r1, r4
 80069f4:	2031      	movs	r0, #49	; 0x31
 80069f6:	f88d 3017 	strb.w	r3, [sp, #23]
 80069fa:	f7fe f841 	bl	8004a80 <SX1276WriteBuffer>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80069fe:	230a      	movs	r3, #10
    SX1276WriteBuffer( addr, &data, 1 );
 8006a00:	2201      	movs	r2, #1
 8006a02:	4621      	mov	r1, r4
 8006a04:	2037      	movs	r0, #55	; 0x37
 8006a06:	f88d 3017 	strb.w	r3, [sp, #23]
 8006a0a:	f7fe f839 	bl	8004a80 <SX1276WriteBuffer>
}
 8006a0e:	b007      	add	sp, #28
 8006a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                while( 1 );
 8006a14:	e7fe      	b.n	8006a14 <SX1276SetTxConfig+0x188>
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8006a16:	4961      	ldr	r1, [pc, #388]	; (8006b9c <SX1276SetTxConfig+0x310>)
 8006a18:	fba1 0308 	umull	r0, r3, r1, r8
 8006a1c:	f643 5209 	movw	r2, #15625	; 0x3d09
 8006a20:	0b1b      	lsrs	r3, r3, #12
 8006a22:	fb02 8013 	mls	r0, r2, r3, r8
 8006a26:	f641 6284 	movw	r2, #7812	; 0x1e84
 8006a2a:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8006a2e:	fba1 1202 	umull	r1, r2, r1, r2
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8006a32:	021b      	lsls	r3, r3, #8
 8006a34:	eb03 3312 	add.w	r3, r3, r2, lsr #12
            SX1276.Settings.Fsk.Power = power;
 8006a38:	4a59      	ldr	r2, [pc, #356]	; (8006ba0 <SX1276SetTxConfig+0x314>)
            SX1276.Settings.Fsk.Datarate = datarate;
 8006a3a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006a3c:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006a40:	9918      	ldr	r1, [sp, #96]	; 0x60
            SX1276.Settings.Fsk.Power = power;
 8006a42:	f882 50e8 	strb.w	r5, [r2, #232]	; 0xe8
    SX1276WriteBuffer( addr, &data, 1 );
 8006a46:	f10d 0417 	add.w	r4, sp, #23
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006a4a:	e9c2 863b 	strd	r8, r6, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8006a4e:	f882 7101 	strb.w	r7, [r2, #257]	; 0x101
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8006a52:	f8a2 a0fc 	strh.w	sl, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006a56:	f882 90fe 	strb.w	r9, [r2, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006a5a:	f882 b100 	strb.w	fp, [r2, #256]	; 0x100
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006a5e:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8006a62:	0a1a      	lsrs	r2, r3, #8
    SX1276WriteBuffer( addr, &data, 1 );
 8006a64:	4621      	mov	r1, r4
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8006a66:	f88d 2017 	strb.w	r2, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8006a6a:	2004      	movs	r0, #4
 8006a6c:	2201      	movs	r2, #1
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8006a6e:	9301      	str	r3, [sp, #4]
    SX1276WriteBuffer( addr, &data, 1 );
 8006a70:	f7fe f806 	bl	8004a80 <SX1276WriteBuffer>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8006a74:	9b01      	ldr	r3, [sp, #4]
 8006a76:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	2005      	movs	r0, #5
 8006a80:	f7fd fffe 	bl	8004a80 <SX1276WriteBuffer>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8006a84:	4f47      	ldr	r7, [pc, #284]	; (8006ba4 <SX1276SetTxConfig+0x318>)
 8006a86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a88:	fbb7 f7f3 	udiv	r7, r7, r3
    SX1276WriteBuffer( addr, &data, 1 );
 8006a8c:	4621      	mov	r1, r4
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8006a8e:	0a3b      	lsrs	r3, r7, #8
    SX1276WriteBuffer( addr, &data, 1 );
 8006a90:	2201      	movs	r2, #1
 8006a92:	2002      	movs	r0, #2
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8006a94:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8006a98:	f7fd fff2 	bl	8004a80 <SX1276WriteBuffer>
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	2003      	movs	r0, #3
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8006aa2:	f88d 7017 	strb.w	r7, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8006aa6:	f7fd ffeb 	bl	8004a80 <SX1276WriteBuffer>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006aaa:	ea4f 231a 	mov.w	r3, sl, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 8006aae:	4621      	mov	r1, r4
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	2025      	movs	r0, #37	; 0x25
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006ab4:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8006ab8:	f7fd ffe2 	bl	8004a80 <SX1276WriteBuffer>
 8006abc:	4621      	mov	r1, r4
 8006abe:	2201      	movs	r2, #1
 8006ac0:	2026      	movs	r0, #38	; 0x26
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8006ac2:	f88d a017 	strb.w	sl, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8006ac6:	f7fd ffdb 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006aca:	2201      	movs	r2, #1
 8006acc:	4621      	mov	r1, r4
 8006ace:	2030      	movs	r0, #48	; 0x30
 8006ad0:	f7fd fff4 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006ad4:	f89d 3017 	ldrb.w	r3, [sp, #23]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006ad8:	f1b9 0f00 	cmp.w	r9, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 8006adc:	f003 036f 	and.w	r3, r3, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006ae0:	bf14      	ite	ne
 8006ae2:	2200      	movne	r2, #0
 8006ae4:	f06f 027f 	mvneq.w	r2, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006ae8:	ea43 1b0b 	orr.w	fp, r3, fp, lsl #4
 8006aec:	ea42 0b0b 	orr.w	fp, r2, fp
    SX1276WriteBuffer( addr, &data, 1 );
 8006af0:	4621      	mov	r1, r4
 8006af2:	2201      	movs	r2, #1
 8006af4:	2030      	movs	r0, #48	; 0x30
 8006af6:	f88d b017 	strb.w	fp, [sp, #23]
 8006afa:	f7fd ffc1 	bl	8004a80 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006afe:	4621      	mov	r1, r4
 8006b00:	2201      	movs	r2, #1
 8006b02:	2031      	movs	r0, #49	; 0x31
 8006b04:	f7fd ffda 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006b08:	f89d 3017 	ldrb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8006b0c:	2201      	movs	r2, #1
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8006b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8006b12:	4621      	mov	r1, r4
 8006b14:	2031      	movs	r0, #49	; 0x31
 8006b16:	f88d 3017 	strb.w	r3, [sp, #23]
 8006b1a:	f7fd ffb1 	bl	8004a80 <SX1276WriteBuffer>
}
 8006b1e:	b007      	add	sp, #28
 8006b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006b24:	f1a5 030b 	sub.w	r3, r5, #11
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	bf8c      	ite	hi
 8006b2c:	2300      	movhi	r3, #0
 8006b2e:	2301      	movls	r3, #1
 8006b30:	e6fe      	b.n	8006930 <SX1276SetTxConfig+0xa4>
    SX1276ReadBuffer( addr, &data, 1 );
 8006b32:	4621      	mov	r1, r4
 8006b34:	2201      	movs	r2, #1
 8006b36:	2031      	movs	r0, #49	; 0x31
 8006b38:	f7fd ffc0 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006b3c:	f89d 3017 	ldrb.w	r3, [sp, #23]
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006b40:	f023 0307 	bic.w	r3, r3, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006b44:	f043 0305 	orr.w	r3, r3, #5
    SX1276WriteBuffer( addr, &data, 1 );
 8006b48:	4621      	mov	r1, r4
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	2031      	movs	r0, #49	; 0x31
 8006b4e:	f88d 3017 	strb.w	r3, [sp, #23]
 8006b52:	f7fd ff95 	bl	8004a80 <SX1276WriteBuffer>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006b56:	230c      	movs	r3, #12
 8006b58:	e752      	b.n	8006a00 <SX1276SetTxConfig+0x174>
    SX1276ReadBuffer( addr, &data, 1 );
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	2044      	movs	r0, #68	; 0x44
 8006b60:	f7fd ffac 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006b64:	f89d 3017 	ldrb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8006b68:	4621      	mov	r1, r4
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 8006b6e:	2201      	movs	r2, #1
 8006b70:	2044      	movs	r0, #68	; 0x44
 8006b72:	f88d 3017 	strb.w	r3, [sp, #23]
 8006b76:	f7fd ff83 	bl	8004a80 <SX1276WriteBuffer>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8006b7a:	f898 3130 	ldrb.w	r3, [r8, #304]	; 0x130
 8006b7e:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8006b82:	2201      	movs	r2, #1
 8006b84:	4621      	mov	r1, r4
 8006b86:	2024      	movs	r0, #36	; 0x24
 8006b88:	f7fd ff7a 	bl	8004a80 <SX1276WriteBuffer>
 8006b8c:	e6d8      	b.n	8006940 <SX1276SetTxConfig+0xb4>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8006b8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b90:	2b0b      	cmp	r3, #11
 8006b92:	bf94      	ite	ls
 8006b94:	2300      	movls	r3, #0
 8006b96:	2301      	movhi	r3, #1
 8006b98:	e6ca      	b.n	8006930 <SX1276SetTxConfig+0xa4>
 8006b9a:	bf00      	nop
 8006b9c:	431bde83 	.word	0x431bde83
 8006ba0:	20000c74 	.word	0x20000c74
 8006ba4:	01e84800 	.word	0x01e84800

08006ba8 <SX1276SetTxContinuousWave>:
{
 8006ba8:	b530      	push	{r4, r5, lr}
 8006baa:	b08f      	sub	sp, #60	; 0x3c
    uint32_t timeout = ( uint32_t )time * 1000;
 8006bac:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8006bb0:	fb02 f404 	mul.w	r4, r2, r4
{
 8006bb4:	910b      	str	r1, [sp, #44]	; 0x2c
    SX1276SetChannel( freq );
 8006bb6:	f7fe fdd9 	bl	800576c <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2005      	movs	r0, #5
 8006bbe:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8006bc2:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8006bc6:	e9cd 3407 	strd	r3, r4, [sp, #28]
 8006bca:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006bce:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bd6:	9200      	str	r2, [sp, #0]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	f7ff fe57 	bl	800688c <SX1276SetTxConfig>
    SX1276ReadBuffer( addr, &data, 1 );
 8006bde:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8006be2:	2201      	movs	r2, #1
 8006be4:	2031      	movs	r0, #49	; 0x31
 8006be6:	f7fd ff69 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006bea:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006bee:	4d17      	ldr	r5, [pc, #92]	; (8006c4c <SX1276SetTxContinuousWave+0xa4>)
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8006bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8006bf4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	2031      	movs	r0, #49	; 0x31
 8006bfc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8006c00:	f7fd ff3e 	bl	8004a80 <SX1276WriteBuffer>
 8006c04:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8006c08:	23f0      	movs	r3, #240	; 0xf0
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	2040      	movs	r0, #64	; 0x40
 8006c0e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8006c12:	f7fd ff35 	bl	8004a80 <SX1276WriteBuffer>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8006c16:	23a0      	movs	r3, #160	; 0xa0
    SX1276WriteBuffer( addr, &data, 1 );
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8006c1e:	2041      	movs	r0, #65	; 0x41
 8006c20:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8006c24:	f7fd ff2c 	bl	8004a80 <SX1276WriteBuffer>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f7fe fa24 	bl	8005078 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8006c30:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <SX1276SetTxContinuousWave+0xa8>)
    TimerStart( &TxTimeoutTimer );
 8006c32:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8006c34:	2202      	movs	r2, #2
 8006c36:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8006c3a:	f7fe f913 	bl	8004e64 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8006c3e:	2003      	movs	r0, #3
}
 8006c40:	b00f      	add	sp, #60	; 0x3c
 8006c42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8006c46:	f7fe bd15 	b.w	8005674 <SX1276SetOpMode>
 8006c4a:	bf00      	nop
 8006c4c:	20000db8 	.word	0x20000db8
 8006c50:	20000c74 	.word	0x20000c74

08006c54 <SX1276OnTimeoutIrq>:
{
 8006c54:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8006c56:	4e4b      	ldr	r6, [pc, #300]	; (8006d84 <SX1276OnTimeoutIrq+0x130>)
 8006c58:	f896 40e0 	ldrb.w	r4, [r6, #224]	; 0xe0
 8006c5c:	2c01      	cmp	r4, #1
{
 8006c5e:	b082      	sub	sp, #8
    switch( SX1276.Settings.State )
 8006c60:	d04e      	beq.n	8006d00 <SX1276OnTimeoutIrq+0xac>
 8006c62:	2c02      	cmp	r4, #2
 8006c64:	d155      	bne.n	8006d12 <SX1276OnTimeoutIrq+0xbe>
        SX1276Reset( );
 8006c66:	f7fd ffbf 	bl	8004be8 <SX1276Reset>
        RxChainCalibration( );
 8006c6a:	f7fe fdb5 	bl	80057d8 <RxChainCalibration>
        SX1276SetAntSwLowPower( true );
 8006c6e:	2001      	movs	r0, #1
 8006c70:	f7fd ffb4 	bl	8004bdc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8006c74:	2201      	movs	r2, #1
 8006c76:	4610      	mov	r0, r2
 8006c78:	f10d 0107 	add.w	r1, sp, #7
 8006c7c:	f7fd ff1e 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006c80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006c84:	4c40      	ldr	r4, [pc, #256]	; (8006d88 <SX1276OnTimeoutIrq+0x134>)
    SX1276WriteBuffer( addr, &data, 1 );
 8006c86:	2201      	movs	r2, #1
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006c88:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f10d 0107 	add.w	r1, sp, #7
 8006c92:	f88d 3007 	strb.w	r3, [sp, #7]
 8006c96:	f104 052d 	add.w	r5, r4, #45	; 0x2d
 8006c9a:	f7fd fef1 	bl	8004a80 <SX1276WriteBuffer>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	e001      	b.n	8006ca6 <SX1276OnTimeoutIrq+0x52>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8006ca2:	f814 0f03 	ldrb.w	r0, [r4, #3]!
 8006ca6:	f7ff f9fb 	bl	80060a0 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006caa:	78a3      	ldrb	r3, [r4, #2]
    SX1276WriteBuffer( addr, &data, 1 );
 8006cac:	7860      	ldrb	r0, [r4, #1]
 8006cae:	f88d 3007 	strb.w	r3, [sp, #7]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f10d 0107 	add.w	r1, sp, #7
 8006cb8:	f7fd fee2 	bl	8004a80 <SX1276WriteBuffer>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006cbc:	42ac      	cmp	r4, r5
 8006cbe:	d1f0      	bne.n	8006ca2 <SX1276OnTimeoutIrq+0x4e>
        SX1276SetModem( MODEM_FSK );
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	f7ff f9ed 	bl	80060a0 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8006cc6:	f896 4138 	ldrb.w	r4, [r6, #312]	; 0x138
    SX1276SetModem( MODEM_LORA );
 8006cca:	2001      	movs	r0, #1
 8006ccc:	f7ff f9e8 	bl	80060a0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8006cd0:	f886 4138 	strb.w	r4, [r6, #312]	; 0x138
    if( enable == true )
 8006cd4:	b9fc      	cbnz	r4, 8006d16 <SX1276OnTimeoutIrq+0xc2>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8006cd6:	2312      	movs	r3, #18
    SX1276WriteBuffer( addr, &data, 1 );
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f10d 0107 	add.w	r1, sp, #7
 8006cde:	2039      	movs	r0, #57	; 0x39
 8006ce0:	f88d 3007 	strb.w	r3, [sp, #7]
 8006ce4:	f7fd fecc 	bl	8004a80 <SX1276WriteBuffer>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006ce8:	4b28      	ldr	r3, [pc, #160]	; (8006d8c <SX1276OnTimeoutIrq+0x138>)
 8006cea:	681b      	ldr	r3, [r3, #0]
        SX1276.Settings.State = RF_IDLE;
 8006cec:	2200      	movs	r2, #0
 8006cee:	f886 20e0 	strb.w	r2, [r6, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006cf2:	b173      	cbz	r3, 8006d12 <SX1276OnTimeoutIrq+0xbe>
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	b163      	cbz	r3, 8006d12 <SX1276OnTimeoutIrq+0xbe>
}
 8006cf8:	b002      	add	sp, #8
 8006cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
 8006cfe:	4718      	bx	r3
        if( SX1276.Settings.Modem == MODEM_FSK )
 8006d00:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
 8006d04:	b14b      	cbz	r3, 8006d1a <SX1276OnTimeoutIrq+0xc6>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006d06:	4b21      	ldr	r3, [pc, #132]	; (8006d8c <SX1276OnTimeoutIrq+0x138>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	b113      	cbz	r3, 8006d12 <SX1276OnTimeoutIrq+0xbe>
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1f2      	bne.n	8006cf8 <SX1276OnTimeoutIrq+0xa4>
}
 8006d12:	b002      	add	sp, #8
 8006d14:	bd70      	pop	{r4, r5, r6, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8006d16:	2334      	movs	r3, #52	; 0x34
 8006d18:	e7de      	b.n	8006cd8 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006d1a:	210b      	movs	r1, #11
    SX1276WriteBuffer( addr, &data, 1 );
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	f88d 1007 	strb.w	r1, [sp, #7]
 8006d22:	203e      	movs	r0, #62	; 0x3e
 8006d24:	f10d 0107 	add.w	r1, sp, #7
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006d28:	f8a6 310c 	strh.w	r3, [r6, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006d2c:	f8a6 3118 	strh.w	r3, [r6, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8006d30:	f8a6 3116 	strh.w	r3, [r6, #278]	; 0x116
    SX1276WriteBuffer( addr, &data, 1 );
 8006d34:	f7fd fea4 	bl	8004a80 <SX1276WriteBuffer>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006d38:	2310      	movs	r3, #16
    SX1276WriteBuffer( addr, &data, 1 );
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	f10d 0107 	add.w	r1, sp, #7
 8006d40:	203f      	movs	r0, #63	; 0x3f
 8006d42:	f88d 3007 	strb.w	r3, [sp, #7]
 8006d46:	f7fd fe9b 	bl	8004a80 <SX1276WriteBuffer>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8006d4a:	f896 3102 	ldrb.w	r3, [r6, #258]	; 0x102
 8006d4e:	b193      	cbz	r3, 8006d76 <SX1276OnTimeoutIrq+0x122>
    SX1276ReadBuffer( addr, &data, 1 );
 8006d50:	4622      	mov	r2, r4
 8006d52:	f10d 0107 	add.w	r1, sp, #7
 8006d56:	200d      	movs	r0, #13
 8006d58:	f7fd feb0 	bl	8004abc <SX1276ReadBuffer>
    return data;
 8006d5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006d60:	4622      	mov	r2, r4
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8006d66:	f10d 0107 	add.w	r1, sp, #7
 8006d6a:	200d      	movs	r0, #13
 8006d6c:	f88d 3007 	strb.w	r3, [sp, #7]
 8006d70:	f7fd fe86 	bl	8004a80 <SX1276WriteBuffer>
 8006d74:	e7c7      	b.n	8006d06 <SX1276OnTimeoutIrq+0xb2>
                TimerStop( &RxTimeoutSyncWord );
 8006d76:	4806      	ldr	r0, [pc, #24]	; (8006d90 <SX1276OnTimeoutIrq+0x13c>)
                SX1276.Settings.State = RF_IDLE;
 8006d78:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 8006d7c:	f7fe f934 	bl	8004fe8 <TimerStop>
 8006d80:	e7c1      	b.n	8006d06 <SX1276OnTimeoutIrq+0xb2>
 8006d82:	bf00      	nop
 8006d84:	20000c74 	.word	0x20000c74
 8006d88:	0800c370 	.word	0x0800c370
 8006d8c:	20000b40 	.word	0x20000b40
 8006d90:	20000b44 	.word	0x20000b44

08006d94 <SX1276Write>:
{
 8006d94:	b500      	push	{lr}
 8006d96:	b083      	sub	sp, #12
 8006d98:	460b      	mov	r3, r1
    SX1276WriteBuffer( addr, &data, 1 );
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f10d 0107 	add.w	r1, sp, #7
{
 8006da0:	f88d 3007 	strb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006da4:	f7fd fe6c 	bl	8004a80 <SX1276WriteBuffer>
}
 8006da8:	b003      	add	sp, #12
 8006daa:	f85d fb04 	ldr.w	pc, [sp], #4
 8006dae:	bf00      	nop

08006db0 <SX1276Read>:
{
 8006db0:	b500      	push	{lr}
 8006db2:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 8006db4:	2201      	movs	r2, #1
 8006db6:	f10d 0107 	add.w	r1, sp, #7
 8006dba:	f7fd fe7f 	bl	8004abc <SX1276ReadBuffer>
}
 8006dbe:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006dc2:	b003      	add	sp, #12
 8006dc4:	f85d fb04 	ldr.w	pc, [sp], #4

08006dc8 <SX1276SetMaxPayloadLength>:
{
 8006dc8:	b530      	push	{r4, r5, lr}
 8006dca:	4604      	mov	r4, r0
 8006dcc:	b083      	sub	sp, #12
 8006dce:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 8006dd0:	f7ff f966 	bl	80060a0 <SX1276SetModem>
    switch( modem )
 8006dd4:	b15c      	cbz	r4, 8006dee <SX1276SetMaxPayloadLength+0x26>
 8006dd6:	2c01      	cmp	r4, #1
 8006dd8:	d107      	bne.n	8006dea <SX1276SetMaxPayloadLength+0x22>
    SX1276WriteBuffer( addr, &data, 1 );
 8006dda:	4622      	mov	r2, r4
 8006ddc:	f10d 0107 	add.w	r1, sp, #7
 8006de0:	2023      	movs	r0, #35	; 0x23
 8006de2:	f88d 5007 	strb.w	r5, [sp, #7]
 8006de6:	f7fd fe4b 	bl	8004a80 <SX1276WriteBuffer>
}
 8006dea:	b003      	add	sp, #12
 8006dec:	bd30      	pop	{r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <SX1276SetMaxPayloadLength+0x44>)
 8006df0:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1f8      	bne.n	8006dea <SX1276SetMaxPayloadLength+0x22>
    SX1276WriteBuffer( addr, &data, 1 );
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f10d 0107 	add.w	r1, sp, #7
 8006dfe:	2032      	movs	r0, #50	; 0x32
 8006e00:	f88d 5007 	strb.w	r5, [sp, #7]
 8006e04:	f7fd fe3c 	bl	8004a80 <SX1276WriteBuffer>
}
 8006e08:	b003      	add	sp, #12
 8006e0a:	bd30      	pop	{r4, r5, pc}
 8006e0c:	20000c74 	.word	0x20000c74

08006e10 <SX1276SetPublicNetwork>:
{
 8006e10:	b510      	push	{r4, lr}
 8006e12:	4604      	mov	r4, r0
 8006e14:	b082      	sub	sp, #8
    SX1276SetModem( MODEM_LORA );
 8006e16:	2001      	movs	r0, #1
 8006e18:	f7ff f942 	bl	80060a0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8006e1c:	4b08      	ldr	r3, [pc, #32]	; (8006e40 <SX1276SetPublicNetwork+0x30>)
 8006e1e:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 8006e22:	b154      	cbz	r4, 8006e3a <SX1276SetPublicNetwork+0x2a>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8006e24:	2334      	movs	r3, #52	; 0x34
    SX1276WriteBuffer( addr, &data, 1 );
 8006e26:	2201      	movs	r2, #1
 8006e28:	f10d 0107 	add.w	r1, sp, #7
 8006e2c:	2039      	movs	r0, #57	; 0x39
 8006e2e:	f88d 3007 	strb.w	r3, [sp, #7]
 8006e32:	f7fd fe25 	bl	8004a80 <SX1276WriteBuffer>
}
 8006e36:	b002      	add	sp, #8
 8006e38:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8006e3a:	2312      	movs	r3, #18
 8006e3c:	e7f3      	b.n	8006e26 <SX1276SetPublicNetwork+0x16>
 8006e3e:	bf00      	nop
 8006e40:	20000c74 	.word	0x20000c74

08006e44 <SX1276GetWakeupTime>:
{
 8006e44:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8006e46:	f7fd fec7 	bl	8004bd8 <SX1276GetBoardTcxoWakeupTime>
}
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	bd08      	pop	{r3, pc}
 8006e4e:	bf00      	nop

08006e50 <uart_stm32_config_get>:
	LL_USART_SetParity(UartInstance, parity);
}

static inline uint32_t uart_stm32_get_parity(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006e50:	6843      	ldr	r3, [r0, #4]
static int uart_stm32_config_get(const struct device *dev,
				 struct uart_config *cfg)
{
	struct uart_stm32_data *data = dev->data;

	cfg->baudrate = data->baud_rate;
 8006e52:	6900      	ldr	r0, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006e54:	681a      	ldr	r2, [r3, #0]
	cfg->baudrate = data->baud_rate;
 8006e56:	6800      	ldr	r0, [r0, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8006e58:	6813      	ldr	r3, [r2, #0]
 8006e5a:	6008      	str	r0, [r1, #0]
 8006e5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8006e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		return UART_CFG_PARITY_NONE;
 8006e64:	bf1d      	ittte	ne
 8006e66:	f5a3 63c0 	subne.w	r3, r3, #1536	; 0x600
 8006e6a:	fab3 f383 	clzne	r3, r3
 8006e6e:	095b      	lsrne	r3, r3, #5
	switch (parity) {
 8006e70:	2302      	moveq	r3, #2
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8006e72:	710b      	strb	r3, [r1, #4]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8006e74:	6853      	ldr	r3, [r2, #4]
 8006e76:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8006e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7e:	d02f      	beq.n	8006ee0 <uart_stm32_config_get+0x90>
 8006e80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e84:	d020      	beq.n	8006ec8 <uart_stm32_config_get+0x78>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	bf14      	ite	ne
 8006e8a:	2303      	movne	r3, #3
 8006e8c:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8006e8e:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8006e90:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8006e92:	6810      	ldr	r0, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8006e94:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	switch (db) {
 8006e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8006e9c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8006ea0:	d019      	beq.n	8006ed6 <uart_stm32_config_get+0x86>
 8006ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ea6:	d111      	bne.n	8006ecc <uart_stm32_config_get+0x7c>
			return UART_CFG_DATA_BITS_6;
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	bf0c      	ite	eq
 8006eac:	2302      	moveq	r3, #2
 8006eae:	2301      	movne	r3, #1
		uart_stm32_get_stopbits(dev));
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8006eb0:	718b      	strb	r3, [r1, #6]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8006eb2:	6893      	ldr	r3, [r2, #8]
 8006eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8006eb8:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8006ebc:	fab3 f383 	clz	r3, r3
 8006ec0:	095b      	lsrs	r3, r3, #5
		uart_stm32_get_databits(dev), uart_stm32_get_parity(dev));
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
		uart_stm32_get_hwctrl(dev));
	return 0;
}
 8006ec2:	2000      	movs	r0, #0
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8006ec4:	71cb      	strb	r3, [r1, #7]
}
 8006ec6:	4770      	bx	lr
		return UART_CFG_STOP_BITS_1_5;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e7e0      	b.n	8006e8e <uart_stm32_config_get+0x3e>
			return UART_CFG_DATA_BITS_8;
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	bf14      	ite	ne
 8006ed0:	2302      	movne	r3, #2
 8006ed2:	2303      	moveq	r3, #3
 8006ed4:	e7ec      	b.n	8006eb0 <uart_stm32_config_get+0x60>
			return UART_CFG_DATA_BITS_9;
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	bf14      	ite	ne
 8006eda:	2303      	movne	r3, #3
 8006edc:	2304      	moveq	r3, #4
 8006ede:	e7e7      	b.n	8006eb0 <uart_stm32_config_get+0x60>
		return UART_CFG_STOP_BITS_0_5;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	e7d4      	b.n	8006e8e <uart_stm32_config_get+0x3e>

08006ee4 <uart_stm32_poll_in>:
#endif /* CONFIG_UART_USE_RUNTIME_CONFIGURE */

static int uart_stm32_poll_in(const struct device *dev, unsigned char *c)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006ee4:	6843      	ldr	r3, [r0, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8006ee8:	69da      	ldr	r2, [r3, #28]
 8006eea:	0710      	lsls	r0, r2, #28
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8006eec:	bf44      	itt	mi
 8006eee:	2208      	movmi	r2, #8
 8006ef0:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	0692      	lsls	r2, r2, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8006ef6:	bf43      	ittte	mi
 8006ef8:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 8006efa:	700b      	strbmi	r3, [r1, #0]
		return -1;
	}

	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);

	return 0;
 8006efc:	2000      	movmi	r0, #0
		return -1;
 8006efe:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8006f02:	4770      	bx	lr

08006f04 <uart_stm32_poll_out>:

static void uart_stm32_poll_out(const struct device *dev,
					unsigned char c)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006f04:	6843      	ldr	r3, [r0, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8006f08:	69da      	ldr	r2, [r3, #28]
 8006f0a:	0612      	lsls	r2, r2, #24
 8006f0c:	d5fc      	bpl.n	8006f08 <uart_stm32_poll_out+0x4>
	__asm__ volatile(
 8006f0e:	f04f 0010 	mov.w	r0, #16
 8006f12:	f3ef 8211 	mrs	r2, BASEPRI
 8006f16:	f380 8812 	msr	BASEPRI_MAX, r0
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	69d8      	ldr	r0, [r3, #28]
 8006f20:	0600      	lsls	r0, r0, #24
 8006f22:	d407      	bmi.n	8006f34 <uart_stm32_poll_out+0x30>
	__asm__ volatile(
 8006f24:	f382 8811 	msr	BASEPRI, r2
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	69da      	ldr	r2, [r3, #28]
 8006f2e:	0612      	lsls	r2, r2, #24
 8006f30:	d5ea      	bpl.n	8006f08 <uart_stm32_poll_out+0x4>
 8006f32:	e7ec      	b.n	8006f0e <uart_stm32_poll_out+0xa>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8006f34:	b289      	uxth	r1, r1
 8006f36:	8519      	strh	r1, [r3, #40]	; 0x28
 8006f38:	f382 8811 	msr	BASEPRI, r2
 8006f3c:	f3bf 8f6f 	isb	sy
	}
#endif /* CONFIG_PM */

	LL_USART_TransmitData8(UartInstance, (uint8_t)c);
	irq_unlock(key);
}
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop

08006f44 <uart_stm32_err_check>:

static int uart_stm32_err_check(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006f44:	6843      	ldr	r3, [r0, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8006f48:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8006f4a:	69da      	ldr	r2, [r3, #28]
	 */
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
		err |= UART_ERROR_OVERRUN;
	}

	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8006f4c:	07d1      	lsls	r1, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8006f4e:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8006f50:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 8006f54:	bf48      	it	mi
 8006f56:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8006f5a:	0792      	lsls	r2, r2, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 8006f5c:	69da      	ldr	r2, [r3, #28]
	}

	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
		err |= UART_ERROR_FRAMING;
 8006f5e:	bf48      	it	mi
 8006f60:	f040 0004 	orrmi.w	r0, r0, #4
 8006f64:	05d1      	lsls	r1, r2, #23
 8006f66:	d504      	bpl.n	8006f72 <uart_stm32_err_check+0x2e>
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 8006f68:	f44f 7280 	mov.w	r2, #256	; 0x100
	}

#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	if (LL_USART_IsActiveFlag_LBD(UartInstance)) {
		err |= UART_BREAK;
 8006f6c:	f040 0008 	orr.w	r0, r0, #8
 8006f70:	621a      	str	r2, [r3, #32]
	/* Clearing error :
	 * the stm32 F4X, F1X, and F2X sw sequence is reading the usart SR
	 * then the usart DR to clear the Error flags ORE, PE, FE, NE
	 * --> so is the RXNE flag also cleared !
	 */
	if (err & UART_ERROR_OVERRUN) {
 8006f72:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8006f74:	bf44      	itt	mi
 8006f76:	2208      	movmi	r2, #8
 8006f78:	621a      	strmi	r2, [r3, #32]
		LL_USART_ClearFlag_ORE(UartInstance);
	}

	if (err & UART_ERROR_PARITY) {
 8006f7a:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8006f7c:	bf44      	itt	mi
 8006f7e:	2201      	movmi	r2, #1
 8006f80:	621a      	strmi	r2, [r3, #32]
		LL_USART_ClearFlag_PE(UartInstance);
	}

	if (err & UART_ERROR_FRAMING) {
 8006f82:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8006f84:	bf44      	itt	mi
 8006f86:	2202      	movmi	r2, #2
 8006f88:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8006f8a:	2204      	movs	r2, #4
 8006f8c:	621a      	str	r2, [r3, #32]
	 * it is not represented by the errors enum
	 */
	LL_USART_ClearFlag_NE(UartInstance);

	return err;
}
 8006f8e:	4770      	bx	lr

08006f90 <uart_stm32_async_callback_set>:

static int uart_stm32_async_callback_set(const struct device *dev,
					 uart_callback_t callback,
					 void *user_data)
{
	struct uart_stm32_data *data = dev->data;
 8006f90:	6903      	ldr	r3, [r0, #16]

	data->async_cb = callback;
	data->async_user_data = user_data;

	return 0;
}
 8006f92:	2000      	movs	r0, #0
	data->async_user_data = user_data;
 8006f94:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop

08006f9c <uart_stm32_async_rx_buf_rsp>:
}

static int uart_stm32_async_rx_buf_rsp(const struct device *dev, uint8_t *buf,
				       size_t len)
{
	struct uart_stm32_data *data = dev->data;
 8006f9c:	6903      	ldr	r3, [r0, #16]
	LOG_DBG("replace buffer (%d)", len);
	data->rx_next_buffer = buf;
	data->rx_next_buffer_len = len;

	return 0;
}
 8006f9e:	2000      	movs	r0, #0
	data->rx_next_buffer_len = len;
 8006fa0:	e9c3 1252 	strd	r1, r2, [r3, #328]	; 0x148
}
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop

08006fa8 <uart_stm32_dma_tx_cb>:
{
 8006fa8:	b530      	push	{r4, r5, lr}
	struct uart_stm32_data *data = uart_dev->data;
 8006faa:	690c      	ldr	r4, [r1, #16]
{
 8006fac:	b083      	sub	sp, #12
	__asm__ volatile(
 8006fae:	f04f 0310 	mov.w	r3, #16
 8006fb2:	f3ef 8511 	mrs	r5, BASEPRI
 8006fb6:	f383 8812 	msr	BASEPRI_MAX, r3
 8006fba:	f3bf 8f6f 	isb	sy
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006fbe:	684b      	ldr	r3, [r1, #4]
 8006fc0:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 8006fc2:	6893      	ldr	r3, [r2, #8]
 8006fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fc8:	6093      	str	r3, [r2, #8]
	(void)k_work_cancel_delayable(&data->dma_tx.timeout_work);
 8006fca:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8006fce:	f001 fe5f 	bl	8008c90 <k_work_cancel_delayable>
	if (!dma_get_status(data->dma_tx.dma_dev,
 8006fd2:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
				 struct dma_status *stat)
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	if (api->get_status) {
 8006fd6:	6883      	ldr	r3, [r0, #8]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	b143      	cbz	r3, 8006fee <uart_stm32_dma_tx_cb+0x46>
		return api->get_status(dev, channel, stat);
 8006fdc:	466a      	mov	r2, sp
 8006fde:	4798      	blx	r3
 8006fe0:	b928      	cbnz	r0, 8006fee <uart_stm32_dma_tx_cb+0x46>
		data->dma_tx.counter = data->dma_tx.buffer_length -
 8006fe2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006fe6:	9a01      	ldr	r2, [sp, #4]
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	data->dma_tx.buffer_length = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	__asm__ volatile(
 8006ff4:	f385 8811 	msr	BASEPRI, r5
 8006ff8:	f3bf 8f6f 	isb	sy
}
 8006ffc:	b003      	add	sp, #12
 8006ffe:	bd30      	pop	{r4, r5, pc}

08007000 <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 8007000:	b508      	push	{r3, lr}
 8007002:	2200      	movs	r2, #0
 8007004:	2026      	movs	r0, #38	; 0x26
 8007006:	4611      	mov	r1, r2
 8007008:	f7fa fd34 	bl	8001a74 <z_arm_irq_priority_set>
 800700c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007010:	2026      	movs	r0, #38	; 0x26
 8007012:	f7fa bcfd 	b.w	8001a10 <arch_irq_enable>
 8007016:	bf00      	nop

08007018 <uart_stm32_configure>:
{
 8007018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800701c:	460d      	mov	r5, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800701e:	6841      	ldr	r1, [r0, #4]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8007020:	792a      	ldrb	r2, [r5, #4]
	struct uart_stm32_data *data = dev->data;
 8007022:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007024:	680c      	ldr	r4, [r1, #0]
	switch (parity) {
 8007026:	2a01      	cmp	r2, #1
{
 8007028:	b082      	sub	sp, #8
	switch (parity) {
 800702a:	f000 80bb 	beq.w	80071a4 <uart_stm32_configure+0x18c>
		return LL_USART_PARITY_NONE;
 800702e:	2a02      	cmp	r2, #2
 8007030:	bf0c      	ite	eq
 8007032:	f44f 6e80 	moveq.w	lr, #1024	; 0x400
 8007036:	f04f 0e00 	movne.w	lr, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800703a:	f895 8005 	ldrb.w	r8, [r5, #5]
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800703e:	f895 9007 	ldrb.w	r9, [r5, #7]
 8007042:	f1b8 0f02 	cmp.w	r8, #2
 8007046:	bf9c      	itt	ls
 8007048:	4b5d      	ldrls	r3, [pc, #372]	; (80071c0 <uart_stm32_configure+0x1a8>)
 800704a:	f853 7028 	ldrls.w	r7, [r3, r8, lsl #2]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 800704e:	79ab      	ldrb	r3, [r5, #6]
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8007050:	bf88      	it	hi
 8007052:	f44f 5700 	movhi.w	r7, #8192	; 0x2000
	switch (db) {
 8007056:	2b02      	cmp	r3, #2
 8007058:	f000 80a0 	beq.w	800719c <uart_stm32_configure+0x184>
 800705c:	2b04      	cmp	r3, #4
 800705e:	d04b      	beq.n	80070f8 <uart_stm32_configure+0xe0>
		if (p == UART_CFG_PARITY_NONE) {
 8007060:	2a00      	cmp	r2, #0
 8007062:	d149      	bne.n	80070f8 <uart_stm32_configure+0xe0>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8007064:	f1b9 0f01 	cmp.w	r9, #1
 8007068:	f000 80a6 	beq.w	80071b8 <uart_stm32_configure+0x1a0>
	return LL_USART_HWCONTROL_NONE;
 800706c:	4610      	mov	r0, r2
			return LL_USART_DATAWIDTH_8B;
 800706e:	4694      	mov	ip, r2
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8007070:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 8007074:	d051      	beq.n	800711a <uart_stm32_configure+0x102>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8007076:	2b01      	cmp	r3, #1
 8007078:	d94f      	bls.n	800711a <uart_stm32_configure+0x102>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 800707a:	2b04      	cmp	r3, #4
 800707c:	d04d      	beq.n	800711a <uart_stm32_configure+0x102>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 800707e:	f1b9 0f00 	cmp.w	r9, #0
 8007082:	d154      	bne.n	800712e <uart_stm32_configure+0x116>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	f023 0301 	bic.w	r3, r3, #1
 800708a:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8007092:	459e      	cmp	lr, r3
 8007094:	d005      	beq.n	80070a2 <uart_stm32_configure+0x8a>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800709c:	ea43 030e 	orr.w	r3, r3, lr
 80070a0:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80070a2:	6863      	ldr	r3, [r4, #4]
 80070a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80070a8:	429f      	cmp	r7, r3
 80070aa:	d004      	beq.n	80070b6 <uart_stm32_configure+0x9e>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80070ac:	6863      	ldr	r3, [r4, #4]
 80070ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80070b2:	431f      	orrs	r7, r3
 80070b4:	6067      	str	r7, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 80070bc:	4563      	cmp	r3, ip
 80070be:	d005      	beq.n	80070cc <uart_stm32_configure+0xb4>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80070c6:	ea43 030c 	orr.w	r3, r3, ip
 80070ca:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80070cc:	68a3      	ldr	r3, [r4, #8]
 80070ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80070d2:	4283      	cmp	r3, r0
 80070d4:	d004      	beq.n	80070e0 <uart_stm32_configure+0xc8>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80070d6:	68a3      	ldr	r3, [r4, #8]
 80070d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070dc:	4318      	orrs	r0, r3
 80070de:	60a0      	str	r0, [r4, #8]
	if (cfg->baudrate != data->baud_rate) {
 80070e0:	682f      	ldr	r7, [r5, #0]
 80070e2:	6833      	ldr	r3, [r6, #0]
 80070e4:	429f      	cmp	r7, r3
 80070e6:	d139      	bne.n	800715c <uart_stm32_configure+0x144>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	f043 0301 	orr.w	r3, r3, #1
	return 0;
 80070ee:	2000      	movs	r0, #0
 80070f0:	6023      	str	r3, [r4, #0]
};
 80070f2:	b002      	add	sp, #8
 80070f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 80070f8:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
		return LL_USART_HWCONTROL_RTS_CTS;
 80070fc:	f1b9 0f01 	cmp.w	r9, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8007100:	f1a2 0a03 	sub.w	sl, r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8007104:	bf14      	ite	ne
 8007106:	2000      	movne	r0, #0
 8007108:	f44f 7040 	moveq.w	r0, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800710c:	f1ba 0f01 	cmp.w	sl, #1
 8007110:	d903      	bls.n	800711a <uart_stm32_configure+0x102>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8007112:	2a00      	cmp	r2, #0
 8007114:	d0ac      	beq.n	8007070 <uart_stm32_configure+0x58>
 8007116:	2b04      	cmp	r3, #4
 8007118:	d1aa      	bne.n	8007070 <uart_stm32_configure+0x58>
		return -ENOTSUP;
 800711a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800711e:	e7e8      	b.n	80070f2 <uart_stm32_configure+0xda>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8007120:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 8007124:	d0f9      	beq.n	800711a <uart_stm32_configure+0x102>
		return LL_USART_HWCONTROL_RTS_CTS;
 8007126:	f44f 7040 	mov.w	r0, #768	; 0x300
			return LL_USART_DATAWIDTH_7B;
 800712a:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 800712e:	4b25      	ldr	r3, [pc, #148]	; (80071c4 <uart_stm32_configure+0x1ac>)
 8007130:	429c      	cmp	r4, r3
 8007132:	d00f      	beq.n	8007154 <uart_stm32_configure+0x13c>
 8007134:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8007138:	429c      	cmp	r4, r3
 800713a:	d00b      	beq.n	8007154 <uart_stm32_configure+0x13c>
 800713c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007140:	429c      	cmp	r4, r3
 8007142:	d007      	beq.n	8007154 <uart_stm32_configure+0x13c>
 8007144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007148:	429c      	cmp	r4, r3
 800714a:	d003      	beq.n	8007154 <uart_stm32_configure+0x13c>
 800714c:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8007150:	429c      	cmp	r4, r3
 8007152:	d1e2      	bne.n	800711a <uart_stm32_configure+0x102>
 8007154:	f1b9 0f01 	cmp.w	r9, #1
 8007158:	d094      	beq.n	8007084 <uart_stm32_configure+0x6c>
 800715a:	e7de      	b.n	800711a <uart_stm32_configure+0x102>
	if (clock_control_get_rate(data->clock,
 800715c:	f8d6 8004 	ldr.w	r8, [r6, #4]
			       (clock_control_subsys_t *)&config->pclken,
 8007160:	f101 090c 	add.w	r9, r1, #12
 8007164:	4640      	mov	r0, r8
 8007166:	f001 f8e5 	bl	8008334 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800716a:	b1a0      	cbz	r0, 8007196 <uart_stm32_configure+0x17e>
	if (api->get_rate == NULL) {
 800716c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	b183      	cbz	r3, 8007196 <uart_stm32_configure+0x17e>
	return api->get_rate(dev, sys, rate);
 8007174:	4649      	mov	r1, r9
 8007176:	4640      	mov	r0, r8
 8007178:	aa01      	add	r2, sp, #4
 800717a:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 800717c:	2800      	cmp	r0, #0
 800717e:	db0a      	blt.n	8007196 <uart_stm32_configure+0x17e>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007186:	6023      	str	r3, [r4, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007188:	9b01      	ldr	r3, [sp, #4]
 800718a:	eb03 0357 	add.w	r3, r3, r7, lsr #1
 800718e:	fbb3 f3f7 	udiv	r3, r3, r7
 8007192:	b29b      	uxth	r3, r3
 8007194:	60e3      	str	r3, [r4, #12]
		data->baud_rate = cfg->baudrate;
 8007196:	682b      	ldr	r3, [r5, #0]
 8007198:	6033      	str	r3, [r6, #0]
 800719a:	e7a5      	b.n	80070e8 <uart_stm32_configure+0xd0>
		if (p == UART_CFG_PARITY_NONE) {
 800719c:	b12a      	cbz	r2, 80071aa <uart_stm32_configure+0x192>
			return LL_USART_DATAWIDTH_8B;
 800719e:	f04f 0c00 	mov.w	ip, #0
 80071a2:	e7ab      	b.n	80070fc <uart_stm32_configure+0xe4>
	switch (parity) {
 80071a4:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 80071a8:	e747      	b.n	800703a <uart_stm32_configure+0x22>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 80071aa:	f1b9 0f01 	cmp.w	r9, #1
 80071ae:	d0b7      	beq.n	8007120 <uart_stm32_configure+0x108>
	return LL_USART_HWCONTROL_NONE;
 80071b0:	4610      	mov	r0, r2
			return LL_USART_DATAWIDTH_7B;
 80071b2:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 80071b6:	e75b      	b.n	8007070 <uart_stm32_configure+0x58>
			return LL_USART_DATAWIDTH_8B;
 80071b8:	4694      	mov	ip, r2
		return LL_USART_HWCONTROL_RTS_CTS;
 80071ba:	f44f 7040 	mov.w	r0, #768	; 0x300
 80071be:	e757      	b.n	8007070 <uart_stm32_configure+0x58>
 80071c0:	0800c3a0 	.word	0x0800c3a0
 80071c4:	40013800 	.word	0x40013800

080071c8 <uart_stm32_async_tx>:
{
 80071c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uart_stm32_data *data = dev->data;
 80071ca:	6904      	ldr	r4, [r0, #16]
{
 80071cc:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80071ce:	6840      	ldr	r0, [r0, #4]
 80071d0:	6806      	ldr	r6, [r0, #0]
	if (data->dma_tx.dma_dev == NULL) {
 80071d2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d04a      	beq.n	8007270 <uart_stm32_async_tx+0xa8>
	if (data->dma_tx.buffer_length != 0) {
 80071da:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80071de:	2f00      	cmp	r7, #0
 80071e0:	d13d      	bne.n	800725e <uart_stm32_async_tx+0x96>
	data->dma_tx.timeout = timeout;
 80071e2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80071e6:	2340      	movs	r3, #64	; 0x40
	data->dma_tx.buffer_length = buf_size;
 80071e8:	e9c4 123f 	strd	r1, r2, [r4, #252]	; 0xfc
 80071ec:	6233      	str	r3, [r6, #32]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80071ee:	6833      	ldr	r3, [r6, #0]
 80071f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071f4:	6033      	str	r3, [r6, #0]
	return api->config(dev, channel, config);
 80071f6:	6883      	ldr	r3, [r0, #8]
	data->dma_tx.blk_cfg.source_address = (uint32_t)data->dma_tx.buffer;
 80071f8:	f8c4 10dc 	str.w	r1, [r4, #220]	; 0xdc
	data->dma_tx.blk_cfg.block_size = data->dma_tx.buffer_length;
 80071fc:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8007206:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
 800720a:	4798      	blx	r3
	if (ret != 0) {
 800720c:	bb50      	cbnz	r0, 8007264 <uart_stm32_async_tx+0x9c>
	if (dma_start(data->dma_tx.dma_dev, data->dma_tx.dma_channel)) {
 800720e:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
	return api->start(dev, channel);
 8007212:	6883      	ldr	r3, [r0, #8]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	4798      	blx	r3
 8007218:	4606      	mov	r6, r0
 800721a:	bb30      	cbnz	r0, 800726a <uart_stm32_async_tx+0xa2>
	async_timer_start(&data->dma_tx.timeout_work, data->dma_tx.timeout);
 800721c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
	if ((timeout != SYS_FOREVER_US) && (timeout != 0)) {
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	2a01      	cmp	r2, #1
 8007224:	d913      	bls.n	800724e <uart_stm32_async_tx+0x86>
		k_work_reschedule(work, K_USEC(timeout));
 8007226:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		t += off;
 800722a:	f113 0063 	adds.w	r0, r3, #99	; 0x63
 800722e:	ea4f 71e3 	mov.w	r1, r3, asr #31
			return t / ((uint64_t)from_hz / to_hz);
 8007232:	f04f 0264 	mov.w	r2, #100	; 0x64
 8007236:	f04f 0300 	mov.w	r3, #0
 800723a:	f141 0100 	adc.w	r1, r1, #0
 800723e:	f7f8 ffff 	bl	8000240 <__aeabi_uldivmod>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	f504 7088 	add.w	r0, r4, #272	; 0x110
 800724a:	f001 fce7 	bl	8008c1c <k_work_reschedule>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800724e:	686b      	ldr	r3, [r5, #4]
 8007250:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8007252:	6893      	ldr	r3, [r2, #8]
 8007254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007258:	6093      	str	r3, [r2, #8]
}
 800725a:	4630      	mov	r0, r6
 800725c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EBUSY;
 800725e:	f06f 060f 	mvn.w	r6, #15
 8007262:	e7fa      	b.n	800725a <uart_stm32_async_tx+0x92>
		return -EINVAL;
 8007264:	f06f 0615 	mvn.w	r6, #21
 8007268:	e7f7      	b.n	800725a <uart_stm32_async_tx+0x92>
		return -EFAULT;
 800726a:	f06f 060d 	mvn.w	r6, #13
 800726e:	e7f4      	b.n	800725a <uart_stm32_async_tx+0x92>
		return -ENODEV;
 8007270:	f06f 0612 	mvn.w	r6, #18
 8007274:	e7f1      	b.n	800725a <uart_stm32_async_tx+0x92>
 8007276:	bf00      	nop

08007278 <uart_stm32_init>:
{
 8007278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct uart_stm32_config *config = dev->config;
 800727c:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800727e:	f8d0 8010 	ldr.w	r8, [r0, #16]
	data->clock = clk;
 8007282:	4f93      	ldr	r7, [pc, #588]	; (80074d0 <uart_stm32_init+0x258>)
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007284:	46a9      	mov	r9, r5
{
 8007286:	b083      	sub	sp, #12
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007288:	f859 4b0c 	ldr.w	r4, [r9], #12
	data->clock = clk;
 800728c:	f8c8 7004 	str.w	r7, [r8, #4]
{
 8007290:	4606      	mov	r6, r0
 8007292:	4638      	mov	r0, r7
 8007294:	f001 f84e 	bl	8008334 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8007298:	2800      	cmp	r0, #0
 800729a:	f000 8113 	beq.w	80074c4 <uart_stm32_init+0x24c>
	return api->on(dev, sys);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	4638      	mov	r0, r7
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4649      	mov	r1, r9
 80072a6:	4798      	blx	r3
	if (clock_control_on(data->clock,
 80072a8:	4607      	mov	r7, r0
 80072aa:	2800      	cmp	r0, #0
 80072ac:	f040 810a 	bne.w	80074c4 <uart_stm32_init+0x24c>
	ret = pinctrl_lookup_state(config, id, &state);
 80072b0:	6a28      	ldr	r0, [r5, #32]
 80072b2:	aa01      	add	r2, sp, #4
 80072b4:	4639      	mov	r1, r7
 80072b6:	f000 fe37 	bl	8007f28 <pinctrl_lookup_state>
	if (ret < 0) {
 80072ba:	2800      	cmp	r0, #0
 80072bc:	f2c0 80fd 	blt.w	80074ba <uart_stm32_init+0x242>
	return pinctrl_apply_state_direct(config, state);
 80072c0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80072c2:	463a      	mov	r2, r7
 80072c4:	7919      	ldrb	r1, [r3, #4]
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	f000 fe50 	bl	8007f6c <pinctrl_configure_pins>
	if (err < 0) {
 80072cc:	2800      	cmp	r0, #0
 80072ce:	f2c0 80f4 	blt.w	80074ba <uart_stm32_init+0x242>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	f023 0301 	bic.w	r3, r3, #1
 80072d8:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	f043 030c 	orr.w	r3, r3, #12
 80072e0:	6023      	str	r3, [r4, #0]
	if (config->parity == 2) {
 80072e2:	69ab      	ldr	r3, [r5, #24]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	f000 80e5 	beq.w	80074b4 <uart_stm32_init+0x23c>
	} else if (config->parity == 1) {
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	bf0c      	ite	eq
 80072ee:	f44f 52b0 	moveq.w	r2, #5632	; 0x1600
 80072f2:	2200      	movne	r2, #0
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80072f4:	6823      	ldr	r3, [r4, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80072f6:	6871      	ldr	r1, [r6, #4]
 80072f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072fc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007300:	4313      	orrs	r3, r2
 8007302:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007304:	6863      	ldr	r3, [r4, #4]
 8007306:	f8d1 9000 	ldr.w	r9, [r1]
 800730a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800730e:	6063      	str	r3, [r4, #4]
	if (config->hw_flow_control) {
 8007310:	7d2b      	ldrb	r3, [r5, #20]
 8007312:	b12b      	cbz	r3, 8007320 <uart_stm32_init+0xa8>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007314:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007318:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800731c:	f8c9 3008 	str.w	r3, [r9, #8]
	if (clock_control_get_rate(data->clock,
 8007320:	6933      	ldr	r3, [r6, #16]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8007322:	f8d8 8000 	ldr.w	r8, [r8]
	if (clock_control_get_rate(data->clock,
 8007326:	f8d3 a004 	ldr.w	sl, [r3, #4]
			       (clock_control_subsys_t *)&config->pclken,
 800732a:	f101 0b0c 	add.w	fp, r1, #12
 800732e:	4650      	mov	r0, sl
 8007330:	f001 f800 	bl	8008334 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8007334:	b1b8      	cbz	r0, 8007366 <uart_stm32_init+0xee>
	if (api->get_rate == NULL) {
 8007336:	f8da 3008 	ldr.w	r3, [sl, #8]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	b19b      	cbz	r3, 8007366 <uart_stm32_init+0xee>
	return api->get_rate(dev, sys, rate);
 800733e:	aa01      	add	r2, sp, #4
 8007340:	4659      	mov	r1, fp
 8007342:	4650      	mov	r0, sl
 8007344:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 8007346:	2800      	cmp	r0, #0
 8007348:	db0d      	blt.n	8007366 <uart_stm32_init+0xee>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800734a:	f8d9 3000 	ldr.w	r3, [r9]
 800734e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007352:	f8c9 3000 	str.w	r3, [r9]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007356:	9b01      	ldr	r3, [sp, #4]
 8007358:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 800735c:	fbb3 f3f8 	udiv	r3, r3, r8
 8007360:	b29b      	uxth	r3, r3
 8007362:	f8c9 300c 	str.w	r3, [r9, #12]
	if (config->single_wire) {
 8007366:	7f2b      	ldrb	r3, [r5, #28]
 8007368:	b11b      	cbz	r3, 8007372 <uart_stm32_init+0xfa>
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800736a:	68a3      	ldr	r3, [r4, #8]
 800736c:	f043 0308 	orr.w	r3, r3, #8
 8007370:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	f043 0301 	orr.w	r3, r3, #1
 8007378:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800737a:	69e3      	ldr	r3, [r4, #28]
 800737c:	029a      	lsls	r2, r3, #10
 800737e:	d5fc      	bpl.n	800737a <uart_stm32_init+0x102>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8007380:	69e3      	ldr	r3, [r4, #28]
 8007382:	025b      	lsls	r3, r3, #9
 8007384:	d5fc      	bpl.n	8007380 <uart_stm32_init+0x108>
	config->uconf.irq_config_func(dev);
 8007386:	68ab      	ldr	r3, [r5, #8]
 8007388:	4630      	mov	r0, r6
 800738a:	4798      	blx	r3
	struct uart_stm32_data *data = dev->data;
 800738c:	6934      	ldr	r4, [r6, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800738e:	6873      	ldr	r3, [r6, #4]
	if (data->dma_rx.dma_dev != NULL) {
 8007390:	69a0      	ldr	r0, [r4, #24]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007392:	f8d3 8000 	ldr.w	r8, [r3]
	data->uart_dev = dev;
 8007396:	60a6      	str	r6, [r4, #8]
	if (data->dma_rx.dma_dev != NULL) {
 8007398:	b120      	cbz	r0, 80073a4 <uart_stm32_init+0x12c>
 800739a:	f000 ffcb 	bl	8008334 <z_device_is_ready>
		if (!device_is_ready(data->dma_rx.dma_dev)) {
 800739e:	2800      	cmp	r0, #0
 80073a0:	f000 8093 	beq.w	80074ca <uart_stm32_init+0x252>
	if (data->dma_tx.dma_dev != NULL) {
 80073a4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80073a8:	b12b      	cbz	r3, 80073b6 <uart_stm32_init+0x13e>
		if (!device_is_ready(data->dma_rx.dma_dev)) {
 80073aa:	69a0      	ldr	r0, [r4, #24]
 80073ac:	f000 ffc2 	bl	8008334 <z_device_is_ready>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	f000 808a 	beq.w	80074ca <uart_stm32_init+0x252>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80073b6:	6872      	ldr	r2, [r6, #4]
	data->dma_rx.enabled = false;
 80073b8:	6933      	ldr	r3, [r6, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80073ba:	6812      	ldr	r2, [r2, #0]
	k_work_init_delayable(&data->dma_rx.timeout_work,
 80073bc:	4945      	ldr	r1, [pc, #276]	; (80074d4 <uart_stm32_init+0x25c>)
	data->dma_rx.enabled = false;
 80073be:	2500      	movs	r5, #0
 80073c0:	f883 50a8 	strb.w	r5, [r3, #168]	; 0xa8
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 80073c4:	6893      	ldr	r3, [r2, #8]
 80073c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ca:	6093      	str	r3, [r2, #8]
	k_work_init_delayable(&data->dma_rx.timeout_work,
 80073cc:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80073d0:	f001 fc18 	bl	8008c04 <k_work_init_delayable>
	k_work_init_delayable(&data->dma_tx.timeout_work,
 80073d4:	4940      	ldr	r1, [pc, #256]	; (80074d8 <uart_stm32_init+0x260>)
 80073d6:	f504 7088 	add.w	r0, r4, #272	; 0x110
 80073da:	f001 fc13 	bl	8008c04 <k_work_init_delayable>
	if (data->dma_rx.src_addr_increment) {
 80073de:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
__ssp_bos_icheck3(memset, void *, int)
 80073e2:	6625      	str	r5, [r4, #96]	; 0x60
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
	if (data->dma_rx.dst_addr_increment) {
 80073ea:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80073ee:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
		data->dma_rx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80073f2:	bf14      	ite	ne
 80073f4:	2100      	movne	r1, #0
 80073f6:	2102      	moveq	r1, #2
 80073f8:	f361 0383 	bfi	r3, r1, #2, #2
 80073fc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	data->dma_rx.blk_cfg.source_reload_en  = 0;
 8007400:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007402:	64e5      	str	r5, [r4, #76]	; 0x4c
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8007404:	2a00      	cmp	r2, #0
	data->dma_rx.blk_cfg.source_reload_en  = 0;
 8007406:	f003 010f 	and.w	r1, r3, #15
 800740a:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800740e:	6525      	str	r5, [r4, #80]	; 0x50
		data->dma_rx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8007410:	bf14      	ite	ne
 8007412:	2300      	movne	r3, #0
 8007414:	2302      	moveq	r3, #2
	data->dma_rx.blk_cfg.source_reload_en  = 0;
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
	data->rx_next_buffer_len = 0;
 800741c:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 8007420:	6565      	str	r5, [r4, #84]	; 0x54
 8007422:	65a5      	str	r5, [r4, #88]	; 0x58
 8007424:	65e5      	str	r5, [r4, #92]	; 0x5c
	data->dma_rx.blk_cfg.dest_address = 0; /* dest not ready */
 8007426:	64a5      	str	r5, [r4, #72]	; 0x48
 8007428:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
 800742c:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
 8007430:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
 8007434:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
 8007438:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
	data->dma_tx.blk_cfg.source_address = 0; /* not ready */
 800743c:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
	data->dma_rx.blk_cfg.source_reload_en  = 0;
 8007440:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (data->dma_tx.src_addr_increment) {
 8007444:	f894 50d5 	ldrb.w	r5, [r4, #213]	; 0xd5
 8007448:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
	data->dma_rx.dma_cfg.user_data = (void *)dev;
 800744c:	6366      	str	r6, [r4, #52]	; 0x34
	data->dma_rx.blk_cfg.source_reload_en  = 0;
 800744e:	4313      	orrs	r3, r2
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8007450:	2d00      	cmp	r5, #0
	data->dma_rx.blk_cfg.source_reload_en  = 0;
 8007452:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	if (data->dma_tx.dst_addr_increment) {
 8007456:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
		data->dma_tx.blk_cfg.source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 800745a:	bf14      	ite	ne
 800745c:	2200      	movne	r2, #0
 800745e:	2202      	moveq	r2, #2
 8007460:	f362 0083 	bfi	r0, r2, #2, #2
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8007464:	2b00      	cmp	r3, #0
	data->dma_tx.blk_cfg.fifo_mode_control = data->dma_tx.fifo_threshold;
 8007466:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800746a:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
		data->dma_tx.blk_cfg.dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 800746e:	bf14      	ite	ne
 8007470:	2300      	movne	r3, #0
 8007472:	2302      	moveq	r3, #2
	data->dma_tx.blk_cfg.fifo_mode_control = data->dma_tx.fifo_threshold;
 8007474:	f002 020f 	and.w	r2, r2, #15
 8007478:	011b      	lsls	r3, r3, #4
 800747a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	memset(&data->dma_rx.blk_cfg, 0, sizeof(data->dma_rx.blk_cfg));
 800747e:	f104 0244 	add.w	r2, r4, #68	; 0x44
	data->dma_rx.dma_cfg.head_block = &data->dma_rx.blk_cfg;
 8007482:	6322      	str	r2, [r4, #48]	; 0x30
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8007484:	f108 0224 	add.w	r2, r8, #36	; 0x24
	data->dma_rx.blk_cfg.source_address =
 8007488:	6462      	str	r2, [r4, #68]	; 0x44
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 800748a:	f108 0228 	add.w	r2, r8, #40	; 0x28
	data->dma_tx.blk_cfg.dest_address =
 800748e:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
	data->dma_tx.blk_cfg.fifo_mode_control = data->dma_tx.fifo_threshold;
 8007492:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
	data->dma_tx.dma_cfg.user_data = (void *)dev;
 8007496:	f8c4 60cc 	str.w	r6, [r4, #204]	; 0xcc
	data->dma_tx.blk_cfg.fifo_mode_control = data->dma_tx.fifo_threshold;
 800749a:	f422 6273 	bic.w	r2, r2, #3888	; 0xf30
 800749e:	4313      	orrs	r3, r2
 80074a0:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
	memset(&data->dma_tx.blk_cfg, 0, sizeof(data->dma_tx.blk_cfg));
 80074a4:	f104 03dc 	add.w	r3, r4, #220	; 0xdc
	data->dma_tx.dma_cfg.head_block = &data->dma_tx.blk_cfg;
 80074a8:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
 80074ac:	4638      	mov	r0, r7
 80074ae:	b003      	add	sp, #12
 80074b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80074b8:	e71c      	b.n	80072f4 <uart_stm32_init+0x7c>
	if (err < 0) {
 80074ba:	4607      	mov	r7, r0
}
 80074bc:	4638      	mov	r0, r7
 80074be:	b003      	add	sp, #12
 80074c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
 80074c4:	f06f 0704 	mvn.w	r7, #4
 80074c8:	e7f0      	b.n	80074ac <uart_stm32_init+0x234>
			return -ENODEV;
 80074ca:	f06f 0712 	mvn.w	r7, #18
 80074ce:	e7ed      	b.n	80074ac <uart_stm32_init+0x234>
 80074d0:	0800b78c 	.word	0x0800b78c
 80074d4:	08007911 	.word	0x08007911
 80074d8:	0800755d 	.word	0x0800755d

080074dc <uart_stm32_async_tx_abort>:
{
 80074dc:	b530      	push	{r4, r5, lr}
	struct uart_stm32_data *data = dev->data;
 80074de:	6904      	ldr	r4, [r0, #16]
	size_t tx_buffer_length = data->dma_tx.buffer_length;
 80074e0:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
{
 80074e4:	b089      	sub	sp, #36	; 0x24
	if (tx_buffer_length == 0) {
 80074e6:	2d00      	cmp	r5, #0
 80074e8:	d034      	beq.n	8007554 <uart_stm32_async_tx_abort+0x78>
	(void)k_work_cancel_delayable(&data->dma_tx.timeout_work);
 80074ea:	f504 7088 	add.w	r0, r4, #272	; 0x110
 80074ee:	f001 fbcf 	bl	8008c90 <k_work_cancel_delayable>
	if (!dma_get_status(data->dma_tx.dma_dev,
 80074f2:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
	if (api->get_status) {
 80074f6:	6883      	ldr	r3, [r0, #8]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	b153      	cbz	r3, 8007512 <uart_stm32_async_tx_abort+0x36>
		return api->get_status(dev, channel, stat);
 80074fc:	aa01      	add	r2, sp, #4
 80074fe:	4798      	blx	r3
 8007500:	bb28      	cbnz	r0, 800754e <uart_stm32_async_tx_abort+0x72>
		data->dma_tx.counter = tx_buffer_length - stat.pending_length;
 8007502:	9b02      	ldr	r3, [sp, #8]
	dma_stop(data->dma_tx.dma_dev, data->dma_tx.dma_channel);
 8007504:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8007508:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		data->dma_tx.counter = tx_buffer_length - stat.pending_length;
 800750c:	1aed      	subs	r5, r5, r3
 800750e:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	return api->stop(dev, channel);
 8007512:	6883      	ldr	r3, [r0, #8]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	4798      	blx	r3
	struct uart_event event = {
 8007518:	2300      	movs	r3, #0
 800751a:	2201      	movs	r2, #1
	if (data->async_cb) {
 800751c:	68e5      	ldr	r5, [r4, #12]
	struct uart_event event = {
 800751e:	9303      	str	r3, [sp, #12]
 8007520:	f88d 200c 	strb.w	r2, [sp, #12]
 8007524:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
 8007528:	9204      	str	r2, [sp, #16]
		.data.tx.len = data->dma_tx.counter
 800752a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	struct uart_event event = {
 800752e:	9307      	str	r3, [sp, #28]
 8007530:	e9cd 3305 	strd	r3, r3, [sp, #20]
	data->dma_tx.buffer_length = 0;
 8007534:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	struct uart_event event = {
 8007538:	9205      	str	r2, [sp, #20]
	data->dma_tx.counter = 0;
 800753a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	if (data->async_cb) {
 800753e:	b11d      	cbz	r5, 8007548 <uart_stm32_async_tx_abort+0x6c>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8007540:	6922      	ldr	r2, [r4, #16]
 8007542:	68a0      	ldr	r0, [r4, #8]
 8007544:	a903      	add	r1, sp, #12
 8007546:	47a8      	blx	r5
	return 0;
 8007548:	2000      	movs	r0, #0
}
 800754a:	b009      	add	sp, #36	; 0x24
 800754c:	bd30      	pop	{r4, r5, pc}
	dma_stop(data->dma_tx.dma_dev, data->dma_tx.dma_channel);
 800754e:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
 8007552:	e7de      	b.n	8007512 <uart_stm32_async_tx_abort+0x36>
		return -EFAULT;
 8007554:	f06f 000d 	mvn.w	r0, #13
 8007558:	e7f7      	b.n	800754a <uart_stm32_async_tx_abort+0x6e>
 800755a:	bf00      	nop

0800755c <uart_stm32_async_tx_timeout>:
	const struct device *dev = data->uart_dev;
 800755c:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
	uart_stm32_async_tx_abort(dev);
 8007560:	6880      	ldr	r0, [r0, #8]
 8007562:	f7ff bfbb 	b.w	80074dc <uart_stm32_async_tx_abort>
 8007566:	bf00      	nop

08007568 <uart_stm32_async_rx_enable>:
{
 8007568:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uart_stm32_data *data = dev->data;
 800756a:	6904      	ldr	r4, [r0, #16]
{
 800756c:	4607      	mov	r7, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800756e:	6840      	ldr	r0, [r0, #4]
 8007570:	6806      	ldr	r6, [r0, #0]
	if (data->dma_rx.dma_dev == NULL) {
 8007572:	69a0      	ldr	r0, [r4, #24]
{
 8007574:	b087      	sub	sp, #28
	if (data->dma_rx.dma_dev == NULL) {
 8007576:	2800      	cmp	r0, #0
 8007578:	d04a      	beq.n	8007610 <uart_stm32_async_rx_enable+0xa8>
	if (data->dma_rx.enabled) {
 800757a:	f894 50a8 	ldrb.w	r5, [r4, #168]	; 0xa8
 800757e:	2d00      	cmp	r5, #0
 8007580:	d140      	bne.n	8007604 <uart_stm32_async_rx_enable+0x9c>
	data->dma_rx.counter = 0;
 8007582:	6725      	str	r5, [r4, #112]	; 0x70
	data->dma_rx.timeout = timeout;
 8007584:	6763      	str	r3, [r4, #116]	; 0x74
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007586:	6833      	ldr	r3, [r6, #0]
	data->dma_rx.offset = 0;
 8007588:	66e5      	str	r5, [r4, #108]	; 0x6c
 800758a:	f023 0320 	bic.w	r3, r3, #32
	data->dma_rx.buffer_length = buf_size;
 800758e:	e9c4 1219 	strd	r1, r2, [r4, #100]	; 0x64
 8007592:	6033      	str	r3, [r6, #0]
	return api->config(dev, channel, config);
 8007594:	6883      	ldr	r3, [r0, #8]
	data->dma_rx.blk_cfg.block_size = buf_size;
 8007596:	65a2      	str	r2, [r4, #88]	; 0x58
	data->dma_rx.blk_cfg.dest_address = (uint32_t)data->dma_rx.buffer;
 8007598:	64a1      	str	r1, [r4, #72]	; 0x48
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69e1      	ldr	r1, [r4, #28]
 800759e:	f104 0220 	add.w	r2, r4, #32
 80075a2:	4798      	blx	r3
	if (ret != 0) {
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d130      	bne.n	800760a <uart_stm32_async_rx_enable+0xa2>
	if (dma_start(data->dma_rx.dma_dev, data->dma_rx.dma_channel)) {
 80075a8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
	return api->start(dev, channel);
 80075ac:	6883      	ldr	r3, [r0, #8]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	4798      	blx	r3
 80075b2:	4605      	mov	r5, r0
 80075b4:	bb18      	cbnz	r0, 80075fe <uart_stm32_async_rx_enable+0x96>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80075b6:	687b      	ldr	r3, [r7, #4]
	struct uart_stm32_data *data = dev->data;
 80075b8:	6939      	ldr	r1, [r7, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80075ba:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80075bc:	6893      	ldr	r3, [r2, #8]
 80075be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075c2:	6093      	str	r3, [r2, #8]
	data->dma_rx.enabled = true;
 80075c4:	2001      	movs	r0, #1
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80075c6:	2310      	movs	r3, #16
 80075c8:	f881 00a8 	strb.w	r0, [r1, #168]	; 0xa8
 80075cc:	6233      	str	r3, [r6, #32]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80075ce:	6833      	ldr	r3, [r6, #0]
 80075d0:	f043 0310 	orr.w	r3, r3, #16
 80075d4:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80075d6:	68b3      	ldr	r3, [r6, #8]
 80075d8:	4303      	orrs	r3, r0
 80075da:	60b3      	str	r3, [r6, #8]
	if (data->async_cb) {
 80075dc:	68e3      	ldr	r3, [r4, #12]
	struct uart_event evt = {
 80075de:	9505      	str	r5, [sp, #20]
 80075e0:	2203      	movs	r2, #3
 80075e2:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80075e6:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80075ea:	f88d 2004 	strb.w	r2, [sp, #4]
	if (data->async_cb) {
 80075ee:	b11b      	cbz	r3, 80075f8 <uart_stm32_async_rx_enable+0x90>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 80075f0:	6922      	ldr	r2, [r4, #16]
 80075f2:	68a0      	ldr	r0, [r4, #8]
 80075f4:	a901      	add	r1, sp, #4
 80075f6:	4798      	blx	r3
}
 80075f8:	4628      	mov	r0, r5
 80075fa:	b007      	add	sp, #28
 80075fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EFAULT;
 80075fe:	f06f 050d 	mvn.w	r5, #13
 8007602:	e7f9      	b.n	80075f8 <uart_stm32_async_rx_enable+0x90>
		return -EBUSY;
 8007604:	f06f 050f 	mvn.w	r5, #15
 8007608:	e7f6      	b.n	80075f8 <uart_stm32_async_rx_enable+0x90>
		return -EINVAL;
 800760a:	f06f 0515 	mvn.w	r5, #21
 800760e:	e7f3      	b.n	80075f8 <uart_stm32_async_rx_enable+0x90>
		return -ENODEV;
 8007610:	f06f 0512 	mvn.w	r5, #18
 8007614:	e7f0      	b.n	80075f8 <uart_stm32_async_rx_enable+0x90>
 8007616:	bf00      	nop

08007618 <uart_stm32_dma_rx_cb>:
{
 8007618:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uart_stm32_data *data = uart_dev->data;
 800761a:	690c      	ldr	r4, [r1, #16]
{
 800761c:	b089      	sub	sp, #36	; 0x24
	if (status != 0) {
 800761e:	461d      	mov	r5, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d16a      	bne.n	80076fa <uart_stm32_dma_rx_cb+0xe2>
	(void)k_work_cancel_delayable(&data->dma_rx.timeout_work);
 8007624:	f104 0778 	add.w	r7, r4, #120	; 0x78
 8007628:	4638      	mov	r0, r7
 800762a:	460e      	mov	r6, r1
 800762c:	f001 fb30 	bl	8008c90 <k_work_cancel_delayable>
	data->dma_rx.counter = data->dma_rx.buffer_length;
 8007630:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007632:	6723      	str	r3, [r4, #112]	; 0x70
	struct uart_event event = {
 8007634:	2302      	movs	r3, #2
 8007636:	9503      	str	r5, [sp, #12]
 8007638:	f88d 300c 	strb.w	r3, [sp, #12]
 800763c:	6e63      	ldr	r3, [r4, #100]	; 0x64
		.data.rx.offset = data->dma_rx.offset
 800763e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
	struct uart_event event = {
 8007640:	9304      	str	r3, [sp, #16]
		.data.rx.len = data->dma_rx.counter - data->dma_rx.offset,
 8007642:	6f23      	ldr	r3, [r4, #112]	; 0x70
	struct uart_event event = {
 8007644:	9205      	str	r2, [sp, #20]
		.data.rx.len = data->dma_rx.counter - data->dma_rx.offset,
 8007646:	1a9b      	subs	r3, r3, r2
	data->dma_rx.offset = data->dma_rx.counter;
 8007648:	6f22      	ldr	r2, [r4, #112]	; 0x70
	struct uart_event event = {
 800764a:	e9cd 5506 	strd	r5, r5, [sp, #24]
 800764e:	9306      	str	r3, [sp, #24]
	data->dma_rx.offset = data->dma_rx.counter;
 8007650:	66e2      	str	r2, [r4, #108]	; 0x6c
	if (event.data.rx.len > 0) {
 8007652:	2b00      	cmp	r3, #0
 8007654:	d145      	bne.n	80076e2 <uart_stm32_dma_rx_cb+0xca>
	if (data->rx_next_buffer != NULL) {
 8007656:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800765a:	2b00      	cmp	r3, #0
 800765c:	d061      	beq.n	8007722 <uart_stm32_dma_rx_cb+0x10a>
	struct uart_event evt = {
 800765e:	2300      	movs	r3, #0
 8007660:	2204      	movs	r2, #4
 8007662:	9303      	str	r3, [sp, #12]
 8007664:	f88d 200c 	strb.w	r2, [sp, #12]
 8007668:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800766a:	9307      	str	r3, [sp, #28]
 800766c:	e9cd 3305 	strd	r3, r3, [sp, #20]
	if (data->async_cb) {
 8007670:	68e3      	ldr	r3, [r4, #12]
	struct uart_event evt = {
 8007672:	9204      	str	r2, [sp, #16]
	if (data->async_cb) {
 8007674:	b11b      	cbz	r3, 800767e <uart_stm32_dma_rx_cb+0x66>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8007676:	6922      	ldr	r2, [r4, #16]
 8007678:	68a0      	ldr	r0, [r4, #8]
 800767a:	a903      	add	r1, sp, #12
 800767c:	4798      	blx	r3
	struct uart_stm32_data *data = dev->data;
 800767e:	6934      	ldr	r4, [r6, #16]
	dma_reload(data->dma_rx.dma_dev, data->dma_rx.dma_channel,
 8007680:	69a0      	ldr	r0, [r4, #24]
	data->dma_rx.buffer = data->rx_next_buffer;
 8007682:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	data->dma_rx.buffer_length = data->rx_next_buffer_len;
 8007686:	f8d4 514c 	ldr.w	r5, [r4, #332]	; 0x14c
	dma_reload(data->dma_rx.dma_dev, data->dma_rx.dma_channel,
 800768a:	69e1      	ldr	r1, [r4, #28]
	data->dma_rx.buffer = data->rx_next_buffer;
 800768c:	6663      	str	r3, [r4, #100]	; 0x64
	data->dma_rx.offset = 0;
 800768e:	2200      	movs	r2, #0
 8007690:	66e2      	str	r2, [r4, #108]	; 0x6c
	data->dma_rx.counter = 0;
 8007692:	6722      	str	r2, [r4, #112]	; 0x70
	data->rx_next_buffer = NULL;
 8007694:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	data->rx_next_buffer_len = 0;
 8007698:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
	if (api->reload) {
 800769c:	6882      	ldr	r2, [r0, #8]
	data->dma_rx.blk_cfg.dest_address = (uint32_t)data->dma_rx.buffer;
 800769e:	64a3      	str	r3, [r4, #72]	; 0x48
 80076a0:	6857      	ldr	r7, [r2, #4]
	data->dma_rx.buffer_length = data->rx_next_buffer_len;
 80076a2:	66a5      	str	r5, [r4, #104]	; 0x68
	dma_reload(data->dma_rx.dma_dev, data->dma_rx.dma_channel,
 80076a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
	data->dma_rx.blk_cfg.block_size = data->dma_rx.buffer_length;
 80076a6:	65a5      	str	r5, [r4, #88]	; 0x58
 80076a8:	b11f      	cbz	r7, 80076b2 <uart_stm32_dma_rx_cb+0x9a>
		return api->reload(dev, channel, src, dst, size);
 80076aa:	9500      	str	r5, [sp, #0]
 80076ac:	47b8      	blx	r7
	dma_start(data->dma_rx.dma_dev, data->dma_rx.dma_channel);
 80076ae:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
	return api->start(dev, channel);
 80076b2:	6883      	ldr	r3, [r0, #8]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	4798      	blx	r3
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80076b8:	6872      	ldr	r2, [r6, #4]
 80076ba:	6812      	ldr	r2, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80076bc:	2110      	movs	r1, #16
 80076be:	6211      	str	r1, [r2, #32]
	struct uart_event evt = {
 80076c0:	2300      	movs	r3, #0
 80076c2:	2203      	movs	r2, #3
 80076c4:	9303      	str	r3, [sp, #12]
 80076c6:	f88d 200c 	strb.w	r2, [sp, #12]
	if (data->async_cb) {
 80076ca:	68e5      	ldr	r5, [r4, #12]
	struct uart_event evt = {
 80076cc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80076d0:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (data->async_cb) {
 80076d4:	b11d      	cbz	r5, 80076de <uart_stm32_dma_rx_cb+0xc6>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 80076d6:	6922      	ldr	r2, [r4, #16]
 80076d8:	68a0      	ldr	r0, [r4, #8]
 80076da:	a903      	add	r1, sp, #12
 80076dc:	47a8      	blx	r5
}
 80076de:	b009      	add	sp, #36	; 0x24
 80076e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (data->async_cb) {
 80076e2:	68e3      	ldr	r3, [r4, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d0b6      	beq.n	8007656 <uart_stm32_dma_rx_cb+0x3e>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 80076e8:	6922      	ldr	r2, [r4, #16]
 80076ea:	68a0      	ldr	r0, [r4, #8]
 80076ec:	a903      	add	r1, sp, #12
 80076ee:	4798      	blx	r3
	if (data->rx_next_buffer != NULL) {
 80076f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1b2      	bne.n	800765e <uart_stm32_dma_rx_cb+0x46>
 80076f8:	e013      	b.n	8007722 <uart_stm32_dma_rx_cb+0x10a>
	struct uart_event event = {
 80076fa:	2306      	movs	r3, #6
 80076fc:	f88d 300c 	strb.w	r3, [sp, #12]
	if (data->async_cb) {
 8007700:	68e3      	ldr	r3, [r4, #12]
	struct uart_event event = {
 8007702:	6e61      	ldr	r1, [r4, #100]	; 0x64
		.data.rx_stop.data.len = data->dma_rx.counter,
 8007704:	6f22      	ldr	r2, [r4, #112]	; 0x70
	struct uart_event event = {
 8007706:	9207      	str	r2, [sp, #28]
 8007708:	2000      	movs	r0, #0
 800770a:	9006      	str	r0, [sp, #24]
 800770c:	f88d 5010 	strb.w	r5, [sp, #16]
 8007710:	9105      	str	r1, [sp, #20]
	if (data->async_cb) {
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0e3      	beq.n	80076de <uart_stm32_dma_rx_cb+0xc6>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8007716:	6922      	ldr	r2, [r4, #16]
 8007718:	68a0      	ldr	r0, [r4, #8]
 800771a:	a903      	add	r1, sp, #12
 800771c:	4798      	blx	r3
}
 800771e:	b009      	add	sp, #36	; 0x24
 8007720:	bdf0      	pop	{r4, r5, r6, r7, pc}
		k_work_reschedule(&data->dma_rx.timeout_work, K_TICKS(1));
 8007722:	2201      	movs	r2, #1
 8007724:	2300      	movs	r3, #0
 8007726:	4638      	mov	r0, r7
}
 8007728:	b009      	add	sp, #36	; 0x24
 800772a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		k_work_reschedule(&data->dma_rx.timeout_work, K_TICKS(1));
 800772e:	f001 ba75 	b.w	8008c1c <k_work_reschedule>
 8007732:	bf00      	nop

08007734 <uart_stm32_dma_rx_flush.isra.0>:
static void uart_stm32_dma_rx_flush(const struct device *dev)
 8007734:	b530      	push	{r4, r5, lr}
 8007736:	4604      	mov	r4, r0
	if (dma_get_status(data->dma_rx.dma_dev,
 8007738:	6980      	ldr	r0, [r0, #24]
 800773a:	69e1      	ldr	r1, [r4, #28]
	if (api->get_status) {
 800773c:	6883      	ldr	r3, [r0, #8]
 800773e:	699b      	ldr	r3, [r3, #24]
static void uart_stm32_dma_rx_flush(const struct device *dev)
 8007740:	b089      	sub	sp, #36	; 0x24
 8007742:	b143      	cbz	r3, 8007756 <uart_stm32_dma_rx_flush.isra.0+0x22>
		return api->get_status(dev, channel, stat);
 8007744:	aa01      	add	r2, sp, #4
 8007746:	4798      	blx	r3
	if (dma_get_status(data->dma_rx.dma_dev,
 8007748:	b928      	cbnz	r0, 8007756 <uart_stm32_dma_rx_flush.isra.0+0x22>
		size_t rx_rcv_len = data->dma_rx.buffer_length -
 800774a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800774c:	9902      	ldr	r1, [sp, #8]
		if (rx_rcv_len > data->dma_rx.offset) {
 800774e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
		size_t rx_rcv_len = data->dma_rx.buffer_length -
 8007750:	1a5b      	subs	r3, r3, r1
		if (rx_rcv_len > data->dma_rx.offset) {
 8007752:	4293      	cmp	r3, r2
 8007754:	d801      	bhi.n	800775a <uart_stm32_dma_rx_flush.isra.0+0x26>
}
 8007756:	b009      	add	sp, #36	; 0x24
 8007758:	bd30      	pop	{r4, r5, pc}
			data->dma_rx.counter = rx_rcv_len;
 800775a:	6723      	str	r3, [r4, #112]	; 0x70
		.data.rx.len = data->dma_rx.counter - data->dma_rx.offset,
 800775c:	6f23      	ldr	r3, [r4, #112]	; 0x70
	struct uart_event event = {
 800775e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007760:	9205      	str	r2, [sp, #20]
		.data.rx.len = data->dma_rx.counter - data->dma_rx.offset,
 8007762:	1a9b      	subs	r3, r3, r2
	struct uart_event event = {
 8007764:	2102      	movs	r1, #2
	data->dma_rx.offset = data->dma_rx.counter;
 8007766:	6f22      	ldr	r2, [r4, #112]	; 0x70
	struct uart_event event = {
 8007768:	9003      	str	r0, [sp, #12]
 800776a:	e9cd 0006 	strd	r0, r0, [sp, #24]
 800776e:	9504      	str	r5, [sp, #16]
 8007770:	f88d 100c 	strb.w	r1, [sp, #12]
 8007774:	9306      	str	r3, [sp, #24]
	data->dma_rx.offset = data->dma_rx.counter;
 8007776:	66e2      	str	r2, [r4, #108]	; 0x6c
	if (event.data.rx.len > 0) {
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0ec      	beq.n	8007756 <uart_stm32_dma_rx_flush.isra.0+0x22>
	if (data->async_cb) {
 800777c:	68e3      	ldr	r3, [r4, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0e9      	beq.n	8007756 <uart_stm32_dma_rx_flush.isra.0+0x22>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 8007782:	6922      	ldr	r2, [r4, #16]
 8007784:	68a0      	ldr	r0, [r4, #8]
 8007786:	a903      	add	r1, sp, #12
 8007788:	4798      	blx	r3
}
 800778a:	e7e4      	b.n	8007756 <uart_stm32_dma_rx_flush.isra.0+0x22>

0800778c <uart_stm32_isr>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800778c:	6843      	ldr	r3, [r0, #4]
{
 800778e:	b570      	push	{r4, r5, r6, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007790:	681b      	ldr	r3, [r3, #0]
	struct uart_stm32_data *data = dev->data;
 8007792:	6905      	ldr	r5, [r0, #16]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	06d1      	lsls	r1, r2, #27
{
 8007798:	b086      	sub	sp, #24
 800779a:	4604      	mov	r4, r0
 800779c:	d510      	bpl.n	80077c0 <uart_stm32_isr+0x34>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	06d2      	lsls	r2, r2, #27
 80077a2:	d50d      	bpl.n	80077c0 <uart_stm32_isr+0x34>
		async_timer_start(&data->dma_rx.timeout_work,
 80077a4:	6f69      	ldr	r1, [r5, #116]	; 0x74
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80077a6:	2210      	movs	r2, #16
 80077a8:	621a      	str	r2, [r3, #32]
	if ((timeout != SYS_FOREVER_US) && (timeout != 0)) {
 80077aa:	1c4b      	adds	r3, r1, #1
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d840      	bhi.n	8007832 <uart_stm32_isr+0xa6>
		if (data->dma_rx.timeout == 0) {
 80077b0:	2900      	cmp	r1, #0
 80077b2:	d053      	beq.n	800785c <uart_stm32_isr+0xd0>
	uart_stm32_err_check(dev);
 80077b4:	4620      	mov	r0, r4
}
 80077b6:	b006      	add	sp, #24
 80077b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uart_stm32_err_check(dev);
 80077bc:	f7ff bbc2 	b.w	8006f44 <uart_stm32_err_check>
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	0656      	lsls	r6, r2, #25
 80077c4:	d524      	bpl.n	8007810 <uart_stm32_isr+0x84>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80077c6:	69da      	ldr	r2, [r3, #28]
 80077c8:	0650      	lsls	r0, r2, #25
 80077ca:	d521      	bpl.n	8007810 <uart_stm32_isr+0x84>
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80077cc:	681a      	ldr	r2, [r3, #0]
	if (data->async_cb) {
 80077ce:	68ee      	ldr	r6, [r5, #12]
 80077d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80077d4:	2140      	movs	r1, #64	; 0x40
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80077d6:	601a      	str	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80077d8:	6219      	str	r1, [r3, #32]
	struct uart_event event = {
 80077da:	f8d5 20fc 	ldr.w	r2, [r5, #252]	; 0xfc
 80077de:	9202      	str	r2, [sp, #8]
 80077e0:	2300      	movs	r3, #0
		.data.tx.len = data->dma_tx.counter
 80077e2:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
	struct uart_event event = {
 80077e6:	9303      	str	r3, [sp, #12]
 80077e8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	9203      	str	r2, [sp, #12]
	data->dma_tx.buffer_length = 0;
 80077f0:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	data->dma_tx.counter = 0;
 80077f4:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	if (data->async_cb) {
 80077f8:	2e00      	cmp	r6, #0
 80077fa:	d0db      	beq.n	80077b4 <uart_stm32_isr+0x28>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 80077fc:	68a8      	ldr	r0, [r5, #8]
 80077fe:	692a      	ldr	r2, [r5, #16]
 8007800:	a901      	add	r1, sp, #4
 8007802:	47b0      	blx	r6
	uart_stm32_err_check(dev);
 8007804:	4620      	mov	r0, r4
}
 8007806:	b006      	add	sp, #24
 8007808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uart_stm32_err_check(dev);
 800780c:	f7ff bb9a 	b.w	8006f44 <uart_stm32_err_check>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	0691      	lsls	r1, r2, #26
 8007814:	d5ce      	bpl.n	80077b4 <uart_stm32_isr+0x28>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	0692      	lsls	r2, r2, #26
 800781a:	d5cb      	bpl.n	80077b4 <uart_stm32_isr+0x28>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 800781c:	8b1a      	ldrh	r2, [r3, #24]
 800781e:	b292      	uxth	r2, r2
 8007820:	f042 0208 	orr.w	r2, r2, #8
 8007824:	4620      	mov	r0, r4
 8007826:	831a      	strh	r2, [r3, #24]
}
 8007828:	b006      	add	sp, #24
 800782a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uart_stm32_err_check(dev);
 800782e:	f7ff bb89 	b.w	8006f44 <uart_stm32_err_check>
		k_work_reschedule(work, K_USEC(timeout));
 8007832:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
		t += off;
 8007836:	f111 0063 	adds.w	r0, r1, #99	; 0x63
 800783a:	ea4f 71e1 	mov.w	r1, r1, asr #31
			return t / ((uint64_t)from_hz / to_hz);
 800783e:	f141 0100 	adc.w	r1, r1, #0
 8007842:	2264      	movs	r2, #100	; 0x64
 8007844:	2300      	movs	r3, #0
 8007846:	f7f8 fcfb 	bl	8000240 <__aeabi_uldivmod>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8007852:	f001 f9e3 	bl	8008c1c <k_work_reschedule>
		if (data->dma_rx.timeout == 0) {
 8007856:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8007858:	2900      	cmp	r1, #0
 800785a:	d1ab      	bne.n	80077b4 <uart_stm32_isr+0x28>
			uart_stm32_dma_rx_flush(dev);
 800785c:	6920      	ldr	r0, [r4, #16]
 800785e:	f7ff ff69 	bl	8007734 <uart_stm32_dma_rx_flush.isra.0>
 8007862:	e7a7      	b.n	80077b4 <uart_stm32_isr+0x28>

08007864 <uart_stm32_async_rx_disable>:
{
 8007864:	b5f0      	push	{r4, r5, r6, r7, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007866:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8007868:	6904      	ldr	r4, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800786a:	681f      	ldr	r7, [r3, #0]
	if (!data->dma_rx.enabled) {
 800786c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
{
 8007870:	b08b      	sub	sp, #44	; 0x2c
	struct uart_event disabled_event = {
 8007872:	2500      	movs	r5, #0
 8007874:	2205      	movs	r2, #5
 8007876:	e9cd 5500 	strd	r5, r5, [sp]
 800787a:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800787e:	9504      	str	r5, [sp, #16]
 8007880:	f88d 2000 	strb.w	r2, [sp]
	if (!data->dma_rx.enabled) {
 8007884:	2b00      	cmp	r3, #0
 8007886:	d037      	beq.n	80078f8 <uart_stm32_async_rx_disable+0x94>
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	f023 0310 	bic.w	r3, r3, #16
 800788e:	603b      	str	r3, [r7, #0]
	uart_stm32_dma_rx_flush(dev);
 8007890:	4606      	mov	r6, r0
 8007892:	4620      	mov	r0, r4
 8007894:	f7ff ff4e 	bl	8007734 <uart_stm32_dma_rx_flush.isra.0>
	struct uart_event evt = {
 8007898:	2304      	movs	r3, #4
 800789a:	9505      	str	r5, [sp, #20]
 800789c:	f88d 3014 	strb.w	r3, [sp, #20]
 80078a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078a2:	9306      	str	r3, [sp, #24]
	if (data->async_cb) {
 80078a4:	68e3      	ldr	r3, [r4, #12]
	struct uart_event evt = {
 80078a6:	9509      	str	r5, [sp, #36]	; 0x24
 80078a8:	e9cd 5507 	strd	r5, r5, [sp, #28]
	if (data->async_cb) {
 80078ac:	b11b      	cbz	r3, 80078b6 <uart_stm32_async_rx_disable+0x52>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 80078ae:	6922      	ldr	r2, [r4, #16]
 80078b0:	68a0      	ldr	r0, [r4, #8]
 80078b2:	a905      	add	r1, sp, #20
 80078b4:	4798      	blx	r3
	data->dma_rx.enabled = false;
 80078b6:	6933      	ldr	r3, [r6, #16]
 80078b8:	2500      	movs	r5, #0
 80078ba:	f883 50a8 	strb.w	r5, [r3, #168]	; 0xa8
	(void)k_work_cancel_delayable(&data->dma_rx.timeout_work);
 80078be:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80078c2:	f001 f9e5 	bl	8008c90 <k_work_cancel_delayable>
	dma_stop(data->dma_rx.dma_dev, data->dma_rx.dma_channel);
 80078c6:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
	return api->stop(dev, channel);
 80078ca:	6883      	ldr	r3, [r0, #8]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	4798      	blx	r3
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80078d0:	683b      	ldr	r3, [r7, #0]
	data->rx_next_buffer = NULL;
 80078d2:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 80078d6:	f043 0320 	orr.w	r3, r3, #32
	data->rx_next_buffer_len = 0;
 80078da:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 80078de:	603b      	str	r3, [r7, #0]
	if (data->async_cb) {
 80078e0:	68e3      	ldr	r3, [r4, #12]
 80078e2:	b133      	cbz	r3, 80078f2 <uart_stm32_async_rx_disable+0x8e>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 80078e4:	68a0      	ldr	r0, [r4, #8]
 80078e6:	6922      	ldr	r2, [r4, #16]
 80078e8:	4669      	mov	r1, sp
 80078ea:	4798      	blx	r3
	return 0;
 80078ec:	4628      	mov	r0, r5
}
 80078ee:	b00b      	add	sp, #44	; 0x2c
 80078f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
 80078f2:	4618      	mov	r0, r3
}
 80078f4:	b00b      	add	sp, #44	; 0x2c
 80078f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (data->async_cb) {
 80078f8:	68e3      	ldr	r3, [r4, #12]
 80078fa:	b133      	cbz	r3, 800790a <uart_stm32_async_rx_disable+0xa6>
		data->async_cb(data->uart_dev, event, data->async_user_data);
 80078fc:	68a0      	ldr	r0, [r4, #8]
 80078fe:	6922      	ldr	r2, [r4, #16]
 8007900:	4669      	mov	r1, sp
 8007902:	4798      	blx	r3
		return -EFAULT;
 8007904:	f06f 000d 	mvn.w	r0, #13
 8007908:	e7f1      	b.n	80078ee <uart_stm32_async_rx_disable+0x8a>
 800790a:	f06f 000d 	mvn.w	r0, #13
 800790e:	e7ee      	b.n	80078ee <uart_stm32_async_rx_disable+0x8a>

08007910 <uart_stm32_async_rx_timeout>:
	if (data->dma_rx.counter == data->dma_rx.buffer_length) {
 8007910:	f850 2c08 	ldr.w	r2, [r0, #-8]
 8007914:	f850 3c10 	ldr.w	r3, [r0, #-16]
	const struct device *dev = data->uart_dev;
 8007918:	f850 0c70 	ldr.w	r0, [r0, #-112]
	if (data->dma_rx.counter == data->dma_rx.buffer_length) {
 800791c:	429a      	cmp	r2, r3
 800791e:	d002      	beq.n	8007926 <uart_stm32_async_rx_timeout+0x16>
		uart_stm32_dma_rx_flush(dev);
 8007920:	6900      	ldr	r0, [r0, #16]
 8007922:	f7ff bf07 	b.w	8007734 <uart_stm32_dma_rx_flush.isra.0>
		uart_stm32_async_rx_disable(dev);
 8007926:	f7ff bf9d 	b.w	8007864 <uart_stm32_async_rx_disable>
 800792a:	bf00      	nop

0800792c <random_byte_get>:

static int random_byte_get(void)
{
	int retval = -EAGAIN;
	unsigned int key;
	RNG_TypeDef *rng = entropy_stm32_rng_data.rng;
 800792c:	4b18      	ldr	r3, [pc, #96]	; (8007990 <random_byte_get+0x64>)
 800792e:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
 8007930:	f04f 0310 	mov.w	r3, #16
 8007934:	f3ef 8c11 	mrs	ip, BASEPRI
 8007938:	f383 8812 	msr	BASEPRI_MAX, r3
 800793c:	f3bf 8f6f 	isb	sy
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_SEIS(RNG_TypeDef *RNGx)
{
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8007940:	6853      	ldr	r3, [r2, #4]
 8007942:	0659      	lsls	r1, r3, #25
 8007944:	d510      	bpl.n	8007968 <random_byte_get+0x3c>
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_ClearFlag_SEIS(RNG_TypeDef *RNGx)
{
  WRITE_REG(RNGx->SR, ~RNG_SR_SEIS);
 8007946:	f06f 0340 	mvn.w	r3, #64	; 0x40
 800794a:	6053      	str	r3, [r2, #4]
 800794c:	230c      	movs	r3, #12
	for (int i = 0; i < 12; ++i) {
 800794e:	3b01      	subs	r3, #1
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(RNG_TypeDef *RNGx)
{
  return (uint32_t)(READ_REG(RNGx->DR));
 8007950:	6891      	ldr	r1, [r2, #8]
 8007952:	d1fc      	bne.n	800794e <random_byte_get+0x22>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8007954:	6853      	ldr	r3, [r2, #4]
 8007956:	0658      	lsls	r0, r3, #25
 8007958:	d506      	bpl.n	8007968 <random_byte_get+0x3c>

	key = irq_lock();

	if (LL_RNG_IsActiveFlag_SEIS(rng) && (recover_seed_error(rng) < 0)) {
		retval = -EIO;
 800795a:	f06f 0004 	mvn.w	r0, #4
	__asm__ volatile(
 800795e:	f38c 8811 	msr	BASEPRI, ip
 8007962:	f3bf 8f6f 	isb	sy

out:
	irq_unlock(key);

	return retval;
}
 8007966:	4770      	bx	lr
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 8007968:	6853      	ldr	r3, [r2, #4]
	if ((LL_RNG_IsActiveFlag_DRDY(rng) == 1)) {
 800796a:	07db      	lsls	r3, r3, #31
 800796c:	d50d      	bpl.n	800798a <random_byte_get+0x5e>
  return ((READ_BIT(RNGx->SR, RNG_SR_CECS) == (RNG_SR_CECS)) ? 1UL : 0UL);
 800796e:	6853      	ldr	r3, [r2, #4]
 8007970:	0799      	lsls	r1, r3, #30
 8007972:	d4f2      	bmi.n	800795a <random_byte_get+0x2e>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8007974:	6853      	ldr	r3, [r2, #4]
 8007976:	065b      	lsls	r3, r3, #25
 8007978:	d4ef      	bmi.n	800795a <random_byte_get+0x2e>
  return (uint32_t)(READ_REG(RNGx->DR));
 800797a:	6890      	ldr	r0, [r2, #8]
		if (retval == 0) {
 800797c:	b128      	cbz	r0, 800798a <random_byte_get+0x5e>
		retval &= 0xFF;
 800797e:	b2c0      	uxtb	r0, r0
 8007980:	f38c 8811 	msr	BASEPRI, ip
 8007984:	f3bf 8f6f 	isb	sy
}
 8007988:	4770      	bx	lr
	int retval = -EAGAIN;
 800798a:	f06f 000a 	mvn.w	r0, #10
 800798e:	e7e6      	b.n	800795e <random_byte_get+0x32>
 8007990:	200002c0 	.word	0x200002c0

08007994 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
 8007994:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t last  = rngp->last;
 8007996:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
 8007998:	f890 e003 	ldrb.w	lr, [r0, #3]
	__asm__ volatile(
 800799c:	f04f 0310 	mov.w	r3, #16
 80079a0:	f3ef 8c11 	mrs	ip, BASEPRI
 80079a4:	f383 8812 	msr	BASEPRI_MAX, r3
 80079a8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
 80079ac:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
 80079ae:	7847      	ldrb	r7, [r0, #1]

	available = (last - first) & mask;
 80079b0:	1bad      	subs	r5, r5, r6
 80079b2:	ea05 050e 	and.w	r5, r5, lr
	if (available < len) {
 80079b6:	42aa      	cmp	r2, r5
		len = available;
 80079b8:	bf88      	it	hi
 80079ba:	b2aa      	uxthhi	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
 80079bc:	18b4      	adds	r4, r6, r2
 80079be:	ea0e 0404 	and.w	r4, lr, r4
	first = rngp->first_alloc;
 80079c2:	4633      	mov	r3, r6
	rngp->first_alloc = (first + len) & mask;
 80079c4:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
 80079c6:	f38c 8811 	msr	BASEPRI, ip
 80079ca:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	while (likely(len--)) {
 80079ce:	b162      	cbz	r2, 80079ea <rng_pool_get+0x56>
 80079d0:	188c      	adds	r4, r1, r2
		*dst++ = rngp->buffer[first];
 80079d2:	eb00 0c03 	add.w	ip, r0, r3
		first = (first + 1) & mask;
 80079d6:	3301      	adds	r3, #1
		*dst++ = rngp->buffer[first];
 80079d8:	f89c c005 	ldrb.w	ip, [ip, #5]
 80079dc:	f801 cb01 	strb.w	ip, [r1], #1
	while (likely(len--)) {
 80079e0:	42a1      	cmp	r1, r4
		first = (first + 1) & mask;
 80079e2:	ea03 030e 	and.w	r3, r3, lr
	while (likely(len--)) {
 80079e6:	d1f4      	bne.n	80079d2 <rng_pool_get+0x3e>
		rngp->first_read = rngp->first_alloc;
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
 80079e8:	1aad      	subs	r5, r5, r2
	if (likely(!other_read_in_progress)) {
 80079ea:	42be      	cmp	r6, r7
 80079ec:	d10d      	bne.n	8007a0a <rng_pool_get+0x76>
	__asm__ volatile(
 80079ee:	f04f 0110 	mov.w	r1, #16
 80079f2:	f3ef 8311 	mrs	r3, BASEPRI
 80079f6:	f381 8812 	msr	BASEPRI_MAX, r1
 80079fa:	f3bf 8f6f 	isb	sy
		rngp->first_read = rngp->first_alloc;
 80079fe:	7801      	ldrb	r1, [r0, #0]
 8007a00:	7041      	strb	r1, [r0, #1]
	__asm__ volatile(
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
	if (available <= rngp->threshold) {
 8007a0a:	7903      	ldrb	r3, [r0, #4]
 8007a0c:	42ab      	cmp	r3, r5
 8007a0e:	d305      	bcc.n	8007a1c <rng_pool_get+0x88>
		LL_RNG_EnableIT(entropy_stm32_rng_data.rng);
 8007a10:	4b03      	ldr	r3, [pc, #12]	; (8007a20 <rng_pool_get+0x8c>)
 8007a12:	6819      	ldr	r1, [r3, #0]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 8007a14:	680b      	ldr	r3, [r1, #0]
 8007a16:	f043 0308 	orr.w	r3, r3, #8
 8007a1a:	600b      	str	r3, [r1, #0]
	}

	return len;
}
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a20:	200002c0 	.word	0x200002c0

08007a24 <stm32_rng_isr>:
	rngp->mask	  = size - 1;
	rngp->threshold	  = threshold;
}

static void stm32_rng_isr(const void *arg)
{
 8007a24:	b508      	push	{r3, lr}
	int byte, ret;

	ARG_UNUSED(arg);

	byte = random_byte_get();
 8007a26:	f7ff ff81 	bl	800792c <random_byte_get>
	if (byte < 0) {
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	db13      	blt.n	8007a56 <stm32_rng_isr+0x32>
	uint8_t last  = rngp->last;
 8007a2e:	4a19      	ldr	r2, [pc, #100]	; (8007a94 <stm32_rng_isr+0x70>)
 8007a30:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	if (((last - first) & mask) == mask) {
 8007a34:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
	uint8_t mask  = rngp->mask;
 8007a38:	f892 c03b 	ldrb.w	ip, [r2, #59]	; 0x3b
	if (((last - first) & mask) == mask) {
 8007a3c:	1a59      	subs	r1, r3, r1
 8007a3e:	ea3c 0101 	bics.w	r1, ip, r1
		return;
	}

	ret = rng_pool_put((struct rng_pool *)(entropy_stm32_rng_data.isr),
 8007a42:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
 8007a44:	d008      	beq.n	8007a58 <stm32_rng_isr+0x34>
	rngp->buffer[last] = byte;
 8007a46:	18d1      	adds	r1, r2, r3
	rngp->last = (last + 1) & mask;
 8007a48:	3301      	adds	r3, #1
 8007a4a:	ea03 030c 	and.w	r3, r3, ip
	rngp->buffer[last] = byte;
 8007a4e:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
	rngp->last = (last + 1) & mask;
 8007a52:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
			LL_RNG_DisableIT(entropy_stm32_rng_data.rng);
		}

		k_sem_give(&entropy_stm32_rng_data.sem_sync);
	}
}
 8007a56:	bd08      	pop	{r3, pc}
	uint8_t last  = rngp->last;
 8007a58:	f892 304f 	ldrb.w	r3, [r2, #79]	; 0x4f
	if (((last - first) & mask) == mask) {
 8007a5c:	f892 104e 	ldrb.w	r1, [r2, #78]	; 0x4e
	uint8_t mask  = rngp->mask;
 8007a60:	f892 c050 	ldrb.w	ip, [r2, #80]	; 0x50
	if (((last - first) & mask) == mask) {
 8007a64:	1a59      	subs	r1, r3, r1
 8007a66:	ea3c 0101 	bics.w	r1, ip, r1
 8007a6a:	d00c      	beq.n	8007a86 <stm32_rng_isr+0x62>
	rngp->buffer[last] = byte;
 8007a6c:	18d1      	adds	r1, r2, r3
	rngp->last = (last + 1) & mask;
 8007a6e:	3301      	adds	r3, #1
 8007a70:	ea03 030c 	and.w	r3, r3, ip
	rngp->buffer[last] = byte;
 8007a74:	f881 0052 	strb.w	r0, [r1, #82]	; 0x52
	rngp->last = (last + 1) & mask;
 8007a78:	f882 304f 	strb.w	r3, [r2, #79]	; 0x4f
	z_impl_k_sem_give(sem);
 8007a7c:	4806      	ldr	r0, [pc, #24]	; (8007a98 <stm32_rng_isr+0x74>)
}
 8007a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a82:	f000 bf33 	b.w	80088ec <z_impl_k_sem_give>
			LL_RNG_DisableIT(entropy_stm32_rng_data.rng);
 8007a86:	6812      	ldr	r2, [r2, #0]
  CLEAR_BIT(RNGx->CR, RNG_CR_IE);
 8007a88:	6813      	ldr	r3, [r2, #0]
 8007a8a:	f023 0308 	bic.w	r3, r3, #8
 8007a8e:	6013      	str	r3, [r2, #0]
}
 8007a90:	e7f4      	b.n	8007a7c <stm32_rng_isr+0x58>
 8007a92:	bf00      	nop
 8007a94:	200002c0 	.word	0x200002c0
 8007a98:	200002e0 	.word	0x200002e0

08007a9c <entropy_stm32_rng_get_entropy>:
					 uint16_t len)
{
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_stm32_rng_data == dev->data);

	while (len) {
 8007a9c:	b34a      	cbz	r2, 8007af2 <entropy_stm32_rng_get_entropy+0x56>
{
 8007a9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
 8007aa2:	4f15      	ldr	r7, [pc, #84]	; (8007af8 <entropy_stm32_rng_get_entropy+0x5c>)
 8007aa4:	460e      	mov	r6, r1
 8007aa6:	4615      	mov	r5, r2
		uint16_t bytes;

		k_sem_take(&entropy_stm32_rng_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get(
 8007aa8:	f107 0845 	add.w	r8, r7, #69	; 0x45
 8007aac:	f107 0918 	add.w	r9, r7, #24
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f000 ff41 	bl	8008940 <z_impl_k_sem_take>
 8007abe:	462a      	mov	r2, r5
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	f7ff ff66 	bl	8007994 <rng_pool_get>
 8007ac8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
 8007aca:	4638      	mov	r0, r7
 8007acc:	f000 ff0e 	bl	80088ec <z_impl_k_sem_give>
			/* Pool is empty: Sleep until next interrupt. */
			k_sem_take(&entropy_stm32_rng_data.sem_sync, K_FOREVER);
			continue;
		}

		len -= bytes;
 8007ad0:	1b2b      	subs	r3, r5, r4
		if (bytes == 0U) {
 8007ad2:	b134      	cbz	r4, 8007ae2 <entropy_stm32_rng_get_entropy+0x46>
		len -= bytes;
 8007ad4:	b29d      	uxth	r5, r3
		buf += bytes;
 8007ad6:	4426      	add	r6, r4
	while (len) {
 8007ad8:	2d00      	cmp	r5, #0
 8007ada:	d1e9      	bne.n	8007ab0 <entropy_stm32_rng_get_entropy+0x14>
	}

	return 0;
}
 8007adc:	2000      	movs	r0, #0
 8007ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_take(sem, timeout);
 8007ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007aea:	4648      	mov	r0, r9
 8007aec:	f000 ff28 	bl	8008940 <z_impl_k_sem_take>
	while (len) {
 8007af0:	e7de      	b.n	8007ab0 <entropy_stm32_rng_get_entropy+0x14>
}
 8007af2:	2000      	movs	r0, #0
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	200002c8 	.word	0x200002c8

08007afc <entropy_stm32_rng_init>:
  *         @arg @ref LL_RCC_PLLSAI1Q_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 8007afc:	4b33      	ldr	r3, [pc, #204]	; (8007bcc <entropy_stm32_rng_init+0xd0>)
 8007afe:	68da      	ldr	r2, [r3, #12]
 8007b00:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007b04:	f042 0201 	orr.w	r2, r2, #1

	return cnt;
}

static int entropy_stm32_rng_init(const struct device *dev)
{
 8007b08:	b570      	push	{r4, r5, r6, lr}
	const struct entropy_stm32_rng_dev_cfg *dev_cfg;
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	dev_data = dev->data;
 8007b0a:	6904      	ldr	r4, [r0, #16]
	dev_cfg = dev->config;
 8007b0c:	6846      	ldr	r6, [r0, #4]
 8007b0e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLQ);
 8007b10:	691a      	ldr	r2, [r3, #16]
 8007b12:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007b16:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8007b1a:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8007b1e:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007b26:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLSAI1CFGR  PLLSAI1QEN    LL_RCC_PLLSAI1_EnableDomain_48M
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_48M(void)
{
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN);
 8007b28:	691a      	ldr	r2, [r3, #16]
 8007b2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007b2e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	0112      	lsls	r2, r2, #4
 8007b34:	d5fc      	bpl.n	8007b30 <entropy_stm32_rng_init+0x34>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, RNGxSource);
 8007b36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	z_stm32_hsem_unlock(CFG_HW_CLK48_CONFIG_SEMID);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

#endif /* CONFIG_SOC_SERIES_STM32L4X */

	dev_data->clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
 8007b3a:	4d25      	ldr	r5, [pc, #148]	; (8007bd0 <entropy_stm32_rng_init+0xd4>)
 8007b3c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007b40:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8007b48:	6065      	str	r5, [r4, #4]
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f000 fbf2 	bl	8008334 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8007b50:	b120      	cbz	r0, 8007b5c <entropy_stm32_rng_init+0x60>
	return api->on(dev, sys);
 8007b52:	68ab      	ldr	r3, [r5, #8]
 8007b54:	4631      	mov	r1, r6
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4628      	mov	r0, r5
 8007b5a:	4798      	blx	r3
#endif
	/* Write RNG HTCR configuration */
	LL_RNG_SetHealthConfig(dev_data->rng, DT_INST_PROP(0, health_test_config));
#endif

	LL_RNG_EnableIT(dev_data->rng);
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f850 3b08 	ldr.w	r3, [r0], #8
  SET_BIT(RNGx->CR, RNG_CR_IE);
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	f042 0208 	orr.w	r2, r2, #8
 8007b68:	601a      	str	r2, [r3, #0]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	f042 0204 	orr.w	r2, r2, #4
 8007b70:	601a      	str	r2, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
 8007b72:	2201      	movs	r2, #1
 8007b74:	4611      	mov	r1, r2
 8007b76:	f000 fea9 	bl	80088cc <z_impl_k_sem_init>
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	f104 0020 	add.w	r0, r4, #32
 8007b82:	f000 fea3 	bl	80088cc <z_impl_k_sem_init>
	rngp->threshold	  = threshold;
 8007b86:	2304      	movs	r3, #4
	rngp->first_alloc = 0U;
 8007b88:	2500      	movs	r5, #0
	rngp->threshold	  = threshold;
 8007b8a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
	rngp->mask	  = size - 1;
 8007b8e:	2207      	movs	r2, #7
	rngp->threshold	  = threshold;
 8007b90:	230c      	movs	r3, #12
	rngp->mask	  = size - 1;
 8007b92:	210f      	movs	r1, #15
 8007b94:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8007b98:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
		      CONFIG_ENTROPY_STM32_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(dev_data->isr),
		      CONFIG_ENTROPY_STM32_ISR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_ISR_THRESHOLD);

	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 8007b9c:	462a      	mov	r2, r5
	rngp->threshold	  = threshold;
 8007b9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 8007ba2:	4629      	mov	r1, r5
	rngp->first_alloc = 0U;
 8007ba4:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
	rngp->first_read  = 0U;
 8007ba8:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
	rngp->last	  = 0U;
 8007bac:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
	rngp->first_alloc = 0U;
 8007bb0:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	rngp->first_read  = 0U;
 8007bb4:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
	rngp->last	  = 0U;
 8007bb8:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 8007bbc:	2050      	movs	r0, #80	; 0x50
 8007bbe:	f7f9 ff59 	bl	8001a74 <z_arm_irq_priority_set>
	irq_enable(IRQN);
 8007bc2:	2050      	movs	r0, #80	; 0x50
 8007bc4:	f7f9 ff24 	bl	8001a10 <arch_irq_enable>

	return 0;
}
 8007bc8:	4628      	mov	r0, r5
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	40021000 	.word	0x40021000
 8007bd0:	0800b78c 	.word	0x0800b78c

08007bd4 <entropy_stm32_rng_get_entropy_isr>:
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 8007bd4:	07d8      	lsls	r0, r3, #31
{
 8007bd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 8007bda:	d404      	bmi.n	8007be6 <entropy_stm32_rng_get_entropy_isr+0x12>
		return rng_pool_get(
 8007bdc:	4823      	ldr	r0, [pc, #140]	; (8007c6c <entropy_stm32_rng_get_entropy_isr+0x98>)
 8007bde:	f7ff fed9 	bl	8007994 <rng_pool_get>
}
 8007be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
 8007be6:	4614      	mov	r4, r2
 8007be8:	b912      	cbnz	r2, 8007bf0 <entropy_stm32_rng_get_entropy_isr+0x1c>
	return cnt;
 8007bea:	4620      	mov	r0, r4
}
 8007bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf0:	460d      	mov	r5, r1
	__asm__ volatile(
 8007bf2:	f04f 0310 	mov.w	r3, #16
 8007bf6:	f3ef 8611 	mrs	r6, BASEPRI
 8007bfa:	f383 8812 	msr	BASEPRI_MAX, r3
 8007bfe:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
 8007c02:	2050      	movs	r0, #80	; 0x50
 8007c04:	f7f9 ff28 	bl	8001a58 <arch_irq_is_enabled>
 8007c08:	4680      	mov	r8, r0
		irq_disable(IRQN);
 8007c0a:	2050      	movs	r0, #80	; 0x50
 8007c0c:	f7f9 ff10 	bl	8001a30 <arch_irq_disable>
	__asm__ volatile(
 8007c10:	f386 8811 	msr	BASEPRI, r6
 8007c14:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c18:	4e15      	ldr	r6, [pc, #84]	; (8007c70 <entropy_stm32_rng_get_entropy_isr+0x9c>)
 8007c1a:	f8df a058 	ldr.w	sl, [pc, #88]	; 8007c74 <entropy_stm32_rng_get_entropy_isr+0xa0>
 8007c1e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8007c22:	f8c6 7188 	str.w	r7, [r6, #392]	; 0x188
 8007c26:	46a1      	mov	r9, r4
			while (LL_RNG_IsActiveFlag_DRDY(
 8007c28:	f8da 3000 	ldr.w	r3, [sl]
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	07db      	lsls	r3, r3, #31
 8007c30:	d516      	bpl.n	8007c60 <entropy_stm32_rng_get_entropy_isr+0x8c>
			byte = random_byte_get();
 8007c32:	f7ff fe7b 	bl	800792c <random_byte_get>
			if (byte < 0) {
 8007c36:	1e03      	subs	r3, r0, #0
			buf[--len] = byte;
 8007c38:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8007c3c:	f8c6 7188 	str.w	r7, [r6, #392]	; 0x188
			if (byte < 0) {
 8007c40:	dbf2      	blt.n	8007c28 <entropy_stm32_rng_get_entropy_isr+0x54>
			buf[--len] = byte;
 8007c42:	fa1f f982 	uxth.w	r9, r2
 8007c46:	f805 3009 	strb.w	r3, [r5, r9]
		} while (len);
 8007c4a:	f1b9 0f00 	cmp.w	r9, #0
 8007c4e:	d1eb      	bne.n	8007c28 <entropy_stm32_rng_get_entropy_isr+0x54>
		if (irq_enabled) {
 8007c50:	f1b8 0f00 	cmp.w	r8, #0
 8007c54:	d0c9      	beq.n	8007bea <entropy_stm32_rng_get_entropy_isr+0x16>
			irq_enable(IRQN);
 8007c56:	2050      	movs	r0, #80	; 0x50
 8007c58:	f7f9 feda 	bl	8001a10 <arch_irq_enable>
	return cnt;
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	e7c5      	b.n	8007bec <entropy_stm32_rng_get_entropy_isr+0x18>
  __ASM volatile ("dsb 0xF":::"memory");
 8007c60:	f3bf 8f4f 	dsb	sy
				__WFE();
 8007c64:	bf20      	wfe
				__SEV();
 8007c66:	bf40      	sev
				__WFE();
 8007c68:	bf20      	wfe
 8007c6a:	e7dd      	b.n	8007c28 <entropy_stm32_rng_get_entropy_isr+0x54>
 8007c6c:	200002f8 	.word	0x200002f8
 8007c70:	e000e100 	.word	0xe000e100
 8007c74:	200002c0 	.word	0x200002c0

08007c78 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8007c78:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
{
 8007c7c:	b430      	push	{r4, r5}
	uint32_t val1 = SysTick->VAL;	/* A */
 8007c7e:	6995      	ldr	r5, [r2, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8007c80:	6913      	ldr	r3, [r2, #16]
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
	    || (val1 < val2)) {
		overflow_cyc += last_load;
 8007c82:	4909      	ldr	r1, [pc, #36]	; (8007ca8 <elapsed+0x30>)
	uint32_t val2 = SysTick->VAL;	/* C */
 8007c84:	6990      	ldr	r0, [r2, #24]
		overflow_cyc += last_load;
 8007c86:	680c      	ldr	r4, [r1, #0]
 8007c88:	4a08      	ldr	r2, [pc, #32]	; (8007cac <elapsed+0x34>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8007c8a:	03db      	lsls	r3, r3, #15
 8007c8c:	d401      	bmi.n	8007c92 <elapsed+0x1a>
	    || (val1 < val2)) {
 8007c8e:	4285      	cmp	r5, r0
 8007c90:	d205      	bcs.n	8007c9e <elapsed+0x26>
		overflow_cyc += last_load;
 8007c92:	6811      	ldr	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8007c94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
		overflow_cyc += last_load;
 8007c98:	4421      	add	r1, r4
 8007c9a:	6011      	str	r1, [r2, #0]
		(void)SysTick->CTRL;
 8007c9c:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8007c9e:	6813      	ldr	r3, [r2, #0]
 8007ca0:	4423      	add	r3, r4
}
 8007ca2:	1a18      	subs	r0, r3, r0
 8007ca4:	bc30      	pop	{r4, r5}
 8007ca6:	4770      	bx	lr
 8007ca8:	20000dd8 	.word	0x20000dd8
 8007cac:	20000ddc 	.word	0x20000ddc

08007cb0 <sys_clock_driver_init>:
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

static int sys_clock_driver_init(const struct device *dev)
{
 8007cb0:	b430      	push	{r4, r5}
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
	SysTick->LOAD = last_load;
 8007cb2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cb6:	4d0a      	ldr	r5, [pc, #40]	; (8007ce0 <sys_clock_driver_init+0x30>)
	last_load = CYC_PER_TICK - 1;
 8007cb8:	4c0a      	ldr	r4, [pc, #40]	; (8007ce4 <sys_clock_driver_init+0x34>)
	overflow_cyc = 0U;
 8007cba:	490b      	ldr	r1, [pc, #44]	; (8007ce8 <sys_clock_driver_init+0x38>)
 8007cbc:	2000      	movs	r0, #0
	last_load = CYC_PER_TICK - 1;
 8007cbe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8007cc2:	f04f 0c10 	mov.w	ip, #16
 8007cc6:	f885 c023 	strb.w	ip, [r5, #35]	; 0x23
 8007cca:	6022      	str	r2, [r4, #0]
	overflow_cyc = 0U;
 8007ccc:	6008      	str	r0, [r1, #0]
	SysTick->LOAD = last_load;
 8007cce:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8007cd0:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	f042 0207 	orr.w	r2, r2, #7
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8007cd8:	bc30      	pop	{r4, r5}
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8007cda:	611a      	str	r2, [r3, #16]
}
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	e000ed00 	.word	0xe000ed00
 8007ce4:	20000dd8 	.word	0x20000dd8
 8007ce8:	20000ddc 	.word	0x20000ddc

08007cec <sys_clock_isr>:
{
 8007cec:	b538      	push	{r3, r4, r5, lr}
	elapsed();
 8007cee:	f7ff ffc3 	bl	8007c78 <elapsed>
	cycle_count += overflow_cyc;
 8007cf2:	4c0d      	ldr	r4, [pc, #52]	; (8007d28 <sys_clock_isr+0x3c>)
 8007cf4:	480d      	ldr	r0, [pc, #52]	; (8007d2c <sys_clock_isr+0x40>)
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	6802      	ldr	r2, [r0, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8007cfa:	490d      	ldr	r1, [pc, #52]	; (8007d30 <sys_clock_isr+0x44>)
	cycle_count += overflow_cyc;
 8007cfc:	441a      	add	r2, r3
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8007cfe:	680b      	ldr	r3, [r1, #0]
	cycle_count += overflow_cyc;
 8007d00:	6022      	str	r2, [r4, #0]
	overflow_cyc = 0;
 8007d02:	2500      	movs	r5, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8007d04:	4c0b      	ldr	r4, [pc, #44]	; (8007d34 <sys_clock_isr+0x48>)
	overflow_cyc = 0;
 8007d06:	6005      	str	r5, [r0, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8007d08:	1ad0      	subs	r0, r2, r3
 8007d0a:	fba4 4000 	umull	r4, r0, r4, r0
		announced_cycles += dticks * CYC_PER_TICK;
 8007d0e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8007d12:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 8007d14:	fb02 3300 	mla	r3, r2, r0, r3
 8007d18:	600b      	str	r3, [r1, #0]
		sys_clock_announce(dticks);
 8007d1a:	f7f8 fdf5 	bl	8000908 <sys_clock_announce>
}
 8007d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_arm_int_exit();
 8007d22:	f7fa b83f 	b.w	8001da4 <z_arm_exc_exit>
 8007d26:	bf00      	nop
 8007d28:	20000dd4 	.word	0x20000dd4
 8007d2c:	20000ddc 	.word	0x20000ddc
 8007d30:	20000dd0 	.word	0x20000dd0
 8007d34:	10624dd3 	.word	0x10624dd3

08007d38 <sys_clock_set_timeout>:
{
 8007d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8007d3a:	2900      	cmp	r1, #0
 8007d3c:	d03d      	beq.n	8007dba <sys_clock_set_timeout+0x82>
 8007d3e:	1c42      	adds	r2, r0, #1
 8007d40:	d066      	beq.n	8007e10 <sys_clock_set_timeout+0xd8>
	uint32_t last_load_ = last_load;
 8007d42:	4f3a      	ldr	r7, [pc, #232]	; (8007e2c <sys_clock_set_timeout+0xf4>)
 8007d44:	683c      	ldr	r4, [r7, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8007d46:	2801      	cmp	r0, #1
 8007d48:	dd3e      	ble.n	8007dc8 <sys_clock_set_timeout+0x90>
 8007d4a:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 8007d4e:	dd6a      	ble.n	8007e26 <sys_clock_set_timeout+0xee>
 8007d50:	f44f 6503 	mov.w	r5, #2096	; 0x830
	__asm__ volatile(
 8007d54:	f04f 0310 	mov.w	r3, #16
 8007d58:	f3ef 8611 	mrs	r6, BASEPRI
 8007d5c:	f383 8812 	msr	BASEPRI_MAX, r3
 8007d60:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8007d64:	f7ff ff88 	bl	8007c78 <elapsed>
	cycle_count += pending;
 8007d68:	4a31      	ldr	r2, [pc, #196]	; (8007e30 <sys_clock_set_timeout+0xf8>)
	uint32_t unannounced = cycle_count - announced_cycles;
 8007d6a:	4b32      	ldr	r3, [pc, #200]	; (8007e34 <sys_clock_set_timeout+0xfc>)
 8007d6c:	6819      	ldr	r1, [r3, #0]
	cycle_count += pending;
 8007d6e:	6813      	ldr	r3, [r2, #0]
	val1 = SysTick->VAL;
 8007d70:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
	cycle_count += pending;
 8007d74:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8007d76:	4b30      	ldr	r3, [pc, #192]	; (8007e38 <sys_clock_set_timeout+0x100>)
	val1 = SysTick->VAL;
 8007d78:	f8dc c018 	ldr.w	ip, [ip, #24]
	cycle_count += pending;
 8007d7c:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0U;
 8007d7e:	f04f 0e00 	mov.w	lr, #0
 8007d82:	f8c3 e000 	str.w	lr, [r3]
	if ((int32_t)unannounced < 0) {
 8007d86:	1a43      	subs	r3, r0, r1
 8007d88:	d420      	bmi.n	8007dcc <sys_clock_set_timeout+0x94>
		delay = ticks * CYC_PER_TICK;
 8007d8a:	f44f 5efa 	mov.w	lr, #8000	; 0x1f40
		delay += unannounced;
 8007d8e:	fb0e 3305 	mla	r3, lr, r5, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8007d92:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 8007d96:	4d29      	ldr	r5, [pc, #164]	; (8007e3c <sys_clock_set_timeout+0x104>)
 8007d98:	331f      	adds	r3, #31
 8007d9a:	fba5 5303 	umull	r5, r3, r5, r3
		delay -= unannounced;
 8007d9e:	1a09      	subs	r1, r1, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8007da0:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 8007da2:	fb0e 1303 	mla	r3, lr, r3, r1
		delay = MAX(delay, MIN_DELAY);
 8007da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007daa:	d928      	bls.n	8007dfe <sys_clock_set_timeout+0xc6>
		if (delay > MAX_CYCLES) {
 8007dac:	4924      	ldr	r1, [pc, #144]	; (8007e40 <sys_clock_set_timeout+0x108>)
 8007dae:	428b      	cmp	r3, r1
 8007db0:	d92b      	bls.n	8007e0a <sys_clock_set_timeout+0xd2>
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8007db2:	f8df e090 	ldr.w	lr, [pc, #144]	; 8007e44 <sys_clock_set_timeout+0x10c>
			last_load = MAX_CYCLES;
 8007db6:	6039      	str	r1, [r7, #0]
 8007db8:	e00d      	b.n	8007dd6 <sys_clock_set_timeout+0x9e>
	uint32_t last_load_ = last_load;
 8007dba:	4f1c      	ldr	r7, [pc, #112]	; (8007e2c <sys_clock_set_timeout+0xf4>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8007dbc:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8007dbe:	683c      	ldr	r4, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8007dc0:	d1c1      	bne.n	8007d46 <sys_clock_set_timeout+0xe>
 8007dc2:	f640 052f 	movw	r5, #2095	; 0x82f
 8007dc6:	e7c5      	b.n	8007d54 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8007dc8:	2500      	movs	r5, #0
 8007dca:	e7c3      	b.n	8007d54 <sys_clock_set_timeout+0x1c>
		last_load = MIN_DELAY;
 8007dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dd0:	603b      	str	r3, [r7, #0]
 8007dd2:	f240 3eff 	movw	lr, #1023	; 0x3ff
	val2 = SysTick->VAL;
 8007dd6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	SysTick->VAL = 0; /* resets timer to last_load */
 8007dda:	2500      	movs	r5, #0
	val2 = SysTick->VAL;
 8007ddc:	698b      	ldr	r3, [r1, #24]
	SysTick->LOAD = last_load - 1;
 8007dde:	f8c1 e014 	str.w	lr, [r1, #20]
	if (val1 < val2) {
 8007de2:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 8007de4:	ebac 0303 	sub.w	r3, ip, r3
 8007de8:	bf3a      	itte	cc
 8007dea:	18e4      	addcc	r4, r4, r3
 8007dec:	1900      	addcc	r0, r0, r4
		cycle_count += (val1 - val2);
 8007dee:	18c0      	addcs	r0, r0, r3
	SysTick->VAL = 0; /* resets timer to last_load */
 8007df0:	618d      	str	r5, [r1, #24]
		cycle_count += (val1 - val2);
 8007df2:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
 8007df4:	f386 8811 	msr	BASEPRI, r6
 8007df8:	f3bf 8f6f 	isb	sy
}
 8007dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dfe:	f240 3eff 	movw	lr, #1023	; 0x3ff
		delay = MAX(delay, MIN_DELAY);
 8007e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 8007e06:	603b      	str	r3, [r7, #0]
 8007e08:	e7e5      	b.n	8007dd6 <sys_clock_set_timeout+0x9e>
	SysTick->LOAD = last_load - 1;
 8007e0a:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8007e0e:	e7fa      	b.n	8007e06 <sys_clock_set_timeout+0xce>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8007e10:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
		last_load = TIMER_STOPPED;
 8007e14:	4905      	ldr	r1, [pc, #20]	; (8007e2c <sys_clock_set_timeout+0xf4>)
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8007e16:	6913      	ldr	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8007e18:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8007e1c:	f023 0301 	bic.w	r3, r3, #1
 8007e20:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8007e22:	6008      	str	r0, [r1, #0]
}
 8007e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8007e26:	1e45      	subs	r5, r0, #1
 8007e28:	e794      	b.n	8007d54 <sys_clock_set_timeout+0x1c>
 8007e2a:	bf00      	nop
 8007e2c:	20000dd8 	.word	0x20000dd8
 8007e30:	20000dd4 	.word	0x20000dd4
 8007e34:	20000dd0 	.word	0x20000dd0
 8007e38:	20000ddc 	.word	0x20000ddc
 8007e3c:	10624dd3 	.word	0x10624dd3
 8007e40:	00ffdc00 	.word	0x00ffdc00
 8007e44:	00ffdbff 	.word	0x00ffdbff

08007e48 <sys_clock_elapsed>:
{
 8007e48:	b410      	push	{r4}
	__asm__ volatile(
 8007e4a:	f04f 0310 	mov.w	r3, #16
 8007e4e:	f3ef 8c11 	mrs	ip, BASEPRI
 8007e52:	f383 8812 	msr	BASEPRI_MAX, r3
 8007e56:	f3bf 8f6f 	isb	sy
	uint32_t val1 = SysTick->VAL;	/* A */
 8007e5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e5e:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8007e60:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8007e62:	699c      	ldr	r4, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8007e64:	03d3      	lsls	r3, r2, #15
 8007e66:	d401      	bmi.n	8007e6c <sys_clock_elapsed+0x24>
	    || (val1 < val2)) {
 8007e68:	42a1      	cmp	r1, r4
 8007e6a:	d21c      	bcs.n	8007ea6 <sys_clock_elapsed+0x5e>
		overflow_cyc += last_load;
 8007e6c:	4b10      	ldr	r3, [pc, #64]	; (8007eb0 <sys_clock_elapsed+0x68>)
 8007e6e:	4911      	ldr	r1, [pc, #68]	; (8007eb4 <sys_clock_elapsed+0x6c>)
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	6809      	ldr	r1, [r1, #0]
 8007e74:	440a      	add	r2, r1
 8007e76:	601a      	str	r2, [r3, #0]
		(void)SysTick->CTRL;
 8007e78:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007e7c:	6912      	ldr	r2, [r2, #16]
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8007e7e:	4a0e      	ldr	r2, [pc, #56]	; (8007eb8 <sys_clock_elapsed+0x70>)
	return (last_load - val2) + overflow_cyc;
 8007e80:	6818      	ldr	r0, [r3, #0]
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8007e82:	6813      	ldr	r3, [r2, #0]
 8007e84:	4418      	add	r0, r3
 8007e86:	4b0d      	ldr	r3, [pc, #52]	; (8007ebc <sys_clock_elapsed+0x74>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	1b00      	subs	r0, r0, r4
 8007e8c:	1ac0      	subs	r0, r0, r3
 8007e8e:	4408      	add	r0, r1
	__asm__ volatile(
 8007e90:	f38c 8811 	msr	BASEPRI, ip
 8007e94:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
 8007e98:	4b09      	ldr	r3, [pc, #36]	; (8007ec0 <sys_clock_elapsed+0x78>)
}
 8007e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return cyc / CYC_PER_TICK;
 8007e9e:	fba3 3000 	umull	r3, r0, r3, r0
}
 8007ea2:	0a40      	lsrs	r0, r0, #9
 8007ea4:	4770      	bx	lr
		overflow_cyc += last_load;
 8007ea6:	4a03      	ldr	r2, [pc, #12]	; (8007eb4 <sys_clock_elapsed+0x6c>)
 8007ea8:	4b01      	ldr	r3, [pc, #4]	; (8007eb0 <sys_clock_elapsed+0x68>)
 8007eaa:	6811      	ldr	r1, [r2, #0]
 8007eac:	e7e7      	b.n	8007e7e <sys_clock_elapsed+0x36>
 8007eae:	bf00      	nop
 8007eb0:	20000ddc 	.word	0x20000ddc
 8007eb4:	20000dd8 	.word	0x20000dd8
 8007eb8:	20000dd4 	.word	0x20000dd4
 8007ebc:	20000dd0 	.word	0x20000dd0
 8007ec0:	10624dd3 	.word	0x10624dd3

08007ec4 <sys_clock_cycle_get_32>:
{
 8007ec4:	b410      	push	{r4}
	__asm__ volatile(
 8007ec6:	f04f 0310 	mov.w	r3, #16
 8007eca:	f3ef 8c11 	mrs	ip, BASEPRI
 8007ece:	f383 8812 	msr	BASEPRI_MAX, r3
 8007ed2:	f3bf 8f6f 	isb	sy
	uint32_t val1 = SysTick->VAL;	/* A */
 8007ed6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007eda:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8007edc:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8007ede:	699c      	ldr	r4, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8007ee0:	03d3      	lsls	r3, r2, #15
 8007ee2:	d401      	bmi.n	8007ee8 <sys_clock_cycle_get_32+0x24>
	    || (val1 < val2)) {
 8007ee4:	42a1      	cmp	r1, r4
 8007ee6:	d215      	bcs.n	8007f14 <sys_clock_cycle_get_32+0x50>
		overflow_cyc += last_load;
 8007ee8:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <sys_clock_cycle_get_32+0x58>)
 8007eea:	490d      	ldr	r1, [pc, #52]	; (8007f20 <sys_clock_cycle_get_32+0x5c>)
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	6809      	ldr	r1, [r1, #0]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	601a      	str	r2, [r3, #0]
		(void)SysTick->CTRL;
 8007ef4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007ef8:	6912      	ldr	r2, [r2, #16]
	uint32_t ret = elapsed() + cycle_count;
 8007efa:	4a0a      	ldr	r2, [pc, #40]	; (8007f24 <sys_clock_cycle_get_32+0x60>)
	return (last_load - val2) + overflow_cyc;
 8007efc:	6818      	ldr	r0, [r3, #0]
	uint32_t ret = elapsed() + cycle_count;
 8007efe:	6813      	ldr	r3, [r2, #0]
 8007f00:	4418      	add	r0, r3
 8007f02:	1b00      	subs	r0, r0, r4
 8007f04:	4408      	add	r0, r1
	__asm__ volatile(
 8007f06:	f38c 8811 	msr	BASEPRI, ip
 8007f0a:	f3bf 8f6f 	isb	sy
}
 8007f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f12:	4770      	bx	lr
		overflow_cyc += last_load;
 8007f14:	4a02      	ldr	r2, [pc, #8]	; (8007f20 <sys_clock_cycle_get_32+0x5c>)
 8007f16:	4b01      	ldr	r3, [pc, #4]	; (8007f1c <sys_clock_cycle_get_32+0x58>)
 8007f18:	6811      	ldr	r1, [r2, #0]
 8007f1a:	e7ee      	b.n	8007efa <sys_clock_cycle_get_32+0x36>
 8007f1c:	20000ddc 	.word	0x20000ddc
 8007f20:	20000dd8 	.word	0x20000dd8
 8007f24:	20000dd4 	.word	0x20000dd4

08007f28 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8007f28:	b510      	push	{r4, lr}
	*state = &config->states[0];
 8007f2a:	6803      	ldr	r3, [r0, #0]
 8007f2c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8007f2e:	f890 e004 	ldrb.w	lr, [r0, #4]
 8007f32:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 8007f36:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8007f3a:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
 8007f3e:	4563      	cmp	r3, ip
 8007f40:	bf98      	it	ls
 8007f42:	ea4f 0ece 	movls.w	lr, lr, lsl #3
 8007f46:	d906      	bls.n	8007f56 <pinctrl_lookup_state+0x2e>
 8007f48:	e00d      	b.n	8007f66 <pinctrl_lookup_state+0x3e>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
 8007f4a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8007f4c:	6804      	ldr	r4, [r0, #0]
 8007f4e:	eb04 0c0e 	add.w	ip, r4, lr
 8007f52:	4563      	cmp	r3, ip
 8007f54:	d807      	bhi.n	8007f66 <pinctrl_lookup_state+0x3e>
		if (id == (*state)->id) {
 8007f56:	f893 c005 	ldrb.w	ip, [r3, #5]
 8007f5a:	458c      	cmp	ip, r1
		(*state)++;
 8007f5c:	f103 0308 	add.w	r3, r3, #8
		if (id == (*state)->id) {
 8007f60:	d1f3      	bne.n	8007f4a <pinctrl_lookup_state+0x22>
			return 0;
 8007f62:	2000      	movs	r0, #0
	}

	return -ENOENT;
}
 8007f64:	bd10      	pop	{r4, pc}
	return -ENOENT;
 8007f66:	f06f 0001 	mvn.w	r0, #1
}
 8007f6a:	bd10      	pop	{r4, pc}

08007f6c <pinctrl_configure_pins>:
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8007f6c:	2900      	cmp	r1, #0
 8007f6e:	d041      	beq.n	8007ff4 <pinctrl_configure_pins+0x88>
 8007f70:	3901      	subs	r1, #1
{
 8007f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f76:	b2c9      	uxtb	r1, r1
 8007f78:	f100 0708 	add.w	r7, r0, #8
	port_device = gpio_ports[STM32_PORT(pin)];
 8007f7c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8007ff8 <pinctrl_configure_pins+0x8c>
 8007f80:	4605      	mov	r5, r0
 8007f82:	eb07 07c1 	add.w	r7, r7, r1, lsl #3
	uint32_t func = 0;
 8007f86:	2600      	movs	r6, #0
 8007f88:	e020      	b.n	8007fcc <pinctrl_configure_pins+0x60>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8007f8a:	686e      	ldr	r6, [r5, #4]
 8007f8c:	f046 0620 	orr.w	r6, r6, #32
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8007f90:	f3c4 2243 	ubfx	r2, r4, #9, #4
 8007f94:	2a0a      	cmp	r2, #10
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8007f96:	f3c4 1447 	ubfx	r4, r4, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8007f9a:	d828      	bhi.n	8007fee <pinctrl_configure_pins+0x82>
	port_device = gpio_ports[STM32_PORT(pin)];
 8007f9c:	f858 9022 	ldr.w	r9, [r8, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8007fa0:	f1b9 0f00 	cmp.w	r9, #0
 8007fa4:	d01f      	beq.n	8007fe6 <pinctrl_configure_pins+0x7a>
 8007fa6:	4648      	mov	r0, r9
 8007fa8:	f000 f9c4 	bl	8008334 <z_device_is_ready>
 8007fac:	4684      	mov	ip, r0
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8007fae:	3508      	adds	r5, #8
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8007fb0:	4653      	mov	r3, sl
 8007fb2:	4632      	mov	r2, r6
 8007fb4:	f004 010f 	and.w	r1, r4, #15
 8007fb8:	4648      	mov	r0, r9
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8007fba:	f1bc 0f00 	cmp.w	ip, #0
 8007fbe:	d012      	beq.n	8007fe6 <pinctrl_configure_pins+0x7a>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8007fc0:	f7fb fa22 	bl	8003408 <gpio_stm32_configure>
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
		if (ret < 0) {
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	db0c      	blt.n	8007fe2 <pinctrl_configure_pins+0x76>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8007fc8:	42af      	cmp	r7, r5
 8007fca:	d009      	beq.n	8007fe0 <pinctrl_configure_pins+0x74>
		mux = pins[i].pinmux;
 8007fcc:	682c      	ldr	r4, [r5, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8007fce:	06e3      	lsls	r3, r4, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8007fd0:	f004 0a1f 	and.w	sl, r4, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8007fd4:	d5d9      	bpl.n	8007f8a <pinctrl_configure_pins+0x1e>
			func = STM32_MODER_ANALOG_MODE;
 8007fd6:	f1ba 0f10 	cmp.w	sl, #16
 8007fda:	bf08      	it	eq
 8007fdc:	2630      	moveq	r6, #48	; 0x30
 8007fde:	e7d7      	b.n	8007f90 <pinctrl_configure_pins+0x24>
			return ret;
		}
	}

	return 0;
 8007fe0:	2000      	movs	r0, #0
}
 8007fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENODEV;
 8007fe6:	f06f 0012 	mvn.w	r0, #18
}
 8007fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
 8007fee:	f06f 0015 	mvn.w	r0, #21
 8007ff2:	e7f6      	b.n	8007fe2 <pinctrl_configure_pins+0x76>
	return 0;
 8007ff4:	2000      	movs	r0, #0
}
 8007ff6:	4770      	bx	lr
 8007ff8:	0800c42c 	.word	0x0800c42c

08007ffc <LL_DMA_Init>:
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8007ffc:	4b1d      	ldr	r3, [pc, #116]	; (8008074 <LL_DMA_Init+0x78>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8007ffe:	b530      	push	{r4, r5, lr}
 8008000:	5c5c      	ldrb	r4, [r3, r1]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8008002:	e9d2 3502 	ldrd	r3, r5, [r2, #8]
 8008006:	432b      	orrs	r3, r5
                        DMA_InitStruct->Mode                   | \
 8008008:	6915      	ldr	r5, [r2, #16]
 800800a:	432b      	orrs	r3, r5
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800800c:	6955      	ldr	r5, [r2, #20]
 800800e:	432b      	orrs	r3, r5
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8008010:	6995      	ldr	r5, [r2, #24]
 8008012:	432b      	orrs	r3, r5
 8008014:	5825      	ldr	r5, [r4, r0]
 8008016:	f425 4eff 	bic.w	lr, r5, #32640	; 0x7f80
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800801a:	69d5      	ldr	r5, [r2, #28]
 800801c:	432b      	orrs	r3, r5
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800801e:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8008020:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
 8008024:	432b      	orrs	r3, r5
 8008026:	eb04 0c00 	add.w	ip, r4, r0
 800802a:	ea43 030e 	orr.w	r3, r3, lr
 800802e:	5023      	str	r3, [r4, r0]

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 8008030:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8008032:	f8cc 300c 	str.w	r3, [ip, #12]

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8008036:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8008038:	f8cc 3008 	str.w	r3, [ip, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800803c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008040:	6a14      	ldr	r4, [r2, #32]
 8008042:	0c1b      	lsrs	r3, r3, #16
 8008044:	041b      	lsls	r3, r3, #16
 8008046:	4323      	orrs	r3, r4
 8008048:	f8cc 3004 	str.w	r3, [ip, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 800804c:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
#else
  /*--------------------------- DMAx CSELR Configuration -----------------------
   * Configure the DMA request for DMA instance on Channel x with parameter :
   * - PeriphRequest: DMA_CSELR[31:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8008050:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8008052:	0089      	lsls	r1, r1, #2
 8008054:	220f      	movs	r2, #15
 8008056:	408a      	lsls	r2, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008058:	fa92 f1a2 	rbit	r1, r2
  return __builtin_clz(value);
 800805c:	fab1 f181 	clz	r1, r1
 8008060:	ea24 0202 	bic.w	r2, r4, r2
 8008064:	fa03 f101 	lsl.w	r1, r3, r1
 8008068:	4311      	orrs	r1, r2
 800806a:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
#endif /* DMAMUX1 */

  return SUCCESS;
}
 800806e:	2000      	movs	r0, #0
 8008070:	bd30      	pop	{r4, r5, pc}
 8008072:	bf00      	nop
 8008074:	0800c468 	.word	0x0800c468

08008078 <LL_DMA_StructInit>:
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 8008078:	2300      	movs	r3, #0
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800807a:	e9c0 3300 	strd	r3, r3, [r0]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800807e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8008082:	e9c0 3304 	strd	r3, r3, [r0, #16]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8008086:	e9c0 3306 	strd	r3, r3, [r0, #24]
  DMA_InitStruct->NbData                 = 0x00000000U;
#if defined(DMAMUX1)
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
#else
  DMA_InitStruct->PeriphRequest          = LL_DMA_REQUEST_0;
 800808a:	e9c0 3308 	strd	r3, r3, [r0, #32]
#endif /* DMAMUX1 */
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800808e:	6283      	str	r3, [r0, #40]	; 0x28
}
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop

08008094 <LL_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8008094:	4b24      	ldr	r3, [pc, #144]	; (8008128 <LL_SetFlashLatency.part.0+0x94>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  {
    status = ERROR;
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800809c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a0:	d028      	beq.n	80080f4 <LL_SetFlashLatency.part.0+0x60>
          latency = LL_FLASH_LATENCY_1;
        }
        /* else HCLKFrequency <= 8MHz default LL_FLASH_LATENCY_0 0WS */
      }
#else
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 80080a2:	4b22      	ldr	r3, [pc, #136]	; (800812c <LL_SetFlashLatency.part.0+0x98>)
 80080a4:	4298      	cmp	r0, r3
 80080a6:	d910      	bls.n	80080ca <LL_SetFlashLatency.part.0+0x36>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80080a8:	2300      	movs	r3, #0
      {
        /* Unexpected HCLK > 26 */
        status = ERROR;
 80080aa:	f04f 0c01 	mov.w	ip, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80080ae:	4920      	ldr	r1, [pc, #128]	; (8008130 <LL_SetFlashLatency.part.0+0x9c>)
 80080b0:	680a      	ldr	r2, [r1, #0]
 80080b2:	f022 0207 	bic.w	r2, r2, #7
 80080b6:	431a      	orrs	r2, r3
 80080b8:	600a      	str	r2, [r1, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80080ba:	680a      	ldr	r2, [r1, #0]
 80080bc:	f002 0207 	and.w	r2, r2, #7
    {
      status = ERROR;
    }
  }
  return status;
}
 80080c0:	4293      	cmp	r3, r2
 80080c2:	bf0c      	ite	eq
 80080c4:	4660      	moveq	r0, ip
 80080c6:	2001      	movne	r0, #1
 80080c8:	4770      	bx	lr
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 80080ca:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 80080ce:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 80080d2:	4298      	cmp	r0, r3
 80080d4:	d80a      	bhi.n	80080ec <LL_SetFlashLatency.part.0+0x58>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 80080d6:	4b17      	ldr	r3, [pc, #92]	; (8008134 <LL_SetFlashLatency.part.0+0xa0>)
 80080d8:	4298      	cmp	r0, r3
 80080da:	d814      	bhi.n	8008106 <LL_SetFlashLatency.part.0+0x72>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 80080dc:	4b16      	ldr	r3, [pc, #88]	; (8008138 <LL_SetFlashLatency.part.0+0xa4>)
 80080de:	4298      	cmp	r0, r3
  ErrorStatus status = SUCCESS;
 80080e0:	f04f 0c00 	mov.w	ip, #0
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 80080e4:	bf94      	ite	ls
 80080e6:	2300      	movls	r3, #0
 80080e8:	2301      	movhi	r3, #1
 80080ea:	e7e0      	b.n	80080ae <LL_SetFlashLatency.part.0+0x1a>
        latency = LL_FLASH_LATENCY_3;
 80080ec:	2303      	movs	r3, #3
  ErrorStatus status = SUCCESS;
 80080ee:	f04f 0c00 	mov.w	ip, #0
 80080f2:	e7dc      	b.n	80080ae <LL_SetFlashLatency.part.0+0x1a>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 80080f4:	4b11      	ldr	r3, [pc, #68]	; (800813c <LL_SetFlashLatency.part.0+0xa8>)
 80080f6:	4298      	cmp	r0, r3
 80080f8:	d809      	bhi.n	800810e <LL_SetFlashLatency.part.0+0x7a>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 80080fa:	4b11      	ldr	r3, [pc, #68]	; (8008140 <LL_SetFlashLatency.part.0+0xac>)
 80080fc:	4298      	cmp	r0, r3
 80080fe:	d8f5      	bhi.n	80080ec <LL_SetFlashLatency.part.0+0x58>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 8008100:	4b10      	ldr	r3, [pc, #64]	; (8008144 <LL_SetFlashLatency.part.0+0xb0>)
 8008102:	4298      	cmp	r0, r3
 8008104:	d907      	bls.n	8008116 <LL_SetFlashLatency.part.0+0x82>
        latency = LL_FLASH_LATENCY_2;
 8008106:	2302      	movs	r3, #2
  ErrorStatus status = SUCCESS;
 8008108:	f04f 0c00 	mov.w	ip, #0
 800810c:	e7cf      	b.n	80080ae <LL_SetFlashLatency.part.0+0x1a>
        latency = LL_FLASH_LATENCY_4;
 800810e:	2304      	movs	r3, #4
  ErrorStatus status = SUCCESS;
 8008110:	f04f 0c00 	mov.w	ip, #0
 8008114:	e7cb      	b.n	80080ae <LL_SetFlashLatency.part.0+0x1a>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 8008116:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <LL_SetFlashLatency.part.0+0xb4>)
 8008118:	4298      	cmp	r0, r3
  ErrorStatus status = SUCCESS;
 800811a:	f04f 0c00 	mov.w	ip, #0
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 800811e:	bf94      	ite	ls
 8008120:	2300      	movls	r3, #0
 8008122:	2301      	movhi	r3, #1
 8008124:	e7c3      	b.n	80080ae <LL_SetFlashLatency.part.0+0x1a>
 8008126:	bf00      	nop
 8008128:	40007000 	.word	0x40007000
 800812c:	018cba80 	.word	0x018cba80
 8008130:	40022000 	.word	0x40022000
 8008134:	00b71b00 	.word	0x00b71b00
 8008138:	005b8d80 	.word	0x005b8d80
 800813c:	03d09000 	.word	0x03d09000
 8008140:	02dc6c00 	.word	0x02dc6c00
 8008144:	01e84800 	.word	0x01e84800
 8008148:	00f42400 	.word	0x00f42400

0800814c <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800814e:	680f      	ldr	r7, [r1, #0]
 8008150:	4a28      	ldr	r2, [pc, #160]	; (80081f4 <UTILS_EnablePLLAndSwitchSystem+0xa8>)

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8008152:	4e29      	ldr	r6, [pc, #164]	; (80081f8 <UTILS_EnablePLLAndSwitchSystem+0xac>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8008154:	f3c7 1303 	ubfx	r3, r7, #4, #4
{
 8008158:	460d      	mov	r5, r1
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800815a:	5cd3      	ldrb	r3, [r2, r3]
  if(SystemCoreClock < hclk_frequency)
 800815c:	6831      	ldr	r1, [r6, #0]
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800815e:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 8008162:	42a1      	cmp	r1, r4
 8008164:	d20c      	bcs.n	8008180 <UTILS_EnablePLLAndSwitchSystem+0x34>
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 8008166:	4b25      	ldr	r3, [pc, #148]	; (80081fc <UTILS_EnablePLLAndSwitchSystem+0xb0>)
 8008168:	1e62      	subs	r2, r4, #1
 800816a:	429a      	cmp	r2, r3
 800816c:	d901      	bls.n	8008172 <UTILS_EnablePLLAndSwitchSystem+0x26>
    status = ERROR;
 800816e:	2001      	movs	r0, #1
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8008170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008172:	4620      	mov	r0, r4
 8008174:	f7ff ff8e 	bl	8008094 <LL_SetFlashLatency.part.0>
  if(status == SUCCESS)
 8008178:	2800      	cmp	r0, #0
 800817a:	d136      	bne.n	80081ea <UTILS_EnablePLLAndSwitchSystem+0x9e>
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 800817c:	682f      	ldr	r7, [r5, #0]
  if(SystemCoreClock > hclk_frequency)
 800817e:	6831      	ldr	r1, [r6, #0]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008180:	4b1f      	ldr	r3, [pc, #124]	; (8008200 <UTILS_EnablePLLAndSwitchSystem+0xb4>)
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008188:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800818a:	68da      	ldr	r2, [r3, #12]
 800818c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008190:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	0192      	lsls	r2, r2, #6
 8008196:	d5fc      	bpl.n	8008192 <UTILS_EnablePLLAndSwitchSystem+0x46>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008198:	689a      	ldr	r2, [r3, #8]
 800819a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800819e:	433a      	orrs	r2, r7
 80081a0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	f042 0203 	orr.w	r2, r2, #3
 80081a8:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80081aa:	4a15      	ldr	r2, [pc, #84]	; (8008200 <UTILS_EnablePLLAndSwitchSystem+0xb4>)
 80081ac:	6893      	ldr	r3, [r2, #8]
 80081ae:	f003 030c 	and.w	r3, r3, #12
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80081b2:	2b0c      	cmp	r3, #12
 80081b4:	d1fa      	bne.n	80081ac <UTILS_EnablePLLAndSwitchSystem+0x60>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80081b6:	6893      	ldr	r3, [r2, #8]
 80081b8:	6868      	ldr	r0, [r5, #4]
 80081ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80081be:	4303      	orrs	r3, r0
 80081c0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80081c2:	6893      	ldr	r3, [r2, #8]
 80081c4:	68a8      	ldr	r0, [r5, #8]
 80081c6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80081ca:	4303      	orrs	r3, r0
  if(SystemCoreClock > hclk_frequency)
 80081cc:	428c      	cmp	r4, r1
 80081ce:	6093      	str	r3, [r2, #8]
 80081d0:	d208      	bcs.n	80081e4 <UTILS_EnablePLLAndSwitchSystem+0x98>
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 80081d2:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <UTILS_EnablePLLAndSwitchSystem+0xb0>)
 80081d4:	1e62      	subs	r2, r4, #1
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d8c9      	bhi.n	800816e <UTILS_EnablePLLAndSwitchSystem+0x22>
 80081da:	4620      	mov	r0, r4
 80081dc:	f7ff ff5a 	bl	8008094 <LL_SetFlashLatency.part.0>
  if(status == SUCCESS)
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d1c5      	bne.n	8008170 <UTILS_EnablePLLAndSwitchSystem+0x24>
  SystemCoreClock = HCLKFrequency;
 80081e4:	6034      	str	r4, [r6, #0]
}
 80081e6:	2000      	movs	r0, #0
}
 80081e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(SystemCoreClock > hclk_frequency)
 80081ea:	6833      	ldr	r3, [r6, #0]
 80081ec:	42a3      	cmp	r3, r4
 80081ee:	d9bf      	bls.n	8008170 <UTILS_EnablePLLAndSwitchSystem+0x24>
 80081f0:	e7f3      	b.n	80081da <UTILS_EnablePLLAndSwitchSystem+0x8e>
 80081f2:	bf00      	nop
 80081f4:	0800c458 	.word	0x0800c458
 80081f8:	2000031c 	.word	0x2000031c
 80081fc:	04c4b3ff 	.word	0x04c4b3ff
 8008200:	40021000 	.word	0x40021000

08008204 <LL_PLL_ConfigSystemClock_HSI>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8008204:	4b1c      	ldr	r3, [pc, #112]	; (8008278 <LL_PLL_ConfigSystemClock_HSI+0x74>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	0192      	lsls	r2, r2, #6
 800820a:	d502      	bpl.n	8008212 <LL_PLL_ConfigSystemClock_HSI+0xe>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800820c:	681b      	ldr	r3, [r3, #0]
}
 800820e:	2001      	movs	r0, #1
 8008210:	4770      	bx	lr
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	0112      	lsls	r2, r2, #4
 8008216:	d4fa      	bmi.n	800820e <LL_PLL_ConfigSystemClock_HSI+0xa>
{
 8008218:	b5f0      	push	{r4, r5, r6, r7, lr}
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 800821a:	e9d0 6401 	ldrd	r6, r4, [r0, #4]
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800821e:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8008220:	f8d3 e000 	ldr.w	lr, [r3]
 8008224:	4f15      	ldr	r7, [pc, #84]	; (800827c <LL_PLL_ConfigSystemClock_HSI+0x78>)
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 8008226:	0e60      	lsrs	r0, r4, #25
 8008228:	3001      	adds	r0, #1
 800822a:	0042      	lsls	r2, r0, #1
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800822c:	ea4f 1c15 	mov.w	ip, r5, lsr #4
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8008230:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 8008234:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008238:	f10c 0c01 	add.w	ip, ip, #1
 800823c:	fbb7 fcfc 	udiv	ip, r7, ip
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8008240:	fb0c f000 	mul.w	r0, ip, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 8008244:	fbb0 f0f2 	udiv	r0, r0, r2
 8008248:	d106      	bne.n	8008258 <LL_PLL_ConfigSystemClock_HSI+0x54>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008250:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	0552      	lsls	r2, r2, #21
 8008256:	d5fc      	bpl.n	8008252 <LL_PLL_ConfigSystemClock_HSI+0x4e>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8008258:	4a07      	ldr	r2, [pc, #28]	; (8008278 <LL_PLL_ConfigSystemClock_HSI+0x74>)
 800825a:	4b09      	ldr	r3, [pc, #36]	; (8008280 <LL_PLL_ConfigSystemClock_HSI+0x7c>)
 800825c:	68d7      	ldr	r7, [r2, #12]
 800825e:	403b      	ands	r3, r7
 8008260:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8008264:	432b      	orrs	r3, r5
 8008266:	4323      	orrs	r3, r4
 8008268:	f043 0302 	orr.w	r3, r3, #2
}
 800826c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008270:	60d3      	str	r3, [r2, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8008272:	f7ff bf6b 	b.w	800814c <UTILS_EnablePLLAndSwitchSystem>
 8008276:	bf00      	nop
 8008278:	40021000 	.word	0x40021000
 800827c:	00f42400 	.word	0x00f42400
 8008280:	f9ff808c 	.word	0xf9ff808c

08008284 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop

08008288 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8008288:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <z_sys_init_run_level+0x40>)
 800828a:	1c42      	adds	r2, r0, #1
{
 800828c:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800828e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8008292:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8008296:	42b4      	cmp	r4, r6
 8008298:	d215      	bcs.n	80082c6 <z_sys_init_run_level+0x3e>
		const struct device *dev = entry->dev;
		int rc = entry->init(dev);
 800829a:	e9d4 3500 	ldrd	r3, r5, [r4]
 800829e:	4628      	mov	r0, r5
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80082a0:	3408      	adds	r4, #8
		int rc = entry->init(dev);
 80082a2:	4798      	blx	r3

		if (dev != NULL) {
 80082a4:	2d00      	cmp	r5, #0
 80082a6:	d0f6      	beq.n	8008296 <z_sys_init_run_level+0xe>
					rc = -rc;
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 80082a8:	68ea      	ldr	r2, [r5, #12]
			if (rc != 0) {
 80082aa:	b130      	cbz	r0, 80082ba <z_sys_init_run_level+0x32>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	bfb8      	it	lt
 80082b0:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 80082b2:	28ff      	cmp	r0, #255	; 0xff
 80082b4:	bfa8      	it	ge
 80082b6:	20ff      	movge	r0, #255	; 0xff
 80082b8:	7010      	strb	r0, [r2, #0]
			}
			dev->state->initialized = true;
 80082ba:	7853      	ldrb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80082bc:	42b4      	cmp	r4, r6
			dev->state->initialized = true;
 80082be:	f043 0301 	orr.w	r3, r3, #1
 80082c2:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80082c4:	d3e9      	bcc.n	800829a <z_sys_init_run_level+0x12>
		}
	}
}
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	0800c470 	.word	0x0800c470

080082cc <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 80082cc:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 80082ce:	b350      	cbz	r0, 8008326 <z_impl_device_get_binding+0x5a>
 80082d0:	7803      	ldrb	r3, [r0, #0]
 80082d2:	4606      	mov	r6, r0
 80082d4:	b33b      	cbz	r3, 8008326 <z_impl_device_get_binding+0x5a>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 80082d6:	4a15      	ldr	r2, [pc, #84]	; (800832c <z_impl_device_get_binding+0x60>)
 80082d8:	4d15      	ldr	r5, [pc, #84]	; (8008330 <z_impl_device_get_binding+0x64>)
 80082da:	42aa      	cmp	r2, r5
 80082dc:	d023      	beq.n	8008326 <z_impl_device_get_binding+0x5a>
 80082de:	4614      	mov	r4, r2
	 */
	if (dev == NULL) {
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 80082e0:	68e3      	ldr	r3, [r4, #12]
 80082e2:	881b      	ldrh	r3, [r3, #0]
		if (z_device_is_ready(dev) && (dev->name == name)) {
 80082e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ec:	d102      	bne.n	80082f4 <z_impl_device_get_binding+0x28>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	42b3      	cmp	r3, r6
 80082f2:	d016      	beq.n	8008322 <z_impl_device_get_binding+0x56>
	for (dev = __device_start; dev != __device_end; dev++) {
 80082f4:	3418      	adds	r4, #24
 80082f6:	42ac      	cmp	r4, r5
 80082f8:	d1f2      	bne.n	80082e0 <z_impl_device_get_binding+0x14>
	for (dev = __device_start; dev != __device_end; dev++) {
 80082fa:	42aa      	cmp	r2, r5
 80082fc:	d013      	beq.n	8008326 <z_impl_device_get_binding+0x5a>
 80082fe:	4c0b      	ldr	r4, [pc, #44]	; (800832c <z_impl_device_get_binding+0x60>)
 8008300:	e002      	b.n	8008308 <z_impl_device_get_binding+0x3c>
 8008302:	3418      	adds	r4, #24
 8008304:	42ac      	cmp	r4, r5
 8008306:	d00e      	beq.n	8008326 <z_impl_device_get_binding+0x5a>
	return dev->state->initialized && (dev->state->init_res == 0U);
 8008308:	68e3      	ldr	r3, [r4, #12]
 800830a:	881b      	ldrh	r3, [r3, #0]
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800830c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008314:	d1f5      	bne.n	8008302 <z_impl_device_get_binding+0x36>
 8008316:	6821      	ldr	r1, [r4, #0]
 8008318:	4630      	mov	r0, r6
 800831a:	f7f8 f900 	bl	800051e <strcmp>
 800831e:	2800      	cmp	r0, #0
 8008320:	d1ef      	bne.n	8008302 <z_impl_device_get_binding+0x36>
}
 8008322:	4620      	mov	r0, r4
 8008324:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 8008326:	2400      	movs	r4, #0
}
 8008328:	4620      	mov	r0, r4
 800832a:	bd70      	pop	{r4, r5, r6, pc}
 800832c:	0800b78c 	.word	0x0800b78c
 8008330:	0800b8c4 	.word	0x0800b8c4

08008334 <z_device_is_ready>:
	if (dev == NULL) {
 8008334:	b140      	cbz	r0, 8008348 <z_device_is_ready+0x14>
	return dev->state->initialized && (dev->state->init_res == 0U);
 8008336:	68c3      	ldr	r3, [r0, #12]
 8008338:	8818      	ldrh	r0, [r3, #0]
 800833a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800833e:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8008342:	fab0 f080 	clz	r0, r0
 8008346:	0940      	lsrs	r0, r0, #5
}
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop

0800834c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 800834c:	4b01      	ldr	r3, [pc, #4]	; (8008354 <z_impl_z_errno+0x8>)
 800834e:	6898      	ldr	r0, [r3, #8]
}
 8008350:	3064      	adds	r0, #100	; 0x64
 8008352:	4770      	bx	lr
 8008354:	20000de0 	.word	0x20000de0

08008358 <arch_system_halt>:
	__asm__ volatile(
 8008358:	f04f 0210 	mov.w	r2, #16
 800835c:	f3ef 8311 	mrs	r3, BASEPRI
 8008360:	f382 8812 	msr	BASEPRI_MAX, r2
 8008364:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8008368:	e7fe      	b.n	8008368 <arch_system_halt+0x10>
 800836a:	bf00      	nop

0800836c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800836c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 800836e:	f7ff fff3 	bl	8008358 <arch_system_halt>
 8008372:	bf00      	nop

08008374 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	4605      	mov	r5, r0
 800837a:	9101      	str	r1, [sp, #4]
 800837c:	f04f 0310 	mov.w	r3, #16
 8008380:	f3ef 8611 	mrs	r6, BASEPRI
 8008384:	f383 8812 	msr	BASEPRI_MAX, r3
 8008388:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800838c:	f001 f8ca 	bl	8009524 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8008390:	9901      	ldr	r1, [sp, #4]
 8008392:	4604      	mov	r4, r0
 8008394:	4628      	mov	r0, r5
 8008396:	f7ff ffe9 	bl	800836c <k_sys_fatal_error_handler>
	__asm__ volatile(
 800839a:	f386 8811 	msr	BASEPRI, r6
 800839e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80083a2:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 80083a4:	b002      	add	sp, #8
 80083a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083aa:	f7f9 be35 	b.w	8002018 <z_impl_k_thread_abort>
 80083ae:	bf00      	nop

080083b0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 80083b0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 80083b2:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <bg_thread_main+0x30>)
 80083b4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80083b6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 80083b8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80083ba:	f7ff ff65 	bl	8008288 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 80083be:	f001 fead 	bl	800a11c <boot_banner>

#if defined(CONFIG_CPLUSPLUS) && !defined(CONFIG_ARCH_POSIX)
	void z_cpp_init_static(void);
	z_cpp_init_static();
 80083c2:	f7f9 fae3 	bl	800198c <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 80083c6:	2003      	movs	r0, #3
 80083c8:	f7ff ff5e 	bl	8008288 <z_sys_init_run_level>

	z_init_static_threads();
 80083cc:	f000 f926 	bl	800861c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 80083d0:	f001 fea2 	bl	800a118 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 80083d4:	4a03      	ldr	r2, [pc, #12]	; (80083e4 <bg_thread_main+0x34>)
 80083d6:	7b13      	ldrb	r3, [r2, #12]
 80083d8:	f023 0301 	bic.w	r3, r3, #1
 80083dc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 80083de:	bd08      	pop	{r3, pc}
 80083e0:	20000e3d 	.word	0x20000e3d
 80083e4:	20000600 	.word	0x20000600

080083e8 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 80083e8:	4802      	ldr	r0, [pc, #8]	; (80083f4 <z_bss_zero+0xc>)
 80083ea:	4a03      	ldr	r2, [pc, #12]	; (80083f8 <z_bss_zero+0x10>)
 80083ec:	2100      	movs	r1, #0
 80083ee:	1a12      	subs	r2, r2, r0
 80083f0:	f002 bf04 	b.w	800b1fc <memset>
 80083f4:	20000470 	.word	0x20000470
 80083f8:	20000e40 	.word	0x20000e40

080083fc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 80083fc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8008400:	f8df a100 	ldr.w	sl, [pc, #256]	; 8008504 <z_cstart+0x108>
 8008404:	b0b9      	sub	sp, #228	; 0xe4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8008406:	f38a 8808 	msr	MSP, sl
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800840a:	4d36      	ldr	r5, [pc, #216]	; (80084e4 <z_cstart+0xe8>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 800840c:	4e36      	ldr	r6, [pc, #216]	; (80084e8 <z_cstart+0xec>)
 800840e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8008410:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8008508 <z_cstart+0x10c>
	z_setup_new_thread(thread, stack,
 8008414:	4f35      	ldr	r7, [pc, #212]	; (80084ec <z_cstart+0xf0>)
 8008416:	2400      	movs	r4, #0
 8008418:	22f0      	movs	r2, #240	; 0xf0
 800841a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800841e:	616b      	str	r3, [r5, #20]
 8008420:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
 8008424:	77ec      	strb	r4, [r5, #31]
 8008426:	762c      	strb	r4, [r5, #24]
 8008428:	766c      	strb	r4, [r5, #25]
 800842a:	76ac      	strb	r4, [r5, #26]
 800842c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8008430:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008432:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008436:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8008438:	f7f9 fdba 	bl	8001fb0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800843c:	f7f9 face 	bl	80019dc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8008440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008444:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8008446:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8008448:	f7f9 fe88 	bl	800215c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800844c:	f7f9 fdfa 	bl	8002044 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8008450:	f240 1201 	movw	r2, #257	; 0x101
	_current_cpu->current = dummy_thread;
 8008454:	ab06      	add	r3, sp, #24
	dummy_thread->base.user_options = K_ESSENTIAL;
 8008456:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 800845a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 800845c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
 8008460:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8008462:	f7ff ff0f 	bl	8008284 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8008466:	4620      	mov	r0, r4
	_kernel.ready_q.cache = &z_main_thread;
 8008468:	4d21      	ldr	r5, [pc, #132]	; (80084f0 <z_cstart+0xf4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800846a:	f7ff ff0d 	bl	8008288 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800846e:	2001      	movs	r0, #1
 8008470:	f7ff ff0a 	bl	8008288 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8008474:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
 8008478:	f000 ff7c 	bl	8009374 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800847c:	4b1d      	ldr	r3, [pc, #116]	; (80084f4 <z_cstart+0xf8>)
 800847e:	491e      	ldr	r1, [pc, #120]	; (80084f8 <z_cstart+0xfc>)
 8008480:	9305      	str	r3, [sp, #20]
 8008482:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008486:	464b      	mov	r3, r9
 8008488:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800848c:	e9cd 4400 	strd	r4, r4, [sp]
 8008490:	f8cd b010 	str.w	fp, [sp, #16]
 8008494:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
 8008496:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8008498:	f000 f844 	bl	8008524 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800849c:	7b6b      	ldrb	r3, [r5, #13]
 800849e:	4680      	mov	r8, r0
 80084a0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 80084a4:	4628      	mov	r0, r5
 80084a6:	736b      	strb	r3, [r5, #13]
 80084a8:	f000 fda6 	bl	8008ff8 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 80084ac:	230f      	movs	r3, #15
 80084ae:	4913      	ldr	r1, [pc, #76]	; (80084fc <z_cstart+0x100>)
 80084b0:	9303      	str	r3, [sp, #12]
 80084b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80084b6:	4b12      	ldr	r3, [pc, #72]	; (8008500 <z_cstart+0x104>)
 80084b8:	9600      	str	r6, [sp, #0]
 80084ba:	e9cd b404 	strd	fp, r4, [sp, #16]
 80084be:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80084c2:	4638      	mov	r0, r7
 80084c4:	f000 f82e 	bl	8008524 <z_setup_new_thread>
 80084c8:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].id = i;
 80084ca:	7534      	strb	r4, [r6, #20]
 80084cc:	f023 0304 	bic.w	r3, r3, #4
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 80084d0:	464a      	mov	r2, r9
 80084d2:	4641      	mov	r1, r8
 80084d4:	4628      	mov	r0, r5
		_kernel.cpus[i].irq_stack =
 80084d6:	f8c6 a004 	str.w	sl, [r6, #4]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 80084da:	60f7      	str	r7, [r6, #12]
 80084dc:	737b      	strb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 80084de:	f7f9 fc29 	bl	8001d34 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 80084e2:	bf00      	nop
 80084e4:	e000ed00 	.word	0xe000ed00
 80084e8:	20000de0 	.word	0x20000de0
 80084ec:	20000538 	.word	0x20000538
 80084f0:	20000600 	.word	0x20000600
 80084f4:	0800c488 	.word	0x0800c488
 80084f8:	20001300 	.word	0x20001300
 80084fc:	20002380 	.word	0x20002380
 8008500:	0800870d 	.word	0x0800870d
 8008504:	20002d80 	.word	0x20002d80
 8008508:	080083b1 	.word	0x080083b1

0800850c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800850c:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
 8008510:	3800      	subs	r0, #0
 8008512:	bf18      	it	ne
 8008514:	2001      	movne	r0, #1
 8008516:	4770      	bx	lr

08008518 <z_impl_k_thread_name_set>:

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
 8008518:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop

08008520 <z_impl_k_thread_start>:

void z_impl_k_thread_start(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_thread, start, thread);

	z_sched_start(thread);
 8008520:	f000 bd7a 	b.w	8009018 <z_sched_start>

08008524 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8008524:	b570      	push	{r4, r5, r6, lr}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8008526:	3207      	adds	r2, #7
{
 8008528:	b084      	sub	sp, #16
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800852a:	f022 0507 	bic.w	r5, r2, #7
{
 800852e:	460a      	mov	r2, r1

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8008530:	3220      	adds	r2, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 8008532:	6682      	str	r2, [r0, #104]	; 0x68

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 8008534:	2600      	movs	r6, #0
{
 8008536:	9a08      	ldr	r2, [sp, #32]
	new_thread->stack_info.size = stack_buf_size;
 8008538:	66c5      	str	r5, [r0, #108]	; 0x6c
	node->prev = NULL;
 800853a:	e9c0 6606 	strd	r6, r6, [r0, #24]
	thread_base->pended_on = NULL;
 800853e:	6086      	str	r6, [r0, #8]
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
 8008540:	73c6      	strb	r6, [r0, #15]
	new_thread->stack_info.delta = delta;
 8008542:	6706      	str	r6, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8008544:	9200      	str	r2, [sp, #0]
{
 8008546:	9a09      	ldr	r2, [sp, #36]	; 0x24
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8008548:	9201      	str	r2, [sp, #4]
{
 800854a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800854c:	9202      	str	r2, [sp, #8]
{
 800854e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	thread_base->prio = priority;
 8008550:	7382      	strb	r2, [r0, #14]
{
 8008552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->user_options = (uint8_t)options;
 8008554:	7302      	strb	r2, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8008556:	3520      	adds	r5, #32
 8008558:	f100 0258 	add.w	r2, r0, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
 800855c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
	stack_ptr = (char *)stack + stack_obj_size;
 8008560:	440d      	add	r5, r1
	thread_base->thread_state = (uint8_t)initial_state;
 8008562:	2204      	movs	r2, #4
 8008564:	7342      	strb	r2, [r0, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8008566:	462a      	mov	r2, r5
{
 8008568:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800856a:	f7f9 fb4d 	bl	8001c08 <arch_new_thread>
	if (!_current) {
 800856e:	4b04      	ldr	r3, [pc, #16]	; (8008580 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
 8008570:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	b103      	cbz	r3, 8008578 <z_setup_new_thread+0x54>
	new_thread->resource_pool = _current->resource_pool;
 8008576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 8008578:	6763      	str	r3, [r4, #116]	; 0x74
}
 800857a:	4628      	mov	r0, r5
 800857c:	b004      	add	sp, #16
 800857e:	bd70      	pop	{r4, r5, r6, pc}
 8008580:	20000de0 	.word	0x20000de0

08008584 <z_impl_k_thread_create>:
{
 8008584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008586:	460d      	mov	r5, r1
 8008588:	b085      	sub	sp, #20
 800858a:	3520      	adds	r5, #32
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800858c:	3207      	adds	r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800858e:	6685      	str	r5, [r0, #104]	; 0x68
{
 8008590:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
 8008592:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8008594:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
 8008598:	66c2      	str	r2, [r0, #108]	; 0x6c
	node->prev = NULL;
 800859a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
 800859e:	6085      	str	r5, [r0, #8]
	thread_base->sched_locked = 0U;
 80085a0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 80085a2:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80085a4:	9600      	str	r6, [sp, #0]
{
 80085a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80085a8:	9601      	str	r6, [sp, #4]
{
 80085aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80085ac:	9602      	str	r6, [sp, #8]
{
 80085ae:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->prio = priority;
 80085b0:	7386      	strb	r6, [r0, #14]
{
 80085b2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	thread_base->user_options = (uint8_t)options;
 80085b4:	7306      	strb	r6, [r0, #12]
 80085b6:	f100 0658 	add.w	r6, r0, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
 80085ba:	e9c0 6616 	strd	r6, r6, [r0, #88]	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80085be:	3220      	adds	r2, #32
	thread_base->thread_state = (uint8_t)initial_state;
 80085c0:	2604      	movs	r6, #4
 80085c2:	7346      	strb	r6, [r0, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80085c4:	440a      	add	r2, r1
{
 80085c6:	4604      	mov	r4, r0
 80085c8:	e9dd 7610 	ldrd	r7, r6, [sp, #64]	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80085cc:	f7f9 fb1c 	bl	8001c08 <arch_new_thread>
	if (!_current) {
 80085d0:	4b10      	ldr	r3, [pc, #64]	; (8008614 <z_impl_k_thread_create+0x90>)
	new_thread->init_data = NULL;
 80085d2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	b103      	cbz	r3, 80085da <z_impl_k_thread_create+0x56>
	new_thread->resource_pool = _current->resource_pool;
 80085d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 80085da:	6763      	str	r3, [r4, #116]	; 0x74
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 80085dc:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80085e0:	bf08      	it	eq
 80085e2:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 80085e6:	d102      	bne.n	80085ee <z_impl_k_thread_create+0x6a>
}
 80085e8:	4620      	mov	r0, r4
 80085ea:	b005      	add	sp, #20
 80085ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80085ee:	ea56 0307 	orrs.w	r3, r6, r7
 80085f2:	d105      	bne.n	8008600 <z_impl_k_thread_create+0x7c>
	z_sched_start(thread);
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 fd0f 	bl	8009018 <z_sched_start>
}
 80085fa:	4620      	mov	r0, r4
 80085fc:	b005      	add	sp, #20
 80085fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8008600:	f104 0018 	add.w	r0, r4, #24
 8008604:	4904      	ldr	r1, [pc, #16]	; (8008618 <z_impl_k_thread_create+0x94>)
 8008606:	463a      	mov	r2, r7
 8008608:	4633      	mov	r3, r6
 800860a:	f001 f8bb 	bl	8009784 <z_add_timeout>
 800860e:	4620      	mov	r0, r4
 8008610:	b005      	add	sp, #20
 8008612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008614:	20000de0 	.word	0x20000de0
 8008618:	08008e0d 	.word	0x08008e0d

0800861c <z_init_static_threads>:
{
 800861c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 8008620:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8008700 <z_init_static_threads+0xe4>
 8008624:	4f35      	ldr	r7, [pc, #212]	; (80086fc <z_init_static_threads+0xe0>)
 8008626:	45ba      	cmp	sl, r7
{
 8008628:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
 800862a:	d23f      	bcs.n	80086ac <z_init_static_threads+0x90>
 800862c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8008708 <z_init_static_threads+0xec>
 8008630:	4655      	mov	r5, sl
	thread_base->pended_on = NULL;
 8008632:	2600      	movs	r6, #0
	thread_base->thread_state = (uint8_t)initial_state;
 8008634:	f04f 0804 	mov.w	r8, #4
		z_setup_new_thread(
 8008638:	e9d5 4100 	ldrd	r4, r1, [r5]
	thread_base->user_options = (uint8_t)options;
 800863c:	edd5 7a08 	vldr	s15, [r5, #32]
		z_setup_new_thread(
 8008640:	68aa      	ldr	r2, [r5, #8]
 8008642:	6928      	ldr	r0, [r5, #16]
 8008644:	f8d5 b01c 	ldr.w	fp, [r5, #28]
 8008648:	9004      	str	r0, [sp, #16]
 800864a:	e9d5 ce05 	ldrd	ip, lr, [r5, #20]
	thread_base->user_options = (uint8_t)options;
 800864e:	ee17 0a90 	vmov	r0, s15
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8008652:	3207      	adds	r2, #7
		z_setup_new_thread(
 8008654:	68eb      	ldr	r3, [r5, #12]
	thread_base->prio = priority;
 8008656:	f884 b00e 	strb.w	fp, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800865a:	f022 0207 	bic.w	r2, r2, #7
 800865e:	f104 0b58 	add.w	fp, r4, #88	; 0x58
 8008662:	e9c4 bb16 	strd	fp, fp, [r4, #88]	; 0x58
	thread_base->user_options = (uint8_t)options;
 8008666:	7320      	strb	r0, [r4, #12]
	new_thread->stack_info.size = stack_buf_size;
 8008668:	66e2      	str	r2, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800866a:	9804      	ldr	r0, [sp, #16]
	thread_base->pended_on = NULL;
 800866c:	60a6      	str	r6, [r4, #8]
 800866e:	f101 0b20 	add.w	fp, r1, #32
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8008672:	3220      	adds	r2, #32
	node->prev = NULL;
 8008674:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->thread_state = (uint8_t)initial_state;
 8008678:	f884 800d 	strb.w	r8, [r4, #13]
	thread_base->sched_locked = 0U;
 800867c:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
 800867e:	6726      	str	r6, [r4, #112]	; 0x70
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 8008680:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8008684:	440a      	add	r2, r1
 8008686:	9000      	str	r0, [sp, #0]
 8008688:	e9cd ce01 	strd	ip, lr, [sp, #4]
 800868c:	4620      	mov	r0, r4
	thread_base->user_options = (uint8_t)options;
 800868e:	edcd 7a05 	vstr	s15, [sp, #20]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8008692:	f7f9 fab9 	bl	8001c08 <arch_new_thread>
	if (!_current) {
 8008696:	f8d9 3008 	ldr.w	r3, [r9, #8]
	new_thread->init_data = NULL;
 800869a:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
 800869c:	b103      	cbz	r3, 80086a0 <z_init_static_threads+0x84>
	new_thread->resource_pool = _current->resource_pool;
 800869e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		thread_data->init_thread->init_data = thread_data;
 80086a0:	682a      	ldr	r2, [r5, #0]
 80086a2:	6763      	str	r3, [r4, #116]	; 0x74
 80086a4:	6555      	str	r5, [r2, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80086a6:	3530      	adds	r5, #48	; 0x30
 80086a8:	42bd      	cmp	r5, r7
 80086aa:	d3c5      	bcc.n	8008638 <z_init_static_threads+0x1c>
	k_sched_lock();
 80086ac:	f000 fe22 	bl	80092f4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80086b0:	45ba      	cmp	sl, r7
 80086b2:	d21d      	bcs.n	80086f0 <z_init_static_threads+0xd4>
 80086b4:	4c12      	ldr	r4, [pc, #72]	; (8008700 <z_init_static_threads+0xe4>)
 80086b6:	4e13      	ldr	r6, [pc, #76]	; (8008704 <z_init_static_threads+0xe8>)
			return t * ((uint64_t)to_hz / from_hz);
 80086b8:	250a      	movs	r5, #10
 80086ba:	e005      	b.n	80086c8 <z_init_static_threads+0xac>
	z_sched_start(thread);
 80086bc:	4660      	mov	r0, ip
 80086be:	f000 fcab 	bl	8009018 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 80086c2:	3430      	adds	r4, #48	; 0x30
 80086c4:	42bc      	cmp	r4, r7
 80086c6:	d213      	bcs.n	80086f0 <z_init_static_threads+0xd4>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80086c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
					    K_MSEC(thread_data->init_delay));
 80086ca:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80086ce:	3101      	adds	r1, #1
 80086d0:	fb83 2305 	smull	r2, r3, r3, r5
 80086d4:	d0f5      	beq.n	80086c2 <z_init_static_threads+0xa6>
			schedule_new_thread(thread_data->init_thread,
 80086d6:	f8d4 c000 	ldr.w	ip, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80086da:	ea52 0103 	orrs.w	r1, r2, r3
 80086de:	f10c 0018 	add.w	r0, ip, #24
 80086e2:	4631      	mov	r1, r6
 80086e4:	d0ea      	beq.n	80086bc <z_init_static_threads+0xa0>
	_FOREACH_STATIC_THREAD(thread_data) {
 80086e6:	3430      	adds	r4, #48	; 0x30
 80086e8:	f001 f84c 	bl	8009784 <z_add_timeout>
 80086ec:	42bc      	cmp	r4, r7
 80086ee:	d3eb      	bcc.n	80086c8 <z_init_static_threads+0xac>
}
 80086f0:	b007      	add	sp, #28
 80086f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
 80086f6:	f000 be11 	b.w	800931c <k_sched_unlock>
 80086fa:	bf00      	nop
 80086fc:	200003f8 	.word	0x200003f8
 8008700:	200003c8 	.word	0x200003c8
 8008704:	08008e0d 	.word	0x08008e0d
 8008708:	20000de0 	.word	0x20000de0

0800870c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800870c:	b508      	push	{r3, lr}
	__asm__ volatile(
 800870e:	f04f 0210 	mov.w	r2, #16
 8008712:	f3ef 8311 	mrs	r3, BASEPRI
 8008716:	f382 8812 	msr	BASEPRI_MAX, r2
 800871a:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800871e:	f7f9 f963 	bl	80019e8 <arch_cpu_idle>
 8008722:	e7f4      	b.n	800870e <idle+0x2>

08008724 <z_impl_k_mutex_init>:
 */
static struct k_spinlock lock;

int z_impl_k_mutex_init(struct k_mutex *mutex)
{
	mutex->owner = NULL;
 8008724:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
 8008726:	e9c0 3302 	strd	r3, r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 800872a:	e9c0 0000 	strd	r0, r0, [r0]
	z_object_init(mutex);

	SYS_PORT_TRACING_OBJ_INIT(k_mutex, mutex, 0);

	return 0;
}
 800872e:	4618      	mov	r0, r3
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop

08008734 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8008734:	b570      	push	{r4, r5, r6, lr}
 8008736:	4604      	mov	r4, r0
 8008738:	b084      	sub	sp, #16
 800873a:	f04f 0110 	mov.w	r1, #16
 800873e:	f3ef 8511 	mrs	r5, BASEPRI
 8008742:	f381 8812 	msr	BASEPRI_MAX, r1
 8008746:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800874a:	68c1      	ldr	r1, [r0, #12]
 800874c:	b971      	cbnz	r1, 800876c <z_impl_k_mutex_lock+0x38>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 800874e:	4b39      	ldr	r3, [pc, #228]	; (8008834 <z_impl_k_mutex_lock+0x100>)
 8008750:	6898      	ldr	r0, [r3, #8]
 8008752:	f990 300e 	ldrsb.w	r3, [r0, #14]
					mutex->owner_orig_prio;

		mutex->lock_count++;
		mutex->owner = _current;
 8008756:	60a0      	str	r0, [r4, #8]
		mutex->lock_count++;
 8008758:	3101      	adds	r1, #1
 800875a:	e9c4 1303 	strd	r1, r3, [r4, #12]
	__asm__ volatile(
 800875e:	f385 8811 	msr	BASEPRI, r5
 8008762:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 8008766:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 8008768:	b004      	add	sp, #16
 800876a:	bd70      	pop	{r4, r5, r6, pc}
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800876c:	4831      	ldr	r0, [pc, #196]	; (8008834 <z_impl_k_mutex_lock+0x100>)
 800876e:	68a6      	ldr	r6, [r4, #8]
 8008770:	6880      	ldr	r0, [r0, #8]
 8008772:	4286      	cmp	r6, r0
 8008774:	d101      	bne.n	800877a <z_impl_k_mutex_lock+0x46>
					_current->base.prio :
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	e7ed      	b.n	8008756 <z_impl_k_mutex_lock+0x22>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800877a:	ea52 0103 	orrs.w	r1, r2, r3
 800877e:	d052      	beq.n	8008826 <z_impl_k_mutex_lock+0xf2>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8008780:	f990 100e 	ldrsb.w	r1, [r0, #14]
 8008784:	f996 000e 	ldrsb.w	r0, [r6, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
 8008788:	4281      	cmp	r1, r0
 800878a:	bfa8      	it	ge
 800878c:	4601      	movge	r1, r0
 800878e:	f06f 0c7e 	mvn.w	ip, #126	; 0x7e
 8008792:	4561      	cmp	r1, ip
 8008794:	bfb8      	it	lt
 8008796:	4661      	movlt	r1, ip
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8008798:	4288      	cmp	r0, r1
 800879a:	dc39      	bgt.n	8008810 <z_impl_k_mutex_lock+0xdc>
	bool resched = false;
 800879c:	2600      	movs	r6, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800879e:	9200      	str	r2, [sp, #0]
 80087a0:	4825      	ldr	r0, [pc, #148]	; (8008838 <z_impl_k_mutex_lock+0x104>)
 80087a2:	9301      	str	r3, [sp, #4]
 80087a4:	4622      	mov	r2, r4
 80087a6:	4629      	mov	r1, r5
 80087a8:	f000 fcbe 	bl	8009128 <z_pend_curr>
	if (got_mutex == 0) {
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d0db      	beq.n	8008768 <z_impl_k_mutex_lock+0x34>
	__asm__ volatile(
 80087b0:	f04f 0310 	mov.w	r3, #16
 80087b4:	f3ef 8511 	mrs	r5, BASEPRI
 80087b8:	f383 8812 	msr	BASEPRI_MAX, r3
 80087bc:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80087c0:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80087c2:	429c      	cmp	r4, r3
 80087c4:	d02d      	beq.n	8008822 <z_impl_k_mutex_lock+0xee>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 80087c6:	b363      	cbz	r3, 8008822 <z_impl_k_mutex_lock+0xee>
 80087c8:	f993 100e 	ldrsb.w	r1, [r3, #14]
 80087cc:	6923      	ldr	r3, [r4, #16]
 80087ce:	4299      	cmp	r1, r3
 80087d0:	bfa8      	it	ge
 80087d2:	4619      	movge	r1, r3
 80087d4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80087d8:	4299      	cmp	r1, r3
 80087da:	bfb8      	it	lt
 80087dc:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 80087de:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
 80087e0:	f990 300e 	ldrsb.w	r3, [r0, #14]
 80087e4:	4299      	cmp	r1, r3
 80087e6:	d107      	bne.n	80087f8 <z_impl_k_mutex_lock+0xc4>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 80087e8:	b15e      	cbz	r6, 8008802 <z_impl_k_mutex_lock+0xce>
		z_reschedule(&lock, key);
 80087ea:	4813      	ldr	r0, [pc, #76]	; (8008838 <z_impl_k_mutex_lock+0x104>)
 80087ec:	4629      	mov	r1, r5
 80087ee:	f000 fd63 	bl	80092b8 <z_reschedule>
	return -EAGAIN;
 80087f2:	f06f 000a 	mvn.w	r0, #10
 80087f6:	e7b7      	b.n	8008768 <z_impl_k_mutex_lock+0x34>
		return z_set_prio(mutex->owner, new_prio);
 80087f8:	f000 fd14 	bl	8009224 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d1f4      	bne.n	80087ea <z_impl_k_mutex_lock+0xb6>
 8008800:	e7f2      	b.n	80087e8 <z_impl_k_mutex_lock+0xb4>
	__asm__ volatile(
 8008802:	f385 8811 	msr	BASEPRI, r5
 8008806:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 800880a:	f06f 000a 	mvn.w	r0, #10
 800880e:	e7ab      	b.n	8008768 <z_impl_k_mutex_lock+0x34>
		return z_set_prio(mutex->owner, new_prio);
 8008810:	4630      	mov	r0, r6
 8008812:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008816:	f000 fd05 	bl	8009224 <z_set_prio>
 800881a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800881e:	4606      	mov	r6, r0
 8008820:	e7bd      	b.n	800879e <z_impl_k_mutex_lock+0x6a>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8008822:	6921      	ldr	r1, [r4, #16]
 8008824:	e7db      	b.n	80087de <z_impl_k_mutex_lock+0xaa>
 8008826:	f385 8811 	msr	BASEPRI, r5
 800882a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 800882e:	f06f 000f 	mvn.w	r0, #15
 8008832:	e799      	b.n	8008768 <z_impl_k_mutex_lock+0x34>
 8008834:	20000de0 	.word	0x20000de0
 8008838:	20000e08 	.word	0x20000e08

0800883c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 800883c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800883e:	6883      	ldr	r3, [r0, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d03b      	beq.n	80088bc <z_impl_k_mutex_unlock+0x80>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8008844:	4a1f      	ldr	r2, [pc, #124]	; (80088c4 <z_impl_k_mutex_unlock+0x88>)
 8008846:	6892      	ldr	r2, [r2, #8]
 8008848:	4293      	cmp	r3, r2
 800884a:	d134      	bne.n	80088b6 <z_impl_k_mutex_unlock+0x7a>
	--_current->base.sched_locked;
 800884c:	7bda      	ldrb	r2, [r3, #15]
 800884e:	3a01      	subs	r2, #1
 8008850:	4604      	mov	r4, r0
 8008852:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8008854:	68c3      	ldr	r3, [r0, #12]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d905      	bls.n	8008866 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800885a:	3b01      	subs	r3, #1
 800885c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800885e:	f000 fd5d 	bl	800931c <k_sched_unlock>

	return 0;
 8008862:	2000      	movs	r0, #0
}
 8008864:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8008866:	f04f 0310 	mov.w	r3, #16
 800886a:	f3ef 8511 	mrs	r5, BASEPRI
 800886e:	f383 8812 	msr	BASEPRI_MAX, r3
 8008872:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8008876:	6880      	ldr	r0, [r0, #8]
 8008878:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
 800887a:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800887e:	4299      	cmp	r1, r3
 8008880:	d116      	bne.n	80088b0 <z_impl_k_mutex_unlock+0x74>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8008882:	4620      	mov	r0, r4
 8008884:	f000 fc88 	bl	8009198 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8008888:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800888a:	b158      	cbz	r0, 80088a4 <z_impl_k_mutex_unlock+0x68>
		mutex->owner_orig_prio = new_owner->base.prio;
 800888c:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8008890:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8008892:	2200      	movs	r2, #0
 8008894:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 8008896:	f000 fbaf 	bl	8008ff8 <z_ready_thread>
		z_reschedule(&lock, key);
 800889a:	480b      	ldr	r0, [pc, #44]	; (80088c8 <z_impl_k_mutex_unlock+0x8c>)
 800889c:	4629      	mov	r1, r5
 800889e:	f000 fd0b 	bl	80092b8 <z_reschedule>
 80088a2:	e7dc      	b.n	800885e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 80088a4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 80088a6:	f385 8811 	msr	BASEPRI, r5
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	e7d6      	b.n	800885e <z_impl_k_mutex_unlock+0x22>
		return z_set_prio(mutex->owner, new_prio);
 80088b0:	f000 fcb8 	bl	8009224 <z_set_prio>
 80088b4:	e7e5      	b.n	8008882 <z_impl_k_mutex_unlock+0x46>
		return -EPERM;
 80088b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 80088bc:	f06f 0015 	mvn.w	r0, #21
}
 80088c0:	bd38      	pop	{r3, r4, r5, pc}
 80088c2:	bf00      	nop
 80088c4:	20000de0 	.word	0x20000de0
 80088c8:	20000e08 	.word	0x20000e08

080088cc <z_impl_k_sem_init>:
		      unsigned int limit)
{
	/*
	 * Limit cannot be zero and count cannot be greater than limit
	 */
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 80088cc:	b15a      	cbz	r2, 80088e6 <z_impl_k_sem_init+0x1a>
 80088ce:	428a      	cmp	r2, r1
 80088d0:	d309      	bcc.n	80088e6 <z_impl_k_sem_init+0x1a>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, init, sem, 0);

	z_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
 80088d2:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 80088d6:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 80088da:	e9c0 0000 	strd	r0, r0, [r0]
 80088de:	e9c0 3304 	strd	r3, r3, [r0, #16]
#endif
	z_object_init(sem);

	return 0;
 80088e2:	2000      	movs	r0, #0
 80088e4:	4770      	bx	lr
		return -EINVAL;
 80088e6:	f06f 0015 	mvn.w	r0, #21
}
 80088ea:	4770      	bx	lr

080088ec <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4604      	mov	r4, r0
	__asm__ volatile(
 80088f0:	f04f 0310 	mov.w	r3, #16
 80088f4:	f3ef 8511 	mrs	r5, BASEPRI
 80088f8:	f383 8812 	msr	BASEPRI_MAX, r3
 80088fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8008900:	f000 fc4a 	bl	8009198 <z_unpend_first_thread>

	if (thread != NULL) {
 8008904:	b148      	cbz	r0, 800891a <z_impl_k_sem_give+0x2e>
 8008906:	2200      	movs	r2, #0
 8008908:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800890a:	f000 fb75 	bl	8008ff8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800890e:	4629      	mov	r1, r5
 8008910:	480a      	ldr	r0, [pc, #40]	; (800893c <z_impl_k_sem_give+0x50>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8008912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8008916:	f000 bccf 	b.w	80092b8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800891a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800891e:	429a      	cmp	r2, r3
 8008920:	bf18      	it	ne
 8008922:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 8008924:	f104 0010 	add.w	r0, r4, #16
 8008928:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800892a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800892c:	f001 fbb8 	bl	800a0a0 <z_handle_obj_poll_events>
	z_reschedule(&lock, key);
 8008930:	4629      	mov	r1, r5
 8008932:	4802      	ldr	r0, [pc, #8]	; (800893c <z_impl_k_sem_give+0x50>)
}
 8008934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8008938:	f000 bcbe 	b.w	80092b8 <z_reschedule>
 800893c:	20000e0c 	.word	0x20000e0c

08008940 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8008940:	4684      	mov	ip, r0
 8008942:	f04f 0010 	mov.w	r0, #16
 8008946:	f3ef 8111 	mrs	r1, BASEPRI
 800894a:	f380 8812 	msr	BASEPRI_MAX, r0
 800894e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8008952:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8008956:	b140      	cbz	r0, 800896a <z_impl_k_sem_take+0x2a>
		sem->count--;
 8008958:	3801      	subs	r0, #1
 800895a:	f8cc 0008 	str.w	r0, [ip, #8]
	__asm__ volatile(
 800895e:	f381 8811 	msr	BASEPRI, r1
 8008962:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8008966:	2000      	movs	r0, #0
		goto out;
 8008968:	4770      	bx	lr
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800896a:	ea52 0003 	orrs.w	r0, r2, r3
 800896e:	d00a      	beq.n	8008986 <z_impl_k_sem_take+0x46>
{
 8008970:	b500      	push	{lr}
 8008972:	b083      	sub	sp, #12
		goto out;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_sem, take, sem, timeout);

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8008974:	e9cd 2300 	strd	r2, r3, [sp]
 8008978:	4806      	ldr	r0, [pc, #24]	; (8008994 <z_impl_k_sem_take+0x54>)
 800897a:	4662      	mov	r2, ip
 800897c:	f000 fbd4 	bl	8009128 <z_pend_curr>

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8008980:	b003      	add	sp, #12
 8008982:	f85d fb04 	ldr.w	pc, [sp], #4
 8008986:	f381 8811 	msr	BASEPRI, r1
 800898a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800898e:	f06f 000f 	mvn.w	r0, #15
}
 8008992:	4770      	bx	lr
 8008994:	20000e0c 	.word	0x20000e0c

08008998 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	4604      	mov	r4, r0
	__asm__ volatile(
 800899c:	f04f 0310 	mov.w	r3, #16
 80089a0:	f3ef 8611 	mrs	r6, BASEPRI
 80089a4:	f383 8812 	msr	BASEPRI_MAX, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f06f 050a 	mvn.w	r5, #10
	return k;
 80089b0:	e002      	b.n	80089b8 <z_impl_k_sem_reset+0x20>
 80089b2:	67c5      	str	r5, [r0, #124]	; 0x7c
		thread = z_unpend_first_thread(&sem->wait_q);
		if (thread == NULL) {
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
 80089b4:	f000 fb20 	bl	8008ff8 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 fbed 	bl	8009198 <z_unpend_first_thread>
		if (thread == NULL) {
 80089be:	4603      	mov	r3, r0
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d1f6      	bne.n	80089b2 <z_impl_k_sem_reset+0x1a>
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 80089c4:	f104 0010 	add.w	r0, r4, #16
	}
	sem->count = 0;
 80089c8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 80089ca:	2102      	movs	r1, #2
 80089cc:	f001 fb68 	bl	800a0a0 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
 80089d0:	4631      	mov	r1, r6
 80089d2:	4802      	ldr	r0, [pc, #8]	; (80089dc <z_impl_k_sem_reset+0x44>)
}
 80089d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 80089d8:	f000 bc6e 	b.w	80092b8 <z_reschedule>
 80089dc:	20000e0c 	.word	0x20000e0c

080089e0 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
 80089e0:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80089e2:	079a      	lsls	r2, r3, #30
 80089e4:	d509      	bpl.n	80089fa <cancel_async_locked+0x1a>
	if (ret != 0) {
 80089e6:	f013 020f 	ands.w	r2, r3, #15
 80089ea:	d004      	beq.n	80089f6 <cancel_async_locked+0x16>
	*flagp |= BIT(bit);
 80089ec:	f043 0302 	orr.w	r3, r3, #2
 80089f0:	60c3      	str	r3, [r0, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
 80089f2:	f003 020f 	and.w	r2, r3, #15
}
 80089f6:	4610      	mov	r0, r2
 80089f8:	4770      	bx	lr
	return (*flagp & BIT(bit)) != 0U;
 80089fa:	f3c3 0280 	ubfx	r2, r3, #2, #1
	*flagp &= ~BIT(bit);
 80089fe:	f023 0304 	bic.w	r3, r3, #4
{
 8008a02:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
 8008a04:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
 8008a06:	60c3      	str	r3, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
 8008a08:	b95a      	cbnz	r2, 8008a22 <cancel_async_locked+0x42>
	if (ret != 0) {
 8008a0a:	f013 020f 	ands.w	r2, r3, #15
 8008a0e:	d004      	beq.n	8008a1a <cancel_async_locked+0x3a>
	*flagp |= BIT(bit);
 8008a10:	f043 0302 	orr.w	r3, r3, #2
 8008a14:	60c3      	str	r3, [r0, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
 8008a16:	f003 020f 	and.w	r2, r3, #15
}
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a20:	4770      	bx	lr
	return list->head;
 8008a22:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008a26:	2a00      	cmp	r2, #0
 8008a28:	d0ef      	beq.n	8008a0a <cancel_async_locked+0x2a>
 8008a2a:	4290      	cmp	r0, r2
 8008a2c:	d00e      	beq.n	8008a4c <cancel_async_locked+0x6c>
	return node->next;
 8008a2e:	4611      	mov	r1, r2
 8008a30:	6812      	ldr	r2, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008a32:	2a00      	cmp	r2, #0
 8008a34:	d0e9      	beq.n	8008a0a <cancel_async_locked+0x2a>
 8008a36:	4290      	cmp	r0, r2
 8008a38:	d1f9      	bne.n	8008a2e <cancel_async_locked+0x4e>
	return node->next;
 8008a3a:	6802      	ldr	r2, [r0, #0]
	parent->next = child;
 8008a3c:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8008a3e:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 8008a42:	4290      	cmp	r0, r2
 8008a44:	d00c      	beq.n	8008a60 <cancel_async_locked+0x80>
	parent->next = child;
 8008a46:	2200      	movs	r2, #0
 8008a48:	6002      	str	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
 8008a4a:	e7de      	b.n	8008a0a <cancel_async_locked+0x2a>
 8008a4c:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
	return node->next;
 8008a50:	6802      	ldr	r2, [r0, #0]
	list->head = node;
 8008a52:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
Z_GENLIST_REMOVE(slist, snode)
 8008a56:	4288      	cmp	r0, r1
 8008a58:	d1f5      	bne.n	8008a46 <cancel_async_locked+0x66>
	list->tail = node;
 8008a5a:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
}
 8008a5e:	e7f2      	b.n	8008a46 <cancel_async_locked+0x66>
	list->tail = node;
 8008a60:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
}
 8008a64:	e7ef      	b.n	8008a46 <cancel_async_locked+0x66>
 8008a66:	bf00      	nop

08008a68 <submit_to_queue_locked>:
{
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 8008a6a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8008a6c:	079f      	lsls	r7, r3, #30
{
 8008a6e:	460d      	mov	r5, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8008a70:	f3c3 0640 	ubfx	r6, r3, #1, #1
 8008a74:	d40f      	bmi.n	8008a96 <submit_to_queue_locked+0x2e>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 8008a76:	075c      	lsls	r4, r3, #29
 8008a78:	d510      	bpl.n	8008a9c <submit_to_queue_locked+0x34>
		*queuep = NULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	602b      	str	r3, [r5, #0]
}
 8008a7e:	4630      	mov	r0, r6
 8008a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8008a82:	f7ff fd43 	bl	800850c <k_is_in_isr>
	return (*flagp & BIT(bit)) != 0U;
 8008a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8008a8a:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 8008a8c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8008a90:	d543      	bpl.n	8008b1a <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
 8008a92:	b1b2      	cbz	r2, 8008ac2 <submit_to_queue_locked+0x5a>
 8008a94:	b1c8      	cbz	r0, 8008aca <submit_to_queue_locked+0x62>
		ret = -EBUSY;
 8008a96:	f06f 060f 	mvn.w	r6, #15
 8008a9a:	e7ee      	b.n	8008a7a <submit_to_queue_locked+0x12>
		if (*queuep == NULL) {
 8008a9c:	680f      	ldr	r7, [r1, #0]
 8008a9e:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
 8008aa0:	f003 0301 	and.w	r3, r3, #1
		if (*queuep == NULL) {
 8008aa4:	b33f      	cbz	r7, 8008af6 <submit_to_queue_locked+0x8e>
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 8008aa6:	bb4b      	cbnz	r3, 8008afc <submit_to_queue_locked+0x94>
		ret = 1;
 8008aa8:	2601      	movs	r6, #1
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8008aaa:	4b1d      	ldr	r3, [pc, #116]	; (8008b20 <submit_to_queue_locked+0xb8>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	42bb      	cmp	r3, r7
 8008ab0:	d0e7      	beq.n	8008a82 <submit_to_queue_locked+0x1a>
	return (*flagp & BIT(bit)) != 0U;
 8008ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8008ab6:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 8008ab8:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8008abc:	d52d      	bpl.n	8008b1a <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	d1e9      	bne.n	8008a96 <submit_to_queue_locked+0x2e>
	return (*flagp & BIT(bit)) != 0U;
 8008ac2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e5      	bne.n	8008a96 <submit_to_queue_locked+0x2e>
	parent->next = child;
 8008aca:	2300      	movs	r3, #0
 8008acc:	6023      	str	r3, [r4, #0]
	return list->tail;
 8008ace:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
 8008ad2:	b1db      	cbz	r3, 8008b0c <submit_to_queue_locked+0xa4>
	parent->next = child;
 8008ad4:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8008ad6:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 8008ada:	2200      	movs	r2, #0
 8008adc:	4611      	mov	r1, r2
 8008ade:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8008ae2:	f000 fd9d 	bl	8009620 <z_sched_wake>
	*flagp |= BIT(bit);
 8008ae6:	68e3      	ldr	r3, [r4, #12]
			work->queue = *queuep;
 8008ae8:	682a      	ldr	r2, [r5, #0]
	*flagp |= BIT(bit);
 8008aea:	f043 0304 	orr.w	r3, r3, #4
			work->queue = *queuep;
 8008aee:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
 8008af2:	4630      	mov	r0, r6
 8008af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*queuep = work->queue;
 8008af6:	6887      	ldr	r7, [r0, #8]
 8008af8:	600f      	str	r7, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 8008afa:	b153      	cbz	r3, 8008b12 <submit_to_queue_locked+0xaa>
			*queuep = work->queue;
 8008afc:	68a7      	ldr	r7, [r4, #8]
 8008afe:	602f      	str	r7, [r5, #0]
			ret = 2;
 8008b00:	2602      	movs	r6, #2
	if (queue == NULL) {
 8008b02:	2f00      	cmp	r7, #0
 8008b04:	d1d1      	bne.n	8008aaa <submit_to_queue_locked+0x42>
		return -EINVAL;
 8008b06:	f06f 0615 	mvn.w	r6, #21
 8008b0a:	e7b6      	b.n	8008a7a <submit_to_queue_locked+0x12>
	list->head = node;
 8008b0c:	e9c7 4432 	strd	r4, r4, [r7, #200]	; 0xc8
}
 8008b10:	e7e3      	b.n	8008ada <submit_to_queue_locked+0x72>
		ret = 1;
 8008b12:	2601      	movs	r6, #1
	if (queue == NULL) {
 8008b14:	2f00      	cmp	r7, #0
 8008b16:	d1c8      	bne.n	8008aaa <submit_to_queue_locked+0x42>
 8008b18:	e7f5      	b.n	8008b06 <submit_to_queue_locked+0x9e>
		ret = -ENODEV;
 8008b1a:	f06f 0612 	mvn.w	r6, #18
 8008b1e:	e7ac      	b.n	8008a7a <submit_to_queue_locked+0x12>
 8008b20:	20000de0 	.word	0x20000de0

08008b24 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
 8008b24:	b510      	push	{r4, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	f04f 0310 	mov.w	r3, #16
 8008b2c:	f3ef 8411 	mrs	r4, BASEPRI
 8008b30:	f383 8812 	msr	BASEPRI_MAX, r3
 8008b34:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
 8008b38:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
 8008b3c:	2100      	movs	r1, #0
	*flagp &= ~BIT(bit);
 8008b3e:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 8008b42:	071b      	lsls	r3, r3, #28
	struct k_work_q *queue = NULL;
 8008b44:	9101      	str	r1, [sp, #4]
	*flagp &= ~BIT(bit);
 8008b46:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 8008b4a:	d405      	bmi.n	8008b58 <work_timeout+0x34>
	__asm__ volatile(
 8008b4c:	f384 8811 	msr	BASEPRI, r4
 8008b50:	f3bf 8f6f 	isb	sy
		queue = dw->queue;
		(void)submit_to_queue_locked(wp, &queue);
	}

	k_spin_unlock(&lock, key);
}
 8008b54:	b002      	add	sp, #8
 8008b56:	bd10      	pop	{r4, pc}
		queue = dw->queue;
 8008b58:	6983      	ldr	r3, [r0, #24]
 8008b5a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 8008b5c:	a901      	add	r1, sp, #4
 8008b5e:	3810      	subs	r0, #16
 8008b60:	f7ff ff82 	bl	8008a68 <submit_to_queue_locked>
 8008b64:	e7f2      	b.n	8008b4c <work_timeout+0x28>
 8008b66:	bf00      	nop

08008b68 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8008b6e:	6003      	str	r3, [r0, #0]
 8008b70:	6041      	str	r1, [r0, #4]
}
 8008b72:	4770      	bx	lr

08008b74 <k_work_submit_to_queue>:
{
 8008b74:	b530      	push	{r4, r5, lr}
 8008b76:	b083      	sub	sp, #12
 8008b78:	460b      	mov	r3, r1
 8008b7a:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
 8008b7c:	f04f 0210 	mov.w	r2, #16
 8008b80:	f3ef 8511 	mrs	r5, BASEPRI
 8008b84:	f382 8812 	msr	BASEPRI_MAX, r2
 8008b88:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 8008b8c:	a901      	add	r1, sp, #4
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff ff6a 	bl	8008a68 <submit_to_queue_locked>
 8008b94:	4604      	mov	r4, r0
	__asm__ volatile(
 8008b96:	f385 8811 	msr	BASEPRI, r5
 8008b9a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	dc02      	bgt.n	8008ba8 <k_work_submit_to_queue+0x34>
}
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	b003      	add	sp, #12
 8008ba6:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 8008ba8:	f000 fcc2 	bl	8009530 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 8008bac:	2800      	cmp	r0, #0
 8008bae:	d0f8      	beq.n	8008ba2 <k_work_submit_to_queue+0x2e>
	z_impl_k_yield();
 8008bb0:	f000 fc02 	bl	80093b8 <z_impl_k_yield>
}
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	b003      	add	sp, #12
 8008bb8:	bd30      	pop	{r4, r5, pc}
 8008bba:	bf00      	nop

08008bbc <k_work_submit>:
{
 8008bbc:	b530      	push	{r4, r5, lr}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	4b0f      	ldr	r3, [pc, #60]	; (8008c00 <k_work_submit+0x44>)
 8008bc2:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
 8008bc4:	f04f 0310 	mov.w	r3, #16
 8008bc8:	f3ef 8511 	mrs	r5, BASEPRI
 8008bcc:	f383 8812 	msr	BASEPRI_MAX, r3
 8008bd0:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 8008bd4:	a901      	add	r1, sp, #4
 8008bd6:	f7ff ff47 	bl	8008a68 <submit_to_queue_locked>
 8008bda:	4604      	mov	r4, r0
	__asm__ volatile(
 8008bdc:	f385 8811 	msr	BASEPRI, r5
 8008be0:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 8008be4:	2800      	cmp	r0, #0
 8008be6:	dc02      	bgt.n	8008bee <k_work_submit+0x32>
}
 8008be8:	4620      	mov	r0, r4
 8008bea:	b003      	add	sp, #12
 8008bec:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 8008bee:	f000 fc9f 	bl	8009530 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d0f8      	beq.n	8008be8 <k_work_submit+0x2c>
	z_impl_k_yield();
 8008bf6:	f000 fbdf 	bl	80093b8 <z_impl_k_yield>
}
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	b003      	add	sp, #12
 8008bfe:	bd30      	pop	{r4, r5, pc}
 8008c00:	200006d0 	.word	0x200006d0

08008c04 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
 8008c04:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*dwork = (struct k_work_delayable){
 8008c06:	2230      	movs	r2, #48	; 0x30
{
 8008c08:	4604      	mov	r4, r0
 8008c0a:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	f002 faf5 	bl	800b1fc <memset>
 8008c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c16:	6065      	str	r5, [r4, #4]
 8008c18:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}

08008c1c <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 8008c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	4919      	ldr	r1, [pc, #100]	; (8008c88 <k_work_reschedule+0x6c>)
 8008c22:	9101      	str	r1, [sp, #4]
 8008c24:	4604      	mov	r4, r0
 8008c26:	4617      	mov	r7, r2
 8008c28:	461e      	mov	r6, r3
	__asm__ volatile(
 8008c2a:	f04f 0110 	mov.w	r1, #16
 8008c2e:	f3ef 8511 	mrs	r5, BASEPRI
 8008c32:	f381 8812 	msr	BASEPRI_MAX, r1
 8008c36:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
 8008c3a:	68c1      	ldr	r1, [r0, #12]
	*flagp &= ~BIT(bit);
 8008c3c:	f021 0008 	bic.w	r0, r1, #8
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 8008c40:	070b      	lsls	r3, r1, #28
	*flagp &= ~BIT(bit);
 8008c42:	60e0      	str	r0, [r4, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 8008c44:	d41b      	bmi.n	8008c7e <k_work_reschedule+0x62>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8008c46:	ea56 0307 	orrs.w	r3, r6, r7
 8008c4a:	d013      	beq.n	8008c74 <k_work_reschedule+0x58>
	*flagp |= BIT(bit);
 8008c4c:	68e1      	ldr	r1, [r4, #12]
 8008c4e:	f041 0108 	orr.w	r1, r1, #8
 8008c52:	60e1      	str	r1, [r4, #12]
	dwork->queue = *queuep;
 8008c54:	9901      	ldr	r1, [sp, #4]
 8008c56:	62a1      	str	r1, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 8008c58:	f104 0010 	add.w	r0, r4, #16
 8008c5c:	490b      	ldr	r1, [pc, #44]	; (8008c8c <k_work_reschedule+0x70>)
 8008c5e:	463a      	mov	r2, r7
 8008c60:	4633      	mov	r3, r6
 8008c62:	f000 fd8f 	bl	8009784 <z_add_timeout>
	return ret;
 8008c66:	2001      	movs	r0, #1
	__asm__ volatile(
 8008c68:	f385 8811 	msr	BASEPRI, r5
 8008c6c:	f3bf 8f6f 	isb	sy
	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
 8008c70:	b003      	add	sp, #12
 8008c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return submit_to_queue_locked(work, queuep);
 8008c74:	a901      	add	r1, sp, #4
 8008c76:	4620      	mov	r0, r4
 8008c78:	f7ff fef6 	bl	8008a68 <submit_to_queue_locked>
 8008c7c:	e7f4      	b.n	8008c68 <k_work_reschedule+0x4c>
		z_abort_timeout(&dwork->timeout);
 8008c7e:	f104 0010 	add.w	r0, r4, #16
 8008c82:	f000 fe01 	bl	8009888 <z_abort_timeout>
		ret = true;
 8008c86:	e7de      	b.n	8008c46 <k_work_reschedule+0x2a>
 8008c88:	200006d0 	.word	0x200006d0
 8008c8c:	08008b25 	.word	0x08008b25

08008c90 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	4604      	mov	r4, r0
	__asm__ volatile(
 8008c94:	f04f 0310 	mov.w	r3, #16
 8008c98:	f3ef 8511 	mrs	r5, BASEPRI
 8008c9c:	f383 8812 	msr	BASEPRI_MAX, r3
 8008ca0:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
 8008ca4:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
 8008ca6:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 8008caa:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
 8008cac:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 8008cae:	d407      	bmi.n	8008cc0 <k_work_cancel_delayable+0x30>
	return cancel_async_locked(&dwork->work);
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f7ff fe95 	bl	80089e0 <cancel_async_locked>
	__asm__ volatile(
 8008cb6:	f385 8811 	msr	BASEPRI, r5
 8008cba:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
		z_abort_timeout(&dwork->timeout);
 8008cc0:	3010      	adds	r0, #16
 8008cc2:	f000 fde1 	bl	8009888 <z_abort_timeout>
		ret = true;
 8008cc6:	e7f3      	b.n	8008cb0 <k_work_cancel_delayable+0x20>

08008cc8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 8008cc8:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
 8008cca:	4d13      	ldr	r5, [pc, #76]	; (8008d18 <update_cache+0x50>)
 8008ccc:	462b      	mov	r3, r5
 8008cce:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008cd2:	429c      	cmp	r4, r3
 8008cd4:	d013      	beq.n	8008cfe <update_cache+0x36>
struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
	struct k_thread *thread = NULL;
	sys_dnode_t *n = sys_dlist_peek_head(pq);

	if (n != NULL) {
 8008cd6:	b194      	cbz	r4, 8008cfe <update_cache+0x36>
	if (z_is_thread_prevented_from_running(_current)) {
 8008cd8:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8008cda:	b948      	cbnz	r0, 8008cf0 <update_cache+0x28>
	if (z_is_thread_prevented_from_running(_current)) {
 8008cdc:	7b5a      	ldrb	r2, [r3, #13]
 8008cde:	06d2      	lsls	r2, r2, #27
 8008ce0:	d106      	bne.n	8008cf0 <update_cache+0x28>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8008ce2:	69a2      	ldr	r2, [r4, #24]
 8008ce4:	b922      	cbnz	r2, 8008cf0 <update_cache+0x28>
	if (is_preempt(_current) || is_metairq(thread)) {
 8008ce6:	89da      	ldrh	r2, [r3, #14]
 8008ce8:	2a7f      	cmp	r2, #127	; 0x7f
 8008cea:	d901      	bls.n	8008cf0 <update_cache+0x28>
		_kernel.ready_q.cache = _current;
 8008cec:	61ab      	str	r3, [r5, #24]
}
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
 8008cf0:	429c      	cmp	r4, r3
 8008cf2:	d002      	beq.n	8008cfa <update_cache+0x32>
	if (slice_time != 0) {
 8008cf4:	4e09      	ldr	r6, [pc, #36]	; (8008d1c <update_cache+0x54>)
 8008cf6:	6833      	ldr	r3, [r6, #0]
 8008cf8:	b91b      	cbnz	r3, 8008d02 <update_cache+0x3a>
		_kernel.ready_q.cache = thread;
 8008cfa:	61ac      	str	r4, [r5, #24]
}
 8008cfc:	bd70      	pop	{r4, r5, r6, pc}
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8008cfe:	68ec      	ldr	r4, [r5, #12]
 8008d00:	e7ea      	b.n	8008cd8 <update_cache+0x10>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8008d02:	f7ff f8a1 	bl	8007e48 <sys_clock_elapsed>
 8008d06:	6832      	ldr	r2, [r6, #0]
		z_set_timeout_expiry(slice_time, false);
 8008d08:	2100      	movs	r1, #0
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8008d0a:	1813      	adds	r3, r2, r0
		z_set_timeout_expiry(slice_time, false);
 8008d0c:	4610      	mov	r0, r2
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8008d0e:	612b      	str	r3, [r5, #16]
		z_set_timeout_expiry(slice_time, false);
 8008d10:	f000 fdd4 	bl	80098bc <z_set_timeout_expiry>
		_kernel.ready_q.cache = thread;
 8008d14:	61ac      	str	r4, [r5, #24]
 8008d16:	e7f1      	b.n	8008cfc <update_cache+0x34>
 8008d18:	20000de0 	.word	0x20000de0
 8008d1c:	20000e24 	.word	0x20000e24

08008d20 <move_thread_to_end_of_prio_q>:
{
 8008d20:	b470      	push	{r4, r5, r6}
	if (z_is_thread_queued(thread)) {
 8008d22:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8008d26:	7b43      	ldrb	r3, [r0, #13]
 8008d28:	2a00      	cmp	r2, #0
 8008d2a:	db26      	blt.n	8008d7a <move_thread_to_end_of_prio_q+0x5a>
	return list->head == list;
 8008d2c:	4d1b      	ldr	r5, [pc, #108]	; (8008d9c <move_thread_to_end_of_prio_q+0x7c>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8008d2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d32:	7343      	strb	r3, [r0, #13]
 8008d34:	69eb      	ldr	r3, [r5, #28]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8008d36:	6a2c      	ldr	r4, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008d38:	f105 061c 	add.w	r6, r5, #28
 8008d3c:	42b3      	cmp	r3, r6
 8008d3e:	d010      	beq.n	8008d62 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008d40:	b17b      	cbz	r3, 8008d62 <move_thread_to_end_of_prio_q+0x42>
	int32_t b1 = thread_1->base.prio;
 8008d42:	f990 100e 	ldrsb.w	r1, [r0, #14]
 8008d46:	e001      	b.n	8008d4c <move_thread_to_end_of_prio_q+0x2c>
	return (node == list->tail) ? NULL : node->next;
 8008d48:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008d4a:	b153      	cbz	r3, 8008d62 <move_thread_to_end_of_prio_q+0x42>
	int32_t b2 = thread_2->base.prio;
 8008d4c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8008d50:	4291      	cmp	r1, r2
		return b2 - b1;
 8008d52:	eba2 0c01 	sub.w	ip, r2, r1
	if (b1 != b2) {
 8008d56:	d002      	beq.n	8008d5e <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008d58:	f1bc 0f00 	cmp.w	ip, #0
 8008d5c:	dc17      	bgt.n	8008d8e <move_thread_to_end_of_prio_q+0x6e>
 8008d5e:	42a3      	cmp	r3, r4
 8008d60:	d1f2      	bne.n	8008d48 <move_thread_to_end_of_prio_q+0x28>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 8008d62:	e9c0 6400 	strd	r6, r4, [r0]

	tail->next = node;
 8008d66:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8008d68:	6228      	str	r0, [r5, #32]
	update_cache(thread == _current);
 8008d6a:	68ab      	ldr	r3, [r5, #8]
 8008d6c:	1a18      	subs	r0, r3, r0
 8008d6e:	fab0 f080 	clz	r0, r0
}
 8008d72:	bc70      	pop	{r4, r5, r6}
	update_cache(thread == _current);
 8008d74:	0940      	lsrs	r0, r0, #5
 8008d76:	f7ff bfa7 	b.w	8008cc8 <update_cache>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 8008d7a:	e9d0 1400 	ldrd	r1, r4, [r0]
	node->next = NULL;
 8008d7e:	2200      	movs	r2, #0

	prev->next = next;
 8008d80:	6021      	str	r1, [r4, #0]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	next->prev = prev;
 8008d86:	604c      	str	r4, [r1, #4]
	node->prev = NULL;
 8008d88:	e9c0 2200 	strd	r2, r2, [r0]
}
 8008d8c:	e7ce      	b.n	8008d2c <move_thread_to_end_of_prio_q+0xc>
	sys_dnode_t *const prev = successor->prev;
 8008d8e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8008d90:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8008d94:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8008d96:	6058      	str	r0, [r3, #4]
}
 8008d98:	e7e7      	b.n	8008d6a <move_thread_to_end_of_prio_q+0x4a>
 8008d9a:	bf00      	nop
 8008d9c:	20000de0 	.word	0x20000de0

08008da0 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8008da0:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8008da4:	7b43      	ldrb	r3, [r0, #13]
 8008da6:	2a00      	cmp	r2, #0
 8008da8:	db03      	blt.n	8008db2 <ready_thread+0x12>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8008daa:	06da      	lsls	r2, r3, #27
 8008dac:	d101      	bne.n	8008db2 <ready_thread+0x12>
 8008dae:	6982      	ldr	r2, [r0, #24]
 8008db0:	b102      	cbz	r2, 8008db4 <ready_thread+0x14>
 8008db2:	4770      	bx	lr
{
 8008db4:	b470      	push	{r4, r5, r6}
	thread->base.thread_state |= _THREAD_QUEUED;
 8008db6:	f063 037f 	orn	r3, r3, #127	; 0x7f
	return list->head == list;
 8008dba:	4d13      	ldr	r5, [pc, #76]	; (8008e08 <ready_thread+0x68>)
 8008dbc:	7343      	strb	r3, [r0, #13]
 8008dbe:	69eb      	ldr	r3, [r5, #28]
	return (node == list->tail) ? NULL : node->next;
 8008dc0:	6a2c      	ldr	r4, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008dc2:	f105 061c 	add.w	r6, r5, #28
 8008dc6:	42b3      	cmp	r3, r6
 8008dc8:	d010      	beq.n	8008dec <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008dca:	b17b      	cbz	r3, 8008dec <ready_thread+0x4c>
	int32_t b1 = thread_1->base.prio;
 8008dcc:	f990 100e 	ldrsb.w	r1, [r0, #14]
 8008dd0:	e001      	b.n	8008dd6 <ready_thread+0x36>
	return (node == list->tail) ? NULL : node->next;
 8008dd2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008dd4:	b153      	cbz	r3, 8008dec <ready_thread+0x4c>
	int32_t b2 = thread_2->base.prio;
 8008dd6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8008dda:	4291      	cmp	r1, r2
		return b2 - b1;
 8008ddc:	eba2 0c01 	sub.w	ip, r2, r1
	if (b1 != b2) {
 8008de0:	d002      	beq.n	8008de8 <ready_thread+0x48>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008de2:	f1bc 0f00 	cmp.w	ip, #0
 8008de6:	dc09      	bgt.n	8008dfc <ready_thread+0x5c>
 8008de8:	42a3      	cmp	r3, r4
 8008dea:	d1f2      	bne.n	8008dd2 <ready_thread+0x32>
	node->prev = tail;
 8008dec:	e9c0 6400 	strd	r6, r4, [r0]
	tail->next = node;
 8008df0:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8008df2:	6228      	str	r0, [r5, #32]
}
 8008df4:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8008df6:	2000      	movs	r0, #0
 8008df8:	f7ff bf66 	b.w	8008cc8 <update_cache>
	sys_dnode_t *const prev = successor->prev;
 8008dfc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8008dfe:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8008e02:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8008e04:	6058      	str	r0, [r3, #4]
}
 8008e06:	e7f5      	b.n	8008df4 <ready_thread+0x54>
 8008e08:	20000de0 	.word	0x20000de0

08008e0c <z_thread_timeout>:
{
 8008e0c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8008e0e:	f04f 0310 	mov.w	r3, #16
 8008e12:	f3ef 8411 	mrs	r4, BASEPRI
 8008e16:	f383 8812 	msr	BASEPRI_MAX, r3
 8008e1a:	f3bf 8f6f 	isb	sy
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 8008e1e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
		if (!killed) {
 8008e22:	f013 0228 	ands.w	r2, r3, #40	; 0x28
 8008e26:	d115      	bne.n	8008e54 <z_thread_timeout+0x48>
			if (thread->base.pended_on != NULL) {
 8008e28:	f850 1c10 	ldr.w	r1, [r0, #-16]
 8008e2c:	b159      	cbz	r1, 8008e46 <z_thread_timeout+0x3a>
	sys_dnode_t *const prev = node->prev;
 8008e2e:	f850 5c14 	ldr.w	r5, [r0, #-20]
	sys_dnode_t *const next = node->next;
 8008e32:	f850 1c18 	ldr.w	r1, [r0, #-24]
	prev->next = next;
 8008e36:	6029      	str	r1, [r5, #0]
	next->prev = prev;
 8008e38:	604d      	str	r5, [r1, #4]
	node->prev = NULL;
 8008e3a:	e940 2206 	strd	r2, r2, [r0, #-24]
	thread->base.thread_state &= ~_THREAD_PENDING;
 8008e3e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
	thread->base.pended_on = NULL;
 8008e42:	f840 2c10 	str.w	r2, [r0, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8008e46:	f023 0314 	bic.w	r3, r3, #20
 8008e4a:	f800 3c0b 	strb.w	r3, [r0, #-11]
			ready_thread(thread);
 8008e4e:	3818      	subs	r0, #24
 8008e50:	f7ff ffa6 	bl	8008da0 <ready_thread>
	__asm__ volatile(
 8008e54:	f384 8811 	msr	BASEPRI, r4
 8008e58:	f3bf 8f6f 	isb	sy
}
 8008e5c:	bd38      	pop	{r3, r4, r5, pc}
 8008e5e:	bf00      	nop

08008e60 <add_to_waitq_locked>:
{
 8008e60:	b538      	push	{r3, r4, r5, lr}
	if (z_is_thread_queued(thread)) {
 8008e62:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8008e66:	7b42      	ldrb	r2, [r0, #13]
 8008e68:	2b00      	cmp	r3, #0
{
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	460d      	mov	r5, r1
	if (z_is_thread_queued(thread)) {
 8008e6e:	db2c      	blt.n	8008eca <add_to_waitq_locked+0x6a>
	update_cache(thread == _current);
 8008e70:	4b1e      	ldr	r3, [pc, #120]	; (8008eec <add_to_waitq_locked+0x8c>)
 8008e72:	6898      	ldr	r0, [r3, #8]
 8008e74:	1b00      	subs	r0, r0, r4
 8008e76:	fab0 f080 	clz	r0, r0
 8008e7a:	0940      	lsrs	r0, r0, #5
 8008e7c:	f7ff ff24 	bl	8008cc8 <update_cache>
	thread->base.thread_state |= _THREAD_PENDING;
 8008e80:	7b63      	ldrb	r3, [r4, #13]
 8008e82:	f043 0302 	orr.w	r3, r3, #2
 8008e86:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8008e88:	b1c5      	cbz	r5, 8008ebc <add_to_waitq_locked+0x5c>
	return list->head == list;
 8008e8a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8008e8c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008e8e:	429d      	cmp	r5, r3
 8008e90:	d015      	beq.n	8008ebe <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008e92:	b1a3      	cbz	r3, 8008ebe <add_to_waitq_locked+0x5e>
	int32_t b1 = thread_1->base.prio;
 8008e94:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8008e98:	e001      	b.n	8008e9e <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
 8008e9a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008e9c:	b153      	cbz	r3, 8008eb4 <add_to_waitq_locked+0x54>
	int32_t b2 = thread_2->base.prio;
 8008e9e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8008ea2:	4291      	cmp	r1, r2
		return b2 - b1;
 8008ea4:	eba2 0001 	sub.w	r0, r2, r1
	if (b1 != b2) {
 8008ea8:	d001      	beq.n	8008eae <add_to_waitq_locked+0x4e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	dc18      	bgt.n	8008ee0 <add_to_waitq_locked+0x80>
 8008eae:	686a      	ldr	r2, [r5, #4]
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d1f2      	bne.n	8008e9a <add_to_waitq_locked+0x3a>
	node->prev = tail;
 8008eb4:	e9c4 5200 	strd	r5, r2, [r4]
	tail->next = node;
 8008eb8:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8008eba:	606c      	str	r4, [r5, #4]
}
 8008ebc:	bd38      	pop	{r3, r4, r5, pc}
 8008ebe:	686a      	ldr	r2, [r5, #4]
	node->prev = tail;
 8008ec0:	e9c4 5200 	strd	r5, r2, [r4]
	tail->next = node;
 8008ec4:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8008ec6:	606c      	str	r4, [r5, #4]
 8008ec8:	e7f8      	b.n	8008ebc <add_to_waitq_locked+0x5c>
	sys_dnode_t *const next = node->next;
 8008eca:	e9d0 3100 	ldrd	r3, r1, [r0]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008ece:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008ed2:	7342      	strb	r2, [r0, #13]
	prev->next = next;
 8008ed4:	600b      	str	r3, [r1, #0]
	next->prev = prev;
 8008ed6:	6059      	str	r1, [r3, #4]
	node->next = NULL;
 8008ed8:	2300      	movs	r3, #0
	node->prev = NULL;
 8008eda:	e9c0 3300 	strd	r3, r3, [r0]
}
 8008ede:	e7c7      	b.n	8008e70 <add_to_waitq_locked+0x10>
	sys_dnode_t *const prev = successor->prev;
 8008ee0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8008ee2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8008ee6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8008ee8:	605c      	str	r4, [r3, #4]
}
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	20000de0 	.word	0x20000de0

08008ef0 <pend>:
{
 8008ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	4615      	mov	r5, r2
 8008ef8:	461c      	mov	r4, r3
	__asm__ volatile(
 8008efa:	f04f 0310 	mov.w	r3, #16
 8008efe:	f3ef 8711 	mrs	r7, BASEPRI
 8008f02:	f383 8812 	msr	BASEPRI_MAX, r3
 8008f06:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 8008f0a:	f7ff ffa9 	bl	8008e60 <add_to_waitq_locked>
	__asm__ volatile(
 8008f0e:	f387 8811 	msr	BASEPRI, r7
 8008f12:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8008f16:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8008f1a:	bf08      	it	eq
 8008f1c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 8008f20:	d101      	bne.n	8008f26 <pend+0x36>
}
 8008f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f26:	462a      	mov	r2, r5
 8008f28:	4623      	mov	r3, r4
 8008f2a:	f106 0018 	add.w	r0, r6, #24
 8008f2e:	4902      	ldr	r1, [pc, #8]	; (8008f38 <pend+0x48>)
 8008f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f34:	f000 bc26 	b.w	8009784 <z_add_timeout>
 8008f38:	08008e0d 	.word	0x08008e0d

08008f3c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 8008f3c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8008f40:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 8008f44:	4283      	cmp	r3, r0
		return b2 - b1;
 8008f46:	bf14      	ite	ne
 8008f48:	1ac0      	subne	r0, r0, r3
	return 0;
 8008f4a:	2000      	moveq	r0, #0
}
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop

08008f50 <z_time_slice>:
{
 8008f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8008f52:	f04f 0310 	mov.w	r3, #16
 8008f56:	f3ef 8511 	mrs	r5, BASEPRI
 8008f5a:	f383 8812 	msr	BASEPRI_MAX, r3
 8008f5e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8008f62:	4c20      	ldr	r4, [pc, #128]	; (8008fe4 <z_time_slice+0x94>)
 8008f64:	4a20      	ldr	r2, [pc, #128]	; (8008fe8 <z_time_slice+0x98>)
 8008f66:	68a3      	ldr	r3, [r4, #8]
 8008f68:	6811      	ldr	r1, [r2, #0]
	if (slice_time != 0) {
 8008f6a:	4e20      	ldr	r6, [pc, #128]	; (8008fec <z_time_slice+0x9c>)
	if (pending_current == _current) {
 8008f6c:	428b      	cmp	r3, r1
 8008f6e:	d024      	beq.n	8008fba <z_time_slice+0x6a>
	pending_current = NULL;
 8008f70:	2100      	movs	r1, #0
 8008f72:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8008f74:	6832      	ldr	r2, [r6, #0]
 8008f76:	b1ca      	cbz	r2, 8008fac <z_time_slice+0x5c>
		&& !z_is_idle_thread_object(thread);
 8008f78:	89da      	ldrh	r2, [r3, #14]
 8008f7a:	2a7f      	cmp	r2, #127	; 0x7f
 8008f7c:	d816      	bhi.n	8008fac <z_time_slice+0x5c>
		&& !z_is_thread_prevented_from_running(thread)
 8008f7e:	7b59      	ldrb	r1, [r3, #13]
 8008f80:	f011 071f 	ands.w	r7, r1, #31
 8008f84:	d112      	bne.n	8008fac <z_time_slice+0x5c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8008f86:	4a1a      	ldr	r2, [pc, #104]	; (8008ff0 <z_time_slice+0xa0>)
 8008f88:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8008f8c:	6812      	ldr	r2, [r2, #0]
 8008f8e:	4291      	cmp	r1, r2
 8008f90:	db0c      	blt.n	8008fac <z_time_slice+0x5c>
		&& !z_is_idle_thread_object(thread);
 8008f92:	4a18      	ldr	r2, [pc, #96]	; (8008ff4 <z_time_slice+0xa4>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d009      	beq.n	8008fac <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
 8008f98:	6922      	ldr	r2, [r4, #16]
 8008f9a:	4282      	cmp	r2, r0
 8008f9c:	dd1a      	ble.n	8008fd4 <z_time_slice+0x84>
			_current_cpu->slice_ticks -= ticks;
 8008f9e:	1a10      	subs	r0, r2, r0
 8008fa0:	6120      	str	r0, [r4, #16]
	__asm__ volatile(
 8008fa2:	f385 8811 	msr	BASEPRI, r5
 8008fa6:	f3bf 8f6f 	isb	sy
}
 8008faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_current_cpu->slice_ticks = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	6123      	str	r3, [r4, #16]
 8008fb0:	f385 8811 	msr	BASEPRI, r5
 8008fb4:	f3bf 8f6f 	isb	sy
}
 8008fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (slice_time != 0) {
 8008fba:	6833      	ldr	r3, [r6, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0f7      	beq.n	8008fb0 <z_time_slice+0x60>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8008fc0:	f7fe ff42 	bl	8007e48 <sys_clock_elapsed>
 8008fc4:	6832      	ldr	r2, [r6, #0]
		z_set_timeout_expiry(slice_time, false);
 8008fc6:	2100      	movs	r1, #0
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8008fc8:	1813      	adds	r3, r2, r0
		z_set_timeout_expiry(slice_time, false);
 8008fca:	4610      	mov	r0, r2
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8008fcc:	6123      	str	r3, [r4, #16]
		z_set_timeout_expiry(slice_time, false);
 8008fce:	f000 fc75 	bl	80098bc <z_set_timeout_expiry>
}
 8008fd2:	e7ed      	b.n	8008fb0 <z_time_slice+0x60>
			move_thread_to_end_of_prio_q(_current);
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff fea3 	bl	8008d20 <move_thread_to_end_of_prio_q>
	if (slice_time != 0) {
 8008fda:	6833      	ldr	r3, [r6, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d0e7      	beq.n	8008fb0 <z_time_slice+0x60>
 8008fe0:	e7ee      	b.n	8008fc0 <z_time_slice+0x70>
 8008fe2:	bf00      	nop
 8008fe4:	20000de0 	.word	0x20000de0
 8008fe8:	20000e1c 	.word	0x20000e1c
 8008fec:	20000e24 	.word	0x20000e24
 8008ff0:	20000e20 	.word	0x20000e20
 8008ff4:	20000538 	.word	0x20000538

08008ff8 <z_ready_thread>:
{
 8008ff8:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008ffa:	f04f 0310 	mov.w	r3, #16
 8008ffe:	f3ef 8411 	mrs	r4, BASEPRI
 8009002:	f383 8812 	msr	BASEPRI_MAX, r3
 8009006:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 800900a:	f7ff fec9 	bl	8008da0 <ready_thread>
	__asm__ volatile(
 800900e:	f384 8811 	msr	BASEPRI, r4
 8009012:	f3bf 8f6f 	isb	sy
}
 8009016:	bd10      	pop	{r4, pc}

08009018 <z_sched_start>:
{
 8009018:	b510      	push	{r4, lr}
	__asm__ volatile(
 800901a:	f04f 0210 	mov.w	r2, #16
 800901e:	f3ef 8411 	mrs	r4, BASEPRI
 8009022:	f382 8812 	msr	BASEPRI_MAX, r2
 8009026:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800902a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 800902c:	0753      	lsls	r3, r2, #29
 800902e:	d404      	bmi.n	800903a <z_sched_start+0x22>
	__asm__ volatile(
 8009030:	f384 8811 	msr	BASEPRI, r4
 8009034:	f3bf 8f6f 	isb	sy
}
 8009038:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800903a:	f022 0204 	bic.w	r2, r2, #4
 800903e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8009040:	f7ff feae 	bl	8008da0 <ready_thread>
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8009044:	2c00      	cmp	r4, #0
 8009046:	d1f3      	bne.n	8009030 <z_sched_start+0x18>
 8009048:	f3ef 8005 	mrs	r0, IPSR
 800904c:	2800      	cmp	r0, #0
 800904e:	d1ef      	bne.n	8009030 <z_sched_start+0x18>
	new_thread = _kernel.ready_q.cache;
 8009050:	4b04      	ldr	r3, [pc, #16]	; (8009064 <z_sched_start+0x4c>)
	if (resched(key.key) && need_swap()) {
 8009052:	699a      	ldr	r2, [r3, #24]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	429a      	cmp	r2, r3
 8009058:	d0ea      	beq.n	8009030 <z_sched_start+0x18>
}
 800905a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
 800905e:	f7f8 bd5f 	b.w	8001b20 <arch_swap>
 8009062:	bf00      	nop
 8009064:	20000de0 	.word	0x20000de0

08009068 <z_impl_k_thread_suspend>:
{
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800906c:	3018      	adds	r0, #24
 800906e:	f000 fc0b 	bl	8009888 <z_abort_timeout>
	__asm__ volatile(
 8009072:	f04f 0310 	mov.w	r3, #16
 8009076:	f3ef 8611 	mrs	r6, BASEPRI
 800907a:	f383 8812 	msr	BASEPRI_MAX, r3
 800907e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8009082:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 8009086:	7b63      	ldrb	r3, [r4, #13]
 8009088:	2a00      	cmp	r2, #0
 800908a:	db12      	blt.n	80090b2 <z_impl_k_thread_suspend+0x4a>
		update_cache(thread == _current);
 800908c:	4d18      	ldr	r5, [pc, #96]	; (80090f0 <z_impl_k_thread_suspend+0x88>)
 800908e:	68a8      	ldr	r0, [r5, #8]
 8009090:	1b00      	subs	r0, r0, r4
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8009092:	f043 0310 	orr.w	r3, r3, #16
 8009096:	fab0 f080 	clz	r0, r0
 800909a:	7363      	strb	r3, [r4, #13]
 800909c:	0940      	lsrs	r0, r0, #5
 800909e:	f7ff fe13 	bl	8008cc8 <update_cache>
	__asm__ volatile(
 80090a2:	f386 8811 	msr	BASEPRI, r6
 80090a6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 80090aa:	68ab      	ldr	r3, [r5, #8]
 80090ac:	42a3      	cmp	r3, r4
 80090ae:	d00a      	beq.n	80090c6 <z_impl_k_thread_suspend+0x5e>
}
 80090b0:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const next = node->next;
 80090b2:	e9d4 2100 	ldrd	r2, r1, [r4]
	prev->next = next;
 80090b6:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 80090b8:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 80090ba:	2200      	movs	r2, #0
	node->prev = NULL;
 80090bc:	e9c4 2200 	strd	r2, r2, [r4]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80090c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80090c4:	e7e2      	b.n	800908c <z_impl_k_thread_suspend+0x24>
	__asm__ volatile(
 80090c6:	f04f 0210 	mov.w	r2, #16
 80090ca:	f3ef 8311 	mrs	r3, BASEPRI
 80090ce:	f382 8812 	msr	BASEPRI_MAX, r2
 80090d2:	f3bf 8f6f 	isb	sy
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80090d6:	b933      	cbnz	r3, 80090e6 <z_impl_k_thread_suspend+0x7e>
 80090d8:	f3ef 8005 	mrs	r0, IPSR
 80090dc:	b918      	cbnz	r0, 80090e6 <z_impl_k_thread_suspend+0x7e>
}
 80090de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090e2:	f7f8 bd1d 	b.w	8001b20 <arch_swap>
	__asm__ volatile(
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	bd70      	pop	{r4, r5, r6, pc}
 80090f0:	20000de0 	.word	0x20000de0

080090f4 <z_unpend_thread_no_timeout>:
	__asm__ volatile(
 80090f4:	f04f 0310 	mov.w	r3, #16
 80090f8:	f3ef 8111 	mrs	r1, BASEPRI
 80090fc:	f383 8812 	msr	BASEPRI_MAX, r3
 8009100:	f3bf 8f6f 	isb	sy
	sys_dnode_t *const next = node->next;
 8009104:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8009108:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800910a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 800910c:	7b42      	ldrb	r2, [r0, #13]
	node->next = NULL;
 800910e:	2300      	movs	r3, #0
 8009110:	f022 0202 	bic.w	r2, r2, #2
	node->prev = NULL;
 8009114:	e9c0 3300 	strd	r3, r3, [r0]
 8009118:	7342      	strb	r2, [r0, #13]
	thread->base.pended_on = NULL;
 800911a:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 800911c:	f381 8811 	msr	BASEPRI, r1
 8009120:	f3bf 8f6f 	isb	sy
}
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop

08009128 <z_pend_curr>:
{
 8009128:	b510      	push	{r4, lr}
	pending_current = _current;
 800912a:	4b07      	ldr	r3, [pc, #28]	; (8009148 <z_pend_curr+0x20>)
 800912c:	6898      	ldr	r0, [r3, #8]
 800912e:	4b07      	ldr	r3, [pc, #28]	; (800914c <z_pend_curr+0x24>)
{
 8009130:	460c      	mov	r4, r1
	pending_current = _current;
 8009132:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 8009134:	4611      	mov	r1, r2
 8009136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800913a:	f7ff fed9 	bl	8008ef0 <pend>
 800913e:	4620      	mov	r0, r4
}
 8009140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009144:	f7f8 bcec 	b.w	8001b20 <arch_swap>
 8009148:	20000de0 	.word	0x20000de0
 800914c:	20000e1c 	.word	0x20000e1c

08009150 <z_unpend1_no_timeout>:
{
 8009150:	4603      	mov	r3, r0
	__asm__ volatile(
 8009152:	f04f 0210 	mov.w	r2, #16
 8009156:	f3ef 8111 	mrs	r1, BASEPRI
 800915a:	f382 8812 	msr	BASEPRI_MAX, r2
 800915e:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8009162:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009164:	4283      	cmp	r3, r0
 8009166:	d011      	beq.n	800918c <z_unpend1_no_timeout+0x3c>
	if (n != NULL) {
 8009168:	b158      	cbz	r0, 8009182 <z_unpend1_no_timeout+0x32>
	sys_dnode_t *const next = node->next;
 800916a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800916e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8009170:	605a      	str	r2, [r3, #4]
 8009172:	7b42      	ldrb	r2, [r0, #13]
	node->next = NULL;
 8009174:	2300      	movs	r3, #0
	node->prev = NULL;
 8009176:	e9c0 3300 	strd	r3, r3, [r0]
 800917a:	f022 0202 	bic.w	r2, r2, #2
 800917e:	7342      	strb	r2, [r0, #13]
	thread->base.pended_on = NULL;
 8009180:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 8009182:	f381 8811 	msr	BASEPRI, r1
 8009186:	f3bf 8f6f 	isb	sy
}
 800918a:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800918c:	2000      	movs	r0, #0
 800918e:	f381 8811 	msr	BASEPRI, r1
 8009192:	f3bf 8f6f 	isb	sy
}
 8009196:	4770      	bx	lr

08009198 <z_unpend_first_thread>:
{
 8009198:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800919a:	f04f 0310 	mov.w	r3, #16
 800919e:	f3ef 8511 	mrs	r5, BASEPRI
 80091a2:	f383 8812 	msr	BASEPRI_MAX, r3
 80091a6:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80091aa:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80091ac:	42a0      	cmp	r0, r4
 80091ae:	d016      	beq.n	80091de <z_unpend_first_thread+0x46>
	if (n != NULL) {
 80091b0:	b17c      	cbz	r4, 80091d2 <z_unpend_first_thread+0x3a>
	sys_dnode_t *const next = node->next;
 80091b2:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
 80091b6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80091b8:	605a      	str	r2, [r3, #4]
 80091ba:	7b62      	ldrb	r2, [r4, #13]
	node->next = NULL;
 80091bc:	2300      	movs	r3, #0
 80091be:	f022 0202 	bic.w	r2, r2, #2
	node->prev = NULL;
 80091c2:	e9c4 3300 	strd	r3, r3, [r4]
 80091c6:	7362      	strb	r2, [r4, #13]
	thread->base.pended_on = NULL;
 80091c8:	60a3      	str	r3, [r4, #8]
 80091ca:	f104 0018 	add.w	r0, r4, #24
 80091ce:	f000 fb5b 	bl	8009888 <z_abort_timeout>
	__asm__ volatile(
 80091d2:	f385 8811 	msr	BASEPRI, r5
 80091d6:	f3bf 8f6f 	isb	sy
}
 80091da:	4620      	mov	r0, r4
 80091dc:	bd38      	pop	{r3, r4, r5, pc}
	struct k_thread *thread = NULL;
 80091de:	2400      	movs	r4, #0
 80091e0:	f385 8811 	msr	BASEPRI, r5
 80091e4:	f3bf 8f6f 	isb	sy
}
 80091e8:	4620      	mov	r0, r4
 80091ea:	bd38      	pop	{r3, r4, r5, pc}

080091ec <z_unpend_thread>:
	__asm__ volatile(
 80091ec:	f04f 0310 	mov.w	r3, #16
 80091f0:	f3ef 8111 	mrs	r1, BASEPRI
 80091f4:	f383 8812 	msr	BASEPRI_MAX, r3
 80091f8:	f3bf 8f6f 	isb	sy
	sys_dnode_t *const next = node->next;
 80091fc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8009200:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8009202:	605a      	str	r2, [r3, #4]
 8009204:	7b42      	ldrb	r2, [r0, #13]
	node->next = NULL;
 8009206:	2300      	movs	r3, #0
 8009208:	f022 0202 	bic.w	r2, r2, #2
	node->prev = NULL;
 800920c:	e9c0 3300 	strd	r3, r3, [r0]
 8009210:	7342      	strb	r2, [r0, #13]
	thread->base.pended_on = NULL;
 8009212:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 8009214:	f381 8811 	msr	BASEPRI, r1
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	3018      	adds	r0, #24
 800921e:	f000 bb33 	b.w	8009888 <z_abort_timeout>
 8009222:	bf00      	nop

08009224 <z_set_prio>:
{
 8009224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8009226:	f04f 0310 	mov.w	r3, #16
 800922a:	f3ef 8411 	mrs	r4, BASEPRI
 800922e:	f383 8812 	msr	BASEPRI_MAX, r3
 8009232:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 8009236:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8009238:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 800923a:	b249      	sxtb	r1, r1
 800923c:	d101      	bne.n	8009242 <z_set_prio+0x1e>
 800923e:	6982      	ldr	r2, [r0, #24]
 8009240:	b132      	cbz	r2, 8009250 <z_set_prio+0x2c>
			thread->base.prio = prio;
 8009242:	7381      	strb	r1, [r0, #14]
 8009244:	2000      	movs	r0, #0
	__asm__ volatile(
 8009246:	f384 8811 	msr	BASEPRI, r4
 800924a:	f3bf 8f6f 	isb	sy
}
 800924e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const next = node->next;
 8009250:	e9d0 5600 	ldrd	r5, r6, [r0]
	return list->head == list;
 8009254:	4f17      	ldr	r7, [pc, #92]	; (80092b4 <z_set_prio+0x90>)
	prev->next = next;
 8009256:	6035      	str	r5, [r6, #0]
	next->prev = prev;
 8009258:	606e      	str	r6, [r5, #4]
	node->prev = NULL;
 800925a:	e9c0 2200 	strd	r2, r2, [r0]
	thread->base.thread_state |= _THREAD_QUEUED;
 800925e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	return list->head == list;
 8009262:	463e      	mov	r6, r7
 8009264:	7343      	strb	r3, [r0, #13]
 8009266:	f856 3f1c 	ldr.w	r3, [r6, #28]!
	return (node == list->tail) ? NULL : node->next;
 800926a:	6a3d      	ldr	r5, [r7, #32]
				thread->base.prio = prio;
 800926c:	7381      	strb	r1, [r0, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800926e:	42b3      	cmp	r3, r6
 8009270:	d00d      	beq.n	800928e <z_set_prio+0x6a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009272:	b163      	cbz	r3, 800928e <z_set_prio+0x6a>
	int32_t b2 = thread_2->base.prio;
 8009274:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8009278:	428a      	cmp	r2, r1
		return b2 - b1;
 800927a:	eba2 0c01 	sub.w	ip, r2, r1
	if (b1 != b2) {
 800927e:	d002      	beq.n	8009286 <z_set_prio+0x62>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8009280:	f1bc 0f00 	cmp.w	ip, #0
 8009284:	dc10      	bgt.n	80092a8 <z_set_prio+0x84>
	return (node == list->tail) ? NULL : node->next;
 8009286:	42ab      	cmp	r3, r5
 8009288:	d001      	beq.n	800928e <z_set_prio+0x6a>
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	e7f1      	b.n	8009272 <z_set_prio+0x4e>
	node->prev = tail;
 800928e:	e9c0 6500 	strd	r6, r5, [r0]
	tail->next = node;
 8009292:	6028      	str	r0, [r5, #0]
	list->tail = node;
 8009294:	6238      	str	r0, [r7, #32]
			update_cache(1);
 8009296:	2001      	movs	r0, #1
 8009298:	f7ff fd16 	bl	8008cc8 <update_cache>
 800929c:	2001      	movs	r0, #1
 800929e:	f384 8811 	msr	BASEPRI, r4
 80092a2:	f3bf 8f6f 	isb	sy
}
 80092a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 80092a8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80092aa:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 80092ae:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80092b0:	6058      	str	r0, [r3, #4]
}
 80092b2:	e7f0      	b.n	8009296 <z_set_prio+0x72>
 80092b4:	20000de0 	.word	0x20000de0

080092b8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80092b8:	b949      	cbnz	r1, 80092ce <z_reschedule+0x16>
 80092ba:	f3ef 8005 	mrs	r0, IPSR
 80092be:	b930      	cbnz	r0, 80092ce <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 80092c0:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 80092c2:	699a      	ldr	r2, [r3, #24]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d001      	beq.n	80092ce <z_reschedule+0x16>
 80092ca:	f7f8 bc29 	b.w	8001b20 <arch_swap>
 80092ce:	f381 8811 	msr	BASEPRI, r1
 80092d2:	f3bf 8f6f 	isb	sy
}
 80092d6:	4770      	bx	lr
 80092d8:	20000de0 	.word	0x20000de0

080092dc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80092dc:	4603      	mov	r3, r0
 80092de:	b920      	cbnz	r0, 80092ea <z_reschedule_irqlock+0xe>
 80092e0:	f3ef 8205 	mrs	r2, IPSR
 80092e4:	b90a      	cbnz	r2, 80092ea <z_reschedule_irqlock+0xe>
 80092e6:	f7f8 bc1b 	b.w	8001b20 <arch_swap>
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
}
 80092f2:	4770      	bx	lr

080092f4 <k_sched_lock>:
	__asm__ volatile(
 80092f4:	f04f 0310 	mov.w	r3, #16
 80092f8:	f3ef 8111 	mrs	r1, BASEPRI
 80092fc:	f383 8812 	msr	BASEPRI_MAX, r3
 8009300:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 8009304:	4b04      	ldr	r3, [pc, #16]	; (8009318 <k_sched_lock+0x24>)
 8009306:	689a      	ldr	r2, [r3, #8]
 8009308:	7bd3      	ldrb	r3, [r2, #15]
 800930a:	3b01      	subs	r3, #1
 800930c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800930e:	f381 8811 	msr	BASEPRI, r1
 8009312:	f3bf 8f6f 	isb	sy
}
 8009316:	4770      	bx	lr
 8009318:	20000de0 	.word	0x20000de0

0800931c <k_sched_unlock>:
{
 800931c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800931e:	f04f 0310 	mov.w	r3, #16
 8009322:	f3ef 8411 	mrs	r4, BASEPRI
 8009326:	f383 8812 	msr	BASEPRI_MAX, r3
 800932a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 800932e:	4b10      	ldr	r3, [pc, #64]	; (8009370 <k_sched_unlock+0x54>)
 8009330:	689a      	ldr	r2, [r3, #8]
 8009332:	7bd3      	ldrb	r3, [r2, #15]
 8009334:	3301      	adds	r3, #1
		update_cache(0);
 8009336:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 8009338:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800933a:	f7ff fcc5 	bl	8008cc8 <update_cache>
	__asm__ volatile(
 800933e:	f384 8811 	msr	BASEPRI, r4
 8009342:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8009346:	f04f 0210 	mov.w	r2, #16
 800934a:	f3ef 8311 	mrs	r3, BASEPRI
 800934e:	f382 8812 	msr	BASEPRI_MAX, r2
 8009352:	f3bf 8f6f 	isb	sy
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8009356:	b933      	cbnz	r3, 8009366 <k_sched_unlock+0x4a>
 8009358:	f3ef 8005 	mrs	r0, IPSR
 800935c:	b918      	cbnz	r0, 8009366 <k_sched_unlock+0x4a>
}
 800935e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009362:	f7f8 bbdd 	b.w	8001b20 <arch_swap>
	__asm__ volatile(
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	bd10      	pop	{r4, pc}
 8009370:	20000de0 	.word	0x20000de0

08009374 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8009374:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <z_sched_init+0x38>)
 8009376:	f103 021c 	add.w	r2, r3, #28
	sys_dlist_init(&rq->runq);
#endif
}

void z_sched_init(void)
{
 800937a:	b410      	push	{r4}
	list->tail = (sys_dnode_t *)list;
 800937c:	e9c3 2207 	strd	r2, r2, [r3, #28]
	__asm__ volatile(
 8009380:	f04f 0210 	mov.w	r2, #16
 8009384:	f3ef 8111 	mrs	r1, BASEPRI
 8009388:	f382 8812 	msr	BASEPRI_MAX, r2
 800938c:	f3bf 8f6f 	isb	sy
		slice_time = k_ms_to_ticks_ceil32(slice);
 8009390:	4c07      	ldr	r4, [pc, #28]	; (80093b0 <z_sched_init+0x3c>)
		slice_max_prio = prio;
 8009392:	4808      	ldr	r0, [pc, #32]	; (80093b4 <z_sched_init+0x40>)
		_current_cpu->slice_ticks = 0;
 8009394:	2200      	movs	r2, #0
 8009396:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
 8009398:	6022      	str	r2, [r4, #0]
		slice_max_prio = prio;
 800939a:	6002      	str	r2, [r0, #0]
	__asm__ volatile(
 800939c:	f381 8811 	msr	BASEPRI, r1
 80093a0:	f3bf 8f6f 	isb	sy

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
 80093a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	20000de0 	.word	0x20000de0
 80093b0:	20000e24 	.word	0x20000e24
 80093b4:	20000e20 	.word	0x20000e20

080093b8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 80093b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80093ba:	f04f 0310 	mov.w	r3, #16
 80093be:	f3ef 8711 	mrs	r7, BASEPRI
 80093c2:	f383 8812 	msr	BASEPRI_MAX, r3
 80093c6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 80093ca:	4d1b      	ldr	r5, [pc, #108]	; (8009438 <z_impl_k_yield+0x80>)
 80093cc:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80093ce:	7b4b      	ldrb	r3, [r1, #13]
	sys_dnode_t *const next = node->next;
 80093d0:	680a      	ldr	r2, [r1, #0]
	sys_dnode_t *const prev = node->prev;
 80093d2:	6848      	ldr	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_QUEUED;
 80093d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
	prev->next = next;
 80093d8:	6002      	str	r2, [r0, #0]
	return list->head == list;
 80093da:	462e      	mov	r6, r5
	next->prev = prev;
 80093dc:	6050      	str	r0, [r2, #4]
	node->next = NULL;
 80093de:	2200      	movs	r2, #0
 80093e0:	734b      	strb	r3, [r1, #13]
 80093e2:	600a      	str	r2, [r1, #0]
	return list->head == list;
 80093e4:	f856 3f1c 	ldr.w	r3, [r6, #28]!
	node->prev = NULL;
 80093e8:	604a      	str	r2, [r1, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80093ea:	42b3      	cmp	r3, r6
	return (node == list->tail) ? NULL : node->next;
 80093ec:	6a2c      	ldr	r4, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80093ee:	d010      	beq.n	8009412 <z_impl_k_yield+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80093f0:	b17b      	cbz	r3, 8009412 <z_impl_k_yield+0x5a>
	int32_t b1 = thread_1->base.prio;
 80093f2:	f991 000e 	ldrsb.w	r0, [r1, #14]
 80093f6:	e001      	b.n	80093fc <z_impl_k_yield+0x44>
	return (node == list->tail) ? NULL : node->next;
 80093f8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80093fa:	b153      	cbz	r3, 8009412 <z_impl_k_yield+0x5a>
	int32_t b2 = thread_2->base.prio;
 80093fc:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8009400:	4290      	cmp	r0, r2
		return b2 - b1;
 8009402:	eba2 0c00 	sub.w	ip, r2, r0
	if (b1 != b2) {
 8009406:	d002      	beq.n	800940e <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8009408:	f1bc 0f00 	cmp.w	ip, #0
 800940c:	dc0d      	bgt.n	800942a <z_impl_k_yield+0x72>
 800940e:	42a3      	cmp	r3, r4
 8009410:	d1f2      	bne.n	80093f8 <z_impl_k_yield+0x40>
	node->prev = tail;
 8009412:	e9c1 6400 	strd	r6, r4, [r1]
	tail->next = node;
 8009416:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8009418:	6229      	str	r1, [r5, #32]
	}
	queue_thread(_current);
	update_cache(1);
 800941a:	2001      	movs	r0, #1
 800941c:	f7ff fc54 	bl	8008cc8 <update_cache>
 8009420:	4638      	mov	r0, r7
	z_swap(&sched_spinlock, key);
}
 8009422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009426:	f7f8 bb7b 	b.w	8001b20 <arch_swap>
	sys_dnode_t *const prev = successor->prev;
 800942a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800942c:	e9c1 3200 	strd	r3, r2, [r1]
	prev->next = node;
 8009430:	6011      	str	r1, [r2, #0]
	successor->prev = node;
 8009432:	6059      	str	r1, [r3, #4]
}
 8009434:	e7f1      	b.n	800941a <z_impl_k_yield+0x62>
 8009436:	bf00      	nop
 8009438:	20000de0 	.word	0x20000de0

0800943c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 800943c:	ea50 0301 	orrs.w	r3, r0, r1
{
 8009440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 8009444:	d04a      	beq.n	80094dc <z_tick_sleep+0xa0>
		k_yield();
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 8009446:	f06f 0401 	mvn.w	r4, #1
 800944a:	1a24      	subs	r4, r4, r0
 800944c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009450:	eb63 0301 	sbc.w	r3, r3, r1
 8009454:	2c01      	cmp	r4, #1
 8009456:	f173 0300 	sbcs.w	r3, r3, #0
 800945a:	4605      	mov	r5, r0
 800945c:	460e      	mov	r6, r1
 800945e:	db2e      	blt.n	80094be <z_tick_sleep+0x82>
 8009460:	f04f 0310 	mov.w	r3, #16
 8009464:	f3ef 8811 	mrs	r8, BASEPRI
 8009468:	f383 8812 	msr	BASEPRI_MAX, r3
 800946c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8009470:	4f1d      	ldr	r7, [pc, #116]	; (80094e8 <z_tick_sleep+0xac>)
 8009472:	4a1e      	ldr	r2, [pc, #120]	; (80094ec <z_tick_sleep+0xb0>)
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	6013      	str	r3, [r2, #0]
	if (z_is_thread_queued(thread)) {
 8009478:	f993 200d 	ldrsb.w	r2, [r3, #13]
	return (thread->base.thread_state & state) != 0U;
 800947c:	7b59      	ldrb	r1, [r3, #13]
 800947e:	2a00      	cmp	r2, #0
 8009480:	db21      	blt.n	80094c6 <z_tick_sleep+0x8a>
	update_cache(thread == _current);
 8009482:	2001      	movs	r0, #1
 8009484:	f7ff fc20 	bl	8008cc8 <update_cache>
#endif
	unready_thread(_current);
	z_add_thread_timeout(_current, timeout);
 8009488:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800948a:	4919      	ldr	r1, [pc, #100]	; (80094f0 <z_tick_sleep+0xb4>)
 800948c:	462a      	mov	r2, r5
 800948e:	4633      	mov	r3, r6
 8009490:	3018      	adds	r0, #24
 8009492:	f000 f977 	bl	8009784 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8009496:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8009498:	7b53      	ldrb	r3, [r2, #13]
 800949a:	f043 0310 	orr.w	r3, r3, #16
 800949e:	7353      	strb	r3, [r2, #13]
 80094a0:	4640      	mov	r0, r8
 80094a2:	f7f8 fb3d 	bl	8001b20 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 80094a6:	f000 fa25 	bl	80098f4 <sys_clock_tick_get_32>
 80094aa:	1a20      	subs	r0, r4, r0
 80094ac:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 80094b0:	2801      	cmp	r0, #1
 80094b2:	f173 0300 	sbcs.w	r3, r3, #0
		return ticks;
	}
#endif

	return 0;
 80094b6:	bfb8      	it	lt
 80094b8:	2000      	movlt	r0, #0
}
 80094ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 80094be:	f000 fa19 	bl	80098f4 <sys_clock_tick_get_32>
 80094c2:	1944      	adds	r4, r0, r5
 80094c4:	e7cc      	b.n	8009460 <z_tick_sleep+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80094c6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80094ca:	7359      	strb	r1, [r3, #13]
	sys_dnode_t *const next = node->next;
 80094cc:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
 80094d0:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 80094d2:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 80094d4:	2200      	movs	r2, #0
	node->prev = NULL;
 80094d6:	e9c3 2200 	strd	r2, r2, [r3]
}
 80094da:	e7d2      	b.n	8009482 <z_tick_sleep+0x46>
 80094dc:	f7ff ff6c 	bl	80093b8 <z_impl_k_yield>
		return 0;
 80094e0:	2000      	movs	r0, #0
}
 80094e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e6:	bf00      	nop
 80094e8:	20000de0 	.word	0x20000de0
 80094ec:	20000e1c 	.word	0x20000e1c
 80094f0:	08008e0d 	.word	0x08008e0d

080094f4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80094f4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80094f8:	bf08      	it	eq
 80094fa:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 80094fe:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8009500:	d007      	beq.n	8009512 <z_impl_k_sleep+0x1e>
		return (int32_t) K_TICKS_FOREVER;
	}

	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
 8009502:	f7ff ff9b 	bl	800943c <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8009506:	220a      	movs	r2, #10
 8009508:	2300      	movs	r3, #0
 800950a:	17c1      	asrs	r1, r0, #31
 800950c:	f7f6 fe98 	bl	8000240 <__aeabi_uldivmod>
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8009510:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 8009512:	4b03      	ldr	r3, [pc, #12]	; (8009520 <z_impl_k_sleep+0x2c>)
 8009514:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8009516:	f7ff fda7 	bl	8009068 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 800951a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800951e:	bd08      	pop	{r3, pc}
 8009520:	20000de0 	.word	0x20000de0

08009524 <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
 8009524:	4b01      	ldr	r3, [pc, #4]	; (800952c <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8009526:	6898      	ldr	r0, [r3, #8]
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	20000de0 	.word	0x20000de0

08009530 <z_impl_k_is_preempt_thread>:
 8009530:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
 8009534:	b93b      	cbnz	r3, 8009546 <z_impl_k_is_preempt_thread+0x16>
 8009536:	4b05      	ldr	r3, [pc, #20]	; (800954c <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8009538:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
 800953a:	89d8      	ldrh	r0, [r3, #14]
 800953c:	287f      	cmp	r0, #127	; 0x7f
 800953e:	bf8c      	ite	hi
 8009540:	2000      	movhi	r0, #0
 8009542:	2001      	movls	r0, #1
 8009544:	4770      	bx	lr
 8009546:	2000      	movs	r0, #0
}
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	20000de0 	.word	0x20000de0

08009550 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8009550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009554:	f04f 0310 	mov.w	r3, #16
 8009558:	f3ef 8711 	mrs	r7, BASEPRI
 800955c:	f383 8812 	msr	BASEPRI_MAX, r3
 8009560:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8009564:	7b43      	ldrb	r3, [r0, #13]
 8009566:	f013 0208 	ands.w	r2, r3, #8
 800956a:	d005      	beq.n	8009578 <z_thread_abort+0x28>
	__asm__ volatile(
 800956c:	f387 8811 	msr	BASEPRI, r7
 8009570:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8009574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8009578:	f023 0120 	bic.w	r1, r3, #32
 800957c:	4605      	mov	r5, r0
 800957e:	f041 0008 	orr.w	r0, r1, #8
		if (z_is_thread_queued(thread)) {
 8009582:	09c9      	lsrs	r1, r1, #7
 8009584:	d13e      	bne.n	8009604 <z_thread_abort+0xb4>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8009586:	7368      	strb	r0, [r5, #13]
		if (thread->base.pended_on != NULL) {
 8009588:	68ab      	ldr	r3, [r5, #8]
 800958a:	b15b      	cbz	r3, 80095a4 <z_thread_abort+0x54>
	sys_dnode_t *const next = node->next;
 800958c:	e9d5 3200 	ldrd	r3, r2, [r5]
	prev->next = next;
 8009590:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8009592:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 8009594:	7b6a      	ldrb	r2, [r5, #13]
	node->next = NULL;
 8009596:	2300      	movs	r3, #0
	node->prev = NULL;
 8009598:	e9c5 3300 	strd	r3, r3, [r5]
 800959c:	f022 0202 	bic.w	r2, r2, #2
 80095a0:	736a      	strb	r2, [r5, #13]
	thread->base.pended_on = NULL;
 80095a2:	60ab      	str	r3, [r5, #8]
	return z_abort_timeout(&thread->base.timeout);
 80095a4:	f105 0018 	add.w	r0, r5, #24
 80095a8:	f000 f96e 	bl	8009888 <z_abort_timeout>
	return list->head == list;
 80095ac:	6dac      	ldr	r4, [r5, #88]	; 0x58
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80095ae:	f105 0858 	add.w	r8, r5, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80095b2:	45a0      	cmp	r8, r4
 80095b4:	d017      	beq.n	80095e6 <z_thread_abort+0x96>
	node->next = NULL;
 80095b6:	2600      	movs	r6, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80095b8:	b1ac      	cbz	r4, 80095e6 <z_thread_abort+0x96>
	sys_dnode_t *const next = node->next;
 80095ba:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
 80095be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80095c0:	605a      	str	r2, [r3, #4]
 80095c2:	7b63      	ldrb	r3, [r4, #13]
	node->next = NULL;
 80095c4:	6026      	str	r6, [r4, #0]
 80095c6:	f023 0302 	bic.w	r3, r3, #2
 80095ca:	7363      	strb	r3, [r4, #13]
	node->prev = NULL;
 80095cc:	6066      	str	r6, [r4, #4]
	thread->base.pended_on = NULL;
 80095ce:	60a6      	str	r6, [r4, #8]
 80095d0:	f104 0018 	add.w	r0, r4, #24
 80095d4:	f000 f958 	bl	8009888 <z_abort_timeout>
 80095d8:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 80095da:	4620      	mov	r0, r4
 80095dc:	f7ff fbe0 	bl	8008da0 <ready_thread>
	return list->head == list;
 80095e0:	6dac      	ldr	r4, [r5, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80095e2:	4544      	cmp	r4, r8
 80095e4:	d1e8      	bne.n	80095b8 <z_thread_abort+0x68>
		update_cache(1);
 80095e6:	2001      	movs	r0, #1
 80095e8:	f7ff fb6e 	bl	8008cc8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 80095ec:	4b0b      	ldr	r3, [pc, #44]	; (800961c <z_thread_abort+0xcc>)
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	42ab      	cmp	r3, r5
 80095f2:	d1bb      	bne.n	800956c <z_thread_abort+0x1c>
 80095f4:	f3ef 8305 	mrs	r3, IPSR
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1b7      	bne.n	800956c <z_thread_abort+0x1c>
 80095fc:	4638      	mov	r0, r7
 80095fe:	f7f8 fa8f 	bl	8001b20 <arch_swap>
	return ret;
 8009602:	e7b3      	b.n	800956c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8009604:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8009608:	f043 0308 	orr.w	r3, r3, #8
	sys_dnode_t *const prev = node->prev;
 800960c:	6869      	ldr	r1, [r5, #4]
 800960e:	736b      	strb	r3, [r5, #13]
	sys_dnode_t *const next = node->next;
 8009610:	682b      	ldr	r3, [r5, #0]
	prev->next = next;
 8009612:	600b      	str	r3, [r1, #0]
	next->prev = prev;
 8009614:	6059      	str	r1, [r3, #4]
	node->prev = NULL;
 8009616:	e9c5 2200 	strd	r2, r2, [r5]
}
 800961a:	e7b5      	b.n	8009588 <z_thread_abort+0x38>
 800961c:	20000de0 	.word	0x20000de0

08009620 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
 8009620:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8009622:	f04f 0310 	mov.w	r3, #16
 8009626:	f3ef 8511 	mrs	r5, BASEPRI
 800962a:	f383 8812 	msr	BASEPRI_MAX, r3
 800962e:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8009632:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009634:	42a0      	cmp	r0, r4
 8009636:	d01b      	beq.n	8009670 <z_sched_wake+0x50>
	if (n != NULL) {
 8009638:	b304      	cbz	r4, 800967c <z_sched_wake+0x5c>
	sys_dnode_t *const prev = node->prev;
 800963a:	6860      	ldr	r0, [r4, #4]
	sys_dnode_t *const next = node->next;
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	67e1      	str	r1, [r4, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8009640:	6162      	str	r2, [r4, #20]
	prev->next = next;
 8009642:	6003      	str	r3, [r0, #0]
	next->prev = prev;
 8009644:	6058      	str	r0, [r3, #4]
 8009646:	7b62      	ldrb	r2, [r4, #13]
	node->next = NULL;
 8009648:	2300      	movs	r3, #0
 800964a:	f022 0202 	bic.w	r2, r2, #2
	node->prev = NULL;
 800964e:	e9c4 3300 	strd	r3, r3, [r4]
 8009652:	7362      	strb	r2, [r4, #13]
	thread->base.pended_on = NULL;
 8009654:	60a3      	str	r3, [r4, #8]
 8009656:	f104 0018 	add.w	r0, r4, #24
 800965a:	f000 f915 	bl	8009888 <z_abort_timeout>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
 800965e:	4620      	mov	r0, r4
 8009660:	f7ff fb9e 	bl	8008da0 <ready_thread>
			ret = true;
 8009664:	2001      	movs	r0, #1
	__asm__ volatile(
 8009666:	f385 8811 	msr	BASEPRI, r5
 800966a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
 800966e:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
 8009670:	2000      	movs	r0, #0
 8009672:	f385 8811 	msr	BASEPRI, r5
 8009676:	f3bf 8f6f 	isb	sy
}
 800967a:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
 800967c:	4620      	mov	r0, r4
 800967e:	f385 8811 	msr	BASEPRI, r5
 8009682:	f3bf 8f6f 	isb	sy
}
 8009686:	bd38      	pop	{r3, r4, r5, pc}

08009688 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8009688:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 800968a:	4e09      	ldr	r6, [pc, #36]	; (80096b0 <z_sched_wait+0x28>)
 800968c:	4b09      	ldr	r3, [pc, #36]	; (80096b4 <z_sched_wait+0x2c>)
 800968e:	68b0      	ldr	r0, [r6, #8]
 8009690:	6018      	str	r0, [r3, #0]
{
 8009692:	9d06      	ldr	r5, [sp, #24]
 8009694:	460c      	mov	r4, r1
	pend(_current, wait_q, timeout);
 8009696:	4611      	mov	r1, r2
 8009698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800969c:	f7ff fc28 	bl	8008ef0 <pend>
	ret = arch_swap(key);
 80096a0:	4620      	mov	r0, r4
 80096a2:	f7f8 fa3d 	bl	8001b20 <arch_swap>
	int ret = z_pend_curr(lock, key, wait_q, timeout);

	if (data != NULL) {
 80096a6:	b115      	cbz	r5, 80096ae <z_sched_wait+0x26>
		*data = _current->base.swap_data;
 80096a8:	68b3      	ldr	r3, [r6, #8]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	602b      	str	r3, [r5, #0]
	}
	return ret;
}
 80096ae:	bd70      	pop	{r4, r5, r6, pc}
 80096b0:	20000de0 	.word	0x20000de0
 80096b4:	20000e1c 	.word	0x20000e1c

080096b8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 80096b8:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80096ba:	4806      	ldr	r0, [pc, #24]	; (80096d4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 80096bc:	4a06      	ldr	r2, [pc, #24]	; (80096d8 <z_data_copy+0x20>)
 80096be:	4907      	ldr	r1, [pc, #28]	; (80096dc <z_data_copy+0x24>)
 80096c0:	1a12      	subs	r2, r2, r0
 80096c2:	f001 fd8d 	bl	800b1e0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80096c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80096ca:	4a05      	ldr	r2, [pc, #20]	; (80096e0 <z_data_copy+0x28>)
 80096cc:	4905      	ldr	r1, [pc, #20]	; (80096e4 <z_data_copy+0x2c>)
 80096ce:	4806      	ldr	r0, [pc, #24]	; (80096e8 <z_data_copy+0x30>)
 80096d0:	f001 bd86 	b.w	800b1e0 <memcpy>
 80096d4:	20000000 	.word	0x20000000
 80096d8:	2000046c 	.word	0x2000046c
 80096dc:	0800c6e4 	.word	0x0800c6e4
 80096e0:	00000000 	.word	0x00000000
 80096e4:	0800c6e4 	.word	0x0800c6e4
 80096e8:	20000000 	.word	0x20000000

080096ec <remove_timeout>:
{
 80096ec:	b410      	push	{r4}
	return (node == list->tail) ? NULL : node->next;
 80096ee:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80096f0:	b168      	cbz	r0, 800970e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 80096f2:	4a0b      	ldr	r2, [pc, #44]	; (8009720 <remove_timeout+0x34>)
 80096f4:	6852      	ldr	r2, [r2, #4]
 80096f6:	4282      	cmp	r2, r0
 80096f8:	d009      	beq.n	800970e <remove_timeout+0x22>
	if (next(t) != NULL) {
 80096fa:	b143      	cbz	r3, 800970e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80096fc:	6901      	ldr	r1, [r0, #16]
 80096fe:	691a      	ldr	r2, [r3, #16]
 8009700:	6944      	ldr	r4, [r0, #20]
 8009702:	1852      	adds	r2, r2, r1
 8009704:	6959      	ldr	r1, [r3, #20]
 8009706:	611a      	str	r2, [r3, #16]
 8009708:	eb41 0104 	adc.w	r1, r1, r4
 800970c:	6159      	str	r1, [r3, #20]
	sys_dnode_t *const prev = node->prev;
 800970e:	6841      	ldr	r1, [r0, #4]
}
 8009710:	f85d 4b04 	ldr.w	r4, [sp], #4
	prev->next = next;
 8009714:	600b      	str	r3, [r1, #0]
	node->next = NULL;
 8009716:	2200      	movs	r2, #0
	next->prev = prev;
 8009718:	6059      	str	r1, [r3, #4]
	node->prev = NULL;
 800971a:	e9c0 2200 	strd	r2, r2, [r0]
 800971e:	4770      	bx	lr
 8009720:	20000320 	.word	0x20000320

08009724 <next_timeout>:
	return list->head == list;
 8009724:	4b14      	ldr	r3, [pc, #80]	; (8009778 <next_timeout+0x54>)
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8009726:	4a15      	ldr	r2, [pc, #84]	; (800977c <next_timeout+0x58>)
{
 8009728:	b510      	push	{r4, lr}
 800972a:	681c      	ldr	r4, [r3, #0]
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800972c:	6812      	ldr	r2, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800972e:	429c      	cmp	r4, r3
 8009730:	d01d      	beq.n	800976e <next_timeout+0x4a>
 8009732:	b1ca      	cbz	r2, 8009768 <next_timeout+0x44>
 8009734:	2000      	movs	r0, #0
	if ((to == NULL) ||
 8009736:	b14c      	cbz	r4, 800974c <next_timeout+0x28>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8009738:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800973c:	1a1b      	subs	r3, r3, r0
 800973e:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 8009742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009746:	f170 0200 	sbcs.w	r2, r0, #0
 800974a:	db08      	blt.n	800975e <next_timeout+0x3a>
		ret = MAX_WAIT;
 800974c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8009750:	4b0b      	ldr	r3, [pc, #44]	; (8009780 <next_timeout+0x5c>)
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	b113      	cbz	r3, 800975c <next_timeout+0x38>
 8009756:	4298      	cmp	r0, r3
 8009758:	bfa8      	it	ge
 800975a:	4618      	movge	r0, r3
}
 800975c:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
 800975e:	2800      	cmp	r0, #0
 8009760:	bfac      	ite	ge
 8009762:	4618      	movge	r0, r3
 8009764:	2000      	movlt	r0, #0
 8009766:	e7f3      	b.n	8009750 <next_timeout+0x2c>
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8009768:	f7fe fb6e 	bl	8007e48 <sys_clock_elapsed>
 800976c:	e7e3      	b.n	8009736 <next_timeout+0x12>
 800976e:	2a00      	cmp	r2, #0
 8009770:	d1ec      	bne.n	800974c <next_timeout+0x28>
 8009772:	f7fe fb69 	bl	8007e48 <sys_clock_elapsed>
 8009776:	e7e9      	b.n	800974c <next_timeout+0x28>
 8009778:	20000320 	.word	0x20000320
 800977c:	20000e28 	.word	0x20000e28
 8009780:	20000de0 	.word	0x20000de0

08009784 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8009784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009788:	bf08      	it	eq
 800978a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800978e:	d05f      	beq.n	8009850 <z_add_timeout+0xcc>
{
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	4604      	mov	r4, r0
 8009794:	4618      	mov	r0, r3
	to->fn = fn;
 8009796:	60a1      	str	r1, [r4, #8]
	__asm__ volatile(
 8009798:	f04f 0110 	mov.w	r1, #16
 800979c:	f3ef 8511 	mrs	r5, BASEPRI
 80097a0:	f381 8812 	msr	BASEPRI_MAX, r1
 80097a4:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 80097a8:	f06f 0101 	mvn.w	r1, #1
 80097ac:	1a8e      	subs	r6, r1, r2
 80097ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80097b2:	eb67 0603 	sbc.w	r6, r7, r3
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80097b6:	2e00      	cmp	r6, #0
 80097b8:	db41      	blt.n	800983e <z_add_timeout+0xba>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80097ba:	4b2f      	ldr	r3, [pc, #188]	; (8009878 <z_add_timeout+0xf4>)
 80097bc:	681e      	ldr	r6, [r3, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	1b89      	subs	r1, r1, r6
 80097c2:	eb67 0303 	sbc.w	r3, r7, r3
 80097c6:	1a8a      	subs	r2, r1, r2
			to->dticks = MAX(1, ticks);
 80097c8:	eb63 0300 	sbc.w	r3, r3, r0
 80097cc:	2a01      	cmp	r2, #1
 80097ce:	f173 0100 	sbcs.w	r1, r3, #0
 80097d2:	bfbc      	itt	lt
 80097d4:	2201      	movlt	r2, #1
 80097d6:	2300      	movlt	r3, #0
 80097d8:	e9c4 2304 	strd	r2, r3, [r4, #16]
	return list->head == list;
 80097dc:	4f27      	ldr	r7, [pc, #156]	; (800987c <z_add_timeout+0xf8>)
	return (node == list->tail) ? NULL : node->next;
 80097de:	e9d7 2c00 	ldrd	r2, ip, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80097e2:	42ba      	cmp	r2, r7
 80097e4:	d012      	beq.n	800980c <z_add_timeout+0x88>
		for (t = first(); t != NULL; t = next(t)) {
 80097e6:	b18a      	cbz	r2, 800980c <z_add_timeout+0x88>
			if (t->dticks > to->dticks) {
 80097e8:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 80097ec:	e001      	b.n	80097f2 <z_add_timeout+0x6e>
	return (node == list->tail) ? NULL : node->next;
 80097ee:	6812      	ldr	r2, [r2, #0]
		for (t = first(); t != NULL; t = next(t)) {
 80097f0:	b162      	cbz	r2, 800980c <z_add_timeout+0x88>
			if (t->dticks > to->dticks) {
 80097f2:	e9d2 0604 	ldrd	r0, r6, [r2, #16]
 80097f6:	4283      	cmp	r3, r0
 80097f8:	eb71 0e06 	sbcs.w	lr, r1, r6
 80097fc:	db29      	blt.n	8009852 <z_add_timeout+0xce>
			to->dticks -= t->dticks;
 80097fe:	1a1b      	subs	r3, r3, r0
 8009800:	eb61 0106 	sbc.w	r1, r1, r6
 8009804:	4594      	cmp	ip, r2
 8009806:	e9c4 3104 	strd	r3, r1, [r4, #16]
 800980a:	d1f0      	bne.n	80097ee <z_add_timeout+0x6a>
	node->prev = tail;
 800980c:	e9c4 7c00 	strd	r7, ip, [r4]
	tail->next = node;
 8009810:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8009814:	607c      	str	r4, [r7, #4]
	return list->head == list;
 8009816:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009818:	42bb      	cmp	r3, r7
 800981a:	d00b      	beq.n	8009834 <z_add_timeout+0xb0>
		if (to == first()) {
 800981c:	429c      	cmp	r4, r3
 800981e:	d109      	bne.n	8009834 <z_add_timeout+0xb0>
			int32_t next_time = next_timeout();
 8009820:	f7ff ff80 	bl	8009724 <next_timeout>
			if (next_time == 0 ||
 8009824:	b118      	cbz	r0, 800982e <z_add_timeout+0xaa>
			    _current_cpu->slice_ticks != next_time) {
 8009826:	4b16      	ldr	r3, [pc, #88]	; (8009880 <z_add_timeout+0xfc>)
			if (next_time == 0 ||
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	4283      	cmp	r3, r0
 800982c:	d002      	beq.n	8009834 <z_add_timeout+0xb0>
				sys_clock_set_timeout(next_time, false);
 800982e:	2100      	movs	r1, #0
 8009830:	f7fe fa82 	bl	8007d38 <sys_clock_set_timeout>
	__asm__ volatile(
 8009834:	f385 8811 	msr	BASEPRI, r5
 8009838:	f3bf 8f6f 	isb	sy
}
 800983c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800983e:	4911      	ldr	r1, [pc, #68]	; (8009884 <z_add_timeout+0x100>)
			to->dticks = timeout.ticks + 1 + elapsed();
 8009840:	1c56      	adds	r6, r2, #1
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8009842:	680a      	ldr	r2, [r1, #0]
			to->dticks = timeout.ticks + 1 + elapsed();
 8009844:	f143 0700 	adc.w	r7, r3, #0
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8009848:	b172      	cbz	r2, 8009868 <z_add_timeout+0xe4>
			to->dticks = timeout.ticks + 1 + elapsed();
 800984a:	e9c4 6704 	strd	r6, r7, [r4, #16]
 800984e:	e7c5      	b.n	80097dc <z_add_timeout+0x58>
 8009850:	4770      	bx	lr
				t->dticks -= to->dticks;
 8009852:	1ac3      	subs	r3, r0, r3
 8009854:	eb66 0101 	sbc.w	r1, r6, r1
 8009858:	e9c2 3104 	strd	r3, r1, [r2, #16]
	sys_dnode_t *const prev = successor->prev;
 800985c:	6853      	ldr	r3, [r2, #4]
	node->next = successor;
 800985e:	e9c4 2300 	strd	r2, r3, [r4]
	prev->next = node;
 8009862:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8009864:	6054      	str	r4, [r2, #4]
		if (t == NULL) {
 8009866:	e7d6      	b.n	8009816 <z_add_timeout+0x92>
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8009868:	f7fe faee 	bl	8007e48 <sys_clock_elapsed>
			to->dticks = timeout.ticks + 1 + elapsed();
 800986c:	1982      	adds	r2, r0, r6
 800986e:	4616      	mov	r6, r2
 8009870:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 8009874:	e7e9      	b.n	800984a <z_add_timeout+0xc6>
 8009876:	bf00      	nop
 8009878:	200006c8 	.word	0x200006c8
 800987c:	20000320 	.word	0x20000320
 8009880:	20000de0 	.word	0x20000de0
 8009884:	20000e28 	.word	0x20000e28

08009888 <z_abort_timeout>:
{
 8009888:	b510      	push	{r4, lr}
	__asm__ volatile(
 800988a:	f04f 0210 	mov.w	r2, #16
 800988e:	f3ef 8411 	mrs	r4, BASEPRI
 8009892:	f382 8812 	msr	BASEPRI_MAX, r2
 8009896:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 800989a:	6803      	ldr	r3, [r0, #0]
 800989c:	b13b      	cbz	r3, 80098ae <z_abort_timeout+0x26>
			remove_timeout(to);
 800989e:	f7ff ff25 	bl	80096ec <remove_timeout>
			ret = 0;
 80098a2:	2000      	movs	r0, #0
	__asm__ volatile(
 80098a4:	f384 8811 	msr	BASEPRI, r4
 80098a8:	f3bf 8f6f 	isb	sy
}
 80098ac:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80098ae:	f06f 0015 	mvn.w	r0, #21
 80098b2:	f384 8811 	msr	BASEPRI, r4
 80098b6:	f3bf 8f6f 	isb	sy
}
 80098ba:	bd10      	pop	{r4, pc}

080098bc <z_set_timeout_expiry>:
{
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	4604      	mov	r4, r0
 80098c0:	460d      	mov	r5, r1
	__asm__ volatile(
 80098c2:	f04f 0310 	mov.w	r3, #16
 80098c6:	f3ef 8611 	mrs	r6, BASEPRI
 80098ca:	f383 8812 	msr	BASEPRI_MAX, r3
 80098ce:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 80098d2:	f7ff ff27 	bl	8009724 <next_timeout>
			      || (ticks <= next_to);
 80098d6:	42a0      	cmp	r0, r4
 80098d8:	db07      	blt.n	80098ea <z_set_timeout_expiry+0x2e>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 80098da:	2801      	cmp	r0, #1
 80098dc:	dd05      	ble.n	80098ea <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 80098de:	42a0      	cmp	r0, r4
 80098e0:	4629      	mov	r1, r5
 80098e2:	bfa8      	it	ge
 80098e4:	4620      	movge	r0, r4
 80098e6:	f7fe fa27 	bl	8007d38 <sys_clock_set_timeout>
	__asm__ volatile(
 80098ea:	f386 8811 	msr	BASEPRI, r6
 80098ee:	f3bf 8f6f 	isb	sy
}
 80098f2:	bd70      	pop	{r4, r5, r6, pc}

080098f4 <sys_clock_tick_get_32>:
	}
	return t;
}

uint32_t sys_clock_tick_get_32(void)
{
 80098f4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80098f6:	f04f 0310 	mov.w	r3, #16
 80098fa:	f3ef 8411 	mrs	r4, BASEPRI
 80098fe:	f383 8812 	msr	BASEPRI_MAX, r3
 8009902:	f3bf 8f6f 	isb	sy
		t = curr_tick + sys_clock_elapsed();
 8009906:	f7fe fa9f 	bl	8007e48 <sys_clock_elapsed>
 800990a:	4b04      	ldr	r3, [pc, #16]	; (800991c <sys_clock_tick_get_32+0x28>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4418      	add	r0, r3
	__asm__ volatile(
 8009910:	f384 8811 	msr	BASEPRI, r4
 8009914:	f3bf 8f6f 	isb	sy
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
#else
	return (uint32_t)curr_tick;
#endif
}
 8009918:	bd10      	pop	{r4, pc}
 800991a:	bf00      	nop
 800991c:	200006c8 	.word	0x200006c8

08009920 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
 8009920:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009922:	f04f 0310 	mov.w	r3, #16
 8009926:	f3ef 8411 	mrs	r4, BASEPRI
 800992a:	f383 8812 	msr	BASEPRI_MAX, r3
 800992e:	f3bf 8f6f 	isb	sy
		t = curr_tick + sys_clock_elapsed();
 8009932:	f7fe fa89 	bl	8007e48 <sys_clock_elapsed>
 8009936:	4a05      	ldr	r2, [pc, #20]	; (800994c <z_impl_k_uptime_ticks+0x2c>)
 8009938:	e9d2 3100 	ldrd	r3, r1, [r2]
 800993c:	18c0      	adds	r0, r0, r3
 800993e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8009942:	f384 8811 	msr	BASEPRI, r4
 8009946:	f3bf 8f6f 	isb	sy
	return sys_clock_tick_get();
}
 800994a:	bd10      	pop	{r4, pc}
 800994c:	200006c8 	.word	0x200006c8

08009950 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8009950:	b900      	cbnz	r0, 8009954 <z_impl_k_busy_wait+0x4>
 8009952:	4770      	bx	lr
{
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4604      	mov	r4, r0
 8009958:	f7fe fab4 	bl	8007ec4 <sys_clock_cycle_get_32>
 800995c:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800995e:	4807      	ldr	r0, [pc, #28]	; (800997c <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8009960:	4a07      	ldr	r2, [pc, #28]	; (8009980 <z_impl_k_busy_wait+0x30>)
 8009962:	fba4 0100 	umull	r0, r1, r4, r0
 8009966:	2300      	movs	r3, #0
 8009968:	f7f6 fc6a 	bl	8000240 <__aeabi_uldivmod>
 800996c:	4604      	mov	r4, r0
 800996e:	f7fe faa9 	bl	8007ec4 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8009972:	1b43      	subs	r3, r0, r5
 8009974:	42a3      	cmp	r3, r4
 8009976:	d3fa      	bcc.n	800996e <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8009978:	bd38      	pop	{r3, r4, r5, pc}
 800997a:	bf00      	nop
 800997c:	04c4b400 	.word	0x04c4b400
 8009980:	000f4240 	.word	0x000f4240

08009984 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	4604      	mov	r4, r0
	__asm__ volatile(
 8009988:	f04f 0310 	mov.w	r3, #16
 800998c:	f3ef 8511 	mrs	r5, BASEPRI
 8009990:	f383 8812 	msr	BASEPRI_MAX, r3
 8009994:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8009998:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 800999c:	3301      	adds	r3, #1
 800999e:	f142 0200 	adc.w	r2, r2, #0
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	f172 0300 	sbcs.w	r3, r2, #0
 80099a8:	462e      	mov	r6, r5
 80099aa:	d22b      	bcs.n	8009a04 <z_timer_expiration_handler+0x80>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 80099ac:	6b23      	ldr	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 80099ae:	6a22      	ldr	r2, [r4, #32]
	timer->status += 1U;
 80099b0:	3301      	adds	r3, #1
 80099b2:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
 80099b4:	b172      	cbz	r2, 80099d4 <z_timer_expiration_handler+0x50>
	__asm__ volatile(
 80099b6:	f385 8811 	msr	BASEPRI, r5
 80099ba:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 80099be:	6a23      	ldr	r3, [r4, #32]
 80099c0:	4620      	mov	r0, r4
 80099c2:	4798      	blx	r3
	__asm__ volatile(
 80099c4:	f04f 0310 	mov.w	r3, #16
 80099c8:	f3ef 8611 	mrs	r6, BASEPRI
 80099cc:	f383 8812 	msr	BASEPRI_MAX, r3
 80099d0:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80099d4:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80099d8:	42a5      	cmp	r5, r4
 80099da:	d00e      	beq.n	80099fa <z_timer_expiration_handler+0x76>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 80099dc:	b16d      	cbz	r5, 80099fa <z_timer_expiration_handler+0x76>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 80099de:	4628      	mov	r0, r5
 80099e0:	f7ff fb88 	bl	80090f4 <z_unpend_thread_no_timeout>
 80099e4:	2300      	movs	r3, #0
 80099e6:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
 80099e8:	f386 8811 	msr	BASEPRI, r6
 80099ec:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 80099f0:	4628      	mov	r0, r5
}
 80099f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
 80099f6:	f7ff baff 	b.w	8008ff8 <z_ready_thread>
 80099fa:	f386 8811 	msr	BASEPRI, r6
 80099fe:	f3bf 8f6f 	isb	sy
}
 8009a02:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8009a04:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8009a08:	4901      	ldr	r1, [pc, #4]	; (8009a10 <z_timer_expiration_handler+0x8c>)
 8009a0a:	f7ff febb 	bl	8009784 <z_add_timeout>
 8009a0e:	e7cd      	b.n	80099ac <z_timer_expiration_handler+0x28>
 8009a10:	08009985 	.word	0x08009985

08009a14 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8009a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8009a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a1c:	bf08      	it	eq
 8009a1e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8009a22:	e9dd 1508 	ldrd	r1, r5, [sp, #32]
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8009a26:	d039      	beq.n	8009a9c <z_impl_k_timer_start+0x88>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8009a28:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8009a2c:	bf08      	it	eq
 8009a2e:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
 8009a32:	4604      	mov	r4, r0
 8009a34:	4617      	mov	r7, r2
 8009a36:	461e      	mov	r6, r3
 8009a38:	4688      	mov	r8, r1
 8009a3a:	46a9      	mov	r9, r5
 8009a3c:	d00b      	beq.n	8009a56 <z_impl_k_timer_start+0x42>
 8009a3e:	ea55 0001 	orrs.w	r0, r5, r1
 8009a42:	d008      	beq.n	8009a56 <z_impl_k_timer_start+0x42>
	    Z_TICK_ABS(period.ticks) < 0) {
 8009a44:	f06f 0001 	mvn.w	r0, #1
 8009a48:	1a40      	subs	r0, r0, r1
 8009a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a4e:	eb60 0005 	sbc.w	r0, r0, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8009a52:	2800      	cmp	r0, #0
 8009a54:	db24      	blt.n	8009aa0 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8009a56:	f06f 0101 	mvn.w	r1, #1
 8009a5a:	1a89      	subs	r1, r1, r2
 8009a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009a60:	eb61 0103 	sbc.w	r1, r1, r3
 8009a64:	2900      	cmp	r1, #0
 8009a66:	db0f      	blt.n	8009a88 <z_impl_k_timer_start+0x74>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f7ff ff0d 	bl	8009888 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e9c4 930b 	strd	r9, r3, [r4, #44]	; 0x2c
	timer->period = period;
 8009a74:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8009a78:	463a      	mov	r2, r7
 8009a7a:	4633      	mov	r3, r6
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	490e      	ldr	r1, [pc, #56]	; (8009ab8 <z_impl_k_timer_start+0xa4>)
		     duration);
}
 8009a80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8009a84:	f7ff be7e 	b.w	8009784 <z_add_timeout>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8009a88:	2a01      	cmp	r2, #1
 8009a8a:	f173 0100 	sbcs.w	r1, r3, #0
 8009a8e:	bfbc      	itt	lt
 8009a90:	2201      	movlt	r2, #1
 8009a92:	2300      	movlt	r3, #0
 8009a94:	1e57      	subs	r7, r2, #1
 8009a96:	f143 36ff 	adc.w	r6, r3, #4294967295	; 0xffffffff
 8009a9a:	e7e5      	b.n	8009a68 <z_impl_k_timer_start+0x54>
}
 8009a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 8009aa0:	2902      	cmp	r1, #2
 8009aa2:	f175 0000 	sbcs.w	r0, r5, #0
 8009aa6:	bfbc      	itt	lt
 8009aa8:	2102      	movlt	r1, #2
 8009aaa:	2500      	movlt	r5, #0
 8009aac:	f111 38ff 	adds.w	r8, r1, #4294967295	; 0xffffffff
 8009ab0:	f145 39ff 	adc.w	r9, r5, #4294967295	; 0xffffffff
 8009ab4:	e7cf      	b.n	8009a56 <z_impl_k_timer_start+0x42>
 8009ab6:	bf00      	nop
 8009ab8:	08009985 	.word	0x08009985

08009abc <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8009abc:	b510      	push	{r4, lr}
 8009abe:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 8009ac0:	f7ff fee2 	bl	8009888 <z_abort_timeout>

	if (inactive) {
 8009ac4:	b9b0      	cbnz	r0, 8009af4 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 8009ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ac8:	b10b      	cbz	r3, 8009ace <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8009aca:	4620      	mov	r0, r4
 8009acc:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 8009ace:	f104 0018 	add.w	r0, r4, #24
 8009ad2:	f7ff fb3d 	bl	8009150 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 8009ad6:	b168      	cbz	r0, 8009af4 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 8009ad8:	f7ff fa8e 	bl	8008ff8 <z_ready_thread>
	__asm__ volatile(
 8009adc:	f04f 0310 	mov.w	r3, #16
 8009ae0:	f3ef 8011 	mrs	r0, BASEPRI
 8009ae4:	f383 8812 	msr	BASEPRI_MAX, r3
 8009ae8:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 8009aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 8009af0:	f7ff bbf4 	b.w	80092dc <z_reschedule_irqlock>
 8009af4:	bd10      	pop	{r4, pc}
 8009af6:	bf00      	nop

08009af8 <signal_poll_event.constprop.0>:
}
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
 8009af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	struct z_poller *poller = event->poller;
 8009afc:	6885      	ldr	r5, [r0, #8]
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
 8009afe:	b082      	sub	sp, #8
 8009b00:	4604      	mov	r4, r0
 8009b02:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
 8009b04:	b135      	cbz	r5, 8009b14 <signal_poll_event.constprop.0+0x1c>
		if (poller->mode == MODE_POLL) {
 8009b06:	786b      	ldrb	r3, [r5, #1]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d028      	beq.n	8009b5e <signal_poll_event.constprop.0+0x66>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d00d      	beq.n	8009b2c <signal_poll_event.constprop.0+0x34>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
 8009b10:	2300      	movs	r3, #0
 8009b12:	702b      	strb	r3, [r5, #0]
	event->state |= state;
 8009b14:	68e3      	ldr	r3, [r4, #12]
 8009b16:	f3c3 3145 	ubfx	r1, r3, #13, #6
 8009b1a:	430e      	orrs	r6, r1
	event->poller = NULL;
 8009b1c:	2000      	movs	r0, #0
	event->state |= state;
 8009b1e:	f366 3352 	bfi	r3, r6, #13, #6
 8009b22:	e9c4 0302 	strd	r0, r3, [r4, #8]
		}
	}

	set_event_ready(event, state);
	return retcode;
}
 8009b26:	b002      	add	sp, #8
 8009b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 8009b2c:	782b      	ldrb	r3, [r5, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d0f0      	beq.n	8009b14 <signal_poll_event.constprop.0+0x1c>
 8009b32:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8009b36:	2f00      	cmp	r7, #0
 8009b38:	d036      	beq.n	8009ba8 <signal_poll_event.constprop.0+0xb0>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 8009b3a:	f1a5 0114 	sub.w	r1, r5, #20
		twork->poll_result = 0;
 8009b3e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
 8009b42:	f105 0014 	add.w	r0, r5, #20
 8009b46:	9101      	str	r1, [sp, #4]
 8009b48:	f7ff fe9e 	bl	8009888 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
 8009b4c:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
 8009b4e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 8009b52:	4638      	mov	r0, r7
 8009b54:	f7ff f80e 	bl	8008b74 <k_work_submit_to_queue>
		poller->is_polling = false;
 8009b58:	f885 8000 	strb.w	r8, [r5]
		if (retcode < 0) {
 8009b5c:	e7da      	b.n	8009b14 <signal_poll_event.constprop.0+0x1c>
	if (!z_is_thread_pending(thread)) {
 8009b5e:	f815 3c53 	ldrb.w	r3, [r5, #-83]
 8009b62:	f013 0302 	ands.w	r3, r3, #2
 8009b66:	d0d4      	beq.n	8009b12 <signal_poll_event.constprop.0+0x1a>
	if (z_is_thread_timeout_expired(thread)) {
 8009b68:	e955 230e 	ldrd	r2, r3, [r5, #-56]	; 0x38
 8009b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b70:	bf08      	it	eq
 8009b72:	f112 0f02 	cmneq.w	r2, #2
 8009b76:	d019      	beq.n	8009bac <signal_poll_event.constprop.0+0xb4>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8009b78:	f1a5 0060 	sub.w	r0, r5, #96	; 0x60
	z_unpend_thread(thread);
 8009b7c:	9001      	str	r0, [sp, #4]
 8009b7e:	f7ff fb35 	bl	80091ec <z_unpend_thread>
	arch_thread_return_value_set(thread,
 8009b82:	2e08      	cmp	r6, #8
 8009b84:	bf0c      	ite	eq
 8009b86:	f06f 0303 	mvneq.w	r3, #3
 8009b8a:	2300      	movne	r3, #0
 8009b8c:	61eb      	str	r3, [r5, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8009b8e:	f815 3c53 	ldrb.w	r3, [r5, #-83]
 8009b92:	06db      	lsls	r3, r3, #27
 8009b94:	d1bc      	bne.n	8009b10 <signal_poll_event.constprop.0+0x18>
 8009b96:	f855 7c48 	ldr.w	r7, [r5, #-72]
 8009b9a:	9801      	ldr	r0, [sp, #4]
 8009b9c:	2f00      	cmp	r7, #0
 8009b9e:	d1b7      	bne.n	8009b10 <signal_poll_event.constprop.0+0x18>
	z_ready_thread(thread);
 8009ba0:	f7ff fa2a 	bl	8008ff8 <z_ready_thread>
		poller->is_polling = false;
 8009ba4:	702f      	strb	r7, [r5, #0]
		if (retcode < 0) {
 8009ba6:	e7b5      	b.n	8009b14 <signal_poll_event.constprop.0+0x1c>
		poller->is_polling = false;
 8009ba8:	702f      	strb	r7, [r5, #0]
		if (retcode < 0) {
 8009baa:	e7b3      	b.n	8009b14 <signal_poll_event.constprop.0+0x1c>
		poller->is_polling = false;
 8009bac:	2300      	movs	r3, #0
 8009bae:	702b      	strb	r3, [r5, #0]
		return -EAGAIN;
 8009bb0:	f06f 000a 	mvn.w	r0, #10
 8009bb4:	e7b7      	b.n	8009b26 <signal_poll_event.constprop.0+0x2e>
 8009bb6:	bf00      	nop

08009bb8 <register_events>:
{
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	ed2d 8b02 	vpush	{d8}
	for (int ii = 0; ii < num_events; ii++) {
 8009bc0:	1e0f      	subs	r7, r1, #0
{
 8009bc2:	b085      	sub	sp, #20
	for (int ii = 0; ii < num_events; ii++) {
 8009bc4:	f340 816f 	ble.w	8009ea6 <register_events+0x2ee>
 8009bc8:	469a      	mov	sl, r3
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8009bca:	f1a2 0360 	sub.w	r3, r2, #96	; 0x60
	for (int ii = 0; ii < num_events; ii++) {
 8009bce:	2500      	movs	r5, #0
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8009bd0:	ee08 3a10 	vmov	s16, r3
 8009bd4:	4690      	mov	r8, r2
 8009bd6:	4604      	mov	r4, r0
	int events_registered = 0;
 8009bd8:	46ab      	mov	fp, r5
	event->poller = NULL;
 8009bda:	46a9      	mov	r9, r5
 8009bdc:	f04f 0310 	mov.w	r3, #16
 8009be0:	f3ef 8611 	mrs	r6, BASEPRI
 8009be4:	f383 8812 	msr	BASEPRI_MAX, r3
 8009be8:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 8009bec:	7b63      	ldrb	r3, [r4, #13]
 8009bee:	f003 031f 	and.w	r3, r3, #31
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	2b07      	cmp	r3, #7
 8009bf6:	d809      	bhi.n	8009c0c <register_events+0x54>
 8009bf8:	e8df f003 	tbb	[pc, r3]
 8009bfc:	23080434 	.word	0x23080434
 8009c00:	1d080808 	.word	0x1d080808
		if (k_sem_count_get(event->sem) > 0U) {
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d131      	bne.n	8009c70 <register_events+0xb8>
		} else if (!just_check && poller->is_polling) {
 8009c0c:	f1ba 0f00 	cmp.w	sl, #0
 8009c10:	d102      	bne.n	8009c18 <register_events+0x60>
 8009c12:	f898 3000 	ldrb.w	r3, [r8]
 8009c16:	bb6b      	cbnz	r3, 8009c74 <register_events+0xbc>
	__asm__ volatile(
 8009c18:	f386 8811 	msr	BASEPRI, r6
 8009c1c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 8009c20:	3501      	adds	r5, #1
 8009c22:	42af      	cmp	r7, r5
 8009c24:	f104 0414 	add.w	r4, r4, #20
 8009c28:	d1d8      	bne.n	8009bdc <register_events+0x24>
}
 8009c2a:	4658      	mov	r0, fp
 8009c2c:	b005      	add	sp, #20
 8009c2e:	ecbd 8b02 	vpop	{d8}
 8009c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (event->msgq->used_msgs > 0) {
 8009c36:	6923      	ldr	r3, [r4, #16]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0e6      	beq.n	8009c0c <register_events+0x54>
 8009c3e:	2210      	movs	r2, #16
 8009c40:	e004      	b.n	8009c4c <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
 8009c42:	6923      	ldr	r3, [r4, #16]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d0e0      	beq.n	8009c0c <register_events+0x54>
 8009c4a:	2204      	movs	r2, #4
	event->state |= state;
 8009c4c:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
 8009c4e:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
 8009c52:	f3c3 3145 	ubfx	r1, r3, #13, #6
 8009c56:	430a      	orrs	r2, r1
 8009c58:	f362 3352 	bfi	r3, r2, #13, #6
 8009c5c:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
 8009c5e:	f888 9000 	strb.w	r9, [r8]
 8009c62:	e7d9      	b.n	8009c18 <register_events+0x60>
		if (event->signal->signaled != 0U) {
 8009c64:	6923      	ldr	r3, [r4, #16]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d0cf      	beq.n	8009c0c <register_events+0x54>
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	e7ed      	b.n	8009c4c <register_events+0x94>
 8009c70:	2202      	movs	r2, #2
 8009c72:	e7eb      	b.n	8009c4c <register_events+0x94>
	switch (event->type) {
 8009c74:	7b63      	ldrb	r3, [r4, #13]
 8009c76:	f003 031f 	and.w	r3, r3, #31
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	2b07      	cmp	r3, #7
 8009c7e:	d80f      	bhi.n	8009ca0 <register_events+0xe8>
 8009c80:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009c84:	00950057 	.word	0x00950057
 8009c88:	00d6000e 	.word	0x00d6000e
 8009c8c:	000e000e 	.word	0x000e000e
 8009c90:	0013000e 	.word	0x0013000e
	sys_dnode_t *const tail = list->tail;
 8009c94:	6953      	ldr	r3, [r2, #20]
	node->next = list;
 8009c96:	9900      	ldr	r1, [sp, #0]
	node->prev = tail;
 8009c98:	e9c4 1300 	strd	r1, r3, [r4]
	tail->next = node;
 8009c9c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009c9e:	6154      	str	r4, [r2, #20]
	event->poller = poller;
 8009ca0:	f8c4 8008 	str.w	r8, [r4, #8]
			events_registered += 1;
 8009ca4:	f10b 0b01 	add.w	fp, fp, #1
 8009ca8:	e7b6      	b.n	8009c18 <register_events+0x60>
		add_event(&event->msgq->poll_events, event, poller);
 8009caa:	6922      	ldr	r2, [r4, #16]
 8009cac:	f102 0328 	add.w	r3, r2, #40	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8009cb0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	4288      	cmp	r0, r1
 8009cb8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009cba:	f000 8104 	beq.w	8009ec6 <register_events+0x30e>
	if ((pending == NULL) ||
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f000 8101 	beq.w	8009ec6 <register_events+0x30e>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009cc4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8009cc6:	b100      	cbz	r0, 8009cca <register_events+0x112>
 8009cc8:	3860      	subs	r0, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009cca:	ee18 1a10 	vmov	r1, s16
 8009cce:	9201      	str	r2, [sp, #4]
 8009cd0:	f7ff f934 	bl	8008f3c <z_sched_prio_cmp>
	if ((pending == NULL) ||
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	9a01      	ldr	r2, [sp, #4]
 8009cd8:	f300 80f4 	bgt.w	8009ec4 <register_events+0x30c>
	return list->head == list;
 8009cdc:	6a93      	ldr	r3, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009cde:	9900      	ldr	r1, [sp, #0]
 8009ce0:	4299      	cmp	r1, r3
 8009ce2:	f000 80fc 	beq.w	8009ede <register_events+0x326>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f000 80f9 	beq.w	8009ede <register_events+0x326>
 8009cec:	e9cd 4602 	strd	r4, r6, [sp, #8]
 8009cf0:	9501      	str	r5, [sp, #4]
 8009cf2:	ee18 4a10 	vmov	r4, s16
 8009cf6:	4615      	mov	r5, r2
 8009cf8:	461e      	mov	r6, r3
 8009cfa:	e003      	b.n	8009d04 <register_events+0x14c>
	return (node == list->tail) ? NULL : node->next;
 8009cfc:	6836      	ldr	r6, [r6, #0]
 8009cfe:	2e00      	cmp	r6, #0
 8009d00:	f000 810c 	beq.w	8009f1c <register_events+0x364>
		if (z_sched_prio_cmp(poller_thread(poller),
 8009d04:	68b1      	ldr	r1, [r6, #8]
 8009d06:	4620      	mov	r0, r4
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8009d08:	b101      	cbz	r1, 8009d0c <register_events+0x154>
 8009d0a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 8009d0c:	f7ff f916 	bl	8008f3c <z_sched_prio_cmp>
 8009d10:	2800      	cmp	r0, #0
			sys_dlist_insert(&pending->_node, &event->_node);
 8009d12:	4631      	mov	r1, r6
		if (z_sched_prio_cmp(poller_thread(poller),
 8009d14:	f300 80eb 	bgt.w	8009eee <register_events+0x336>
 8009d18:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8009d1a:	42b0      	cmp	r0, r6
 8009d1c:	d1ee      	bne.n	8009cfc <register_events+0x144>
 8009d1e:	462a      	mov	r2, r5
 8009d20:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 8009d24:	9e03      	ldr	r6, [sp, #12]
	node->next = list;
 8009d26:	9b00      	ldr	r3, [sp, #0]
	node->prev = tail;
 8009d28:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
 8009d2c:	600c      	str	r4, [r1, #0]
	list->tail = node;
 8009d2e:	62d4      	str	r4, [r2, #44]	; 0x2c
}
 8009d30:	e7b6      	b.n	8009ca0 <register_events+0xe8>
		add_event(&event->signal->poll_events, event, poller);
 8009d32:	6923      	ldr	r3, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8009d34:	e9d3 1200 	ldrd	r1, r2, [r3]
 8009d38:	428b      	cmp	r3, r1
 8009d3a:	f000 80cb 	beq.w	8009ed4 <register_events+0x31c>
	if ((pending == NULL) ||
 8009d3e:	2a00      	cmp	r2, #0
 8009d40:	f000 80c8 	beq.w	8009ed4 <register_events+0x31c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009d44:	6890      	ldr	r0, [r2, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8009d46:	b100      	cbz	r0, 8009d4a <register_events+0x192>
 8009d48:	3860      	subs	r0, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009d4a:	ee18 1a10 	vmov	r1, s16
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	f7ff f8f4 	bl	8008f3c <z_sched_prio_cmp>
	if ((pending == NULL) ||
 8009d54:	2800      	cmp	r0, #0
 8009d56:	9b00      	ldr	r3, [sp, #0]
 8009d58:	f300 80bb 	bgt.w	8009ed2 <register_events+0x31a>
	return list->head == list;
 8009d5c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	f000 80c1 	beq.w	8009ee6 <register_events+0x32e>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009d64:	2a00      	cmp	r2, #0
 8009d66:	f000 80be 	beq.w	8009ee6 <register_events+0x32e>
 8009d6a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8009d6e:	9500      	str	r5, [sp, #0]
 8009d70:	ee18 4a10 	vmov	r4, s16
 8009d74:	461d      	mov	r5, r3
 8009d76:	4616      	mov	r6, r2
 8009d78:	e003      	b.n	8009d82 <register_events+0x1ca>
	return (node == list->tail) ? NULL : node->next;
 8009d7a:	6836      	ldr	r6, [r6, #0]
 8009d7c:	2e00      	cmp	r6, #0
 8009d7e:	f000 80d9 	beq.w	8009f34 <register_events+0x37c>
		if (z_sched_prio_cmp(poller_thread(poller),
 8009d82:	68b1      	ldr	r1, [r6, #8]
 8009d84:	4620      	mov	r0, r4
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8009d86:	b101      	cbz	r1, 8009d8a <register_events+0x1d2>
 8009d88:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 8009d8a:	f7ff f8d7 	bl	8008f3c <z_sched_prio_cmp>
 8009d8e:	2800      	cmp	r0, #0
			sys_dlist_insert(&pending->_node, &event->_node);
 8009d90:	4631      	mov	r1, r6
		if (z_sched_prio_cmp(poller_thread(poller),
 8009d92:	f300 80ba 	bgt.w	8009f0a <register_events+0x352>
 8009d96:	6868      	ldr	r0, [r5, #4]
 8009d98:	42b0      	cmp	r0, r6
 8009d9a:	d1ee      	bne.n	8009d7a <register_events+0x1c2>
 8009d9c:	462b      	mov	r3, r5
 8009d9e:	e9dd 5400 	ldrd	r5, r4, [sp]
 8009da2:	9e02      	ldr	r6, [sp, #8]
	node->prev = tail;
 8009da4:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
 8009da8:	600c      	str	r4, [r1, #0]
	list->tail = node;
 8009daa:	605c      	str	r4, [r3, #4]
}
 8009dac:	e778      	b.n	8009ca0 <register_events+0xe8>
		add_event(&event->sem->poll_events, event, poller);
 8009dae:	6922      	ldr	r2, [r4, #16]
 8009db0:	f102 0310 	add.w	r3, r2, #16
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8009db4:	6911      	ldr	r1, [r2, #16]
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	4618      	mov	r0, r3
 8009dba:	4288      	cmp	r0, r1
 8009dbc:	6953      	ldr	r3, [r2, #20]
 8009dbe:	f43f af6a 	beq.w	8009c96 <register_events+0xde>
	if ((pending == NULL) ||
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f43f af67 	beq.w	8009c96 <register_events+0xde>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009dc8:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8009dca:	b100      	cbz	r0, 8009dce <register_events+0x216>
 8009dcc:	3860      	subs	r0, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009dce:	ee18 1a10 	vmov	r1, s16
 8009dd2:	9201      	str	r2, [sp, #4]
 8009dd4:	f7ff f8b2 	bl	8008f3c <z_sched_prio_cmp>
	if ((pending == NULL) ||
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	9a01      	ldr	r2, [sp, #4]
 8009ddc:	f73f af5a 	bgt.w	8009c94 <register_events+0xdc>
	return list->head == list;
 8009de0:	6913      	ldr	r3, [r2, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009de2:	9900      	ldr	r1, [sp, #0]
 8009de4:	4299      	cmp	r1, r3
 8009de6:	d07c      	beq.n	8009ee2 <register_events+0x32a>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d07a      	beq.n	8009ee2 <register_events+0x32a>
 8009dec:	e9cd 4602 	strd	r4, r6, [sp, #8]
 8009df0:	9501      	str	r5, [sp, #4]
 8009df2:	ee18 4a10 	vmov	r4, s16
 8009df6:	4615      	mov	r5, r2
 8009df8:	461e      	mov	r6, r3
 8009dfa:	e003      	b.n	8009e04 <register_events+0x24c>
	return (node == list->tail) ? NULL : node->next;
 8009dfc:	6836      	ldr	r6, [r6, #0]
 8009dfe:	2e00      	cmp	r6, #0
 8009e00:	f000 8092 	beq.w	8009f28 <register_events+0x370>
		if (z_sched_prio_cmp(poller_thread(poller),
 8009e04:	68b1      	ldr	r1, [r6, #8]
 8009e06:	4620      	mov	r0, r4
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8009e08:	b101      	cbz	r1, 8009e0c <register_events+0x254>
 8009e0a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 8009e0c:	f7ff f896 	bl	8008f3c <z_sched_prio_cmp>
 8009e10:	2800      	cmp	r0, #0
			sys_dlist_insert(&pending->_node, &event->_node);
 8009e12:	4631      	mov	r1, r6
		if (z_sched_prio_cmp(poller_thread(poller),
 8009e14:	dc75      	bgt.n	8009f02 <register_events+0x34a>
 8009e16:	6968      	ldr	r0, [r5, #20]
 8009e18:	42b0      	cmp	r0, r6
 8009e1a:	d1ef      	bne.n	8009dfc <register_events+0x244>
 8009e1c:	462a      	mov	r2, r5
 8009e1e:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 8009e22:	9e03      	ldr	r6, [sp, #12]
	node->next = list;
 8009e24:	9b00      	ldr	r3, [sp, #0]
	node->prev = tail;
 8009e26:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
 8009e2a:	600c      	str	r4, [r1, #0]
	list->tail = node;
 8009e2c:	6154      	str	r4, [r2, #20]
}
 8009e2e:	e737      	b.n	8009ca0 <register_events+0xe8>
		add_event(&event->queue->poll_events, event, poller);
 8009e30:	6922      	ldr	r2, [r4, #16]
 8009e32:	f102 0314 	add.w	r3, r2, #20
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8009e36:	6951      	ldr	r1, [r2, #20]
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	4288      	cmp	r0, r1
 8009e3e:	6993      	ldr	r3, [r2, #24]
 8009e40:	d03a      	beq.n	8009eb8 <register_events+0x300>
	if ((pending == NULL) ||
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d038      	beq.n	8009eb8 <register_events+0x300>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009e46:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8009e48:	b100      	cbz	r0, 8009e4c <register_events+0x294>
 8009e4a:	3860      	subs	r0, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009e4c:	ee18 1a10 	vmov	r1, s16
 8009e50:	9201      	str	r2, [sp, #4]
 8009e52:	f7ff f873 	bl	8008f3c <z_sched_prio_cmp>
	if ((pending == NULL) ||
 8009e56:	2800      	cmp	r0, #0
 8009e58:	9a01      	ldr	r2, [sp, #4]
 8009e5a:	dc2c      	bgt.n	8009eb6 <register_events+0x2fe>
	return list->head == list;
 8009e5c:	6953      	ldr	r3, [r2, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009e5e:	9900      	ldr	r1, [sp, #0]
 8009e60:	4299      	cmp	r1, r3
 8009e62:	d042      	beq.n	8009eea <register_events+0x332>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d040      	beq.n	8009eea <register_events+0x332>
 8009e68:	e9cd 4602 	strd	r4, r6, [sp, #8]
 8009e6c:	9501      	str	r5, [sp, #4]
 8009e6e:	ee18 4a10 	vmov	r4, s16
 8009e72:	4615      	mov	r5, r2
 8009e74:	461e      	mov	r6, r3
 8009e76:	e001      	b.n	8009e7c <register_events+0x2c4>
	return (node == list->tail) ? NULL : node->next;
 8009e78:	6836      	ldr	r6, [r6, #0]
 8009e7a:	b156      	cbz	r6, 8009e92 <register_events+0x2da>
		if (z_sched_prio_cmp(poller_thread(poller),
 8009e7c:	68b1      	ldr	r1, [r6, #8]
 8009e7e:	4620      	mov	r0, r4
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8009e80:	b101      	cbz	r1, 8009e84 <register_events+0x2cc>
 8009e82:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 8009e84:	f7ff f85a 	bl	8008f3c <z_sched_prio_cmp>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	dc30      	bgt.n	8009eee <register_events+0x336>
 8009e8c:	69a9      	ldr	r1, [r5, #24]
 8009e8e:	428e      	cmp	r6, r1
 8009e90:	d1f2      	bne.n	8009e78 <register_events+0x2c0>
 8009e92:	462a      	mov	r2, r5
 8009e94:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 8009e98:	9e03      	ldr	r6, [sp, #12]
	node->next = list;
 8009e9a:	9b00      	ldr	r3, [sp, #0]
	node->prev = tail;
 8009e9c:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
 8009ea0:	600c      	str	r4, [r1, #0]
	list->tail = node;
 8009ea2:	6194      	str	r4, [r2, #24]
}
 8009ea4:	e6fc      	b.n	8009ca0 <register_events+0xe8>
	int events_registered = 0;
 8009ea6:	f04f 0b00 	mov.w	fp, #0
}
 8009eaa:	4658      	mov	r0, fp
 8009eac:	b005      	add	sp, #20
 8009eae:	ecbd 8b02 	vpop	{d8}
 8009eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sys_dnode_t *const tail = list->tail;
 8009eb6:	6993      	ldr	r3, [r2, #24]
	node->next = list;
 8009eb8:	9900      	ldr	r1, [sp, #0]
	node->prev = tail;
 8009eba:	e9c4 1300 	strd	r1, r3, [r4]
	tail->next = node;
 8009ebe:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009ec0:	6194      	str	r4, [r2, #24]
		return;
 8009ec2:	e6ed      	b.n	8009ca0 <register_events+0xe8>
	sys_dnode_t *const tail = list->tail;
 8009ec4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
 8009ec6:	9900      	ldr	r1, [sp, #0]
	node->prev = tail;
 8009ec8:	e9c4 1300 	strd	r1, r3, [r4]
	tail->next = node;
 8009ecc:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009ece:	62d4      	str	r4, [r2, #44]	; 0x2c
 8009ed0:	e6e6      	b.n	8009ca0 <register_events+0xe8>
	sys_dnode_t *const tail = list->tail;
 8009ed2:	685a      	ldr	r2, [r3, #4]
	node->prev = tail;
 8009ed4:	e9c4 3200 	strd	r3, r2, [r4]
	tail->next = node;
 8009ed8:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8009eda:	605c      	str	r4, [r3, #4]
 8009edc:	e6e0      	b.n	8009ca0 <register_events+0xe8>
	sys_dnode_t *const tail = list->tail;
 8009ede:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009ee0:	e721      	b.n	8009d26 <register_events+0x16e>
 8009ee2:	6951      	ldr	r1, [r2, #20]
 8009ee4:	e79e      	b.n	8009e24 <register_events+0x26c>
 8009ee6:	6859      	ldr	r1, [r3, #4]
 8009ee8:	e75c      	b.n	8009da4 <register_events+0x1ec>
 8009eea:	6991      	ldr	r1, [r2, #24]
 8009eec:	e7d5      	b.n	8009e9a <register_events+0x2e2>
	sys_dnode_t *const prev = successor->prev;
 8009eee:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 8009ef2:	4633      	mov	r3, r6
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	9e03      	ldr	r6, [sp, #12]
	node->next = successor;
 8009ef8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8009efc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8009efe:	605c      	str	r4, [r3, #4]
			return;
 8009f00:	e6ce      	b.n	8009ca0 <register_events+0xe8>
	sys_dnode_t *const prev = successor->prev;
 8009f02:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 8009f06:	4633      	mov	r3, r6
 8009f08:	e7f4      	b.n	8009ef4 <register_events+0x33c>
 8009f0a:	e9dd 5400 	ldrd	r5, r4, [sp]
 8009f0e:	684b      	ldr	r3, [r1, #4]
 8009f10:	9e02      	ldr	r6, [sp, #8]
	node->next = successor;
 8009f12:	e9c4 1300 	strd	r1, r3, [r4]
	prev->next = node;
 8009f16:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8009f18:	604c      	str	r4, [r1, #4]
 8009f1a:	e6c1      	b.n	8009ca0 <register_events+0xe8>
 8009f1c:	462a      	mov	r2, r5
 8009f1e:	9e03      	ldr	r6, [sp, #12]
 8009f20:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 8009f24:	4601      	mov	r1, r0
 8009f26:	e6fe      	b.n	8009d26 <register_events+0x16e>
 8009f28:	462a      	mov	r2, r5
 8009f2a:	9e03      	ldr	r6, [sp, #12]
 8009f2c:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 8009f30:	4601      	mov	r1, r0
 8009f32:	e777      	b.n	8009e24 <register_events+0x26c>
 8009f34:	462b      	mov	r3, r5
 8009f36:	9e02      	ldr	r6, [sp, #8]
 8009f38:	e9dd 5400 	ldrd	r5, r4, [sp]
 8009f3c:	4601      	mov	r1, r0
 8009f3e:	e731      	b.n	8009da4 <register_events+0x1ec>

08009f40 <z_impl_k_poll>:
{
 8009f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f44:	4698      	mov	r8, r3
	events_registered = register_events(events, num_events, poller,
 8009f46:	ea52 0308 	orrs.w	r3, r2, r8
	struct z_poller *poller = &_current->poller;
 8009f4a:	4b52      	ldr	r3, [pc, #328]	; (800a094 <z_impl_k_poll+0x154>)
 8009f4c:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
 8009f4e:	f04f 0501 	mov.w	r5, #1
{
 8009f52:	b082      	sub	sp, #8
 8009f54:	4692      	mov	sl, r2
	poller->is_polling = true;
 8009f56:	f887 5060 	strb.w	r5, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
 8009f5a:	f887 5061 	strb.w	r5, [r7, #97]	; 0x61
	events_registered = register_events(events, num_events, poller,
 8009f5e:	bf0c      	ite	eq
 8009f60:	462b      	moveq	r3, r5
 8009f62:	2300      	movne	r3, #0
 8009f64:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
 8009f68:	4681      	mov	r9, r0
	events_registered = register_events(events, num_events, poller,
 8009f6a:	f7ff fe25 	bl	8009bb8 <register_events>
 8009f6e:	4606      	mov	r6, r0
	__asm__ volatile(
 8009f70:	f04f 0310 	mov.w	r3, #16
 8009f74:	f3ef 8111 	mrs	r1, BASEPRI
 8009f78:	f383 8812 	msr	BASEPRI_MAX, r3
 8009f7c:	f3bf 8f6f 	isb	sy
	if (!poller->is_polling) {
 8009f80:	f897 0060 	ldrb.w	r0, [r7, #96]	; 0x60
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d047      	beq.n	800a018 <z_impl_k_poll+0xd8>
	poller->is_polling = false;
 8009f88:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8009f8a:	ea5a 0308 	orrs.w	r3, sl, r8
	poller->is_polling = false;
 8009f8e:	f887 4060 	strb.w	r4, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8009f92:	d077      	beq.n	800a084 <z_impl_k_poll+0x144>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8009f94:	e9cd a800 	strd	sl, r8, [sp]
 8009f98:	4a3f      	ldr	r2, [pc, #252]	; (800a098 <z_impl_k_poll+0x158>)
 8009f9a:	4840      	ldr	r0, [pc, #256]	; (800a09c <z_impl_k_poll+0x15c>)
 8009f9c:	f7ff f8c4 	bl	8009128 <z_pend_curr>
 8009fa0:	f04f 0310 	mov.w	r3, #16
 8009fa4:	f3ef 8811 	mrs	r8, BASEPRI
 8009fa8:	f383 8812 	msr	BASEPRI_MAX, r3
 8009fac:	f3bf 8f6f 	isb	sy
	k.key = arch_irq_lock();
 8009fb0:	4647      	mov	r7, r8
	while (num_events--) {
 8009fb2:	b356      	cbz	r6, 800a00a <z_impl_k_poll+0xca>
 8009fb4:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8009fb8:	4632      	mov	r2, r6
 8009fba:	eb09 0181 	add.w	r1, r9, r1, lsl #2
	__asm__ volatile(
 8009fbe:	468c      	mov	ip, r1
 8009fc0:	3914      	subs	r1, #20
	event->poller = NULL;
 8009fc2:	f84c 4c0c 	str.w	r4, [ip, #-12]
	switch (event->type) {
 8009fc6:	7b4b      	ldrb	r3, [r1, #13]
 8009fc8:	f003 031f 	and.w	r3, r3, #31
 8009fcc:	2b08      	cmp	r3, #8
 8009fce:	fa05 fe03 	lsl.w	lr, r5, r3
 8009fd2:	d80b      	bhi.n	8009fec <z_impl_k_poll+0xac>
 8009fd4:	f41e 7f8b 	tst.w	lr, #278	; 0x116
 8009fd8:	d008      	beq.n	8009fec <z_impl_k_poll+0xac>
	return node->next != NULL;
 8009fda:	f85c 6c14 	ldr.w	r6, [ip, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 8009fde:	b12e      	cbz	r6, 8009fec <z_impl_k_poll+0xac>
	sys_dnode_t *const prev = node->prev;
 8009fe0:	f85c 3c10 	ldr.w	r3, [ip, #-16]
	prev->next = next;
 8009fe4:	601e      	str	r6, [r3, #0]
	next->prev = prev;
 8009fe6:	6073      	str	r3, [r6, #4]
	node->prev = NULL;
 8009fe8:	e94c 4405 	strd	r4, r4, [ip, #-20]
 8009fec:	f387 8811 	msr	BASEPRI, r7
 8009ff0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8009ff4:	f04f 0610 	mov.w	r6, #16
 8009ff8:	f3ef 8311 	mrs	r3, BASEPRI
 8009ffc:	f386 8812 	msr	BASEPRI_MAX, r6
 800a000:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800a004:	3a01      	subs	r2, #1
 800a006:	461f      	mov	r7, r3
 800a008:	d1d9      	bne.n	8009fbe <z_impl_k_poll+0x7e>
	__asm__ volatile(
 800a00a:	f388 8811 	msr	BASEPRI, r8
 800a00e:	f3bf 8f6f 	isb	sy
}
 800a012:	b002      	add	sp, #8
 800a014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (num_events--) {
 800a018:	b366      	cbz	r6, 800a074 <z_impl_k_poll+0x134>
 800a01a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 800a01e:	460c      	mov	r4, r1
 800a020:	4632      	mov	r2, r6
 800a022:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 800a026:	464f      	mov	r7, r9
 800a028:	f1a9 0914 	sub.w	r9, r9, #20
	event->poller = NULL;
 800a02c:	f847 0c0c 	str.w	r0, [r7, #-12]
	switch (event->type) {
 800a030:	f899 300d 	ldrb.w	r3, [r9, #13]
 800a034:	f003 031f 	and.w	r3, r3, #31
 800a038:	2b08      	cmp	r3, #8
 800a03a:	fa05 f603 	lsl.w	r6, r5, r3
 800a03e:	d80b      	bhi.n	800a058 <z_impl_k_poll+0x118>
 800a040:	f416 7f8b 	tst.w	r6, #278	; 0x116
 800a044:	d008      	beq.n	800a058 <z_impl_k_poll+0x118>
	return node->next != NULL;
 800a046:	f857 3c14 	ldr.w	r3, [r7, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800a04a:	b12b      	cbz	r3, 800a058 <z_impl_k_poll+0x118>
	sys_dnode_t *const prev = node->prev;
 800a04c:	f857 6c10 	ldr.w	r6, [r7, #-16]
	prev->next = next;
 800a050:	6033      	str	r3, [r6, #0]
	next->prev = prev;
 800a052:	605e      	str	r6, [r3, #4]
	node->prev = NULL;
 800a054:	e947 0005 	strd	r0, r0, [r7, #-20]
 800a058:	f384 8811 	msr	BASEPRI, r4
 800a05c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800a060:	f04f 0310 	mov.w	r3, #16
 800a064:	f3ef 8411 	mrs	r4, BASEPRI
 800a068:	f383 8812 	msr	BASEPRI_MAX, r3
 800a06c:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800a070:	3a01      	subs	r2, #1
 800a072:	d1d8      	bne.n	800a026 <z_impl_k_poll+0xe6>
	__asm__ volatile(
 800a074:	f381 8811 	msr	BASEPRI, r1
 800a078:	f3bf 8f6f 	isb	sy
		return 0;
 800a07c:	2000      	movs	r0, #0
}
 800a07e:	b002      	add	sp, #8
 800a080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a084:	f381 8811 	msr	BASEPRI, r1
 800a088:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 800a08c:	f06f 000a 	mvn.w	r0, #10
 800a090:	e7bf      	b.n	800a012 <z_impl_k_poll+0xd2>
 800a092:	bf00      	nop
 800a094:	20000de0 	.word	0x20000de0
 800a098:	20000328 	.word	0x20000328
 800a09c:	20000e2c 	.word	0x20000e2c

0800a0a0 <z_handle_obj_poll_events>:
	return list->head == list;
 800a0a0:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800a0a2:	4298      	cmp	r0, r3
 800a0a4:	d00c      	beq.n	800a0c0 <z_handle_obj_poll_events+0x20>
{
 800a0a6:	b410      	push	{r4}
	sys_dnode_t *const next = node->next;
 800a0a8:	e9d3 0400 	ldrd	r0, r4, [r3]
	node->next = NULL;
 800a0ac:	2200      	movs	r2, #0
	prev->next = next;
 800a0ae:	6020      	str	r0, [r4, #0]
	next->prev = prev;
 800a0b0:	6044      	str	r4, [r0, #4]
	node->prev = NULL;
 800a0b2:	e9c3 2200 	strd	r2, r2, [r3]
}
 800a0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void) signal_poll_event(poll_event, state);
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7ff bd1c 	b.w	8009af8 <signal_poll_event.constprop.0>
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop

0800a0c4 <z_impl_k_poll_signal_raise>:
{
 800a0c4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800a0c6:	f04f 0310 	mov.w	r3, #16
 800a0ca:	f3ef 8511 	mrs	r5, BASEPRI
 800a0ce:	f383 8812 	msr	BASEPRI_MAX, r3
 800a0d2:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800a0d6:	6803      	ldr	r3, [r0, #0]
	sig->signaled = 1U;
 800a0d8:	2201      	movs	r2, #1
	if (!sys_dlist_is_empty(list)) {
 800a0da:	4298      	cmp	r0, r3
 800a0dc:	e9c0 2102 	strd	r2, r1, [r0, #8]
 800a0e0:	d011      	beq.n	800a106 <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const next = node->next;
 800a0e2:	e9d3 0400 	ldrd	r0, r4, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800a0e6:	4611      	mov	r1, r2
	node->next = NULL;
 800a0e8:	2200      	movs	r2, #0
	prev->next = next;
 800a0ea:	6020      	str	r0, [r4, #0]
	next->prev = prev;
 800a0ec:	6044      	str	r4, [r0, #4]
	node->prev = NULL;
 800a0ee:	e9c3 2200 	strd	r2, r2, [r3]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff fd00 	bl	8009af8 <signal_poll_event.constprop.0>
	z_reschedule(&lock, key);
 800a0f8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800a0fa:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 800a0fc:	4805      	ldr	r0, [pc, #20]	; (800a114 <z_impl_k_poll_signal_raise+0x50>)
 800a0fe:	f7ff f8db 	bl	80092b8 <z_reschedule>
}
 800a102:	4620      	mov	r0, r4
 800a104:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800a106:	f385 8811 	msr	BASEPRI, r5
 800a10a:	f3bf 8f6f 	isb	sy
		return 0;
 800a10e:	2400      	movs	r4, #0
}
 800a110:	4620      	mov	r0, r4
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20000e2c 	.word	0x20000e2c

0800a118 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 800a118:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 800a11a:	4770      	bx	lr

0800a11c <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop

0800a120 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800a120:	b510      	push	{r4, lr}
 800a122:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800a124:	2400      	movs	r4, #0
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800a126:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
 800a128:	4a07      	ldr	r2, [pc, #28]	; (800a148 <k_sys_work_q_init+0x28>)
	k_work_queue_start(&k_sys_work_q,
 800a12a:	9300      	str	r3, [sp, #0]
	struct k_work_queue_config cfg = {
 800a12c:	9202      	str	r2, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
 800a12e:	4907      	ldr	r1, [pc, #28]	; (800a14c <k_sys_work_q_init+0x2c>)
 800a130:	4807      	ldr	r0, [pc, #28]	; (800a150 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 800a132:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 800a136:	4623      	mov	r3, r4
 800a138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a13c:	f7f6 fba8 	bl	8000890 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800a140:	4620      	mov	r0, r4
 800a142:	b004      	add	sp, #16
 800a144:	bd10      	pop	{r4, pc}
 800a146:	bf00      	nop
 800a148:	0800c490 	.word	0x0800c490
 800a14c:	20002d80 	.word	0x20002d80
 800a150:	200006d0 	.word	0x200006d0

0800a154 <malloc>:
 800a154:	4b02      	ldr	r3, [pc, #8]	; (800a160 <malloc+0xc>)
 800a156:	4601      	mov	r1, r0
 800a158:	6818      	ldr	r0, [r3, #0]
 800a15a:	f000 b84f 	b.w	800a1fc <_malloc_r>
 800a15e:	bf00      	nop
 800a160:	20000330 	.word	0x20000330

0800a164 <_free_r>:
 800a164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a166:	2900      	cmp	r1, #0
 800a168:	d044      	beq.n	800a1f4 <_free_r+0x90>
 800a16a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a16e:	9001      	str	r0, [sp, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	f1a1 0404 	sub.w	r4, r1, #4
 800a176:	bfb8      	it	lt
 800a178:	18e4      	addlt	r4, r4, r3
 800a17a:	f000 f9c7 	bl	800a50c <__malloc_lock>
 800a17e:	4a1e      	ldr	r2, [pc, #120]	; (800a1f8 <_free_r+0x94>)
 800a180:	9801      	ldr	r0, [sp, #4]
 800a182:	6813      	ldr	r3, [r2, #0]
 800a184:	b933      	cbnz	r3, 800a194 <_free_r+0x30>
 800a186:	6063      	str	r3, [r4, #4]
 800a188:	6014      	str	r4, [r2, #0]
 800a18a:	b003      	add	sp, #12
 800a18c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a190:	f000 b9c2 	b.w	800a518 <__malloc_unlock>
 800a194:	42a3      	cmp	r3, r4
 800a196:	d908      	bls.n	800a1aa <_free_r+0x46>
 800a198:	6825      	ldr	r5, [r4, #0]
 800a19a:	1961      	adds	r1, r4, r5
 800a19c:	428b      	cmp	r3, r1
 800a19e:	bf01      	itttt	eq
 800a1a0:	6819      	ldreq	r1, [r3, #0]
 800a1a2:	685b      	ldreq	r3, [r3, #4]
 800a1a4:	1949      	addeq	r1, r1, r5
 800a1a6:	6021      	streq	r1, [r4, #0]
 800a1a8:	e7ed      	b.n	800a186 <_free_r+0x22>
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	b10b      	cbz	r3, 800a1b4 <_free_r+0x50>
 800a1b0:	42a3      	cmp	r3, r4
 800a1b2:	d9fa      	bls.n	800a1aa <_free_r+0x46>
 800a1b4:	6811      	ldr	r1, [r2, #0]
 800a1b6:	1855      	adds	r5, r2, r1
 800a1b8:	42a5      	cmp	r5, r4
 800a1ba:	d10b      	bne.n	800a1d4 <_free_r+0x70>
 800a1bc:	6824      	ldr	r4, [r4, #0]
 800a1be:	4421      	add	r1, r4
 800a1c0:	1854      	adds	r4, r2, r1
 800a1c2:	42a3      	cmp	r3, r4
 800a1c4:	6011      	str	r1, [r2, #0]
 800a1c6:	d1e0      	bne.n	800a18a <_free_r+0x26>
 800a1c8:	681c      	ldr	r4, [r3, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	6053      	str	r3, [r2, #4]
 800a1ce:	4421      	add	r1, r4
 800a1d0:	6011      	str	r1, [r2, #0]
 800a1d2:	e7da      	b.n	800a18a <_free_r+0x26>
 800a1d4:	d902      	bls.n	800a1dc <_free_r+0x78>
 800a1d6:	230c      	movs	r3, #12
 800a1d8:	6003      	str	r3, [r0, #0]
 800a1da:	e7d6      	b.n	800a18a <_free_r+0x26>
 800a1dc:	6825      	ldr	r5, [r4, #0]
 800a1de:	1961      	adds	r1, r4, r5
 800a1e0:	428b      	cmp	r3, r1
 800a1e2:	bf04      	itt	eq
 800a1e4:	6819      	ldreq	r1, [r3, #0]
 800a1e6:	685b      	ldreq	r3, [r3, #4]
 800a1e8:	6063      	str	r3, [r4, #4]
 800a1ea:	bf04      	itt	eq
 800a1ec:	1949      	addeq	r1, r1, r5
 800a1ee:	6021      	streq	r1, [r4, #0]
 800a1f0:	6054      	str	r4, [r2, #4]
 800a1f2:	e7ca      	b.n	800a18a <_free_r+0x26>
 800a1f4:	b003      	add	sp, #12
 800a1f6:	bd30      	pop	{r4, r5, pc}
 800a1f8:	20000e30 	.word	0x20000e30

0800a1fc <_malloc_r>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	1ccd      	adds	r5, r1, #3
 800a200:	f025 0503 	bic.w	r5, r5, #3
 800a204:	3508      	adds	r5, #8
 800a206:	2d0c      	cmp	r5, #12
 800a208:	bf38      	it	cc
 800a20a:	250c      	movcc	r5, #12
 800a20c:	2d00      	cmp	r5, #0
 800a20e:	4606      	mov	r6, r0
 800a210:	db01      	blt.n	800a216 <_malloc_r+0x1a>
 800a212:	42a9      	cmp	r1, r5
 800a214:	d903      	bls.n	800a21e <_malloc_r+0x22>
 800a216:	230c      	movs	r3, #12
 800a218:	6033      	str	r3, [r6, #0]
 800a21a:	2000      	movs	r0, #0
 800a21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a21e:	f000 f975 	bl	800a50c <__malloc_lock>
 800a222:	4921      	ldr	r1, [pc, #132]	; (800a2a8 <_malloc_r+0xac>)
 800a224:	680a      	ldr	r2, [r1, #0]
 800a226:	4614      	mov	r4, r2
 800a228:	b99c      	cbnz	r4, 800a252 <_malloc_r+0x56>
 800a22a:	4f20      	ldr	r7, [pc, #128]	; (800a2ac <_malloc_r+0xb0>)
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	b923      	cbnz	r3, 800a23a <_malloc_r+0x3e>
 800a230:	4621      	mov	r1, r4
 800a232:	4630      	mov	r0, r6
 800a234:	f000 f83c 	bl	800a2b0 <_sbrk_r>
 800a238:	6038      	str	r0, [r7, #0]
 800a23a:	4629      	mov	r1, r5
 800a23c:	4630      	mov	r0, r6
 800a23e:	f000 f837 	bl	800a2b0 <_sbrk_r>
 800a242:	1c43      	adds	r3, r0, #1
 800a244:	d123      	bne.n	800a28e <_malloc_r+0x92>
 800a246:	230c      	movs	r3, #12
 800a248:	6033      	str	r3, [r6, #0]
 800a24a:	4630      	mov	r0, r6
 800a24c:	f000 f964 	bl	800a518 <__malloc_unlock>
 800a250:	e7e3      	b.n	800a21a <_malloc_r+0x1e>
 800a252:	6823      	ldr	r3, [r4, #0]
 800a254:	1b5b      	subs	r3, r3, r5
 800a256:	d417      	bmi.n	800a288 <_malloc_r+0x8c>
 800a258:	2b0b      	cmp	r3, #11
 800a25a:	d903      	bls.n	800a264 <_malloc_r+0x68>
 800a25c:	6023      	str	r3, [r4, #0]
 800a25e:	441c      	add	r4, r3
 800a260:	6025      	str	r5, [r4, #0]
 800a262:	e004      	b.n	800a26e <_malloc_r+0x72>
 800a264:	6863      	ldr	r3, [r4, #4]
 800a266:	42a2      	cmp	r2, r4
 800a268:	bf0c      	ite	eq
 800a26a:	600b      	streq	r3, [r1, #0]
 800a26c:	6053      	strne	r3, [r2, #4]
 800a26e:	4630      	mov	r0, r6
 800a270:	f000 f952 	bl	800a518 <__malloc_unlock>
 800a274:	f104 000b 	add.w	r0, r4, #11
 800a278:	1d23      	adds	r3, r4, #4
 800a27a:	f020 0007 	bic.w	r0, r0, #7
 800a27e:	1ac2      	subs	r2, r0, r3
 800a280:	d0cc      	beq.n	800a21c <_malloc_r+0x20>
 800a282:	1a1b      	subs	r3, r3, r0
 800a284:	50a3      	str	r3, [r4, r2]
 800a286:	e7c9      	b.n	800a21c <_malloc_r+0x20>
 800a288:	4622      	mov	r2, r4
 800a28a:	6864      	ldr	r4, [r4, #4]
 800a28c:	e7cc      	b.n	800a228 <_malloc_r+0x2c>
 800a28e:	1cc4      	adds	r4, r0, #3
 800a290:	f024 0403 	bic.w	r4, r4, #3
 800a294:	42a0      	cmp	r0, r4
 800a296:	d0e3      	beq.n	800a260 <_malloc_r+0x64>
 800a298:	1a21      	subs	r1, r4, r0
 800a29a:	4630      	mov	r0, r6
 800a29c:	f000 f808 	bl	800a2b0 <_sbrk_r>
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	d1dd      	bne.n	800a260 <_malloc_r+0x64>
 800a2a4:	e7cf      	b.n	800a246 <_malloc_r+0x4a>
 800a2a6:	bf00      	nop
 800a2a8:	20000e30 	.word	0x20000e30
 800a2ac:	20000e34 	.word	0x20000e34

0800a2b0 <_sbrk_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	4d06      	ldr	r5, [pc, #24]	; (800a2cc <_sbrk_r+0x1c>)
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	4608      	mov	r0, r1
 800a2ba:	602b      	str	r3, [r5, #0]
 800a2bc:	f7f8 f814 	bl	80022e8 <_sbrk>
 800a2c0:	1c43      	adds	r3, r0, #1
 800a2c2:	d102      	bne.n	800a2ca <_sbrk_r+0x1a>
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	b103      	cbz	r3, 800a2ca <_sbrk_r+0x1a>
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	20000e38 	.word	0x20000e38

0800a2d0 <strtok>:
 800a2d0:	4b16      	ldr	r3, [pc, #88]	; (800a32c <strtok+0x5c>)
 800a2d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2d4:	681e      	ldr	r6, [r3, #0]
 800a2d6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a2d8:	4605      	mov	r5, r0
 800a2da:	b9fc      	cbnz	r4, 800a31c <strtok+0x4c>
 800a2dc:	2050      	movs	r0, #80	; 0x50
 800a2de:	9101      	str	r1, [sp, #4]
 800a2e0:	f7ff ff38 	bl	800a154 <malloc>
 800a2e4:	9901      	ldr	r1, [sp, #4]
 800a2e6:	65b0      	str	r0, [r6, #88]	; 0x58
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	b920      	cbnz	r0, 800a2f6 <strtok+0x26>
 800a2ec:	4b10      	ldr	r3, [pc, #64]	; (800a330 <strtok+0x60>)
 800a2ee:	4811      	ldr	r0, [pc, #68]	; (800a334 <strtok+0x64>)
 800a2f0:	2157      	movs	r1, #87	; 0x57
 800a2f2:	f000 f8db 	bl	800a4ac <__assert_func>
 800a2f6:	e9c0 4400 	strd	r4, r4, [r0]
 800a2fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a2fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a302:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a306:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a30a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a30e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a312:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a316:	6184      	str	r4, [r0, #24]
 800a318:	7704      	strb	r4, [r0, #28]
 800a31a:	6244      	str	r4, [r0, #36]	; 0x24
 800a31c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a31e:	2301      	movs	r3, #1
 800a320:	4628      	mov	r0, r5
 800a322:	b002      	add	sp, #8
 800a324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a328:	f000 bf8a 	b.w	800b240 <__strtok_r>
 800a32c:	20000330 	.word	0x20000330
 800a330:	0800c601 	.word	0x0800c601
 800a334:	0800c618 	.word	0x0800c618

0800a338 <_strtol_l.constprop.0>:
 800a338:	2b01      	cmp	r3, #1
 800a33a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a33e:	d001      	beq.n	800a344 <_strtol_l.constprop.0+0xc>
 800a340:	2b24      	cmp	r3, #36	; 0x24
 800a342:	d906      	bls.n	800a352 <_strtol_l.constprop.0+0x1a>
 800a344:	f7f7 fff8 	bl	8002338 <__errno>
 800a348:	2316      	movs	r3, #22
 800a34a:	6003      	str	r3, [r0, #0]
 800a34c:	2000      	movs	r0, #0
 800a34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a352:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a438 <_strtol_l.constprop.0+0x100>
 800a356:	460d      	mov	r5, r1
 800a358:	462e      	mov	r6, r5
 800a35a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a35e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a362:	f017 0708 	ands.w	r7, r7, #8
 800a366:	d1f7      	bne.n	800a358 <_strtol_l.constprop.0+0x20>
 800a368:	2c2d      	cmp	r4, #45	; 0x2d
 800a36a:	d132      	bne.n	800a3d2 <_strtol_l.constprop.0+0x9a>
 800a36c:	782c      	ldrb	r4, [r5, #0]
 800a36e:	2701      	movs	r7, #1
 800a370:	1cb5      	adds	r5, r6, #2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d05b      	beq.n	800a42e <_strtol_l.constprop.0+0xf6>
 800a376:	2b10      	cmp	r3, #16
 800a378:	d109      	bne.n	800a38e <_strtol_l.constprop.0+0x56>
 800a37a:	2c30      	cmp	r4, #48	; 0x30
 800a37c:	d107      	bne.n	800a38e <_strtol_l.constprop.0+0x56>
 800a37e:	782c      	ldrb	r4, [r5, #0]
 800a380:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a384:	2c58      	cmp	r4, #88	; 0x58
 800a386:	d14d      	bne.n	800a424 <_strtol_l.constprop.0+0xec>
 800a388:	786c      	ldrb	r4, [r5, #1]
 800a38a:	2310      	movs	r3, #16
 800a38c:	3502      	adds	r5, #2
 800a38e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a392:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a396:	f04f 0c00 	mov.w	ip, #0
 800a39a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a39e:	4666      	mov	r6, ip
 800a3a0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a3a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a3a8:	f1be 0f09 	cmp.w	lr, #9
 800a3ac:	d816      	bhi.n	800a3dc <_strtol_l.constprop.0+0xa4>
 800a3ae:	4674      	mov	r4, lr
 800a3b0:	42a3      	cmp	r3, r4
 800a3b2:	dd24      	ble.n	800a3fe <_strtol_l.constprop.0+0xc6>
 800a3b4:	f1bc 0f00 	cmp.w	ip, #0
 800a3b8:	db1e      	blt.n	800a3f8 <_strtol_l.constprop.0+0xc0>
 800a3ba:	45b1      	cmp	r9, r6
 800a3bc:	d31c      	bcc.n	800a3f8 <_strtol_l.constprop.0+0xc0>
 800a3be:	d101      	bne.n	800a3c4 <_strtol_l.constprop.0+0x8c>
 800a3c0:	45a2      	cmp	sl, r4
 800a3c2:	db19      	blt.n	800a3f8 <_strtol_l.constprop.0+0xc0>
 800a3c4:	fb06 4603 	mla	r6, r6, r3, r4
 800a3c8:	f04f 0c01 	mov.w	ip, #1
 800a3cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3d0:	e7e8      	b.n	800a3a4 <_strtol_l.constprop.0+0x6c>
 800a3d2:	2c2b      	cmp	r4, #43	; 0x2b
 800a3d4:	bf04      	itt	eq
 800a3d6:	782c      	ldrbeq	r4, [r5, #0]
 800a3d8:	1cb5      	addeq	r5, r6, #2
 800a3da:	e7ca      	b.n	800a372 <_strtol_l.constprop.0+0x3a>
 800a3dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a3e0:	f1be 0f19 	cmp.w	lr, #25
 800a3e4:	d801      	bhi.n	800a3ea <_strtol_l.constprop.0+0xb2>
 800a3e6:	3c37      	subs	r4, #55	; 0x37
 800a3e8:	e7e2      	b.n	800a3b0 <_strtol_l.constprop.0+0x78>
 800a3ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a3ee:	f1be 0f19 	cmp.w	lr, #25
 800a3f2:	d804      	bhi.n	800a3fe <_strtol_l.constprop.0+0xc6>
 800a3f4:	3c57      	subs	r4, #87	; 0x57
 800a3f6:	e7db      	b.n	800a3b0 <_strtol_l.constprop.0+0x78>
 800a3f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a3fc:	e7e6      	b.n	800a3cc <_strtol_l.constprop.0+0x94>
 800a3fe:	f1bc 0f00 	cmp.w	ip, #0
 800a402:	da05      	bge.n	800a410 <_strtol_l.constprop.0+0xd8>
 800a404:	2322      	movs	r3, #34	; 0x22
 800a406:	6003      	str	r3, [r0, #0]
 800a408:	4646      	mov	r6, r8
 800a40a:	b942      	cbnz	r2, 800a41e <_strtol_l.constprop.0+0xe6>
 800a40c:	4630      	mov	r0, r6
 800a40e:	e79e      	b.n	800a34e <_strtol_l.constprop.0+0x16>
 800a410:	b107      	cbz	r7, 800a414 <_strtol_l.constprop.0+0xdc>
 800a412:	4276      	negs	r6, r6
 800a414:	2a00      	cmp	r2, #0
 800a416:	d0f9      	beq.n	800a40c <_strtol_l.constprop.0+0xd4>
 800a418:	f1bc 0f00 	cmp.w	ip, #0
 800a41c:	d000      	beq.n	800a420 <_strtol_l.constprop.0+0xe8>
 800a41e:	1e69      	subs	r1, r5, #1
 800a420:	6011      	str	r1, [r2, #0]
 800a422:	e7f3      	b.n	800a40c <_strtol_l.constprop.0+0xd4>
 800a424:	2430      	movs	r4, #48	; 0x30
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1b1      	bne.n	800a38e <_strtol_l.constprop.0+0x56>
 800a42a:	2308      	movs	r3, #8
 800a42c:	e7af      	b.n	800a38e <_strtol_l.constprop.0+0x56>
 800a42e:	2c30      	cmp	r4, #48	; 0x30
 800a430:	d0a5      	beq.n	800a37e <_strtol_l.constprop.0+0x46>
 800a432:	230a      	movs	r3, #10
 800a434:	e7ab      	b.n	800a38e <_strtol_l.constprop.0+0x56>
 800a436:	bf00      	nop
 800a438:	0800c501 	.word	0x0800c501

0800a43c <strtol>:
 800a43c:	4613      	mov	r3, r2
 800a43e:	460a      	mov	r2, r1
 800a440:	4601      	mov	r1, r0
 800a442:	4802      	ldr	r0, [pc, #8]	; (800a44c <strtol+0x10>)
 800a444:	6800      	ldr	r0, [r0, #0]
 800a446:	f7ff bf77 	b.w	800a338 <_strtol_l.constprop.0>
 800a44a:	bf00      	nop
 800a44c:	20000330 	.word	0x20000330

0800a450 <vsniprintf>:
 800a450:	b507      	push	{r0, r1, r2, lr}
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	4613      	mov	r3, r2
 800a456:	460a      	mov	r2, r1
 800a458:	4601      	mov	r1, r0
 800a45a:	4803      	ldr	r0, [pc, #12]	; (800a468 <vsniprintf+0x18>)
 800a45c:	6800      	ldr	r0, [r0, #0]
 800a45e:	f000 ff17 	bl	800b290 <_vsniprintf_r>
 800a462:	b003      	add	sp, #12
 800a464:	f85d fb04 	ldr.w	pc, [sp], #4
 800a468:	20000330 	.word	0x20000330

0800a46c <_vsiprintf_r>:
 800a46c:	b500      	push	{lr}
 800a46e:	b09b      	sub	sp, #108	; 0x6c
 800a470:	9100      	str	r1, [sp, #0]
 800a472:	9104      	str	r1, [sp, #16]
 800a474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a478:	9105      	str	r1, [sp, #20]
 800a47a:	9102      	str	r1, [sp, #8]
 800a47c:	4905      	ldr	r1, [pc, #20]	; (800a494 <_vsiprintf_r+0x28>)
 800a47e:	9103      	str	r1, [sp, #12]
 800a480:	4669      	mov	r1, sp
 800a482:	f000 f84f 	bl	800a524 <_svfiprintf_r>
 800a486:	9b00      	ldr	r3, [sp, #0]
 800a488:	2200      	movs	r2, #0
 800a48a:	701a      	strb	r2, [r3, #0]
 800a48c:	b01b      	add	sp, #108	; 0x6c
 800a48e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a492:	bf00      	nop
 800a494:	ffff0208 	.word	0xffff0208

0800a498 <vsiprintf>:
 800a498:	4613      	mov	r3, r2
 800a49a:	460a      	mov	r2, r1
 800a49c:	4601      	mov	r1, r0
 800a49e:	4802      	ldr	r0, [pc, #8]	; (800a4a8 <vsiprintf+0x10>)
 800a4a0:	6800      	ldr	r0, [r0, #0]
 800a4a2:	f7ff bfe3 	b.w	800a46c <_vsiprintf_r>
 800a4a6:	bf00      	nop
 800a4a8:	20000330 	.word	0x20000330

0800a4ac <__assert_func>:
 800a4ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4ae:	4614      	mov	r4, r2
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	4b09      	ldr	r3, [pc, #36]	; (800a4d8 <__assert_func+0x2c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	68d8      	ldr	r0, [r3, #12]
 800a4ba:	b14c      	cbz	r4, 800a4d0 <__assert_func+0x24>
 800a4bc:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <__assert_func+0x30>)
 800a4be:	9100      	str	r1, [sp, #0]
 800a4c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4c4:	4906      	ldr	r1, [pc, #24]	; (800a4e0 <__assert_func+0x34>)
 800a4c6:	462b      	mov	r3, r5
 800a4c8:	f000 f80e 	bl	800a4e8 <fiprintf>
 800a4cc:	f000 fffc 	bl	800b4c8 <abort>
 800a4d0:	4b04      	ldr	r3, [pc, #16]	; (800a4e4 <__assert_func+0x38>)
 800a4d2:	461c      	mov	r4, r3
 800a4d4:	e7f3      	b.n	800a4be <__assert_func+0x12>
 800a4d6:	bf00      	nop
 800a4d8:	20000330 	.word	0x20000330
 800a4dc:	0800c674 	.word	0x0800c674
 800a4e0:	0800c681 	.word	0x0800c681
 800a4e4:	0800c6af 	.word	0x0800c6af

0800a4e8 <fiprintf>:
 800a4e8:	b40e      	push	{r1, r2, r3}
 800a4ea:	b503      	push	{r0, r1, lr}
 800a4ec:	4601      	mov	r1, r0
 800a4ee:	ab03      	add	r3, sp, #12
 800a4f0:	4805      	ldr	r0, [pc, #20]	; (800a508 <fiprintf+0x20>)
 800a4f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f6:	6800      	ldr	r0, [r0, #0]
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	f000 f913 	bl	800a724 <_vfiprintf_r>
 800a4fe:	b002      	add	sp, #8
 800a500:	f85d eb04 	ldr.w	lr, [sp], #4
 800a504:	b003      	add	sp, #12
 800a506:	4770      	bx	lr
 800a508:	20000330 	.word	0x20000330

0800a50c <__malloc_lock>:
 800a50c:	4801      	ldr	r0, [pc, #4]	; (800a514 <__malloc_lock+0x8>)
 800a50e:	f7f7 bf0b 	b.w	8002328 <__retarget_lock_acquire_recursive>
 800a512:	bf00      	nop
 800a514:	20000430 	.word	0x20000430

0800a518 <__malloc_unlock>:
 800a518:	4801      	ldr	r0, [pc, #4]	; (800a520 <__malloc_unlock+0x8>)
 800a51a:	f7f7 bf0b 	b.w	8002334 <__retarget_lock_release_recursive>
 800a51e:	bf00      	nop
 800a520:	20000430 	.word	0x20000430

0800a524 <_svfiprintf_r>:
 800a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a528:	4698      	mov	r8, r3
 800a52a:	898b      	ldrh	r3, [r1, #12]
 800a52c:	061b      	lsls	r3, r3, #24
 800a52e:	b09d      	sub	sp, #116	; 0x74
 800a530:	4607      	mov	r7, r0
 800a532:	460d      	mov	r5, r1
 800a534:	4614      	mov	r4, r2
 800a536:	d50e      	bpl.n	800a556 <_svfiprintf_r+0x32>
 800a538:	690b      	ldr	r3, [r1, #16]
 800a53a:	b963      	cbnz	r3, 800a556 <_svfiprintf_r+0x32>
 800a53c:	2140      	movs	r1, #64	; 0x40
 800a53e:	f7ff fe5d 	bl	800a1fc <_malloc_r>
 800a542:	6028      	str	r0, [r5, #0]
 800a544:	6128      	str	r0, [r5, #16]
 800a546:	b920      	cbnz	r0, 800a552 <_svfiprintf_r+0x2e>
 800a548:	230c      	movs	r3, #12
 800a54a:	603b      	str	r3, [r7, #0]
 800a54c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a550:	e0d1      	b.n	800a6f6 <_svfiprintf_r+0x1d2>
 800a552:	2340      	movs	r3, #64	; 0x40
 800a554:	616b      	str	r3, [r5, #20]
 800a556:	2300      	movs	r3, #0
 800a558:	9309      	str	r3, [sp, #36]	; 0x24
 800a55a:	2320      	movs	r3, #32
 800a55c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a560:	f8cd 800c 	str.w	r8, [sp, #12]
 800a564:	2330      	movs	r3, #48	; 0x30
 800a566:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a710 <_svfiprintf_r+0x1ec>
 800a56a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a56e:	f04f 0901 	mov.w	r9, #1
 800a572:	4623      	mov	r3, r4
 800a574:	469a      	mov	sl, r3
 800a576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a57a:	b10a      	cbz	r2, 800a580 <_svfiprintf_r+0x5c>
 800a57c:	2a25      	cmp	r2, #37	; 0x25
 800a57e:	d1f9      	bne.n	800a574 <_svfiprintf_r+0x50>
 800a580:	ebba 0b04 	subs.w	fp, sl, r4
 800a584:	d00b      	beq.n	800a59e <_svfiprintf_r+0x7a>
 800a586:	465b      	mov	r3, fp
 800a588:	4622      	mov	r2, r4
 800a58a:	4629      	mov	r1, r5
 800a58c:	4638      	mov	r0, r7
 800a58e:	f000 feaa 	bl	800b2e6 <__ssputs_r>
 800a592:	3001      	adds	r0, #1
 800a594:	f000 80aa 	beq.w	800a6ec <_svfiprintf_r+0x1c8>
 800a598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a59a:	445a      	add	r2, fp
 800a59c:	9209      	str	r2, [sp, #36]	; 0x24
 800a59e:	f89a 3000 	ldrb.w	r3, [sl]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f000 80a2 	beq.w	800a6ec <_svfiprintf_r+0x1c8>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5b2:	f10a 0a01 	add.w	sl, sl, #1
 800a5b6:	9304      	str	r3, [sp, #16]
 800a5b8:	9307      	str	r3, [sp, #28]
 800a5ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5be:	931a      	str	r3, [sp, #104]	; 0x68
 800a5c0:	4654      	mov	r4, sl
 800a5c2:	2205      	movs	r2, #5
 800a5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c8:	4851      	ldr	r0, [pc, #324]	; (800a710 <_svfiprintf_r+0x1ec>)
 800a5ca:	f7f5 fde9 	bl	80001a0 <memchr>
 800a5ce:	9a04      	ldr	r2, [sp, #16]
 800a5d0:	b9d8      	cbnz	r0, 800a60a <_svfiprintf_r+0xe6>
 800a5d2:	06d0      	lsls	r0, r2, #27
 800a5d4:	bf44      	itt	mi
 800a5d6:	2320      	movmi	r3, #32
 800a5d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5dc:	0711      	lsls	r1, r2, #28
 800a5de:	bf44      	itt	mi
 800a5e0:	232b      	movmi	r3, #43	; 0x2b
 800a5e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a5ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a5ec:	d015      	beq.n	800a61a <_svfiprintf_r+0xf6>
 800a5ee:	9a07      	ldr	r2, [sp, #28]
 800a5f0:	4654      	mov	r4, sl
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	f04f 0c0a 	mov.w	ip, #10
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5fe:	3b30      	subs	r3, #48	; 0x30
 800a600:	2b09      	cmp	r3, #9
 800a602:	d94e      	bls.n	800a6a2 <_svfiprintf_r+0x17e>
 800a604:	b1b0      	cbz	r0, 800a634 <_svfiprintf_r+0x110>
 800a606:	9207      	str	r2, [sp, #28]
 800a608:	e014      	b.n	800a634 <_svfiprintf_r+0x110>
 800a60a:	eba0 0308 	sub.w	r3, r0, r8
 800a60e:	fa09 f303 	lsl.w	r3, r9, r3
 800a612:	4313      	orrs	r3, r2
 800a614:	9304      	str	r3, [sp, #16]
 800a616:	46a2      	mov	sl, r4
 800a618:	e7d2      	b.n	800a5c0 <_svfiprintf_r+0x9c>
 800a61a:	9b03      	ldr	r3, [sp, #12]
 800a61c:	1d19      	adds	r1, r3, #4
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	9103      	str	r1, [sp, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	bfbb      	ittet	lt
 800a626:	425b      	neglt	r3, r3
 800a628:	f042 0202 	orrlt.w	r2, r2, #2
 800a62c:	9307      	strge	r3, [sp, #28]
 800a62e:	9307      	strlt	r3, [sp, #28]
 800a630:	bfb8      	it	lt
 800a632:	9204      	strlt	r2, [sp, #16]
 800a634:	7823      	ldrb	r3, [r4, #0]
 800a636:	2b2e      	cmp	r3, #46	; 0x2e
 800a638:	d10c      	bne.n	800a654 <_svfiprintf_r+0x130>
 800a63a:	7863      	ldrb	r3, [r4, #1]
 800a63c:	2b2a      	cmp	r3, #42	; 0x2a
 800a63e:	d135      	bne.n	800a6ac <_svfiprintf_r+0x188>
 800a640:	9b03      	ldr	r3, [sp, #12]
 800a642:	1d1a      	adds	r2, r3, #4
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	9203      	str	r2, [sp, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	bfb8      	it	lt
 800a64c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a650:	3402      	adds	r4, #2
 800a652:	9305      	str	r3, [sp, #20]
 800a654:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a720 <_svfiprintf_r+0x1fc>
 800a658:	7821      	ldrb	r1, [r4, #0]
 800a65a:	2203      	movs	r2, #3
 800a65c:	4650      	mov	r0, sl
 800a65e:	f7f5 fd9f 	bl	80001a0 <memchr>
 800a662:	b140      	cbz	r0, 800a676 <_svfiprintf_r+0x152>
 800a664:	2340      	movs	r3, #64	; 0x40
 800a666:	eba0 000a 	sub.w	r0, r0, sl
 800a66a:	fa03 f000 	lsl.w	r0, r3, r0
 800a66e:	9b04      	ldr	r3, [sp, #16]
 800a670:	4303      	orrs	r3, r0
 800a672:	3401      	adds	r4, #1
 800a674:	9304      	str	r3, [sp, #16]
 800a676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a67a:	4826      	ldr	r0, [pc, #152]	; (800a714 <_svfiprintf_r+0x1f0>)
 800a67c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a680:	2206      	movs	r2, #6
 800a682:	f7f5 fd8d 	bl	80001a0 <memchr>
 800a686:	2800      	cmp	r0, #0
 800a688:	d038      	beq.n	800a6fc <_svfiprintf_r+0x1d8>
 800a68a:	4b23      	ldr	r3, [pc, #140]	; (800a718 <_svfiprintf_r+0x1f4>)
 800a68c:	bb1b      	cbnz	r3, 800a6d6 <_svfiprintf_r+0x1b2>
 800a68e:	9b03      	ldr	r3, [sp, #12]
 800a690:	3307      	adds	r3, #7
 800a692:	f023 0307 	bic.w	r3, r3, #7
 800a696:	3308      	adds	r3, #8
 800a698:	9303      	str	r3, [sp, #12]
 800a69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a69c:	4433      	add	r3, r6
 800a69e:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a0:	e767      	b.n	800a572 <_svfiprintf_r+0x4e>
 800a6a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	2001      	movs	r0, #1
 800a6aa:	e7a5      	b.n	800a5f8 <_svfiprintf_r+0xd4>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	3401      	adds	r4, #1
 800a6b0:	9305      	str	r3, [sp, #20]
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	f04f 0c0a 	mov.w	ip, #10
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6be:	3a30      	subs	r2, #48	; 0x30
 800a6c0:	2a09      	cmp	r2, #9
 800a6c2:	d903      	bls.n	800a6cc <_svfiprintf_r+0x1a8>
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d0c5      	beq.n	800a654 <_svfiprintf_r+0x130>
 800a6c8:	9105      	str	r1, [sp, #20]
 800a6ca:	e7c3      	b.n	800a654 <_svfiprintf_r+0x130>
 800a6cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e7f0      	b.n	800a6b8 <_svfiprintf_r+0x194>
 800a6d6:	ab03      	add	r3, sp, #12
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	462a      	mov	r2, r5
 800a6dc:	4b0f      	ldr	r3, [pc, #60]	; (800a71c <_svfiprintf_r+0x1f8>)
 800a6de:	a904      	add	r1, sp, #16
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	f3af 8000 	nop.w
 800a6e6:	1c42      	adds	r2, r0, #1
 800a6e8:	4606      	mov	r6, r0
 800a6ea:	d1d6      	bne.n	800a69a <_svfiprintf_r+0x176>
 800a6ec:	89ab      	ldrh	r3, [r5, #12]
 800a6ee:	065b      	lsls	r3, r3, #25
 800a6f0:	f53f af2c 	bmi.w	800a54c <_svfiprintf_r+0x28>
 800a6f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6f6:	b01d      	add	sp, #116	; 0x74
 800a6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fc:	ab03      	add	r3, sp, #12
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	462a      	mov	r2, r5
 800a702:	4b06      	ldr	r3, [pc, #24]	; (800a71c <_svfiprintf_r+0x1f8>)
 800a704:	a904      	add	r1, sp, #16
 800a706:	4638      	mov	r0, r7
 800a708:	f000 f93c 	bl	800a984 <_printf_i>
 800a70c:	e7eb      	b.n	800a6e6 <_svfiprintf_r+0x1c2>
 800a70e:	bf00      	nop
 800a710:	0800c6b0 	.word	0x0800c6b0
 800a714:	0800c6ba 	.word	0x0800c6ba
 800a718:	00000000 	.word	0x00000000
 800a71c:	0800b2e7 	.word	0x0800b2e7
 800a720:	0800c6b6 	.word	0x0800c6b6

0800a724 <_vfiprintf_r>:
 800a724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a728:	460d      	mov	r5, r1
 800a72a:	b09d      	sub	sp, #116	; 0x74
 800a72c:	4614      	mov	r4, r2
 800a72e:	4698      	mov	r8, r3
 800a730:	4606      	mov	r6, r0
 800a732:	b118      	cbz	r0, 800a73c <_vfiprintf_r+0x18>
 800a734:	6983      	ldr	r3, [r0, #24]
 800a736:	b90b      	cbnz	r3, 800a73c <_vfiprintf_r+0x18>
 800a738:	f000 fc0e 	bl	800af58 <__sinit>
 800a73c:	4b89      	ldr	r3, [pc, #548]	; (800a964 <_vfiprintf_r+0x240>)
 800a73e:	429d      	cmp	r5, r3
 800a740:	d11b      	bne.n	800a77a <_vfiprintf_r+0x56>
 800a742:	6875      	ldr	r5, [r6, #4]
 800a744:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a746:	07d9      	lsls	r1, r3, #31
 800a748:	d405      	bmi.n	800a756 <_vfiprintf_r+0x32>
 800a74a:	89ab      	ldrh	r3, [r5, #12]
 800a74c:	059a      	lsls	r2, r3, #22
 800a74e:	d402      	bmi.n	800a756 <_vfiprintf_r+0x32>
 800a750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a752:	f7f7 fde9 	bl	8002328 <__retarget_lock_acquire_recursive>
 800a756:	89ab      	ldrh	r3, [r5, #12]
 800a758:	071b      	lsls	r3, r3, #28
 800a75a:	d501      	bpl.n	800a760 <_vfiprintf_r+0x3c>
 800a75c:	692b      	ldr	r3, [r5, #16]
 800a75e:	b9eb      	cbnz	r3, 800a79c <_vfiprintf_r+0x78>
 800a760:	4629      	mov	r1, r5
 800a762:	4630      	mov	r0, r6
 800a764:	f000 fa86 	bl	800ac74 <__swsetup_r>
 800a768:	b1c0      	cbz	r0, 800a79c <_vfiprintf_r+0x78>
 800a76a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a76c:	07dc      	lsls	r4, r3, #31
 800a76e:	d50e      	bpl.n	800a78e <_vfiprintf_r+0x6a>
 800a770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a774:	b01d      	add	sp, #116	; 0x74
 800a776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77a:	4b7b      	ldr	r3, [pc, #492]	; (800a968 <_vfiprintf_r+0x244>)
 800a77c:	429d      	cmp	r5, r3
 800a77e:	d101      	bne.n	800a784 <_vfiprintf_r+0x60>
 800a780:	68b5      	ldr	r5, [r6, #8]
 800a782:	e7df      	b.n	800a744 <_vfiprintf_r+0x20>
 800a784:	4b79      	ldr	r3, [pc, #484]	; (800a96c <_vfiprintf_r+0x248>)
 800a786:	429d      	cmp	r5, r3
 800a788:	bf08      	it	eq
 800a78a:	68f5      	ldreq	r5, [r6, #12]
 800a78c:	e7da      	b.n	800a744 <_vfiprintf_r+0x20>
 800a78e:	89ab      	ldrh	r3, [r5, #12]
 800a790:	0598      	lsls	r0, r3, #22
 800a792:	d4ed      	bmi.n	800a770 <_vfiprintf_r+0x4c>
 800a794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a796:	f7f7 fdcd 	bl	8002334 <__retarget_lock_release_recursive>
 800a79a:	e7e9      	b.n	800a770 <_vfiprintf_r+0x4c>
 800a79c:	2300      	movs	r3, #0
 800a79e:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a0:	2320      	movs	r3, #32
 800a7a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7aa:	2330      	movs	r3, #48	; 0x30
 800a7ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a970 <_vfiprintf_r+0x24c>
 800a7b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7b4:	f04f 0901 	mov.w	r9, #1
 800a7b8:	4623      	mov	r3, r4
 800a7ba:	469a      	mov	sl, r3
 800a7bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c0:	b10a      	cbz	r2, 800a7c6 <_vfiprintf_r+0xa2>
 800a7c2:	2a25      	cmp	r2, #37	; 0x25
 800a7c4:	d1f9      	bne.n	800a7ba <_vfiprintf_r+0x96>
 800a7c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a7ca:	d00b      	beq.n	800a7e4 <_vfiprintf_r+0xc0>
 800a7cc:	465b      	mov	r3, fp
 800a7ce:	4622      	mov	r2, r4
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f000 fdf9 	bl	800b3ca <__sfputs_r>
 800a7d8:	3001      	adds	r0, #1
 800a7da:	f000 80aa 	beq.w	800a932 <_vfiprintf_r+0x20e>
 800a7de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e0:	445a      	add	r2, fp
 800a7e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a7e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 80a2 	beq.w	800a932 <_vfiprintf_r+0x20e>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7f8:	f10a 0a01 	add.w	sl, sl, #1
 800a7fc:	9304      	str	r3, [sp, #16]
 800a7fe:	9307      	str	r3, [sp, #28]
 800a800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a804:	931a      	str	r3, [sp, #104]	; 0x68
 800a806:	4654      	mov	r4, sl
 800a808:	2205      	movs	r2, #5
 800a80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a80e:	4858      	ldr	r0, [pc, #352]	; (800a970 <_vfiprintf_r+0x24c>)
 800a810:	f7f5 fcc6 	bl	80001a0 <memchr>
 800a814:	9a04      	ldr	r2, [sp, #16]
 800a816:	b9d8      	cbnz	r0, 800a850 <_vfiprintf_r+0x12c>
 800a818:	06d1      	lsls	r1, r2, #27
 800a81a:	bf44      	itt	mi
 800a81c:	2320      	movmi	r3, #32
 800a81e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a822:	0713      	lsls	r3, r2, #28
 800a824:	bf44      	itt	mi
 800a826:	232b      	movmi	r3, #43	; 0x2b
 800a828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a82c:	f89a 3000 	ldrb.w	r3, [sl]
 800a830:	2b2a      	cmp	r3, #42	; 0x2a
 800a832:	d015      	beq.n	800a860 <_vfiprintf_r+0x13c>
 800a834:	9a07      	ldr	r2, [sp, #28]
 800a836:	4654      	mov	r4, sl
 800a838:	2000      	movs	r0, #0
 800a83a:	f04f 0c0a 	mov.w	ip, #10
 800a83e:	4621      	mov	r1, r4
 800a840:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a844:	3b30      	subs	r3, #48	; 0x30
 800a846:	2b09      	cmp	r3, #9
 800a848:	d94e      	bls.n	800a8e8 <_vfiprintf_r+0x1c4>
 800a84a:	b1b0      	cbz	r0, 800a87a <_vfiprintf_r+0x156>
 800a84c:	9207      	str	r2, [sp, #28]
 800a84e:	e014      	b.n	800a87a <_vfiprintf_r+0x156>
 800a850:	eba0 0308 	sub.w	r3, r0, r8
 800a854:	fa09 f303 	lsl.w	r3, r9, r3
 800a858:	4313      	orrs	r3, r2
 800a85a:	9304      	str	r3, [sp, #16]
 800a85c:	46a2      	mov	sl, r4
 800a85e:	e7d2      	b.n	800a806 <_vfiprintf_r+0xe2>
 800a860:	9b03      	ldr	r3, [sp, #12]
 800a862:	1d19      	adds	r1, r3, #4
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	9103      	str	r1, [sp, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bfbb      	ittet	lt
 800a86c:	425b      	neglt	r3, r3
 800a86e:	f042 0202 	orrlt.w	r2, r2, #2
 800a872:	9307      	strge	r3, [sp, #28]
 800a874:	9307      	strlt	r3, [sp, #28]
 800a876:	bfb8      	it	lt
 800a878:	9204      	strlt	r2, [sp, #16]
 800a87a:	7823      	ldrb	r3, [r4, #0]
 800a87c:	2b2e      	cmp	r3, #46	; 0x2e
 800a87e:	d10c      	bne.n	800a89a <_vfiprintf_r+0x176>
 800a880:	7863      	ldrb	r3, [r4, #1]
 800a882:	2b2a      	cmp	r3, #42	; 0x2a
 800a884:	d135      	bne.n	800a8f2 <_vfiprintf_r+0x1ce>
 800a886:	9b03      	ldr	r3, [sp, #12]
 800a888:	1d1a      	adds	r2, r3, #4
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	9203      	str	r2, [sp, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bfb8      	it	lt
 800a892:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a896:	3402      	adds	r4, #2
 800a898:	9305      	str	r3, [sp, #20]
 800a89a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a980 <_vfiprintf_r+0x25c>
 800a89e:	7821      	ldrb	r1, [r4, #0]
 800a8a0:	2203      	movs	r2, #3
 800a8a2:	4650      	mov	r0, sl
 800a8a4:	f7f5 fc7c 	bl	80001a0 <memchr>
 800a8a8:	b140      	cbz	r0, 800a8bc <_vfiprintf_r+0x198>
 800a8aa:	2340      	movs	r3, #64	; 0x40
 800a8ac:	eba0 000a 	sub.w	r0, r0, sl
 800a8b0:	fa03 f000 	lsl.w	r0, r3, r0
 800a8b4:	9b04      	ldr	r3, [sp, #16]
 800a8b6:	4303      	orrs	r3, r0
 800a8b8:	3401      	adds	r4, #1
 800a8ba:	9304      	str	r3, [sp, #16]
 800a8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c0:	482c      	ldr	r0, [pc, #176]	; (800a974 <_vfiprintf_r+0x250>)
 800a8c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8c6:	2206      	movs	r2, #6
 800a8c8:	f7f5 fc6a 	bl	80001a0 <memchr>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d03f      	beq.n	800a950 <_vfiprintf_r+0x22c>
 800a8d0:	4b29      	ldr	r3, [pc, #164]	; (800a978 <_vfiprintf_r+0x254>)
 800a8d2:	bb1b      	cbnz	r3, 800a91c <_vfiprintf_r+0x1f8>
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	3307      	adds	r3, #7
 800a8d8:	f023 0307 	bic.w	r3, r3, #7
 800a8dc:	3308      	adds	r3, #8
 800a8de:	9303      	str	r3, [sp, #12]
 800a8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e2:	443b      	add	r3, r7
 800a8e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e6:	e767      	b.n	800a7b8 <_vfiprintf_r+0x94>
 800a8e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	e7a5      	b.n	800a83e <_vfiprintf_r+0x11a>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	3401      	adds	r4, #1
 800a8f6:	9305      	str	r3, [sp, #20]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	f04f 0c0a 	mov.w	ip, #10
 800a8fe:	4620      	mov	r0, r4
 800a900:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a904:	3a30      	subs	r2, #48	; 0x30
 800a906:	2a09      	cmp	r2, #9
 800a908:	d903      	bls.n	800a912 <_vfiprintf_r+0x1ee>
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0c5      	beq.n	800a89a <_vfiprintf_r+0x176>
 800a90e:	9105      	str	r1, [sp, #20]
 800a910:	e7c3      	b.n	800a89a <_vfiprintf_r+0x176>
 800a912:	fb0c 2101 	mla	r1, ip, r1, r2
 800a916:	4604      	mov	r4, r0
 800a918:	2301      	movs	r3, #1
 800a91a:	e7f0      	b.n	800a8fe <_vfiprintf_r+0x1da>
 800a91c:	ab03      	add	r3, sp, #12
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	462a      	mov	r2, r5
 800a922:	4b16      	ldr	r3, [pc, #88]	; (800a97c <_vfiprintf_r+0x258>)
 800a924:	a904      	add	r1, sp, #16
 800a926:	4630      	mov	r0, r6
 800a928:	f3af 8000 	nop.w
 800a92c:	4607      	mov	r7, r0
 800a92e:	1c78      	adds	r0, r7, #1
 800a930:	d1d6      	bne.n	800a8e0 <_vfiprintf_r+0x1bc>
 800a932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a934:	07d9      	lsls	r1, r3, #31
 800a936:	d405      	bmi.n	800a944 <_vfiprintf_r+0x220>
 800a938:	89ab      	ldrh	r3, [r5, #12]
 800a93a:	059a      	lsls	r2, r3, #22
 800a93c:	d402      	bmi.n	800a944 <_vfiprintf_r+0x220>
 800a93e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a940:	f7f7 fcf8 	bl	8002334 <__retarget_lock_release_recursive>
 800a944:	89ab      	ldrh	r3, [r5, #12]
 800a946:	065b      	lsls	r3, r3, #25
 800a948:	f53f af12 	bmi.w	800a770 <_vfiprintf_r+0x4c>
 800a94c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a94e:	e711      	b.n	800a774 <_vfiprintf_r+0x50>
 800a950:	ab03      	add	r3, sp, #12
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	462a      	mov	r2, r5
 800a956:	4b09      	ldr	r3, [pc, #36]	; (800a97c <_vfiprintf_r+0x258>)
 800a958:	a904      	add	r1, sp, #16
 800a95a:	4630      	mov	r0, r6
 800a95c:	f000 f812 	bl	800a984 <_printf_i>
 800a960:	e7e4      	b.n	800a92c <_vfiprintf_r+0x208>
 800a962:	bf00      	nop
 800a964:	0800c4c0 	.word	0x0800c4c0
 800a968:	0800c4e0 	.word	0x0800c4e0
 800a96c:	0800c4a0 	.word	0x0800c4a0
 800a970:	0800c6b0 	.word	0x0800c6b0
 800a974:	0800c6ba 	.word	0x0800c6ba
 800a978:	00000000 	.word	0x00000000
 800a97c:	0800b3cb 	.word	0x0800b3cb
 800a980:	0800c6b6 	.word	0x0800c6b6

0800a984 <_printf_i>:
 800a984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a988:	7e0f      	ldrb	r7, [r1, #24]
 800a98a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a98c:	2f78      	cmp	r7, #120	; 0x78
 800a98e:	4691      	mov	r9, r2
 800a990:	4680      	mov	r8, r0
 800a992:	460c      	mov	r4, r1
 800a994:	469a      	mov	sl, r3
 800a996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a99a:	d807      	bhi.n	800a9ac <_printf_i+0x28>
 800a99c:	2f62      	cmp	r7, #98	; 0x62
 800a99e:	d80a      	bhi.n	800a9b6 <_printf_i+0x32>
 800a9a0:	2f00      	cmp	r7, #0
 800a9a2:	f000 80d8 	beq.w	800ab56 <_printf_i+0x1d2>
 800a9a6:	2f58      	cmp	r7, #88	; 0x58
 800a9a8:	f000 80a3 	beq.w	800aaf2 <_printf_i+0x16e>
 800a9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9b4:	e03a      	b.n	800aa2c <_printf_i+0xa8>
 800a9b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9ba:	2b15      	cmp	r3, #21
 800a9bc:	d8f6      	bhi.n	800a9ac <_printf_i+0x28>
 800a9be:	a101      	add	r1, pc, #4	; (adr r1, 800a9c4 <_printf_i+0x40>)
 800a9c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9c4:	0800aa1d 	.word	0x0800aa1d
 800a9c8:	0800aa31 	.word	0x0800aa31
 800a9cc:	0800a9ad 	.word	0x0800a9ad
 800a9d0:	0800a9ad 	.word	0x0800a9ad
 800a9d4:	0800a9ad 	.word	0x0800a9ad
 800a9d8:	0800a9ad 	.word	0x0800a9ad
 800a9dc:	0800aa31 	.word	0x0800aa31
 800a9e0:	0800a9ad 	.word	0x0800a9ad
 800a9e4:	0800a9ad 	.word	0x0800a9ad
 800a9e8:	0800a9ad 	.word	0x0800a9ad
 800a9ec:	0800a9ad 	.word	0x0800a9ad
 800a9f0:	0800ab3d 	.word	0x0800ab3d
 800a9f4:	0800aa61 	.word	0x0800aa61
 800a9f8:	0800ab1f 	.word	0x0800ab1f
 800a9fc:	0800a9ad 	.word	0x0800a9ad
 800aa00:	0800a9ad 	.word	0x0800a9ad
 800aa04:	0800ab5f 	.word	0x0800ab5f
 800aa08:	0800a9ad 	.word	0x0800a9ad
 800aa0c:	0800aa61 	.word	0x0800aa61
 800aa10:	0800a9ad 	.word	0x0800a9ad
 800aa14:	0800a9ad 	.word	0x0800a9ad
 800aa18:	0800ab27 	.word	0x0800ab27
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	1d1a      	adds	r2, r3, #4
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	602a      	str	r2, [r5, #0]
 800aa24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e0a3      	b.n	800ab78 <_printf_i+0x1f4>
 800aa30:	6820      	ldr	r0, [r4, #0]
 800aa32:	6829      	ldr	r1, [r5, #0]
 800aa34:	0606      	lsls	r6, r0, #24
 800aa36:	f101 0304 	add.w	r3, r1, #4
 800aa3a:	d50a      	bpl.n	800aa52 <_printf_i+0xce>
 800aa3c:	680e      	ldr	r6, [r1, #0]
 800aa3e:	602b      	str	r3, [r5, #0]
 800aa40:	2e00      	cmp	r6, #0
 800aa42:	da03      	bge.n	800aa4c <_printf_i+0xc8>
 800aa44:	232d      	movs	r3, #45	; 0x2d
 800aa46:	4276      	negs	r6, r6
 800aa48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa4c:	485e      	ldr	r0, [pc, #376]	; (800abc8 <_printf_i+0x244>)
 800aa4e:	230a      	movs	r3, #10
 800aa50:	e019      	b.n	800aa86 <_printf_i+0x102>
 800aa52:	680e      	ldr	r6, [r1, #0]
 800aa54:	602b      	str	r3, [r5, #0]
 800aa56:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa5a:	bf18      	it	ne
 800aa5c:	b236      	sxthne	r6, r6
 800aa5e:	e7ef      	b.n	800aa40 <_printf_i+0xbc>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	6820      	ldr	r0, [r4, #0]
 800aa64:	1d19      	adds	r1, r3, #4
 800aa66:	6029      	str	r1, [r5, #0]
 800aa68:	0601      	lsls	r1, r0, #24
 800aa6a:	d501      	bpl.n	800aa70 <_printf_i+0xec>
 800aa6c:	681e      	ldr	r6, [r3, #0]
 800aa6e:	e002      	b.n	800aa76 <_printf_i+0xf2>
 800aa70:	0646      	lsls	r6, r0, #25
 800aa72:	d5fb      	bpl.n	800aa6c <_printf_i+0xe8>
 800aa74:	881e      	ldrh	r6, [r3, #0]
 800aa76:	4854      	ldr	r0, [pc, #336]	; (800abc8 <_printf_i+0x244>)
 800aa78:	2f6f      	cmp	r7, #111	; 0x6f
 800aa7a:	bf0c      	ite	eq
 800aa7c:	2308      	moveq	r3, #8
 800aa7e:	230a      	movne	r3, #10
 800aa80:	2100      	movs	r1, #0
 800aa82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa86:	6865      	ldr	r5, [r4, #4]
 800aa88:	60a5      	str	r5, [r4, #8]
 800aa8a:	2d00      	cmp	r5, #0
 800aa8c:	bfa2      	ittt	ge
 800aa8e:	6821      	ldrge	r1, [r4, #0]
 800aa90:	f021 0104 	bicge.w	r1, r1, #4
 800aa94:	6021      	strge	r1, [r4, #0]
 800aa96:	b90e      	cbnz	r6, 800aa9c <_printf_i+0x118>
 800aa98:	2d00      	cmp	r5, #0
 800aa9a:	d04d      	beq.n	800ab38 <_printf_i+0x1b4>
 800aa9c:	4615      	mov	r5, r2
 800aa9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800aaa2:	fb03 6711 	mls	r7, r3, r1, r6
 800aaa6:	5dc7      	ldrb	r7, [r0, r7]
 800aaa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aaac:	4637      	mov	r7, r6
 800aaae:	42bb      	cmp	r3, r7
 800aab0:	460e      	mov	r6, r1
 800aab2:	d9f4      	bls.n	800aa9e <_printf_i+0x11a>
 800aab4:	2b08      	cmp	r3, #8
 800aab6:	d10b      	bne.n	800aad0 <_printf_i+0x14c>
 800aab8:	6823      	ldr	r3, [r4, #0]
 800aaba:	07de      	lsls	r6, r3, #31
 800aabc:	d508      	bpl.n	800aad0 <_printf_i+0x14c>
 800aabe:	6923      	ldr	r3, [r4, #16]
 800aac0:	6861      	ldr	r1, [r4, #4]
 800aac2:	4299      	cmp	r1, r3
 800aac4:	bfde      	ittt	le
 800aac6:	2330      	movle	r3, #48	; 0x30
 800aac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aacc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aad0:	1b52      	subs	r2, r2, r5
 800aad2:	6122      	str	r2, [r4, #16]
 800aad4:	f8cd a000 	str.w	sl, [sp]
 800aad8:	464b      	mov	r3, r9
 800aada:	aa03      	add	r2, sp, #12
 800aadc:	4621      	mov	r1, r4
 800aade:	4640      	mov	r0, r8
 800aae0:	f000 fc85 	bl	800b3ee <_printf_common>
 800aae4:	3001      	adds	r0, #1
 800aae6:	d14c      	bne.n	800ab82 <_printf_i+0x1fe>
 800aae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaec:	b004      	add	sp, #16
 800aaee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf2:	4835      	ldr	r0, [pc, #212]	; (800abc8 <_printf_i+0x244>)
 800aaf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aaf8:	6829      	ldr	r1, [r5, #0]
 800aafa:	6823      	ldr	r3, [r4, #0]
 800aafc:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab00:	6029      	str	r1, [r5, #0]
 800ab02:	061d      	lsls	r5, r3, #24
 800ab04:	d514      	bpl.n	800ab30 <_printf_i+0x1ac>
 800ab06:	07df      	lsls	r7, r3, #31
 800ab08:	bf44      	itt	mi
 800ab0a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab0e:	6023      	strmi	r3, [r4, #0]
 800ab10:	b91e      	cbnz	r6, 800ab1a <_printf_i+0x196>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	f023 0320 	bic.w	r3, r3, #32
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	2310      	movs	r3, #16
 800ab1c:	e7b0      	b.n	800aa80 <_printf_i+0xfc>
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	f043 0320 	orr.w	r3, r3, #32
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	2378      	movs	r3, #120	; 0x78
 800ab28:	4828      	ldr	r0, [pc, #160]	; (800abcc <_printf_i+0x248>)
 800ab2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab2e:	e7e3      	b.n	800aaf8 <_printf_i+0x174>
 800ab30:	0659      	lsls	r1, r3, #25
 800ab32:	bf48      	it	mi
 800ab34:	b2b6      	uxthmi	r6, r6
 800ab36:	e7e6      	b.n	800ab06 <_printf_i+0x182>
 800ab38:	4615      	mov	r5, r2
 800ab3a:	e7bb      	b.n	800aab4 <_printf_i+0x130>
 800ab3c:	682b      	ldr	r3, [r5, #0]
 800ab3e:	6826      	ldr	r6, [r4, #0]
 800ab40:	6961      	ldr	r1, [r4, #20]
 800ab42:	1d18      	adds	r0, r3, #4
 800ab44:	6028      	str	r0, [r5, #0]
 800ab46:	0635      	lsls	r5, r6, #24
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	d501      	bpl.n	800ab50 <_printf_i+0x1cc>
 800ab4c:	6019      	str	r1, [r3, #0]
 800ab4e:	e002      	b.n	800ab56 <_printf_i+0x1d2>
 800ab50:	0670      	lsls	r0, r6, #25
 800ab52:	d5fb      	bpl.n	800ab4c <_printf_i+0x1c8>
 800ab54:	8019      	strh	r1, [r3, #0]
 800ab56:	2300      	movs	r3, #0
 800ab58:	6123      	str	r3, [r4, #16]
 800ab5a:	4615      	mov	r5, r2
 800ab5c:	e7ba      	b.n	800aad4 <_printf_i+0x150>
 800ab5e:	682b      	ldr	r3, [r5, #0]
 800ab60:	1d1a      	adds	r2, r3, #4
 800ab62:	602a      	str	r2, [r5, #0]
 800ab64:	681d      	ldr	r5, [r3, #0]
 800ab66:	6862      	ldr	r2, [r4, #4]
 800ab68:	2100      	movs	r1, #0
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	f7f5 fb18 	bl	80001a0 <memchr>
 800ab70:	b108      	cbz	r0, 800ab76 <_printf_i+0x1f2>
 800ab72:	1b40      	subs	r0, r0, r5
 800ab74:	6060      	str	r0, [r4, #4]
 800ab76:	6863      	ldr	r3, [r4, #4]
 800ab78:	6123      	str	r3, [r4, #16]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab80:	e7a8      	b.n	800aad4 <_printf_i+0x150>
 800ab82:	6923      	ldr	r3, [r4, #16]
 800ab84:	462a      	mov	r2, r5
 800ab86:	4649      	mov	r1, r9
 800ab88:	4640      	mov	r0, r8
 800ab8a:	47d0      	blx	sl
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	d0ab      	beq.n	800aae8 <_printf_i+0x164>
 800ab90:	6823      	ldr	r3, [r4, #0]
 800ab92:	079b      	lsls	r3, r3, #30
 800ab94:	d413      	bmi.n	800abbe <_printf_i+0x23a>
 800ab96:	68e0      	ldr	r0, [r4, #12]
 800ab98:	9b03      	ldr	r3, [sp, #12]
 800ab9a:	4298      	cmp	r0, r3
 800ab9c:	bfb8      	it	lt
 800ab9e:	4618      	movlt	r0, r3
 800aba0:	e7a4      	b.n	800aaec <_printf_i+0x168>
 800aba2:	2301      	movs	r3, #1
 800aba4:	4632      	mov	r2, r6
 800aba6:	4649      	mov	r1, r9
 800aba8:	4640      	mov	r0, r8
 800abaa:	47d0      	blx	sl
 800abac:	3001      	adds	r0, #1
 800abae:	d09b      	beq.n	800aae8 <_printf_i+0x164>
 800abb0:	3501      	adds	r5, #1
 800abb2:	68e3      	ldr	r3, [r4, #12]
 800abb4:	9903      	ldr	r1, [sp, #12]
 800abb6:	1a5b      	subs	r3, r3, r1
 800abb8:	42ab      	cmp	r3, r5
 800abba:	dcf2      	bgt.n	800aba2 <_printf_i+0x21e>
 800abbc:	e7eb      	b.n	800ab96 <_printf_i+0x212>
 800abbe:	2500      	movs	r5, #0
 800abc0:	f104 0619 	add.w	r6, r4, #25
 800abc4:	e7f5      	b.n	800abb2 <_printf_i+0x22e>
 800abc6:	bf00      	nop
 800abc8:	0800c6c1 	.word	0x0800c6c1
 800abcc:	0800c6d2 	.word	0x0800c6d2

0800abd0 <__swbuf_r>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	460e      	mov	r6, r1
 800abd4:	4614      	mov	r4, r2
 800abd6:	4605      	mov	r5, r0
 800abd8:	b118      	cbz	r0, 800abe2 <__swbuf_r+0x12>
 800abda:	6983      	ldr	r3, [r0, #24]
 800abdc:	b90b      	cbnz	r3, 800abe2 <__swbuf_r+0x12>
 800abde:	f000 f9bb 	bl	800af58 <__sinit>
 800abe2:	4b21      	ldr	r3, [pc, #132]	; (800ac68 <__swbuf_r+0x98>)
 800abe4:	429c      	cmp	r4, r3
 800abe6:	d12b      	bne.n	800ac40 <__swbuf_r+0x70>
 800abe8:	686c      	ldr	r4, [r5, #4]
 800abea:	69a3      	ldr	r3, [r4, #24]
 800abec:	60a3      	str	r3, [r4, #8]
 800abee:	89a3      	ldrh	r3, [r4, #12]
 800abf0:	071a      	lsls	r2, r3, #28
 800abf2:	d52f      	bpl.n	800ac54 <__swbuf_r+0x84>
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	b36b      	cbz	r3, 800ac54 <__swbuf_r+0x84>
 800abf8:	6923      	ldr	r3, [r4, #16]
 800abfa:	6820      	ldr	r0, [r4, #0]
 800abfc:	1ac0      	subs	r0, r0, r3
 800abfe:	6963      	ldr	r3, [r4, #20]
 800ac00:	b2f6      	uxtb	r6, r6
 800ac02:	4283      	cmp	r3, r0
 800ac04:	4637      	mov	r7, r6
 800ac06:	dc04      	bgt.n	800ac12 <__swbuf_r+0x42>
 800ac08:	4621      	mov	r1, r4
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	f000 f926 	bl	800ae5c <_fflush_r>
 800ac10:	bb30      	cbnz	r0, 800ac60 <__swbuf_r+0x90>
 800ac12:	68a3      	ldr	r3, [r4, #8]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	60a3      	str	r3, [r4, #8]
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	1c5a      	adds	r2, r3, #1
 800ac1c:	6022      	str	r2, [r4, #0]
 800ac1e:	701e      	strb	r6, [r3, #0]
 800ac20:	6963      	ldr	r3, [r4, #20]
 800ac22:	3001      	adds	r0, #1
 800ac24:	4283      	cmp	r3, r0
 800ac26:	d004      	beq.n	800ac32 <__swbuf_r+0x62>
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	07db      	lsls	r3, r3, #31
 800ac2c:	d506      	bpl.n	800ac3c <__swbuf_r+0x6c>
 800ac2e:	2e0a      	cmp	r6, #10
 800ac30:	d104      	bne.n	800ac3c <__swbuf_r+0x6c>
 800ac32:	4621      	mov	r1, r4
 800ac34:	4628      	mov	r0, r5
 800ac36:	f000 f911 	bl	800ae5c <_fflush_r>
 800ac3a:	b988      	cbnz	r0, 800ac60 <__swbuf_r+0x90>
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac40:	4b0a      	ldr	r3, [pc, #40]	; (800ac6c <__swbuf_r+0x9c>)
 800ac42:	429c      	cmp	r4, r3
 800ac44:	d101      	bne.n	800ac4a <__swbuf_r+0x7a>
 800ac46:	68ac      	ldr	r4, [r5, #8]
 800ac48:	e7cf      	b.n	800abea <__swbuf_r+0x1a>
 800ac4a:	4b09      	ldr	r3, [pc, #36]	; (800ac70 <__swbuf_r+0xa0>)
 800ac4c:	429c      	cmp	r4, r3
 800ac4e:	bf08      	it	eq
 800ac50:	68ec      	ldreq	r4, [r5, #12]
 800ac52:	e7ca      	b.n	800abea <__swbuf_r+0x1a>
 800ac54:	4621      	mov	r1, r4
 800ac56:	4628      	mov	r0, r5
 800ac58:	f000 f80c 	bl	800ac74 <__swsetup_r>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d0cb      	beq.n	800abf8 <__swbuf_r+0x28>
 800ac60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ac64:	e7ea      	b.n	800ac3c <__swbuf_r+0x6c>
 800ac66:	bf00      	nop
 800ac68:	0800c4c0 	.word	0x0800c4c0
 800ac6c:	0800c4e0 	.word	0x0800c4e0
 800ac70:	0800c4a0 	.word	0x0800c4a0

0800ac74 <__swsetup_r>:
 800ac74:	4b32      	ldr	r3, [pc, #200]	; (800ad40 <__swsetup_r+0xcc>)
 800ac76:	b570      	push	{r4, r5, r6, lr}
 800ac78:	681d      	ldr	r5, [r3, #0]
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	460c      	mov	r4, r1
 800ac7e:	b125      	cbz	r5, 800ac8a <__swsetup_r+0x16>
 800ac80:	69ab      	ldr	r3, [r5, #24]
 800ac82:	b913      	cbnz	r3, 800ac8a <__swsetup_r+0x16>
 800ac84:	4628      	mov	r0, r5
 800ac86:	f000 f967 	bl	800af58 <__sinit>
 800ac8a:	4b2e      	ldr	r3, [pc, #184]	; (800ad44 <__swsetup_r+0xd0>)
 800ac8c:	429c      	cmp	r4, r3
 800ac8e:	d10f      	bne.n	800acb0 <__swsetup_r+0x3c>
 800ac90:	686c      	ldr	r4, [r5, #4]
 800ac92:	89a3      	ldrh	r3, [r4, #12]
 800ac94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac98:	0719      	lsls	r1, r3, #28
 800ac9a:	d42c      	bmi.n	800acf6 <__swsetup_r+0x82>
 800ac9c:	06dd      	lsls	r5, r3, #27
 800ac9e:	d411      	bmi.n	800acc4 <__swsetup_r+0x50>
 800aca0:	2309      	movs	r3, #9
 800aca2:	6033      	str	r3, [r6, #0]
 800aca4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aca8:	81a3      	strh	r3, [r4, #12]
 800acaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acae:	e03e      	b.n	800ad2e <__swsetup_r+0xba>
 800acb0:	4b25      	ldr	r3, [pc, #148]	; (800ad48 <__swsetup_r+0xd4>)
 800acb2:	429c      	cmp	r4, r3
 800acb4:	d101      	bne.n	800acba <__swsetup_r+0x46>
 800acb6:	68ac      	ldr	r4, [r5, #8]
 800acb8:	e7eb      	b.n	800ac92 <__swsetup_r+0x1e>
 800acba:	4b24      	ldr	r3, [pc, #144]	; (800ad4c <__swsetup_r+0xd8>)
 800acbc:	429c      	cmp	r4, r3
 800acbe:	bf08      	it	eq
 800acc0:	68ec      	ldreq	r4, [r5, #12]
 800acc2:	e7e6      	b.n	800ac92 <__swsetup_r+0x1e>
 800acc4:	0758      	lsls	r0, r3, #29
 800acc6:	d512      	bpl.n	800acee <__swsetup_r+0x7a>
 800acc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acca:	b141      	cbz	r1, 800acde <__swsetup_r+0x6a>
 800accc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acd0:	4299      	cmp	r1, r3
 800acd2:	d002      	beq.n	800acda <__swsetup_r+0x66>
 800acd4:	4630      	mov	r0, r6
 800acd6:	f7ff fa45 	bl	800a164 <_free_r>
 800acda:	2300      	movs	r3, #0
 800acdc:	6363      	str	r3, [r4, #52]	; 0x34
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ace4:	81a3      	strh	r3, [r4, #12]
 800ace6:	2300      	movs	r3, #0
 800ace8:	6063      	str	r3, [r4, #4]
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	89a3      	ldrh	r3, [r4, #12]
 800acf0:	f043 0308 	orr.w	r3, r3, #8
 800acf4:	81a3      	strh	r3, [r4, #12]
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	b94b      	cbnz	r3, 800ad0e <__swsetup_r+0x9a>
 800acfa:	89a3      	ldrh	r3, [r4, #12]
 800acfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad04:	d003      	beq.n	800ad0e <__swsetup_r+0x9a>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f000 f9a3 	bl	800b054 <__smakebuf_r>
 800ad0e:	89a0      	ldrh	r0, [r4, #12]
 800ad10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad14:	f010 0301 	ands.w	r3, r0, #1
 800ad18:	d00a      	beq.n	800ad30 <__swsetup_r+0xbc>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60a3      	str	r3, [r4, #8]
 800ad1e:	6963      	ldr	r3, [r4, #20]
 800ad20:	425b      	negs	r3, r3
 800ad22:	61a3      	str	r3, [r4, #24]
 800ad24:	6923      	ldr	r3, [r4, #16]
 800ad26:	b943      	cbnz	r3, 800ad3a <__swsetup_r+0xc6>
 800ad28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad2c:	d1ba      	bne.n	800aca4 <__swsetup_r+0x30>
 800ad2e:	bd70      	pop	{r4, r5, r6, pc}
 800ad30:	0781      	lsls	r1, r0, #30
 800ad32:	bf58      	it	pl
 800ad34:	6963      	ldrpl	r3, [r4, #20]
 800ad36:	60a3      	str	r3, [r4, #8]
 800ad38:	e7f4      	b.n	800ad24 <__swsetup_r+0xb0>
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	e7f7      	b.n	800ad2e <__swsetup_r+0xba>
 800ad3e:	bf00      	nop
 800ad40:	20000330 	.word	0x20000330
 800ad44:	0800c4c0 	.word	0x0800c4c0
 800ad48:	0800c4e0 	.word	0x0800c4e0
 800ad4c:	0800c4a0 	.word	0x0800c4a0

0800ad50 <__sflush_r>:
 800ad50:	898a      	ldrh	r2, [r1, #12]
 800ad52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad56:	4605      	mov	r5, r0
 800ad58:	0710      	lsls	r0, r2, #28
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	d458      	bmi.n	800ae10 <__sflush_r+0xc0>
 800ad5e:	684b      	ldr	r3, [r1, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	dc05      	bgt.n	800ad70 <__sflush_r+0x20>
 800ad64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	dc02      	bgt.n	800ad70 <__sflush_r+0x20>
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad72:	2e00      	cmp	r6, #0
 800ad74:	d0f9      	beq.n	800ad6a <__sflush_r+0x1a>
 800ad76:	2300      	movs	r3, #0
 800ad78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad7c:	682f      	ldr	r7, [r5, #0]
 800ad7e:	602b      	str	r3, [r5, #0]
 800ad80:	d032      	beq.n	800ade8 <__sflush_r+0x98>
 800ad82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	075a      	lsls	r2, r3, #29
 800ad88:	d505      	bpl.n	800ad96 <__sflush_r+0x46>
 800ad8a:	6863      	ldr	r3, [r4, #4]
 800ad8c:	1ac0      	subs	r0, r0, r3
 800ad8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad90:	b10b      	cbz	r3, 800ad96 <__sflush_r+0x46>
 800ad92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad94:	1ac0      	subs	r0, r0, r3
 800ad96:	2300      	movs	r3, #0
 800ad98:	4602      	mov	r2, r0
 800ad9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad9c:	6a21      	ldr	r1, [r4, #32]
 800ad9e:	4628      	mov	r0, r5
 800ada0:	47b0      	blx	r6
 800ada2:	1c43      	adds	r3, r0, #1
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	d106      	bne.n	800adb6 <__sflush_r+0x66>
 800ada8:	6829      	ldr	r1, [r5, #0]
 800adaa:	291d      	cmp	r1, #29
 800adac:	d82c      	bhi.n	800ae08 <__sflush_r+0xb8>
 800adae:	4a2a      	ldr	r2, [pc, #168]	; (800ae58 <__sflush_r+0x108>)
 800adb0:	40ca      	lsrs	r2, r1
 800adb2:	07d6      	lsls	r6, r2, #31
 800adb4:	d528      	bpl.n	800ae08 <__sflush_r+0xb8>
 800adb6:	2200      	movs	r2, #0
 800adb8:	6062      	str	r2, [r4, #4]
 800adba:	04d9      	lsls	r1, r3, #19
 800adbc:	6922      	ldr	r2, [r4, #16]
 800adbe:	6022      	str	r2, [r4, #0]
 800adc0:	d504      	bpl.n	800adcc <__sflush_r+0x7c>
 800adc2:	1c42      	adds	r2, r0, #1
 800adc4:	d101      	bne.n	800adca <__sflush_r+0x7a>
 800adc6:	682b      	ldr	r3, [r5, #0]
 800adc8:	b903      	cbnz	r3, 800adcc <__sflush_r+0x7c>
 800adca:	6560      	str	r0, [r4, #84]	; 0x54
 800adcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adce:	602f      	str	r7, [r5, #0]
 800add0:	2900      	cmp	r1, #0
 800add2:	d0ca      	beq.n	800ad6a <__sflush_r+0x1a>
 800add4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800add8:	4299      	cmp	r1, r3
 800adda:	d002      	beq.n	800ade2 <__sflush_r+0x92>
 800addc:	4628      	mov	r0, r5
 800adde:	f7ff f9c1 	bl	800a164 <_free_r>
 800ade2:	2000      	movs	r0, #0
 800ade4:	6360      	str	r0, [r4, #52]	; 0x34
 800ade6:	e7c1      	b.n	800ad6c <__sflush_r+0x1c>
 800ade8:	6a21      	ldr	r1, [r4, #32]
 800adea:	2301      	movs	r3, #1
 800adec:	4628      	mov	r0, r5
 800adee:	47b0      	blx	r6
 800adf0:	1c41      	adds	r1, r0, #1
 800adf2:	d1c7      	bne.n	800ad84 <__sflush_r+0x34>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0c4      	beq.n	800ad84 <__sflush_r+0x34>
 800adfa:	2b1d      	cmp	r3, #29
 800adfc:	d001      	beq.n	800ae02 <__sflush_r+0xb2>
 800adfe:	2b16      	cmp	r3, #22
 800ae00:	d101      	bne.n	800ae06 <__sflush_r+0xb6>
 800ae02:	602f      	str	r7, [r5, #0]
 800ae04:	e7b1      	b.n	800ad6a <__sflush_r+0x1a>
 800ae06:	89a3      	ldrh	r3, [r4, #12]
 800ae08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae0c:	81a3      	strh	r3, [r4, #12]
 800ae0e:	e7ad      	b.n	800ad6c <__sflush_r+0x1c>
 800ae10:	690f      	ldr	r7, [r1, #16]
 800ae12:	2f00      	cmp	r7, #0
 800ae14:	d0a9      	beq.n	800ad6a <__sflush_r+0x1a>
 800ae16:	0793      	lsls	r3, r2, #30
 800ae18:	680e      	ldr	r6, [r1, #0]
 800ae1a:	bf08      	it	eq
 800ae1c:	694b      	ldreq	r3, [r1, #20]
 800ae1e:	600f      	str	r7, [r1, #0]
 800ae20:	bf18      	it	ne
 800ae22:	2300      	movne	r3, #0
 800ae24:	eba6 0807 	sub.w	r8, r6, r7
 800ae28:	608b      	str	r3, [r1, #8]
 800ae2a:	f1b8 0f00 	cmp.w	r8, #0
 800ae2e:	dd9c      	ble.n	800ad6a <__sflush_r+0x1a>
 800ae30:	6a21      	ldr	r1, [r4, #32]
 800ae32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae34:	4643      	mov	r3, r8
 800ae36:	463a      	mov	r2, r7
 800ae38:	4628      	mov	r0, r5
 800ae3a:	47b0      	blx	r6
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	dc06      	bgt.n	800ae4e <__sflush_r+0xfe>
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae46:	81a3      	strh	r3, [r4, #12]
 800ae48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae4c:	e78e      	b.n	800ad6c <__sflush_r+0x1c>
 800ae4e:	4407      	add	r7, r0
 800ae50:	eba8 0800 	sub.w	r8, r8, r0
 800ae54:	e7e9      	b.n	800ae2a <__sflush_r+0xda>
 800ae56:	bf00      	nop
 800ae58:	20400001 	.word	0x20400001

0800ae5c <_fflush_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	690b      	ldr	r3, [r1, #16]
 800ae60:	4605      	mov	r5, r0
 800ae62:	460c      	mov	r4, r1
 800ae64:	b913      	cbnz	r3, 800ae6c <_fflush_r+0x10>
 800ae66:	2500      	movs	r5, #0
 800ae68:	4628      	mov	r0, r5
 800ae6a:	bd38      	pop	{r3, r4, r5, pc}
 800ae6c:	b118      	cbz	r0, 800ae76 <_fflush_r+0x1a>
 800ae6e:	6983      	ldr	r3, [r0, #24]
 800ae70:	b90b      	cbnz	r3, 800ae76 <_fflush_r+0x1a>
 800ae72:	f000 f871 	bl	800af58 <__sinit>
 800ae76:	4b14      	ldr	r3, [pc, #80]	; (800aec8 <_fflush_r+0x6c>)
 800ae78:	429c      	cmp	r4, r3
 800ae7a:	d11b      	bne.n	800aeb4 <_fflush_r+0x58>
 800ae7c:	686c      	ldr	r4, [r5, #4]
 800ae7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0ef      	beq.n	800ae66 <_fflush_r+0xa>
 800ae86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae88:	07d0      	lsls	r0, r2, #31
 800ae8a:	d404      	bmi.n	800ae96 <_fflush_r+0x3a>
 800ae8c:	0599      	lsls	r1, r3, #22
 800ae8e:	d402      	bmi.n	800ae96 <_fflush_r+0x3a>
 800ae90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae92:	f7f7 fa49 	bl	8002328 <__retarget_lock_acquire_recursive>
 800ae96:	4628      	mov	r0, r5
 800ae98:	4621      	mov	r1, r4
 800ae9a:	f7ff ff59 	bl	800ad50 <__sflush_r>
 800ae9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aea0:	07da      	lsls	r2, r3, #31
 800aea2:	4605      	mov	r5, r0
 800aea4:	d4e0      	bmi.n	800ae68 <_fflush_r+0xc>
 800aea6:	89a3      	ldrh	r3, [r4, #12]
 800aea8:	059b      	lsls	r3, r3, #22
 800aeaa:	d4dd      	bmi.n	800ae68 <_fflush_r+0xc>
 800aeac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeae:	f7f7 fa41 	bl	8002334 <__retarget_lock_release_recursive>
 800aeb2:	e7d9      	b.n	800ae68 <_fflush_r+0xc>
 800aeb4:	4b05      	ldr	r3, [pc, #20]	; (800aecc <_fflush_r+0x70>)
 800aeb6:	429c      	cmp	r4, r3
 800aeb8:	d101      	bne.n	800aebe <_fflush_r+0x62>
 800aeba:	68ac      	ldr	r4, [r5, #8]
 800aebc:	e7df      	b.n	800ae7e <_fflush_r+0x22>
 800aebe:	4b04      	ldr	r3, [pc, #16]	; (800aed0 <_fflush_r+0x74>)
 800aec0:	429c      	cmp	r4, r3
 800aec2:	bf08      	it	eq
 800aec4:	68ec      	ldreq	r4, [r5, #12]
 800aec6:	e7da      	b.n	800ae7e <_fflush_r+0x22>
 800aec8:	0800c4c0 	.word	0x0800c4c0
 800aecc:	0800c4e0 	.word	0x0800c4e0
 800aed0:	0800c4a0 	.word	0x0800c4a0

0800aed4 <std>:
 800aed4:	2300      	movs	r3, #0
 800aed6:	b510      	push	{r4, lr}
 800aed8:	4604      	mov	r4, r0
 800aeda:	e9c0 3300 	strd	r3, r3, [r0]
 800aede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aee2:	6083      	str	r3, [r0, #8]
 800aee4:	8181      	strh	r1, [r0, #12]
 800aee6:	6643      	str	r3, [r0, #100]	; 0x64
 800aee8:	81c2      	strh	r2, [r0, #14]
 800aeea:	6183      	str	r3, [r0, #24]
 800aeec:	4619      	mov	r1, r3
 800aeee:	2208      	movs	r2, #8
 800aef0:	305c      	adds	r0, #92	; 0x5c
 800aef2:	f000 f983 	bl	800b1fc <memset>
 800aef6:	4b05      	ldr	r3, [pc, #20]	; (800af0c <std+0x38>)
 800aef8:	6263      	str	r3, [r4, #36]	; 0x24
 800aefa:	4b05      	ldr	r3, [pc, #20]	; (800af10 <std+0x3c>)
 800aefc:	62a3      	str	r3, [r4, #40]	; 0x28
 800aefe:	4b05      	ldr	r3, [pc, #20]	; (800af14 <std+0x40>)
 800af00:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af02:	4b05      	ldr	r3, [pc, #20]	; (800af18 <std+0x44>)
 800af04:	6224      	str	r4, [r4, #32]
 800af06:	6323      	str	r3, [r4, #48]	; 0x30
 800af08:	bd10      	pop	{r4, pc}
 800af0a:	bf00      	nop
 800af0c:	0800b65f 	.word	0x0800b65f
 800af10:	0800b681 	.word	0x0800b681
 800af14:	0800b6b9 	.word	0x0800b6b9
 800af18:	0800b6dd 	.word	0x0800b6dd

0800af1c <_cleanup_r>:
 800af1c:	4901      	ldr	r1, [pc, #4]	; (800af24 <_cleanup_r+0x8>)
 800af1e:	f000 baf0 	b.w	800b502 <_fwalk_reent>
 800af22:	bf00      	nop
 800af24:	0800ae5d 	.word	0x0800ae5d

0800af28 <__sfp_lock_acquire>:
 800af28:	4801      	ldr	r0, [pc, #4]	; (800af30 <__sfp_lock_acquire+0x8>)
 800af2a:	f7f7 b9fd 	b.w	8002328 <__retarget_lock_acquire_recursive>
 800af2e:	bf00      	nop
 800af30:	20000444 	.word	0x20000444

0800af34 <__sfp_lock_release>:
 800af34:	4801      	ldr	r0, [pc, #4]	; (800af3c <__sfp_lock_release+0x8>)
 800af36:	f7f7 b9fd 	b.w	8002334 <__retarget_lock_release_recursive>
 800af3a:	bf00      	nop
 800af3c:	20000444 	.word	0x20000444

0800af40 <__sinit_lock_acquire>:
 800af40:	4801      	ldr	r0, [pc, #4]	; (800af48 <__sinit_lock_acquire+0x8>)
 800af42:	f7f7 b9f1 	b.w	8002328 <__retarget_lock_acquire_recursive>
 800af46:	bf00      	nop
 800af48:	20000458 	.word	0x20000458

0800af4c <__sinit_lock_release>:
 800af4c:	4801      	ldr	r0, [pc, #4]	; (800af54 <__sinit_lock_release+0x8>)
 800af4e:	f7f7 b9f1 	b.w	8002334 <__retarget_lock_release_recursive>
 800af52:	bf00      	nop
 800af54:	20000458 	.word	0x20000458

0800af58 <__sinit>:
 800af58:	b510      	push	{r4, lr}
 800af5a:	4604      	mov	r4, r0
 800af5c:	f7ff fff0 	bl	800af40 <__sinit_lock_acquire>
 800af60:	69a3      	ldr	r3, [r4, #24]
 800af62:	b11b      	cbz	r3, 800af6c <__sinit+0x14>
 800af64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af68:	f7ff bff0 	b.w	800af4c <__sinit_lock_release>
 800af6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af70:	6523      	str	r3, [r4, #80]	; 0x50
 800af72:	4b13      	ldr	r3, [pc, #76]	; (800afc0 <__sinit+0x68>)
 800af74:	4a13      	ldr	r2, [pc, #76]	; (800afc4 <__sinit+0x6c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	62a2      	str	r2, [r4, #40]	; 0x28
 800af7a:	42a3      	cmp	r3, r4
 800af7c:	bf04      	itt	eq
 800af7e:	2301      	moveq	r3, #1
 800af80:	61a3      	streq	r3, [r4, #24]
 800af82:	4620      	mov	r0, r4
 800af84:	f000 f820 	bl	800afc8 <__sfp>
 800af88:	6060      	str	r0, [r4, #4]
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 f81c 	bl	800afc8 <__sfp>
 800af90:	60a0      	str	r0, [r4, #8]
 800af92:	4620      	mov	r0, r4
 800af94:	f000 f818 	bl	800afc8 <__sfp>
 800af98:	2200      	movs	r2, #0
 800af9a:	60e0      	str	r0, [r4, #12]
 800af9c:	2104      	movs	r1, #4
 800af9e:	6860      	ldr	r0, [r4, #4]
 800afa0:	f7ff ff98 	bl	800aed4 <std>
 800afa4:	68a0      	ldr	r0, [r4, #8]
 800afa6:	2201      	movs	r2, #1
 800afa8:	2109      	movs	r1, #9
 800afaa:	f7ff ff93 	bl	800aed4 <std>
 800afae:	68e0      	ldr	r0, [r4, #12]
 800afb0:	2202      	movs	r2, #2
 800afb2:	2112      	movs	r1, #18
 800afb4:	f7ff ff8e 	bl	800aed4 <std>
 800afb8:	2301      	movs	r3, #1
 800afba:	61a3      	str	r3, [r4, #24]
 800afbc:	e7d2      	b.n	800af64 <__sinit+0xc>
 800afbe:	bf00      	nop
 800afc0:	0800c49c 	.word	0x0800c49c
 800afc4:	0800af1d 	.word	0x0800af1d

0800afc8 <__sfp>:
 800afc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afca:	4607      	mov	r7, r0
 800afcc:	f7ff ffac 	bl	800af28 <__sfp_lock_acquire>
 800afd0:	4b1e      	ldr	r3, [pc, #120]	; (800b04c <__sfp+0x84>)
 800afd2:	681e      	ldr	r6, [r3, #0]
 800afd4:	69b3      	ldr	r3, [r6, #24]
 800afd6:	b913      	cbnz	r3, 800afde <__sfp+0x16>
 800afd8:	4630      	mov	r0, r6
 800afda:	f7ff ffbd 	bl	800af58 <__sinit>
 800afde:	3648      	adds	r6, #72	; 0x48
 800afe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	d503      	bpl.n	800aff0 <__sfp+0x28>
 800afe8:	6833      	ldr	r3, [r6, #0]
 800afea:	b30b      	cbz	r3, 800b030 <__sfp+0x68>
 800afec:	6836      	ldr	r6, [r6, #0]
 800afee:	e7f7      	b.n	800afe0 <__sfp+0x18>
 800aff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aff4:	b9d5      	cbnz	r5, 800b02c <__sfp+0x64>
 800aff6:	4b16      	ldr	r3, [pc, #88]	; (800b050 <__sfp+0x88>)
 800aff8:	60e3      	str	r3, [r4, #12]
 800affa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800affe:	6665      	str	r5, [r4, #100]	; 0x64
 800b000:	f7f7 f988 	bl	8002314 <__retarget_lock_init_recursive>
 800b004:	f7ff ff96 	bl	800af34 <__sfp_lock_release>
 800b008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b00c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b010:	6025      	str	r5, [r4, #0]
 800b012:	61a5      	str	r5, [r4, #24]
 800b014:	2208      	movs	r2, #8
 800b016:	4629      	mov	r1, r5
 800b018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b01c:	f000 f8ee 	bl	800b1fc <memset>
 800b020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b028:	4620      	mov	r0, r4
 800b02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b02c:	3468      	adds	r4, #104	; 0x68
 800b02e:	e7d9      	b.n	800afe4 <__sfp+0x1c>
 800b030:	2104      	movs	r1, #4
 800b032:	4638      	mov	r0, r7
 800b034:	f000 fa4f 	bl	800b4d6 <__sfmoreglue>
 800b038:	4604      	mov	r4, r0
 800b03a:	6030      	str	r0, [r6, #0]
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d1d5      	bne.n	800afec <__sfp+0x24>
 800b040:	f7ff ff78 	bl	800af34 <__sfp_lock_release>
 800b044:	230c      	movs	r3, #12
 800b046:	603b      	str	r3, [r7, #0]
 800b048:	e7ee      	b.n	800b028 <__sfp+0x60>
 800b04a:	bf00      	nop
 800b04c:	0800c49c 	.word	0x0800c49c
 800b050:	ffff0001 	.word	0xffff0001

0800b054 <__smakebuf_r>:
 800b054:	898b      	ldrh	r3, [r1, #12]
 800b056:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b058:	079d      	lsls	r5, r3, #30
 800b05a:	4606      	mov	r6, r0
 800b05c:	460c      	mov	r4, r1
 800b05e:	d507      	bpl.n	800b070 <__smakebuf_r+0x1c>
 800b060:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	6123      	str	r3, [r4, #16]
 800b068:	2301      	movs	r3, #1
 800b06a:	6163      	str	r3, [r4, #20]
 800b06c:	b002      	add	sp, #8
 800b06e:	bd70      	pop	{r4, r5, r6, pc}
 800b070:	ab01      	add	r3, sp, #4
 800b072:	466a      	mov	r2, sp
 800b074:	f000 fa64 	bl	800b540 <__swhatbuf_r>
 800b078:	9900      	ldr	r1, [sp, #0]
 800b07a:	4605      	mov	r5, r0
 800b07c:	4630      	mov	r0, r6
 800b07e:	f7ff f8bd 	bl	800a1fc <_malloc_r>
 800b082:	b948      	cbnz	r0, 800b098 <__smakebuf_r+0x44>
 800b084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b088:	059a      	lsls	r2, r3, #22
 800b08a:	d4ef      	bmi.n	800b06c <__smakebuf_r+0x18>
 800b08c:	f023 0303 	bic.w	r3, r3, #3
 800b090:	f043 0302 	orr.w	r3, r3, #2
 800b094:	81a3      	strh	r3, [r4, #12]
 800b096:	e7e3      	b.n	800b060 <__smakebuf_r+0xc>
 800b098:	4b0d      	ldr	r3, [pc, #52]	; (800b0d0 <__smakebuf_r+0x7c>)
 800b09a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	6020      	str	r0, [r4, #0]
 800b0a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0a4:	81a3      	strh	r3, [r4, #12]
 800b0a6:	9b00      	ldr	r3, [sp, #0]
 800b0a8:	6163      	str	r3, [r4, #20]
 800b0aa:	9b01      	ldr	r3, [sp, #4]
 800b0ac:	6120      	str	r0, [r4, #16]
 800b0ae:	b15b      	cbz	r3, 800b0c8 <__smakebuf_r+0x74>
 800b0b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f000 f85b 	bl	800b170 <_isatty_r>
 800b0ba:	b128      	cbz	r0, 800b0c8 <__smakebuf_r+0x74>
 800b0bc:	89a3      	ldrh	r3, [r4, #12]
 800b0be:	f023 0303 	bic.w	r3, r3, #3
 800b0c2:	f043 0301 	orr.w	r3, r3, #1
 800b0c6:	81a3      	strh	r3, [r4, #12]
 800b0c8:	89a0      	ldrh	r0, [r4, #12]
 800b0ca:	4305      	orrs	r5, r0
 800b0cc:	81a5      	strh	r5, [r4, #12]
 800b0ce:	e7cd      	b.n	800b06c <__smakebuf_r+0x18>
 800b0d0:	0800af1d 	.word	0x0800af1d

0800b0d4 <raise>:
 800b0d4:	4b02      	ldr	r3, [pc, #8]	; (800b0e0 <raise+0xc>)
 800b0d6:	4601      	mov	r1, r0
 800b0d8:	6818      	ldr	r0, [r3, #0]
 800b0da:	f000 ba96 	b.w	800b60a <_raise_r>
 800b0de:	bf00      	nop
 800b0e0:	20000330 	.word	0x20000330

0800b0e4 <_kill_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	4d07      	ldr	r5, [pc, #28]	; (800b104 <_kill_r+0x20>)
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	4608      	mov	r0, r1
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	602b      	str	r3, [r5, #0]
 800b0f2:	f7f7 f8d3 	bl	800229c <_kill>
 800b0f6:	1c43      	adds	r3, r0, #1
 800b0f8:	d102      	bne.n	800b100 <_kill_r+0x1c>
 800b0fa:	682b      	ldr	r3, [r5, #0]
 800b0fc:	b103      	cbz	r3, 800b100 <_kill_r+0x1c>
 800b0fe:	6023      	str	r3, [r4, #0]
 800b100:	bd38      	pop	{r3, r4, r5, pc}
 800b102:	bf00      	nop
 800b104:	20000e38 	.word	0x20000e38

0800b108 <_write_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4d07      	ldr	r5, [pc, #28]	; (800b128 <_write_r+0x20>)
 800b10c:	4604      	mov	r4, r0
 800b10e:	4608      	mov	r0, r1
 800b110:	4611      	mov	r1, r2
 800b112:	2200      	movs	r2, #0
 800b114:	602a      	str	r2, [r5, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	f7f7 f89c 	bl	8002254 <_write>
 800b11c:	1c43      	adds	r3, r0, #1
 800b11e:	d102      	bne.n	800b126 <_write_r+0x1e>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	b103      	cbz	r3, 800b126 <_write_r+0x1e>
 800b124:	6023      	str	r3, [r4, #0]
 800b126:	bd38      	pop	{r3, r4, r5, pc}
 800b128:	20000e38 	.word	0x20000e38

0800b12c <_close_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4d06      	ldr	r5, [pc, #24]	; (800b148 <_close_r+0x1c>)
 800b130:	2300      	movs	r3, #0
 800b132:	4604      	mov	r4, r0
 800b134:	4608      	mov	r0, r1
 800b136:	602b      	str	r3, [r5, #0]
 800b138:	f7f7 f8a4 	bl	8002284 <_close>
 800b13c:	1c43      	adds	r3, r0, #1
 800b13e:	d102      	bne.n	800b146 <_close_r+0x1a>
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	b103      	cbz	r3, 800b146 <_close_r+0x1a>
 800b144:	6023      	str	r3, [r4, #0]
 800b146:	bd38      	pop	{r3, r4, r5, pc}
 800b148:	20000e38 	.word	0x20000e38

0800b14c <_fstat_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	4d07      	ldr	r5, [pc, #28]	; (800b16c <_fstat_r+0x20>)
 800b150:	2300      	movs	r3, #0
 800b152:	4604      	mov	r4, r0
 800b154:	4608      	mov	r0, r1
 800b156:	4611      	mov	r1, r2
 800b158:	602b      	str	r3, [r5, #0]
 800b15a:	f7f7 f8a3 	bl	80022a4 <_fstat>
 800b15e:	1c43      	adds	r3, r0, #1
 800b160:	d102      	bne.n	800b168 <_fstat_r+0x1c>
 800b162:	682b      	ldr	r3, [r5, #0]
 800b164:	b103      	cbz	r3, 800b168 <_fstat_r+0x1c>
 800b166:	6023      	str	r3, [r4, #0]
 800b168:	bd38      	pop	{r3, r4, r5, pc}
 800b16a:	bf00      	nop
 800b16c:	20000e38 	.word	0x20000e38

0800b170 <_isatty_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4d06      	ldr	r5, [pc, #24]	; (800b18c <_isatty_r+0x1c>)
 800b174:	2300      	movs	r3, #0
 800b176:	4604      	mov	r4, r0
 800b178:	4608      	mov	r0, r1
 800b17a:	602b      	str	r3, [r5, #0]
 800b17c:	f7f7 f888 	bl	8002290 <_isatty>
 800b180:	1c43      	adds	r3, r0, #1
 800b182:	d102      	bne.n	800b18a <_isatty_r+0x1a>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	b103      	cbz	r3, 800b18a <_isatty_r+0x1a>
 800b188:	6023      	str	r3, [r4, #0]
 800b18a:	bd38      	pop	{r3, r4, r5, pc}
 800b18c:	20000e38 	.word	0x20000e38

0800b190 <_lseek_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	4d07      	ldr	r5, [pc, #28]	; (800b1b0 <_lseek_r+0x20>)
 800b194:	4604      	mov	r4, r0
 800b196:	4608      	mov	r0, r1
 800b198:	4611      	mov	r1, r2
 800b19a:	2200      	movs	r2, #0
 800b19c:	602a      	str	r2, [r5, #0]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	f7f7 f874 	bl	800228c <_lseek>
 800b1a4:	1c43      	adds	r3, r0, #1
 800b1a6:	d102      	bne.n	800b1ae <_lseek_r+0x1e>
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	b103      	cbz	r3, 800b1ae <_lseek_r+0x1e>
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	bd38      	pop	{r3, r4, r5, pc}
 800b1b0:	20000e38 	.word	0x20000e38

0800b1b4 <_read_r>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	4d07      	ldr	r5, [pc, #28]	; (800b1d4 <_read_r+0x20>)
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	4608      	mov	r0, r1
 800b1bc:	4611      	mov	r1, r2
 800b1be:	2200      	movs	r2, #0
 800b1c0:	602a      	str	r2, [r5, #0]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	f7f7 f826 	bl	8002214 <_read>
 800b1c8:	1c43      	adds	r3, r0, #1
 800b1ca:	d102      	bne.n	800b1d2 <_read_r+0x1e>
 800b1cc:	682b      	ldr	r3, [r5, #0]
 800b1ce:	b103      	cbz	r3, 800b1d2 <_read_r+0x1e>
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	bd38      	pop	{r3, r4, r5, pc}
 800b1d4:	20000e38 	.word	0x20000e38

0800b1d8 <atoi>:
 800b1d8:	220a      	movs	r2, #10
 800b1da:	2100      	movs	r1, #0
 800b1dc:	f7ff b92e 	b.w	800a43c <strtol>

0800b1e0 <memcpy>:
 800b1e0:	440a      	add	r2, r1
 800b1e2:	4291      	cmp	r1, r2
 800b1e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b1e8:	d100      	bne.n	800b1ec <memcpy+0xc>
 800b1ea:	4770      	bx	lr
 800b1ec:	b510      	push	{r4, lr}
 800b1ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1f6:	4291      	cmp	r1, r2
 800b1f8:	d1f9      	bne.n	800b1ee <memcpy+0xe>
 800b1fa:	bd10      	pop	{r4, pc}

0800b1fc <memset>:
 800b1fc:	4402      	add	r2, r0
 800b1fe:	4603      	mov	r3, r0
 800b200:	4293      	cmp	r3, r2
 800b202:	d100      	bne.n	800b206 <memset+0xa>
 800b204:	4770      	bx	lr
 800b206:	f803 1b01 	strb.w	r1, [r3], #1
 800b20a:	e7f9      	b.n	800b200 <memset+0x4>

0800b20c <__sprintf_chk>:
 800b20c:	b408      	push	{r3}
 800b20e:	b517      	push	{r0, r1, r2, r4, lr}
 800b210:	ab05      	add	r3, sp, #20
 800b212:	1e14      	subs	r4, r2, #0
 800b214:	f853 1b04 	ldr.w	r1, [r3], #4
 800b218:	9301      	str	r3, [sp, #4]
 800b21a:	da07      	bge.n	800b22c <__sprintf_chk+0x20>
 800b21c:	461a      	mov	r2, r3
 800b21e:	f7ff f93b 	bl	800a498 <vsiprintf>
 800b222:	b003      	add	sp, #12
 800b224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b228:	b001      	add	sp, #4
 800b22a:	4770      	bx	lr
 800b22c:	460a      	mov	r2, r1
 800b22e:	4621      	mov	r1, r4
 800b230:	f7ff f90e 	bl	800a450 <vsniprintf>
 800b234:	2800      	cmp	r0, #0
 800b236:	dbf4      	blt.n	800b222 <__sprintf_chk+0x16>
 800b238:	42a0      	cmp	r0, r4
 800b23a:	d3f2      	bcc.n	800b222 <__sprintf_chk+0x16>
 800b23c:	f7f7 f87e 	bl	800233c <__chk_fail>

0800b240 <__strtok_r>:
 800b240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b242:	b908      	cbnz	r0, 800b248 <__strtok_r+0x8>
 800b244:	6810      	ldr	r0, [r2, #0]
 800b246:	b188      	cbz	r0, 800b26c <__strtok_r+0x2c>
 800b248:	4604      	mov	r4, r0
 800b24a:	4620      	mov	r0, r4
 800b24c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b250:	460f      	mov	r7, r1
 800b252:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b256:	b91e      	cbnz	r6, 800b260 <__strtok_r+0x20>
 800b258:	b965      	cbnz	r5, 800b274 <__strtok_r+0x34>
 800b25a:	6015      	str	r5, [r2, #0]
 800b25c:	4628      	mov	r0, r5
 800b25e:	e005      	b.n	800b26c <__strtok_r+0x2c>
 800b260:	42b5      	cmp	r5, r6
 800b262:	d1f6      	bne.n	800b252 <__strtok_r+0x12>
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1f0      	bne.n	800b24a <__strtok_r+0xa>
 800b268:	6014      	str	r4, [r2, #0]
 800b26a:	7003      	strb	r3, [r0, #0]
 800b26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b26e:	461c      	mov	r4, r3
 800b270:	e00c      	b.n	800b28c <__strtok_r+0x4c>
 800b272:	b915      	cbnz	r5, 800b27a <__strtok_r+0x3a>
 800b274:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b278:	460e      	mov	r6, r1
 800b27a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b27e:	42ab      	cmp	r3, r5
 800b280:	d1f7      	bne.n	800b272 <__strtok_r+0x32>
 800b282:	2b00      	cmp	r3, #0
 800b284:	d0f3      	beq.n	800b26e <__strtok_r+0x2e>
 800b286:	2300      	movs	r3, #0
 800b288:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b28c:	6014      	str	r4, [r2, #0]
 800b28e:	e7ed      	b.n	800b26c <__strtok_r+0x2c>

0800b290 <_vsniprintf_r>:
 800b290:	b530      	push	{r4, r5, lr}
 800b292:	4614      	mov	r4, r2
 800b294:	2c00      	cmp	r4, #0
 800b296:	b09b      	sub	sp, #108	; 0x6c
 800b298:	4605      	mov	r5, r0
 800b29a:	461a      	mov	r2, r3
 800b29c:	da05      	bge.n	800b2aa <_vsniprintf_r+0x1a>
 800b29e:	238b      	movs	r3, #139	; 0x8b
 800b2a0:	6003      	str	r3, [r0, #0]
 800b2a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2a6:	b01b      	add	sp, #108	; 0x6c
 800b2a8:	bd30      	pop	{r4, r5, pc}
 800b2aa:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b2ae:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b2b2:	bf14      	ite	ne
 800b2b4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b2b8:	4623      	moveq	r3, r4
 800b2ba:	9302      	str	r3, [sp, #8]
 800b2bc:	9305      	str	r3, [sp, #20]
 800b2be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2c2:	9100      	str	r1, [sp, #0]
 800b2c4:	9104      	str	r1, [sp, #16]
 800b2c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b2ca:	4669      	mov	r1, sp
 800b2cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b2ce:	f7ff f929 	bl	800a524 <_svfiprintf_r>
 800b2d2:	1c43      	adds	r3, r0, #1
 800b2d4:	bfbc      	itt	lt
 800b2d6:	238b      	movlt	r3, #139	; 0x8b
 800b2d8:	602b      	strlt	r3, [r5, #0]
 800b2da:	2c00      	cmp	r4, #0
 800b2dc:	d0e3      	beq.n	800b2a6 <_vsniprintf_r+0x16>
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	701a      	strb	r2, [r3, #0]
 800b2e4:	e7df      	b.n	800b2a6 <_vsniprintf_r+0x16>

0800b2e6 <__ssputs_r>:
 800b2e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2ea:	688e      	ldr	r6, [r1, #8]
 800b2ec:	429e      	cmp	r6, r3
 800b2ee:	4682      	mov	sl, r0
 800b2f0:	460c      	mov	r4, r1
 800b2f2:	4690      	mov	r8, r2
 800b2f4:	461f      	mov	r7, r3
 800b2f6:	d838      	bhi.n	800b36a <__ssputs_r+0x84>
 800b2f8:	898a      	ldrh	r2, [r1, #12]
 800b2fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2fe:	d032      	beq.n	800b366 <__ssputs_r+0x80>
 800b300:	6825      	ldr	r5, [r4, #0]
 800b302:	6909      	ldr	r1, [r1, #16]
 800b304:	eba5 0901 	sub.w	r9, r5, r1
 800b308:	6965      	ldr	r5, [r4, #20]
 800b30a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b30e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b312:	3301      	adds	r3, #1
 800b314:	444b      	add	r3, r9
 800b316:	106d      	asrs	r5, r5, #1
 800b318:	429d      	cmp	r5, r3
 800b31a:	bf38      	it	cc
 800b31c:	461d      	movcc	r5, r3
 800b31e:	0553      	lsls	r3, r2, #21
 800b320:	d531      	bpl.n	800b386 <__ssputs_r+0xa0>
 800b322:	4629      	mov	r1, r5
 800b324:	f7fe ff6a 	bl	800a1fc <_malloc_r>
 800b328:	4606      	mov	r6, r0
 800b32a:	b950      	cbnz	r0, 800b342 <__ssputs_r+0x5c>
 800b32c:	230c      	movs	r3, #12
 800b32e:	f8ca 3000 	str.w	r3, [sl]
 800b332:	89a3      	ldrh	r3, [r4, #12]
 800b334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b338:	81a3      	strh	r3, [r4, #12]
 800b33a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b342:	6921      	ldr	r1, [r4, #16]
 800b344:	464a      	mov	r2, r9
 800b346:	f7ff ff4b 	bl	800b1e0 <memcpy>
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b354:	81a3      	strh	r3, [r4, #12]
 800b356:	6126      	str	r6, [r4, #16]
 800b358:	6165      	str	r5, [r4, #20]
 800b35a:	444e      	add	r6, r9
 800b35c:	eba5 0509 	sub.w	r5, r5, r9
 800b360:	6026      	str	r6, [r4, #0]
 800b362:	60a5      	str	r5, [r4, #8]
 800b364:	463e      	mov	r6, r7
 800b366:	42be      	cmp	r6, r7
 800b368:	d900      	bls.n	800b36c <__ssputs_r+0x86>
 800b36a:	463e      	mov	r6, r7
 800b36c:	6820      	ldr	r0, [r4, #0]
 800b36e:	4632      	mov	r2, r6
 800b370:	4641      	mov	r1, r8
 800b372:	f000 f90a 	bl	800b58a <memmove>
 800b376:	68a3      	ldr	r3, [r4, #8]
 800b378:	1b9b      	subs	r3, r3, r6
 800b37a:	60a3      	str	r3, [r4, #8]
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	4433      	add	r3, r6
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	2000      	movs	r0, #0
 800b384:	e7db      	b.n	800b33e <__ssputs_r+0x58>
 800b386:	462a      	mov	r2, r5
 800b388:	f000 f919 	bl	800b5be <_realloc_r>
 800b38c:	4606      	mov	r6, r0
 800b38e:	2800      	cmp	r0, #0
 800b390:	d1e1      	bne.n	800b356 <__ssputs_r+0x70>
 800b392:	6921      	ldr	r1, [r4, #16]
 800b394:	4650      	mov	r0, sl
 800b396:	f7fe fee5 	bl	800a164 <_free_r>
 800b39a:	e7c7      	b.n	800b32c <__ssputs_r+0x46>

0800b39c <__sfputc_r>:
 800b39c:	6893      	ldr	r3, [r2, #8]
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	b410      	push	{r4}
 800b3a4:	6093      	str	r3, [r2, #8]
 800b3a6:	da08      	bge.n	800b3ba <__sfputc_r+0x1e>
 800b3a8:	6994      	ldr	r4, [r2, #24]
 800b3aa:	42a3      	cmp	r3, r4
 800b3ac:	db01      	blt.n	800b3b2 <__sfputc_r+0x16>
 800b3ae:	290a      	cmp	r1, #10
 800b3b0:	d103      	bne.n	800b3ba <__sfputc_r+0x1e>
 800b3b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3b6:	f7ff bc0b 	b.w	800abd0 <__swbuf_r>
 800b3ba:	6813      	ldr	r3, [r2, #0]
 800b3bc:	1c58      	adds	r0, r3, #1
 800b3be:	6010      	str	r0, [r2, #0]
 800b3c0:	7019      	strb	r1, [r3, #0]
 800b3c2:	4608      	mov	r0, r1
 800b3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <__sfputs_r>:
 800b3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3cc:	4606      	mov	r6, r0
 800b3ce:	460f      	mov	r7, r1
 800b3d0:	4614      	mov	r4, r2
 800b3d2:	18d5      	adds	r5, r2, r3
 800b3d4:	42ac      	cmp	r4, r5
 800b3d6:	d101      	bne.n	800b3dc <__sfputs_r+0x12>
 800b3d8:	2000      	movs	r0, #0
 800b3da:	e007      	b.n	800b3ec <__sfputs_r+0x22>
 800b3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e0:	463a      	mov	r2, r7
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f7ff ffda 	bl	800b39c <__sfputc_r>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d1f3      	bne.n	800b3d4 <__sfputs_r+0xa>
 800b3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3ee <_printf_common>:
 800b3ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f2:	4616      	mov	r6, r2
 800b3f4:	4699      	mov	r9, r3
 800b3f6:	688a      	ldr	r2, [r1, #8]
 800b3f8:	690b      	ldr	r3, [r1, #16]
 800b3fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3fe:	4293      	cmp	r3, r2
 800b400:	bfb8      	it	lt
 800b402:	4613      	movlt	r3, r2
 800b404:	6033      	str	r3, [r6, #0]
 800b406:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b40a:	4607      	mov	r7, r0
 800b40c:	460c      	mov	r4, r1
 800b40e:	b10a      	cbz	r2, 800b414 <_printf_common+0x26>
 800b410:	3301      	adds	r3, #1
 800b412:	6033      	str	r3, [r6, #0]
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	0699      	lsls	r1, r3, #26
 800b418:	bf42      	ittt	mi
 800b41a:	6833      	ldrmi	r3, [r6, #0]
 800b41c:	3302      	addmi	r3, #2
 800b41e:	6033      	strmi	r3, [r6, #0]
 800b420:	6825      	ldr	r5, [r4, #0]
 800b422:	f015 0506 	ands.w	r5, r5, #6
 800b426:	d106      	bne.n	800b436 <_printf_common+0x48>
 800b428:	f104 0a19 	add.w	sl, r4, #25
 800b42c:	68e3      	ldr	r3, [r4, #12]
 800b42e:	6832      	ldr	r2, [r6, #0]
 800b430:	1a9b      	subs	r3, r3, r2
 800b432:	42ab      	cmp	r3, r5
 800b434:	dc26      	bgt.n	800b484 <_printf_common+0x96>
 800b436:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b43a:	1e13      	subs	r3, r2, #0
 800b43c:	6822      	ldr	r2, [r4, #0]
 800b43e:	bf18      	it	ne
 800b440:	2301      	movne	r3, #1
 800b442:	0692      	lsls	r2, r2, #26
 800b444:	d42b      	bmi.n	800b49e <_printf_common+0xb0>
 800b446:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b44a:	4649      	mov	r1, r9
 800b44c:	4638      	mov	r0, r7
 800b44e:	47c0      	blx	r8
 800b450:	3001      	adds	r0, #1
 800b452:	d01e      	beq.n	800b492 <_printf_common+0xa4>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	68e5      	ldr	r5, [r4, #12]
 800b458:	6832      	ldr	r2, [r6, #0]
 800b45a:	f003 0306 	and.w	r3, r3, #6
 800b45e:	2b04      	cmp	r3, #4
 800b460:	bf08      	it	eq
 800b462:	1aad      	subeq	r5, r5, r2
 800b464:	68a3      	ldr	r3, [r4, #8]
 800b466:	6922      	ldr	r2, [r4, #16]
 800b468:	bf0c      	ite	eq
 800b46a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b46e:	2500      	movne	r5, #0
 800b470:	4293      	cmp	r3, r2
 800b472:	bfc4      	itt	gt
 800b474:	1a9b      	subgt	r3, r3, r2
 800b476:	18ed      	addgt	r5, r5, r3
 800b478:	2600      	movs	r6, #0
 800b47a:	341a      	adds	r4, #26
 800b47c:	42b5      	cmp	r5, r6
 800b47e:	d11a      	bne.n	800b4b6 <_printf_common+0xc8>
 800b480:	2000      	movs	r0, #0
 800b482:	e008      	b.n	800b496 <_printf_common+0xa8>
 800b484:	2301      	movs	r3, #1
 800b486:	4652      	mov	r2, sl
 800b488:	4649      	mov	r1, r9
 800b48a:	4638      	mov	r0, r7
 800b48c:	47c0      	blx	r8
 800b48e:	3001      	adds	r0, #1
 800b490:	d103      	bne.n	800b49a <_printf_common+0xac>
 800b492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b49a:	3501      	adds	r5, #1
 800b49c:	e7c6      	b.n	800b42c <_printf_common+0x3e>
 800b49e:	18e1      	adds	r1, r4, r3
 800b4a0:	1c5a      	adds	r2, r3, #1
 800b4a2:	2030      	movs	r0, #48	; 0x30
 800b4a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4a8:	4422      	add	r2, r4
 800b4aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4b2:	3302      	adds	r3, #2
 800b4b4:	e7c7      	b.n	800b446 <_printf_common+0x58>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	4622      	mov	r2, r4
 800b4ba:	4649      	mov	r1, r9
 800b4bc:	4638      	mov	r0, r7
 800b4be:	47c0      	blx	r8
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	d0e6      	beq.n	800b492 <_printf_common+0xa4>
 800b4c4:	3601      	adds	r6, #1
 800b4c6:	e7d9      	b.n	800b47c <_printf_common+0x8e>

0800b4c8 <abort>:
 800b4c8:	b508      	push	{r3, lr}
 800b4ca:	2006      	movs	r0, #6
 800b4cc:	f7ff fe02 	bl	800b0d4 <raise>
 800b4d0:	2001      	movs	r0, #1
 800b4d2:	f7f6 feed 	bl	80022b0 <_exit>

0800b4d6 <__sfmoreglue>:
 800b4d6:	b570      	push	{r4, r5, r6, lr}
 800b4d8:	2268      	movs	r2, #104	; 0x68
 800b4da:	1e4d      	subs	r5, r1, #1
 800b4dc:	4355      	muls	r5, r2
 800b4de:	460e      	mov	r6, r1
 800b4e0:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4e4:	f7fe fe8a 	bl	800a1fc <_malloc_r>
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	b140      	cbz	r0, 800b4fe <__sfmoreglue+0x28>
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	e9c0 1600 	strd	r1, r6, [r0]
 800b4f2:	300c      	adds	r0, #12
 800b4f4:	60a0      	str	r0, [r4, #8]
 800b4f6:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4fa:	f7ff fe7f 	bl	800b1fc <memset>
 800b4fe:	4620      	mov	r0, r4
 800b500:	bd70      	pop	{r4, r5, r6, pc}

0800b502 <_fwalk_reent>:
 800b502:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b506:	4606      	mov	r6, r0
 800b508:	4688      	mov	r8, r1
 800b50a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b50e:	2700      	movs	r7, #0
 800b510:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b514:	f1b9 0901 	subs.w	r9, r9, #1
 800b518:	d505      	bpl.n	800b526 <_fwalk_reent+0x24>
 800b51a:	6824      	ldr	r4, [r4, #0]
 800b51c:	2c00      	cmp	r4, #0
 800b51e:	d1f7      	bne.n	800b510 <_fwalk_reent+0xe>
 800b520:	4638      	mov	r0, r7
 800b522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b526:	89ab      	ldrh	r3, [r5, #12]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d907      	bls.n	800b53c <_fwalk_reent+0x3a>
 800b52c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b530:	3301      	adds	r3, #1
 800b532:	d003      	beq.n	800b53c <_fwalk_reent+0x3a>
 800b534:	4629      	mov	r1, r5
 800b536:	4630      	mov	r0, r6
 800b538:	47c0      	blx	r8
 800b53a:	4307      	orrs	r7, r0
 800b53c:	3568      	adds	r5, #104	; 0x68
 800b53e:	e7e9      	b.n	800b514 <_fwalk_reent+0x12>

0800b540 <__swhatbuf_r>:
 800b540:	b570      	push	{r4, r5, r6, lr}
 800b542:	460e      	mov	r6, r1
 800b544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b548:	2900      	cmp	r1, #0
 800b54a:	b096      	sub	sp, #88	; 0x58
 800b54c:	4614      	mov	r4, r2
 800b54e:	461d      	mov	r5, r3
 800b550:	da08      	bge.n	800b564 <__swhatbuf_r+0x24>
 800b552:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	602a      	str	r2, [r5, #0]
 800b55a:	061a      	lsls	r2, r3, #24
 800b55c:	d410      	bmi.n	800b580 <__swhatbuf_r+0x40>
 800b55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b562:	e00e      	b.n	800b582 <__swhatbuf_r+0x42>
 800b564:	466a      	mov	r2, sp
 800b566:	f7ff fdf1 	bl	800b14c <_fstat_r>
 800b56a:	2800      	cmp	r0, #0
 800b56c:	dbf1      	blt.n	800b552 <__swhatbuf_r+0x12>
 800b56e:	9a01      	ldr	r2, [sp, #4]
 800b570:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b574:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b578:	425a      	negs	r2, r3
 800b57a:	415a      	adcs	r2, r3
 800b57c:	602a      	str	r2, [r5, #0]
 800b57e:	e7ee      	b.n	800b55e <__swhatbuf_r+0x1e>
 800b580:	2340      	movs	r3, #64	; 0x40
 800b582:	2000      	movs	r0, #0
 800b584:	6023      	str	r3, [r4, #0]
 800b586:	b016      	add	sp, #88	; 0x58
 800b588:	bd70      	pop	{r4, r5, r6, pc}

0800b58a <memmove>:
 800b58a:	4288      	cmp	r0, r1
 800b58c:	b510      	push	{r4, lr}
 800b58e:	eb01 0402 	add.w	r4, r1, r2
 800b592:	d902      	bls.n	800b59a <memmove+0x10>
 800b594:	4284      	cmp	r4, r0
 800b596:	4623      	mov	r3, r4
 800b598:	d807      	bhi.n	800b5aa <memmove+0x20>
 800b59a:	1e43      	subs	r3, r0, #1
 800b59c:	42a1      	cmp	r1, r4
 800b59e:	d008      	beq.n	800b5b2 <memmove+0x28>
 800b5a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5a8:	e7f8      	b.n	800b59c <memmove+0x12>
 800b5aa:	4402      	add	r2, r0
 800b5ac:	4601      	mov	r1, r0
 800b5ae:	428a      	cmp	r2, r1
 800b5b0:	d100      	bne.n	800b5b4 <memmove+0x2a>
 800b5b2:	bd10      	pop	{r4, pc}
 800b5b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5bc:	e7f7      	b.n	800b5ae <memmove+0x24>

0800b5be <_realloc_r>:
 800b5be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c0:	4607      	mov	r7, r0
 800b5c2:	4614      	mov	r4, r2
 800b5c4:	460e      	mov	r6, r1
 800b5c6:	b921      	cbnz	r1, 800b5d2 <_realloc_r+0x14>
 800b5c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	f7fe be15 	b.w	800a1fc <_malloc_r>
 800b5d2:	b922      	cbnz	r2, 800b5de <_realloc_r+0x20>
 800b5d4:	f7fe fdc6 	bl	800a164 <_free_r>
 800b5d8:	4625      	mov	r5, r4
 800b5da:	4628      	mov	r0, r5
 800b5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5de:	f000 f881 	bl	800b6e4 <_malloc_usable_size_r>
 800b5e2:	42a0      	cmp	r0, r4
 800b5e4:	d20f      	bcs.n	800b606 <_realloc_r+0x48>
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4638      	mov	r0, r7
 800b5ea:	f7fe fe07 	bl	800a1fc <_malloc_r>
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	d0f2      	beq.n	800b5da <_realloc_r+0x1c>
 800b5f4:	4631      	mov	r1, r6
 800b5f6:	4622      	mov	r2, r4
 800b5f8:	f7ff fdf2 	bl	800b1e0 <memcpy>
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4638      	mov	r0, r7
 800b600:	f7fe fdb0 	bl	800a164 <_free_r>
 800b604:	e7e9      	b.n	800b5da <_realloc_r+0x1c>
 800b606:	4635      	mov	r5, r6
 800b608:	e7e7      	b.n	800b5da <_realloc_r+0x1c>

0800b60a <_raise_r>:
 800b60a:	291f      	cmp	r1, #31
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4604      	mov	r4, r0
 800b610:	460d      	mov	r5, r1
 800b612:	d904      	bls.n	800b61e <_raise_r+0x14>
 800b614:	2316      	movs	r3, #22
 800b616:	6003      	str	r3, [r0, #0]
 800b618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b61c:	bd38      	pop	{r3, r4, r5, pc}
 800b61e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b620:	b112      	cbz	r2, 800b628 <_raise_r+0x1e>
 800b622:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b626:	b94b      	cbnz	r3, 800b63c <_raise_r+0x32>
 800b628:	4620      	mov	r0, r4
 800b62a:	f000 f816 	bl	800b65a <_getpid_r>
 800b62e:	462a      	mov	r2, r5
 800b630:	4601      	mov	r1, r0
 800b632:	4620      	mov	r0, r4
 800b634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b638:	f7ff bd54 	b.w	800b0e4 <_kill_r>
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d00a      	beq.n	800b656 <_raise_r+0x4c>
 800b640:	1c59      	adds	r1, r3, #1
 800b642:	d103      	bne.n	800b64c <_raise_r+0x42>
 800b644:	2316      	movs	r3, #22
 800b646:	6003      	str	r3, [r0, #0]
 800b648:	2001      	movs	r0, #1
 800b64a:	e7e7      	b.n	800b61c <_raise_r+0x12>
 800b64c:	2400      	movs	r4, #0
 800b64e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b652:	4628      	mov	r0, r5
 800b654:	4798      	blx	r3
 800b656:	2000      	movs	r0, #0
 800b658:	e7e0      	b.n	800b61c <_raise_r+0x12>

0800b65a <_getpid_r>:
 800b65a:	f7f6 be21 	b.w	80022a0 <_getpid>

0800b65e <__sread>:
 800b65e:	b510      	push	{r4, lr}
 800b660:	460c      	mov	r4, r1
 800b662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b666:	f7ff fda5 	bl	800b1b4 <_read_r>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	bfab      	itete	ge
 800b66e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b670:	89a3      	ldrhlt	r3, [r4, #12]
 800b672:	181b      	addge	r3, r3, r0
 800b674:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b678:	bfac      	ite	ge
 800b67a:	6563      	strge	r3, [r4, #84]	; 0x54
 800b67c:	81a3      	strhlt	r3, [r4, #12]
 800b67e:	bd10      	pop	{r4, pc}

0800b680 <__swrite>:
 800b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b684:	461f      	mov	r7, r3
 800b686:	898b      	ldrh	r3, [r1, #12]
 800b688:	05db      	lsls	r3, r3, #23
 800b68a:	4605      	mov	r5, r0
 800b68c:	460c      	mov	r4, r1
 800b68e:	4616      	mov	r6, r2
 800b690:	d505      	bpl.n	800b69e <__swrite+0x1e>
 800b692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b696:	2302      	movs	r3, #2
 800b698:	2200      	movs	r2, #0
 800b69a:	f7ff fd79 	bl	800b190 <_lseek_r>
 800b69e:	89a3      	ldrh	r3, [r4, #12]
 800b6a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6a8:	81a3      	strh	r3, [r4, #12]
 800b6aa:	4632      	mov	r2, r6
 800b6ac:	463b      	mov	r3, r7
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b4:	f7ff bd28 	b.w	800b108 <_write_r>

0800b6b8 <__sseek>:
 800b6b8:	b510      	push	{r4, lr}
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c0:	f7ff fd66 	bl	800b190 <_lseek_r>
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	bf15      	itete	ne
 800b6ca:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6cc:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6d0:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6d4:	81a3      	strheq	r3, [r4, #12]
 800b6d6:	bf18      	it	ne
 800b6d8:	81a3      	strhne	r3, [r4, #12]
 800b6da:	bd10      	pop	{r4, pc}

0800b6dc <__sclose>:
 800b6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e0:	f7ff bd24 	b.w	800b12c <_close_r>

0800b6e4 <_malloc_usable_size_r>:
 800b6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6e8:	1f18      	subs	r0, r3, #4
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	bfbc      	itt	lt
 800b6ee:	580b      	ldrlt	r3, [r1, r0]
 800b6f0:	18c0      	addlt	r0, r0, r3
 800b6f2:	4770      	bx	lr
